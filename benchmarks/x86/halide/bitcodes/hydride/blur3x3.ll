; ModuleID = 'blur3x3'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64--linux-gnu"

%struct.timespec = type { i64, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i64, i64 }

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = comdat any

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@halide_reference_clock_inited = linkonce local_unnamed_addr global i8 0, align 1
@halide_reference_clock = linkonce global %struct.timespec zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant [4 x i64*] zeroinitializer
@str = private constant [6 x i8] c"input\00", align 32
@1 = private constant [4 x i64*] zeroinitializer
@str.200 = private constant [7 x i8] c"blur_y\00", align 32
@2 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @0, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @1, i32 0, i32 0) }]
@str.201 = private constant [64 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_asserts-no_bounds_query-sse41\00", align 32
@str.202 = private constant [8 x i8] c"blur3x3\00", align 32
@blur3x3_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @2, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 64
  %call1 = tail call i8* @malloc(i64 %add) #16
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 71
  %and = and i64 %sub, -64
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #16
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #16
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #16
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #16
  call void @halide_print(i8* %user_context, i8* nonnull %0) #16
  call void @abort() #16
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @halide_reference_clock_inited, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i32, ...) @syscall(i32 228, i32 0, %struct.timespec* nonnull @halide_reference_clock) #16
  store i8 1, i8* @halide_reference_clock_inited, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @syscall(i32, ...) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %now = alloca <2 x i64>, align 16
  %0 = bitcast <2 x i64>* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  %call = call i32 (i32, ...) @syscall(i32 228, i32 0, <2 x i64>* nonnull %now) #16
  %1 = load <2 x i64>, <2 x i64>* %now, align 16, !tbaa !18
  %2 = load <2 x i64>, <2 x i64>* bitcast (%struct.timespec* @halide_reference_clock to <2 x i64>*), align 8, !tbaa !18
  %3 = sub <2 x i64> %1, %2
  %4 = extractelement <2 x i64> %3, i32 0
  %mul = mul nsw i64 %4, 1000000000
  %5 = extractelement <2 x i64> %3, i32 1
  %add = add nsw i64 %mul, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i64 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #16
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #16
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #16
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 84) #16
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @sched_yield() #16
  ret void
}

declare i32 @sched_yield() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !24
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !25
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !26
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !27
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !28
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !29
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !30
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !31
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #17
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #17
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* %exit_status, align 4, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #16
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !41
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #16
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !49

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %6 = icmp eq i32 %num_jobs, 1
  br i1 %6, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %workers_to_wake.1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %add.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %stealable_jobs.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %job_may_block.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %spec.select.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %indvars.iv193.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187.unr = phi i32 [ 0, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185.unr = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184.unr = phi i8 [ 0, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183.unr = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182.unr = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup.loopexit, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %min_threads5.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 7
  %7 = load i32, i32* %min_threads5.epil, align 4, !tbaa !30
  %cmp6.epil = icmp eq i32 %7, 0
  %add.epil = add i32 %7, %min_threads.0187.unr
  %stealable_jobs.1.epil = select i1 %cmp6.epil, i8 1, i8 %stealable_jobs.0183.unr
  %job_may_block.1.epil = select i1 %cmp6.epil, i8 %job_may_block.0185.unr, i8 1
  %num_semaphores.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 4
  %8 = load i32, i32* %num_semaphores.epil, align 8, !tbaa !28
  %cmp16.not.epil = icmp eq i32 %8, 0
  %spec.select.epil = select i1 %cmp16.not.epil, i8 %job_has_acquires.0184.unr, i8 1
  %serial.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 8
  %9 = load i8, i8* %serial.epil, align 8, !tbaa !26, !range !17
  %tobool22.not.epil = icmp eq i8 %9, 0
  br i1 %tobool22.not.epil, label %if.else24.epil, label %if.then23.epil

if.then23.epil:                                   ; preds = %for.body.epil
  %inc.epil = add nsw i32 %workers_to_wake.0182.unr, 1
  br label %for.cond.cleanup.loopexit

if.else24.epil:                                   ; preds = %for.body.epil
  %extent.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 6
  %10 = load i32, i32* %extent.epil, align 8, !tbaa !25
  %add28.epil = add nsw i32 %10, %workers_to_wake.0182.unr
  br label %for.cond.cleanup.loopexit

for.cond.cleanup.loopexit:                        ; preds = %if.else24.epil, %if.then23.epil, %for.cond.cleanup.loopexit.unr-lcssa
  %workers_to_wake.1.lcssa = phi i32 [ %workers_to_wake.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then23.epil ], [ %add28.epil, %if.else24.epil ]
  %add.lcssa = phi i32 [ %add.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add.epil, %if.then23.epil ], [ %add.epil, %if.else24.epil ]
  %stealable_jobs.1.lcssa = phi i8 [ %stealable_jobs.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %stealable_jobs.1.epil, %if.then23.epil ], [ %stealable_jobs.1.epil, %if.else24.epil ]
  %job_may_block.1.lcssa = phi i8 [ %job_may_block.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %job_may_block.1.epil, %if.then23.epil ], [ %job_may_block.1.epil, %if.else24.epil ]
  %spec.select.lcssa = phi i8 [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %if.then23.epil ], [ %spec.select.epil, %if.else24.epil ]
  %phi.bo = and i8 %stealable_jobs.1.lcssa, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1.lcssa, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1.lcssa, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add.lcssa, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader.new ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader.new ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader.new ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader.new ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader.new ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %11 = load i32, i32* %min_threads5, align 4, !tbaa !30
  %cmp6 = icmp eq i32 %11, 0
  %add = add i32 %11, %min_threads.0187
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %12 = load i32, i32* %num_semaphores, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %13 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool22.not = icmp eq i8 %13, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %14 = load i32, i32* %extent, align 8, !tbaa !25
  %add28 = add nsw i32 %14, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = or i64 %indvars.iv193, 1
  %min_threads5.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 7
  %15 = load i32, i32* %min_threads5.1, align 4, !tbaa !30
  %cmp6.1 = icmp eq i32 %15, 0
  %add.1 = add i32 %15, %add
  %16 = or i1 %cmp6.1, %cmp6
  %stealable_jobs.1.1 = select i1 %16, i8 1, i8 %stealable_jobs.0183
  %17 = or i32 %15, %11
  %18 = icmp eq i32 %17, 0
  %job_may_block.1.1 = select i1 %18, i8 %job_may_block.0185, i8 1
  %num_semaphores.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 4
  %19 = load i32, i32* %num_semaphores.1, align 8, !tbaa !28
  %20 = or i32 %19, %12
  %21 = icmp eq i32 %20, 0
  %spec.select.1 = select i1 %21, i8 %job_has_acquires.0184, i8 1
  %serial.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 8
  %22 = load i8, i8* %serial.1, align 8, !tbaa !26, !range !17
  %tobool22.not.1 = icmp eq i8 %22, 0
  br i1 %tobool22.not.1, label %if.else24.1, label %if.then23.1

if.then32:                                        ; preds = %for.cond.cleanup
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  %not. = xor i1 %25, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %26 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp38180 = icmp slt i32 %26, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %27 = phi i32 [ %inc45, %while.body ], [ %26, %if.then32 ]
  %28 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %sub = add nsw i32 %28, -1
  %cmp39 = icmp slt i32 %27, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %27, 1
  %29 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub41 = sub i32 %add40, %29
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %30 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc43 = add nsw i32 %30, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #17
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %inc45 = add nsw i32 %31, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %idxprom46 = sext i32 %31 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %31, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !55

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %25, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %inc55 = add nsw i32 %32, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %33 = load i32, i32* %min_threads63, align 4, !tbaa !30
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %34 = load i32, i32* %active_workers, align 8, !tbaa !35
  %mul = mul nsw i32 %34, %33
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub64 = sub nsw i32 %mul, %35
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %36 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %37 = and i8 %36, 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %39 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %inc75 = add nsw i32 %39, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !56
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %40 = zext i32 %num_jobs to i64
  %xtraiter3 = and i64 %40, 1
  %lcmp.mod4.not = icmp eq i64 %xtraiter3, 0
  br i1 %lcmp.mod4.not, label %for.body83.prol.loopexit, label %for.body83.prol

for.body83.prol:                                  ; preds = %for.body83.lr.ph
  %indvars.iv.next.prol = add nsw i64 %40, -1
  %arrayidx85.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol
  %next_job.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %.promoted, %"struct.Halide::Runtime::Internal::work"** %next_job.prol, align 8, !tbaa !58
  %siblings.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.prol, align 8, !tbaa !38
  %sibling_count.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 4
  store i32 %num_jobs, i32* %sibling_count.prol, align 8, !tbaa !39
  %threads_reserved93.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 6
  store i32 0, i32* %threads_reserved93.prol, align 8, !tbaa !56
  br label %for.body83.prol.loopexit

for.body83.prol.loopexit:                         ; preds = %for.body83.prol, %for.body83.lr.ph
  %indvars.iv.unr = phi i64 [ %40, %for.body83.lr.ph ], [ %indvars.iv.next.prol, %for.body83.prol ]
  %arrayidx85192.unr = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %for.body83.lr.ph ], [ %arrayidx85.prol, %for.body83.prol ]
  %41 = icmp eq i32 %num_jobs, 1
  br i1 %41, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %for.body83.prol.loopexit
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %tobool96 = icmp ne i32 %42, 0
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %44 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %43, %44
  %45 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %43
  %or.cond174 = or i1 %cmp102, %45
  %storemerge = select i1 %or.cond174, i32 %44, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %47 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %cmp106 = icmp sgt i32 %46, %47
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.prol.loopexit, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body83 ], [ %indvars.iv.unr, %for.body83.prol.loopexit ]
  %arrayidx85192 = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85.1, %for.body83 ], [ %arrayidx85192.unr, %for.body83.prol.loopexit ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85192, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !39
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !56
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %arrayidx85.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1
  %next_job.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85, %"struct.Halide::Runtime::Internal::work"** %next_job.1, align 8, !tbaa !58
  %siblings.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.1, align 8, !tbaa !38
  %sibling_count.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 4
  store i32 %num_jobs, i32* %sibling_count.1, align 8, !tbaa !39
  %threads_reserved93.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 6
  store i32 0, i32* %threads_reserved93.1, align 8, !tbaa !56
  %cmp81.1 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp81.1, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !61

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %48 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %49 = and i8 %48, 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %51 = load i32, i32* %threads_reserved118, align 8, !tbaa !56
  %dec119 = add nsw i32 %51, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !56
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %dec121 = add nsw i32 %52, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void

if.then23.1:                                      ; preds = %for.inc
  %inc.1 = add nsw i32 %workers_to_wake.1, 1
  br label %for.inc.1

if.else24.1:                                      ; preds = %for.inc
  %extent.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 6
  %53 = load i32, i32* %extent.1, align 8, !tbaa !25
  %add28.1 = add nsw i32 %53, %workers_to_wake.1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.else24.1, %if.then23.1
  %workers_to_wake.1.1 = phi i32 [ %inc.1, %if.then23.1 ], [ %add28.1, %if.else24.1 ]
  %indvars.iv.next194.1 = add nuw nsw i64 %indvars.iv193, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !62
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !25
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %4 = load i32, i32* %exit_status, align 4, !tbaa !34
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !64

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !25
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !34
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !34
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !40
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !35
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !30
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !56
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !56
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !30
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !26, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !35
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !27
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !65
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !67
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #16
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !68

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !58
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !40
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !35
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !30
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !56
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !30
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !38
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !35
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !27
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !65
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !67
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #16
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !36
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !68

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !58
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !37
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !36
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !35
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !56
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !56
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !26, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !27
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !65
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !67
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #16
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !36
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !68

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !25
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !70

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !33
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %80 = load i32, i32* %min, align 4, !tbaa !24
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !29
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #17
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !71

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %82 = load i32, i32* %min, align 4, !tbaa !24
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !24
  %83 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !25
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !25
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !72
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !74
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !75
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !76
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !24
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !25
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !25
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #17
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #17
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !34
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !39
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !38
  %wide.trip.count = zext i32 %88 to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %90 = icmp eq i32 %88, 1
  br i1 %90, label %if.end271.loopexit.unr-lcssa, label %do.end243.lr.ph.new

do.end243.lr.ph.new:                              ; preds = %do.end243.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %do.end243

do.end243:                                        ; preds = %for.inc.1, %do.end243.lr.ph.new
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph.new ], [ %wake_owners.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %do.end243.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %91 = load i32, i32* %exit_status245, align 4, !tbaa !34
  %cmp246 = icmp eq i32 %91, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !34
  %92 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253 = icmp eq i32 %92, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %93 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !37, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %94 = phi i8 [ 0, %if.then247 ], [ %93, %land.rhs254 ]
  %95 = and i8 %wake_owners.0541, 1
  %or = or i8 %94, %95
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %exit_status245.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 9
  %96 = load i32, i32* %exit_status245.1, align 4, !tbaa !34
  %cmp246.1 = icmp eq i32 %96, 0
  br i1 %cmp246.1, label %if.then247.1, label %for.inc.1

if.end271.loopexit.unr-lcssa:                     ; preds = %for.inc.1, %do.end243.lr.ph
  %wake_owners.1.lcssa.ph = phi i8 [ undef, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541.unr = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %if.end271, label %do.end243.epil

do.end243.epil:                                   ; preds = %if.end271.loopexit.unr-lcssa
  %exit_status245.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 9
  %97 = load i32, i32* %exit_status245.epil, align 4, !tbaa !34
  %cmp246.epil = icmp eq i32 %97, 0
  br i1 %cmp246.epil, label %if.then247.epil, label %if.end271

if.then247.epil:                                  ; preds = %do.end243.epil
  store i32 %result.2510, i32* %exit_status245.epil, align 4, !tbaa !34
  %98 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.epil = icmp eq i32 %98, 0
  br i1 %cmp253.epil, label %land.rhs254.epil, label %land.end260.epil

land.rhs254.epil:                                 ; preds = %if.then247.epil
  %owner_is_sleeping258.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 11
  %99 = load i8, i8* %owner_is_sleeping258.epil, align 4, !tbaa !37, !range !17
  br label %land.end260.epil

land.end260.epil:                                 ; preds = %land.rhs254.epil, %if.then247.epil
  %100 = phi i8 [ 0, %if.then247.epil ], [ %99, %land.rhs254.epil ]
  %101 = and i8 %wake_owners.0541.unr, 1
  %or.epil = or i8 %100, %101
  br label %if.end271

if.end271:                                        ; preds = %if.end271.loopexit.unr-lcssa, %do.end243.epil, %land.end260.epil, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1.lcssa.ph, %if.end271.loopexit.unr-lcssa ], [ %or.epil, %land.end260.epil ], [ %wake_owners.0541.unr, %do.end243.epil ]
  %102 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %102, null
  %103 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %104 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub277 = sub nsw i32 %104, %103
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %102, i64 0, i32 6
  %105 = load i32, i32* %threads_reserved285, align 8, !tbaa !56
  %sub286 = sub nsw i32 %105, %103
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !56
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %106 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %dec292 = add nsw i32 %106, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !35
  %107 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %107, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %108 = load i32, i32* %extent302, align 8, !tbaa !25
  %cmp303 = icmp eq i32 %108, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %109 = load i32, i32* %exit_status305, align 4, !tbaa !34
  %cmp306.not = icmp eq i32 %109, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %110 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !37, !range !17
  %tobool309.not = icmp eq i8 %110, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !77

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void

if.then247.1:                                     ; preds = %for.inc
  store i32 %result.2510, i32* %exit_status245.1, align 4, !tbaa !34
  %111 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.1 = icmp eq i32 %111, 0
  br i1 %cmp253.1, label %land.rhs254.1, label %land.end260.1

land.rhs254.1:                                    ; preds = %if.then247.1
  %owner_is_sleeping258.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 11
  %112 = load i8, i8* %owner_is_sleeping258.1, align 4, !tbaa !37, !range !17
  br label %land.end260.1

land.end260.1:                                    ; preds = %land.rhs254.1, %if.then247.1
  %113 = phi i8 [ 0, %if.then247.1 ], [ %112, %land.rhs254.1 ]
  %114 = and i8 %wake_owners.1, 1
  %or.1 = or i8 %113, %114
  br label %for.inc.1

for.inc.1:                                        ; preds = %land.end260.1, %for.inc
  %wake_owners.1.1 = phi i8 [ %or.1, %land.end260.1 ], [ %wake_owners.1, %for.inc ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %if.end271.loopexit.unr-lcssa, label %do.end243, !llvm.loop !78
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !79
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !79
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !88

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #16
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !89
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !91

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #16
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !94
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !95
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !92
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !96

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !95
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !97

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #16
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !94
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !43
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !43
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !99
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !101
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !102
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !104
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #16
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #16
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !41
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !43
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #16
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #16
  call void @abort() #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !105
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !89
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !105
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !109
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !41
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #16
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !108
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 comdat align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !79
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !106, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !79
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !113

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !79
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !109
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !85
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !85
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !41
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #16
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !89
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #16
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #16
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !99
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !106
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !106, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #16
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #16
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #16
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !115
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !117
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !118
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #16
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !115
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !117
  tail call void %0(i8* %2) #16
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !119
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !120
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %4 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %4, align 8, !tbaa !40
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %5 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %5
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !121

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %6 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %6) #17
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #17
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %7 = load i32, i32* %exit_status28, align 4, !tbaa !34
  %cmp29.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !122

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #16
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !123

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !118
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #16
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !124
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !126
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !124
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #16
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #16
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !127
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #16
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !127
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  tail call void @halide_free(i8* %user_context, i8* %array) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* null, i8* %name) #16
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 1) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = tail call i8* @dlerror() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

declare i8* @dlerror() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !129

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #16
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #16
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #17
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !130
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !137
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !138
  %call4 = tail call i64 @strlen(i8* %4) #16
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #16
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i, label %while.body.i.i.i

while.body.i.i.us.i:                              ; preds = %cond.end, %while.body.i.i.us.i.backedge
  %9 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.us.i = and i32 %9, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %10 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %12 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %12, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %13 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %14 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %15 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %16 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %18 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.us.i = icmp eq i32 %18, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %19 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.us.i = sub i32 %18, %19
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #16
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %20 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !145

while.body.i.i.i:                                 ; preds = %cond.end, %while.body.i.i.i.backedge
  %22 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.i = and i32 %22, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %23 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #16
  tail call void @abort() #16
  %25 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %25, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %26 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %27 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %28 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %29 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %31 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.i = icmp eq i32 %31, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %32 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.i = sub i32 %31, %32
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #16
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %33 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !145

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %12, %do.end.i.us.i ], [ %25, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #16
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #16
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #16
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #16
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !146
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %35 = bitcast i8* %id to i32*
  store i32 %0, i32* %35, align 4, !tbaa !148
  %36 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %37 = bitcast %struct.halide_type_t* %type to i32*
  %38 = bitcast i8* %36 to i32*
  %39 = load i32, i32* %37, align 8
  store i32 %39, i32* %38, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %40 = bitcast i32* %event to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %42 = bitcast i8* %dimensions26 to i32*
  %43 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %44 = load i32*, i32** %coordinates, align 8, !tbaa !149
  %tobool27.not = icmp eq i32* %44, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %45 = bitcast i32* %44 to i8*
  %46 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %46, i8* nonnull %45, i64 %conv31) #16
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %47 = load i8*, i8** %value, align 8, !tbaa !150
  %tobool34.not = icmp eq i8* %47, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i = sext i32 %50 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %49, i64 %idx.ext.i
  %51 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %51, i8* nonnull %47, i64 %conv38) #16
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %52 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i425 = sext i32 %54 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i425
  %55 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %56 = bitcast i8* %lanes.i to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i427 = zext i16 %57 to i32
  %58 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %59 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i428 = zext i8 %59 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %55, i64 %idx.ext.i430
  %60 = load i8*, i8** %func, align 8, !tbaa !138
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %60, i64 %conv43) #16
  %61 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i.i = sext i32 %61 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i.i
  %62 = bitcast i32* %add.ptr.i.i.i to i8*
  %63 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i.i432 = zext i16 %63 to i32
  %64 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i.i = zext i8 %64 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %62, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %65 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %65, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !153

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %66 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool47.not = icmp eq i8* %66, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %66
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #16
  %67 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %67, i64 0, i32 0, i32 0
  %68 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %69 = load i32, i32* %event, align 4, !tbaa !154
  %cmp56 = icmp eq i32 %69, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %70 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %71 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %72 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %73 = extractvalue { i32, i1 } %72, 1
  br i1 %73, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 1
  %74 = load i32, i32* %cursor.i, align 4, !tbaa !142
  %tobool.not.i439 = icmp eq i32 %74, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 2
  %75 = load i32, i32* %overage.i, align 4, !tbaa !144
  %sub.i = sub i32 %74, %75
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !142
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #16
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  store i32 0, i32* %cursor.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i, align 4, !tbaa !144
  %76 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %77 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #16
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %78 = load i8, i8* %bits, align 1, !tbaa !155
  %conv60 = zext i8 %78 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !156

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %79 = load i32, i32* %event65, align 4, !tbaa !154
  %cmp66 = icmp slt i32 %79, 2
  %idxprom = zext i32 %79 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %80 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %80) #16
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %81 = load i8*, i8** %func70, align 8, !tbaa !138
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %81) #16
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %82 = load i32, i32* %value_index73, align 4, !tbaa !157
  %conv.i468 = sext i32 %82 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #16
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %83 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp79 = icmp ugt i16 %83, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #16
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %84 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84660 = icmp sgt i32 %84, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !73
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #16
  %85 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84.peel = icmp sgt i32 %85, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %86 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp108 = icmp ugt i16 %86, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #16
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %87 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp90 = icmp ugt i16 %87, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %87 to i32
  %88 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %88, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #16
  %89 = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %arrayidx103 = getelementptr inbounds i32, i32* %89, i64 %indvars.iv670
  %90 = load i32, i32* %arrayidx103, align 4, !tbaa !73
  %conv.i484 = sext i32 %90 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #16
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %91 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %92 = sext i32 %91 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %92
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !158

if.then115:                                       ; preds = %for.cond.cleanup
  %93 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp119 = icmp ugt i16 %93, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #16
  %94 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130655.not = icmp eq i16 %94, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %95 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %96 = bitcast i8** %value245 to i16**
  %97 = bitcast i8** %value245 to float**
  %98 = bitcast i8** %value245 to double**
  %99 = bitcast i8** %value245 to i32**
  %100 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %101 = load i8**, i8*** %95, align 8, !tbaa !150
  %102 = load i8*, i8** %101, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %102) #16
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %103 = load i16*, i16** %96, align 8, !tbaa !150
  %104 = load i16, i16* %103, align 2, !tbaa !161
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %104) #16
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #16
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %105 = load float*, float** %97, align 8, !tbaa !150
  %106 = load float, float* %105, align 4, !tbaa !162
  %conv.i533.peel = fpext float %106 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #16
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %107 = load double*, double** %98, align 8, !tbaa !150
  %108 = load double, double* %107, align 8, !tbaa !164
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %108, i32 1) #16
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %109 = load i32*, i32** %99, align 8, !tbaa !150
  %110 = load i32, i32* %109, align 4, !tbaa !73
  %conv.i526.peel = zext i32 %110 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #16
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %111 = load i16*, i16** %96, align 8, !tbaa !150
  %112 = load i16, i16* %111, align 2, !tbaa !161
  %conv.i522.peel = zext i16 %112 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #16
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %113 = load i8*, i8** %value245, align 8, !tbaa !150
  %114 = load i8, i8* %113, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %114 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #16
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %115 = load i64*, i64** %100, align 8, !tbaa !150
  %116 = load i64, i64* %115, align 8, !tbaa !110
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %116, i32 1) #16
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %117 = load i32*, i32** %99, align 8, !tbaa !150
  %118 = load i32, i32* %117, align 4, !tbaa !73
  %conv.i511.peel = sext i32 %118 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #16
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %119 = load i16*, i16** %96, align 8, !tbaa !150
  %120 = load i16, i16* %119, align 2, !tbaa !161
  %conv.i507.peel = sext i16 %120 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #16
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %121 = load i8*, i8** %value245, align 8, !tbaa !150
  %122 = load i8, i8* %121, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %122 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #16
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %123 = load i64*, i64** %100, align 8, !tbaa !150
  %124 = load i64, i64* %123, align 8, !tbaa !110
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %124, i32 1) #16
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %125 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130.peel = icmp ugt i16 %125, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %151, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %126 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %126, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %127 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx145 = getelementptr inbounds i8, i8* %127, i64 %indvars.iv
  %128 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %128 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #16
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %129 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx153 = getelementptr inbounds i16, i16* %129, i64 %indvars.iv
  %130 = load i16, i16* %arrayidx153, align 2, !tbaa !161
  %conv.i507 = sext i16 %130 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #16
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %131 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx161 = getelementptr inbounds i32, i32* %131, i64 %indvars.iv
  %132 = load i32, i32* %arrayidx161, align 4, !tbaa !73
  %conv.i511 = sext i32 %132 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #16
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %133 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx166 = getelementptr inbounds i64, i64* %133, i64 %indvars.iv
  %134 = load i64, i64* %arrayidx166, align 8, !tbaa !110
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %134, i32 1) #16
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %135 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx181 = getelementptr inbounds i8, i8* %135, i64 %indvars.iv
  %136 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %136 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #16
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %137 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx189 = getelementptr inbounds i16, i16* %137, i64 %indvars.iv
  %138 = load i16, i16* %arrayidx189, align 2, !tbaa !161
  %conv.i522 = zext i16 %138 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #16
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %139 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx197 = getelementptr inbounds i32, i32* %139, i64 %indvars.iv
  %140 = load i32, i32* %arrayidx197, align 4, !tbaa !73
  %conv.i526 = zext i32 %140 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #16
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %141 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx202 = getelementptr inbounds i64, i64* %141, i64 %indvars.iv
  %142 = load i64, i64* %arrayidx202, align 8, !tbaa !110
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %142, i32 1) #16
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %143 = load float*, float** %97, align 8, !tbaa !150
  %arrayidx223 = getelementptr inbounds float, float* %143, i64 %indvars.iv
  %144 = load float, float* %arrayidx223, align 4, !tbaa !162
  %conv.i533 = fpext float %144 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #16
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %145 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx230 = getelementptr inbounds i16, i16* %145, i64 %indvars.iv
  %146 = load i16, i16* %arrayidx230, align 2, !tbaa !161
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %146) #16
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #16
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %147 = load double*, double** %98, align 8, !tbaa !150
  %arrayidx235 = getelementptr inbounds double, double* %147, i64 %indvars.iv
  %148 = load double, double* %arrayidx235, align 8, !tbaa !164
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %148, i32 1) #16
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %149 = load i8**, i8*** %95, align 8, !tbaa !150
  %arrayidx247 = getelementptr inbounds i8*, i8** %149, i64 %indvars.iv
  %150 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %150) #16
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %151 = load i16, i16* %lanes77, align 2, !tbaa !130
  %152 = zext i16 %151 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %152
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !166

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #16
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %153 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %tobool265.not = icmp eq i8* %153, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %154 = load i8, i8* %153, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %154, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #16
  %155 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %155) #16
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #16
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %156 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %156, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #16
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #16
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #16
  tail call void @halide_set_trace_file(i32 %call5) #17
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #16
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to i32*
  store i32 0, i32* %3, align 4, !tbaa !142
  %overage.i = getelementptr inbounds i8, i8* %call8, i64 8
  %4 = bitcast i8* %overage.i to i32*
  store i32 0, i32* %4, align 4, !tbaa !144
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !140
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #17
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %5
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #16
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #16
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #16
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !138
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !150
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !149
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !139
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !160
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !155
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !130
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !154
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !168
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !157
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !137
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #16
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #16
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #16
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !169

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !170

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %while.end13, !llvm.loop !171

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end, %while.cond6.preheader
  %4 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre45, %if.end ]
  %5 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre, %if.end ]
  %cmp16 = icmp eq i8 %5, %4
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name42 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !172
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #16
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #16
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #16
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %4, align 4, !tbaa !73
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %5 = bitcast i32* %min.i.2 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %5, align 4, !tbaa !73
  %6 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp11875 = icmp sgt i32 %6, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %8 = zext i32 %6 to i64
  %9 = add nsw i64 %8, -1
  %10 = icmp ult i64 %9, 3
  %11 = select i1 %10, i64 %8, i64 4
  %12 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %13 = bitcast %struct.halide_dimension_t* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %12, i8* nonnull align 4 dereferenceable(16) %13, i64 16, i1 false), !tbaa.struct !177
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %14 = load i32, i32* %extent, align 4, !tbaa !178
  %conv903 = zext i32 %14 to i64
  %exitcond.not17 = icmp eq i64 %11, 1
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body.1, !llvm.loop !180

for.cond19.preheader:                             ; preds = %for.body.3, %for.body.2, %for.body.1, %for.body.lr.ph
  %mul.lcssa = phi i64 [ %conv903, %for.body.lr.ph ], [ %mul.1, %for.body.1 ], [ %mul.2, %for.body.2 ], [ %mul.3, %for.body.3 ]
  %cmp20873 = icmp slt i32 %6, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ 1, %if.end9 ]
  %15 = sext i32 %6 to i64
  %16 = sub i32 3, %6
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %min.iters.check = icmp ult i32 %16, 7
  br i1 %min.iters.check, label %for.body22.preheader214, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %18, 8589934584
  %ind.end = add nsw i64 %n.vec, %15
  %.splatinsert = insertelement <8 x i64> poison, i64 %15, i32 0
  %.splat = shufflevector <8 x i64> %.splatinsert, <8 x i64> poison, <8 x i32> zeroinitializer
  %induction = add <8 x i64> %.splat, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %19 = add nsw i64 %n.vec, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %xtraiter = and i64 %21, 3
  %22 = icmp ult i64 %19, 24
  br i1 %22, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = and i64 %21, 4611686018427387900
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %vec.ind = phi <8 x i64> [ %induction, %vector.ph.new ], [ %vec.ind.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %23, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %24 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %24, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %25 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %25, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next = add <8 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %26 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %26, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %27, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %28 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %28, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.1 = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %29 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %29, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %30 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %30, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %31 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %31, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.2 = add <8 x i64> %vec.ind, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %32 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %32, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %33 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %33, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %34 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %34, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.3 = add <8 x i64> %vec.ind, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !183

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %vec.ind.unr = phi <8 x i64> [ %induction, %vector.ph ], [ %vec.ind.next.3, %vector.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %vec.ind.epil = phi <8 x i64> [ %vec.ind.next.epil, %vector.body.epil ], [ %vec.ind.unr, %middle.block.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter, %middle.block.unr-lcssa ]
  %35 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %35, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %36 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %36, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %37 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %37, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.epil = add <8 x i64> %vec.ind.epil, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !185

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %18, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader214

for.body22.preheader214:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %15, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %38 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %38 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #17
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader214, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader214 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  store i32 0, i32* %min, align 4, !tbaa !181
  %extent27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 1
  store i32 1, i32* %extent27, align 4, !tbaa !178
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 4, !tbaa !182
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #17
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %39 = load i32, i32* %extent.i, align 4, !tbaa !178
  %40 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %41 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %switch = icmp ult i32 %41, 2
  %42 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %cmp50 = icmp slt i32 %42, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %42
  %channels.0 = select i1 %or.cond, i32 %42, i32 %41
  %43 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %43) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !189
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !191
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !192
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !193
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !194
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !196
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !197
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %39, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !194
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !196
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !197
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %40, i32* %i32.i635, align 2, !tbaa !14
  %44 = trunc i32 %add.i to i16
  %conv68 = and i16 %44, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !194
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !196
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !197
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !194
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !196
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !197
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !194
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !196
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !197
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !194
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !196
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !197
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !194
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !196
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !197
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !194
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !196
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !197
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %40, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %45 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %45
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %46, align 2
  %47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %47, align 2
  %48 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %48, align 2
  %49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %49, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !194
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !196
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  store i32 1, i32* %count4.i, align 2, !tbaa !197
  %i32.i733 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 3, i32 0
  store i32 194, i32* %i32.i733, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !194
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !196
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  store i32 1, i32* %count4.i743, align 2, !tbaa !197
  %i32.i744 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 3, i32 0
  store i32 202, i32* %i32.i744, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !194
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !196
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !197
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !194
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !196
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !197
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %50 = load i16, i16* %arrayidx93, align 2, !tbaa !161
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !194
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !196
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !197
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %50, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !194
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !196
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !197
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %51 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 2, !tbaa !73
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !73
  %call.i736 = call i64 @fwrite(i8* nonnull %43, i64 210, i64 1, i8* nonnull %call.i598) #16
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %52 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !73
  %mul123 = mul i32 %depth.0, %div.i
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %52, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %53 = load i32, i32* %extent.i, align 4, !tbaa !178
  %54 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %mul124 = mul i32 %mul123, %53
  %mul125 = mul i32 %mul124, %54
  %55 = load i32, i32* %offset, align 4, !tbaa !73
  %add126 = add nsw i32 %mul125, %55
  store i32 %add126, i32* %offset, align 4, !tbaa !73
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !198

for.end129:                                       ; preds = %if.end118
  %56 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !73
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720, !llvm.loop !199

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.end129, %for.cond138
  %i137.0863 = phi i32 [ %inc146, %for.cond138 ], [ 0, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %56, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  %inc146 = add nuw nsw i32 %i137.0863, 1
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #17
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %57 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %57, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !200

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %58 = ptrtoint i8* %filename to i64
  %59 = sub i64 %58, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !201

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %60 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %60, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !202

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %59, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %61 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %61, -1
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %62) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %63 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check39 = icmp ugt i64 %start.0.idx.lcssa, -129
  br i1 %min.iters.check39, label %while.body187.preheader212, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %64 = xor i64 %start.0.idx.lcssa, -1
  %scevgep43 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %64
  %scevgep44 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name42, %scevgep45
  %bound1 = icmp ult i8* %scevgep44, %scevgep43
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader212, label %vector.ph41

vector.ph41:                                      ; preds = %vector.memcheck
  %n.vec47 = and i64 %63, -128
  %ind.end51 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec47
  %ind.end53 = add i64 %start.0.idx.lcssa, %n.vec47
  %65 = add i64 %n.vec47, -128
  %66 = lshr exact i64 %65, 7
  %67 = add nuw nsw i64 %66, 1
  %xtraiter215 = and i64 %67, 3
  %68 = icmp ult i64 %65, 384
  br i1 %68, label %middle.block36.unr-lcssa, label %vector.ph41.new

vector.ph41.new:                                  ; preds = %vector.ph41
  %unroll_iter218 = and i64 %67, 288230376151711740
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph41.new
  %index48 = phi i64 [ 0, %vector.ph41.new ], [ %index.next49.3, %vector.body38 ]
  %niter219 = phi i64 [ %unroll_iter218, %vector.ph41.new ], [ %niter219.nsub.3, %vector.body38 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48
  %offset.idx = add i64 %start.0.idx.lcssa, %index48
  %69 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx
  %70 = bitcast i8* %69 to <32 x i8>*
  %wide.load = load <32 x i8>, <32 x i8>* %70, align 1, !tbaa !14, !alias.scope !203
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <32 x i8>*
  %wide.load58 = load <32 x i8>, <32 x i8>* %72, align 1, !tbaa !14, !alias.scope !203
  %73 = getelementptr inbounds i8, i8* %69, i64 64
  %74 = bitcast i8* %73 to <32 x i8>*
  %wide.load59 = load <32 x i8>, <32 x i8>* %74, align 1, !tbaa !14, !alias.scope !203
  %75 = getelementptr inbounds i8, i8* %69, i64 96
  %76 = bitcast i8* %75 to <32 x i8>*
  %wide.load60 = load <32 x i8>, <32 x i8>* %76, align 1, !tbaa !14, !alias.scope !203
  %77 = bitcast i8* %next.gep to <32 x i8>*
  store <32 x i8> %wide.load, <32 x i8>* %77, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %78 = getelementptr i8, i8* %next.gep, i64 32
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %wide.load58, <32 x i8>* %79, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %80 = getelementptr i8, i8* %next.gep, i64 64
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %wide.load59, <32 x i8>* %81, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %82 = getelementptr i8, i8* %next.gep, i64 96
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %wide.load60, <32 x i8>* %83, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49 = or i64 %index48, 128
  %next.gep.1 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49
  %offset.idx.1 = add i64 %start.0.idx.lcssa, %index.next49
  %84 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.1
  %85 = bitcast i8* %84 to <32 x i8>*
  %wide.load.1 = load <32 x i8>, <32 x i8>* %85, align 1, !tbaa !14, !alias.scope !203
  %86 = getelementptr inbounds i8, i8* %84, i64 32
  %87 = bitcast i8* %86 to <32 x i8>*
  %wide.load58.1 = load <32 x i8>, <32 x i8>* %87, align 1, !tbaa !14, !alias.scope !203
  %88 = getelementptr inbounds i8, i8* %84, i64 64
  %89 = bitcast i8* %88 to <32 x i8>*
  %wide.load59.1 = load <32 x i8>, <32 x i8>* %89, align 1, !tbaa !14, !alias.scope !203
  %90 = getelementptr inbounds i8, i8* %84, i64 96
  %91 = bitcast i8* %90 to <32 x i8>*
  %wide.load60.1 = load <32 x i8>, <32 x i8>* %91, align 1, !tbaa !14, !alias.scope !203
  %92 = bitcast i8* %next.gep.1 to <32 x i8>*
  store <32 x i8> %wide.load.1, <32 x i8>* %92, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %93 = getelementptr i8, i8* %next.gep.1, i64 32
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %wide.load58.1, <32 x i8>* %94, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %95 = getelementptr i8, i8* %next.gep.1, i64 64
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %wide.load59.1, <32 x i8>* %96, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %97 = getelementptr i8, i8* %next.gep.1, i64 96
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %wide.load60.1, <32 x i8>* %98, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.1 = or i64 %index48, 256
  %next.gep.2 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.1
  %offset.idx.2 = add i64 %start.0.idx.lcssa, %index.next49.1
  %99 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.2
  %100 = bitcast i8* %99 to <32 x i8>*
  %wide.load.2 = load <32 x i8>, <32 x i8>* %100, align 1, !tbaa !14, !alias.scope !203
  %101 = getelementptr inbounds i8, i8* %99, i64 32
  %102 = bitcast i8* %101 to <32 x i8>*
  %wide.load58.2 = load <32 x i8>, <32 x i8>* %102, align 1, !tbaa !14, !alias.scope !203
  %103 = getelementptr inbounds i8, i8* %99, i64 64
  %104 = bitcast i8* %103 to <32 x i8>*
  %wide.load59.2 = load <32 x i8>, <32 x i8>* %104, align 1, !tbaa !14, !alias.scope !203
  %105 = getelementptr inbounds i8, i8* %99, i64 96
  %106 = bitcast i8* %105 to <32 x i8>*
  %wide.load60.2 = load <32 x i8>, <32 x i8>* %106, align 1, !tbaa !14, !alias.scope !203
  %107 = bitcast i8* %next.gep.2 to <32 x i8>*
  store <32 x i8> %wide.load.2, <32 x i8>* %107, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %108 = getelementptr i8, i8* %next.gep.2, i64 32
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %wide.load58.2, <32 x i8>* %109, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %110 = getelementptr i8, i8* %next.gep.2, i64 64
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %wide.load59.2, <32 x i8>* %111, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %112 = getelementptr i8, i8* %next.gep.2, i64 96
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %wide.load60.2, <32 x i8>* %113, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.2 = or i64 %index48, 384
  %next.gep.3 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.2
  %offset.idx.3 = add i64 %start.0.idx.lcssa, %index.next49.2
  %114 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.3
  %115 = bitcast i8* %114 to <32 x i8>*
  %wide.load.3 = load <32 x i8>, <32 x i8>* %115, align 1, !tbaa !14, !alias.scope !203
  %116 = getelementptr inbounds i8, i8* %114, i64 32
  %117 = bitcast i8* %116 to <32 x i8>*
  %wide.load58.3 = load <32 x i8>, <32 x i8>* %117, align 1, !tbaa !14, !alias.scope !203
  %118 = getelementptr inbounds i8, i8* %114, i64 64
  %119 = bitcast i8* %118 to <32 x i8>*
  %wide.load59.3 = load <32 x i8>, <32 x i8>* %119, align 1, !tbaa !14, !alias.scope !203
  %120 = getelementptr inbounds i8, i8* %114, i64 96
  %121 = bitcast i8* %120 to <32 x i8>*
  %wide.load60.3 = load <32 x i8>, <32 x i8>* %121, align 1, !tbaa !14, !alias.scope !203
  %122 = bitcast i8* %next.gep.3 to <32 x i8>*
  store <32 x i8> %wide.load.3, <32 x i8>* %122, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %123 = getelementptr i8, i8* %next.gep.3, i64 32
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %wide.load58.3, <32 x i8>* %124, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %125 = getelementptr i8, i8* %next.gep.3, i64 64
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %wide.load59.3, <32 x i8>* %126, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %127 = getelementptr i8, i8* %next.gep.3, i64 96
  %128 = bitcast i8* %127 to <32 x i8>*
  store <32 x i8> %wide.load60.3, <32 x i8>* %128, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.3 = add i64 %index48, 512
  %niter219.nsub.3 = add i64 %niter219, -4
  %niter219.ncmp.3 = icmp eq i64 %niter219.nsub.3, 0
  br i1 %niter219.ncmp.3, label %middle.block36.unr-lcssa, label %vector.body38, !llvm.loop !208

middle.block36.unr-lcssa:                         ; preds = %vector.body38, %vector.ph41
  %index48.unr = phi i64 [ 0, %vector.ph41 ], [ %index.next49.3, %vector.body38 ]
  %lcmp.mod217.not = icmp eq i64 %xtraiter215, 0
  br i1 %lcmp.mod217.not, label %middle.block36, label %vector.body38.epil

vector.body38.epil:                               ; preds = %middle.block36.unr-lcssa, %vector.body38.epil
  %index48.epil = phi i64 [ %index.next49.epil, %vector.body38.epil ], [ %index48.unr, %middle.block36.unr-lcssa ]
  %epil.iter216 = phi i64 [ %epil.iter216.sub, %vector.body38.epil ], [ %xtraiter215, %middle.block36.unr-lcssa ]
  %next.gep.epil = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48.epil
  %offset.idx.epil = add i64 %start.0.idx.lcssa, %index48.epil
  %129 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.epil
  %130 = bitcast i8* %129 to <32 x i8>*
  %wide.load.epil = load <32 x i8>, <32 x i8>* %130, align 1, !tbaa !14, !alias.scope !203
  %131 = getelementptr inbounds i8, i8* %129, i64 32
  %132 = bitcast i8* %131 to <32 x i8>*
  %wide.load58.epil = load <32 x i8>, <32 x i8>* %132, align 1, !tbaa !14, !alias.scope !203
  %133 = getelementptr inbounds i8, i8* %129, i64 64
  %134 = bitcast i8* %133 to <32 x i8>*
  %wide.load59.epil = load <32 x i8>, <32 x i8>* %134, align 1, !tbaa !14, !alias.scope !203
  %135 = getelementptr inbounds i8, i8* %129, i64 96
  %136 = bitcast i8* %135 to <32 x i8>*
  %wide.load60.epil = load <32 x i8>, <32 x i8>* %136, align 1, !tbaa !14, !alias.scope !203
  %137 = bitcast i8* %next.gep.epil to <32 x i8>*
  store <32 x i8> %wide.load.epil, <32 x i8>* %137, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %138 = getelementptr i8, i8* %next.gep.epil, i64 32
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %wide.load58.epil, <32 x i8>* %139, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %140 = getelementptr i8, i8* %next.gep.epil, i64 64
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %wide.load59.epil, <32 x i8>* %141, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %142 = getelementptr i8, i8* %next.gep.epil, i64 96
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %wide.load60.epil, <32 x i8>* %143, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.epil = add i64 %index48.epil, 128
  %epil.iter216.sub = add i64 %epil.iter216, -1
  %epil.iter216.cmp.not = icmp eq i64 %epil.iter216.sub, 0
  br i1 %epil.iter216.cmp.not, label %middle.block36, label %vector.body38.epil, !llvm.loop !209

middle.block36:                                   ; preds = %vector.body38.epil, %middle.block36.unr-lcssa
  %cmp.n54 = icmp eq i64 %n.vec47, %63
  br i1 %cmp.n54, label %while.cond191.preheader, label %while.body187.preheader212

while.body187.preheader212:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block36
  %dst.0870.ph = phi i8* [ %62, %vector.memcheck ], [ %62, %while.body187.preheader ], [ %ind.end51, %middle.block36 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end53, %middle.block36 ]
  %144 = sub i64 -2, %start.1869.idx.ph
  %145 = and i64 %start.1869.idx.ph, 7
  %xtraiter220 = xor i64 %145, 7
  %lcmp.mod221.not = icmp eq i64 %xtraiter220, 0
  br i1 %lcmp.mod221.not, label %while.body187.prol.loopexit, label %while.body187.prol

while.body187.prol:                               ; preds = %while.body187.preheader212, %while.body187.prol
  %dst.0870.prol = phi i8* [ %incdec.ptr189.prol, %while.body187.prol ], [ %dst.0870.ph, %while.body187.preheader212 ]
  %start.1869.idx.prol = phi i64 [ %start.1869.add.prol, %while.body187.prol ], [ %start.1869.idx.ph, %while.body187.preheader212 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %while.body187.prol ], [ %xtraiter220, %while.body187.preheader212 ]
  %start.1869.ptr.prol = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx.prol
  %start.1869.add.prol = add nuw nsw i64 %start.1869.idx.prol, 1
  %146 = load i8, i8* %start.1869.ptr.prol, align 1, !tbaa !14
  %incdec.ptr189.prol = getelementptr inbounds i8, i8* %dst.0870.prol, i64 1
  store i8 %146, i8* %dst.0870.prol, align 1, !tbaa !14
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %while.body187.prol.loopexit, label %while.body187.prol, !llvm.loop !210

while.body187.prol.loopexit:                      ; preds = %while.body187.prol, %while.body187.preheader212
  %incdec.ptr189.lcssa213.unr = phi i8* [ undef, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %dst.0870.unr = phi i8* [ %dst.0870.ph, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %start.1869.idx.unr = phi i64 [ %start.1869.idx.ph, %while.body187.preheader212 ], [ %start.1869.add.prol, %while.body187.prol ]
  %147 = icmp ult i64 %144, 7
  br i1 %147, label %while.cond191.preheader, label %while.body187

while.cond191.preheader:                          ; preds = %while.body187.prol.loopexit, %while.body187, %middle.block36
  %incdec.ptr189.lcssa = phi i8* [ %ind.end51, %middle.block36 ], [ %incdec.ptr189.lcssa213.unr, %while.body187.prol.loopexit ], [ %incdec.ptr189.7, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %62, %while.end183 ]
  %dst.0.lcssa91164 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %148 = sub i64 0, %dst.0.lcssa91164
  %scevgep65 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %148
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep65 to i64
  %min.iters.check67 = icmp ult i8* %scevgep65, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check67, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check69 = icmp ult i8* %scevgep65, inttoptr (i64 128 to i8*)
  br i1 %min.iters.check69, label %vec.epilog.ph, label %vector.ph70

vector.ph70:                                      ; preds = %vector.main.loop.iter.check
  %n.vec72 = and i64 %exitcount.ptrcnt.to.int, -128
  %149 = add i64 %n.vec72, -128
  %150 = lshr exact i64 %149, 7
  %151 = add nuw nsw i64 %150, 1
  %xtraiter222 = and i64 %151, 7
  %152 = icmp ult i64 %149, 896
  br i1 %152, label %middle.block61.unr-lcssa, label %vector.ph70.new

vector.ph70.new:                                  ; preds = %vector.ph70
  %unroll_iter225 = and i64 %151, 288230376151711736
  br label %vector.body63

vector.body63:                                    ; preds = %vector.body63, %vector.ph70.new
  %index73 = phi i64 [ 0, %vector.ph70.new ], [ %index.next74.7, %vector.body63 ]
  %niter226 = phi i64 [ %unroll_iter225, %vector.ph70.new ], [ %niter226.nsub.7, %vector.body63 ]
  %next.gep76 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73
  %153 = bitcast i8* %next.gep76 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %153, align 1, !tbaa !14
  %154 = getelementptr i8, i8* %next.gep76, i64 32
  %155 = bitcast i8* %154 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %155, align 1, !tbaa !14
  %156 = getelementptr i8, i8* %next.gep76, i64 64
  %157 = bitcast i8* %156 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %157, align 1, !tbaa !14
  %158 = getelementptr i8, i8* %next.gep76, i64 96
  %159 = bitcast i8* %158 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %159, align 1, !tbaa !14
  %index.next74 = or i64 %index73, 128
  %next.gep76.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74
  %160 = bitcast i8* %next.gep76.1 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %160, align 1, !tbaa !14
  %161 = getelementptr i8, i8* %next.gep76.1, i64 32
  %162 = bitcast i8* %161 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %162, align 1, !tbaa !14
  %163 = getelementptr i8, i8* %next.gep76.1, i64 64
  %164 = bitcast i8* %163 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %164, align 1, !tbaa !14
  %165 = getelementptr i8, i8* %next.gep76.1, i64 96
  %166 = bitcast i8* %165 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %166, align 1, !tbaa !14
  %index.next74.1 = or i64 %index73, 256
  %next.gep76.2 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.1
  %167 = bitcast i8* %next.gep76.2 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %167, align 1, !tbaa !14
  %168 = getelementptr i8, i8* %next.gep76.2, i64 32
  %169 = bitcast i8* %168 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %169, align 1, !tbaa !14
  %170 = getelementptr i8, i8* %next.gep76.2, i64 64
  %171 = bitcast i8* %170 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %171, align 1, !tbaa !14
  %172 = getelementptr i8, i8* %next.gep76.2, i64 96
  %173 = bitcast i8* %172 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %173, align 1, !tbaa !14
  %index.next74.2 = or i64 %index73, 384
  %next.gep76.3 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.2
  %174 = bitcast i8* %next.gep76.3 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %174, align 1, !tbaa !14
  %175 = getelementptr i8, i8* %next.gep76.3, i64 32
  %176 = bitcast i8* %175 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %176, align 1, !tbaa !14
  %177 = getelementptr i8, i8* %next.gep76.3, i64 64
  %178 = bitcast i8* %177 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %178, align 1, !tbaa !14
  %179 = getelementptr i8, i8* %next.gep76.3, i64 96
  %180 = bitcast i8* %179 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %180, align 1, !tbaa !14
  %index.next74.3 = or i64 %index73, 512
  %next.gep76.4 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.3
  %181 = bitcast i8* %next.gep76.4 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %181, align 1, !tbaa !14
  %182 = getelementptr i8, i8* %next.gep76.4, i64 32
  %183 = bitcast i8* %182 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %183, align 1, !tbaa !14
  %184 = getelementptr i8, i8* %next.gep76.4, i64 64
  %185 = bitcast i8* %184 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %185, align 1, !tbaa !14
  %186 = getelementptr i8, i8* %next.gep76.4, i64 96
  %187 = bitcast i8* %186 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %187, align 1, !tbaa !14
  %index.next74.4 = or i64 %index73, 640
  %next.gep76.5 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.4
  %188 = bitcast i8* %next.gep76.5 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %188, align 1, !tbaa !14
  %189 = getelementptr i8, i8* %next.gep76.5, i64 32
  %190 = bitcast i8* %189 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %190, align 1, !tbaa !14
  %191 = getelementptr i8, i8* %next.gep76.5, i64 64
  %192 = bitcast i8* %191 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %192, align 1, !tbaa !14
  %193 = getelementptr i8, i8* %next.gep76.5, i64 96
  %194 = bitcast i8* %193 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %194, align 1, !tbaa !14
  %index.next74.5 = or i64 %index73, 768
  %next.gep76.6 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.5
  %195 = bitcast i8* %next.gep76.6 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %195, align 1, !tbaa !14
  %196 = getelementptr i8, i8* %next.gep76.6, i64 32
  %197 = bitcast i8* %196 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %197, align 1, !tbaa !14
  %198 = getelementptr i8, i8* %next.gep76.6, i64 64
  %199 = bitcast i8* %198 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %199, align 1, !tbaa !14
  %200 = getelementptr i8, i8* %next.gep76.6, i64 96
  %201 = bitcast i8* %200 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %201, align 1, !tbaa !14
  %index.next74.6 = or i64 %index73, 896
  %next.gep76.7 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.6
  %202 = bitcast i8* %next.gep76.7 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %202, align 1, !tbaa !14
  %203 = getelementptr i8, i8* %next.gep76.7, i64 32
  %204 = bitcast i8* %203 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %204, align 1, !tbaa !14
  %205 = getelementptr i8, i8* %next.gep76.7, i64 64
  %206 = bitcast i8* %205 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %206, align 1, !tbaa !14
  %207 = getelementptr i8, i8* %next.gep76.7, i64 96
  %208 = bitcast i8* %207 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %208, align 1, !tbaa !14
  %index.next74.7 = add i64 %index73, 1024
  %niter226.nsub.7 = add i64 %niter226, -8
  %niter226.ncmp.7 = icmp eq i64 %niter226.nsub.7, 0
  br i1 %niter226.ncmp.7, label %middle.block61.unr-lcssa, label %vector.body63, !llvm.loop !211

middle.block61.unr-lcssa:                         ; preds = %vector.body63, %vector.ph70
  %index73.unr = phi i64 [ 0, %vector.ph70 ], [ %index.next74.7, %vector.body63 ]
  %lcmp.mod224.not = icmp eq i64 %xtraiter222, 0
  br i1 %lcmp.mod224.not, label %middle.block61, label %vector.body63.epil

vector.body63.epil:                               ; preds = %middle.block61.unr-lcssa, %vector.body63.epil
  %index73.epil = phi i64 [ %index.next74.epil, %vector.body63.epil ], [ %index73.unr, %middle.block61.unr-lcssa ]
  %epil.iter223 = phi i64 [ %epil.iter223.sub, %vector.body63.epil ], [ %xtraiter222, %middle.block61.unr-lcssa ]
  %next.gep76.epil = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73.epil
  %209 = bitcast i8* %next.gep76.epil to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %209, align 1, !tbaa !14
  %210 = getelementptr i8, i8* %next.gep76.epil, i64 32
  %211 = bitcast i8* %210 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %211, align 1, !tbaa !14
  %212 = getelementptr i8, i8* %next.gep76.epil, i64 64
  %213 = bitcast i8* %212 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %213, align 1, !tbaa !14
  %214 = getelementptr i8, i8* %next.gep76.epil, i64 96
  %215 = bitcast i8* %214 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %215, align 1, !tbaa !14
  %index.next74.epil = add i64 %index73.epil, 128
  %epil.iter223.sub = add i64 %epil.iter223, -1
  %epil.iter223.cmp.not = icmp eq i64 %epil.iter223.sub, 0
  br i1 %epil.iter223.cmp.not, label %middle.block61, label %vector.body63.epil, !llvm.loop !212

middle.block61:                                   ; preds = %vector.body63.epil, %middle.block61.unr-lcssa
  %cmp.n75 = icmp eq i64 %n.vec72, %exitcount.ptrcnt.to.int
  br i1 %cmp.n75, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block61
  %ind.end89 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec72
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 124
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec72, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %216 = sub i64 0, %dst.0.lcssa91164
  %scevgep80 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %216
  %exitcount.ptrcnt.to.int82 = ptrtoint i8* %scevgep80 to i64
  %n.vec84 = and i64 %exitcount.ptrcnt.to.int82, -4
  %ind.end88 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec84
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index85 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next86, %vec.epilog.vector.body ]
  %next.gep91 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index85
  %217 = bitcast i8* %next.gep91 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %217, align 1, !tbaa !14
  %index.next86 = add i64 %index85, 4
  %218 = icmp eq i64 %index.next86, %n.vec84
  br i1 %218, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n90 = icmp eq i64 %n.vec84, %exitcount.ptrcnt.to.int82
  br i1 %cmp.n90, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end89, %vec.epilog.iter.check ], [ %ind.end88, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.prol.loopexit, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189.7, %while.body187 ], [ %dst.0870.unr, %while.body187.prol.loopexit ]
  %start.1869.idx = phi i64 [ %start.1869.add.7, %while.body187 ], [ %start.1869.idx.unr, %while.body187.prol.loopexit ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %219 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %219, i8* %dst.0870, align 1, !tbaa !14
  %start.1869.ptr.1 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add
  %start.1869.add.1 = add nuw nsw i64 %start.1869.idx, 2
  %220 = load i8, i8* %start.1869.ptr.1, align 1, !tbaa !14
  %incdec.ptr189.1 = getelementptr inbounds i8, i8* %dst.0870, i64 2
  store i8 %220, i8* %incdec.ptr189, align 1, !tbaa !14
  %start.1869.ptr.2 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.1
  %start.1869.add.2 = add nuw nsw i64 %start.1869.idx, 3
  %221 = load i8, i8* %start.1869.ptr.2, align 1, !tbaa !14
  %incdec.ptr189.2 = getelementptr inbounds i8, i8* %dst.0870, i64 3
  store i8 %221, i8* %incdec.ptr189.1, align 1, !tbaa !14
  %start.1869.ptr.3 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.2
  %start.1869.add.3 = add nuw nsw i64 %start.1869.idx, 4
  %222 = load i8, i8* %start.1869.ptr.3, align 1, !tbaa !14
  %incdec.ptr189.3 = getelementptr inbounds i8, i8* %dst.0870, i64 4
  store i8 %222, i8* %incdec.ptr189.2, align 1, !tbaa !14
  %start.1869.ptr.4 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.3
  %start.1869.add.4 = add nuw nsw i64 %start.1869.idx, 5
  %223 = load i8, i8* %start.1869.ptr.4, align 1, !tbaa !14
  %incdec.ptr189.4 = getelementptr inbounds i8, i8* %dst.0870, i64 5
  store i8 %223, i8* %incdec.ptr189.3, align 1, !tbaa !14
  %start.1869.ptr.5 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.4
  %start.1869.add.5 = add nuw nsw i64 %start.1869.idx, 6
  %224 = load i8, i8* %start.1869.ptr.5, align 1, !tbaa !14
  %incdec.ptr189.5 = getelementptr inbounds i8, i8* %dst.0870, i64 6
  store i8 %224, i8* %incdec.ptr189.4, align 1, !tbaa !14
  %start.1869.ptr.6 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.5
  %start.1869.add.6 = add nuw nsw i64 %start.1869.idx, 7
  %225 = load i8, i8* %start.1869.ptr.6, align 1, !tbaa !14
  %incdec.ptr189.6 = getelementptr inbounds i8, i8* %dst.0870, i64 7
  store i8 %225, i8* %incdec.ptr189.5, align 1, !tbaa !14
  %start.1869.ptr.7 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.6
  %start.1869.add.7 = add nuw nsw i64 %start.1869.idx, 8
  %226 = load i8, i8* %start.1869.ptr.7, align 1, !tbaa !14
  %incdec.ptr189.7 = getelementptr inbounds i8, i8* %dst.0870, i64 8
  store i8 %226, i8* %incdec.ptr189.6, align 1, !tbaa !14
  %cmp186.not.7 = icmp eq i64 %start.1869.add.7, -1
  br i1 %cmp186.not.7, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block61, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %61
  %and = and i32 %add197, -8
  %227 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %227, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %227, i64 128, i64 1, i8* nonnull %call.i598) #16
  %228 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %228, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %229 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %228 to i64
  %min.iters.check95 = icmp ult i32 %228, 17
  br i1 %min.iters.check95, label %for.body.i.i.preheader, label %vector.ph96

vector.ph96:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf97 = and i64 %wide.trip.count.i.i, 15
  %230 = icmp eq i64 %n.mod.vf97, 0
  %231 = select i1 %230, i64 16, i64 %n.mod.vf97
  %n.vec98 = sub nsw i64 %wide.trip.count.i.i, %231
  br label %vector.body94

vector.body94:                                    ; preds = %vector.body94, %vector.ph96
  %index99 = phi i64 [ 0, %vector.ph96 ], [ %index.next100, %vector.body94 ]
  %vec.ind103 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph96 ], [ %vec.ind.next107, %vector.body94 ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi, %vector.body94 ]
  %vec.phi108 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi120, %vector.body94 ]
  %vec.phi109 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi121, %vector.body94 ]
  %vec.phi110 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi122, %vector.body94 ]
  %step.add = add <4 x i64> %vec.ind103, <i64 4, i64 4, i64 4, i64 4>
  %step.add104 = add <4 x i64> %vec.ind103, <i64 8, i64 8, i64 8, i64 8>
  %step.add105 = add <4 x i64> %vec.ind103, <i64 12, i64 12, i64 12, i64 12>
  %232 = or i64 %index99, 4
  %233 = or i64 %index99, 8
  %234 = or i64 %index99, 12
  %235 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index99, i32 2
  %236 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %232, i32 2
  %237 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %233, i32 2
  %238 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %234, i32 2
  %239 = bitcast i32* %235 to <16 x i32>*
  %240 = bitcast i32* %236 to <16 x i32>*
  %241 = bitcast i32* %237 to <16 x i32>*
  %242 = bitcast i32* %238 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %239, align 4, !tbaa !182
  %wide.vec111 = load <16 x i32>, <16 x i32>* %240, align 4, !tbaa !182
  %wide.vec112 = load <16 x i32>, <16 x i32>* %241, align 4, !tbaa !182
  %wide.vec113 = load <16 x i32>, <16 x i32>* %242, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec114 = shufflevector <16 x i32> %wide.vec111, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec115 = shufflevector <16 x i32> %wide.vec112, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec116 = shufflevector <16 x i32> %wide.vec113, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %243 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %244 = icmp sgt <4 x i32> %strided.vec114, zeroinitializer
  %245 = icmp sgt <4 x i32> %strided.vec115, zeroinitializer
  %246 = icmp sgt <4 x i32> %strided.vec116, zeroinitializer
  %247 = zext <4 x i32> %strided.vec to <4 x i64>
  %248 = zext <4 x i32> %strided.vec114 to <4 x i64>
  %249 = zext <4 x i32> %strided.vec115 to <4 x i64>
  %250 = zext <4 x i32> %strided.vec116 to <4 x i64>
  %251 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind103, i32 1
  %252 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add, i32 1
  %253 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add104, i32 1
  %254 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add105, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %251, i32 4, <4 x i1> %243, <4 x i32> undef), !tbaa !178
  %wide.masked.gather117 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %252, i32 4, <4 x i1> %244, <4 x i32> undef), !tbaa !178
  %wide.masked.gather118 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %253, i32 4, <4 x i1> %245, <4 x i32> undef), !tbaa !178
  %wide.masked.gather119 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %254, i32 4, <4 x i1> %246, <4 x i32> undef), !tbaa !178
  %255 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %256 = add nsw <4 x i32> %wide.masked.gather117, <i32 -1, i32 -1, i32 -1, i32 -1>
  %257 = add nsw <4 x i32> %wide.masked.gather118, <i32 -1, i32 -1, i32 -1, i32 -1>
  %258 = add nsw <4 x i32> %wide.masked.gather119, <i32 -1, i32 -1, i32 -1, i32 -1>
  %259 = sext <4 x i32> %255 to <4 x i64>
  %260 = sext <4 x i32> %256 to <4 x i64>
  %261 = sext <4 x i32> %257 to <4 x i64>
  %262 = sext <4 x i32> %258 to <4 x i64>
  %263 = mul nsw <4 x i64> %259, %247
  %264 = mul nsw <4 x i64> %260, %248
  %265 = mul nsw <4 x i64> %261, %249
  %266 = mul nsw <4 x i64> %262, %250
  %267 = select <4 x i1> %243, <4 x i64> %263, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %267
  %268 = select <4 x i1> %244, <4 x i64> %264, <4 x i64> zeroinitializer
  %predphi120 = add <4 x i64> %vec.phi108, %268
  %269 = select <4 x i1> %245, <4 x i64> %265, <4 x i64> zeroinitializer
  %predphi121 = add <4 x i64> %vec.phi109, %269
  %270 = select <4 x i1> %246, <4 x i64> %266, <4 x i64> zeroinitializer
  %predphi122 = add <4 x i64> %vec.phi110, %270
  %index.next100 = add i64 %index99, 16
  %vec.ind.next107 = add <4 x i64> %vec.ind103, <i64 16, i64 16, i64 16, i64 16>
  %271 = icmp eq i64 %index.next100, %n.vec98
  br i1 %271, label %middle.block92, label %vector.body94, !llvm.loop !216

middle.block92:                                   ; preds = %vector.body94
  %bin.rdx = add <4 x i64> %predphi120, %predphi
  %bin.rdx123 = add <4 x i64> %predphi121, %bin.rdx
  %bin.rdx124 = add <4 x i64> %predphi122, %bin.rdx123
  %272 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx124)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block92, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec98, %middle.block92 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %272, %middle.block92 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 2
  %273 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %273, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %273 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 1
  %274 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %274, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !217

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check128 = icmp ult i32 %228, 17
  br i1 %min.iters.check128, label %for.body.i13.i.preheader211, label %vector.ph129

vector.ph129:                                     ; preds = %for.body.i13.i.preheader
  %n.mod.vf130 = and i64 %wide.trip.count.i.i, 15
  %275 = icmp eq i64 %n.mod.vf130, 0
  %276 = select i1 %275, i64 16, i64 %n.mod.vf130
  %n.vec131 = sub nsw i64 %wide.trip.count.i.i, %276
  br label %vector.body127

vector.body127:                                   ; preds = %vector.body127, %vector.ph129
  %index132 = phi i64 [ 0, %vector.ph129 ], [ %index.next133, %vector.body127 ]
  %vec.ind136 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph129 ], [ %vec.ind.next141, %vector.body127 ]
  %vec.phi142 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi158, %vector.body127 ]
  %vec.phi143 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi159, %vector.body127 ]
  %vec.phi144 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi160, %vector.body127 ]
  %vec.phi145 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi161, %vector.body127 ]
  %step.add137 = add <4 x i64> %vec.ind136, <i64 4, i64 4, i64 4, i64 4>
  %step.add138 = add <4 x i64> %vec.ind136, <i64 8, i64 8, i64 8, i64 8>
  %step.add139 = add <4 x i64> %vec.ind136, <i64 12, i64 12, i64 12, i64 12>
  %277 = or i64 %index132, 4
  %278 = or i64 %index132, 8
  %279 = or i64 %index132, 12
  %280 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index132, i32 2
  %281 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %277, i32 2
  %282 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %278, i32 2
  %283 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %279, i32 2
  %284 = bitcast i32* %280 to <16 x i32>*
  %285 = bitcast i32* %281 to <16 x i32>*
  %286 = bitcast i32* %282 to <16 x i32>*
  %287 = bitcast i32* %283 to <16 x i32>*
  %wide.vec146 = load <16 x i32>, <16 x i32>* %284, align 4, !tbaa !182
  %wide.vec147 = load <16 x i32>, <16 x i32>* %285, align 4, !tbaa !182
  %wide.vec148 = load <16 x i32>, <16 x i32>* %286, align 4, !tbaa !182
  %wide.vec149 = load <16 x i32>, <16 x i32>* %287, align 4, !tbaa !182
  %strided.vec150 = shufflevector <16 x i32> %wide.vec146, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec151 = shufflevector <16 x i32> %wide.vec147, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec152 = shufflevector <16 x i32> %wide.vec148, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec153 = shufflevector <16 x i32> %wide.vec149, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %288 = icmp slt <4 x i32> %strided.vec150, zeroinitializer
  %289 = icmp slt <4 x i32> %strided.vec151, zeroinitializer
  %290 = icmp slt <4 x i32> %strided.vec152, zeroinitializer
  %291 = icmp slt <4 x i32> %strided.vec153, zeroinitializer
  %292 = sext <4 x i32> %strided.vec150 to <4 x i64>
  %293 = sext <4 x i32> %strided.vec151 to <4 x i64>
  %294 = sext <4 x i32> %strided.vec152 to <4 x i64>
  %295 = sext <4 x i32> %strided.vec153 to <4 x i64>
  %296 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind136, i32 1
  %297 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add137, i32 1
  %298 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add138, i32 1
  %299 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add139, i32 1
  %wide.masked.gather154 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %296, i32 4, <4 x i1> %288, <4 x i32> undef), !tbaa !178
  %wide.masked.gather155 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %297, i32 4, <4 x i1> %289, <4 x i32> undef), !tbaa !178
  %wide.masked.gather156 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %298, i32 4, <4 x i1> %290, <4 x i32> undef), !tbaa !178
  %wide.masked.gather157 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %299, i32 4, <4 x i1> %291, <4 x i32> undef), !tbaa !178
  %300 = add nsw <4 x i32> %wide.masked.gather154, <i32 -1, i32 -1, i32 -1, i32 -1>
  %301 = add nsw <4 x i32> %wide.masked.gather155, <i32 -1, i32 -1, i32 -1, i32 -1>
  %302 = add nsw <4 x i32> %wide.masked.gather156, <i32 -1, i32 -1, i32 -1, i32 -1>
  %303 = add nsw <4 x i32> %wide.masked.gather157, <i32 -1, i32 -1, i32 -1, i32 -1>
  %304 = sext <4 x i32> %300 to <4 x i64>
  %305 = sext <4 x i32> %301 to <4 x i64>
  %306 = sext <4 x i32> %302 to <4 x i64>
  %307 = sext <4 x i32> %303 to <4 x i64>
  %308 = mul nsw <4 x i64> %304, %292
  %309 = mul nsw <4 x i64> %305, %293
  %310 = mul nsw <4 x i64> %306, %294
  %311 = mul nsw <4 x i64> %307, %295
  %312 = select <4 x i1> %288, <4 x i64> %308, <4 x i64> zeroinitializer
  %predphi158 = add <4 x i64> %vec.phi142, %312
  %313 = select <4 x i1> %289, <4 x i64> %309, <4 x i64> zeroinitializer
  %predphi159 = add <4 x i64> %vec.phi143, %313
  %314 = select <4 x i1> %290, <4 x i64> %310, <4 x i64> zeroinitializer
  %predphi160 = add <4 x i64> %vec.phi144, %314
  %315 = select <4 x i1> %291, <4 x i64> %311, <4 x i64> zeroinitializer
  %predphi161 = add <4 x i64> %vec.phi145, %315
  %index.next133 = add i64 %index132, 16
  %vec.ind.next141 = add <4 x i64> %vec.ind136, <i64 16, i64 16, i64 16, i64 16>
  %316 = icmp eq i64 %index.next133, %n.vec131
  br i1 %316, label %middle.block125, label %vector.body127, !llvm.loop !218

middle.block125:                                  ; preds = %vector.body127
  %bin.rdx162 = add <4 x i64> %predphi159, %predphi158
  %bin.rdx163 = add <4 x i64> %predphi160, %bin.rdx162
  %bin.rdx164 = add <4 x i64> %predphi161, %bin.rdx163
  %317 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx164)
  br label %for.body.i13.i.preheader211

for.body.i13.i.preheader211:                      ; preds = %middle.block125, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec131, %middle.block125 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %317, %middle.block125 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader211, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader211 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader211 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 2
  %318 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %318, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %318 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 1
  %319 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %319, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !219

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694 = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %320 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i696 = zext i8 %320 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694
  %321 = trunc i64 %mul.i698 to i32
  %322 = add i32 %321, 7
  %323 = and i32 %322, 7
  %conv204 = xor i32 %323, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #16
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %324 = icmp sgt i32 %228, 2
  %spec.store.select = select i1 %324, i32 %228, i32 2
  %325 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %325) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !73
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %321
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !73
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  store i32 6, i32* %arrayinit.element222, align 4, !tbaa !73
  %arrayinit.element223 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 3
  store i32 8, i32* %arrayinit.element223, align 4, !tbaa !73
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %326 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %326 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !73
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  store i32 1, i32* %arrayinit.element228, align 4, !tbaa !73
  %arrayinit.element229 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 6
  store i32 5, i32* %arrayinit.element229, align 4, !tbaa !73
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !73
  %call.i683 = call i64 @fwrite(i8* nonnull %325, i64 32, i64 1, i8* nonnull %call.i598) #16
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %327 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %327) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %328 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %328, i32* %arrayinit.begin235, align 4, !tbaa !73
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %329 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %329, i32* %arrayinit.element238, align 4, !tbaa !73
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %330 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %330, i32* %arrayinit.element241, align 4, !tbaa !73
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %331 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %331, i32* %arrayinit.element244, align 4, !tbaa !73
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %327, i64 %conv248, i64 1, i8* nonnull %call.i598) #16
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %332 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %332) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !73
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !73
  %call.i660 = call i64 @fwrite(i8* nonnull %332, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %62, i64 %conv258, i64 1, i8* nonnull %call.i598) #16
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %333 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %333) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %334 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %334 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !73
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %321, i32* %arrayinit.element266, align 4, !tbaa !73
  %call.i638 = call i64 @fwrite(i8* nonnull %333, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %333) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %332) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %327) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %325) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %335 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %335) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %336 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %336, i32* %arrayinit.begin290, align 4, !tbaa !73
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %337 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %337, i32* %arrayinit.element293, align 4, !tbaa !73
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %338 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %338, i32* %arrayinit.element296, align 4, !tbaa !73
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %339 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %339, i32* %arrayinit.element299, align 4, !tbaa !73
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !73
  %call.i627 = call i64 @fwrite(i8* nonnull %335, i64 20, i64 1, i8* nonnull %call.i598) #16
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %335) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %340 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %340) #11
  %div = udiv i32 4096, %div.i
  %341 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %cmp320856 = icmp sgt i32 %341, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %342 = load i32, i32* %min.i.3, align 4, !tbaa !181
  %343 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 4, !tbaa !181
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %344 = phi i32 [ %342, %for.body322.lr.ph ], [ %430, %for.inc399 ]
  %345 = phi i32 [ %341, %for.body322.lr.ph ], [ %431, %for.inc399 ]
  %346 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %432, %for.inc399 ]
  %347 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %433, %for.inc399 ]
  %348 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %434, %for.inc399 ]
  %349 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %435, %for.inc399 ]
  %dim3.0858 = phi i32 [ %342, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %348, 0
  br i1 %cmp331848, label %for.body333.preheader, label %for.inc399

for.body333.preheader:                            ; preds = %for.body322
  %.pre893 = load i32, i32* %min.i.1, align 4, !tbaa !181
  %.pre894 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  br label %for.body333

for.body333:                                      ; preds = %for.inc394, %for.body333.preheader
  %350 = phi i32 [ %424, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %351 = phi i32 [ %425, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %352 = phi i32 [ %426, %for.inc394 ], [ %346, %for.body333.preheader ]
  %353 = phi i32 [ %427, %for.inc394 ], [ %347, %for.body333.preheader ]
  %354 = phi i32 [ %428, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %355 = phi i32 [ %429, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %349, %for.body333.preheader ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body333.preheader ]
  %cmp342839 = icmp sgt i32 %354, 0
  br i1 %cmp342839, label %for.body344.preheader, label %for.inc394

for.body344.preheader:                            ; preds = %for.body333
  %.pre = load i32, i32* %extent.i, align 4, !tbaa !178
  br label %for.body344

for.body344:                                      ; preds = %for.body344.preheader, %for.inc389
  %356 = phi i32 [ %421, %for.inc389 ], [ %350, %for.body344.preheader ]
  %357 = phi i32 [ %422, %for.inc389 ], [ %351, %for.body344.preheader ]
  %358 = phi i32 [ %423, %for.inc389 ], [ %.pre, %for.body344.preheader ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %355, %for.body344.preheader ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body344.preheader ]
  %cmp353834 = icmp sgt i32 %358, 0
  br i1 %cmp353834, label %for.body355.preheader, label %for.inc389

for.body355.preheader:                            ; preds = %for.body344
  %359 = load i32, i32* %min.i, align 4, !tbaa !181
  br label %for.body355

for.body355:                                      ; preds = %for.inc384, %for.body355.preheader
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %359, %for.body355.preheader ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body355.preheader ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %343) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !73
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !73
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !73
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !73
  %360 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17.i = icmp sgt i32 %360, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %361 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %wide.trip.count.i = zext i32 %360 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 2
  %362 = load i32, i32* %stride.i621920, align 4, !tbaa !182
  %conv.i622921 = sext i32 %362 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 0
  %363 = load i32, i32* %min.i623922, align 4, !tbaa !181
  %sub.i923 = sub nsw i32 %dim0.0836, %363
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %360, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !220

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 2
  %364 = load i32, i32* %stride.i62126, align 4, !tbaa !182
  %conv.i62227 = sext i32 %364 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 0
  %365 = load i32, i32* %min.i62328, align 4, !tbaa !181
  %sub.i29 = sub nsw i32 %dim1.0841, %365
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %360, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !220

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %366 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check169 = icmp ult i64 %366, 17
  br i1 %min.iters.check169, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph170

vector.ph170:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf171 = and i64 %366, 15
  %367 = icmp eq i64 %n.mod.vf171, 0
  %368 = select i1 %367, i64 16, i64 %n.mod.vf171
  %n.vec172 = sub nsw i64 %366, %368
  %ind.end176 = add nsw i64 %n.vec172, 2
  %369 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body168

vector.body168:                                   ; preds = %vector.body168, %vector.ph170
  %index173 = phi i64 [ 0, %vector.ph170 ], [ %index.next174, %vector.body168 ]
  %vec.phi179 = phi <4 x i64> [ %369, %vector.ph170 ], [ %409, %vector.body168 ]
  %vec.phi180 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %410, %vector.body168 ]
  %vec.phi181 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %411, %vector.body168 ]
  %vec.phi182 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %412, %vector.body168 ]
  %offset.idx178 = or i64 %index173, 2
  %370 = or i64 %index173, 6
  %371 = or i64 %index173, 10
  %372 = or i64 %index173, 14
  %373 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx178
  %374 = bitcast i32* %373 to <4 x i32>*
  %wide.load183 = load <4 x i32>, <4 x i32>* %374, align 4, !tbaa !73
  %375 = getelementptr inbounds i32, i32* %373, i64 4
  %376 = bitcast i32* %375 to <4 x i32>*
  %wide.load184 = load <4 x i32>, <4 x i32>* %376, align 4, !tbaa !73
  %377 = getelementptr inbounds i32, i32* %373, i64 8
  %378 = bitcast i32* %377 to <4 x i32>*
  %wide.load185 = load <4 x i32>, <4 x i32>* %378, align 4, !tbaa !73
  %379 = getelementptr inbounds i32, i32* %373, i64 12
  %380 = bitcast i32* %379 to <4 x i32>*
  %wide.load186 = load <4 x i32>, <4 x i32>* %380, align 4, !tbaa !73
  %381 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %offset.idx178, i32 2
  %382 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %370, i32 2
  %383 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %371, i32 2
  %384 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %372, i32 2
  %385 = getelementptr inbounds i32, i32* %381, i64 -2
  %386 = bitcast i32* %385 to <16 x i32>*
  %387 = getelementptr inbounds i32, i32* %382, i64 -2
  %388 = bitcast i32* %387 to <16 x i32>*
  %389 = getelementptr inbounds i32, i32* %383, i64 -2
  %390 = bitcast i32* %389 to <16 x i32>*
  %391 = getelementptr inbounds i32, i32* %384, i64 -2
  %392 = bitcast i32* %391 to <16 x i32>*
  %wide.vec187 = load <16 x i32>, <16 x i32>* %386, align 4, !tbaa !73
  %wide.vec188 = load <16 x i32>, <16 x i32>* %388, align 4, !tbaa !73
  %wide.vec189 = load <16 x i32>, <16 x i32>* %390, align 4, !tbaa !73
  %wide.vec190 = load <16 x i32>, <16 x i32>* %392, align 4, !tbaa !73
  %strided.vec191 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec192 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec193 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec194 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec195 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec196 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec197 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec198 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %393 = sext <4 x i32> %strided.vec195 to <4 x i64>
  %394 = sext <4 x i32> %strided.vec196 to <4 x i64>
  %395 = sext <4 x i32> %strided.vec197 to <4 x i64>
  %396 = sext <4 x i32> %strided.vec198 to <4 x i64>
  %397 = sub nsw <4 x i32> %wide.load183, %strided.vec191
  %398 = sub nsw <4 x i32> %wide.load184, %strided.vec192
  %399 = sub nsw <4 x i32> %wide.load185, %strided.vec193
  %400 = sub nsw <4 x i32> %wide.load186, %strided.vec194
  %401 = sext <4 x i32> %397 to <4 x i64>
  %402 = sext <4 x i32> %398 to <4 x i64>
  %403 = sext <4 x i32> %399 to <4 x i64>
  %404 = sext <4 x i32> %400 to <4 x i64>
  %405 = mul nsw <4 x i64> %401, %393
  %406 = mul nsw <4 x i64> %402, %394
  %407 = mul nsw <4 x i64> %403, %395
  %408 = mul nsw <4 x i64> %404, %396
  %409 = add <4 x i64> %405, %vec.phi179
  %410 = add <4 x i64> %406, %vec.phi180
  %411 = add <4 x i64> %407, %vec.phi181
  %412 = add <4 x i64> %408, %vec.phi182
  %index.next174 = add i64 %index173, 16
  %413 = icmp eq i64 %index.next174, %n.vec172
  br i1 %413, label %middle.block166, label %vector.body168, !llvm.loop !221

middle.block166:                                  ; preds = %vector.body168
  %bin.rdx199 = add <4 x i64> %410, %409
  %bin.rdx200 = add <4 x i64> %411, %bin.rdx199
  %bin.rdx201 = add <4 x i64> %412, %bin.rdx200
  %414 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx201)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block166, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end176, %middle.block166 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %414, %middle.block166 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !73
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 2
  %415 = load i32, i32* %stride.i621, align 4, !tbaa !182
  %conv.i622 = sext i32 %415 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 0
  %416 = load i32, i32* %min.i623, align 4, !tbaa !181
  %sub.i = sub nsw i32 %.pre895.pre, %416
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !222

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %417 = load i8*, i8** %host.i, align 8, !tbaa !172
  %418 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %418 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %417, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #16
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %340, i64 %conv374, i64 1, i8* nonnull %call.i598) #16
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %419 = load i32, i32* %extent.i, align 4, !tbaa !178
  %420 = load i32, i32* %min.i, align 4, !tbaa !181
  %add352 = add nsw i32 %420, %419
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389.loopexit, !llvm.loop !223

for.inc389.loopexit:                              ; preds = %for.inc384
  %.pre15 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %.pre16 = load i32, i32* %min.i.1, align 4, !tbaa !181
  br label %for.inc389

for.inc389:                                       ; preds = %for.inc389.loopexit, %for.body344
  %421 = phi i32 [ %356, %for.body344 ], [ %.pre16, %for.inc389.loopexit ]
  %422 = phi i32 [ %357, %for.body344 ], [ %.pre15, %for.inc389.loopexit ]
  %423 = phi i32 [ %358, %for.body344 ], [ %419, %for.inc389.loopexit ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc389.loopexit ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %421, %422
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394.loopexit, !llvm.loop !224

for.inc394.loopexit:                              ; preds = %for.inc389
  %.pre896 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %.pre897 = load i32, i32* %min.i.2, align 4, !tbaa !181
  br label %for.inc394

for.inc394:                                       ; preds = %for.inc394.loopexit, %for.body333
  %424 = phi i32 [ %350, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %425 = phi i32 [ %351, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %426 = phi i32 [ %352, %for.body333 ], [ %.pre897, %for.inc394.loopexit ]
  %427 = phi i32 [ %353, %for.body333 ], [ %.pre896, %for.inc394.loopexit ]
  %428 = phi i32 [ %354, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %429 = phi i32 [ %355, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc394.loopexit ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %427, %426
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399.loopexit, !llvm.loop !225

for.inc399.loopexit:                              ; preds = %for.inc394
  %.pre898 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %.pre899 = load i32, i32* %min.i.3, align 4, !tbaa !181
  br label %for.inc399

for.inc399:                                       ; preds = %for.inc399.loopexit, %for.body322
  %430 = phi i32 [ %344, %for.body322 ], [ %.pre899, %for.inc399.loopexit ]
  %431 = phi i32 [ %345, %for.body322 ], [ %.pre898, %for.inc399.loopexit ]
  %432 = phi i32 [ %346, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %433 = phi i32 [ %347, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %434 = phi i32 [ %348, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %435 = phi i32 [ %349, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc399.loopexit ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %431, %430
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !226

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %340, i64 %conv408, i64 1, i8* nonnull %call.i598) #16
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %436 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %436) #11
  store i64 0, i64* %zero, align 8, !tbaa !110
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %436, i64 %conv415, i64 1, i8* nonnull %call.i598) #16
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %436) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %340) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #16
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26

for.body.1:                                       ; preds = %for.body.lr.ph
  %arrayidx.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 1
  %arrayidx14.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1
  %437 = bitcast %struct.halide_dimension_t* %arrayidx14.1 to i8*
  %438 = bitcast %struct.halide_dimension_t* %arrayidx.1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %437, i8* nonnull align 4 dereferenceable(16) %438, i64 16, i1 false), !tbaa.struct !177
  %extent.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %439 = load i32, i32* %extent.1, align 4, !tbaa !178
  %conv903.1 = zext i32 %439 to i64
  %mul.1 = mul nuw i64 %conv903, %conv903.1
  %exitcond.not17.1 = icmp eq i64 %11, 2
  br i1 %exitcond.not17.1, label %for.cond19.preheader, label %for.body.2, !llvm.loop !180

for.body.2:                                       ; preds = %for.body.1
  %arrayidx.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 2
  %arrayidx14.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2
  %440 = bitcast %struct.halide_dimension_t* %arrayidx14.2 to i8*
  %441 = bitcast %struct.halide_dimension_t* %arrayidx.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %440, i8* nonnull align 4 dereferenceable(16) %441, i64 16, i1 false), !tbaa.struct !177
  %extent.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %442 = load i32, i32* %extent.2, align 4, !tbaa !178
  %conv903.2 = zext i32 %442 to i64
  %mul.2 = mul i64 %mul.1, %conv903.2
  %exitcond.not17.2 = icmp eq i64 %11, 3
  br i1 %exitcond.not17.2, label %for.cond19.preheader, label %for.body.3, !llvm.loop !180

for.body.3:                                       ; preds = %for.body.2
  %arrayidx.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 3
  %arrayidx14.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3
  %443 = bitcast %struct.halide_dimension_t* %arrayidx14.3 to i8*
  %444 = bitcast %struct.halide_dimension_t* %arrayidx.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %443, i8* nonnull align 4 dereferenceable(16) %444, i64 16, i1 false), !tbaa.struct !177
  %extent.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %445 = load i32, i32* %extent.3, align 4, !tbaa !178
  %conv903.3 = zext i32 %445 to i64
  %mul.3 = mul i64 %mul.2, %conv903.3
  br label %for.cond19.preheader
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !227
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #17
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #16
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !229

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !231
  tail call void @halide_free(i8* null, i8* %1) #16
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #16
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #17
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !233
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -64
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !234

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !235
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !237
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !238
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #16
  br label %if.end

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.040 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #17
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !110
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %add13 = add i64 %8, %dst_off.addr.038
  %inc = add nuw i64 %i.040, 1
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp7 = icmp ult i64 %inc, %9
  br i1 %cmp7, label %for.body, label %if.end, !llvm.loop !239

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !235
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !237
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !240
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !174
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !235
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !172
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !174
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !237
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !238
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %8 = bitcast i64* %arrayidx to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %8, align 8, !tbaa !110
  %9 = bitcast i64* %arrayidx12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %9, align 8, !tbaa !110
  %10 = bitcast i64* %arrayidx14 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %10, align 8, !tbaa !110
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %11 = bitcast i64* %arrayidx.4 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %11, align 8, !tbaa !110
  %12 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %12, align 8, !tbaa !110
  %13 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %14 = bitcast i64* %arrayidx.8 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %14, align 8, !tbaa !110
  %15 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %15, align 8, !tbaa !110
  %16 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %16, align 8, !tbaa !110
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %17 = bitcast i64* %arrayidx.12 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %17, align 8, !tbaa !110
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %18 = bitcast i64* %arrayidx12.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %18, align 8, !tbaa !110
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %19 = bitcast i64* %arrayidx14.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %19, align 8, !tbaa !110
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %20 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17272 = icmp sgt i32 %20, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %21 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !176
  %wide.trip.count = zext i32 %20 to i64
  %min.iters.check = icmp ult i32 %20, 17
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %73, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 15
  %23 = icmp eq i64 %n.mod.vf, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %24
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %68, %vector.body ]
  %vec.phi2 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %69, %vector.body ]
  %vec.phi3 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %70, %vector.body ]
  %vec.phi4 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %71, %vector.body ]
  %25 = or i64 %index, 4
  %26 = or i64 %index, 8
  %27 = or i64 %index, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %index, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %27, i32 2
  %32 = getelementptr inbounds i32, i32* %28, i64 -2
  %33 = bitcast i32* %32 to <16 x i32>*
  %34 = getelementptr inbounds i32, i32* %29, i64 -2
  %35 = bitcast i32* %34 to <16 x i32>*
  %36 = getelementptr inbounds i32, i32* %30, i64 -2
  %37 = bitcast i32* %36 to <16 x i32>*
  %38 = getelementptr inbounds i32, i32* %31, i64 -2
  %39 = bitcast i32* %38 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !73
  %wide.vec5 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !73
  %wide.vec6 = load <16 x i32>, <16 x i32>* %37, align 4, !tbaa !73
  %wide.vec7 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !73
  %strided.vec11 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec5, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec6, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec7, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %40 = sext <4 x i32> %strided.vec11 to <4 x i64>
  %41 = sext <4 x i32> %strided.vec12 to <4 x i64>
  %42 = sext <4 x i32> %strided.vec13 to <4 x i64>
  %43 = sext <4 x i32> %strided.vec14 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 0
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 0
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 0
  %48 = bitcast i32* %44 to <16 x i32>*
  %49 = bitcast i32* %45 to <16 x i32>*
  %50 = bitcast i32* %46 to <16 x i32>*
  %51 = bitcast i32* %47 to <16 x i32>*
  %wide.vec15 = load <16 x i32>, <16 x i32>* %48, align 4, !tbaa !181
  %wide.vec16 = load <16 x i32>, <16 x i32>* %49, align 4, !tbaa !181
  %wide.vec17 = load <16 x i32>, <16 x i32>* %50, align 4, !tbaa !181
  %wide.vec18 = load <16 x i32>, <16 x i32>* %51, align 4, !tbaa !181
  %52 = sub nsw <16 x i32> %wide.vec15, %wide.vec
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %54 = sub nsw <16 x i32> %wide.vec16, %wide.vec5
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %56 = sub nsw <16 x i32> %wide.vec17, %wide.vec6
  %57 = shufflevector <16 x i32> %56, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %58 = sub nsw <16 x i32> %wide.vec18, %wide.vec7
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = sext <4 x i32> %53 to <4 x i64>
  %61 = sext <4 x i32> %55 to <4 x i64>
  %62 = sext <4 x i32> %57 to <4 x i64>
  %63 = sext <4 x i32> %59 to <4 x i64>
  %64 = mul nsw <4 x i64> %60, %40
  %65 = mul nsw <4 x i64> %61, %41
  %66 = mul nsw <4 x i64> %62, %42
  %67 = mul nsw <4 x i64> %63, %43
  %68 = add <4 x i64> %64, %vec.phi
  %69 = add <4 x i64> %65, %vec.phi2
  %70 = add <4 x i64> %66, %vec.phi3
  %71 = add <4 x i64> %67, %vec.phi4
  %index.next = add i64 %index, 16
  %72 = icmp eq i64 %index.next, %n.vec
  br i1 %72, label %middle.block, label %vector.body, !llvm.loop !241

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %69, %68
  %bin.rdx23 = add <4 x i64> %70, %bin.rdx
  %bin.rdx24 = add <4 x i64> %71, %bin.rdx23
  %73 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx24)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19, %cond.end8
  %74 = phi i64 [ 0, %cond.end8 ], [ %add, %for.body19 ]
  %mul37 = mul i64 %74, %conv
  store i64 %mul37, i64* %src_begin, align 8, !tbaa !240
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %75 = load i32, i32* %dimensions39, align 4, !tbaa !175
  %cmp40.not = icmp eq i32 %20, %75
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %76 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 2
  %77 = load i32, i32* %stride, align 4, !tbaa !182
  %conv22 = sext i32 %77 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv284, i32 0
  %78 = load i32, i32* %min, align 4, !tbaa !181
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 0
  %79 = load i32, i32* %min29, align 4, !tbaa !181
  %sub = sub nsw i32 %78, %79
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %76
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.cond.cleanup18, label %for.body19, !llvm.loop !242

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %80 = load i8, i8* %bits.i253, align 1, !tbaa !136
  %conv.i254 = zext i8 %80 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %20, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %81 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %81, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %82 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !176
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %83 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !176
  %wide.trip.count282 = zext i32 %20 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %84 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %84, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !238
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !110
  %85 = bitcast i64* %arrayidx.1 to <4 x i64>*
  %86 = bitcast i64* %arrayidx to <4 x i64>*
  %87 = bitcast i64* %arrayidx12.1 to <4 x i64>*
  %88 = bitcast i64* %arrayidx12 to <4 x i64>*
  %89 = bitcast i64* %arrayidx14.1 to <4 x i64>*
  %90 = bitcast i64* %arrayidx14 to <4 x i64>*
  %91 = bitcast i64* %arrayidx.5 to <4 x i64>*
  %92 = bitcast i64* %arrayidx.4 to <4 x i64>*
  %93 = bitcast i64* %arrayidx12.5 to <4 x i64>*
  %94 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  %95 = bitcast i64* %arrayidx14.5 to <4 x i64>*
  %96 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  %97 = bitcast i64* %arrayidx.9 to <4 x i64>*
  %98 = bitcast i64* %arrayidx.8 to <4 x i64>*
  %99 = bitcast i64* %arrayidx12.9 to <4 x i64>*
  %100 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  %101 = bitcast i64* %arrayidx14.9 to <4 x i64>*
  %102 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  %103 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %104 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %106 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %108 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 2
  %109 = load i32, i32* %stride63, align 4, !tbaa !182
  %conv64 = sext i32 %109 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %83, i64 %indvars.iv278, i32 2
  %110 = load i32, i32* %stride73, align 4, !tbaa !182
  %conv74 = sext i32 %110 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %111 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %112 = load i64, i64* %arrayidx84.us, align 8, !tbaa !110
  %cmp85.us = icmp ult i64 %mul68, %112
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !243

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %111, %for.body81.preheader ]
  %113 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %113
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %114 = sext i32 %insert.0.lcssa to i64
  %115 = sub i64 %indvars.iv278, %114
  %116 = xor i64 %114, -1
  %117 = add i64 %indvars.iv278, %116
  %xtraiter = and i64 %115, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body95.prol.loopexit, label %for.body95.prol

for.body95.prol:                                  ; preds = %for.body95.preheader, %for.body95.prol
  %indvars.iv280.prol = phi i64 [ %indvars.iv.next281.prol, %for.body95.prol ], [ %indvars.iv278, %for.body95.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body95.prol ], [ %xtraiter, %for.body95.preheader ]
  %indvars.iv.next281.prol = add nsw i64 %indvars.iv280.prol, -1
  %arrayidx99.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.prol
  %118 = load i64, i64* %arrayidx99.prol, align 8, !tbaa !110
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280.prol
  store i64 %118, i64* %arrayidx102.prol, align 8, !tbaa !110
  %arrayidx106.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.prol
  %119 = load i64, i64* %arrayidx106.prol, align 8, !tbaa !110
  %arrayidx109.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280.prol
  store i64 %119, i64* %arrayidx109.prol, align 8, !tbaa !110
  %arrayidx113.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.prol
  %120 = load i64, i64* %arrayidx113.prol, align 8, !tbaa !110
  %arrayidx116.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280.prol
  store i64 %120, i64* %arrayidx116.prol, align 8, !tbaa !110
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body95.prol.loopexit, label %for.body95.prol, !llvm.loop !244

for.body95.prol.loopexit:                         ; preds = %for.body95.prol, %for.body95.preheader
  %indvars.iv280.unr = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281.prol, %for.body95.prol ]
  %121 = icmp ult i64 %117, 3
  br i1 %121, label %for.cond.cleanup94, label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95.prol.loopexit, %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 1
  %122 = load i32, i32* %extent122, align 4, !tbaa !178
  %conv123 = sext i32 %122 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %113
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !110
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %113
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !110
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %113
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !110
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !245

for.body95:                                       ; preds = %for.body95.prol.loopexit, %for.body95
  %indvars.iv280 = phi i64 [ %indvars.iv.next281.3, %for.body95 ], [ %indvars.iv280.unr, %for.body95.prol.loopexit ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx99, align 8, !tbaa !110
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx102, align 8, !tbaa !110
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %124 = load i64, i64* %arrayidx106, align 8, !tbaa !110
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %124, i64* %arrayidx109, align 8, !tbaa !110
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %125 = load i64, i64* %arrayidx113, align 8, !tbaa !110
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %125, i64* %arrayidx116, align 8, !tbaa !110
  %indvars.iv.next281.1 = add nsw i64 %indvars.iv280, -2
  %arrayidx99.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  %126 = load i64, i64* %arrayidx99.1, align 8, !tbaa !110
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  store i64 %126, i64* %arrayidx102.1, align 8, !tbaa !110
  %arrayidx106.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  %127 = load i64, i64* %arrayidx106.1, align 8, !tbaa !110
  %arrayidx109.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  store i64 %127, i64* %arrayidx109.1, align 8, !tbaa !110
  %arrayidx113.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  %128 = load i64, i64* %arrayidx113.1, align 8, !tbaa !110
  %arrayidx116.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  store i64 %128, i64* %arrayidx116.1, align 8, !tbaa !110
  %indvars.iv.next281.2 = add nsw i64 %indvars.iv280, -3
  %arrayidx99.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  %129 = load i64, i64* %arrayidx99.2, align 8, !tbaa !110
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  store i64 %129, i64* %arrayidx102.2, align 8, !tbaa !110
  %arrayidx106.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  %130 = load i64, i64* %arrayidx106.2, align 8, !tbaa !110
  %arrayidx109.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  store i64 %130, i64* %arrayidx109.2, align 8, !tbaa !110
  %arrayidx113.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  %131 = load i64, i64* %arrayidx113.2, align 8, !tbaa !110
  %arrayidx116.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  store i64 %131, i64* %arrayidx116.2, align 8, !tbaa !110
  %indvars.iv.next281.3 = add nsw i64 %indvars.iv280, -4
  %arrayidx99.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.3
  %132 = load i64, i64* %arrayidx99.3, align 8, !tbaa !110
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  store i64 %132, i64* %arrayidx102.3, align 8, !tbaa !110
  %arrayidx106.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.3
  %133 = load i64, i64* %arrayidx106.3, align 8, !tbaa !110
  %arrayidx109.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  store i64 %133, i64* %arrayidx109.3, align 8, !tbaa !110
  %arrayidx113.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.3
  %134 = load i64, i64* %arrayidx113.3, align 8, !tbaa !110
  %arrayidx116.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  store i64 %134, i64* %arrayidx116.3, align 8, !tbaa !110
  %cmp93.3 = icmp sgt i64 %indvars.iv.next281.3, %114
  br i1 %cmp93.3, label %for.body95, label %for.cond.cleanup94, !llvm.loop !246

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %135 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %154, %while.body ]
  %136 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %136, %135
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %137 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %mul147 = mul i64 %137, %135
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !238
  %138 = load <4 x i64>, <4 x i64>* %85, align 8, !tbaa !110
  store <4 x i64> %138, <4 x i64>* %86, align 8, !tbaa !110
  %139 = load <4 x i64>, <4 x i64>* %87, align 8, !tbaa !110
  store <4 x i64> %139, <4 x i64>* %88, align 8, !tbaa !110
  %140 = load <4 x i64>, <4 x i64>* %89, align 8, !tbaa !110
  store <4 x i64> %140, <4 x i64>* %90, align 8, !tbaa !110
  %141 = load <4 x i64>, <4 x i64>* %91, align 8, !tbaa !110
  store <4 x i64> %141, <4 x i64>* %92, align 8, !tbaa !110
  %142 = load <4 x i64>, <4 x i64>* %93, align 8, !tbaa !110
  store <4 x i64> %142, <4 x i64>* %94, align 8, !tbaa !110
  %143 = load <4 x i64>, <4 x i64>* %95, align 8, !tbaa !110
  store <4 x i64> %143, <4 x i64>* %96, align 8, !tbaa !110
  %144 = load <4 x i64>, <4 x i64>* %97, align 8, !tbaa !110
  store <4 x i64> %144, <4 x i64>* %98, align 8, !tbaa !110
  %145 = load <4 x i64>, <4 x i64>* %99, align 8, !tbaa !110
  store <4 x i64> %145, <4 x i64>* %100, align 8, !tbaa !110
  %146 = load <4 x i64>, <4 x i64>* %101, align 8, !tbaa !110
  store <4 x i64> %146, <4 x i64>* %102, align 8, !tbaa !110
  %147 = load <2 x i64>, <2 x i64>* %103, align 8, !tbaa !110
  store <2 x i64> %147, <2 x i64>* %104, align 8, !tbaa !110
  %148 = load <2 x i64>, <2 x i64>* %105, align 8, !tbaa !110
  store <2 x i64> %148, <2 x i64>* %106, align 8, !tbaa !110
  %149 = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !110
  store <2 x i64> %149, <2 x i64>* %108, align 8, !tbaa !110
  %150 = load i64, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 %150, i64* %arrayidx.14, align 8, !tbaa !110
  %151 = load i64, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 %151, i64* %arrayidx12.14, align 8, !tbaa !110
  %152 = load i64, i64* %arrayidx14.15, align 8, !tbaa !110
  store i64 %152, i64* %arrayidx14.14, align 8, !tbaa !110
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !110
  %153 = extractelement <4 x i64> %139, i32 0
  %cmp139 = icmp eq i64 %mul147, %153
  %154 = extractelement <4 x i64> %140, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !247

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %155 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %155, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !248
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #16
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !249

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !181
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !181
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !178
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !182
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !182
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !250
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !250
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !252
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !253
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !254
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !230
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !255
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #16
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !231
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !232
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !256
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !257
  %4 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %6 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp130 = icmp ugt i64 %6, 1
  br i1 %cmp130, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge, %for.body.preheader, %if.end
  %7 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp25115 = icmp sgt i32 %7, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge:                      ; preds = %for.body.preheader, %for.body.for.body_crit_edge
  %inc131 = phi i64 [ %inc, %for.body.for.body_crit_edge ], [ 1, %for.body.preheader ]
  %.pre = load i8*, i8** %key, align 8, !tbaa !257
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc131
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre, i64 %inc131
  store i8 %8, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc131, 1
  %9 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp = icmp ult i64 %inc, %9
  br i1 %cmp, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %10 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp38113.not = icmp eq i32 %10, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 %indvars.iv121
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %14 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %13, i8* nonnull align 4 dereferenceable(16) %14, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %15 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %16 = sext i32 %15 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %16
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !259

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %17 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %18 = zext i32 %17 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %18
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !260

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !261
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !262
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %19 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !10
  %21 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %21, i64 %indvars.iv119
  %22 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %22, i8* nonnull align 8 dereferenceable(56) %20, i64 56, i1 false), !tbaa.struct !263
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %24 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %25 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %24, %25
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 %idx.ext
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !176
  %cmp57111 = icmp sgt i32 %24, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 0, i32 6
  %28 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !176
  %30 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %30, i8* nonnull align 4 dereferenceable(16) %29, i64 16, i1 false), !tbaa.struct !177
  %31 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp57128 = icmp sgt i32 %31, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !176
  %32 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %32, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !176
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %34 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %35 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %34, i8* nonnull align 4 dereferenceable(16) %35, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %36 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %37 = sext i32 %36 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %37
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %38 = xor i1 %tobool.not, true
  ret i1 %38
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = add i64 %key_size, -1
  %xtraiter = and i64 %key_size, 7
  %1 = icmp ult i64 %0, 7
  br i1 %1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %key_size, -8
  %add.0 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
  %add1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add1.7, %for.body ]
  %i.010.unr = phi i64 [ 0, %for.body.preheader ], [ %inc.7, %for.body ]
  %h.09.unr = phi i32 [ 5381, %for.body.preheader ], [ %add1.7, %for.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil
  %i.010.epil = phi i64 [ %inc.epil, %for.body.epil ], [ %i.010.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %h.09.epil = phi i32 [ %add1.epil, %for.body.epil ], [ %h.09.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.epil = mul i32 %h.09.epil, 33
  %arrayidx.epil = getelementptr inbounds i8, i8* %key, i64 %i.010.epil
  %2 = load i8, i8* %arrayidx.epil, align 1, !tbaa !14
  %conv.epil = zext i8 %2 to i32
  %add1.epil = add i32 %add.epil, %conv.epil
  %inc.epil = add nuw i64 %i.010.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !266

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add1.epil, %for.body.epil ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.preheader.new
  %i.010 = phi i64 [ 0, %for.body.preheader.new ], [ %inc.7, %for.body.for.body_crit_edge ]
  %add.phi = phi i32 [ %add.0, %for.body.preheader.new ], [ %add.12, %for.body.for.body_crit_edge ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.7, %for.body.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i8, i8* %key, i64 %i.010
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %3 to i32
  %add1 = add i32 %add.phi, %conv
  %inc = or i64 %i.010, 1
  %add.1 = mul i32 %add1, 33
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 %inc
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %conv.1 = zext i8 %4 to i32
  %add1.1 = add i32 %add.1, %conv.1
  %inc.1 = or i64 %i.010, 2
  %add.2 = mul i32 %add1.1, 33
  %arrayidx.2 = getelementptr inbounds i8, i8* %key, i64 %inc.1
  %5 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %conv.2 = zext i8 %5 to i32
  %add1.2 = add i32 %add.2, %conv.2
  %inc.2 = or i64 %i.010, 3
  %add.3 = mul i32 %add1.2, 33
  %arrayidx.3 = getelementptr inbounds i8, i8* %key, i64 %inc.2
  %6 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %conv.3 = zext i8 %6 to i32
  %add1.3 = add i32 %add.3, %conv.3
  %inc.3 = or i64 %i.010, 4
  %add.4 = mul i32 %add1.3, 33
  %arrayidx.4 = getelementptr inbounds i8, i8* %key, i64 %inc.3
  %7 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %conv.4 = zext i8 %7 to i32
  %add1.4 = add i32 %add.4, %conv.4
  %inc.4 = or i64 %i.010, 5
  %add.5 = mul i32 %add1.4, 33
  %arrayidx.5 = getelementptr inbounds i8, i8* %key, i64 %inc.4
  %8 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %conv.5 = zext i8 %8 to i32
  %add1.5 = add i32 %add.5, %conv.5
  %inc.5 = or i64 %i.010, 6
  %add.6 = mul i32 %add1.5, 33
  %arrayidx.6 = getelementptr inbounds i8, i8* %key, i64 %inc.5
  %9 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %conv.6 = zext i8 %9 to i32
  %add1.6 = add i32 %add.6, %conv.6
  %inc.6 = or i64 %i.010, 7
  %add.7 = mul i32 %add1.6, 33
  %arrayidx.7 = getelementptr inbounds i8, i8* %key, i64 %inc.6
  %10 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %conv.7 = zext i8 %10 to i32
  %add1.7 = add i32 %add.7, %conv.7
  %inc.7 = add nuw i64 %i.010, 8
  %niter.nsub.7 = add i64 %niter, -8
  %niter.ncmp.7 = icmp eq i64 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %add.12 = mul i32 %add1.7, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %114, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %115, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !253
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !227
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !227
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !227
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !227
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !251
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #17
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #16
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check43 = icmp ult i32 %21, 17
  br i1 %min.iters.check43, label %for.body.i.i.preheader, label %vector.ph44

vector.ph44:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf45 = and i64 %wide.trip.count.i.i, 15
  %23 = icmp eq i64 %n.mod.vf45, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf45
  %n.vec46 = sub nsw i64 %wide.trip.count.i.i, %24
  br label %vector.body42

vector.body42:                                    ; preds = %vector.body42, %vector.ph44
  %index47 = phi i64 [ 0, %vector.ph44 ], [ %index.next48, %vector.body42 ]
  %vec.ind51 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph44 ], [ %vec.ind.next56, %vector.body42 ]
  %vec.phi57 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi73, %vector.body42 ]
  %vec.phi58 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi74, %vector.body42 ]
  %vec.phi59 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi75, %vector.body42 ]
  %vec.phi60 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi76, %vector.body42 ]
  %step.add52 = add <4 x i64> %vec.ind51, <i64 4, i64 4, i64 4, i64 4>
  %step.add53 = add <4 x i64> %vec.ind51, <i64 8, i64 8, i64 8, i64 8>
  %step.add54 = add <4 x i64> %vec.ind51, <i64 12, i64 12, i64 12, i64 12>
  %25 = or i64 %index47, 4
  %26 = or i64 %index47, 8
  %27 = or i64 %index47, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index47, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 2
  %32 = bitcast i32* %28 to <16 x i32>*
  %33 = bitcast i32* %29 to <16 x i32>*
  %34 = bitcast i32* %30 to <16 x i32>*
  %35 = bitcast i32* %31 to <16 x i32>*
  %wide.vec61 = load <16 x i32>, <16 x i32>* %32, align 4, !tbaa !182
  %wide.vec62 = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !182
  %wide.vec63 = load <16 x i32>, <16 x i32>* %34, align 4, !tbaa !182
  %wide.vec64 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !182
  %strided.vec65 = shufflevector <16 x i32> %wide.vec61, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec66 = shufflevector <16 x i32> %wide.vec62, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec67 = shufflevector <16 x i32> %wide.vec63, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec68 = shufflevector <16 x i32> %wide.vec64, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = icmp sgt <4 x i32> %strided.vec65, zeroinitializer
  %37 = icmp sgt <4 x i32> %strided.vec66, zeroinitializer
  %38 = icmp sgt <4 x i32> %strided.vec67, zeroinitializer
  %39 = icmp sgt <4 x i32> %strided.vec68, zeroinitializer
  %40 = zext <4 x i32> %strided.vec65 to <4 x i64>
  %41 = zext <4 x i32> %strided.vec66 to <4 x i64>
  %42 = zext <4 x i32> %strided.vec67 to <4 x i64>
  %43 = zext <4 x i32> %strided.vec68 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind51, i32 1
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add52, i32 1
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add53, i32 1
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add54, i32 1
  %wide.masked.gather69 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %44, i32 4, <4 x i1> %36, <4 x i32> undef), !tbaa !178
  %wide.masked.gather70 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %45, i32 4, <4 x i1> %37, <4 x i32> undef), !tbaa !178
  %wide.masked.gather71 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %46, i32 4, <4 x i1> %38, <4 x i32> undef), !tbaa !178
  %wide.masked.gather72 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %47, i32 4, <4 x i1> %39, <4 x i32> undef), !tbaa !178
  %48 = add nsw <4 x i32> %wide.masked.gather69, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = add nsw <4 x i32> %wide.masked.gather70, <i32 -1, i32 -1, i32 -1, i32 -1>
  %50 = add nsw <4 x i32> %wide.masked.gather71, <i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = add nsw <4 x i32> %wide.masked.gather72, <i32 -1, i32 -1, i32 -1, i32 -1>
  %52 = sext <4 x i32> %48 to <4 x i64>
  %53 = sext <4 x i32> %49 to <4 x i64>
  %54 = sext <4 x i32> %50 to <4 x i64>
  %55 = sext <4 x i32> %51 to <4 x i64>
  %56 = mul nsw <4 x i64> %52, %40
  %57 = mul nsw <4 x i64> %53, %41
  %58 = mul nsw <4 x i64> %54, %42
  %59 = mul nsw <4 x i64> %55, %43
  %60 = select <4 x i1> %36, <4 x i64> %56, <4 x i64> zeroinitializer
  %predphi73 = add <4 x i64> %vec.phi57, %60
  %61 = select <4 x i1> %37, <4 x i64> %57, <4 x i64> zeroinitializer
  %predphi74 = add <4 x i64> %vec.phi58, %61
  %62 = select <4 x i1> %38, <4 x i64> %58, <4 x i64> zeroinitializer
  %predphi75 = add <4 x i64> %vec.phi59, %62
  %63 = select <4 x i1> %39, <4 x i64> %59, <4 x i64> zeroinitializer
  %predphi76 = add <4 x i64> %vec.phi60, %63
  %index.next48 = add i64 %index47, 16
  %vec.ind.next56 = add <4 x i64> %vec.ind51, <i64 16, i64 16, i64 16, i64 16>
  %64 = icmp eq i64 %index.next48, %n.vec46
  br i1 %64, label %middle.block40, label %vector.body42, !llvm.loop !270

middle.block40:                                   ; preds = %vector.body42
  %bin.rdx77 = add <4 x i64> %predphi74, %predphi73
  %bin.rdx78 = add <4 x i64> %predphi75, %bin.rdx77
  %bin.rdx79 = add <4 x i64> %predphi76, %bin.rdx78
  %65 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx79)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block40, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec46, %middle.block40 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %65, %middle.block40 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %66 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %66, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %66 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %67 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %67, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %21, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader81, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %68 = icmp eq i64 %n.mod.vf, 0
  %69 = select i1 %68, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %69
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi23 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi35, %vector.body ]
  %vec.phi24 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi36, %vector.body ]
  %vec.phi25 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi37, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add20 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add21 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %70 = or i64 %index, 4
  %71 = or i64 %index, 8
  %72 = or i64 %index, 12
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %70, i32 2
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %71, i32 2
  %76 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %72, i32 2
  %77 = bitcast i32* %73 to <16 x i32>*
  %78 = bitcast i32* %74 to <16 x i32>*
  %79 = bitcast i32* %75 to <16 x i32>*
  %80 = bitcast i32* %76 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %77, align 4, !tbaa !182
  %wide.vec26 = load <16 x i32>, <16 x i32>* %78, align 4, !tbaa !182
  %wide.vec27 = load <16 x i32>, <16 x i32>* %79, align 4, !tbaa !182
  %wide.vec28 = load <16 x i32>, <16 x i32>* %80, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec29 = shufflevector <16 x i32> %wide.vec26, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec30 = shufflevector <16 x i32> %wide.vec27, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec31 = shufflevector <16 x i32> %wide.vec28, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %81 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %82 = icmp slt <4 x i32> %strided.vec29, zeroinitializer
  %83 = icmp slt <4 x i32> %strided.vec30, zeroinitializer
  %84 = icmp slt <4 x i32> %strided.vec31, zeroinitializer
  %85 = sext <4 x i32> %strided.vec to <4 x i64>
  %86 = sext <4 x i32> %strided.vec29 to <4 x i64>
  %87 = sext <4 x i32> %strided.vec30 to <4 x i64>
  %88 = sext <4 x i32> %strided.vec31 to <4 x i64>
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind, i32 1
  %90 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add, i32 1
  %91 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add20, i32 1
  %92 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add21, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %89, i32 4, <4 x i1> %81, <4 x i32> undef), !tbaa !178
  %wide.masked.gather32 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %90, i32 4, <4 x i1> %82, <4 x i32> undef), !tbaa !178
  %wide.masked.gather33 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %91, i32 4, <4 x i1> %83, <4 x i32> undef), !tbaa !178
  %wide.masked.gather34 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %92, i32 4, <4 x i1> %84, <4 x i32> undef), !tbaa !178
  %93 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = add nsw <4 x i32> %wide.masked.gather32, <i32 -1, i32 -1, i32 -1, i32 -1>
  %95 = add nsw <4 x i32> %wide.masked.gather33, <i32 -1, i32 -1, i32 -1, i32 -1>
  %96 = add nsw <4 x i32> %wide.masked.gather34, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = sext <4 x i32> %93 to <4 x i64>
  %98 = sext <4 x i32> %94 to <4 x i64>
  %99 = sext <4 x i32> %95 to <4 x i64>
  %100 = sext <4 x i32> %96 to <4 x i64>
  %101 = mul nsw <4 x i64> %97, %85
  %102 = mul nsw <4 x i64> %98, %86
  %103 = mul nsw <4 x i64> %99, %87
  %104 = mul nsw <4 x i64> %100, %88
  %105 = select <4 x i1> %81, <4 x i64> %101, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %105
  %106 = select <4 x i1> %82, <4 x i64> %102, <4 x i64> zeroinitializer
  %predphi35 = add <4 x i64> %vec.phi23, %106
  %107 = select <4 x i1> %83, <4 x i64> %103, <4 x i64> zeroinitializer
  %predphi36 = add <4 x i64> %vec.phi24, %107
  %108 = select <4 x i1> %84, <4 x i64> %104, <4 x i64> zeroinitializer
  %predphi37 = add <4 x i64> %vec.phi25, %108
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %109 = icmp eq i64 %index.next, %n.vec
  br i1 %109, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi35, %predphi
  %bin.rdx38 = add <4 x i64> %predphi36, %bin.rdx
  %bin.rdx39 = add <4 x i64> %predphi37, %bin.rdx38
  %110 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx39)
  br label %for.body.i13.i.preheader81

for.body.i13.i.preheader81:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %110, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader81, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader81 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader81 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %111 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %111, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %111 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %112 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %112, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i.neg = xor i64 %index.1.i.i, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %113 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %113 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %114 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %115 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %115, %114
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %116 = and i1 %cmp1, %cmp
  br i1 %116, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #17
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !253
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #17
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !256
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #17
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !230
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !232
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #17
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !253
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !257
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #17
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !256
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #17
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !230
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !251
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  %26 = add nsw i64 %wide.trip.count230, -1
  %xtraiter = and i64 %wide.trip.count230, 3
  %27 = icmp ult i64 %26, 3
  br i1 %27, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62.lr.ph.new

for.body62.lr.ph.new:                             ; preds = %for.body62.lr.ph
  %unroll_iter = and i64 %wide.trip.count230, 4294967292
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph.new
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph.new ], [ %indvars.iv.next229.3, %for.body62 ]
  %niter = phi i64 [ %unroll_iter, %for.body62.lr.ph.new ], [ %niter.nsub.3, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %28 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !10
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 %indvars.iv228
  %31 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %29, i8* nonnull align 8 dereferenceable(56) %31, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229 = or i64 %indvars.iv228, 1
  %arrayidx65.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229
  %32 = bitcast %struct.halide_buffer_t** %arrayidx65.1 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !10
  %34 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %34, i64 %indvars.iv.next229
  %35 = bitcast %struct.halide_buffer_t* %arrayidx68.1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %33, i8* nonnull align 8 dereferenceable(56) %35, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.1 = or i64 %indvars.iv228, 2
  %arrayidx65.2 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.1
  %36 = bitcast %struct.halide_buffer_t** %arrayidx65.2 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !10
  %38 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.2 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %38, i64 %indvars.iv.next229.1
  %39 = bitcast %struct.halide_buffer_t* %arrayidx68.2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %37, i8* nonnull align 8 dereferenceable(56) %39, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.2 = or i64 %indvars.iv228, 3
  %arrayidx65.3 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.2
  %40 = bitcast %struct.halide_buffer_t** %arrayidx65.3 to i8**
  %41 = load i8*, i8** %40, align 8, !tbaa !10
  %42 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %42, i64 %indvars.iv.next229.2
  %43 = bitcast %struct.halide_buffer_t* %arrayidx68.3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %41, i8* nonnull align 8 dereferenceable(56) %43, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.3 = add nuw nsw i64 %indvars.iv228, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %44 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 5
  %45 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %45, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 6
  %46 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %45 to i64
  %min.iters.check53 = icmp ult i32 %45, 17
  br i1 %min.iters.check53, label %for.body.i.i.preheader, label %vector.ph54

vector.ph54:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf55 = and i64 %wide.trip.count.i.i, 15
  %47 = icmp eq i64 %n.mod.vf55, 0
  %48 = select i1 %47, i64 16, i64 %n.mod.vf55
  %n.vec56 = sub nsw i64 %wide.trip.count.i.i, %48
  br label %vector.body52

vector.body52:                                    ; preds = %vector.body52, %vector.ph54
  %index57 = phi i64 [ 0, %vector.ph54 ], [ %index.next58, %vector.body52 ]
  %vec.ind61 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph54 ], [ %vec.ind.next66, %vector.body52 ]
  %vec.phi67 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi83, %vector.body52 ]
  %vec.phi68 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi84, %vector.body52 ]
  %vec.phi69 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi85, %vector.body52 ]
  %vec.phi70 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi86, %vector.body52 ]
  %step.add62 = add <4 x i64> %vec.ind61, <i64 4, i64 4, i64 4, i64 4>
  %step.add63 = add <4 x i64> %vec.ind61, <i64 8, i64 8, i64 8, i64 8>
  %step.add64 = add <4 x i64> %vec.ind61, <i64 12, i64 12, i64 12, i64 12>
  %49 = or i64 %index57, 4
  %50 = or i64 %index57, 8
  %51 = or i64 %index57, 12
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index57, i32 2
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %49, i32 2
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %50, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %51, i32 2
  %56 = bitcast i32* %52 to <16 x i32>*
  %57 = bitcast i32* %53 to <16 x i32>*
  %58 = bitcast i32* %54 to <16 x i32>*
  %59 = bitcast i32* %55 to <16 x i32>*
  %wide.vec71 = load <16 x i32>, <16 x i32>* %56, align 4, !tbaa !182
  %wide.vec72 = load <16 x i32>, <16 x i32>* %57, align 4, !tbaa !182
  %wide.vec73 = load <16 x i32>, <16 x i32>* %58, align 4, !tbaa !182
  %wide.vec74 = load <16 x i32>, <16 x i32>* %59, align 4, !tbaa !182
  %strided.vec75 = shufflevector <16 x i32> %wide.vec71, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec76 = shufflevector <16 x i32> %wide.vec72, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec77 = shufflevector <16 x i32> %wide.vec73, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec78 = shufflevector <16 x i32> %wide.vec74, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = icmp sgt <4 x i32> %strided.vec75, zeroinitializer
  %61 = icmp sgt <4 x i32> %strided.vec76, zeroinitializer
  %62 = icmp sgt <4 x i32> %strided.vec77, zeroinitializer
  %63 = icmp sgt <4 x i32> %strided.vec78, zeroinitializer
  %64 = zext <4 x i32> %strided.vec75 to <4 x i64>
  %65 = zext <4 x i32> %strided.vec76 to <4 x i64>
  %66 = zext <4 x i32> %strided.vec77 to <4 x i64>
  %67 = zext <4 x i32> %strided.vec78 to <4 x i64>
  %68 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind61, i32 1
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add62, i32 1
  %70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add63, i32 1
  %71 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add64, i32 1
  %wide.masked.gather79 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %68, i32 4, <4 x i1> %60, <4 x i32> undef), !tbaa !178
  %wide.masked.gather80 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %69, i32 4, <4 x i1> %61, <4 x i32> undef), !tbaa !178
  %wide.masked.gather81 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %70, i32 4, <4 x i1> %62, <4 x i32> undef), !tbaa !178
  %wide.masked.gather82 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %71, i32 4, <4 x i1> %63, <4 x i32> undef), !tbaa !178
  %72 = add nsw <4 x i32> %wide.masked.gather79, <i32 -1, i32 -1, i32 -1, i32 -1>
  %73 = add nsw <4 x i32> %wide.masked.gather80, <i32 -1, i32 -1, i32 -1, i32 -1>
  %74 = add nsw <4 x i32> %wide.masked.gather81, <i32 -1, i32 -1, i32 -1, i32 -1>
  %75 = add nsw <4 x i32> %wide.masked.gather82, <i32 -1, i32 -1, i32 -1, i32 -1>
  %76 = sext <4 x i32> %72 to <4 x i64>
  %77 = sext <4 x i32> %73 to <4 x i64>
  %78 = sext <4 x i32> %74 to <4 x i64>
  %79 = sext <4 x i32> %75 to <4 x i64>
  %80 = mul nsw <4 x i64> %76, %64
  %81 = mul nsw <4 x i64> %77, %65
  %82 = mul nsw <4 x i64> %78, %66
  %83 = mul nsw <4 x i64> %79, %67
  %84 = select <4 x i1> %60, <4 x i64> %80, <4 x i64> zeroinitializer
  %predphi83 = add <4 x i64> %vec.phi67, %84
  %85 = select <4 x i1> %61, <4 x i64> %81, <4 x i64> zeroinitializer
  %predphi84 = add <4 x i64> %vec.phi68, %85
  %86 = select <4 x i1> %62, <4 x i64> %82, <4 x i64> zeroinitializer
  %predphi85 = add <4 x i64> %vec.phi69, %86
  %87 = select <4 x i1> %63, <4 x i64> %83, <4 x i64> zeroinitializer
  %predphi86 = add <4 x i64> %vec.phi70, %87
  %index.next58 = add i64 %index57, 16
  %vec.ind.next66 = add <4 x i64> %vec.ind61, <i64 16, i64 16, i64 16, i64 16>
  %88 = icmp eq i64 %index.next58, %n.vec56
  br i1 %88, label %middle.block50, label %vector.body52, !llvm.loop !279

middle.block50:                                   ; preds = %vector.body52
  %bin.rdx87 = add <4 x i64> %predphi84, %predphi83
  %bin.rdx88 = add <4 x i64> %predphi85, %bin.rdx87
  %bin.rdx89 = add <4 x i64> %predphi86, %bin.rdx88
  %89 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx89)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block50, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec56, %middle.block50 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %89, %middle.block50 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 2
  %90 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %90, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %90 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 1
  %91 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %91, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %45, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader91, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %92 = icmp eq i64 %n.mod.vf, 0
  %93 = select i1 %92, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %93
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi33 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi45, %vector.body ]
  %vec.phi34 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi46, %vector.body ]
  %vec.phi35 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi47, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add30 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add31 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %94 = or i64 %index, 4
  %95 = or i64 %index, 8
  %96 = or i64 %index, 12
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index, i32 2
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %94, i32 2
  %99 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %95, i32 2
  %100 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %96, i32 2
  %101 = bitcast i32* %97 to <16 x i32>*
  %102 = bitcast i32* %98 to <16 x i32>*
  %103 = bitcast i32* %99 to <16 x i32>*
  %104 = bitcast i32* %100 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %101, align 4, !tbaa !182
  %wide.vec36 = load <16 x i32>, <16 x i32>* %102, align 4, !tbaa !182
  %wide.vec37 = load <16 x i32>, <16 x i32>* %103, align 4, !tbaa !182
  %wide.vec38 = load <16 x i32>, <16 x i32>* %104, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec39 = shufflevector <16 x i32> %wide.vec36, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec40 = shufflevector <16 x i32> %wide.vec37, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec41 = shufflevector <16 x i32> %wide.vec38, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %105 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %106 = icmp slt <4 x i32> %strided.vec39, zeroinitializer
  %107 = icmp slt <4 x i32> %strided.vec40, zeroinitializer
  %108 = icmp slt <4 x i32> %strided.vec41, zeroinitializer
  %109 = sext <4 x i32> %strided.vec to <4 x i64>
  %110 = sext <4 x i32> %strided.vec39 to <4 x i64>
  %111 = sext <4 x i32> %strided.vec40 to <4 x i64>
  %112 = sext <4 x i32> %strided.vec41 to <4 x i64>
  %113 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind, i32 1
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add, i32 1
  %115 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add30, i32 1
  %116 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add31, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %113, i32 4, <4 x i1> %105, <4 x i32> undef), !tbaa !178
  %wide.masked.gather42 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %114, i32 4, <4 x i1> %106, <4 x i32> undef), !tbaa !178
  %wide.masked.gather43 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %115, i32 4, <4 x i1> %107, <4 x i32> undef), !tbaa !178
  %wide.masked.gather44 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %116, i32 4, <4 x i1> %108, <4 x i32> undef), !tbaa !178
  %117 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %118 = add nsw <4 x i32> %wide.masked.gather42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %119 = add nsw <4 x i32> %wide.masked.gather43, <i32 -1, i32 -1, i32 -1, i32 -1>
  %120 = add nsw <4 x i32> %wide.masked.gather44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = sext <4 x i32> %117 to <4 x i64>
  %122 = sext <4 x i32> %118 to <4 x i64>
  %123 = sext <4 x i32> %119 to <4 x i64>
  %124 = sext <4 x i32> %120 to <4 x i64>
  %125 = mul nsw <4 x i64> %121, %109
  %126 = mul nsw <4 x i64> %122, %110
  %127 = mul nsw <4 x i64> %123, %111
  %128 = mul nsw <4 x i64> %124, %112
  %129 = select <4 x i1> %105, <4 x i64> %125, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %129
  %130 = select <4 x i1> %106, <4 x i64> %126, <4 x i64> zeroinitializer
  %predphi45 = add <4 x i64> %vec.phi33, %130
  %131 = select <4 x i1> %107, <4 x i64> %127, <4 x i64> zeroinitializer
  %predphi46 = add <4 x i64> %vec.phi34, %131
  %132 = select <4 x i1> %108, <4 x i64> %128, <4 x i64> zeroinitializer
  %predphi47 = add <4 x i64> %vec.phi35, %132
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %133 = icmp eq i64 %index.next, %n.vec
  br i1 %133, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi45, %predphi
  %bin.rdx48 = add <4 x i64> %predphi46, %bin.rdx
  %bin.rdx49 = add <4 x i64> %predphi47, %bin.rdx48
  %134 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx49)
  br label %for.body.i13.i.preheader91

for.body.i13.i.preheader91:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %134, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader91, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader91 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader91 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 2
  %135 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %135, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %135 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 1
  %136 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %136, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body78
  %add8.i27.i = phi i64 [ 1, %for.body78 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body78 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 4, i32 1
  %137 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %137 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add84 = add i64 %mul.i, 64
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !172
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %138 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %138
  %139 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %139, i64 0, i32 2
  %140 = load i8*, i8** %host95, align 8, !tbaa !172
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %140) #17
  %141 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %141) #16
  %142 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %142, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !172
  %143 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %143, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 64
  store i8* %add.ptr, i8** %host, align 8, !tbaa !172
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #17
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223.loopexit.unr-lcssa:        ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228.unr = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229.3, %for.body62 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %cleanup119.loopexit223, label %for.body62.epil

for.body62.epil:                                  ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil
  %indvars.iv228.epil = phi i64 [ %indvars.iv.next229.epil, %for.body62.epil ], [ %indvars.iv228.unr, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body62.epil ], [ %xtraiter, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %arrayidx65.epil = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228.epil
  %144 = bitcast %struct.halide_buffer_t** %arrayidx65.epil to i8**
  %145 = load i8*, i8** %144, align 8, !tbaa !10
  %146 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.epil = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %146, i64 %indvars.iv228.epil
  %147 = bitcast %struct.halide_buffer_t* %arrayidx68.epil to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %145, i8* nonnull align 8 dereferenceable(56) %147, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.epil = add nuw nsw i64 %indvars.iv228.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %cleanup119.loopexit223, label %for.body62.epil, !llvm.loop !288

cleanup119.loopexit223:                           ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %148 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %add = add i32 %148, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !254
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #17
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !253
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #17
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !256
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #17
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !230
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !289

for.body48.us:                                    ; preds = %for.body48.us.preheader, %for.body48.us
  %indvars.iv244 = phi i64 [ %indvars.iv.next245, %for.body48.us ], [ 0, %for.body48.us.preheader ]
  %arrayidx50.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv244
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !172
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #17
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %exitcond247.not = icmp eq i64 %indvars.iv.next245, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us, !llvm.loop !290

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #17
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !172
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !172
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !291

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !253
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !257
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #17
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !256
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #17
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !230
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !289

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #16
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check39 = icmp ult i32 %27, 17
  br i1 %min.iters.check39, label %for.body.i.i.preheader, label %vector.ph40

vector.ph40:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf41 = and i64 %wide.trip.count.i.i, 15
  %29 = icmp eq i64 %n.mod.vf41, 0
  %30 = select i1 %29, i64 16, i64 %n.mod.vf41
  %n.vec42 = sub nsw i64 %wide.trip.count.i.i, %30
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph40
  %index43 = phi i64 [ 0, %vector.ph40 ], [ %index.next44, %vector.body38 ]
  %vec.ind47 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph40 ], [ %vec.ind.next52, %vector.body38 ]
  %vec.phi53 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi69, %vector.body38 ]
  %vec.phi54 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi70, %vector.body38 ]
  %vec.phi55 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi71, %vector.body38 ]
  %vec.phi56 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi72, %vector.body38 ]
  %step.add48 = add <4 x i64> %vec.ind47, <i64 4, i64 4, i64 4, i64 4>
  %step.add49 = add <4 x i64> %vec.ind47, <i64 8, i64 8, i64 8, i64 8>
  %step.add50 = add <4 x i64> %vec.ind47, <i64 12, i64 12, i64 12, i64 12>
  %31 = or i64 %index43, 4
  %32 = or i64 %index43, 8
  %33 = or i64 %index43, 12
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index43, i32 2
  %35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %31, i32 2
  %36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %32, i32 2
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %33, i32 2
  %38 = bitcast i32* %34 to <16 x i32>*
  %39 = bitcast i32* %35 to <16 x i32>*
  %40 = bitcast i32* %36 to <16 x i32>*
  %41 = bitcast i32* %37 to <16 x i32>*
  %wide.vec57 = load <16 x i32>, <16 x i32>* %38, align 4, !tbaa !182
  %wide.vec58 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !182
  %wide.vec59 = load <16 x i32>, <16 x i32>* %40, align 4, !tbaa !182
  %wide.vec60 = load <16 x i32>, <16 x i32>* %41, align 4, !tbaa !182
  %strided.vec61 = shufflevector <16 x i32> %wide.vec57, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec62 = shufflevector <16 x i32> %wide.vec58, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec63 = shufflevector <16 x i32> %wide.vec59, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec64 = shufflevector <16 x i32> %wide.vec60, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %42 = icmp sgt <4 x i32> %strided.vec61, zeroinitializer
  %43 = icmp sgt <4 x i32> %strided.vec62, zeroinitializer
  %44 = icmp sgt <4 x i32> %strided.vec63, zeroinitializer
  %45 = icmp sgt <4 x i32> %strided.vec64, zeroinitializer
  %46 = zext <4 x i32> %strided.vec61 to <4 x i64>
  %47 = zext <4 x i32> %strided.vec62 to <4 x i64>
  %48 = zext <4 x i32> %strided.vec63 to <4 x i64>
  %49 = zext <4 x i32> %strided.vec64 to <4 x i64>
  %50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind47, i32 1
  %51 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add48, i32 1
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add49, i32 1
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add50, i32 1
  %wide.masked.gather65 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %50, i32 4, <4 x i1> %42, <4 x i32> undef), !tbaa !178
  %wide.masked.gather66 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %51, i32 4, <4 x i1> %43, <4 x i32> undef), !tbaa !178
  %wide.masked.gather67 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %52, i32 4, <4 x i1> %44, <4 x i32> undef), !tbaa !178
  %wide.masked.gather68 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %53, i32 4, <4 x i1> %45, <4 x i32> undef), !tbaa !178
  %54 = add nsw <4 x i32> %wide.masked.gather65, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = add nsw <4 x i32> %wide.masked.gather66, <i32 -1, i32 -1, i32 -1, i32 -1>
  %56 = add nsw <4 x i32> %wide.masked.gather67, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = add nsw <4 x i32> %wide.masked.gather68, <i32 -1, i32 -1, i32 -1, i32 -1>
  %58 = sext <4 x i32> %54 to <4 x i64>
  %59 = sext <4 x i32> %55 to <4 x i64>
  %60 = sext <4 x i32> %56 to <4 x i64>
  %61 = sext <4 x i32> %57 to <4 x i64>
  %62 = mul nsw <4 x i64> %58, %46
  %63 = mul nsw <4 x i64> %59, %47
  %64 = mul nsw <4 x i64> %60, %48
  %65 = mul nsw <4 x i64> %61, %49
  %66 = select <4 x i1> %42, <4 x i64> %62, <4 x i64> zeroinitializer
  %predphi69 = add <4 x i64> %vec.phi53, %66
  %67 = select <4 x i1> %43, <4 x i64> %63, <4 x i64> zeroinitializer
  %predphi70 = add <4 x i64> %vec.phi54, %67
  %68 = select <4 x i1> %44, <4 x i64> %64, <4 x i64> zeroinitializer
  %predphi71 = add <4 x i64> %vec.phi55, %68
  %69 = select <4 x i1> %45, <4 x i64> %65, <4 x i64> zeroinitializer
  %predphi72 = add <4 x i64> %vec.phi56, %69
  %index.next44 = add i64 %index43, 16
  %vec.ind.next52 = add <4 x i64> %vec.ind47, <i64 16, i64 16, i64 16, i64 16>
  %70 = icmp eq i64 %index.next44, %n.vec42
  br i1 %70, label %middle.block36, label %vector.body38, !llvm.loop !292

middle.block36:                                   ; preds = %vector.body38
  %bin.rdx73 = add <4 x i64> %predphi70, %predphi69
  %bin.rdx74 = add <4 x i64> %predphi71, %bin.rdx73
  %bin.rdx75 = add <4 x i64> %predphi72, %bin.rdx74
  %71 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx75)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block36, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec42, %middle.block36 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %71, %middle.block36 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %72 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %72, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %72 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %73 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %73, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !293

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %27, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader77, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %74 = icmp eq i64 %n.mod.vf, 0
  %75 = select i1 %74, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %75
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi19 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi31, %vector.body ]
  %vec.phi20 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi32, %vector.body ]
  %vec.phi21 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi33, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add16 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add17 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %76 = or i64 %index, 4
  %77 = or i64 %index, 8
  %78 = or i64 %index, 12
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %80 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %76, i32 2
  %81 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %77, i32 2
  %82 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %78, i32 2
  %83 = bitcast i32* %79 to <16 x i32>*
  %84 = bitcast i32* %80 to <16 x i32>*
  %85 = bitcast i32* %81 to <16 x i32>*
  %86 = bitcast i32* %82 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %83, align 4, !tbaa !182
  %wide.vec22 = load <16 x i32>, <16 x i32>* %84, align 4, !tbaa !182
  %wide.vec23 = load <16 x i32>, <16 x i32>* %85, align 4, !tbaa !182
  %wide.vec24 = load <16 x i32>, <16 x i32>* %86, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec25 = shufflevector <16 x i32> %wide.vec22, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec26 = shufflevector <16 x i32> %wide.vec23, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec27 = shufflevector <16 x i32> %wide.vec24, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %87 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %88 = icmp slt <4 x i32> %strided.vec25, zeroinitializer
  %89 = icmp slt <4 x i32> %strided.vec26, zeroinitializer
  %90 = icmp slt <4 x i32> %strided.vec27, zeroinitializer
  %91 = sext <4 x i32> %strided.vec to <4 x i64>
  %92 = sext <4 x i32> %strided.vec25 to <4 x i64>
  %93 = sext <4 x i32> %strided.vec26 to <4 x i64>
  %94 = sext <4 x i32> %strided.vec27 to <4 x i64>
  %95 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind, i32 1
  %96 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add, i32 1
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add16, i32 1
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add17, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %95, i32 4, <4 x i1> %87, <4 x i32> undef), !tbaa !178
  %wide.masked.gather28 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %96, i32 4, <4 x i1> %88, <4 x i32> undef), !tbaa !178
  %wide.masked.gather29 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %97, i32 4, <4 x i1> %89, <4 x i32> undef), !tbaa !178
  %wide.masked.gather30 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %98, i32 4, <4 x i1> %90, <4 x i32> undef), !tbaa !178
  %99 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %100 = add nsw <4 x i32> %wide.masked.gather28, <i32 -1, i32 -1, i32 -1, i32 -1>
  %101 = add nsw <4 x i32> %wide.masked.gather29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %102 = add nsw <4 x i32> %wide.masked.gather30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %103 = sext <4 x i32> %99 to <4 x i64>
  %104 = sext <4 x i32> %100 to <4 x i64>
  %105 = sext <4 x i32> %101 to <4 x i64>
  %106 = sext <4 x i32> %102 to <4 x i64>
  %107 = mul nsw <4 x i64> %103, %91
  %108 = mul nsw <4 x i64> %104, %92
  %109 = mul nsw <4 x i64> %105, %93
  %110 = mul nsw <4 x i64> %106, %94
  %111 = select <4 x i1> %87, <4 x i64> %107, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %111
  %112 = select <4 x i1> %88, <4 x i64> %108, <4 x i64> zeroinitializer
  %predphi31 = add <4 x i64> %vec.phi19, %112
  %113 = select <4 x i1> %89, <4 x i64> %109, <4 x i64> zeroinitializer
  %predphi32 = add <4 x i64> %vec.phi20, %113
  %114 = select <4 x i1> %90, <4 x i64> %110, <4 x i64> zeroinitializer
  %predphi33 = add <4 x i64> %vec.phi21, %114
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %115 = icmp eq i64 %index.next, %n.vec
  br i1 %115, label %middle.block, label %vector.body, !llvm.loop !294

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi31, %predphi
  %bin.rdx34 = add <4 x i64> %predphi32, %bin.rdx
  %bin.rdx35 = add <4 x i64> %predphi33, %bin.rdx34
  %116 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx35)
  br label %for.body.i13.i.preheader77

for.body.i13.i.preheader77:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %116, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader77, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader77 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader77 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %117 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %117, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %117 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %118 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %118, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !295

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body64
  %add8.i27.i = phi i64 [ 1, %for.body64 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body64 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %119 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %119 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !296

if.then76:                                        ; preds = %for.cond.cleanup63
  %120 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %120, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #17
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %121 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %sub = sub i64 %121, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88, %for.body88.preheader
  %indvars.iv = phi i64 [ 0, %for.body88.preheader ], [ %indvars.iv.next, %for.body88 ]
  %arrayidx90 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %122 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %122, i64 0, i32 2
  %123 = load i8*, i8** %host91, align 8, !tbaa !172
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %123) #17
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88, !llvm.loop !297

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #16
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %124 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %124, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !227
  %125 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %126 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %125, %"struct.Halide::Runtime::Internal::CacheEntry"** %126, align 8, !tbaa !251
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %125, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %125, i64 0, i32 1
  %127 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %127, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %128 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %128, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %129 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %129, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %130 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %130, align 4, !tbaa !254
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  br label %for.body117

for.body117:                                      ; preds = %for.body117, %for.body117.preheader
  %indvars.iv234 = phi i64 [ 0, %for.body117.preheader ], [ %indvars.iv.next235, %for.body117 ]
  %arrayidx119 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv234
  %131 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %131, i64 0, i32 2
  %132 = load i8*, i8** %host120, align 8, !tbaa !172
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %132) #17
  %133 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %133, align 8, !tbaa !286
  %indvars.iv.next235 = add nuw nsw i64 %indvars.iv234, 1
  %exitcond237.not = icmp eq i64 %indvars.iv.next235, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117, !llvm.loop !298

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #17
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !254
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !254
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !227
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !261, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !262
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !251
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #17
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #16
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !299

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body, label %for.cond.cleanup, !llvm.loop !300
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !164
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !110
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #16
  %2 = load i64, i64* %bits, align 8, !tbaa !110
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #17
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #17
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #17
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #17
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #17
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #17
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #17
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #17
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #17
  %4 = load double, double* %arg.addr, align 8, !tbaa !164
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !164
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !164
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.body, label %while.cond40thread-pre-split

while.body:                                       ; preds = %while.condthread-pre-split, %while.body
  %exponent_base_10.0277 = phi i32 [ %dec, %while.body ], [ 0, %while.condthread-pre-split ]
  %5 = phi double [ %mul, %while.body ], [ %.pr, %while.condthread-pre-split ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0277, -1
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !301

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !164
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !302

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !164
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #17
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #17
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #17
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #17
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #17
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #17
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #17
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %xtraiter = and i32 %integer_exponent.0, 1
  %9 = icmp eq i32 %integer_exponent.0, 1
  br i1 %9, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -2
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.1, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.1, %if.end137.1 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.1, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %cmp113.not264.epil = icmp eq i8* %call108, %int_part_ptr.0268.unr
  br i1 %cmp113.not264.epil, label %for.cond.cleanup, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0266.pn.epil = phi i8* [ %p.0266.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0265.epil = phi i32 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0266.epil = getelementptr inbounds i8, i8* %p.0266.pn.epil, i64 -1
  %10 = load i8, i8* %p.0266.epil, align 1, !tbaa !14
  %sub117.epil = add i8 %10, -48
  %conv119.epil = sext i8 %sub117.epil to i32
  %mul120.epil = shl nsw i32 %conv119.epil, 1
  %add121.epil = or i32 %mul120.epil, %carry.0265.epil
  %11 = trunc i32 %add121.epil to i8
  %cmp124.epil = icmp sgt i8 %11, 9
  %sub127.epil = add nsw i32 %add121.epil, 246
  %carry.1.epil = zext i1 %cmp124.epil to i32
  %new_digit.0.in.epil = select i1 %cmp124.epil, i32 %sub127.epil, i32 %add121.epil
  %12 = trunc i32 %new_digit.0.in.epil to i8
  %conv133.epil = add i8 %12, 48
  store i8 %conv133.epil, i8* %p.0266.epil, align 1, !tbaa !14
  %cmp113.not.epil = icmp eq i8* %p.0266.epil, %int_part_ptr.0268.unr
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !303

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %for.cond.cleanup

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  %incdec.ptr136.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.unr, i64 -1
  store i8 49, i8* %incdec.ptr136.epil, align 1, !tbaa !14
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.cond111.preheader.epil, %for.cond.cleanup114.epil, %if.then135.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %incdec.ptr136.epil, %if.then135.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #17
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #17
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %13 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %13, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %14 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %14, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %15 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %15, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !303

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %cmp113.not264.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not264.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0266.pn.1 = phi i8* [ %p.0266.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0265.1 = phi i32 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0266.1 = getelementptr inbounds i8, i8* %p.0266.pn.1, i64 -1
  %16 = load i8, i8* %p.0266.1, align 1, !tbaa !14
  %sub117.1 = add i8 %16, -48
  %conv119.1 = sext i8 %sub117.1 to i32
  %mul120.1 = shl nsw i32 %conv119.1, 1
  %add121.1 = or i32 %mul120.1, %carry.0265.1
  %17 = trunc i32 %add121.1 to i8
  %cmp124.1 = icmp sgt i8 %17, 9
  %sub127.1 = add nsw i32 %add121.1, 246
  %carry.1.1 = zext i1 %cmp124.1 to i32
  %new_digit.0.in.1 = select i1 %cmp124.1, i32 %sub127.1, i32 %add121.1
  %18 = trunc i32 %new_digit.0.in.1 to i8
  %conv133.1 = add i8 %18, 48
  store i8 %conv133.1, i8* %p.0266.1, align 1, !tbaa !14
  %cmp113.not.1 = icmp eq i8* %p.0266.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !303

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  %incdec.ptr136.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i64 -1
  store i8 49, i8* %incdec.ptr136.1, align 1, !tbaa !14
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %incdec.ptr136.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %niter.nsub.1 = add i32 %niter, -2
  %niter.ncmp.1 = icmp eq i32 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !304
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !305
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #17
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !136
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #17
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !306
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #17
  %5 = load i16, i16* %lanes, align 2, !tbaa !306
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #17
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #17
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !307
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #17
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #17
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !308
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #17
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #17
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #17
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !181
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #17
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !178
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #17
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !182
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #17
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !175
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !309

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 64
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !310
  %call = tail call i32 %0(i8* %user_context) #16
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !312

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !313
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !316
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !308
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !318
  %call = tail call i32 %1(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !307
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !307
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #16
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #17
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !319
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #16
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !321
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !323
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !324
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #16
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !325
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #16
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !326
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 17
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %6 = icmp eq i64 %n.mod.vf, 0
  %7 = select i1 %6, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %7
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi6 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi18, %vector.body ]
  %vec.phi7 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi19, %vector.body ]
  %vec.phi8 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi20, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add3 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add4 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %8 = or i64 %index, 4
  %9 = or i64 %index, 8
  %10 = or i64 %index, 12
  %11 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %12 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %8, i32 2
  %13 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %9, i32 2
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %10, i32 2
  %15 = bitcast i32* %11 to <16 x i32>*
  %16 = bitcast i32* %12 to <16 x i32>*
  %17 = bitcast i32* %13 to <16 x i32>*
  %18 = bitcast i32* %14 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %15, align 4, !tbaa !182
  %wide.vec9 = load <16 x i32>, <16 x i32>* %16, align 4, !tbaa !182
  %wide.vec10 = load <16 x i32>, <16 x i32>* %17, align 4, !tbaa !182
  %wide.vec11 = load <16 x i32>, <16 x i32>* %18, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec9, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec10, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec11, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %19 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %20 = icmp sgt <4 x i32> %strided.vec12, zeroinitializer
  %21 = icmp sgt <4 x i32> %strided.vec13, zeroinitializer
  %22 = icmp sgt <4 x i32> %strided.vec14, zeroinitializer
  %23 = zext <4 x i32> %strided.vec to <4 x i64>
  %24 = zext <4 x i32> %strided.vec12 to <4 x i64>
  %25 = zext <4 x i32> %strided.vec13 to <4 x i64>
  %26 = zext <4 x i32> %strided.vec14 to <4 x i64>
  %27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind, i32 1
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add, i32 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add3, i32 1
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add4, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %27, i32 4, <4 x i1> %19, <4 x i32> undef), !tbaa !178
  %wide.masked.gather15 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %28, i32 4, <4 x i1> %20, <4 x i32> undef), !tbaa !178
  %wide.masked.gather16 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %29, i32 4, <4 x i1> %21, <4 x i32> undef), !tbaa !178
  %wide.masked.gather17 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %30, i32 4, <4 x i1> %22, <4 x i32> undef), !tbaa !178
  %31 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = add nsw <4 x i32> %wide.masked.gather15, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = add nsw <4 x i32> %wide.masked.gather16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = add nsw <4 x i32> %wide.masked.gather17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %35 = sext <4 x i32> %31 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = mul nsw <4 x i64> %35, %23
  %40 = mul nsw <4 x i64> %36, %24
  %41 = mul nsw <4 x i64> %37, %25
  %42 = mul nsw <4 x i64> %38, %26
  %43 = select <4 x i1> %19, <4 x i64> %39, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %43
  %44 = select <4 x i1> %20, <4 x i64> %40, <4 x i64> zeroinitializer
  %predphi18 = add <4 x i64> %vec.phi6, %44
  %45 = select <4 x i1> %21, <4 x i64> %41, <4 x i64> zeroinitializer
  %predphi19 = add <4 x i64> %vec.phi7, %45
  %46 = select <4 x i1> %22, <4 x i64> %42, <4 x i64> zeroinitializer
  %predphi20 = add <4 x i64> %vec.phi8, %46
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %47 = icmp eq i64 %index.next, %n.vec
  br i1 %47, label %middle.block, label %vector.body, !llvm.loop !327

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi18, %predphi
  %bin.rdx21 = add <4 x i64> %predphi19, %bin.rdx
  %bin.rdx22 = add <4 x i64> %predphi20, %bin.rdx21
  %48 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx22)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %48, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %49 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %49, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %49 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %50 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %50, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !328

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check26 = icmp ult i32 %4, 17
  br i1 %min.iters.check26, label %for.body.i13.i.preheader64, label %vector.ph27

vector.ph27:                                      ; preds = %for.body.i13.i.preheader
  %n.mod.vf28 = and i64 %wide.trip.count.i.i, 15
  %51 = icmp eq i64 %n.mod.vf28, 0
  %52 = select i1 %51, i64 16, i64 %n.mod.vf28
  %n.vec29 = sub nsw i64 %wide.trip.count.i.i, %52
  br label %vector.body25

vector.body25:                                    ; preds = %vector.body25, %vector.ph27
  %index30 = phi i64 [ 0, %vector.ph27 ], [ %index.next31, %vector.body25 ]
  %vec.ind34 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph27 ], [ %vec.ind.next39, %vector.body25 ]
  %vec.phi40 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi56, %vector.body25 ]
  %vec.phi41 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi57, %vector.body25 ]
  %vec.phi42 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi58, %vector.body25 ]
  %vec.phi43 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi59, %vector.body25 ]
  %step.add35 = add <4 x i64> %vec.ind34, <i64 4, i64 4, i64 4, i64 4>
  %step.add36 = add <4 x i64> %vec.ind34, <i64 8, i64 8, i64 8, i64 8>
  %step.add37 = add <4 x i64> %vec.ind34, <i64 12, i64 12, i64 12, i64 12>
  %53 = or i64 %index30, 4
  %54 = or i64 %index30, 8
  %55 = or i64 %index30, 12
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index30, i32 2
  %57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %53, i32 2
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %54, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %55, i32 2
  %60 = bitcast i32* %56 to <16 x i32>*
  %61 = bitcast i32* %57 to <16 x i32>*
  %62 = bitcast i32* %58 to <16 x i32>*
  %63 = bitcast i32* %59 to <16 x i32>*
  %wide.vec44 = load <16 x i32>, <16 x i32>* %60, align 4, !tbaa !182
  %wide.vec45 = load <16 x i32>, <16 x i32>* %61, align 4, !tbaa !182
  %wide.vec46 = load <16 x i32>, <16 x i32>* %62, align 4, !tbaa !182
  %wide.vec47 = load <16 x i32>, <16 x i32>* %63, align 4, !tbaa !182
  %strided.vec48 = shufflevector <16 x i32> %wide.vec44, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec49 = shufflevector <16 x i32> %wide.vec45, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec50 = shufflevector <16 x i32> %wide.vec46, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec51 = shufflevector <16 x i32> %wide.vec47, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %64 = icmp slt <4 x i32> %strided.vec48, zeroinitializer
  %65 = icmp slt <4 x i32> %strided.vec49, zeroinitializer
  %66 = icmp slt <4 x i32> %strided.vec50, zeroinitializer
  %67 = icmp slt <4 x i32> %strided.vec51, zeroinitializer
  %68 = sext <4 x i32> %strided.vec48 to <4 x i64>
  %69 = sext <4 x i32> %strided.vec49 to <4 x i64>
  %70 = sext <4 x i32> %strided.vec50 to <4 x i64>
  %71 = sext <4 x i32> %strided.vec51 to <4 x i64>
  %72 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind34, i32 1
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add35, i32 1
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add36, i32 1
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add37, i32 1
  %wide.masked.gather52 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %72, i32 4, <4 x i1> %64, <4 x i32> undef), !tbaa !178
  %wide.masked.gather53 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %73, i32 4, <4 x i1> %65, <4 x i32> undef), !tbaa !178
  %wide.masked.gather54 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %74, i32 4, <4 x i1> %66, <4 x i32> undef), !tbaa !178
  %wide.masked.gather55 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %75, i32 4, <4 x i1> %67, <4 x i32> undef), !tbaa !178
  %76 = add nsw <4 x i32> %wide.masked.gather52, <i32 -1, i32 -1, i32 -1, i32 -1>
  %77 = add nsw <4 x i32> %wide.masked.gather53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %78 = add nsw <4 x i32> %wide.masked.gather54, <i32 -1, i32 -1, i32 -1, i32 -1>
  %79 = add nsw <4 x i32> %wide.masked.gather55, <i32 -1, i32 -1, i32 -1, i32 -1>
  %80 = sext <4 x i32> %76 to <4 x i64>
  %81 = sext <4 x i32> %77 to <4 x i64>
  %82 = sext <4 x i32> %78 to <4 x i64>
  %83 = sext <4 x i32> %79 to <4 x i64>
  %84 = mul nsw <4 x i64> %80, %68
  %85 = mul nsw <4 x i64> %81, %69
  %86 = mul nsw <4 x i64> %82, %70
  %87 = mul nsw <4 x i64> %83, %71
  %88 = select <4 x i1> %64, <4 x i64> %84, <4 x i64> zeroinitializer
  %predphi56 = add <4 x i64> %vec.phi40, %88
  %89 = select <4 x i1> %65, <4 x i64> %85, <4 x i64> zeroinitializer
  %predphi57 = add <4 x i64> %vec.phi41, %89
  %90 = select <4 x i1> %66, <4 x i64> %86, <4 x i64> zeroinitializer
  %predphi58 = add <4 x i64> %vec.phi42, %90
  %91 = select <4 x i1> %67, <4 x i64> %87, <4 x i64> zeroinitializer
  %predphi59 = add <4 x i64> %vec.phi43, %91
  %index.next31 = add i64 %index30, 16
  %vec.ind.next39 = add <4 x i64> %vec.ind34, <i64 16, i64 16, i64 16, i64 16>
  %92 = icmp eq i64 %index.next31, %n.vec29
  br i1 %92, label %middle.block23, label %vector.body25, !llvm.loop !329

middle.block23:                                   ; preds = %vector.body25
  %bin.rdx60 = add <4 x i64> %predphi57, %predphi56
  %bin.rdx61 = add <4 x i64> %predphi58, %bin.rdx60
  %bin.rdx62 = add <4 x i64> %predphi59, %bin.rdx61
  %93 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx62)
  br label %for.body.i13.i.preheader64

for.body.i13.i.preheader64:                       ; preds = %middle.block23, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec29, %middle.block23 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %93, %middle.block23 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader64, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader64 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader64 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %94 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %94, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %94 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %95 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %95, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !330

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %if.end
  %add8.i27.i = phi i64 [ 1, %if.end ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %if.end ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %96 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %96 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !172
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #17
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %97 = load i8*, i8** %host, align 8, !tbaa !172
  tail call void @halide_free(i8* %user_context, i8* %97) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #16
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !307
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !331
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !332
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %3() #16
  store i64 %handle, i64* %device, align 8, !tbaa !174
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !174
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %7() #16
  store i64 0, i64* %device, align 8, !tbaa !174
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #16
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !174
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #17
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !174
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !172
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !308
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !308
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !307
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !172
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !333
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #17
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #17
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !307
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !314
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !333
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #17
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !307
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !314
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !333
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !308
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !308
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #17
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !314
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !333
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %1() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !314
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !320
  tail call void %4() #16
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #17
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %6() #16
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !314
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !322
  tail call void %9() #16
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !335
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !336
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  store i64 0, i64* %device, align 8, !tbaa !174
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %5() #16
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !337
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #17
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #16
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #16
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #16
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #16
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #16
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !73
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !73
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !305
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !136
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !306
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !305
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !136
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !306
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #16
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #16
  %call.i = call i8* @malloc(i64 1024) #16
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #16
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #16
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #16
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #16
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #16
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #16
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #16
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #16
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #16
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #16
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #16
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #16
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #16
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #16
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #16
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #16
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #16
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #16
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #16
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #16
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #16
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #16
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #16
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #16
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #16
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #16
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #16
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #16
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #16
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #16
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #16
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #16
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #16
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #16
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #16
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #16
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #16
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #16
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #16
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #16
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #16
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #16
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #16
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #16
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #16
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #16
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  store i32 -1, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #17
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !341
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !344
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !345
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !346
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !344
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !345
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !346
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #16
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #16
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #16
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #16
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !347
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #16
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #16
  %12 = load i32, i32* %runs, align 8, !tbaa !343
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #16
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #16
  %13 = load i32, i32* %runs, align 8, !tbaa !343
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #16
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #16
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #16
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #16
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #16
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !348
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #16
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #16
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !349
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #16
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #16
  %16 = load i64, i64* %time, align 8, !tbaa !341
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !350
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !353

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !354
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !352
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !356
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #16
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !357
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #16
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !358

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !356
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !343
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #16
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !359

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !341
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !356
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #16
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !360

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !361
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !362
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #16
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #16
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !363

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #16
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #16
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !365

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #16
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #16
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !367

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !368
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #16
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #16
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #16
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #16
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #16
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !369

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !370
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !352
  tail call void @free(i8* %5) #16
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #16
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !373

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !374
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !351
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !375

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #16
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !371
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !372
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !346
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !376
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !351
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to i32*
  store i32 0, i32* %11, align 8, !tbaa !343
  %samples = getelementptr inbounds i8, i8* %call4, i64 84
  %12 = bitcast i8* %samples to i32*
  store i32 0, i32* %12, align 4, !tbaa !347
  %13 = bitcast i8* %call4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !348
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !110
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #16
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !352
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %18 = icmp eq i32 %num_funcs, 1
  br i1 %18, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20.lr.ph.new

for.body20.lr.ph.new:                             ; preds = %for.body20.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #16
  br label %cleanup62

for.cond.cleanup19.loopexit.unr-lcssa:            ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next.1, %for.body20 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup19, label %for.body20.epil

for.body20.epil:                                  ; preds = %for.cond.cleanup19.loopexit.unr-lcssa
  %time22.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 0
  store i64 0, i64* %time22.epil, align 8, !tbaa !356
  %arrayidx24.epil = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.unr
  %19 = load i64, i64* %arrayidx24.epil, align 8, !tbaa !110
  %20 = inttoptr i64 %19 to i8*
  %name28.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 7
  store i8* %20, i8** %name28.epil, align 8, !tbaa !357
  %memory_current32.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 1
  %num_allocs44.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 8
  store i32 0, i32* %num_allocs44.epil, align 8, !tbaa !366
  %21 = bitcast i64* %memory_current32.epil to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %21, align 8, !tbaa !110
  %active_threads_numerator51.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 5
  %22 = bitcast i64* %active_threads_numerator51.epil to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !110
  br label %for.cond.cleanup19

for.cond.cleanup19:                               ; preds = %for.body20.epil, %for.cond.cleanup19.loopexit.unr-lcssa, %for.cond17.preheader
  %23 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %add = add nsw i32 %23, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !374
  store i8* %call4, i8** %4, align 8, !tbaa !371
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph.new ], [ %indvars.iv.next.1, %for.body20 ]
  %niter = phi i64 [ %unroll_iter, %for.body20.lr.ph.new ], [ %niter.nsub.1, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !356
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %24 = load i64, i64* %arrayidx24, align 8, !tbaa !110
  %25 = inttoptr i64 %24 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %25, i8** %name28, align 8, !tbaa !357
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !366
  %26 = bitcast i64* %memory_current32 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %26, align 8, !tbaa !110
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %27 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !110
  %indvars.iv.next = or i64 %indvars.iv, 1
  %time22.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 0
  store i64 0, i64* %time22.1, align 8, !tbaa !356
  %arrayidx24.1 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.next
  %28 = load i64, i64* %arrayidx24.1, align 8, !tbaa !110
  %29 = inttoptr i64 %28 to i8*
  %name28.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 7
  store i8* %29, i8** %name28.1, align 8, !tbaa !357
  %memory_current32.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 1
  %num_allocs44.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 8
  store i32 0, i32* %num_allocs44.1, align 8, !tbaa !366
  %30 = bitcast i64* %memory_current32.1 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %30, align 8, !tbaa !110
  %active_threads_numerator51.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 5
  %31 = bitcast i64* %active_threads_numerator51.1 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !110
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20, !llvm.loop !377

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !376
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !372
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !372
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !356
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !356
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = bitcast i64* %active_threads_numerator to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8, !tbaa !110
  %8 = insertelement <2 x i64> <i64 poison, i64 1>, i64 %conv, i32 0
  %9 = add <2 x i64> %7, %8
  %10 = bitcast i64* %active_threads_numerator to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !110
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %11 = load i64, i64* %time16, align 8, !tbaa !341
  %add17 = add i64 %11, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !341
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %12 = load i32, i32* %samples, align 4, !tbaa !347
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !347
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %13 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !tbaa !110
  %15 = add <2 x i64> %14, %8
  %16 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !110
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %17 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %17, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !378

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !379
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #16
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  store i32 %3, i32* %func, align 4, !tbaa !73
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !380
  store i32 %4, i32* %active_threads, align 4, !tbaa !73
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #16
  %5 = load i32, i32* %func, align 4, !tbaa !73
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !110
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !73
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #17
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !110
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !381
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #16
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !110
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #17
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #16
  call void @halide_sleep_ms(i8* null, i32 %call422) #16
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #17
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !382

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #16
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !383

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #16
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #16
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #17
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #16
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !343
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !384

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !351
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !385
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !384

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !110
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !384

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !340
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #16
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #16
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #16
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !110
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !110
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !110
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !110
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !110
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !110
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %info = alloca [4 x i32], align 4
  %info2 = alloca [4 x i32], align 4
  %info3 = alloca [4 x i32], align 4
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <4 x i64>*
  store <4 x i64> <i64 34084860461808, i64 0, i64 0, i64 0>, <4 x i64>* %0, align 8, !tbaa !110
  %1 = bitcast [4 x i32]* %info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 0
  store i32 1, i32* %arraydecay, align 4, !tbaa !73
  %arrayidx1.i110 = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i110, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay) #11
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 2
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !73
  %and = lshr i32 %2, 15
  %3 = and i32 %and, 16
  %and2 = lshr i32 %2, 23
  %4 = and i32 %and2, 32
  %5 = or i32 %4, %3
  %and6 = lshr i32 %2, 20
  %6 = and i32 %and6, 512
  %7 = or i32 %5, %6
  %and14 = lshr i32 %2, 5
  %8 = and i32 %and14, 128
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  %11 = and i32 %2, 805834752
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  store i64 %10, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %14

14:                                               ; preds = %13, %entry
  %15 = and i32 %2, 1879048192
  %.not = icmp eq i32 %15, 1879048192
  br i1 %.not, label %if.then30, label %if.end67

if.then30:                                        ; preds = %14
  %16 = bitcast [4 x i32]* %info2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 0
  store i32 7, i32* %arraydecay31, align 4, !tbaa !73
  %arrayidx1.i99 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i99, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay31) #11
  %17 = load i32, i32* %arrayidx1.i99, align 4, !tbaa !73
  %and33 = and i32 %17, 32
  %cmp34.not = icmp eq i32 %and33, 0
  br i1 %cmp34.not, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.then30
  %or.i98 = or i64 %10, 64
  store i64 %or.i98, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.then30
  %18 = phi i64 [ %or.i98, %if.then35 ], [ %10, %if.then30 ]
  %and38 = and i32 %17, 268500992
  %cmp39 = icmp eq i32 %and38, 268500992
  br i1 %cmp39, label %if.then40, label %if.end66

if.then40:                                        ; preds = %if.end36
  %and42 = and i32 %17, 469827584
  %cmp43 = icmp eq i32 %and42, 469827584
  %spec.select.v = select i1 %cmp43, i64 3298534883328, i64 1099511627776
  %spec.select = or i64 %18, %spec.select.v
  %and47 = and i32 %17, -805109760
  %cmp48 = icmp eq i32 %and47, -805109760
  %or.i92 = or i64 %spec.select, 4398046511104
  %spec.select130 = select i1 %cmp48, i64 %or.i92, i64 %spec.select
  store i64 %spec.select130, i64* %arrayidx3.i, align 8, !tbaa !110
  %and52 = and i32 %17, -803012608
  %cmp53 = icmp eq i32 %and52, -803012608
  br i1 %cmp53, label %if.then54, label %if.end66

if.then54:                                        ; preds = %if.then40
  %or.i90 = or i64 %spec.select130, 8796093022208
  store i64 %or.i90, i64* %arrayidx3.i, align 8, !tbaa !110
  %19 = bitcast [4 x i32]* %info3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #11
  %arraydecay55 = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 0
  store i32 7, i32* %arraydecay55, align 4, !tbaa !73
  %arrayidx1.i = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 1
  store i32 1, i32* %arrayidx1.i, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay55) #11
  %arrayidx56 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 2
  %20 = load i32, i32* %arrayidx56, align 4, !tbaa !73
  %and57 = and i32 %20, 2048
  %cmp58.not = icmp eq i32 %and57, 0
  br i1 %cmp58.not, label %if.end64, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %if.then54
  %21 = load i32, i32* %arraydecay55, align 4, !tbaa !73
  %and61 = and i32 %21, 32
  %cmp62.not = icmp eq i32 %and61, 0
  br i1 %cmp62.not, label %if.end64, label %if.then63

if.then63:                                        ; preds = %land.lhs.true59
  %or.i = or i64 %spec.select130, 26388279066624
  store i64 %or.i, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true59, %if.then54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #11
  br label %if.end66

if.end66:                                         ; preds = %if.end64, %if.then40, %if.end36
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16>, <16 x i16>) #9

; Function Attrs: nounwind
define i32 @blur3x3(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %blur_y.buffer) local_unnamed_addr #10 {
entry:
  %blur_x.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep2277 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 0
  %.fca.1.gep2278 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep2279 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 2
  %read_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 0
  %0 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8 0, i64 24, i1 false)
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 2
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 2
  %1 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %1, i8 0, i64 24, i1 false)
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 0
  %3 = load i32, i32* %min.i, align 4, !tbaa !181
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 1
  %4 = load i32, i32* %extent.i, align 4, !tbaa !178
  %min.i2663 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 0
  %5 = load i32, i32* %min.i2663, align 4, !tbaa !181
  %extent.i2665 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 1
  %6 = load i32, i32* %extent.i2665, align 4, !tbaa !178
  %stride.i2667 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 2
  %7 = load i32, i32* %stride.i2667, align 4, !tbaa !182
  %host.i2668 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %dim.i2669 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2669, align 8, !tbaa !176
  %min.i2670 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 0
  %9 = load i32, i32* %min.i2670, align 4, !tbaa !181
  %extent.i2672 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 1
  %10 = load i32, i32* %extent.i2672, align 4, !tbaa !178
  %min.i2676 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 0
  %11 = load i32, i32* %min.i2676, align 4, !tbaa !181
  %extent.i2678 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 1
  %12 = load i32, i32* %extent.i2678, align 4, !tbaa !178
  %stride.i2680 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 2
  %13 = load i32, i32* %stride.i2680, align 4, !tbaa !182
  %b22 = add nsw i32 %4, %3
  %t1590 = add nsw i32 %10, %9
  %14 = icmp slt i32 %4, 32
  %t1591 = select i1 %14, i32 %4, i32 32
  %15 = icmp sgt i32 %12, 0
  %16 = select i1 %15, i32 %12, i32 0
  %a40 = add nsw i32 %16, %11
  %t1593 = mul nsw i32 %7, %5
  %17 = add nsw i32 %4, 31
  %a3 = ashr i32 %17, 5
  %18 = icmp sgt i32 %4, 32
  %b21 = select i1 %18, i32 %4, i32 32
  %19 = add nuw nsw i32 %b21, 33
  %20 = lshr i32 %19, 5
  %21 = icmp slt i32 %a3, 1
  %b23 = select i1 %21, i32 %a3, i32 1
  %22 = sub i32 63, %3
  %23 = sub i32 %22, %t1591
  %24 = add i32 %23, %9
  %a5 = ashr i32 %24, 5
  %25 = icmp sgt i32 %a5, 0
  %a4 = select i1 %25, i32 %a5, i32 0
  %26 = icmp sgt i32 %20, %a4
  %b18 = select i1 %26, i32 %a4, i32 %20
  %b8 = add nsw i32 %t1591, -32
  %27 = icmp slt i32 %4, 0
  %28 = select i1 %27, i32 %4, i32 0
  %a6 = select i1 %18, i32 %28, i32 %b8
  %29 = icmp sgt i32 %b8, %a6
  %t1601 = select i1 %29, i32 %a6, i32 %b8
  %b19 = add nuw nsw i32 %b21, 1
  %a14 = add nsw i32 %4, -32
  %30 = add nsw i32 %4, -1
  %31 = and i32 %30, -32
  %a8 = select i1 %18, i32 %31, i32 %a14
  %32 = icmp sgt i32 %a8, %a14
  %33 = select i1 %32, i32 %a8, i32 %a14
  %34 = icmp sgt i32 %4, 0
  %35 = select i1 %34, i32 %4, i32 0
  %a9 = select i1 %18, i32 %35, i32 32
  %36 = icmp sgt i32 %a9, 32
  %37 = select i1 %36, i32 %a9, i32 32
  %38 = add nsw i32 %37, -1
  %39 = and i32 %38, -32
  %b16 = add nsw i32 %39, %33
  %a13 = add nsw i32 %b16, 32
  %40 = icmp sgt i32 %4, %a13
  %a12 = select i1 %40, i32 %a13, i32 %4
  %41 = icmp sgt i32 %b16, %a14
  %42 = select i1 %41, i32 %a14, i32 %b16
  %b14 = add nsw i32 %42, 33
  %43 = icmp sgt i32 %a12, %b14
  %a11 = select i1 %43, i32 %a12, i32 %b14
  %a15 = add nsw i32 %4, 2
  %44 = and i32 %b19, 2147483616
  %b17 = add nsw i32 %44, %t1591
  %45 = icmp sgt i32 %b17, %a15
  %46 = select i1 %45, i32 %a15, i32 %b17
  %b13 = add nsw i32 %46, -1
  %.not = icmp slt i32 %a11, %46
  %47 = select i1 %.not, i32 %b13, i32 %a11
  %48 = sub nsw i32 %47, %t1601
  %a24 = add nsw i32 %48, 1
  %49 = sub nsw i32 %t1590, %t1591
  %a18 = sub i32 %49, %3
  %a20 = add nsw i32 %t1590, 29
  %50 = icmp sgt i32 %b22, %a20
  %51 = select i1 %50, i32 %a20, i32 %b22
  %52 = sub i32 32, %3
  %53 = sub i32 %52, %t1591
  %a19 = add i32 %53, %51
  %54 = icmp sgt i32 %b21, %a19
  %55 = select i1 %54, i32 %a19, i32 %b21
  %b20 = add nsw i32 %55, -30
  %56 = icmp sgt i32 %b20, %a18
  %a17 = select i1 %56, i32 %a18, i32 %b20
  %.not2427 = icmp slt i32 %b21, %a17
  %57 = select i1 %.not2427, i32 %b19, i32 %a17
  %58 = ashr i32 %57, 5
  %a16 = add nsw i32 %58, 1
  %.not2428 = icmp slt i32 %58, %b18
  %t1580 = select i1 %.not2428, i32 %b18, i32 %a16
  %a21 = ashr i32 %4, 5
  %59 = icmp sgt i32 %a21, %b23
  %t1582 = select i1 %59, i32 %a21, i32 %b23
  %60 = add nsw i32 %6, 31
  %t1568 = ashr i32 %60, 5
  %61 = icmp sgt i32 %6, 0
  br i1 %61, label %"for blur_y.s0.y.y.preheader", label %"end for blur_y.s0.y.y", !prof !386

"for blur_y.s0.y.y.preheader":                    ; preds = %entry
  %62 = bitcast i8** %host.i2668 to i16**
  %63 = load i16*, i16** %62, align 8, !tbaa !172
  %64 = bitcast i8** %host.i to i16**
  %65 = load i16*, i16** %64, align 8, !tbaa !172
  %b24 = add nsw i32 %6, -32
  %.inv2578 = icmp slt i32 %48, 0
  %66 = select i1 %.inv2578, i32 0, i32 %a24
  %t2230 = zext i32 %66 to i64
  %67 = mul nuw nsw i64 %t2230, 68
  %68 = add nuw nsw i64 %67, 6
  %69 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b30 = add nsw i32 %12, %11
  %70 = sub nsw i32 %11, %5
  %71 = sub i32 %5, %11
  %t1608 = add nsw i32 %t1601, %3
  %t1606 = add nsw i32 %t1591, %3
  %b36 = add nsw i32 %12, -1
  %b37 = add nsw i32 %b22, 2
  %72 = add nsw i32 %t1590, -1
  %73 = insertelement <32 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <32 x i32> %73, <32 x i32> undef, <8 x i32> zeroinitializer
  %75 = insertelement <32 x i32> undef, i32 %9, i32 0
  %76 = shufflevector <32 x i32> %75, <32 x i32> undef, <8 x i32> zeroinitializer
  %t1617 = sub nsw i32 %20, %t1580
  %77 = icmp sgt i32 %b18, 0
  %78 = sext i32 %11 to i64
  %79 = sext i32 %5 to i64
  %80 = sub nsw i64 %78, %79
  %81 = sext i32 %a24 to i64
  %82 = sext i32 %t1608 to i64
  %t1623 = sub nsw i32 %t1580, %b18
  %83 = icmp sgt i32 %t1623, 0
  %84 = icmp sgt i32 %t1617, 0
  %85 = sub nsw i32 %5, %a40
  %86 = sext i32 %a40 to i64
  %87 = sub nsw i64 %86, %79
  %a73 = sub nsw i32 %4, %t1601
  %88 = icmp sgt i32 %a73, 0
  %89 = select i1 %88, i32 %a73, i32 0
  %t2231 = zext i32 %89 to i64
  %90 = shl nuw nsw i64 %t2231, 3
  %91 = or i64 %90, 6
  %92 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %t654 = sub i32 %t1591, %t1601
  %93 = sext i32 %t654 to i64
  %94 = zext i32 %4 to i64
  %95 = sext i32 %t1601 to i64
  %96 = sub nsw i64 %94, %95
  %97 = sext i32 %t1591 to i64
  %98 = sub nsw i64 %97, %95
  %t1636 = sub nsw i32 %t1582, %b23
  %99 = icmp sgt i32 %t1636, 0
  %100 = sext i32 %b23 to i64
  %t1639 = sub nsw i32 %a3, %t1582
  %101 = icmp sgt i32 %t1639, 0
  %102 = shl nsw i32 %a24, 1
  %a24.neg = xor i32 %48, -1
  %103 = add i32 %t654, %a24.neg
  %t660 = add i32 %103, %102
  %104 = sext i32 %t660 to i64
  %105 = sub nsw i32 %102, %t1601
  %t1643 = sub nsw i32 %105, %a24
  %106 = add nsw i32 %102, %t1591
  %t666 = sub i32 %106, %t1601
  %107 = sext i32 %t666 to i64
  %108 = sext i32 %a73 to i64
  %109 = sext i32 %7 to i64
  %110 = sext i32 %t1593 to i64
  %111 = sub nsw i64 %97, %110
  %t1653 = sub nsw i32 0, %t1593
  %112 = sext i32 %t1653 to i64
  %t682 = add nsw i32 %t666, %a24
  %113 = sext i32 %t682 to i64
  %t1665 = add nsw i32 %105, %a24
  %114 = shl nsw i32 %a24, 2
  %t698 = add i32 %t654, %114
  %115 = sext i32 %t698 to i64
  %t1681 = sub nsw i32 %114, %t1601
  %116 = mul nsw i32 %a24, 5
  %t714 = add i32 %t654, %116
  %117 = sext i32 %t714 to i64
  %t1697 = sub nsw i32 %116, %t1601
  %118 = mul nsw i32 %a24, 6
  %t730 = add i32 %t654, %118
  %119 = sext i32 %t730 to i64
  %t1713 = sub nsw i32 %118, %t1601
  %120 = mul nsw i32 %a24, 7
  %t746 = add i32 %t654, %120
  %121 = sext i32 %t746 to i64
  %t1729 = sub nsw i32 %120, %t1601
  %122 = shl nsw i32 %a24, 3
  %t762 = add i32 %t654, %122
  %123 = sext i32 %t762 to i64
  %t1745 = sub nsw i32 %122, %t1601
  %124 = mul nsw i32 %a24, 9
  %t778 = add i32 %t654, %124
  %125 = sext i32 %t778 to i64
  %t1761 = sub nsw i32 %124, %t1601
  %126 = mul nsw i32 %a24, 10
  %t794 = add i32 %t654, %126
  %127 = sext i32 %t794 to i64
  %t1777 = sub nsw i32 %126, %t1601
  %128 = mul nsw i32 %a24, 11
  %t810 = add i32 %t654, %128
  %129 = sext i32 %t810 to i64
  %t1793 = sub nsw i32 %128, %t1601
  %130 = mul nsw i32 %a24, 12
  %t826 = add i32 %t654, %130
  %131 = sext i32 %t826 to i64
  %t1809 = sub nsw i32 %130, %t1601
  %132 = mul nsw i32 %a24, 13
  %t842 = add i32 %t654, %132
  %133 = sext i32 %t842 to i64
  %t1825 = sub nsw i32 %132, %t1601
  %134 = mul nsw i32 %a24, 14
  %t858 = add i32 %t654, %134
  %135 = sext i32 %t858 to i64
  %t1841 = sub nsw i32 %134, %t1601
  %136 = mul nsw i32 %a24, 15
  %t874 = add i32 %t654, %136
  %137 = sext i32 %t874 to i64
  %t1857 = sub nsw i32 %136, %t1601
  %138 = shl nsw i32 %a24, 4
  %t890 = add i32 %t654, %138
  %139 = sext i32 %t890 to i64
  %t1873 = sub nsw i32 %138, %t1601
  %140 = mul nsw i32 %a24, 17
  %t906 = add i32 %t654, %140
  %141 = sext i32 %t906 to i64
  %t1889 = sub nsw i32 %140, %t1601
  %142 = mul nsw i32 %a24, 18
  %t922 = add i32 %t654, %142
  %143 = sext i32 %t922 to i64
  %t1905 = sub nsw i32 %142, %t1601
  %144 = mul nsw i32 %a24, 19
  %t938 = add i32 %t654, %144
  %145 = sext i32 %t938 to i64
  %t1921 = sub nsw i32 %144, %t1601
  %146 = mul nsw i32 %a24, 20
  %t954 = add i32 %t654, %146
  %147 = sext i32 %t954 to i64
  %t1937 = sub nsw i32 %146, %t1601
  %148 = mul nsw i32 %a24, 21
  %t970 = add i32 %t654, %148
  %149 = sext i32 %t970 to i64
  %t1953 = sub nsw i32 %148, %t1601
  %150 = mul nsw i32 %a24, 22
  %t986 = add i32 %t654, %150
  %151 = sext i32 %t986 to i64
  %t1969 = sub nsw i32 %150, %t1601
  %152 = mul nsw i32 %a24, 23
  %t1002 = add i32 %t654, %152
  %153 = sext i32 %t1002 to i64
  %t1985 = sub nsw i32 %152, %t1601
  %154 = mul nsw i32 %a24, 24
  %t1018 = add i32 %t654, %154
  %155 = sext i32 %t1018 to i64
  %t2001 = sub nsw i32 %154, %t1601
  %156 = mul nsw i32 %a24, 25
  %t1034 = add i32 %t654, %156
  %157 = sext i32 %t1034 to i64
  %t2017 = sub nsw i32 %156, %t1601
  %158 = mul nsw i32 %a24, 26
  %t1050 = add i32 %t654, %158
  %159 = sext i32 %t1050 to i64
  %t2033 = sub nsw i32 %158, %t1601
  %160 = mul nsw i32 %a24, 27
  %t1066 = add i32 %t654, %160
  %161 = sext i32 %t1066 to i64
  %t2049 = sub nsw i32 %160, %t1601
  %162 = mul nsw i32 %a24, 28
  %t1082 = add i32 %t654, %162
  %163 = sext i32 %t1082 to i64
  %t2065 = sub nsw i32 %162, %t1601
  %164 = mul nsw i32 %a24, 29
  %t1098 = add i32 %t654, %164
  %165 = sext i32 %t1098 to i64
  %t2081 = sub nsw i32 %164, %t1601
  %166 = mul nsw i32 %a24, 30
  %t1114 = add i32 %t654, %166
  %167 = sext i32 %t1114 to i64
  %t2097 = sub nsw i32 %166, %t1601
  %168 = mul nsw i32 %a24, 31
  %t1130 = add i32 %t654, %168
  %169 = sext i32 %t1130 to i64
  %t2113 = sub nsw i32 %168, %t1601
  %170 = shl nsw i32 %a24, 5
  %t1146 = add i32 %t654, %170
  %171 = sext i32 %t1146 to i64
  %t2129 = sub nsw i32 %170, %t1601
  %172 = mul nsw i32 %a24, 33
  %t1162 = add i32 %t654, %172
  %173 = sext i32 %t1162 to i64
  %t2145 = sub nsw i32 %172, %t1601
  %174 = sext i32 %b36 to i64
  %175 = zext i32 %b18 to i64
  %176 = sext i32 %t1606 to i64
  %177 = zext i32 %t1623 to i64
  %178 = sext i32 %13 to i64
  %179 = sext i32 %9 to i64
  %180 = zext i32 %t1636 to i64
  %181 = add nsw i64 %177, -1
  %xtraiter = and i64 %177, 3
  %182 = icmp ult i64 %181, 3
  %unroll_iter = and i64 %177, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %"for blur_y.s0.y.y"

"for blur_y.s0.y.y":                              ; preds = %"for blur_y.s0.y.y.preheader", %"end for blur_y.s0.x.x.rebased749"
  %blur_y.s0.y.y = phi i32 [ %10259, %"end for blur_y.s0.x.x.rebased749" ], [ 0, %"for blur_y.s0.y.y.preheader" ]
  %a22 = shl nsw i32 %blur_y.s0.y.y, 5
  %183 = icmp sgt i32 %b24, %a22
  %blur_y.s0.y.yi.base.s = select i1 %183, i32 %a22, i32 %b24
  %184 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i = icmp ult i64 %184, %68
  %185 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i, label %if.then.i, label %pseudostack_alloc.exit, !prof !390

if.then.i:                                        ; preds = %"for blur_y.s0.y.y"
  %tobool1.not.i = icmp ne i8* %185, null
  %186 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i = icmp ugt i64 %186, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i
  call void @halide_free(i8* null, i8* nonnull %185) #16
  %.pre = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i
  %187 = phi i64 [ %.pre, %if.then3.i ], [ %186, %if.then.i ]
  %add.i = add i64 %187, %68
  store i64 %add.i, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i = icmp ugt i64 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i64 %68) #16
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %68, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for blur_y.s0.y.y", %if.end11.i
  %188 = phi i8* [ %storemerge.i, %if.end11.i ], [ %185, %"for blur_y.s0.y.y" ]
  %189 = bitcast i8* %188 to i16*
  %.not2579 = icmp eq i8* %188, null
  br i1 %.not2579, label %then_bb, label %"produce read_input", !prof !392

"end for blur_y.s0.y.y.loopexit":                 ; preds = %"end for blur_y.s0.x.x.rebased749"
  %190 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %191 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %"end for blur_y.s0.y.y"

"end for blur_y.s0.y.y":                          ; preds = %"end for blur_y.s0.y.y.loopexit", %entry
  %.02785 = phi i8* [ null, %entry ], [ %191, %"end for blur_y.s0.y.y.loopexit" ]
  %.0 = phi i8* [ null, %entry ], [ %190, %"end for blur_y.s0.y.y.loopexit" ]
  %192 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i2683 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 0, i32 0
  %193 = load i32, i32* %min.i2683, align 4, !tbaa !181
  %extent.i2685 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 0, i32 1
  %194 = load i32, i32* %extent.i2685, align 4, !tbaa !178
  %min.i2689 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 1, i32 0
  %195 = load i32, i32* %min.i2689, align 4, !tbaa !181
  %extent.i2691 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 1, i32 1
  %196 = load i32, i32* %extent.i2691, align 4, !tbaa !178
  %stride.i2693 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 1, i32 2
  %197 = load i32, i32* %stride.i2693, align 4, !tbaa !182
  %198 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2669, align 8, !tbaa !176
  %min.i2696 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 0, i32 0
  %199 = load i32, i32* %min.i2696, align 4, !tbaa !181
  %extent.i2698 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 0, i32 1
  %200 = load i32, i32* %extent.i2698, align 4, !tbaa !178
  %min.i2702 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 1, i32 0
  %201 = load i32, i32* %min.i2702, align 4, !tbaa !181
  %extent.i2704 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 1, i32 1
  %202 = load i32, i32* %extent.i2704, align 4, !tbaa !178
  %stride.i2706 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 1, i32 2
  %203 = load i32, i32* %stride.i2706, align 4, !tbaa !182
  %t1590769 = add nsw i32 %200, %199
  %204 = icmp slt i32 %194, 32
  %t1591770 = select i1 %204, i32 %194, i32 32
  %205 = icmp sgt i32 %202, 0
  %206 = select i1 %205, i32 %202, i32 0
  %t1592 = add nsw i32 %206, %201
  %t1593771 = mul nsw i32 %197, %195
  %207 = add nsw i32 %194, 31
  %208 = icmp sgt i32 %194, 32
  %209 = select i1 %208, i32 %194, i32 32
  %210 = add nuw nsw i32 %209, 33
  %211 = lshr i32 %210, 5
  %a317 = ashr i32 %207, 5
  %212 = icmp slt i32 %a317, 1
  %t1597 = select i1 %212, i32 %a317, i32 1
  %213 = sub i32 63, %193
  %214 = sub i32 %213, %t1591770
  %215 = add i32 %214, %199
  %a319 = ashr i32 %215, 5
  %216 = icmp sgt i32 %a319, 0
  %a318 = select i1 %216, i32 %a319, i32 0
  %217 = icmp sgt i32 %211, %a318
  %t1598 = select i1 %217, i32 %a318, i32 %211
  %t1600 = add nsw i32 %t1591770, -32
  %218 = icmp slt i32 %194, 0
  %219 = select i1 %218, i32 %194, i32 0
  %a323 = select i1 %208, i32 %219, i32 %t1600
  %220 = icmp sgt i32 %t1600, %a323
  %t1601773 = select i1 %220, i32 %a323, i32 %t1600
  %t1603 = add nsw i32 %194, -32
  %221 = add i32 %194, -1
  %222 = and i32 %221, -32
  %a327 = select i1 %208, i32 %222, i32 %t1603
  %223 = icmp sgt i32 %a327, %t1603
  %224 = select i1 %223, i32 %a327, i32 %t1603
  %225 = icmp sgt i32 %194, 0
  %226 = select i1 %225, i32 %194, i32 0
  %a328 = select i1 %208, i32 %226, i32 32
  %227 = icmp sgt i32 %a328, 32
  %228 = select i1 %227, i32 %a328, i32 32
  %229 = add nsw i32 %228, -1
  %230 = and i32 %229, -32
  %231 = add nsw i32 %230, %224
  %a332 = add nsw i32 %231, 32
  %232 = icmp sgt i32 %194, %a332
  %a331 = select i1 %232, i32 %a332, i32 %194
  %233 = icmp sgt i32 %231, %t1603
  %234 = select i1 %233, i32 %t1603, i32 %231
  %b333 = add nsw i32 %234, 33
  %235 = icmp sgt i32 %a331, %b333
  %a330 = select i1 %235, i32 %a331, i32 %b333
  %a340 = add nsw i32 %194, 2
  %236 = add nuw nsw i32 %209, 1
  %237 = and i32 %236, 2147483616
  %b342 = add nsw i32 %237, %t1591770
  %238 = icmp sgt i32 %b342, %a340
  %239 = select i1 %238, i32 %a340, i32 %b342
  %b332 = add nsw i32 %239, -1
  %.not2429 = icmp slt i32 %a330, %239
  %240 = select i1 %.not2429, i32 %b332, i32 %a330
  %241 = sub nsw i32 %240, %t1601773
  %a363 = add nsw i32 %241, 1
  %242 = sub nsw i32 %t1590769, %t1591770
  %a348 = sub i32 %242, %193
  %a351 = add nsw i32 %t1590769, 29
  %b353 = add nsw i32 %194, %193
  %243 = icmp sgt i32 %b353, %a351
  %244 = select i1 %243, i32 %a351, i32 %b353
  %245 = sub i32 32, %193
  %246 = sub i32 %245, %t1591770
  %a350 = add i32 %246, %244
  %247 = icmp sgt i32 %209, %a350
  %248 = select i1 %247, i32 %a350, i32 %209
  %b350 = add nsw i32 %248, -30
  %249 = icmp sgt i32 %b350, %a348
  %a347 = select i1 %249, i32 %a348, i32 %b350
  %.not2430 = icmp slt i32 %209, %a347
  %250 = select i1 %.not2430, i32 %236, i32 %a347
  %251 = ashr i32 %250, 5
  %a359 = ashr i32 %194, 5
  %252 = icmp sgt i32 %a359, %t1597
  %t1582776 = select i1 %252, i32 %a359, i32 %t1597
  %253 = add nsw i32 %196, 31
  %t1568777 = ashr i32 %253, 5
  %254 = icmp sgt i32 %196, 0
  br i1 %254, label %"for blur_y.s0.y.y778.preheader", label %"end for blur_y.s0.y.y779", !prof !386

"for blur_y.s0.y.y778.preheader":                 ; preds = %"end for blur_y.s0.y.y"
  %a363.neg = xor i32 %241, -1
  %255 = bitcast i8** %host.i2668 to i16**
  %256 = load i16*, i16** %255, align 8, !tbaa !172
  %257 = bitcast i8** %host.i to i16**
  %258 = load i16*, i16** %257, align 8, !tbaa !172
  %.not2431 = icmp slt i32 %251, %t1598
  %a346 = add nsw i32 %251, 1
  %b363 = add nsw i32 %196, -32
  %.inv = icmp slt i32 %241, 0
  %259 = select i1 %.inv, i32 0, i32 %a363
  %t2232 = zext i32 %259 to i64
  %260 = mul nuw nsw i64 %t2232, 68
  %261 = add nuw nsw i64 %260, 6
  %262 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b371 = add nsw i32 %202, %201
  %263 = sub nsw i32 %201, %195
  %264 = sub i32 %195, %201
  %b384 = add nsw i32 %202, -1
  %265 = add i32 %t1601773, %193
  %266 = add nsw i32 %t1591770, %193
  %b405 = add nsw i32 %b353, 2
  %267 = add nsw i32 %t1590769, -1
  %268 = insertelement <32 x i32> undef, i32 %267, i32 0
  %269 = shufflevector <32 x i32> %268, <32 x i32> undef, <8 x i32> zeroinitializer
  %270 = insertelement <32 x i32> undef, i32 %199, i32 0
  %271 = shufflevector <32 x i32> %270, <32 x i32> undef, <8 x i32> zeroinitializer
  %272 = select i1 %.not2431, i32 %t1598, i32 %a346
  %t1617803 = sub nsw i32 %211, %272
  %273 = icmp sgt i32 %t1598, 0
  %274 = sext i32 %201 to i64
  %275 = sext i32 %195 to i64
  %276 = sub nsw i64 %274, %275
  %277 = sext i32 %a363 to i64
  %278 = sext i32 %265 to i64
  %t1623816 = sub nsw i32 %272, %t1598
  %279 = icmp sgt i32 %t1623816, 0
  %280 = icmp sgt i32 %t1617803, 0
  %281 = sub nsw i32 %195, %t1592
  %282 = sext i32 %t1592 to i64
  %283 = sub nsw i64 %282, %275
  %a537 = sub nsw i32 %194, %t1601773
  %284 = icmp sgt i32 %a537, 0
  %285 = select i1 %284, i32 %a537, i32 0
  %t2233 = zext i32 %285 to i64
  %286 = shl nuw nsw i64 %t2233, 3
  %287 = or i64 %286, 6
  %288 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %a540 = select i1 %208, i32 0, i32 %t1600
  %289 = icmp sgt i32 %t1600, %a540
  %290 = select i1 %289, i32 %a540, i32 %t1600
  %t654847 = sub i32 %t1591770, %290
  %291 = sext i32 %t654847 to i64
  %292 = zext i32 %194 to i64
  %293 = sext i32 %t1601773 to i64
  %294 = sub nsw i64 %292, %293
  %295 = sext i32 %t1591770 to i64
  %296 = sub nsw i64 %295, %293
  %t1636849 = sub nsw i32 %t1582776, %t1597
  %297 = icmp sgt i32 %t1636849, 0
  %298 = sext i32 %t1597 to i64
  %t1639860 = sub nsw i32 %a317, %t1582776
  %299 = icmp sgt i32 %t1639860, 0
  %300 = select i1 %208, i32 %222, i32 0
  %301 = add nsw i32 %224, %300
  %a601 = add nsw i32 %301, 32
  %302 = icmp sgt i32 %194, %a601
  %a600 = select i1 %302, i32 %a601, i32 %194
  %303 = icmp sgt i32 %301, %t1603
  %304 = select i1 %303, i32 %t1603, i32 %301
  %b602 = add nsw i32 %304, 33
  %305 = icmp sgt i32 %a600, %b602
  %a599 = select i1 %305, i32 %a600, i32 %b602
  %.not2565 = icmp slt i32 %a599, %239
  %306 = select i1 %.not2565, i32 %b332, i32 %a599
  %307 = sub nsw i32 %306, %290
  %308 = shl i32 %307, 1
  %309 = add i32 %308, 2
  %.neg2950 = xor i32 %307, -1
  %310 = add i32 %t654847, %.neg2950
  %t660875 = add i32 %310, %309
  %311 = sext i32 %t660875 to i64
  %312 = shl nsw i32 %a363, 1
  %313 = sub nsw i32 %312, %t1601773
  %314 = add i32 %313, %a363.neg
  %315 = add nsw i32 %t1591770, 2
  %316 = sub i32 %315, %290
  %t666905 = add i32 %316, %308
  %317 = sext i32 %t666905 to i64
  %t1219909 = sub nsw i32 %194, %290
  %318 = sext i32 %t1219909 to i64
  %319 = sext i32 %197 to i64
  %320 = sext i32 %t1593771 to i64
  %321 = sub nsw i64 %295, %320
  %t1653915 = sub nsw i32 0, %t1593771
  %322 = sext i32 %a537 to i64
  %323 = sext i32 %t1653915 to i64
  %324 = add nsw i32 %307, 1
  %325 = shl nsw i32 %324, 1
  %326 = add i32 %t654847, %324
  %t682948 = add i32 %326, %325
  %327 = sext i32 %t682948 to i64
  %328 = add nsw i32 %313, %a363
  %329 = shl i32 %307, 2
  %330 = add nsw i32 %t1591770, 4
  %331 = sub i32 %330, %290
  %t698991 = add i32 %331, %329
  %332 = sext i32 %t698991 to i64
  %333 = shl nsw i32 %a363, 2
  %334 = sub i32 %333, %t1601773
  %335 = mul i32 %307, 5
  %336 = add nsw i32 %t1591770, 5
  %337 = sub i32 %336, %290
  %t7141034 = add i32 %337, %335
  %338 = sext i32 %t7141034 to i64
  %339 = mul nsw i32 %a363, 5
  %340 = sub i32 %339, %t1601773
  %341 = mul i32 %307, 6
  %342 = add nsw i32 %t1591770, 6
  %343 = sub i32 %342, %290
  %t7301077 = add i32 %343, %341
  %344 = sext i32 %t7301077 to i64
  %345 = mul nsw i32 %a363, 6
  %346 = sub i32 %345, %t1601773
  %347 = mul i32 %307, 7
  %348 = add nsw i32 %t1591770, 7
  %349 = sub i32 %348, %290
  %t7461120 = add i32 %349, %347
  %350 = sext i32 %t7461120 to i64
  %351 = mul nsw i32 %a363, 7
  %352 = sub i32 %351, %t1601773
  %353 = shl i32 %307, 3
  %354 = add nsw i32 %t1591770, 8
  %355 = sub i32 %354, %290
  %t7621163 = add i32 %355, %353
  %356 = sext i32 %t7621163 to i64
  %357 = shl nsw i32 %a363, 3
  %358 = sub i32 %357, %t1601773
  %359 = mul i32 %307, 9
  %360 = add nsw i32 %t1591770, 9
  %361 = sub i32 %360, %290
  %t7781206 = add i32 %361, %359
  %362 = sext i32 %t7781206 to i64
  %363 = mul nsw i32 %a363, 9
  %364 = sub i32 %363, %t1601773
  %365 = mul i32 %307, 10
  %366 = add nsw i32 %t1591770, 10
  %367 = sub i32 %366, %290
  %t7941249 = add i32 %367, %365
  %368 = sext i32 %t7941249 to i64
  %369 = mul nsw i32 %a363, 10
  %370 = sub i32 %369, %t1601773
  %371 = mul i32 %307, 11
  %372 = add nsw i32 %t1591770, 11
  %373 = sub i32 %372, %290
  %t8101292 = add i32 %373, %371
  %374 = sext i32 %t8101292 to i64
  %375 = mul nsw i32 %a363, 11
  %376 = sub i32 %375, %t1601773
  %377 = mul i32 %307, 12
  %378 = add nsw i32 %t1591770, 12
  %379 = sub i32 %378, %290
  %t8261335 = add i32 %379, %377
  %380 = sext i32 %t8261335 to i64
  %381 = mul nsw i32 %a363, 12
  %382 = sub i32 %381, %t1601773
  %383 = mul i32 %307, 13
  %384 = add nsw i32 %t1591770, 13
  %385 = sub i32 %384, %290
  %t8421378 = add i32 %385, %383
  %386 = sext i32 %t8421378 to i64
  %387 = mul nsw i32 %a363, 13
  %388 = sub i32 %387, %t1601773
  %389 = mul i32 %307, 14
  %390 = add nsw i32 %t1591770, 14
  %391 = sub i32 %390, %290
  %t8581421 = add i32 %391, %389
  %392 = sext i32 %t8581421 to i64
  %393 = mul nsw i32 %a363, 14
  %394 = sub i32 %393, %t1601773
  %395 = mul i32 %307, 15
  %396 = add nsw i32 %t1591770, 15
  %397 = sub i32 %396, %290
  %t8741464 = add i32 %397, %395
  %398 = sext i32 %t8741464 to i64
  %399 = mul nsw i32 %a363, 15
  %400 = sub i32 %399, %t1601773
  %401 = shl i32 %307, 4
  %402 = add nsw i32 %t1591770, 16
  %403 = sub i32 %402, %290
  %t8901507 = add i32 %403, %401
  %404 = sext i32 %t8901507 to i64
  %405 = shl nsw i32 %a363, 4
  %406 = sub i32 %405, %t1601773
  %407 = mul i32 %307, 17
  %408 = add nsw i32 %t1591770, 17
  %409 = sub i32 %408, %290
  %t9061550 = add i32 %409, %407
  %410 = sext i32 %t9061550 to i64
  %411 = mul nsw i32 %a363, 17
  %412 = sub i32 %411, %t1601773
  %413 = mul i32 %307, 18
  %414 = add nsw i32 %t1591770, 18
  %415 = sub i32 %414, %290
  %t9221593 = add i32 %415, %413
  %416 = sext i32 %t9221593 to i64
  %417 = mul nsw i32 %a363, 18
  %418 = sub i32 %417, %t1601773
  %419 = mul i32 %307, 19
  %420 = add nsw i32 %t1591770, 19
  %421 = sub i32 %420, %290
  %t9381636 = add i32 %421, %419
  %422 = sext i32 %t9381636 to i64
  %423 = mul nsw i32 %a363, 19
  %424 = sub i32 %423, %t1601773
  %425 = mul i32 %307, 20
  %426 = add nsw i32 %t1591770, 20
  %427 = sub i32 %426, %290
  %t9541679 = add i32 %427, %425
  %428 = sext i32 %t9541679 to i64
  %429 = mul nsw i32 %a363, 20
  %430 = sub i32 %429, %t1601773
  %431 = mul i32 %307, 21
  %432 = add nsw i32 %t1591770, 21
  %433 = sub i32 %432, %290
  %t9701722 = add i32 %433, %431
  %434 = sext i32 %t9701722 to i64
  %435 = mul nsw i32 %a363, 21
  %436 = sub i32 %435, %t1601773
  %437 = mul i32 %307, 22
  %438 = add nsw i32 %t1591770, 22
  %439 = sub i32 %438, %290
  %t9861765 = add i32 %439, %437
  %440 = sext i32 %t9861765 to i64
  %441 = mul nsw i32 %a363, 22
  %442 = sub i32 %441, %t1601773
  %443 = mul i32 %307, 23
  %444 = add nsw i32 %t1591770, 23
  %445 = sub i32 %444, %290
  %t10021808 = add i32 %445, %443
  %446 = sext i32 %t10021808 to i64
  %447 = mul nsw i32 %a363, 23
  %448 = sub i32 %447, %t1601773
  %449 = mul i32 %307, 24
  %450 = add nsw i32 %t1591770, 24
  %451 = sub i32 %450, %290
  %t10181851 = add i32 %451, %449
  %452 = sext i32 %t10181851 to i64
  %453 = mul nsw i32 %a363, 24
  %454 = sub i32 %453, %t1601773
  %455 = mul i32 %307, 25
  %456 = add nsw i32 %t1591770, 25
  %457 = sub i32 %456, %290
  %t10341894 = add i32 %457, %455
  %458 = sext i32 %t10341894 to i64
  %459 = mul nsw i32 %a363, 25
  %460 = sub i32 %459, %t1601773
  %461 = mul i32 %307, 26
  %462 = add nsw i32 %t1591770, 26
  %463 = sub i32 %462, %290
  %t10501937 = add i32 %463, %461
  %464 = sext i32 %t10501937 to i64
  %465 = mul nsw i32 %a363, 26
  %466 = sub i32 %465, %t1601773
  %467 = mul i32 %307, 27
  %468 = add nsw i32 %t1591770, 27
  %469 = sub i32 %468, %290
  %t10661980 = add i32 %469, %467
  %470 = sext i32 %t10661980 to i64
  %471 = mul nsw i32 %a363, 27
  %472 = sub i32 %471, %t1601773
  %473 = mul i32 %307, 28
  %474 = add nsw i32 %t1591770, 28
  %475 = sub i32 %474, %290
  %t10822023 = add i32 %475, %473
  %476 = sext i32 %t10822023 to i64
  %477 = mul nsw i32 %a363, 28
  %478 = sub i32 %477, %t1601773
  %479 = mul i32 %307, 29
  %480 = add nsw i32 %t1591770, 29
  %481 = sub i32 %480, %290
  %t10982066 = add i32 %481, %479
  %482 = sext i32 %t10982066 to i64
  %483 = mul nsw i32 %a363, 29
  %484 = sub i32 %483, %t1601773
  %485 = mul i32 %307, 30
  %486 = add nsw i32 %t1591770, 30
  %487 = sub i32 %486, %290
  %t11142109 = add i32 %487, %485
  %488 = sext i32 %t11142109 to i64
  %489 = mul nsw i32 %a363, 30
  %490 = sub i32 %489, %t1601773
  %491 = mul i32 %307, 31
  %492 = add nsw i32 %t1591770, 31
  %493 = sub i32 %492, %290
  %t11302152 = add i32 %493, %491
  %494 = sext i32 %t11302152 to i64
  %495 = mul nsw i32 %a363, 31
  %496 = sub i32 %495, %t1601773
  %497 = shl i32 %307, 5
  %498 = add nsw i32 %t1591770, 32
  %499 = sub i32 %498, %290
  %t11462195 = add i32 %499, %497
  %500 = sext i32 %t11462195 to i64
  %501 = shl nsw i32 %a363, 5
  %502 = sub i32 %501, %t1601773
  %503 = mul i32 %307, 33
  %504 = add nsw i32 %t1591770, 33
  %505 = sub i32 %504, %290
  %t11622238 = add i32 %505, %503
  %506 = sext i32 %t11622238 to i64
  %507 = mul nsw i32 %a363, 33
  %508 = sub i32 %507, %t1601773
  %509 = sext i32 %b384 to i64
  %510 = zext i32 %t1598 to i64
  %511 = sext i32 %266 to i64
  %512 = zext i32 %t1623816 to i64
  %513 = sext i32 %203 to i64
  %514 = sext i32 %199 to i64
  %515 = zext i32 %t1636849 to i64
  %516 = add nsw i64 %512, -1
  %xtraiter3464 = and i64 %512, 3
  %517 = icmp ult i64 %516, 3
  %unroll_iter3467 = and i64 %512, 4294967292
  %lcmp.mod3466.not = icmp eq i64 %xtraiter3464, 0
  br label %"for blur_y.s0.y.y778"

then_bb:                                          ; preds = %pseudostack_alloc.exit
  %518 = alloca i8*, i64 %68, align 32
  %519 = bitcast i8** %518 to i16*
  store i8** %518, i8*** %69, align 8
  br label %"produce read_input"

"produce read_input":                             ; preds = %pseudostack_alloc.exit, %then_bb
  %read_input = phi i16* [ %519, %then_bb ], [ %189, %pseudostack_alloc.exit ]
  %a26 = add nsw i32 %blur_y.s0.y.yi.base.s, %5
  %520 = icmp sgt i32 %a26, %11
  %a25 = select i1 %520, i32 %a26, i32 %11
  %b27 = add nsw i32 %a26, 34
  %521 = icmp sgt i32 %b27, %a25
  %read_input.s0.y.prologue = select i1 %521, i32 %a25, i32 %b27
  %522 = icmp sgt i32 %a25, %b30
  %a27 = select i1 %522, i32 %a25, i32 %b30
  %523 = icmp sgt i32 %b27, %a27
  %read_input.s0.y.epilogue = select i1 %523, i32 %a27, i32 %b27
  %a31 = sub i32 %70, %blur_y.s0.y.yi.base.s
  %524 = icmp sgt i32 %a31, 0
  br i1 %524, label %"for read_input.s0.y.rebased.preheader", label %"end for read_input.s0.y.rebased", !prof !386

"for read_input.s0.y.rebased.preheader":          ; preds = %"produce read_input"
  %t1607 = add nsw i32 %71, %blur_y.s0.y.yi.base.s
  %525 = icmp slt i32 %a31, 34
  %a30 = select i1 %525, i32 %a31, i32 34
  %526 = sext i32 %t1607 to i64
  %527 = zext i32 %a30 to i64
  br label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased":                    ; preds = %"for read_input.s0.y.rebased.preheader", %"end for read_input.s0.x.x"
  %indvars.iv = phi i64 [ 0, %"for read_input.s0.y.rebased.preheader" ], [ %indvars.iv.next, %"end for read_input.s0.x.x" ]
  %528 = add nsw i64 %indvars.iv, %526
  %529 = icmp slt i64 %528, %174
  %530 = trunc i64 %528 to i32
  %a33 = select i1 %529, i32 %530, i32 %b36
  %531 = mul nsw i64 %indvars.iv, %81
  %532 = sub nsw i64 %531, %82
  %533 = icmp sgt i32 %a33, 0
  %534 = select i1 %533, i32 %a33, i32 0
  %535 = mul nsw i32 %534, %13
  %t1609 = sub nsw i32 %535, %9
  %536 = insertelement <32 x i32> undef, i32 %t1609, i32 0
  %537 = shufflevector <32 x i32> %536, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %"for read_input.s0.x.x"

"end for read_input.s0.y.rebased":                ; preds = %"end for read_input.s0.x.x", %"produce read_input"
  %538 = icmp sgt i32 %a40, %a26
  %a39 = select i1 %538, i32 %a40, i32 %a26
  %539 = icmp sgt i32 %b27, %a39
  %540 = select i1 %539, i32 %a39, i32 %b27
  %t1611 = sub nsw i32 %540, %read_input.s0.y.prologue
  %541 = icmp sgt i32 %t1611, 0
  br i1 %541, label %"for read_input.s0.y.rebased1.preheader", label %"end for read_input.s0.y.rebased2", !prof !386

"for read_input.s0.y.rebased1.preheader":         ; preds = %"end for read_input.s0.y.rebased"
  %t1614 = sub i32 %read_input.s0.y.prologue, %11
  %542 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a47 = sub nsw i64 %80, %542
  %543 = icmp slt i64 %a47, 34
  %a46 = select i1 %543, i64 %a47, i64 34
  %544 = icmp sgt i64 %a46, 0
  %545 = select i1 %544, i64 %a46, i64 0
  %546 = sext i32 %t1614 to i64
  %547 = zext i32 %t1611 to i64
  br label %"for read_input.s0.y.rebased1"

"for read_input.s0.x.x":                          ; preds = %"for read_input.s0.y.rebased", %"for read_input.s0.x.x"
  %read_input.s0.x.x = phi i32 [ %746, %"for read_input.s0.x.x" ], [ 0, %"for read_input.s0.y.rebased" ]
  %548 = shl nsw i32 %read_input.s0.x.x, 5
  %a35 = add nsw i32 %548, %t1606
  %549 = icmp sgt i32 %b37, %a35
  %read_input.s0.x.v2.base.s = select i1 %549, i32 %a35, i32 %b37
  %550 = add nsw i32 %read_input.s0.x.v2.base.s, -32
  %551 = insertelement <32 x i32> undef, i32 %550, i32 0
  %552 = shufflevector <32 x i32> %551, <32 x i32> undef, <32 x i32> zeroinitializer
  %a37 = add nsw <32 x i32> %552, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %553 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %554 = icmp sgt <8 x i32> %74, %553
  %555 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %556 = icmp sgt <8 x i32> %74, %555
  %557 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %558 = icmp sgt <8 x i32> %74, %557
  %559 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %560 = icmp sgt <8 x i32> %74, %559
  %561 = select <8 x i1> %554, <8 x i32> %553, <8 x i32> %74
  %562 = select <8 x i1> %556, <8 x i32> %555, <8 x i32> %74
  %563 = select <8 x i1> %558, <8 x i32> %557, <8 x i32> %74
  %564 = select <8 x i1> %560, <8 x i32> %559, <8 x i32> %74
  %565 = icmp sgt <8 x i32> %561, %76
  %566 = icmp sgt <8 x i32> %562, %76
  %567 = icmp sgt <8 x i32> %563, %76
  %568 = icmp sgt <8 x i32> %564, %76
  %569 = select <8 x i1> %565, <8 x i32> %561, <8 x i32> %76
  %570 = select <8 x i1> %566, <8 x i32> %562, <8 x i32> %76
  %571 = select <8 x i1> %567, <8 x i32> %563, <8 x i32> %76
  %572 = select <8 x i1> %568, <8 x i32> %564, <8 x i32> %76
  %573 = shufflevector <8 x i32> %569, <8 x i32> %570, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %574 = shufflevector <8 x i32> %571, <8 x i32> %572, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %575 = shufflevector <16 x i32> %573, <16 x i32> %574, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %576 = add nsw <32 x i32> %575, %537
  %577 = extractelement <32 x i32> %576, i32 0
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds i16, i16* %63, i64 %578
  %580 = load i16, i16* %579, align 2, !tbaa !393
  %581 = insertelement <32 x i16> undef, i16 %580, i32 0
  %582 = extractelement <32 x i32> %576, i32 1
  %583 = sext i32 %582 to i64
  %584 = getelementptr inbounds i16, i16* %63, i64 %583
  %585 = load i16, i16* %584, align 2, !tbaa !393
  %586 = insertelement <32 x i16> %581, i16 %585, i32 1
  %587 = extractelement <32 x i32> %576, i32 2
  %588 = sext i32 %587 to i64
  %589 = getelementptr inbounds i16, i16* %63, i64 %588
  %590 = load i16, i16* %589, align 2, !tbaa !393
  %591 = insertelement <32 x i16> %586, i16 %590, i32 2
  %592 = extractelement <32 x i32> %576, i32 3
  %593 = sext i32 %592 to i64
  %594 = getelementptr inbounds i16, i16* %63, i64 %593
  %595 = load i16, i16* %594, align 2, !tbaa !393
  %596 = insertelement <32 x i16> %591, i16 %595, i32 3
  %597 = extractelement <32 x i32> %576, i32 4
  %598 = sext i32 %597 to i64
  %599 = getelementptr inbounds i16, i16* %63, i64 %598
  %600 = load i16, i16* %599, align 2, !tbaa !393
  %601 = insertelement <32 x i16> %596, i16 %600, i32 4
  %602 = extractelement <32 x i32> %576, i32 5
  %603 = sext i32 %602 to i64
  %604 = getelementptr inbounds i16, i16* %63, i64 %603
  %605 = load i16, i16* %604, align 2, !tbaa !393
  %606 = insertelement <32 x i16> %601, i16 %605, i32 5
  %607 = extractelement <32 x i32> %576, i32 6
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds i16, i16* %63, i64 %608
  %610 = load i16, i16* %609, align 2, !tbaa !393
  %611 = insertelement <32 x i16> %606, i16 %610, i32 6
  %612 = extractelement <32 x i32> %576, i32 7
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds i16, i16* %63, i64 %613
  %615 = load i16, i16* %614, align 2, !tbaa !393
  %616 = insertelement <32 x i16> %611, i16 %615, i32 7
  %617 = extractelement <32 x i32> %576, i32 8
  %618 = sext i32 %617 to i64
  %619 = getelementptr inbounds i16, i16* %63, i64 %618
  %620 = load i16, i16* %619, align 2, !tbaa !393
  %621 = insertelement <32 x i16> %616, i16 %620, i32 8
  %622 = extractelement <32 x i32> %576, i32 9
  %623 = sext i32 %622 to i64
  %624 = getelementptr inbounds i16, i16* %63, i64 %623
  %625 = load i16, i16* %624, align 2, !tbaa !393
  %626 = insertelement <32 x i16> %621, i16 %625, i32 9
  %627 = extractelement <32 x i32> %576, i32 10
  %628 = sext i32 %627 to i64
  %629 = getelementptr inbounds i16, i16* %63, i64 %628
  %630 = load i16, i16* %629, align 2, !tbaa !393
  %631 = insertelement <32 x i16> %626, i16 %630, i32 10
  %632 = extractelement <32 x i32> %576, i32 11
  %633 = sext i32 %632 to i64
  %634 = getelementptr inbounds i16, i16* %63, i64 %633
  %635 = load i16, i16* %634, align 2, !tbaa !393
  %636 = insertelement <32 x i16> %631, i16 %635, i32 11
  %637 = extractelement <32 x i32> %576, i32 12
  %638 = sext i32 %637 to i64
  %639 = getelementptr inbounds i16, i16* %63, i64 %638
  %640 = load i16, i16* %639, align 2, !tbaa !393
  %641 = insertelement <32 x i16> %636, i16 %640, i32 12
  %642 = extractelement <32 x i32> %576, i32 13
  %643 = sext i32 %642 to i64
  %644 = getelementptr inbounds i16, i16* %63, i64 %643
  %645 = load i16, i16* %644, align 2, !tbaa !393
  %646 = insertelement <32 x i16> %641, i16 %645, i32 13
  %647 = extractelement <32 x i32> %576, i32 14
  %648 = sext i32 %647 to i64
  %649 = getelementptr inbounds i16, i16* %63, i64 %648
  %650 = load i16, i16* %649, align 2, !tbaa !393
  %651 = insertelement <32 x i16> %646, i16 %650, i32 14
  %652 = extractelement <32 x i32> %576, i32 15
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds i16, i16* %63, i64 %653
  %655 = load i16, i16* %654, align 2, !tbaa !393
  %656 = insertelement <32 x i16> %651, i16 %655, i32 15
  %657 = extractelement <32 x i32> %576, i32 16
  %658 = sext i32 %657 to i64
  %659 = getelementptr inbounds i16, i16* %63, i64 %658
  %660 = load i16, i16* %659, align 2, !tbaa !393
  %661 = insertelement <32 x i16> %656, i16 %660, i32 16
  %662 = extractelement <32 x i32> %576, i32 17
  %663 = sext i32 %662 to i64
  %664 = getelementptr inbounds i16, i16* %63, i64 %663
  %665 = load i16, i16* %664, align 2, !tbaa !393
  %666 = insertelement <32 x i16> %661, i16 %665, i32 17
  %667 = extractelement <32 x i32> %576, i32 18
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds i16, i16* %63, i64 %668
  %670 = load i16, i16* %669, align 2, !tbaa !393
  %671 = insertelement <32 x i16> %666, i16 %670, i32 18
  %672 = extractelement <32 x i32> %576, i32 19
  %673 = sext i32 %672 to i64
  %674 = getelementptr inbounds i16, i16* %63, i64 %673
  %675 = load i16, i16* %674, align 2, !tbaa !393
  %676 = insertelement <32 x i16> %671, i16 %675, i32 19
  %677 = extractelement <32 x i32> %576, i32 20
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds i16, i16* %63, i64 %678
  %680 = load i16, i16* %679, align 2, !tbaa !393
  %681 = insertelement <32 x i16> %676, i16 %680, i32 20
  %682 = extractelement <32 x i32> %576, i32 21
  %683 = sext i32 %682 to i64
  %684 = getelementptr inbounds i16, i16* %63, i64 %683
  %685 = load i16, i16* %684, align 2, !tbaa !393
  %686 = insertelement <32 x i16> %681, i16 %685, i32 21
  %687 = extractelement <32 x i32> %576, i32 22
  %688 = sext i32 %687 to i64
  %689 = getelementptr inbounds i16, i16* %63, i64 %688
  %690 = load i16, i16* %689, align 2, !tbaa !393
  %691 = insertelement <32 x i16> %686, i16 %690, i32 22
  %692 = extractelement <32 x i32> %576, i32 23
  %693 = sext i32 %692 to i64
  %694 = getelementptr inbounds i16, i16* %63, i64 %693
  %695 = load i16, i16* %694, align 2, !tbaa !393
  %696 = insertelement <32 x i16> %691, i16 %695, i32 23
  %697 = extractelement <32 x i32> %576, i32 24
  %698 = sext i32 %697 to i64
  %699 = getelementptr inbounds i16, i16* %63, i64 %698
  %700 = load i16, i16* %699, align 2, !tbaa !393
  %701 = insertelement <32 x i16> %696, i16 %700, i32 24
  %702 = extractelement <32 x i32> %576, i32 25
  %703 = sext i32 %702 to i64
  %704 = getelementptr inbounds i16, i16* %63, i64 %703
  %705 = load i16, i16* %704, align 2, !tbaa !393
  %706 = insertelement <32 x i16> %701, i16 %705, i32 25
  %707 = extractelement <32 x i32> %576, i32 26
  %708 = sext i32 %707 to i64
  %709 = getelementptr inbounds i16, i16* %63, i64 %708
  %710 = load i16, i16* %709, align 2, !tbaa !393
  %711 = insertelement <32 x i16> %706, i16 %710, i32 26
  %712 = extractelement <32 x i32> %576, i32 27
  %713 = sext i32 %712 to i64
  %714 = getelementptr inbounds i16, i16* %63, i64 %713
  %715 = load i16, i16* %714, align 2, !tbaa !393
  %716 = insertelement <32 x i16> %711, i16 %715, i32 27
  %717 = extractelement <32 x i32> %576, i32 28
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds i16, i16* %63, i64 %718
  %720 = load i16, i16* %719, align 2, !tbaa !393
  %721 = insertelement <32 x i16> %716, i16 %720, i32 28
  %722 = extractelement <32 x i32> %576, i32 29
  %723 = sext i32 %722 to i64
  %724 = getelementptr inbounds i16, i16* %63, i64 %723
  %725 = load i16, i16* %724, align 2, !tbaa !393
  %726 = insertelement <32 x i16> %721, i16 %725, i32 29
  %727 = extractelement <32 x i32> %576, i32 30
  %728 = sext i32 %727 to i64
  %729 = getelementptr inbounds i16, i16* %63, i64 %728
  %730 = load i16, i16* %729, align 2, !tbaa !393
  %731 = insertelement <32 x i16> %726, i16 %730, i32 30
  %732 = extractelement <32 x i32> %576, i32 31
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds i16, i16* %63, i64 %733
  %735 = load i16, i16* %734, align 2, !tbaa !393
  %736 = insertelement <32 x i16> %731, i16 %735, i32 31
  %737 = shufflevector <32 x i16> %736, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %738 = sext i32 %read_input.s0.x.v2.base.s to i64
  %739 = add nsw i64 %532, %738
  %740 = getelementptr inbounds i16, i16* %read_input, i64 %739
  %741 = getelementptr inbounds i16, i16* %740, i64 -32
  %742 = bitcast i16* %741 to <16 x i16>*
  store <16 x i16> %737, <16 x i16>* %742, align 2, !tbaa !396
  %743 = shufflevector <32 x i16> %736, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %744 = getelementptr inbounds i16, i16* %740, i64 -16
  %745 = bitcast i16* %744 to <16 x i16>*
  store <16 x i16> %743, <16 x i16>* %745, align 2, !tbaa !396
  %746 = add nuw nsw i32 %read_input.s0.x.x, 1
  %.not2659 = icmp eq i32 %746, %20
  br i1 %.not2659, label %"end for read_input.s0.x.x", label %"for read_input.s0.x.x"

"end for read_input.s0.x.x":                      ; preds = %"for read_input.s0.x.x"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not2658 = icmp eq i64 %indvars.iv.next, %527
  br i1 %.not2658, label %"end for read_input.s0.y.rebased", label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased1":                   ; preds = %"for read_input.s0.y.rebased1.preheader", %"end for read_input.s0.x.x.rebased10"
  %indvars.iv3120 = phi i64 [ 0, %"for read_input.s0.y.rebased1.preheader" ], [ %indvars.iv.next3121, %"end for read_input.s0.x.x.rebased10" ]
  %747 = add nsw i64 %indvars.iv3120, %546
  %748 = mul nsw i64 %747, %178
  %749 = sub nsw i64 %748, %179
  br i1 %77, label %"for read_input.s0.x.x4.preheader", label %"end for read_input.s0.x.x5", !prof !386

"for read_input.s0.x.x4.preheader":               ; preds = %"for read_input.s0.y.rebased1"
  %750 = trunc i64 %749 to i32
  %751 = insertelement <32 x i32> undef, i32 %750, i32 0
  %752 = shufflevector <32 x i32> %751, <32 x i32> undef, <32 x i32> zeroinitializer
  %753 = add nuw nsw i64 %545, %indvars.iv3120
  %754 = mul nsw i64 %753, %81
  %755 = sub i64 %754, %82
  br label %"for read_input.s0.x.x4"

"end for read_input.s0.y.rebased2":               ; preds = %"end for read_input.s0.x.x.rebased10", %"end for read_input.s0.y.rebased"
  %a63 = add nsw i32 %blur_y.s0.y.yi.base.s, %85
  %756 = icmp slt i32 %a63, 0
  %a62 = select i1 %756, i32 %a63, i32 0
  %757 = icmp sgt i32 %a62, -34
  %t1631 = sub nsw i32 %read_input.s0.y.epilogue, %11
  br i1 %757, label %"for read_input.s0.y.rebased13.preheader", label %"end for read_input.s0.y.rebased14", !prof !386

"for read_input.s0.y.rebased13.preheader":        ; preds = %"end for read_input.s0.y.rebased2"
  %758 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a70 = sub nsw i64 %87, %758
  %759 = icmp slt i64 %a70, 34
  %a69 = select i1 %759, i64 %a70, i64 34
  %760 = icmp sgt i64 %a69, 0
  %761 = select i1 %760, i64 %a69, i64 0
  %a62.op = add nsw i32 %a62, 33
  %762 = zext i32 %a62.op to i64
  br label %"for read_input.s0.y.rebased13"

"for read_input.s0.x.x4":                         ; preds = %"for read_input.s0.x.x4.preheader", %"for read_input.s0.x.x4"
  %read_input.s0.x.x6 = phi i32 [ %961, %"for read_input.s0.x.x4" ], [ 0, %"for read_input.s0.x.x4.preheader" ]
  %763 = shl nsw i32 %read_input.s0.x.x6, 5
  %a43 = add nsw i32 %763, %t1606
  %764 = icmp sgt i32 %b37, %a43
  %read_input.s0.x.v2.base.s7 = select i1 %764, i32 %a43, i32 %b37
  %765 = add nsw i32 %read_input.s0.x.v2.base.s7, -32
  %766 = insertelement <32 x i32> undef, i32 %765, i32 0
  %767 = shufflevector <32 x i32> %766, <32 x i32> undef, <32 x i32> zeroinitializer
  %a45 = add nsw <32 x i32> %767, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %768 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %769 = icmp sgt <8 x i32> %74, %768
  %770 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %771 = icmp sgt <8 x i32> %74, %770
  %772 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %773 = icmp sgt <8 x i32> %74, %772
  %774 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %775 = icmp sgt <8 x i32> %74, %774
  %776 = select <8 x i1> %769, <8 x i32> %768, <8 x i32> %74
  %777 = select <8 x i1> %771, <8 x i32> %770, <8 x i32> %74
  %778 = select <8 x i1> %773, <8 x i32> %772, <8 x i32> %74
  %779 = select <8 x i1> %775, <8 x i32> %774, <8 x i32> %74
  %780 = icmp sgt <8 x i32> %776, %76
  %781 = icmp sgt <8 x i32> %777, %76
  %782 = icmp sgt <8 x i32> %778, %76
  %783 = icmp sgt <8 x i32> %779, %76
  %784 = select <8 x i1> %780, <8 x i32> %776, <8 x i32> %76
  %785 = select <8 x i1> %781, <8 x i32> %777, <8 x i32> %76
  %786 = select <8 x i1> %782, <8 x i32> %778, <8 x i32> %76
  %787 = select <8 x i1> %783, <8 x i32> %779, <8 x i32> %76
  %788 = shufflevector <8 x i32> %784, <8 x i32> %785, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %789 = shufflevector <8 x i32> %786, <8 x i32> %787, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %790 = shufflevector <16 x i32> %788, <16 x i32> %789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %791 = add nsw <32 x i32> %790, %752
  %792 = extractelement <32 x i32> %791, i32 0
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds i16, i16* %63, i64 %793
  %795 = load i16, i16* %794, align 2, !tbaa !393
  %796 = insertelement <32 x i16> undef, i16 %795, i32 0
  %797 = extractelement <32 x i32> %791, i32 1
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds i16, i16* %63, i64 %798
  %800 = load i16, i16* %799, align 2, !tbaa !393
  %801 = insertelement <32 x i16> %796, i16 %800, i32 1
  %802 = extractelement <32 x i32> %791, i32 2
  %803 = sext i32 %802 to i64
  %804 = getelementptr inbounds i16, i16* %63, i64 %803
  %805 = load i16, i16* %804, align 2, !tbaa !393
  %806 = insertelement <32 x i16> %801, i16 %805, i32 2
  %807 = extractelement <32 x i32> %791, i32 3
  %808 = sext i32 %807 to i64
  %809 = getelementptr inbounds i16, i16* %63, i64 %808
  %810 = load i16, i16* %809, align 2, !tbaa !393
  %811 = insertelement <32 x i16> %806, i16 %810, i32 3
  %812 = extractelement <32 x i32> %791, i32 4
  %813 = sext i32 %812 to i64
  %814 = getelementptr inbounds i16, i16* %63, i64 %813
  %815 = load i16, i16* %814, align 2, !tbaa !393
  %816 = insertelement <32 x i16> %811, i16 %815, i32 4
  %817 = extractelement <32 x i32> %791, i32 5
  %818 = sext i32 %817 to i64
  %819 = getelementptr inbounds i16, i16* %63, i64 %818
  %820 = load i16, i16* %819, align 2, !tbaa !393
  %821 = insertelement <32 x i16> %816, i16 %820, i32 5
  %822 = extractelement <32 x i32> %791, i32 6
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds i16, i16* %63, i64 %823
  %825 = load i16, i16* %824, align 2, !tbaa !393
  %826 = insertelement <32 x i16> %821, i16 %825, i32 6
  %827 = extractelement <32 x i32> %791, i32 7
  %828 = sext i32 %827 to i64
  %829 = getelementptr inbounds i16, i16* %63, i64 %828
  %830 = load i16, i16* %829, align 2, !tbaa !393
  %831 = insertelement <32 x i16> %826, i16 %830, i32 7
  %832 = extractelement <32 x i32> %791, i32 8
  %833 = sext i32 %832 to i64
  %834 = getelementptr inbounds i16, i16* %63, i64 %833
  %835 = load i16, i16* %834, align 2, !tbaa !393
  %836 = insertelement <32 x i16> %831, i16 %835, i32 8
  %837 = extractelement <32 x i32> %791, i32 9
  %838 = sext i32 %837 to i64
  %839 = getelementptr inbounds i16, i16* %63, i64 %838
  %840 = load i16, i16* %839, align 2, !tbaa !393
  %841 = insertelement <32 x i16> %836, i16 %840, i32 9
  %842 = extractelement <32 x i32> %791, i32 10
  %843 = sext i32 %842 to i64
  %844 = getelementptr inbounds i16, i16* %63, i64 %843
  %845 = load i16, i16* %844, align 2, !tbaa !393
  %846 = insertelement <32 x i16> %841, i16 %845, i32 10
  %847 = extractelement <32 x i32> %791, i32 11
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds i16, i16* %63, i64 %848
  %850 = load i16, i16* %849, align 2, !tbaa !393
  %851 = insertelement <32 x i16> %846, i16 %850, i32 11
  %852 = extractelement <32 x i32> %791, i32 12
  %853 = sext i32 %852 to i64
  %854 = getelementptr inbounds i16, i16* %63, i64 %853
  %855 = load i16, i16* %854, align 2, !tbaa !393
  %856 = insertelement <32 x i16> %851, i16 %855, i32 12
  %857 = extractelement <32 x i32> %791, i32 13
  %858 = sext i32 %857 to i64
  %859 = getelementptr inbounds i16, i16* %63, i64 %858
  %860 = load i16, i16* %859, align 2, !tbaa !393
  %861 = insertelement <32 x i16> %856, i16 %860, i32 13
  %862 = extractelement <32 x i32> %791, i32 14
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds i16, i16* %63, i64 %863
  %865 = load i16, i16* %864, align 2, !tbaa !393
  %866 = insertelement <32 x i16> %861, i16 %865, i32 14
  %867 = extractelement <32 x i32> %791, i32 15
  %868 = sext i32 %867 to i64
  %869 = getelementptr inbounds i16, i16* %63, i64 %868
  %870 = load i16, i16* %869, align 2, !tbaa !393
  %871 = insertelement <32 x i16> %866, i16 %870, i32 15
  %872 = extractelement <32 x i32> %791, i32 16
  %873 = sext i32 %872 to i64
  %874 = getelementptr inbounds i16, i16* %63, i64 %873
  %875 = load i16, i16* %874, align 2, !tbaa !393
  %876 = insertelement <32 x i16> %871, i16 %875, i32 16
  %877 = extractelement <32 x i32> %791, i32 17
  %878 = sext i32 %877 to i64
  %879 = getelementptr inbounds i16, i16* %63, i64 %878
  %880 = load i16, i16* %879, align 2, !tbaa !393
  %881 = insertelement <32 x i16> %876, i16 %880, i32 17
  %882 = extractelement <32 x i32> %791, i32 18
  %883 = sext i32 %882 to i64
  %884 = getelementptr inbounds i16, i16* %63, i64 %883
  %885 = load i16, i16* %884, align 2, !tbaa !393
  %886 = insertelement <32 x i16> %881, i16 %885, i32 18
  %887 = extractelement <32 x i32> %791, i32 19
  %888 = sext i32 %887 to i64
  %889 = getelementptr inbounds i16, i16* %63, i64 %888
  %890 = load i16, i16* %889, align 2, !tbaa !393
  %891 = insertelement <32 x i16> %886, i16 %890, i32 19
  %892 = extractelement <32 x i32> %791, i32 20
  %893 = sext i32 %892 to i64
  %894 = getelementptr inbounds i16, i16* %63, i64 %893
  %895 = load i16, i16* %894, align 2, !tbaa !393
  %896 = insertelement <32 x i16> %891, i16 %895, i32 20
  %897 = extractelement <32 x i32> %791, i32 21
  %898 = sext i32 %897 to i64
  %899 = getelementptr inbounds i16, i16* %63, i64 %898
  %900 = load i16, i16* %899, align 2, !tbaa !393
  %901 = insertelement <32 x i16> %896, i16 %900, i32 21
  %902 = extractelement <32 x i32> %791, i32 22
  %903 = sext i32 %902 to i64
  %904 = getelementptr inbounds i16, i16* %63, i64 %903
  %905 = load i16, i16* %904, align 2, !tbaa !393
  %906 = insertelement <32 x i16> %901, i16 %905, i32 22
  %907 = extractelement <32 x i32> %791, i32 23
  %908 = sext i32 %907 to i64
  %909 = getelementptr inbounds i16, i16* %63, i64 %908
  %910 = load i16, i16* %909, align 2, !tbaa !393
  %911 = insertelement <32 x i16> %906, i16 %910, i32 23
  %912 = extractelement <32 x i32> %791, i32 24
  %913 = sext i32 %912 to i64
  %914 = getelementptr inbounds i16, i16* %63, i64 %913
  %915 = load i16, i16* %914, align 2, !tbaa !393
  %916 = insertelement <32 x i16> %911, i16 %915, i32 24
  %917 = extractelement <32 x i32> %791, i32 25
  %918 = sext i32 %917 to i64
  %919 = getelementptr inbounds i16, i16* %63, i64 %918
  %920 = load i16, i16* %919, align 2, !tbaa !393
  %921 = insertelement <32 x i16> %916, i16 %920, i32 25
  %922 = extractelement <32 x i32> %791, i32 26
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds i16, i16* %63, i64 %923
  %925 = load i16, i16* %924, align 2, !tbaa !393
  %926 = insertelement <32 x i16> %921, i16 %925, i32 26
  %927 = extractelement <32 x i32> %791, i32 27
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds i16, i16* %63, i64 %928
  %930 = load i16, i16* %929, align 2, !tbaa !393
  %931 = insertelement <32 x i16> %926, i16 %930, i32 27
  %932 = extractelement <32 x i32> %791, i32 28
  %933 = sext i32 %932 to i64
  %934 = getelementptr inbounds i16, i16* %63, i64 %933
  %935 = load i16, i16* %934, align 2, !tbaa !393
  %936 = insertelement <32 x i16> %931, i16 %935, i32 28
  %937 = extractelement <32 x i32> %791, i32 29
  %938 = sext i32 %937 to i64
  %939 = getelementptr inbounds i16, i16* %63, i64 %938
  %940 = load i16, i16* %939, align 2, !tbaa !393
  %941 = insertelement <32 x i16> %936, i16 %940, i32 29
  %942 = extractelement <32 x i32> %791, i32 30
  %943 = sext i32 %942 to i64
  %944 = getelementptr inbounds i16, i16* %63, i64 %943
  %945 = load i16, i16* %944, align 2, !tbaa !393
  %946 = insertelement <32 x i16> %941, i16 %945, i32 30
  %947 = extractelement <32 x i32> %791, i32 31
  %948 = sext i32 %947 to i64
  %949 = getelementptr inbounds i16, i16* %63, i64 %948
  %950 = load i16, i16* %949, align 2, !tbaa !393
  %951 = insertelement <32 x i16> %946, i16 %950, i32 31
  %952 = shufflevector <32 x i16> %951, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %953 = sext i32 %read_input.s0.x.v2.base.s7 to i64
  %954 = add nsw i64 %755, %953
  %955 = getelementptr inbounds i16, i16* %read_input, i64 %954
  %956 = getelementptr inbounds i16, i16* %955, i64 -32
  %957 = bitcast i16* %956 to <16 x i16>*
  store <16 x i16> %952, <16 x i16>* %957, align 2, !tbaa !396
  %958 = shufflevector <32 x i16> %951, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %959 = getelementptr inbounds i16, i16* %955, i64 -16
  %960 = bitcast i16* %959 to <16 x i16>*
  store <16 x i16> %958, <16 x i16>* %960, align 2, !tbaa !396
  %961 = add nuw nsw i32 %read_input.s0.x.x6, 1
  %.not2656 = icmp eq i32 %961, %b18
  br i1 %.not2656, label %"end for read_input.s0.x.x5", label %"for read_input.s0.x.x4"

"end for read_input.s0.x.x5":                     ; preds = %"for read_input.s0.x.x4", %"for read_input.s0.y.rebased1"
  br i1 %83, label %"for read_input.s0.x.x.rebased.preheader", label %"end for read_input.s0.x.x.rebased", !prof !386

"for read_input.s0.x.x.rebased.preheader":        ; preds = %"end for read_input.s0.x.x5"
  %962 = add nuw nsw i64 %545, %indvars.iv3120
  %963 = mul nsw i64 %962, %81
  %964 = sub i64 %963, %82
  br i1 %182, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"for read_input.s0.x.x.rebased":                  ; preds = %"for read_input.s0.x.x.rebased.preheader", %"for read_input.s0.x.x.rebased"
  %indvars.iv3117 = phi i64 [ %indvars.iv.next3118.3, %"for read_input.s0.x.x.rebased" ], [ 0, %"for read_input.s0.x.x.rebased.preheader" ]
  %niter = phi i64 [ %niter.nsub.3, %"for read_input.s0.x.x.rebased" ], [ %unroll_iter, %"for read_input.s0.x.x.rebased.preheader" ]
  %965 = add nuw nsw i64 %indvars.iv3117, %175
  %966 = shl nsw i64 %965, 5
  %967 = add nsw i64 %966, %176
  %968 = add nsw i64 %967, %749
  %969 = getelementptr inbounds i16, i16* %63, i64 %968
  %970 = getelementptr inbounds i16, i16* %969, i64 -32
  %971 = bitcast i16* %970 to <16 x i16>*
  %972 = load <16 x i16>, <16 x i16>* %971, align 2, !tbaa !393
  %973 = getelementptr inbounds i16, i16* %969, i64 -16
  %974 = bitcast i16* %973 to <16 x i16>*
  %975 = load <16 x i16>, <16 x i16>* %974, align 2, !tbaa !393
  %976 = add nsw i64 %964, %967
  %977 = getelementptr inbounds i16, i16* %read_input, i64 %976
  %978 = getelementptr inbounds i16, i16* %977, i64 -32
  %979 = bitcast i16* %978 to <16 x i16>*
  store <16 x i16> %972, <16 x i16>* %979, align 2, !tbaa !396
  %980 = getelementptr inbounds i16, i16* %977, i64 -16
  %981 = bitcast i16* %980 to <16 x i16>*
  store <16 x i16> %975, <16 x i16>* %981, align 2, !tbaa !396
  %indvars.iv.next3118 = or i64 %indvars.iv3117, 1
  %982 = add nuw nsw i64 %indvars.iv.next3118, %175
  %983 = shl nsw i64 %982, 5
  %984 = add nsw i64 %983, %176
  %985 = add nsw i64 %984, %749
  %986 = getelementptr inbounds i16, i16* %63, i64 %985
  %987 = getelementptr inbounds i16, i16* %986, i64 -32
  %988 = bitcast i16* %987 to <16 x i16>*
  %989 = load <16 x i16>, <16 x i16>* %988, align 2, !tbaa !393
  %990 = getelementptr inbounds i16, i16* %986, i64 -16
  %991 = bitcast i16* %990 to <16 x i16>*
  %992 = load <16 x i16>, <16 x i16>* %991, align 2, !tbaa !393
  %993 = add nsw i64 %964, %984
  %994 = getelementptr inbounds i16, i16* %read_input, i64 %993
  %995 = getelementptr inbounds i16, i16* %994, i64 -32
  %996 = bitcast i16* %995 to <16 x i16>*
  store <16 x i16> %989, <16 x i16>* %996, align 2, !tbaa !396
  %997 = getelementptr inbounds i16, i16* %994, i64 -16
  %998 = bitcast i16* %997 to <16 x i16>*
  store <16 x i16> %992, <16 x i16>* %998, align 2, !tbaa !396
  %indvars.iv.next3118.1 = or i64 %indvars.iv3117, 2
  %999 = add nuw nsw i64 %indvars.iv.next3118.1, %175
  %1000 = shl nsw i64 %999, 5
  %1001 = add nsw i64 %1000, %176
  %1002 = add nsw i64 %1001, %749
  %1003 = getelementptr inbounds i16, i16* %63, i64 %1002
  %1004 = getelementptr inbounds i16, i16* %1003, i64 -32
  %1005 = bitcast i16* %1004 to <16 x i16>*
  %1006 = load <16 x i16>, <16 x i16>* %1005, align 2, !tbaa !393
  %1007 = getelementptr inbounds i16, i16* %1003, i64 -16
  %1008 = bitcast i16* %1007 to <16 x i16>*
  %1009 = load <16 x i16>, <16 x i16>* %1008, align 2, !tbaa !393
  %1010 = add nsw i64 %964, %1001
  %1011 = getelementptr inbounds i16, i16* %read_input, i64 %1010
  %1012 = getelementptr inbounds i16, i16* %1011, i64 -32
  %1013 = bitcast i16* %1012 to <16 x i16>*
  store <16 x i16> %1006, <16 x i16>* %1013, align 2, !tbaa !396
  %1014 = getelementptr inbounds i16, i16* %1011, i64 -16
  %1015 = bitcast i16* %1014 to <16 x i16>*
  store <16 x i16> %1009, <16 x i16>* %1015, align 2, !tbaa !396
  %indvars.iv.next3118.2 = or i64 %indvars.iv3117, 3
  %1016 = add nuw nsw i64 %indvars.iv.next3118.2, %175
  %1017 = shl nsw i64 %1016, 5
  %1018 = add nsw i64 %1017, %176
  %1019 = add nsw i64 %1018, %749
  %1020 = getelementptr inbounds i16, i16* %63, i64 %1019
  %1021 = getelementptr inbounds i16, i16* %1020, i64 -32
  %1022 = bitcast i16* %1021 to <16 x i16>*
  %1023 = load <16 x i16>, <16 x i16>* %1022, align 2, !tbaa !393
  %1024 = getelementptr inbounds i16, i16* %1020, i64 -16
  %1025 = bitcast i16* %1024 to <16 x i16>*
  %1026 = load <16 x i16>, <16 x i16>* %1025, align 2, !tbaa !393
  %1027 = add nsw i64 %964, %1018
  %1028 = getelementptr inbounds i16, i16* %read_input, i64 %1027
  %1029 = getelementptr inbounds i16, i16* %1028, i64 -32
  %1030 = bitcast i16* %1029 to <16 x i16>*
  store <16 x i16> %1023, <16 x i16>* %1030, align 2, !tbaa !396
  %1031 = getelementptr inbounds i16, i16* %1028, i64 -16
  %1032 = bitcast i16* %1031 to <16 x i16>*
  store <16 x i16> %1026, <16 x i16>* %1032, align 2, !tbaa !396
  %indvars.iv.next3118.3 = add nuw nsw i64 %indvars.iv3117, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased", %"for read_input.s0.x.x.rebased.preheader"
  %indvars.iv3117.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3118.3, %"for read_input.s0.x.x.rebased" ]
  br i1 %lcmp.mod.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil"

"for read_input.s0.x.x.rebased.epil":             ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil"
  %indvars.iv3117.epil = phi i64 [ %indvars.iv.next3118.epil, %"for read_input.s0.x.x.rebased.epil" ], [ %indvars.iv3117.unr, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %epil.iter = phi i64 [ %epil.iter.sub, %"for read_input.s0.x.x.rebased.epil" ], [ %xtraiter, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %1033 = add nuw nsw i64 %indvars.iv3117.epil, %175
  %1034 = shl nsw i64 %1033, 5
  %1035 = add nsw i64 %1034, %176
  %1036 = add nsw i64 %1035, %749
  %1037 = getelementptr inbounds i16, i16* %63, i64 %1036
  %1038 = getelementptr inbounds i16, i16* %1037, i64 -32
  %1039 = bitcast i16* %1038 to <16 x i16>*
  %1040 = load <16 x i16>, <16 x i16>* %1039, align 2, !tbaa !393
  %1041 = getelementptr inbounds i16, i16* %1037, i64 -16
  %1042 = bitcast i16* %1041 to <16 x i16>*
  %1043 = load <16 x i16>, <16 x i16>* %1042, align 2, !tbaa !393
  %1044 = add nsw i64 %964, %1035
  %1045 = getelementptr inbounds i16, i16* %read_input, i64 %1044
  %1046 = getelementptr inbounds i16, i16* %1045, i64 -32
  %1047 = bitcast i16* %1046 to <16 x i16>*
  store <16 x i16> %1040, <16 x i16>* %1047, align 2, !tbaa !396
  %1048 = getelementptr inbounds i16, i16* %1045, i64 -16
  %1049 = bitcast i16* %1048 to <16 x i16>*
  store <16 x i16> %1043, <16 x i16>* %1049, align 2, !tbaa !396
  %indvars.iv.next3118.epil = add nuw nsw i64 %indvars.iv3117.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil", !llvm.loop !398

"end for read_input.s0.x.x.rebased":              ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil", %"end for read_input.s0.x.x5"
  br i1 %84, label %"for read_input.s0.x.x.rebased9.preheader", label %"end for read_input.s0.x.x.rebased10", !prof !386

"for read_input.s0.x.x.rebased9.preheader":       ; preds = %"end for read_input.s0.x.x.rebased"
  %1050 = trunc i64 %749 to i32
  %1051 = insertelement <32 x i32> undef, i32 %1050, i32 0
  %1052 = shufflevector <32 x i32> %1051, <32 x i32> undef, <32 x i32> zeroinitializer
  %1053 = add nuw nsw i64 %545, %indvars.iv3120
  %1054 = mul nsw i64 %1053, %81
  %1055 = sub i64 %1054, %82
  br label %"for read_input.s0.x.x.rebased9"

"for read_input.s0.x.x.rebased9":                 ; preds = %"for read_input.s0.x.x.rebased9.preheader", %"for read_input.s0.x.x.rebased9"
  %read_input.s0.x.x.rebased11 = phi i32 [ %1255, %"for read_input.s0.x.x.rebased9" ], [ 0, %"for read_input.s0.x.x.rebased9.preheader" ]
  %1056 = add nsw i32 %read_input.s0.x.x.rebased11, %t1580
  %1057 = shl nsw i32 %1056, 5
  %a54 = add nsw i32 %1057, %t1606
  %1058 = icmp sgt i32 %b37, %a54
  %read_input.s0.x.v2.base.s12 = select i1 %1058, i32 %a54, i32 %b37
  %1059 = add nsw i32 %read_input.s0.x.v2.base.s12, -32
  %1060 = insertelement <32 x i32> undef, i32 %1059, i32 0
  %1061 = shufflevector <32 x i32> %1060, <32 x i32> undef, <32 x i32> zeroinitializer
  %a56 = add nsw <32 x i32> %1061, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1062 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1063 = icmp sgt <8 x i32> %74, %1062
  %1064 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1065 = icmp sgt <8 x i32> %74, %1064
  %1066 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1067 = icmp sgt <8 x i32> %74, %1066
  %1068 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1069 = icmp sgt <8 x i32> %74, %1068
  %1070 = select <8 x i1> %1063, <8 x i32> %1062, <8 x i32> %74
  %1071 = select <8 x i1> %1065, <8 x i32> %1064, <8 x i32> %74
  %1072 = select <8 x i1> %1067, <8 x i32> %1066, <8 x i32> %74
  %1073 = select <8 x i1> %1069, <8 x i32> %1068, <8 x i32> %74
  %1074 = icmp sgt <8 x i32> %1070, %76
  %1075 = icmp sgt <8 x i32> %1071, %76
  %1076 = icmp sgt <8 x i32> %1072, %76
  %1077 = icmp sgt <8 x i32> %1073, %76
  %1078 = select <8 x i1> %1074, <8 x i32> %1070, <8 x i32> %76
  %1079 = select <8 x i1> %1075, <8 x i32> %1071, <8 x i32> %76
  %1080 = select <8 x i1> %1076, <8 x i32> %1072, <8 x i32> %76
  %1081 = select <8 x i1> %1077, <8 x i32> %1073, <8 x i32> %76
  %1082 = shufflevector <8 x i32> %1078, <8 x i32> %1079, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1083 = shufflevector <8 x i32> %1080, <8 x i32> %1081, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1084 = shufflevector <16 x i32> %1082, <16 x i32> %1083, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1085 = add nsw <32 x i32> %1084, %1052
  %1086 = extractelement <32 x i32> %1085, i32 0
  %1087 = sext i32 %1086 to i64
  %1088 = getelementptr inbounds i16, i16* %63, i64 %1087
  %1089 = load i16, i16* %1088, align 2, !tbaa !393
  %1090 = insertelement <32 x i16> undef, i16 %1089, i32 0
  %1091 = extractelement <32 x i32> %1085, i32 1
  %1092 = sext i32 %1091 to i64
  %1093 = getelementptr inbounds i16, i16* %63, i64 %1092
  %1094 = load i16, i16* %1093, align 2, !tbaa !393
  %1095 = insertelement <32 x i16> %1090, i16 %1094, i32 1
  %1096 = extractelement <32 x i32> %1085, i32 2
  %1097 = sext i32 %1096 to i64
  %1098 = getelementptr inbounds i16, i16* %63, i64 %1097
  %1099 = load i16, i16* %1098, align 2, !tbaa !393
  %1100 = insertelement <32 x i16> %1095, i16 %1099, i32 2
  %1101 = extractelement <32 x i32> %1085, i32 3
  %1102 = sext i32 %1101 to i64
  %1103 = getelementptr inbounds i16, i16* %63, i64 %1102
  %1104 = load i16, i16* %1103, align 2, !tbaa !393
  %1105 = insertelement <32 x i16> %1100, i16 %1104, i32 3
  %1106 = extractelement <32 x i32> %1085, i32 4
  %1107 = sext i32 %1106 to i64
  %1108 = getelementptr inbounds i16, i16* %63, i64 %1107
  %1109 = load i16, i16* %1108, align 2, !tbaa !393
  %1110 = insertelement <32 x i16> %1105, i16 %1109, i32 4
  %1111 = extractelement <32 x i32> %1085, i32 5
  %1112 = sext i32 %1111 to i64
  %1113 = getelementptr inbounds i16, i16* %63, i64 %1112
  %1114 = load i16, i16* %1113, align 2, !tbaa !393
  %1115 = insertelement <32 x i16> %1110, i16 %1114, i32 5
  %1116 = extractelement <32 x i32> %1085, i32 6
  %1117 = sext i32 %1116 to i64
  %1118 = getelementptr inbounds i16, i16* %63, i64 %1117
  %1119 = load i16, i16* %1118, align 2, !tbaa !393
  %1120 = insertelement <32 x i16> %1115, i16 %1119, i32 6
  %1121 = extractelement <32 x i32> %1085, i32 7
  %1122 = sext i32 %1121 to i64
  %1123 = getelementptr inbounds i16, i16* %63, i64 %1122
  %1124 = load i16, i16* %1123, align 2, !tbaa !393
  %1125 = insertelement <32 x i16> %1120, i16 %1124, i32 7
  %1126 = extractelement <32 x i32> %1085, i32 8
  %1127 = sext i32 %1126 to i64
  %1128 = getelementptr inbounds i16, i16* %63, i64 %1127
  %1129 = load i16, i16* %1128, align 2, !tbaa !393
  %1130 = insertelement <32 x i16> %1125, i16 %1129, i32 8
  %1131 = extractelement <32 x i32> %1085, i32 9
  %1132 = sext i32 %1131 to i64
  %1133 = getelementptr inbounds i16, i16* %63, i64 %1132
  %1134 = load i16, i16* %1133, align 2, !tbaa !393
  %1135 = insertelement <32 x i16> %1130, i16 %1134, i32 9
  %1136 = extractelement <32 x i32> %1085, i32 10
  %1137 = sext i32 %1136 to i64
  %1138 = getelementptr inbounds i16, i16* %63, i64 %1137
  %1139 = load i16, i16* %1138, align 2, !tbaa !393
  %1140 = insertelement <32 x i16> %1135, i16 %1139, i32 10
  %1141 = extractelement <32 x i32> %1085, i32 11
  %1142 = sext i32 %1141 to i64
  %1143 = getelementptr inbounds i16, i16* %63, i64 %1142
  %1144 = load i16, i16* %1143, align 2, !tbaa !393
  %1145 = insertelement <32 x i16> %1140, i16 %1144, i32 11
  %1146 = extractelement <32 x i32> %1085, i32 12
  %1147 = sext i32 %1146 to i64
  %1148 = getelementptr inbounds i16, i16* %63, i64 %1147
  %1149 = load i16, i16* %1148, align 2, !tbaa !393
  %1150 = insertelement <32 x i16> %1145, i16 %1149, i32 12
  %1151 = extractelement <32 x i32> %1085, i32 13
  %1152 = sext i32 %1151 to i64
  %1153 = getelementptr inbounds i16, i16* %63, i64 %1152
  %1154 = load i16, i16* %1153, align 2, !tbaa !393
  %1155 = insertelement <32 x i16> %1150, i16 %1154, i32 13
  %1156 = extractelement <32 x i32> %1085, i32 14
  %1157 = sext i32 %1156 to i64
  %1158 = getelementptr inbounds i16, i16* %63, i64 %1157
  %1159 = load i16, i16* %1158, align 2, !tbaa !393
  %1160 = insertelement <32 x i16> %1155, i16 %1159, i32 14
  %1161 = extractelement <32 x i32> %1085, i32 15
  %1162 = sext i32 %1161 to i64
  %1163 = getelementptr inbounds i16, i16* %63, i64 %1162
  %1164 = load i16, i16* %1163, align 2, !tbaa !393
  %1165 = insertelement <32 x i16> %1160, i16 %1164, i32 15
  %1166 = extractelement <32 x i32> %1085, i32 16
  %1167 = sext i32 %1166 to i64
  %1168 = getelementptr inbounds i16, i16* %63, i64 %1167
  %1169 = load i16, i16* %1168, align 2, !tbaa !393
  %1170 = insertelement <32 x i16> %1165, i16 %1169, i32 16
  %1171 = extractelement <32 x i32> %1085, i32 17
  %1172 = sext i32 %1171 to i64
  %1173 = getelementptr inbounds i16, i16* %63, i64 %1172
  %1174 = load i16, i16* %1173, align 2, !tbaa !393
  %1175 = insertelement <32 x i16> %1170, i16 %1174, i32 17
  %1176 = extractelement <32 x i32> %1085, i32 18
  %1177 = sext i32 %1176 to i64
  %1178 = getelementptr inbounds i16, i16* %63, i64 %1177
  %1179 = load i16, i16* %1178, align 2, !tbaa !393
  %1180 = insertelement <32 x i16> %1175, i16 %1179, i32 18
  %1181 = extractelement <32 x i32> %1085, i32 19
  %1182 = sext i32 %1181 to i64
  %1183 = getelementptr inbounds i16, i16* %63, i64 %1182
  %1184 = load i16, i16* %1183, align 2, !tbaa !393
  %1185 = insertelement <32 x i16> %1180, i16 %1184, i32 19
  %1186 = extractelement <32 x i32> %1085, i32 20
  %1187 = sext i32 %1186 to i64
  %1188 = getelementptr inbounds i16, i16* %63, i64 %1187
  %1189 = load i16, i16* %1188, align 2, !tbaa !393
  %1190 = insertelement <32 x i16> %1185, i16 %1189, i32 20
  %1191 = extractelement <32 x i32> %1085, i32 21
  %1192 = sext i32 %1191 to i64
  %1193 = getelementptr inbounds i16, i16* %63, i64 %1192
  %1194 = load i16, i16* %1193, align 2, !tbaa !393
  %1195 = insertelement <32 x i16> %1190, i16 %1194, i32 21
  %1196 = extractelement <32 x i32> %1085, i32 22
  %1197 = sext i32 %1196 to i64
  %1198 = getelementptr inbounds i16, i16* %63, i64 %1197
  %1199 = load i16, i16* %1198, align 2, !tbaa !393
  %1200 = insertelement <32 x i16> %1195, i16 %1199, i32 22
  %1201 = extractelement <32 x i32> %1085, i32 23
  %1202 = sext i32 %1201 to i64
  %1203 = getelementptr inbounds i16, i16* %63, i64 %1202
  %1204 = load i16, i16* %1203, align 2, !tbaa !393
  %1205 = insertelement <32 x i16> %1200, i16 %1204, i32 23
  %1206 = extractelement <32 x i32> %1085, i32 24
  %1207 = sext i32 %1206 to i64
  %1208 = getelementptr inbounds i16, i16* %63, i64 %1207
  %1209 = load i16, i16* %1208, align 2, !tbaa !393
  %1210 = insertelement <32 x i16> %1205, i16 %1209, i32 24
  %1211 = extractelement <32 x i32> %1085, i32 25
  %1212 = sext i32 %1211 to i64
  %1213 = getelementptr inbounds i16, i16* %63, i64 %1212
  %1214 = load i16, i16* %1213, align 2, !tbaa !393
  %1215 = insertelement <32 x i16> %1210, i16 %1214, i32 25
  %1216 = extractelement <32 x i32> %1085, i32 26
  %1217 = sext i32 %1216 to i64
  %1218 = getelementptr inbounds i16, i16* %63, i64 %1217
  %1219 = load i16, i16* %1218, align 2, !tbaa !393
  %1220 = insertelement <32 x i16> %1215, i16 %1219, i32 26
  %1221 = extractelement <32 x i32> %1085, i32 27
  %1222 = sext i32 %1221 to i64
  %1223 = getelementptr inbounds i16, i16* %63, i64 %1222
  %1224 = load i16, i16* %1223, align 2, !tbaa !393
  %1225 = insertelement <32 x i16> %1220, i16 %1224, i32 27
  %1226 = extractelement <32 x i32> %1085, i32 28
  %1227 = sext i32 %1226 to i64
  %1228 = getelementptr inbounds i16, i16* %63, i64 %1227
  %1229 = load i16, i16* %1228, align 2, !tbaa !393
  %1230 = insertelement <32 x i16> %1225, i16 %1229, i32 28
  %1231 = extractelement <32 x i32> %1085, i32 29
  %1232 = sext i32 %1231 to i64
  %1233 = getelementptr inbounds i16, i16* %63, i64 %1232
  %1234 = load i16, i16* %1233, align 2, !tbaa !393
  %1235 = insertelement <32 x i16> %1230, i16 %1234, i32 29
  %1236 = extractelement <32 x i32> %1085, i32 30
  %1237 = sext i32 %1236 to i64
  %1238 = getelementptr inbounds i16, i16* %63, i64 %1237
  %1239 = load i16, i16* %1238, align 2, !tbaa !393
  %1240 = insertelement <32 x i16> %1235, i16 %1239, i32 30
  %1241 = extractelement <32 x i32> %1085, i32 31
  %1242 = sext i32 %1241 to i64
  %1243 = getelementptr inbounds i16, i16* %63, i64 %1242
  %1244 = load i16, i16* %1243, align 2, !tbaa !393
  %1245 = insertelement <32 x i16> %1240, i16 %1244, i32 31
  %1246 = shufflevector <32 x i16> %1245, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1247 = sext i32 %read_input.s0.x.v2.base.s12 to i64
  %1248 = add nsw i64 %1055, %1247
  %1249 = getelementptr inbounds i16, i16* %read_input, i64 %1248
  %1250 = getelementptr inbounds i16, i16* %1249, i64 -32
  %1251 = bitcast i16* %1250 to <16 x i16>*
  store <16 x i16> %1246, <16 x i16>* %1251, align 2, !tbaa !396
  %1252 = shufflevector <32 x i16> %1245, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1253 = getelementptr inbounds i16, i16* %1249, i64 -16
  %1254 = bitcast i16* %1253 to <16 x i16>*
  store <16 x i16> %1252, <16 x i16>* %1254, align 2, !tbaa !396
  %1255 = add nuw nsw i32 %read_input.s0.x.x.rebased11, 1
  %.not2654 = icmp eq i32 %1255, %t1617
  br i1 %.not2654, label %"end for read_input.s0.x.x.rebased10", label %"for read_input.s0.x.x.rebased9"

"end for read_input.s0.x.x.rebased10":            ; preds = %"for read_input.s0.x.x.rebased9", %"end for read_input.s0.x.x.rebased"
  %indvars.iv.next3121 = add nuw nsw i64 %indvars.iv3120, 1
  %.not2653 = icmp eq i64 %indvars.iv.next3121, %547
  br i1 %.not2653, label %"end for read_input.s0.y.rebased2", label %"for read_input.s0.y.rebased1"

"for read_input.s0.y.rebased13":                  ; preds = %"for read_input.s0.y.rebased13.preheader", %"end for read_input.s0.x.x17"
  %indvars.iv3123 = phi i64 [ 0, %"for read_input.s0.y.rebased13.preheader" ], [ %indvars.iv.next3124, %"end for read_input.s0.x.x17" ]
  %1256 = trunc i64 %indvars.iv3123 to i32
  %a65 = add nsw i32 %t1631, %1256
  %1257 = icmp sgt i32 %b36, %a65
  %a64 = select i1 %1257, i32 %a65, i32 %b36
  %1258 = icmp sgt i32 %a64, 0
  %1259 = select i1 %1258, i32 %a64, i32 0
  %1260 = mul nsw i32 %1259, %13
  %t1635 = sub nsw i32 %1260, %9
  %1261 = insertelement <32 x i32> undef, i32 %t1635, i32 0
  %1262 = shufflevector <32 x i32> %1261, <32 x i32> undef, <32 x i32> zeroinitializer
  %1263 = add nuw nsw i64 %761, %indvars.iv3123
  %1264 = mul nsw i64 %1263, %81
  %1265 = sub i64 %1264, %82
  br label %"for read_input.s0.x.x16"

"end for read_input.s0.y.rebased14":              ; preds = %"end for read_input.s0.x.x17", %"end for read_input.s0.y.rebased2"
  %1266 = load i64, i64* %.fca.1.gep2278, align 8, !tbaa !387
  %cmp.i2708 = icmp ult i64 %1266, %91
  %1267 = load i8*, i8** %.fca.0.gep2277, align 8, !tbaa !389
  br i1 %cmp.i2708, label %if.then.i2711, label %pseudostack_alloc.exit2724, !prof !390

if.then.i2711:                                    ; preds = %"end for read_input.s0.y.rebased14"
  %tobool1.not.i2710 = icmp ne i8* %1267, null
  %1268 = load i64, i64* %.fca.2.gep2279, align 8
  %cmp2.i2713 = icmp ugt i64 %1268, 16384
  %or.cond2795 = and i1 %tobool1.not.i2710, %cmp2.i2713
  br i1 %or.cond2795, label %if.then3.i2715, label %if.end.i2719

if.then3.i2715:                                   ; preds = %if.then.i2711
  call void @halide_free(i8* null, i8* nonnull %1267) #16
  %.pre3306 = load i64, i64* %.fca.2.gep2279, align 8, !tbaa !391
  br label %if.end.i2719

if.end.i2719:                                     ; preds = %if.then3.i2715, %if.then.i2711
  %1269 = phi i64 [ %.pre3306, %if.then3.i2715 ], [ %1268, %if.then.i2711 ]
  %add.i2717 = add i64 %1269, %91
  store i64 %add.i2717, i64* %.fca.2.gep2279, align 8, !tbaa !391
  %cmp7.i2718 = icmp ugt i64 %add.i2717, 16384
  br i1 %cmp7.i2718, label %if.then8.i2721, label %if.end11.i2723

if.then8.i2721:                                   ; preds = %if.end.i2719
  %call.i2720 = call i8* @halide_malloc(i8* null, i64 %91) #16
  br label %if.end11.i2723

if.end11.i2723:                                   ; preds = %if.then8.i2721, %if.end.i2719
  %storemerge.i2722 = phi i8* [ %call.i2720, %if.then8.i2721 ], [ null, %if.end.i2719 ]
  store i8* %storemerge.i2722, i8** %.fca.0.gep2277, align 8, !tbaa !389
  store i64 %91, i64* %.fca.1.gep2278, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2724

pseudostack_alloc.exit2724:                       ; preds = %"end for read_input.s0.y.rebased14", %if.end11.i2723
  %1270 = phi i8* [ %storemerge.i2722, %if.end11.i2723 ], [ %1267, %"end for read_input.s0.y.rebased14" ]
  %1271 = bitcast i8* %1270 to i16*
  %.not2580 = icmp eq i8* %1270, null
  br i1 %.not2580, label %then_bb21, label %"consume read_input", !prof !392

"for read_input.s0.x.x16":                        ; preds = %"for read_input.s0.y.rebased13", %"for read_input.s0.x.x16"
  %read_input.s0.x.x18 = phi i32 [ %1470, %"for read_input.s0.x.x16" ], [ 0, %"for read_input.s0.y.rebased13" ]
  %1272 = shl nsw i32 %read_input.s0.x.x18, 5
  %a66 = add nsw i32 %1272, %t1606
  %1273 = icmp sgt i32 %b37, %a66
  %read_input.s0.x.v2.base.s19 = select i1 %1273, i32 %a66, i32 %b37
  %1274 = add nsw i32 %read_input.s0.x.v2.base.s19, -32
  %1275 = insertelement <32 x i32> undef, i32 %1274, i32 0
  %1276 = shufflevector <32 x i32> %1275, <32 x i32> undef, <32 x i32> zeroinitializer
  %a68 = add nsw <32 x i32> %1276, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1277 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1278 = icmp sgt <8 x i32> %74, %1277
  %1279 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1280 = icmp sgt <8 x i32> %74, %1279
  %1281 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1282 = icmp sgt <8 x i32> %74, %1281
  %1283 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1284 = icmp sgt <8 x i32> %74, %1283
  %1285 = select <8 x i1> %1278, <8 x i32> %1277, <8 x i32> %74
  %1286 = select <8 x i1> %1280, <8 x i32> %1279, <8 x i32> %74
  %1287 = select <8 x i1> %1282, <8 x i32> %1281, <8 x i32> %74
  %1288 = select <8 x i1> %1284, <8 x i32> %1283, <8 x i32> %74
  %1289 = icmp sgt <8 x i32> %1285, %76
  %1290 = icmp sgt <8 x i32> %1286, %76
  %1291 = icmp sgt <8 x i32> %1287, %76
  %1292 = icmp sgt <8 x i32> %1288, %76
  %1293 = select <8 x i1> %1289, <8 x i32> %1285, <8 x i32> %76
  %1294 = select <8 x i1> %1290, <8 x i32> %1286, <8 x i32> %76
  %1295 = select <8 x i1> %1291, <8 x i32> %1287, <8 x i32> %76
  %1296 = select <8 x i1> %1292, <8 x i32> %1288, <8 x i32> %76
  %1297 = shufflevector <8 x i32> %1293, <8 x i32> %1294, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1298 = shufflevector <8 x i32> %1295, <8 x i32> %1296, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1299 = shufflevector <16 x i32> %1297, <16 x i32> %1298, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1300 = add nsw <32 x i32> %1299, %1262
  %1301 = extractelement <32 x i32> %1300, i32 0
  %1302 = sext i32 %1301 to i64
  %1303 = getelementptr inbounds i16, i16* %63, i64 %1302
  %1304 = load i16, i16* %1303, align 2, !tbaa !393
  %1305 = insertelement <32 x i16> undef, i16 %1304, i32 0
  %1306 = extractelement <32 x i32> %1300, i32 1
  %1307 = sext i32 %1306 to i64
  %1308 = getelementptr inbounds i16, i16* %63, i64 %1307
  %1309 = load i16, i16* %1308, align 2, !tbaa !393
  %1310 = insertelement <32 x i16> %1305, i16 %1309, i32 1
  %1311 = extractelement <32 x i32> %1300, i32 2
  %1312 = sext i32 %1311 to i64
  %1313 = getelementptr inbounds i16, i16* %63, i64 %1312
  %1314 = load i16, i16* %1313, align 2, !tbaa !393
  %1315 = insertelement <32 x i16> %1310, i16 %1314, i32 2
  %1316 = extractelement <32 x i32> %1300, i32 3
  %1317 = sext i32 %1316 to i64
  %1318 = getelementptr inbounds i16, i16* %63, i64 %1317
  %1319 = load i16, i16* %1318, align 2, !tbaa !393
  %1320 = insertelement <32 x i16> %1315, i16 %1319, i32 3
  %1321 = extractelement <32 x i32> %1300, i32 4
  %1322 = sext i32 %1321 to i64
  %1323 = getelementptr inbounds i16, i16* %63, i64 %1322
  %1324 = load i16, i16* %1323, align 2, !tbaa !393
  %1325 = insertelement <32 x i16> %1320, i16 %1324, i32 4
  %1326 = extractelement <32 x i32> %1300, i32 5
  %1327 = sext i32 %1326 to i64
  %1328 = getelementptr inbounds i16, i16* %63, i64 %1327
  %1329 = load i16, i16* %1328, align 2, !tbaa !393
  %1330 = insertelement <32 x i16> %1325, i16 %1329, i32 5
  %1331 = extractelement <32 x i32> %1300, i32 6
  %1332 = sext i32 %1331 to i64
  %1333 = getelementptr inbounds i16, i16* %63, i64 %1332
  %1334 = load i16, i16* %1333, align 2, !tbaa !393
  %1335 = insertelement <32 x i16> %1330, i16 %1334, i32 6
  %1336 = extractelement <32 x i32> %1300, i32 7
  %1337 = sext i32 %1336 to i64
  %1338 = getelementptr inbounds i16, i16* %63, i64 %1337
  %1339 = load i16, i16* %1338, align 2, !tbaa !393
  %1340 = insertelement <32 x i16> %1335, i16 %1339, i32 7
  %1341 = extractelement <32 x i32> %1300, i32 8
  %1342 = sext i32 %1341 to i64
  %1343 = getelementptr inbounds i16, i16* %63, i64 %1342
  %1344 = load i16, i16* %1343, align 2, !tbaa !393
  %1345 = insertelement <32 x i16> %1340, i16 %1344, i32 8
  %1346 = extractelement <32 x i32> %1300, i32 9
  %1347 = sext i32 %1346 to i64
  %1348 = getelementptr inbounds i16, i16* %63, i64 %1347
  %1349 = load i16, i16* %1348, align 2, !tbaa !393
  %1350 = insertelement <32 x i16> %1345, i16 %1349, i32 9
  %1351 = extractelement <32 x i32> %1300, i32 10
  %1352 = sext i32 %1351 to i64
  %1353 = getelementptr inbounds i16, i16* %63, i64 %1352
  %1354 = load i16, i16* %1353, align 2, !tbaa !393
  %1355 = insertelement <32 x i16> %1350, i16 %1354, i32 10
  %1356 = extractelement <32 x i32> %1300, i32 11
  %1357 = sext i32 %1356 to i64
  %1358 = getelementptr inbounds i16, i16* %63, i64 %1357
  %1359 = load i16, i16* %1358, align 2, !tbaa !393
  %1360 = insertelement <32 x i16> %1355, i16 %1359, i32 11
  %1361 = extractelement <32 x i32> %1300, i32 12
  %1362 = sext i32 %1361 to i64
  %1363 = getelementptr inbounds i16, i16* %63, i64 %1362
  %1364 = load i16, i16* %1363, align 2, !tbaa !393
  %1365 = insertelement <32 x i16> %1360, i16 %1364, i32 12
  %1366 = extractelement <32 x i32> %1300, i32 13
  %1367 = sext i32 %1366 to i64
  %1368 = getelementptr inbounds i16, i16* %63, i64 %1367
  %1369 = load i16, i16* %1368, align 2, !tbaa !393
  %1370 = insertelement <32 x i16> %1365, i16 %1369, i32 13
  %1371 = extractelement <32 x i32> %1300, i32 14
  %1372 = sext i32 %1371 to i64
  %1373 = getelementptr inbounds i16, i16* %63, i64 %1372
  %1374 = load i16, i16* %1373, align 2, !tbaa !393
  %1375 = insertelement <32 x i16> %1370, i16 %1374, i32 14
  %1376 = extractelement <32 x i32> %1300, i32 15
  %1377 = sext i32 %1376 to i64
  %1378 = getelementptr inbounds i16, i16* %63, i64 %1377
  %1379 = load i16, i16* %1378, align 2, !tbaa !393
  %1380 = insertelement <32 x i16> %1375, i16 %1379, i32 15
  %1381 = extractelement <32 x i32> %1300, i32 16
  %1382 = sext i32 %1381 to i64
  %1383 = getelementptr inbounds i16, i16* %63, i64 %1382
  %1384 = load i16, i16* %1383, align 2, !tbaa !393
  %1385 = insertelement <32 x i16> %1380, i16 %1384, i32 16
  %1386 = extractelement <32 x i32> %1300, i32 17
  %1387 = sext i32 %1386 to i64
  %1388 = getelementptr inbounds i16, i16* %63, i64 %1387
  %1389 = load i16, i16* %1388, align 2, !tbaa !393
  %1390 = insertelement <32 x i16> %1385, i16 %1389, i32 17
  %1391 = extractelement <32 x i32> %1300, i32 18
  %1392 = sext i32 %1391 to i64
  %1393 = getelementptr inbounds i16, i16* %63, i64 %1392
  %1394 = load i16, i16* %1393, align 2, !tbaa !393
  %1395 = insertelement <32 x i16> %1390, i16 %1394, i32 18
  %1396 = extractelement <32 x i32> %1300, i32 19
  %1397 = sext i32 %1396 to i64
  %1398 = getelementptr inbounds i16, i16* %63, i64 %1397
  %1399 = load i16, i16* %1398, align 2, !tbaa !393
  %1400 = insertelement <32 x i16> %1395, i16 %1399, i32 19
  %1401 = extractelement <32 x i32> %1300, i32 20
  %1402 = sext i32 %1401 to i64
  %1403 = getelementptr inbounds i16, i16* %63, i64 %1402
  %1404 = load i16, i16* %1403, align 2, !tbaa !393
  %1405 = insertelement <32 x i16> %1400, i16 %1404, i32 20
  %1406 = extractelement <32 x i32> %1300, i32 21
  %1407 = sext i32 %1406 to i64
  %1408 = getelementptr inbounds i16, i16* %63, i64 %1407
  %1409 = load i16, i16* %1408, align 2, !tbaa !393
  %1410 = insertelement <32 x i16> %1405, i16 %1409, i32 21
  %1411 = extractelement <32 x i32> %1300, i32 22
  %1412 = sext i32 %1411 to i64
  %1413 = getelementptr inbounds i16, i16* %63, i64 %1412
  %1414 = load i16, i16* %1413, align 2, !tbaa !393
  %1415 = insertelement <32 x i16> %1410, i16 %1414, i32 22
  %1416 = extractelement <32 x i32> %1300, i32 23
  %1417 = sext i32 %1416 to i64
  %1418 = getelementptr inbounds i16, i16* %63, i64 %1417
  %1419 = load i16, i16* %1418, align 2, !tbaa !393
  %1420 = insertelement <32 x i16> %1415, i16 %1419, i32 23
  %1421 = extractelement <32 x i32> %1300, i32 24
  %1422 = sext i32 %1421 to i64
  %1423 = getelementptr inbounds i16, i16* %63, i64 %1422
  %1424 = load i16, i16* %1423, align 2, !tbaa !393
  %1425 = insertelement <32 x i16> %1420, i16 %1424, i32 24
  %1426 = extractelement <32 x i32> %1300, i32 25
  %1427 = sext i32 %1426 to i64
  %1428 = getelementptr inbounds i16, i16* %63, i64 %1427
  %1429 = load i16, i16* %1428, align 2, !tbaa !393
  %1430 = insertelement <32 x i16> %1425, i16 %1429, i32 25
  %1431 = extractelement <32 x i32> %1300, i32 26
  %1432 = sext i32 %1431 to i64
  %1433 = getelementptr inbounds i16, i16* %63, i64 %1432
  %1434 = load i16, i16* %1433, align 2, !tbaa !393
  %1435 = insertelement <32 x i16> %1430, i16 %1434, i32 26
  %1436 = extractelement <32 x i32> %1300, i32 27
  %1437 = sext i32 %1436 to i64
  %1438 = getelementptr inbounds i16, i16* %63, i64 %1437
  %1439 = load i16, i16* %1438, align 2, !tbaa !393
  %1440 = insertelement <32 x i16> %1435, i16 %1439, i32 27
  %1441 = extractelement <32 x i32> %1300, i32 28
  %1442 = sext i32 %1441 to i64
  %1443 = getelementptr inbounds i16, i16* %63, i64 %1442
  %1444 = load i16, i16* %1443, align 2, !tbaa !393
  %1445 = insertelement <32 x i16> %1440, i16 %1444, i32 28
  %1446 = extractelement <32 x i32> %1300, i32 29
  %1447 = sext i32 %1446 to i64
  %1448 = getelementptr inbounds i16, i16* %63, i64 %1447
  %1449 = load i16, i16* %1448, align 2, !tbaa !393
  %1450 = insertelement <32 x i16> %1445, i16 %1449, i32 29
  %1451 = extractelement <32 x i32> %1300, i32 30
  %1452 = sext i32 %1451 to i64
  %1453 = getelementptr inbounds i16, i16* %63, i64 %1452
  %1454 = load i16, i16* %1453, align 2, !tbaa !393
  %1455 = insertelement <32 x i16> %1450, i16 %1454, i32 30
  %1456 = extractelement <32 x i32> %1300, i32 31
  %1457 = sext i32 %1456 to i64
  %1458 = getelementptr inbounds i16, i16* %63, i64 %1457
  %1459 = load i16, i16* %1458, align 2, !tbaa !393
  %1460 = insertelement <32 x i16> %1455, i16 %1459, i32 31
  %1461 = shufflevector <32 x i16> %1460, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1462 = sext i32 %read_input.s0.x.v2.base.s19 to i64
  %1463 = add nsw i64 %1265, %1462
  %1464 = getelementptr inbounds i16, i16* %read_input, i64 %1463
  %1465 = getelementptr inbounds i16, i16* %1464, i64 -32
  %1466 = bitcast i16* %1465 to <16 x i16>*
  store <16 x i16> %1461, <16 x i16>* %1466, align 2, !tbaa !396
  %1467 = shufflevector <32 x i16> %1460, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1468 = getelementptr inbounds i16, i16* %1464, i64 -16
  %1469 = bitcast i16* %1468 to <16 x i16>*
  store <16 x i16> %1467, <16 x i16>* %1469, align 2, !tbaa !396
  %1470 = add nuw nsw i32 %read_input.s0.x.x18, 1
  %.not2652 = icmp eq i32 %1470, %20
  br i1 %.not2652, label %"end for read_input.s0.x.x17", label %"for read_input.s0.x.x16"

"end for read_input.s0.x.x17":                    ; preds = %"for read_input.s0.x.x16"
  %indvars.iv.next3124 = add nuw nsw i64 %indvars.iv3123, 1
  %.not2651 = icmp eq i64 %indvars.iv3123, %762
  br i1 %.not2651, label %"end for read_input.s0.y.rebased14", label %"for read_input.s0.y.rebased13"

then_bb21:                                        ; preds = %pseudostack_alloc.exit2724
  %1471 = alloca i8*, i64 %91, align 32
  %1472 = bitcast i8** %1471 to i16*
  store i8** %1471, i8*** %92, align 8
  br label %"consume read_input"

"consume read_input":                             ; preds = %pseudostack_alloc.exit2724, %then_bb21
  %blur_x = phi i16* [ %1472, %then_bb21 ], [ %1271, %pseudostack_alloc.exit2724 ]
  br i1 %34, label %"produce blur_x", label %"consume read_input.after_bb22_crit_edge"

"consume read_input.after_bb22_crit_edge":        ; preds = %"consume read_input"
  %.pre3309 = and i32 %a26, 3
  br label %after_bb22

after_bb22:                                       ; preds = %"consume read_input.after_bb22_crit_edge", %"produce blur_x"
  %.pre-phi = phi i32 [ %.pre3309, %"consume read_input.after_bb22_crit_edge" ], [ %1503, %"produce blur_x" ]
  %1473 = mul nsw i32 %.pre-phi, %a73
  %t1638 = sub nsw i32 %1473, %t1601
  br i1 %99, label %"for blur_y.s0.x.x.rebased.preheader", label %"end for blur_y.s0.x.x.rebased", !prof !386

"for blur_y.s0.x.x.rebased.preheader":            ; preds = %after_bb22
  %1474 = sext i32 %t1638 to i64
  br label %"for blur_y.s0.x.x.rebased"

"produce blur_x":                                 ; preds = %"consume read_input"
  %1475 = getelementptr inbounds i16, i16* %read_input, i64 %93
  %1476 = getelementptr inbounds i16, i16* %1475, i64 -31
  %1477 = bitcast i16* %1476 to <16 x i16>*
  %1478 = load <16 x i16>, <16 x i16>* %1477, align 2, !tbaa !396
  %1479 = getelementptr inbounds i16, i16* %1475, i64 -15
  %1480 = bitcast i16* %1479 to <16 x i16>*
  %1481 = load <16 x i16>, <16 x i16>* %1480, align 2, !tbaa !396
  %1482 = getelementptr inbounds i16, i16* %1475, i64 -30
  %1483 = bitcast i16* %1482 to <16 x i16>*
  %1484 = load <16 x i16>, <16 x i16>* %1483, align 2, !tbaa !396
  %1485 = getelementptr inbounds i16, i16* %1475, i64 -14
  %1486 = bitcast i16* %1485 to <16 x i16>*
  %1487 = load <16 x i16>, <16 x i16>* %1486, align 2, !tbaa !396
  %1488 = getelementptr inbounds i16, i16* %1475, i64 -32
  %1489 = bitcast i16* %1488 to <16 x i16>*
  %1490 = load <16 x i16>, <16 x i16>* %1489, align 2, !tbaa !396
  %1491 = getelementptr inbounds i16, i16* %1475, i64 -16
  %1492 = bitcast i16* %1491 to <16 x i16>*
  %1493 = load <16 x i16>, <16 x i16>* %1492, align 2, !tbaa !396
  %1494 = add <16 x i16> %1484, %1478
  %1495 = add <16 x i16> %1494, %1490
  %1496 = add <16 x i16> %1487, %1481
  %1497 = add <16 x i16> %1496, %1493
  %1498 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1495, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1499 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1497, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1500 = shufflevector <16 x i16> %1498, <16 x i16> %1499, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1501 = lshr <32 x i16> %1500, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1502 = shufflevector <32 x i16> %1501, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1503 = and i32 %a26, 3
  %1504 = zext i32 %1503 to i64
  %1505 = mul nsw i64 %96, %1504
  %1506 = add nsw i64 %98, %1505
  %1507 = getelementptr inbounds i16, i16* %blur_x, i64 %1506
  %1508 = getelementptr inbounds i16, i16* %1507, i64 -32
  %1509 = bitcast i16* %1508 to <16 x i16>*
  store <16 x i16> %1502, <16 x i16>* %1509, align 2, !tbaa !399
  %1510 = shufflevector <32 x i16> %1501, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1511 = getelementptr inbounds i16, i16* %1507, i64 -16
  %1512 = bitcast i16* %1511 to <16 x i16>*
  store <16 x i16> %1510, <16 x i16>* %1512, align 2, !tbaa !399
  br label %after_bb22

"for blur_y.s0.x.x.rebased":                      ; preds = %"for blur_y.s0.x.x.rebased.preheader", %after_bb24
  %indvars.iv3125 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3126, %after_bb24 ]
  %1513 = add nsw i64 %indvars.iv3125, %100
  %1514 = icmp slt i64 %1513, 1
  %1515 = trunc i64 %1513 to i32
  %1516 = shl nsw i32 %1515, 5
  %1517 = icmp sgt i32 %4, %1516
  %1518 = or i1 %1514, %1517
  br i1 %1518, label %"produce blur_x27", label %after_bb24

"end for blur_y.s0.x.x.rebased":                  ; preds = %after_bb24, %after_bb22
  br i1 %101, label %"for blur_y.s0.x.x.rebased28.preheader", label %"end for blur_y.s0.x.x.rebased29", !prof !386

"for blur_y.s0.x.x.rebased28.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased"
  %1519 = sext i32 %t1638 to i64
  br label %"for blur_y.s0.x.x.rebased28"

after_bb24:                                       ; preds = %"for blur_y.s0.x.x.rebased", %"produce blur_x27"
  %indvars.iv.next3126 = add nuw nsw i64 %indvars.iv3125, 1
  %.not2649 = icmp eq i64 %indvars.iv.next3126, %180
  br i1 %.not2649, label %"end for blur_y.s0.x.x.rebased", label %"for blur_y.s0.x.x.rebased"

"produce blur_x27":                               ; preds = %"for blur_y.s0.x.x.rebased"
  %t656 = sub i32 %1516, %t1601
  %1520 = sext i32 %t656 to i64
  %1521 = getelementptr inbounds i16, i16* %read_input, i64 %1520
  %1522 = getelementptr inbounds i16, i16* %1521, i64 1
  %1523 = bitcast i16* %1522 to <16 x i16>*
  %1524 = load <16 x i16>, <16 x i16>* %1523, align 2, !tbaa !396
  %1525 = getelementptr inbounds i16, i16* %1521, i64 17
  %1526 = bitcast i16* %1525 to <16 x i16>*
  %1527 = load <16 x i16>, <16 x i16>* %1526, align 2, !tbaa !396
  %1528 = getelementptr inbounds i16, i16* %1521, i64 2
  %1529 = bitcast i16* %1528 to <16 x i16>*
  %1530 = load <16 x i16>, <16 x i16>* %1529, align 2, !tbaa !396
  %1531 = getelementptr inbounds i16, i16* %1521, i64 18
  %1532 = bitcast i16* %1531 to <16 x i16>*
  %1533 = load <16 x i16>, <16 x i16>* %1532, align 2, !tbaa !396
  %1534 = bitcast i16* %1521 to <16 x i16>*
  %1535 = load <16 x i16>, <16 x i16>* %1534, align 2, !tbaa !396
  %1536 = getelementptr inbounds i16, i16* %1521, i64 16
  %1537 = bitcast i16* %1536 to <16 x i16>*
  %1538 = load <16 x i16>, <16 x i16>* %1537, align 2, !tbaa !396
  %1539 = add <16 x i16> %1530, %1524
  %1540 = add <16 x i16> %1539, %1535
  %1541 = add <16 x i16> %1533, %1527
  %1542 = add <16 x i16> %1541, %1538
  %1543 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1540, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1544 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1542, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1545 = shufflevector <16 x i16> %1543, <16 x i16> %1544, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1546 = lshr <32 x i16> %1545, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1547 = shufflevector <32 x i16> %1546, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1548 = shl nsw i64 %1513, 5
  %1549 = add nsw i64 %1548, %1474
  %1550 = getelementptr inbounds i16, i16* %blur_x, i64 %1549
  %1551 = bitcast i16* %1550 to <16 x i16>*
  store <16 x i16> %1547, <16 x i16>* %1551, align 2, !tbaa !399
  %1552 = shufflevector <32 x i16> %1546, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1553 = getelementptr inbounds i16, i16* %1550, i64 16
  %1554 = bitcast i16* %1553 to <16 x i16>*
  store <16 x i16> %1552, <16 x i16>* %1554, align 2, !tbaa !399
  br label %after_bb24

"for blur_y.s0.x.x.rebased28":                    ; preds = %"for blur_y.s0.x.x.rebased28.preheader", %after_bb31
  %blur_y.s0.x.x.rebased30 = phi i32 [ %1559, %after_bb31 ], [ 0, %"for blur_y.s0.x.x.rebased28.preheader" ]
  %t2163 = add nsw i32 %blur_y.s0.x.x.rebased30, %t1582
  %1555 = icmp slt i32 %t2163, 1
  %1556 = shl nsw i32 %t2163, 5
  %1557 = icmp sgt i32 %4, %1556
  %1558 = or i1 %1555, %1557
  br i1 %1558, label %then_bb32, label %after_bb31

"end for blur_y.s0.x.x.rebased29":                ; preds = %after_bb31, %"end for blur_y.s0.x.x.rebased"
  br i1 %34, label %"produce blur_x38", label %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge"

"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased29"
  %.pre3310 = add nsw i32 %a26, 1
  %.pre3312 = and i32 %.pre3310, 3
  br label %after_bb35

after_bb31:                                       ; preds = %"for blur_y.s0.x.x.rebased28", %then_bb32
  %1559 = add nuw nsw i32 %blur_y.s0.x.x.rebased30, 1
  %.not2648 = icmp eq i32 %1559, %t1639
  br i1 %.not2648, label %"end for blur_y.s0.x.x.rebased29", label %"for blur_y.s0.x.x.rebased28"

then_bb32:                                        ; preds = %"for blur_y.s0.x.x.rebased28"
  %1560 = icmp sgt i32 %a14, %1556
  %b83 = select i1 %1560, i32 %1556, i32 %a14
  %1561 = icmp slt i32 %b83, %4
  %blur_x.s0.x.v1.base.s = select i1 %1561, i32 %b83, i32 %4
  %t658 = sub i32 %blur_x.s0.x.v1.base.s, %t1601
  %1562 = sext i32 %t658 to i64
  %1563 = getelementptr inbounds i16, i16* %read_input, i64 %1562
  %1564 = getelementptr inbounds i16, i16* %1563, i64 1
  %1565 = bitcast i16* %1564 to <16 x i16>*
  %1566 = load <16 x i16>, <16 x i16>* %1565, align 2, !tbaa !396
  %1567 = getelementptr inbounds i16, i16* %1563, i64 17
  %1568 = bitcast i16* %1567 to <16 x i16>*
  %1569 = load <16 x i16>, <16 x i16>* %1568, align 2, !tbaa !396
  %1570 = getelementptr inbounds i16, i16* %1563, i64 2
  %1571 = bitcast i16* %1570 to <16 x i16>*
  %1572 = load <16 x i16>, <16 x i16>* %1571, align 2, !tbaa !396
  %1573 = getelementptr inbounds i16, i16* %1563, i64 18
  %1574 = bitcast i16* %1573 to <16 x i16>*
  %1575 = load <16 x i16>, <16 x i16>* %1574, align 2, !tbaa !396
  %1576 = bitcast i16* %1563 to <16 x i16>*
  %1577 = load <16 x i16>, <16 x i16>* %1576, align 2, !tbaa !396
  %1578 = getelementptr inbounds i16, i16* %1563, i64 16
  %1579 = bitcast i16* %1578 to <16 x i16>*
  %1580 = load <16 x i16>, <16 x i16>* %1579, align 2, !tbaa !396
  %1581 = add <16 x i16> %1572, %1566
  %1582 = add <16 x i16> %1581, %1577
  %1583 = add <16 x i16> %1575, %1569
  %1584 = add <16 x i16> %1583, %1580
  %1585 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1582, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1586 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1584, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1587 = shufflevector <16 x i16> %1585, <16 x i16> %1586, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1588 = lshr <32 x i16> %1587, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1589 = shufflevector <32 x i16> %1588, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1590 = sext i32 %blur_x.s0.x.v1.base.s to i64
  %1591 = add nsw i64 %1590, %1519
  %1592 = getelementptr inbounds i16, i16* %blur_x, i64 %1591
  %1593 = bitcast i16* %1592 to <16 x i16>*
  store <16 x i16> %1589, <16 x i16>* %1593, align 2, !tbaa !399
  %1594 = shufflevector <32 x i16> %1588, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1595 = getelementptr inbounds i16, i16* %1592, i64 16
  %1596 = bitcast i16* %1595 to <16 x i16>*
  store <16 x i16> %1594, <16 x i16>* %1596, align 2, !tbaa !399
  br label %after_bb31

after_bb35:                                       ; preds = %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge", %"produce blur_x38"
  %.pre-phi3313 = phi i32 [ %.pre3312, %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge" ], [ %1628, %"produce blur_x38" ]
  %1597 = mul nsw i32 %.pre-phi3313, %a73
  %t1644 = sub nsw i32 %1597, %t1601
  br i1 %99, label %"for blur_y.s0.x.x.rebased39.preheader", label %"end for blur_y.s0.x.x.rebased40", !prof !386

"for blur_y.s0.x.x.rebased39.preheader":          ; preds = %after_bb35
  %1598 = sext i32 %t1644 to i64
  br label %"for blur_y.s0.x.x.rebased39"

"produce blur_x38":                               ; preds = %"end for blur_y.s0.x.x.rebased29"
  %1599 = getelementptr inbounds i16, i16* %read_input, i64 %104
  %1600 = getelementptr inbounds i16, i16* %1599, i64 -31
  %1601 = bitcast i16* %1600 to <16 x i16>*
  %1602 = load <16 x i16>, <16 x i16>* %1601, align 2, !tbaa !396
  %1603 = getelementptr inbounds i16, i16* %1599, i64 -15
  %1604 = bitcast i16* %1603 to <16 x i16>*
  %1605 = load <16 x i16>, <16 x i16>* %1604, align 2, !tbaa !396
  %1606 = getelementptr inbounds i16, i16* %1599, i64 -30
  %1607 = bitcast i16* %1606 to <16 x i16>*
  %1608 = load <16 x i16>, <16 x i16>* %1607, align 2, !tbaa !396
  %1609 = getelementptr inbounds i16, i16* %1599, i64 -14
  %1610 = bitcast i16* %1609 to <16 x i16>*
  %1611 = load <16 x i16>, <16 x i16>* %1610, align 2, !tbaa !396
  %1612 = getelementptr inbounds i16, i16* %1599, i64 -32
  %1613 = bitcast i16* %1612 to <16 x i16>*
  %1614 = load <16 x i16>, <16 x i16>* %1613, align 2, !tbaa !396
  %1615 = getelementptr inbounds i16, i16* %1599, i64 -16
  %1616 = bitcast i16* %1615 to <16 x i16>*
  %1617 = load <16 x i16>, <16 x i16>* %1616, align 2, !tbaa !396
  %1618 = add <16 x i16> %1608, %1602
  %1619 = add <16 x i16> %1618, %1614
  %1620 = add <16 x i16> %1611, %1605
  %1621 = add <16 x i16> %1620, %1617
  %1622 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1619, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1623 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1621, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1624 = shufflevector <16 x i16> %1622, <16 x i16> %1623, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1625 = lshr <32 x i16> %1624, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1626 = shufflevector <32 x i16> %1625, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1627 = add nsw i32 %a26, 1
  %1628 = and i32 %1627, 3
  %1629 = zext i32 %1628 to i64
  %1630 = mul nsw i64 %96, %1629
  %1631 = add nsw i64 %98, %1630
  %1632 = getelementptr inbounds i16, i16* %blur_x, i64 %1631
  %1633 = getelementptr inbounds i16, i16* %1632, i64 -32
  %1634 = bitcast i16* %1633 to <16 x i16>*
  store <16 x i16> %1626, <16 x i16>* %1634, align 2, !tbaa !399
  %1635 = shufflevector <32 x i16> %1625, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1636 = getelementptr inbounds i16, i16* %1632, i64 -16
  %1637 = bitcast i16* %1636 to <16 x i16>*
  store <16 x i16> %1635, <16 x i16>* %1637, align 2, !tbaa !399
  br label %after_bb35

"for blur_y.s0.x.x.rebased39":                    ; preds = %"for blur_y.s0.x.x.rebased39.preheader", %after_bb42
  %indvars.iv3128 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased39.preheader" ], [ %indvars.iv.next3129, %after_bb42 ]
  %1638 = add nsw i64 %indvars.iv3128, %100
  %1639 = icmp slt i64 %1638, 1
  %1640 = trunc i64 %1638 to i32
  %1641 = shl nsw i32 %1640, 5
  %1642 = icmp sgt i32 %4, %1641
  %1643 = or i1 %1639, %1642
  br i1 %1643, label %"produce blur_x45", label %after_bb42

"end for blur_y.s0.x.x.rebased40":                ; preds = %after_bb42, %after_bb35
  br i1 %101, label %"for blur_y.s0.x.x.rebased46.preheader", label %"end for blur_y.s0.x.x.rebased47", !prof !386

"for blur_y.s0.x.x.rebased46.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased40"
  %1644 = sext i32 %t1644 to i64
  br label %"for blur_y.s0.x.x.rebased46"

after_bb42:                                       ; preds = %"for blur_y.s0.x.x.rebased39", %"produce blur_x45"
  %indvars.iv.next3129 = add nuw nsw i64 %indvars.iv3128, 1
  %.not2647 = icmp eq i64 %indvars.iv.next3129, %180
  br i1 %.not2647, label %"end for blur_y.s0.x.x.rebased40", label %"for blur_y.s0.x.x.rebased39"

"produce blur_x45":                               ; preds = %"for blur_y.s0.x.x.rebased39"
  %t662 = add nsw i32 %1641, %t1643
  %1645 = sext i32 %t662 to i64
  %1646 = getelementptr inbounds i16, i16* %read_input, i64 %1645
  %1647 = getelementptr inbounds i16, i16* %1646, i64 1
  %1648 = bitcast i16* %1647 to <16 x i16>*
  %1649 = load <16 x i16>, <16 x i16>* %1648, align 2, !tbaa !396
  %1650 = getelementptr inbounds i16, i16* %1646, i64 17
  %1651 = bitcast i16* %1650 to <16 x i16>*
  %1652 = load <16 x i16>, <16 x i16>* %1651, align 2, !tbaa !396
  %1653 = getelementptr inbounds i16, i16* %1646, i64 2
  %1654 = bitcast i16* %1653 to <16 x i16>*
  %1655 = load <16 x i16>, <16 x i16>* %1654, align 2, !tbaa !396
  %1656 = getelementptr inbounds i16, i16* %1646, i64 18
  %1657 = bitcast i16* %1656 to <16 x i16>*
  %1658 = load <16 x i16>, <16 x i16>* %1657, align 2, !tbaa !396
  %1659 = bitcast i16* %1646 to <16 x i16>*
  %1660 = load <16 x i16>, <16 x i16>* %1659, align 2, !tbaa !396
  %1661 = getelementptr inbounds i16, i16* %1646, i64 16
  %1662 = bitcast i16* %1661 to <16 x i16>*
  %1663 = load <16 x i16>, <16 x i16>* %1662, align 2, !tbaa !396
  %1664 = add <16 x i16> %1655, %1649
  %1665 = add <16 x i16> %1664, %1660
  %1666 = add <16 x i16> %1658, %1652
  %1667 = add <16 x i16> %1666, %1663
  %1668 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1665, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1669 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1667, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1670 = shufflevector <16 x i16> %1668, <16 x i16> %1669, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1671 = lshr <32 x i16> %1670, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1672 = shufflevector <32 x i16> %1671, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1673 = shl nsw i64 %1638, 5
  %1674 = add nsw i64 %1673, %1598
  %1675 = getelementptr inbounds i16, i16* %blur_x, i64 %1674
  %1676 = bitcast i16* %1675 to <16 x i16>*
  store <16 x i16> %1672, <16 x i16>* %1676, align 2, !tbaa !399
  %1677 = shufflevector <32 x i16> %1671, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1678 = getelementptr inbounds i16, i16* %1675, i64 16
  %1679 = bitcast i16* %1678 to <16 x i16>*
  store <16 x i16> %1677, <16 x i16>* %1679, align 2, !tbaa !399
  br label %after_bb42

"for blur_y.s0.x.x.rebased46":                    ; preds = %"for blur_y.s0.x.x.rebased46.preheader", %after_bb49
  %blur_y.s0.x.x.rebased48 = phi i32 [ %1684, %after_bb49 ], [ 0, %"for blur_y.s0.x.x.rebased46.preheader" ]
  %t2165 = add nsw i32 %blur_y.s0.x.x.rebased48, %t1582
  %1680 = icmp slt i32 %t2165, 1
  %1681 = shl nsw i32 %t2165, 5
  %1682 = icmp sgt i32 %4, %1681
  %1683 = or i1 %1680, %1682
  br i1 %1683, label %then_bb50, label %after_bb49

"end for blur_y.s0.x.x.rebased47":                ; preds = %after_bb49, %"end for blur_y.s0.x.x.rebased40"
  br i1 %34, label %"produce blur_x57", label %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge"

"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased47"
  %.pre3314 = add nsw i32 %a26, 2
  %.pre3316 = and i32 %.pre3314, 3
  br label %after_bb54

after_bb49:                                       ; preds = %"for blur_y.s0.x.x.rebased46", %then_bb50
  %1684 = add nuw nsw i32 %blur_y.s0.x.x.rebased48, 1
  %.not2646 = icmp eq i32 %1684, %t1639
  br i1 %.not2646, label %"end for blur_y.s0.x.x.rebased47", label %"for blur_y.s0.x.x.rebased46"

then_bb50:                                        ; preds = %"for blur_y.s0.x.x.rebased46"
  %1685 = icmp sgt i32 %a14, %1681
  %b90 = select i1 %1685, i32 %1681, i32 %a14
  %1686 = icmp slt i32 %b90, %4
  %blur_x.s0.x.v1.base.s53 = select i1 %1686, i32 %b90, i32 %4
  %t664 = add nsw i32 %blur_x.s0.x.v1.base.s53, %t1643
  %1687 = sext i32 %t664 to i64
  %1688 = getelementptr inbounds i16, i16* %read_input, i64 %1687
  %1689 = getelementptr inbounds i16, i16* %1688, i64 1
  %1690 = bitcast i16* %1689 to <16 x i16>*
  %1691 = load <16 x i16>, <16 x i16>* %1690, align 2, !tbaa !396
  %1692 = getelementptr inbounds i16, i16* %1688, i64 17
  %1693 = bitcast i16* %1692 to <16 x i16>*
  %1694 = load <16 x i16>, <16 x i16>* %1693, align 2, !tbaa !396
  %1695 = getelementptr inbounds i16, i16* %1688, i64 2
  %1696 = bitcast i16* %1695 to <16 x i16>*
  %1697 = load <16 x i16>, <16 x i16>* %1696, align 2, !tbaa !396
  %1698 = getelementptr inbounds i16, i16* %1688, i64 18
  %1699 = bitcast i16* %1698 to <16 x i16>*
  %1700 = load <16 x i16>, <16 x i16>* %1699, align 2, !tbaa !396
  %1701 = bitcast i16* %1688 to <16 x i16>*
  %1702 = load <16 x i16>, <16 x i16>* %1701, align 2, !tbaa !396
  %1703 = getelementptr inbounds i16, i16* %1688, i64 16
  %1704 = bitcast i16* %1703 to <16 x i16>*
  %1705 = load <16 x i16>, <16 x i16>* %1704, align 2, !tbaa !396
  %1706 = add <16 x i16> %1697, %1691
  %1707 = add <16 x i16> %1706, %1702
  %1708 = add <16 x i16> %1700, %1694
  %1709 = add <16 x i16> %1708, %1705
  %1710 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1707, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1711 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1709, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1712 = shufflevector <16 x i16> %1710, <16 x i16> %1711, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1713 = lshr <32 x i16> %1712, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1714 = shufflevector <32 x i16> %1713, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1715 = sext i32 %blur_x.s0.x.v1.base.s53 to i64
  %1716 = add nsw i64 %1715, %1644
  %1717 = getelementptr inbounds i16, i16* %blur_x, i64 %1716
  %1718 = bitcast i16* %1717 to <16 x i16>*
  store <16 x i16> %1714, <16 x i16>* %1718, align 2, !tbaa !399
  %1719 = shufflevector <32 x i16> %1713, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1720 = getelementptr inbounds i16, i16* %1717, i64 16
  %1721 = bitcast i16* %1720 to <16 x i16>*
  store <16 x i16> %1719, <16 x i16>* %1721, align 2, !tbaa !399
  br label %after_bb49

after_bb54:                                       ; preds = %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge", %"produce blur_x57"
  %.pre-phi3317 = phi i32 [ %.pre3316, %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge" ], [ %1765, %"produce blur_x57" ]
  %1722 = mul nsw i32 %.pre-phi3317, %a73
  %t1650 = sub nsw i32 %1722, %t1601
  br i1 %99, label %"for blur_y.s0.x.x.rebased58.preheader", label %"end for blur_y.s0.x.x.rebased59", !prof !386

"for blur_y.s0.x.x.rebased58.preheader":          ; preds = %after_bb54
  %1723 = sext i32 %t1650 to i64
  %1724 = zext i32 %.pre-phi3313 to i64
  %1725 = mul nsw i64 %1724, %108
  %1726 = sub nsw i64 %1725, %95
  %1727 = zext i32 %.pre-phi3317 to i64
  %1728 = mul nsw i64 %1727, %108
  %1729 = sub nsw i64 %1728, %95
  %1730 = zext i32 %.pre-phi to i64
  %1731 = mul nsw i64 %1730, %108
  %1732 = sub nsw i64 %1731, %95
  %1733 = sext i32 %a26 to i64
  %1734 = mul nsw i64 %1733, %109
  %1735 = add nsw i64 %1734, %112
  br label %"for blur_y.s0.x.x.rebased58"

"produce blur_x57":                               ; preds = %"end for blur_y.s0.x.x.rebased47"
  %1736 = getelementptr inbounds i16, i16* %read_input, i64 %107
  %1737 = getelementptr inbounds i16, i16* %1736, i64 -31
  %1738 = bitcast i16* %1737 to <16 x i16>*
  %1739 = load <16 x i16>, <16 x i16>* %1738, align 2, !tbaa !396
  %1740 = getelementptr inbounds i16, i16* %1736, i64 -15
  %1741 = bitcast i16* %1740 to <16 x i16>*
  %1742 = load <16 x i16>, <16 x i16>* %1741, align 2, !tbaa !396
  %1743 = getelementptr inbounds i16, i16* %1736, i64 -30
  %1744 = bitcast i16* %1743 to <16 x i16>*
  %1745 = load <16 x i16>, <16 x i16>* %1744, align 2, !tbaa !396
  %1746 = getelementptr inbounds i16, i16* %1736, i64 -14
  %1747 = bitcast i16* %1746 to <16 x i16>*
  %1748 = load <16 x i16>, <16 x i16>* %1747, align 2, !tbaa !396
  %1749 = getelementptr inbounds i16, i16* %1736, i64 -32
  %1750 = bitcast i16* %1749 to <16 x i16>*
  %1751 = load <16 x i16>, <16 x i16>* %1750, align 2, !tbaa !396
  %1752 = getelementptr inbounds i16, i16* %1736, i64 -16
  %1753 = bitcast i16* %1752 to <16 x i16>*
  %1754 = load <16 x i16>, <16 x i16>* %1753, align 2, !tbaa !396
  %1755 = add <16 x i16> %1745, %1739
  %1756 = add <16 x i16> %1755, %1751
  %1757 = add <16 x i16> %1748, %1742
  %1758 = add <16 x i16> %1757, %1754
  %1759 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1756, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1760 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1758, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1761 = shufflevector <16 x i16> %1759, <16 x i16> %1760, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1762 = lshr <32 x i16> %1761, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1763 = shufflevector <32 x i16> %1762, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1764 = add nsw i32 %a26, 2
  %1765 = and i32 %1764, 3
  %1766 = zext i32 %1765 to i64
  %1767 = mul nsw i64 %96, %1766
  %1768 = add nsw i64 %98, %1767
  %1769 = getelementptr inbounds i16, i16* %blur_x, i64 %1768
  %1770 = getelementptr inbounds i16, i16* %1769, i64 -32
  %1771 = bitcast i16* %1770 to <16 x i16>*
  store <16 x i16> %1763, <16 x i16>* %1771, align 2, !tbaa !399
  %1772 = shufflevector <32 x i16> %1762, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1773 = getelementptr inbounds i16, i16* %1769, i64 -16
  %1774 = bitcast i16* %1773 to <16 x i16>*
  store <16 x i16> %1772, <16 x i16>* %1774, align 2, !tbaa !399
  %1775 = zext i32 %.pre-phi3313 to i64
  %1776 = mul nsw i64 %1775, %108
  %1777 = add nsw i64 %1776, %93
  %1778 = getelementptr inbounds i16, i16* %blur_x, i64 %1777
  %1779 = getelementptr inbounds i16, i16* %1778, i64 -32
  %1780 = bitcast i16* %1779 to <16 x i16>*
  %1781 = load <16 x i16>, <16 x i16>* %1780, align 2, !tbaa !399
  %1782 = getelementptr inbounds i16, i16* %1778, i64 -16
  %1783 = bitcast i16* %1782 to <16 x i16>*
  %1784 = load <16 x i16>, <16 x i16>* %1783, align 2, !tbaa !399
  %1785 = mul nsw i64 %1766, %108
  %1786 = add nsw i64 %1785, %93
  %1787 = getelementptr inbounds i16, i16* %blur_x, i64 %1786
  %1788 = getelementptr inbounds i16, i16* %1787, i64 -32
  %1789 = bitcast i16* %1788 to <16 x i16>*
  %1790 = load <16 x i16>, <16 x i16>* %1789, align 2, !tbaa !399
  %1791 = getelementptr inbounds i16, i16* %1787, i64 -16
  %1792 = bitcast i16* %1791 to <16 x i16>*
  %1793 = load <16 x i16>, <16 x i16>* %1792, align 2, !tbaa !399
  %1794 = zext i32 %.pre-phi to i64
  %1795 = mul nsw i64 %1794, %108
  %1796 = add nsw i64 %1795, %93
  %1797 = getelementptr inbounds i16, i16* %blur_x, i64 %1796
  %1798 = getelementptr inbounds i16, i16* %1797, i64 -32
  %1799 = bitcast i16* %1798 to <16 x i16>*
  %1800 = load <16 x i16>, <16 x i16>* %1799, align 2, !tbaa !399
  %1801 = getelementptr inbounds i16, i16* %1797, i64 -16
  %1802 = bitcast i16* %1801 to <16 x i16>*
  %1803 = load <16 x i16>, <16 x i16>* %1802, align 2, !tbaa !399
  %1804 = add <16 x i16> %1790, %1781
  %1805 = add <16 x i16> %1804, %1800
  %1806 = add <16 x i16> %1793, %1784
  %1807 = add <16 x i16> %1806, %1803
  %1808 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1805, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1809 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1807, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1810 = shufflevector <16 x i16> %1808, <16 x i16> %1809, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1811 = lshr <32 x i16> %1810, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1812 = shufflevector <32 x i16> %1811, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1813 = sext i32 %a26 to i64
  %1814 = mul nsw i64 %1813, %109
  %1815 = add nsw i64 %111, %1814
  %1816 = getelementptr inbounds i16, i16* %65, i64 %1815
  %1817 = getelementptr inbounds i16, i16* %1816, i64 -32
  %1818 = bitcast i16* %1817 to <16 x i16>*
  store <16 x i16> %1812, <16 x i16>* %1818, align 2, !tbaa !401
  %1819 = shufflevector <32 x i16> %1811, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1820 = getelementptr inbounds i16, i16* %1816, i64 -16
  %1821 = bitcast i16* %1820 to <16 x i16>*
  store <16 x i16> %1819, <16 x i16>* %1821, align 2, !tbaa !401
  br label %after_bb54

"for blur_y.s0.x.x.rebased58":                    ; preds = %"for blur_y.s0.x.x.rebased58.preheader", %"consume blur_x65"
  %indvars.iv3131 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased58.preheader" ], [ %indvars.iv.next3132, %"consume blur_x65" ]
  %1822 = add nsw i64 %indvars.iv3131, %100
  %1823 = icmp slt i64 %1822, 1
  %1824 = trunc i64 %1822 to i32
  %1825 = shl nsw i32 %1824, 5
  %1826 = icmp sgt i32 %4, %1825
  %1827 = or i1 %1823, %1826
  br i1 %1827, label %"produce blur_x64", label %"for blur_y.s0.x.x.rebased58.consume blur_x65_crit_edge"

"for blur_y.s0.x.x.rebased58.consume blur_x65_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased58"
  %.pre3318 = shl nsw i64 %1822, 5
  br label %"consume blur_x65"

"end for blur_y.s0.x.x.rebased59":                ; preds = %"consume blur_x65", %after_bb54
  br i1 %101, label %"for blur_y.s0.x.x.rebased66.preheader", label %"end for blur_y.s0.x.x.rebased67", !prof !386

"for blur_y.s0.x.x.rebased66.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased59"
  %1828 = sext i32 %t1650 to i64
  %1829 = zext i32 %.pre-phi3313 to i64
  %1830 = mul nsw i64 %1829, %108
  %1831 = sub nsw i64 %1830, %95
  %1832 = zext i32 %.pre-phi3317 to i64
  %1833 = mul nsw i64 %1832, %108
  %1834 = sub nsw i64 %1833, %95
  %1835 = zext i32 %.pre-phi to i64
  %1836 = mul nsw i64 %1835, %108
  %1837 = sub nsw i64 %1836, %95
  %1838 = sext i32 %a26 to i64
  %1839 = mul nsw i64 %1838, %109
  %1840 = add nsw i64 %1839, %112
  br label %"for blur_y.s0.x.x.rebased66"

"produce blur_x64":                               ; preds = %"for blur_y.s0.x.x.rebased58"
  %t672 = add nsw i32 %1825, %105
  %1841 = sext i32 %t672 to i64
  %1842 = getelementptr inbounds i16, i16* %read_input, i64 %1841
  %1843 = getelementptr inbounds i16, i16* %1842, i64 1
  %1844 = bitcast i16* %1843 to <16 x i16>*
  %1845 = load <16 x i16>, <16 x i16>* %1844, align 2, !tbaa !396
  %1846 = getelementptr inbounds i16, i16* %1842, i64 17
  %1847 = bitcast i16* %1846 to <16 x i16>*
  %1848 = load <16 x i16>, <16 x i16>* %1847, align 2, !tbaa !396
  %1849 = getelementptr inbounds i16, i16* %1842, i64 2
  %1850 = bitcast i16* %1849 to <16 x i16>*
  %1851 = load <16 x i16>, <16 x i16>* %1850, align 2, !tbaa !396
  %1852 = getelementptr inbounds i16, i16* %1842, i64 18
  %1853 = bitcast i16* %1852 to <16 x i16>*
  %1854 = load <16 x i16>, <16 x i16>* %1853, align 2, !tbaa !396
  %1855 = bitcast i16* %1842 to <16 x i16>*
  %1856 = load <16 x i16>, <16 x i16>* %1855, align 2, !tbaa !396
  %1857 = getelementptr inbounds i16, i16* %1842, i64 16
  %1858 = bitcast i16* %1857 to <16 x i16>*
  %1859 = load <16 x i16>, <16 x i16>* %1858, align 2, !tbaa !396
  %1860 = add <16 x i16> %1851, %1845
  %1861 = add <16 x i16> %1860, %1856
  %1862 = add <16 x i16> %1854, %1848
  %1863 = add <16 x i16> %1862, %1859
  %1864 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1861, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1865 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1863, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1866 = shufflevector <16 x i16> %1864, <16 x i16> %1865, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1867 = lshr <32 x i16> %1866, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1868 = shufflevector <32 x i16> %1867, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1869 = shl nsw i64 %1822, 5
  %1870 = add nsw i64 %1869, %1723
  %1871 = getelementptr inbounds i16, i16* %blur_x, i64 %1870
  %1872 = bitcast i16* %1871 to <16 x i16>*
  store <16 x i16> %1868, <16 x i16>* %1872, align 2, !tbaa !399
  %1873 = shufflevector <32 x i16> %1867, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1874 = getelementptr inbounds i16, i16* %1871, i64 16
  %1875 = bitcast i16* %1874 to <16 x i16>*
  store <16 x i16> %1873, <16 x i16>* %1875, align 2, !tbaa !399
  br label %"consume blur_x65"

"consume blur_x65":                               ; preds = %"for blur_y.s0.x.x.rebased58.consume blur_x65_crit_edge", %"produce blur_x64"
  %.pre-phi3319 = phi i64 [ %.pre3318, %"for blur_y.s0.x.x.rebased58.consume blur_x65_crit_edge" ], [ %1869, %"produce blur_x64" ]
  %1876 = add nsw i64 %1726, %.pre-phi3319
  %1877 = getelementptr inbounds i16, i16* %blur_x, i64 %1876
  %1878 = bitcast i16* %1877 to <16 x i16>*
  %1879 = load <16 x i16>, <16 x i16>* %1878, align 2, !tbaa !399
  %1880 = getelementptr inbounds i16, i16* %1877, i64 16
  %1881 = bitcast i16* %1880 to <16 x i16>*
  %1882 = load <16 x i16>, <16 x i16>* %1881, align 2, !tbaa !399
  %1883 = add nsw i64 %1729, %.pre-phi3319
  %1884 = getelementptr inbounds i16, i16* %blur_x, i64 %1883
  %1885 = bitcast i16* %1884 to <16 x i16>*
  %1886 = load <16 x i16>, <16 x i16>* %1885, align 2, !tbaa !399
  %1887 = getelementptr inbounds i16, i16* %1884, i64 16
  %1888 = bitcast i16* %1887 to <16 x i16>*
  %1889 = load <16 x i16>, <16 x i16>* %1888, align 2, !tbaa !399
  %1890 = add nsw i64 %1732, %.pre-phi3319
  %1891 = getelementptr inbounds i16, i16* %blur_x, i64 %1890
  %1892 = bitcast i16* %1891 to <16 x i16>*
  %1893 = load <16 x i16>, <16 x i16>* %1892, align 2, !tbaa !399
  %1894 = getelementptr inbounds i16, i16* %1891, i64 16
  %1895 = bitcast i16* %1894 to <16 x i16>*
  %1896 = load <16 x i16>, <16 x i16>* %1895, align 2, !tbaa !399
  %1897 = add <16 x i16> %1886, %1879
  %1898 = add <16 x i16> %1897, %1893
  %1899 = add <16 x i16> %1889, %1882
  %1900 = add <16 x i16> %1899, %1896
  %1901 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1898, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1902 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1900, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1903 = shufflevector <16 x i16> %1901, <16 x i16> %1902, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1904 = lshr <32 x i16> %1903, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1905 = shufflevector <32 x i16> %1904, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1906 = add nsw i64 %1735, %.pre-phi3319
  %1907 = getelementptr inbounds i16, i16* %65, i64 %1906
  %1908 = bitcast i16* %1907 to <16 x i16>*
  store <16 x i16> %1905, <16 x i16>* %1908, align 2, !tbaa !401
  %1909 = shufflevector <32 x i16> %1904, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1910 = getelementptr inbounds i16, i16* %1907, i64 16
  %1911 = bitcast i16* %1910 to <16 x i16>*
  store <16 x i16> %1909, <16 x i16>* %1911, align 2, !tbaa !401
  %indvars.iv.next3132 = add nuw nsw i64 %indvars.iv3131, 1
  %.not2645 = icmp eq i64 %indvars.iv.next3132, %180
  br i1 %.not2645, label %"end for blur_y.s0.x.x.rebased59", label %"for blur_y.s0.x.x.rebased58"

"for blur_y.s0.x.x.rebased66":                    ; preds = %"for blur_y.s0.x.x.rebased66.preheader", %"consume blur_x74"
  %blur_y.s0.x.x.rebased68 = phi i32 [ %1990, %"consume blur_x74" ], [ 0, %"for blur_y.s0.x.x.rebased66.preheader" ]
  %1912 = add nsw i32 %blur_y.s0.x.x.rebased68, %t1582
  %a91 = shl nsw i32 %1912, 5
  %1913 = icmp sgt i32 %a14, %a91
  %b97 = select i1 %1913, i32 %a91, i32 %a14
  %1914 = icmp slt i32 %1912, 1
  %1915 = icmp sgt i32 %4, %a91
  %1916 = or i1 %1914, %1915
  br i1 %1916, label %"produce blur_x72", label %"consume blur_x74"

"end for blur_y.s0.x.x.rebased67":                ; preds = %"consume blur_x74", %"end for blur_y.s0.x.x.rebased59"
  br i1 %34, label %"produce blur_x78", label %"end for blur_y.s0.x.x.rebased67.after_bb75_crit_edge"

"end for blur_y.s0.x.x.rebased67.after_bb75_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased67"
  %.pre3320 = add nsw i32 %a26, 3
  %.pre3322 = and i32 %.pre3320, 3
  br label %after_bb75

"produce blur_x72":                               ; preds = %"for blur_y.s0.x.x.rebased66"
  %1917 = icmp slt i32 %b97, %4
  %blur_x.s0.x.v1.base.s73 = select i1 %1917, i32 %b97, i32 %4
  %t677 = add nsw i32 %blur_x.s0.x.v1.base.s73, %105
  %1918 = sext i32 %t677 to i64
  %1919 = getelementptr inbounds i16, i16* %read_input, i64 %1918
  %1920 = getelementptr inbounds i16, i16* %1919, i64 1
  %1921 = bitcast i16* %1920 to <16 x i16>*
  %1922 = load <16 x i16>, <16 x i16>* %1921, align 2, !tbaa !396
  %1923 = getelementptr inbounds i16, i16* %1919, i64 17
  %1924 = bitcast i16* %1923 to <16 x i16>*
  %1925 = load <16 x i16>, <16 x i16>* %1924, align 2, !tbaa !396
  %1926 = getelementptr inbounds i16, i16* %1919, i64 2
  %1927 = bitcast i16* %1926 to <16 x i16>*
  %1928 = load <16 x i16>, <16 x i16>* %1927, align 2, !tbaa !396
  %1929 = getelementptr inbounds i16, i16* %1919, i64 18
  %1930 = bitcast i16* %1929 to <16 x i16>*
  %1931 = load <16 x i16>, <16 x i16>* %1930, align 2, !tbaa !396
  %1932 = bitcast i16* %1919 to <16 x i16>*
  %1933 = load <16 x i16>, <16 x i16>* %1932, align 2, !tbaa !396
  %1934 = getelementptr inbounds i16, i16* %1919, i64 16
  %1935 = bitcast i16* %1934 to <16 x i16>*
  %1936 = load <16 x i16>, <16 x i16>* %1935, align 2, !tbaa !396
  %1937 = add <16 x i16> %1928, %1922
  %1938 = add <16 x i16> %1937, %1933
  %1939 = add <16 x i16> %1931, %1925
  %1940 = add <16 x i16> %1939, %1936
  %1941 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1938, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1942 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1940, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1943 = shufflevector <16 x i16> %1941, <16 x i16> %1942, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1944 = lshr <32 x i16> %1943, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1945 = shufflevector <32 x i16> %1944, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1946 = sext i32 %blur_x.s0.x.v1.base.s73 to i64
  %1947 = add nsw i64 %1946, %1828
  %1948 = getelementptr inbounds i16, i16* %blur_x, i64 %1947
  %1949 = bitcast i16* %1948 to <16 x i16>*
  store <16 x i16> %1945, <16 x i16>* %1949, align 2, !tbaa !399
  %1950 = shufflevector <32 x i16> %1944, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1951 = getelementptr inbounds i16, i16* %1948, i64 16
  %1952 = bitcast i16* %1951 to <16 x i16>*
  store <16 x i16> %1950, <16 x i16>* %1952, align 2, !tbaa !399
  br label %"consume blur_x74"

"consume blur_x74":                               ; preds = %"for blur_y.s0.x.x.rebased66", %"produce blur_x72"
  %1953 = sext i32 %b97 to i64
  %1954 = add nsw i64 %1831, %1953
  %1955 = getelementptr inbounds i16, i16* %blur_x, i64 %1954
  %1956 = bitcast i16* %1955 to <16 x i16>*
  %1957 = load <16 x i16>, <16 x i16>* %1956, align 2, !tbaa !399
  %1958 = getelementptr inbounds i16, i16* %1955, i64 16
  %1959 = bitcast i16* %1958 to <16 x i16>*
  %1960 = load <16 x i16>, <16 x i16>* %1959, align 2, !tbaa !399
  %1961 = add nsw i64 %1834, %1953
  %1962 = getelementptr inbounds i16, i16* %blur_x, i64 %1961
  %1963 = bitcast i16* %1962 to <16 x i16>*
  %1964 = load <16 x i16>, <16 x i16>* %1963, align 2, !tbaa !399
  %1965 = getelementptr inbounds i16, i16* %1962, i64 16
  %1966 = bitcast i16* %1965 to <16 x i16>*
  %1967 = load <16 x i16>, <16 x i16>* %1966, align 2, !tbaa !399
  %1968 = add nsw i64 %1837, %1953
  %1969 = getelementptr inbounds i16, i16* %blur_x, i64 %1968
  %1970 = bitcast i16* %1969 to <16 x i16>*
  %1971 = load <16 x i16>, <16 x i16>* %1970, align 2, !tbaa !399
  %1972 = getelementptr inbounds i16, i16* %1969, i64 16
  %1973 = bitcast i16* %1972 to <16 x i16>*
  %1974 = load <16 x i16>, <16 x i16>* %1973, align 2, !tbaa !399
  %1975 = add <16 x i16> %1964, %1957
  %1976 = add <16 x i16> %1975, %1971
  %1977 = add <16 x i16> %1967, %1960
  %1978 = add <16 x i16> %1977, %1974
  %1979 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1976, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1980 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1978, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1981 = shufflevector <16 x i16> %1979, <16 x i16> %1980, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1982 = lshr <32 x i16> %1981, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1983 = shufflevector <32 x i16> %1982, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1984 = add nsw i64 %1840, %1953
  %1985 = getelementptr inbounds i16, i16* %65, i64 %1984
  %1986 = bitcast i16* %1985 to <16 x i16>*
  store <16 x i16> %1983, <16 x i16>* %1986, align 2, !tbaa !401
  %1987 = shufflevector <32 x i16> %1982, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1988 = getelementptr inbounds i16, i16* %1985, i64 16
  %1989 = bitcast i16* %1988 to <16 x i16>*
  store <16 x i16> %1987, <16 x i16>* %1989, align 2, !tbaa !401
  %1990 = add nuw nsw i32 %blur_y.s0.x.x.rebased68, 1
  %.not2644 = icmp eq i32 %1990, %t1639
  br i1 %.not2644, label %"end for blur_y.s0.x.x.rebased67", label %"for blur_y.s0.x.x.rebased66"

after_bb75:                                       ; preds = %"end for blur_y.s0.x.x.rebased67.after_bb75_crit_edge", %"produce blur_x78"
  %.pre-phi3323 = phi i32 [ %.pre3322, %"end for blur_y.s0.x.x.rebased67.after_bb75_crit_edge" ], [ %2035, %"produce blur_x78" ]
  %1991 = mul nsw i32 %.pre-phi3323, %a73
  %t1666 = sub nsw i32 %1991, %t1601
  br i1 %99, label %"for blur_y.s0.x.x.rebased80.preheader", label %"end for blur_y.s0.x.x.rebased81", !prof !386

"for blur_y.s0.x.x.rebased80.preheader":          ; preds = %after_bb75
  %1992 = sext i32 %t1666 to i64
  %1993 = zext i32 %.pre-phi3317 to i64
  %1994 = mul nsw i64 %1993, %108
  %1995 = sub nsw i64 %1994, %95
  %1996 = zext i32 %.pre-phi3323 to i64
  %1997 = mul nsw i64 %1996, %108
  %1998 = sub nsw i64 %1997, %95
  %1999 = zext i32 %.pre-phi3313 to i64
  %2000 = mul nsw i64 %1999, %108
  %2001 = sub nsw i64 %2000, %95
  %2002 = sext i32 %a26 to i64
  %2003 = add nsw i64 %2002, 1
  %2004 = mul nsw i64 %2003, %109
  %2005 = add nsw i64 %2004, %112
  br label %"for blur_y.s0.x.x.rebased80"

"produce blur_x78":                               ; preds = %"end for blur_y.s0.x.x.rebased67"
  %2006 = getelementptr inbounds i16, i16* %read_input, i64 %113
  %2007 = getelementptr inbounds i16, i16* %2006, i64 -31
  %2008 = bitcast i16* %2007 to <16 x i16>*
  %2009 = load <16 x i16>, <16 x i16>* %2008, align 2, !tbaa !396
  %2010 = getelementptr inbounds i16, i16* %2006, i64 -15
  %2011 = bitcast i16* %2010 to <16 x i16>*
  %2012 = load <16 x i16>, <16 x i16>* %2011, align 2, !tbaa !396
  %2013 = getelementptr inbounds i16, i16* %2006, i64 -30
  %2014 = bitcast i16* %2013 to <16 x i16>*
  %2015 = load <16 x i16>, <16 x i16>* %2014, align 2, !tbaa !396
  %2016 = getelementptr inbounds i16, i16* %2006, i64 -14
  %2017 = bitcast i16* %2016 to <16 x i16>*
  %2018 = load <16 x i16>, <16 x i16>* %2017, align 2, !tbaa !396
  %2019 = getelementptr inbounds i16, i16* %2006, i64 -32
  %2020 = bitcast i16* %2019 to <16 x i16>*
  %2021 = load <16 x i16>, <16 x i16>* %2020, align 2, !tbaa !396
  %2022 = getelementptr inbounds i16, i16* %2006, i64 -16
  %2023 = bitcast i16* %2022 to <16 x i16>*
  %2024 = load <16 x i16>, <16 x i16>* %2023, align 2, !tbaa !396
  %2025 = add <16 x i16> %2015, %2009
  %2026 = add <16 x i16> %2025, %2021
  %2027 = add <16 x i16> %2018, %2012
  %2028 = add <16 x i16> %2027, %2024
  %2029 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2026, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2030 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2028, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2031 = shufflevector <16 x i16> %2029, <16 x i16> %2030, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2032 = lshr <32 x i16> %2031, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2033 = shufflevector <32 x i16> %2032, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2034 = add nsw i32 %a26, 3
  %2035 = and i32 %2034, 3
  %2036 = zext i32 %2035 to i64
  %2037 = mul nsw i64 %96, %2036
  %2038 = add nsw i64 %98, %2037
  %2039 = getelementptr inbounds i16, i16* %blur_x, i64 %2038
  %2040 = getelementptr inbounds i16, i16* %2039, i64 -32
  %2041 = bitcast i16* %2040 to <16 x i16>*
  store <16 x i16> %2033, <16 x i16>* %2041, align 2, !tbaa !399
  %2042 = shufflevector <32 x i16> %2032, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2043 = getelementptr inbounds i16, i16* %2039, i64 -16
  %2044 = bitcast i16* %2043 to <16 x i16>*
  store <16 x i16> %2042, <16 x i16>* %2044, align 2, !tbaa !399
  %2045 = zext i32 %.pre-phi3317 to i64
  %2046 = mul nsw i64 %2045, %108
  %2047 = add nsw i64 %2046, %93
  %2048 = getelementptr inbounds i16, i16* %blur_x, i64 %2047
  %2049 = getelementptr inbounds i16, i16* %2048, i64 -32
  %2050 = bitcast i16* %2049 to <16 x i16>*
  %2051 = load <16 x i16>, <16 x i16>* %2050, align 2, !tbaa !399
  %2052 = getelementptr inbounds i16, i16* %2048, i64 -16
  %2053 = bitcast i16* %2052 to <16 x i16>*
  %2054 = load <16 x i16>, <16 x i16>* %2053, align 2, !tbaa !399
  %2055 = mul nsw i64 %2036, %108
  %2056 = add nsw i64 %2055, %93
  %2057 = getelementptr inbounds i16, i16* %blur_x, i64 %2056
  %2058 = getelementptr inbounds i16, i16* %2057, i64 -32
  %2059 = bitcast i16* %2058 to <16 x i16>*
  %2060 = load <16 x i16>, <16 x i16>* %2059, align 2, !tbaa !399
  %2061 = getelementptr inbounds i16, i16* %2057, i64 -16
  %2062 = bitcast i16* %2061 to <16 x i16>*
  %2063 = load <16 x i16>, <16 x i16>* %2062, align 2, !tbaa !399
  %2064 = zext i32 %.pre-phi3313 to i64
  %2065 = mul nsw i64 %2064, %108
  %2066 = add nsw i64 %2065, %93
  %2067 = getelementptr inbounds i16, i16* %blur_x, i64 %2066
  %2068 = getelementptr inbounds i16, i16* %2067, i64 -32
  %2069 = bitcast i16* %2068 to <16 x i16>*
  %2070 = load <16 x i16>, <16 x i16>* %2069, align 2, !tbaa !399
  %2071 = getelementptr inbounds i16, i16* %2067, i64 -16
  %2072 = bitcast i16* %2071 to <16 x i16>*
  %2073 = load <16 x i16>, <16 x i16>* %2072, align 2, !tbaa !399
  %2074 = add <16 x i16> %2060, %2051
  %2075 = add <16 x i16> %2074, %2070
  %2076 = add <16 x i16> %2063, %2054
  %2077 = add <16 x i16> %2076, %2073
  %2078 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2075, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2079 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2077, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2080 = shufflevector <16 x i16> %2078, <16 x i16> %2079, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2081 = lshr <32 x i16> %2080, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2082 = shufflevector <32 x i16> %2081, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2083 = sext i32 %a26 to i64
  %2084 = add nsw i64 %2083, 1
  %2085 = mul nsw i64 %2084, %109
  %2086 = add nsw i64 %111, %2085
  %2087 = getelementptr inbounds i16, i16* %65, i64 %2086
  %2088 = getelementptr inbounds i16, i16* %2087, i64 -32
  %2089 = bitcast i16* %2088 to <16 x i16>*
  store <16 x i16> %2082, <16 x i16>* %2089, align 2, !tbaa !401
  %2090 = shufflevector <32 x i16> %2081, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2091 = getelementptr inbounds i16, i16* %2087, i64 -16
  %2092 = bitcast i16* %2091 to <16 x i16>*
  store <16 x i16> %2090, <16 x i16>* %2092, align 2, !tbaa !401
  br label %after_bb75

"for blur_y.s0.x.x.rebased80":                    ; preds = %"for blur_y.s0.x.x.rebased80.preheader", %"consume blur_x87"
  %indvars.iv3134 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased80.preheader" ], [ %indvars.iv.next3135, %"consume blur_x87" ]
  %2093 = add nsw i64 %indvars.iv3134, %100
  %2094 = icmp slt i64 %2093, 1
  %2095 = trunc i64 %2093 to i32
  %2096 = shl nsw i32 %2095, 5
  %2097 = icmp sgt i32 %4, %2096
  %2098 = or i1 %2094, %2097
  br i1 %2098, label %"produce blur_x86", label %"for blur_y.s0.x.x.rebased80.consume blur_x87_crit_edge"

"for blur_y.s0.x.x.rebased80.consume blur_x87_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased80"
  %.pre3324 = shl nsw i64 %2093, 5
  br label %"consume blur_x87"

"end for blur_y.s0.x.x.rebased81":                ; preds = %"consume blur_x87", %after_bb75
  br i1 %101, label %"for blur_y.s0.x.x.rebased88.preheader", label %"end for blur_y.s0.x.x.rebased89", !prof !386

"for blur_y.s0.x.x.rebased88.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased81"
  %2099 = sext i32 %t1666 to i64
  %2100 = zext i32 %.pre-phi3317 to i64
  %2101 = mul nsw i64 %2100, %108
  %2102 = sub nsw i64 %2101, %95
  %2103 = zext i32 %.pre-phi3323 to i64
  %2104 = mul nsw i64 %2103, %108
  %2105 = sub nsw i64 %2104, %95
  %2106 = zext i32 %.pre-phi3313 to i64
  %2107 = mul nsw i64 %2106, %108
  %2108 = sub nsw i64 %2107, %95
  %2109 = sext i32 %a26 to i64
  %2110 = add nsw i64 %2109, 1
  %2111 = mul nsw i64 %2110, %109
  %2112 = add nsw i64 %2111, %112
  br label %"for blur_y.s0.x.x.rebased88"

"produce blur_x86":                               ; preds = %"for blur_y.s0.x.x.rebased80"
  %t688 = add nsw i32 %2096, %t1665
  %2113 = sext i32 %t688 to i64
  %2114 = getelementptr inbounds i16, i16* %read_input, i64 %2113
  %2115 = getelementptr inbounds i16, i16* %2114, i64 1
  %2116 = bitcast i16* %2115 to <16 x i16>*
  %2117 = load <16 x i16>, <16 x i16>* %2116, align 2, !tbaa !396
  %2118 = getelementptr inbounds i16, i16* %2114, i64 17
  %2119 = bitcast i16* %2118 to <16 x i16>*
  %2120 = load <16 x i16>, <16 x i16>* %2119, align 2, !tbaa !396
  %2121 = getelementptr inbounds i16, i16* %2114, i64 2
  %2122 = bitcast i16* %2121 to <16 x i16>*
  %2123 = load <16 x i16>, <16 x i16>* %2122, align 2, !tbaa !396
  %2124 = getelementptr inbounds i16, i16* %2114, i64 18
  %2125 = bitcast i16* %2124 to <16 x i16>*
  %2126 = load <16 x i16>, <16 x i16>* %2125, align 2, !tbaa !396
  %2127 = bitcast i16* %2114 to <16 x i16>*
  %2128 = load <16 x i16>, <16 x i16>* %2127, align 2, !tbaa !396
  %2129 = getelementptr inbounds i16, i16* %2114, i64 16
  %2130 = bitcast i16* %2129 to <16 x i16>*
  %2131 = load <16 x i16>, <16 x i16>* %2130, align 2, !tbaa !396
  %2132 = add <16 x i16> %2123, %2117
  %2133 = add <16 x i16> %2132, %2128
  %2134 = add <16 x i16> %2126, %2120
  %2135 = add <16 x i16> %2134, %2131
  %2136 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2133, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2137 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2135, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2138 = shufflevector <16 x i16> %2136, <16 x i16> %2137, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2139 = lshr <32 x i16> %2138, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2140 = shufflevector <32 x i16> %2139, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2141 = shl nsw i64 %2093, 5
  %2142 = add nsw i64 %2141, %1992
  %2143 = getelementptr inbounds i16, i16* %blur_x, i64 %2142
  %2144 = bitcast i16* %2143 to <16 x i16>*
  store <16 x i16> %2140, <16 x i16>* %2144, align 2, !tbaa !399
  %2145 = shufflevector <32 x i16> %2139, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2146 = getelementptr inbounds i16, i16* %2143, i64 16
  %2147 = bitcast i16* %2146 to <16 x i16>*
  store <16 x i16> %2145, <16 x i16>* %2147, align 2, !tbaa !399
  br label %"consume blur_x87"

"consume blur_x87":                               ; preds = %"for blur_y.s0.x.x.rebased80.consume blur_x87_crit_edge", %"produce blur_x86"
  %.pre-phi3325 = phi i64 [ %.pre3324, %"for blur_y.s0.x.x.rebased80.consume blur_x87_crit_edge" ], [ %2141, %"produce blur_x86" ]
  %2148 = add nsw i64 %1995, %.pre-phi3325
  %2149 = getelementptr inbounds i16, i16* %blur_x, i64 %2148
  %2150 = bitcast i16* %2149 to <16 x i16>*
  %2151 = load <16 x i16>, <16 x i16>* %2150, align 2, !tbaa !399
  %2152 = getelementptr inbounds i16, i16* %2149, i64 16
  %2153 = bitcast i16* %2152 to <16 x i16>*
  %2154 = load <16 x i16>, <16 x i16>* %2153, align 2, !tbaa !399
  %2155 = add nsw i64 %1998, %.pre-phi3325
  %2156 = getelementptr inbounds i16, i16* %blur_x, i64 %2155
  %2157 = bitcast i16* %2156 to <16 x i16>*
  %2158 = load <16 x i16>, <16 x i16>* %2157, align 2, !tbaa !399
  %2159 = getelementptr inbounds i16, i16* %2156, i64 16
  %2160 = bitcast i16* %2159 to <16 x i16>*
  %2161 = load <16 x i16>, <16 x i16>* %2160, align 2, !tbaa !399
  %2162 = add nsw i64 %2001, %.pre-phi3325
  %2163 = getelementptr inbounds i16, i16* %blur_x, i64 %2162
  %2164 = bitcast i16* %2163 to <16 x i16>*
  %2165 = load <16 x i16>, <16 x i16>* %2164, align 2, !tbaa !399
  %2166 = getelementptr inbounds i16, i16* %2163, i64 16
  %2167 = bitcast i16* %2166 to <16 x i16>*
  %2168 = load <16 x i16>, <16 x i16>* %2167, align 2, !tbaa !399
  %2169 = add <16 x i16> %2158, %2151
  %2170 = add <16 x i16> %2169, %2165
  %2171 = add <16 x i16> %2161, %2154
  %2172 = add <16 x i16> %2171, %2168
  %2173 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2170, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2174 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2172, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2175 = shufflevector <16 x i16> %2173, <16 x i16> %2174, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2176 = lshr <32 x i16> %2175, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2177 = shufflevector <32 x i16> %2176, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2178 = add nsw i64 %2005, %.pre-phi3325
  %2179 = getelementptr inbounds i16, i16* %65, i64 %2178
  %2180 = bitcast i16* %2179 to <16 x i16>*
  store <16 x i16> %2177, <16 x i16>* %2180, align 2, !tbaa !401
  %2181 = shufflevector <32 x i16> %2176, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2182 = getelementptr inbounds i16, i16* %2179, i64 16
  %2183 = bitcast i16* %2182 to <16 x i16>*
  store <16 x i16> %2181, <16 x i16>* %2183, align 2, !tbaa !401
  %indvars.iv.next3135 = add nuw nsw i64 %indvars.iv3134, 1
  %.not2643 = icmp eq i64 %indvars.iv.next3135, %180
  br i1 %.not2643, label %"end for blur_y.s0.x.x.rebased81", label %"for blur_y.s0.x.x.rebased80"

"for blur_y.s0.x.x.rebased88":                    ; preds = %"for blur_y.s0.x.x.rebased88.preheader", %"consume blur_x96"
  %blur_y.s0.x.x.rebased90 = phi i32 [ %2262, %"consume blur_x96" ], [ 0, %"for blur_y.s0.x.x.rebased88.preheader" ]
  %2184 = add nsw i32 %blur_y.s0.x.x.rebased90, %t1582
  %a98 = shl nsw i32 %2184, 5
  %2185 = icmp sgt i32 %a14, %a98
  %b104 = select i1 %2185, i32 %a98, i32 %a14
  %2186 = icmp slt i32 %2184, 1
  %2187 = icmp sgt i32 %4, %a98
  %2188 = or i1 %2186, %2187
  br i1 %2188, label %"produce blur_x94", label %"consume blur_x96"

"end for blur_y.s0.x.x.rebased89":                ; preds = %"consume blur_x96", %"end for blur_y.s0.x.x.rebased81"
  br i1 %34, label %"produce blur_x100", label %after_bb97

"produce blur_x94":                               ; preds = %"for blur_y.s0.x.x.rebased88"
  %2189 = icmp slt i32 %b104, %4
  %blur_x.s0.x.v1.base.s95 = select i1 %2189, i32 %b104, i32 %4
  %t693 = add nsw i32 %blur_x.s0.x.v1.base.s95, %t1665
  %2190 = sext i32 %t693 to i64
  %2191 = getelementptr inbounds i16, i16* %read_input, i64 %2190
  %2192 = getelementptr inbounds i16, i16* %2191, i64 1
  %2193 = bitcast i16* %2192 to <16 x i16>*
  %2194 = load <16 x i16>, <16 x i16>* %2193, align 2, !tbaa !396
  %2195 = getelementptr inbounds i16, i16* %2191, i64 17
  %2196 = bitcast i16* %2195 to <16 x i16>*
  %2197 = load <16 x i16>, <16 x i16>* %2196, align 2, !tbaa !396
  %2198 = getelementptr inbounds i16, i16* %2191, i64 2
  %2199 = bitcast i16* %2198 to <16 x i16>*
  %2200 = load <16 x i16>, <16 x i16>* %2199, align 2, !tbaa !396
  %2201 = getelementptr inbounds i16, i16* %2191, i64 18
  %2202 = bitcast i16* %2201 to <16 x i16>*
  %2203 = load <16 x i16>, <16 x i16>* %2202, align 2, !tbaa !396
  %2204 = bitcast i16* %2191 to <16 x i16>*
  %2205 = load <16 x i16>, <16 x i16>* %2204, align 2, !tbaa !396
  %2206 = getelementptr inbounds i16, i16* %2191, i64 16
  %2207 = bitcast i16* %2206 to <16 x i16>*
  %2208 = load <16 x i16>, <16 x i16>* %2207, align 2, !tbaa !396
  %2209 = add <16 x i16> %2200, %2194
  %2210 = add <16 x i16> %2209, %2205
  %2211 = add <16 x i16> %2203, %2197
  %2212 = add <16 x i16> %2211, %2208
  %2213 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2210, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2214 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2212, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2215 = shufflevector <16 x i16> %2213, <16 x i16> %2214, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2216 = lshr <32 x i16> %2215, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2217 = shufflevector <32 x i16> %2216, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2218 = sext i32 %blur_x.s0.x.v1.base.s95 to i64
  %2219 = add nsw i64 %2218, %2099
  %2220 = getelementptr inbounds i16, i16* %blur_x, i64 %2219
  %2221 = bitcast i16* %2220 to <16 x i16>*
  store <16 x i16> %2217, <16 x i16>* %2221, align 2, !tbaa !399
  %2222 = shufflevector <32 x i16> %2216, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2223 = getelementptr inbounds i16, i16* %2220, i64 16
  %2224 = bitcast i16* %2223 to <16 x i16>*
  store <16 x i16> %2222, <16 x i16>* %2224, align 2, !tbaa !399
  br label %"consume blur_x96"

"consume blur_x96":                               ; preds = %"for blur_y.s0.x.x.rebased88", %"produce blur_x94"
  %2225 = sext i32 %b104 to i64
  %2226 = add nsw i64 %2102, %2225
  %2227 = getelementptr inbounds i16, i16* %blur_x, i64 %2226
  %2228 = bitcast i16* %2227 to <16 x i16>*
  %2229 = load <16 x i16>, <16 x i16>* %2228, align 2, !tbaa !399
  %2230 = getelementptr inbounds i16, i16* %2227, i64 16
  %2231 = bitcast i16* %2230 to <16 x i16>*
  %2232 = load <16 x i16>, <16 x i16>* %2231, align 2, !tbaa !399
  %2233 = add nsw i64 %2105, %2225
  %2234 = getelementptr inbounds i16, i16* %blur_x, i64 %2233
  %2235 = bitcast i16* %2234 to <16 x i16>*
  %2236 = load <16 x i16>, <16 x i16>* %2235, align 2, !tbaa !399
  %2237 = getelementptr inbounds i16, i16* %2234, i64 16
  %2238 = bitcast i16* %2237 to <16 x i16>*
  %2239 = load <16 x i16>, <16 x i16>* %2238, align 2, !tbaa !399
  %2240 = add nsw i64 %2108, %2225
  %2241 = getelementptr inbounds i16, i16* %blur_x, i64 %2240
  %2242 = bitcast i16* %2241 to <16 x i16>*
  %2243 = load <16 x i16>, <16 x i16>* %2242, align 2, !tbaa !399
  %2244 = getelementptr inbounds i16, i16* %2241, i64 16
  %2245 = bitcast i16* %2244 to <16 x i16>*
  %2246 = load <16 x i16>, <16 x i16>* %2245, align 2, !tbaa !399
  %2247 = add <16 x i16> %2236, %2229
  %2248 = add <16 x i16> %2247, %2243
  %2249 = add <16 x i16> %2239, %2232
  %2250 = add <16 x i16> %2249, %2246
  %2251 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2248, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2252 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2250, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2253 = shufflevector <16 x i16> %2251, <16 x i16> %2252, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2254 = lshr <32 x i16> %2253, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2255 = shufflevector <32 x i16> %2254, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2256 = add nsw i64 %2112, %2225
  %2257 = getelementptr inbounds i16, i16* %65, i64 %2256
  %2258 = bitcast i16* %2257 to <16 x i16>*
  store <16 x i16> %2255, <16 x i16>* %2258, align 2, !tbaa !401
  %2259 = shufflevector <32 x i16> %2254, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2260 = getelementptr inbounds i16, i16* %2257, i64 16
  %2261 = bitcast i16* %2260 to <16 x i16>*
  store <16 x i16> %2259, <16 x i16>* %2261, align 2, !tbaa !401
  %2262 = add nuw nsw i32 %blur_y.s0.x.x.rebased90, 1
  %.not2642 = icmp eq i32 %2262, %t1639
  br i1 %.not2642, label %"end for blur_y.s0.x.x.rebased89", label %"for blur_y.s0.x.x.rebased88"

after_bb97:                                       ; preds = %"end for blur_y.s0.x.x.rebased89", %"produce blur_x100"
  br i1 %99, label %"for blur_y.s0.x.x.rebased102.preheader", label %"end for blur_y.s0.x.x.rebased103", !prof !386

"for blur_y.s0.x.x.rebased102.preheader":         ; preds = %after_bb97
  %2263 = sext i32 %t1638 to i64
  %2264 = zext i32 %.pre-phi3323 to i64
  %2265 = mul nsw i64 %2264, %108
  %2266 = sub nsw i64 %2265, %95
  %2267 = zext i32 %.pre-phi to i64
  %2268 = mul nsw i64 %2267, %108
  %2269 = sub nsw i64 %2268, %95
  %2270 = zext i32 %.pre-phi3317 to i64
  %2271 = mul nsw i64 %2270, %108
  %2272 = sub nsw i64 %2271, %95
  %2273 = sext i32 %a26 to i64
  %2274 = add nsw i64 %2273, 2
  %2275 = mul nsw i64 %2274, %109
  %2276 = add nsw i64 %2275, %112
  br label %"for blur_y.s0.x.x.rebased102"

"produce blur_x100":                              ; preds = %"end for blur_y.s0.x.x.rebased89"
  %2277 = getelementptr inbounds i16, i16* %read_input, i64 %115
  %2278 = getelementptr inbounds i16, i16* %2277, i64 -31
  %2279 = bitcast i16* %2278 to <16 x i16>*
  %2280 = load <16 x i16>, <16 x i16>* %2279, align 2, !tbaa !396
  %2281 = getelementptr inbounds i16, i16* %2277, i64 -15
  %2282 = bitcast i16* %2281 to <16 x i16>*
  %2283 = load <16 x i16>, <16 x i16>* %2282, align 2, !tbaa !396
  %2284 = getelementptr inbounds i16, i16* %2277, i64 -30
  %2285 = bitcast i16* %2284 to <16 x i16>*
  %2286 = load <16 x i16>, <16 x i16>* %2285, align 2, !tbaa !396
  %2287 = getelementptr inbounds i16, i16* %2277, i64 -14
  %2288 = bitcast i16* %2287 to <16 x i16>*
  %2289 = load <16 x i16>, <16 x i16>* %2288, align 2, !tbaa !396
  %2290 = getelementptr inbounds i16, i16* %2277, i64 -32
  %2291 = bitcast i16* %2290 to <16 x i16>*
  %2292 = load <16 x i16>, <16 x i16>* %2291, align 2, !tbaa !396
  %2293 = getelementptr inbounds i16, i16* %2277, i64 -16
  %2294 = bitcast i16* %2293 to <16 x i16>*
  %2295 = load <16 x i16>, <16 x i16>* %2294, align 2, !tbaa !396
  %2296 = add <16 x i16> %2286, %2280
  %2297 = add <16 x i16> %2296, %2292
  %2298 = add <16 x i16> %2289, %2283
  %2299 = add <16 x i16> %2298, %2295
  %2300 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2297, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2301 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2299, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2302 = shufflevector <16 x i16> %2300, <16 x i16> %2301, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2303 = lshr <32 x i16> %2302, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2304 = shufflevector <32 x i16> %2303, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2305 = zext i32 %.pre-phi to i64
  %2306 = mul nsw i64 %96, %2305
  %2307 = add nsw i64 %98, %2306
  %2308 = getelementptr inbounds i16, i16* %blur_x, i64 %2307
  %2309 = getelementptr inbounds i16, i16* %2308, i64 -32
  %2310 = bitcast i16* %2309 to <16 x i16>*
  store <16 x i16> %2304, <16 x i16>* %2310, align 2, !tbaa !399
  %2311 = shufflevector <32 x i16> %2303, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2312 = getelementptr inbounds i16, i16* %2308, i64 -16
  %2313 = bitcast i16* %2312 to <16 x i16>*
  store <16 x i16> %2311, <16 x i16>* %2313, align 2, !tbaa !399
  %2314 = zext i32 %.pre-phi3323 to i64
  %2315 = mul nsw i64 %2314, %108
  %2316 = add nsw i64 %2315, %93
  %2317 = getelementptr inbounds i16, i16* %blur_x, i64 %2316
  %2318 = getelementptr inbounds i16, i16* %2317, i64 -32
  %2319 = bitcast i16* %2318 to <16 x i16>*
  %2320 = load <16 x i16>, <16 x i16>* %2319, align 2, !tbaa !399
  %2321 = getelementptr inbounds i16, i16* %2317, i64 -16
  %2322 = bitcast i16* %2321 to <16 x i16>*
  %2323 = load <16 x i16>, <16 x i16>* %2322, align 2, !tbaa !399
  %2324 = mul nsw i64 %2305, %108
  %2325 = add nsw i64 %2324, %93
  %2326 = getelementptr inbounds i16, i16* %blur_x, i64 %2325
  %2327 = getelementptr inbounds i16, i16* %2326, i64 -32
  %2328 = bitcast i16* %2327 to <16 x i16>*
  %2329 = load <16 x i16>, <16 x i16>* %2328, align 2, !tbaa !399
  %2330 = getelementptr inbounds i16, i16* %2326, i64 -16
  %2331 = bitcast i16* %2330 to <16 x i16>*
  %2332 = load <16 x i16>, <16 x i16>* %2331, align 2, !tbaa !399
  %2333 = zext i32 %.pre-phi3317 to i64
  %2334 = mul nsw i64 %2333, %108
  %2335 = add nsw i64 %2334, %93
  %2336 = getelementptr inbounds i16, i16* %blur_x, i64 %2335
  %2337 = getelementptr inbounds i16, i16* %2336, i64 -32
  %2338 = bitcast i16* %2337 to <16 x i16>*
  %2339 = load <16 x i16>, <16 x i16>* %2338, align 2, !tbaa !399
  %2340 = getelementptr inbounds i16, i16* %2336, i64 -16
  %2341 = bitcast i16* %2340 to <16 x i16>*
  %2342 = load <16 x i16>, <16 x i16>* %2341, align 2, !tbaa !399
  %2343 = add <16 x i16> %2329, %2320
  %2344 = add <16 x i16> %2343, %2339
  %2345 = add <16 x i16> %2332, %2323
  %2346 = add <16 x i16> %2345, %2342
  %2347 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2344, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2348 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2346, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2349 = shufflevector <16 x i16> %2347, <16 x i16> %2348, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2350 = lshr <32 x i16> %2349, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2351 = shufflevector <32 x i16> %2350, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2352 = sext i32 %a26 to i64
  %2353 = add nsw i64 %2352, 2
  %2354 = mul nsw i64 %2353, %109
  %2355 = add nsw i64 %111, %2354
  %2356 = getelementptr inbounds i16, i16* %65, i64 %2355
  %2357 = getelementptr inbounds i16, i16* %2356, i64 -32
  %2358 = bitcast i16* %2357 to <16 x i16>*
  store <16 x i16> %2351, <16 x i16>* %2358, align 2, !tbaa !401
  %2359 = shufflevector <32 x i16> %2350, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2360 = getelementptr inbounds i16, i16* %2356, i64 -16
  %2361 = bitcast i16* %2360 to <16 x i16>*
  store <16 x i16> %2359, <16 x i16>* %2361, align 2, !tbaa !401
  br label %after_bb97

"for blur_y.s0.x.x.rebased102":                   ; preds = %"for blur_y.s0.x.x.rebased102.preheader", %"consume blur_x109"
  %indvars.iv3137 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased102.preheader" ], [ %indvars.iv.next3138, %"consume blur_x109" ]
  %2362 = add nsw i64 %indvars.iv3137, %100
  %2363 = icmp slt i64 %2362, 1
  %2364 = trunc i64 %2362 to i32
  %2365 = shl nsw i32 %2364, 5
  %2366 = icmp sgt i32 %4, %2365
  %2367 = or i1 %2363, %2366
  br i1 %2367, label %"produce blur_x108", label %"for blur_y.s0.x.x.rebased102.consume blur_x109_crit_edge"

"for blur_y.s0.x.x.rebased102.consume blur_x109_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased102"
  %.pre3326 = shl nsw i64 %2362, 5
  br label %"consume blur_x109"

"end for blur_y.s0.x.x.rebased103":               ; preds = %"consume blur_x109", %after_bb97
  br i1 %101, label %"for blur_y.s0.x.x.rebased110.preheader", label %"end for blur_y.s0.x.x.rebased111", !prof !386

"for blur_y.s0.x.x.rebased110.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased103"
  %2368 = sext i32 %t1638 to i64
  %2369 = zext i32 %.pre-phi3323 to i64
  %2370 = mul nsw i64 %2369, %108
  %2371 = sub nsw i64 %2370, %95
  %2372 = zext i32 %.pre-phi to i64
  %2373 = mul nsw i64 %2372, %108
  %2374 = sub nsw i64 %2373, %95
  %2375 = zext i32 %.pre-phi3317 to i64
  %2376 = mul nsw i64 %2375, %108
  %2377 = sub nsw i64 %2376, %95
  %2378 = sext i32 %a26 to i64
  %2379 = add nsw i64 %2378, 2
  %2380 = mul nsw i64 %2379, %109
  %2381 = add nsw i64 %2380, %112
  br label %"for blur_y.s0.x.x.rebased110"

"produce blur_x108":                              ; preds = %"for blur_y.s0.x.x.rebased102"
  %t704 = add nsw i32 %2365, %t1681
  %2382 = sext i32 %t704 to i64
  %2383 = getelementptr inbounds i16, i16* %read_input, i64 %2382
  %2384 = getelementptr inbounds i16, i16* %2383, i64 1
  %2385 = bitcast i16* %2384 to <16 x i16>*
  %2386 = load <16 x i16>, <16 x i16>* %2385, align 2, !tbaa !396
  %2387 = getelementptr inbounds i16, i16* %2383, i64 17
  %2388 = bitcast i16* %2387 to <16 x i16>*
  %2389 = load <16 x i16>, <16 x i16>* %2388, align 2, !tbaa !396
  %2390 = getelementptr inbounds i16, i16* %2383, i64 2
  %2391 = bitcast i16* %2390 to <16 x i16>*
  %2392 = load <16 x i16>, <16 x i16>* %2391, align 2, !tbaa !396
  %2393 = getelementptr inbounds i16, i16* %2383, i64 18
  %2394 = bitcast i16* %2393 to <16 x i16>*
  %2395 = load <16 x i16>, <16 x i16>* %2394, align 2, !tbaa !396
  %2396 = bitcast i16* %2383 to <16 x i16>*
  %2397 = load <16 x i16>, <16 x i16>* %2396, align 2, !tbaa !396
  %2398 = getelementptr inbounds i16, i16* %2383, i64 16
  %2399 = bitcast i16* %2398 to <16 x i16>*
  %2400 = load <16 x i16>, <16 x i16>* %2399, align 2, !tbaa !396
  %2401 = add <16 x i16> %2392, %2386
  %2402 = add <16 x i16> %2401, %2397
  %2403 = add <16 x i16> %2395, %2389
  %2404 = add <16 x i16> %2403, %2400
  %2405 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2402, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2406 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2404, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2407 = shufflevector <16 x i16> %2405, <16 x i16> %2406, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2408 = lshr <32 x i16> %2407, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2409 = shufflevector <32 x i16> %2408, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2410 = shl nsw i64 %2362, 5
  %2411 = add nsw i64 %2410, %2263
  %2412 = getelementptr inbounds i16, i16* %blur_x, i64 %2411
  %2413 = bitcast i16* %2412 to <16 x i16>*
  store <16 x i16> %2409, <16 x i16>* %2413, align 2, !tbaa !399
  %2414 = shufflevector <32 x i16> %2408, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2415 = getelementptr inbounds i16, i16* %2412, i64 16
  %2416 = bitcast i16* %2415 to <16 x i16>*
  store <16 x i16> %2414, <16 x i16>* %2416, align 2, !tbaa !399
  br label %"consume blur_x109"

"consume blur_x109":                              ; preds = %"for blur_y.s0.x.x.rebased102.consume blur_x109_crit_edge", %"produce blur_x108"
  %.pre-phi3327 = phi i64 [ %.pre3326, %"for blur_y.s0.x.x.rebased102.consume blur_x109_crit_edge" ], [ %2410, %"produce blur_x108" ]
  %2417 = add nsw i64 %2266, %.pre-phi3327
  %2418 = getelementptr inbounds i16, i16* %blur_x, i64 %2417
  %2419 = bitcast i16* %2418 to <16 x i16>*
  %2420 = load <16 x i16>, <16 x i16>* %2419, align 2, !tbaa !399
  %2421 = getelementptr inbounds i16, i16* %2418, i64 16
  %2422 = bitcast i16* %2421 to <16 x i16>*
  %2423 = load <16 x i16>, <16 x i16>* %2422, align 2, !tbaa !399
  %2424 = add nsw i64 %2269, %.pre-phi3327
  %2425 = getelementptr inbounds i16, i16* %blur_x, i64 %2424
  %2426 = bitcast i16* %2425 to <16 x i16>*
  %2427 = load <16 x i16>, <16 x i16>* %2426, align 2, !tbaa !399
  %2428 = getelementptr inbounds i16, i16* %2425, i64 16
  %2429 = bitcast i16* %2428 to <16 x i16>*
  %2430 = load <16 x i16>, <16 x i16>* %2429, align 2, !tbaa !399
  %2431 = add nsw i64 %2272, %.pre-phi3327
  %2432 = getelementptr inbounds i16, i16* %blur_x, i64 %2431
  %2433 = bitcast i16* %2432 to <16 x i16>*
  %2434 = load <16 x i16>, <16 x i16>* %2433, align 2, !tbaa !399
  %2435 = getelementptr inbounds i16, i16* %2432, i64 16
  %2436 = bitcast i16* %2435 to <16 x i16>*
  %2437 = load <16 x i16>, <16 x i16>* %2436, align 2, !tbaa !399
  %2438 = add <16 x i16> %2427, %2420
  %2439 = add <16 x i16> %2438, %2434
  %2440 = add <16 x i16> %2430, %2423
  %2441 = add <16 x i16> %2440, %2437
  %2442 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2439, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2443 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2441, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2444 = shufflevector <16 x i16> %2442, <16 x i16> %2443, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2445 = lshr <32 x i16> %2444, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2446 = shufflevector <32 x i16> %2445, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2447 = add nsw i64 %2276, %.pre-phi3327
  %2448 = getelementptr inbounds i16, i16* %65, i64 %2447
  %2449 = bitcast i16* %2448 to <16 x i16>*
  store <16 x i16> %2446, <16 x i16>* %2449, align 2, !tbaa !401
  %2450 = shufflevector <32 x i16> %2445, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2451 = getelementptr inbounds i16, i16* %2448, i64 16
  %2452 = bitcast i16* %2451 to <16 x i16>*
  store <16 x i16> %2450, <16 x i16>* %2452, align 2, !tbaa !401
  %indvars.iv.next3138 = add nuw nsw i64 %indvars.iv3137, 1
  %.not2641 = icmp eq i64 %indvars.iv.next3138, %180
  br i1 %.not2641, label %"end for blur_y.s0.x.x.rebased103", label %"for blur_y.s0.x.x.rebased102"

"for blur_y.s0.x.x.rebased110":                   ; preds = %"for blur_y.s0.x.x.rebased110.preheader", %"consume blur_x118"
  %blur_y.s0.x.x.rebased112 = phi i32 [ %2531, %"consume blur_x118" ], [ 0, %"for blur_y.s0.x.x.rebased110.preheader" ]
  %2453 = add nsw i32 %blur_y.s0.x.x.rebased112, %t1582
  %a105 = shl nsw i32 %2453, 5
  %2454 = icmp sgt i32 %a14, %a105
  %b111 = select i1 %2454, i32 %a105, i32 %a14
  %2455 = icmp slt i32 %2453, 1
  %2456 = icmp sgt i32 %4, %a105
  %2457 = or i1 %2455, %2456
  br i1 %2457, label %"produce blur_x116", label %"consume blur_x118"

"end for blur_y.s0.x.x.rebased111":               ; preds = %"consume blur_x118", %"end for blur_y.s0.x.x.rebased103"
  br i1 %34, label %"produce blur_x122", label %after_bb119

"produce blur_x116":                              ; preds = %"for blur_y.s0.x.x.rebased110"
  %2458 = icmp slt i32 %b111, %4
  %blur_x.s0.x.v1.base.s117 = select i1 %2458, i32 %b111, i32 %4
  %t709 = add nsw i32 %blur_x.s0.x.v1.base.s117, %t1681
  %2459 = sext i32 %t709 to i64
  %2460 = getelementptr inbounds i16, i16* %read_input, i64 %2459
  %2461 = getelementptr inbounds i16, i16* %2460, i64 1
  %2462 = bitcast i16* %2461 to <16 x i16>*
  %2463 = load <16 x i16>, <16 x i16>* %2462, align 2, !tbaa !396
  %2464 = getelementptr inbounds i16, i16* %2460, i64 17
  %2465 = bitcast i16* %2464 to <16 x i16>*
  %2466 = load <16 x i16>, <16 x i16>* %2465, align 2, !tbaa !396
  %2467 = getelementptr inbounds i16, i16* %2460, i64 2
  %2468 = bitcast i16* %2467 to <16 x i16>*
  %2469 = load <16 x i16>, <16 x i16>* %2468, align 2, !tbaa !396
  %2470 = getelementptr inbounds i16, i16* %2460, i64 18
  %2471 = bitcast i16* %2470 to <16 x i16>*
  %2472 = load <16 x i16>, <16 x i16>* %2471, align 2, !tbaa !396
  %2473 = bitcast i16* %2460 to <16 x i16>*
  %2474 = load <16 x i16>, <16 x i16>* %2473, align 2, !tbaa !396
  %2475 = getelementptr inbounds i16, i16* %2460, i64 16
  %2476 = bitcast i16* %2475 to <16 x i16>*
  %2477 = load <16 x i16>, <16 x i16>* %2476, align 2, !tbaa !396
  %2478 = add <16 x i16> %2469, %2463
  %2479 = add <16 x i16> %2478, %2474
  %2480 = add <16 x i16> %2472, %2466
  %2481 = add <16 x i16> %2480, %2477
  %2482 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2479, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2483 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2481, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2484 = shufflevector <16 x i16> %2482, <16 x i16> %2483, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2485 = lshr <32 x i16> %2484, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2486 = shufflevector <32 x i16> %2485, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2487 = sext i32 %blur_x.s0.x.v1.base.s117 to i64
  %2488 = add nsw i64 %2487, %2368
  %2489 = getelementptr inbounds i16, i16* %blur_x, i64 %2488
  %2490 = bitcast i16* %2489 to <16 x i16>*
  store <16 x i16> %2486, <16 x i16>* %2490, align 2, !tbaa !399
  %2491 = shufflevector <32 x i16> %2485, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2492 = getelementptr inbounds i16, i16* %2489, i64 16
  %2493 = bitcast i16* %2492 to <16 x i16>*
  store <16 x i16> %2491, <16 x i16>* %2493, align 2, !tbaa !399
  br label %"consume blur_x118"

"consume blur_x118":                              ; preds = %"for blur_y.s0.x.x.rebased110", %"produce blur_x116"
  %2494 = sext i32 %b111 to i64
  %2495 = add nsw i64 %2371, %2494
  %2496 = getelementptr inbounds i16, i16* %blur_x, i64 %2495
  %2497 = bitcast i16* %2496 to <16 x i16>*
  %2498 = load <16 x i16>, <16 x i16>* %2497, align 2, !tbaa !399
  %2499 = getelementptr inbounds i16, i16* %2496, i64 16
  %2500 = bitcast i16* %2499 to <16 x i16>*
  %2501 = load <16 x i16>, <16 x i16>* %2500, align 2, !tbaa !399
  %2502 = add nsw i64 %2374, %2494
  %2503 = getelementptr inbounds i16, i16* %blur_x, i64 %2502
  %2504 = bitcast i16* %2503 to <16 x i16>*
  %2505 = load <16 x i16>, <16 x i16>* %2504, align 2, !tbaa !399
  %2506 = getelementptr inbounds i16, i16* %2503, i64 16
  %2507 = bitcast i16* %2506 to <16 x i16>*
  %2508 = load <16 x i16>, <16 x i16>* %2507, align 2, !tbaa !399
  %2509 = add nsw i64 %2377, %2494
  %2510 = getelementptr inbounds i16, i16* %blur_x, i64 %2509
  %2511 = bitcast i16* %2510 to <16 x i16>*
  %2512 = load <16 x i16>, <16 x i16>* %2511, align 2, !tbaa !399
  %2513 = getelementptr inbounds i16, i16* %2510, i64 16
  %2514 = bitcast i16* %2513 to <16 x i16>*
  %2515 = load <16 x i16>, <16 x i16>* %2514, align 2, !tbaa !399
  %2516 = add <16 x i16> %2505, %2498
  %2517 = add <16 x i16> %2516, %2512
  %2518 = add <16 x i16> %2508, %2501
  %2519 = add <16 x i16> %2518, %2515
  %2520 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2517, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2521 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2519, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2522 = shufflevector <16 x i16> %2520, <16 x i16> %2521, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2523 = lshr <32 x i16> %2522, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2524 = shufflevector <32 x i16> %2523, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2525 = add nsw i64 %2381, %2494
  %2526 = getelementptr inbounds i16, i16* %65, i64 %2525
  %2527 = bitcast i16* %2526 to <16 x i16>*
  store <16 x i16> %2524, <16 x i16>* %2527, align 2, !tbaa !401
  %2528 = shufflevector <32 x i16> %2523, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2529 = getelementptr inbounds i16, i16* %2526, i64 16
  %2530 = bitcast i16* %2529 to <16 x i16>*
  store <16 x i16> %2528, <16 x i16>* %2530, align 2, !tbaa !401
  %2531 = add nuw nsw i32 %blur_y.s0.x.x.rebased112, 1
  %.not2640 = icmp eq i32 %2531, %t1639
  br i1 %.not2640, label %"end for blur_y.s0.x.x.rebased111", label %"for blur_y.s0.x.x.rebased110"

after_bb119:                                      ; preds = %"end for blur_y.s0.x.x.rebased111", %"produce blur_x122"
  br i1 %99, label %"for blur_y.s0.x.x.rebased124.preheader", label %"end for blur_y.s0.x.x.rebased125", !prof !386

"for blur_y.s0.x.x.rebased124.preheader":         ; preds = %after_bb119
  %2532 = sext i32 %t1644 to i64
  %2533 = zext i32 %.pre-phi to i64
  %2534 = mul nsw i64 %2533, %108
  %2535 = sub nsw i64 %2534, %95
  %2536 = zext i32 %.pre-phi3313 to i64
  %2537 = mul nsw i64 %2536, %108
  %2538 = sub nsw i64 %2537, %95
  %2539 = zext i32 %.pre-phi3323 to i64
  %2540 = mul nsw i64 %2539, %108
  %2541 = sub nsw i64 %2540, %95
  %2542 = sext i32 %a26 to i64
  %2543 = add nsw i64 %2542, 3
  %2544 = mul nsw i64 %2543, %109
  %2545 = add nsw i64 %2544, %112
  br label %"for blur_y.s0.x.x.rebased124"

"produce blur_x122":                              ; preds = %"end for blur_y.s0.x.x.rebased111"
  %2546 = getelementptr inbounds i16, i16* %read_input, i64 %117
  %2547 = getelementptr inbounds i16, i16* %2546, i64 -31
  %2548 = bitcast i16* %2547 to <16 x i16>*
  %2549 = load <16 x i16>, <16 x i16>* %2548, align 2, !tbaa !396
  %2550 = getelementptr inbounds i16, i16* %2546, i64 -15
  %2551 = bitcast i16* %2550 to <16 x i16>*
  %2552 = load <16 x i16>, <16 x i16>* %2551, align 2, !tbaa !396
  %2553 = getelementptr inbounds i16, i16* %2546, i64 -30
  %2554 = bitcast i16* %2553 to <16 x i16>*
  %2555 = load <16 x i16>, <16 x i16>* %2554, align 2, !tbaa !396
  %2556 = getelementptr inbounds i16, i16* %2546, i64 -14
  %2557 = bitcast i16* %2556 to <16 x i16>*
  %2558 = load <16 x i16>, <16 x i16>* %2557, align 2, !tbaa !396
  %2559 = getelementptr inbounds i16, i16* %2546, i64 -32
  %2560 = bitcast i16* %2559 to <16 x i16>*
  %2561 = load <16 x i16>, <16 x i16>* %2560, align 2, !tbaa !396
  %2562 = getelementptr inbounds i16, i16* %2546, i64 -16
  %2563 = bitcast i16* %2562 to <16 x i16>*
  %2564 = load <16 x i16>, <16 x i16>* %2563, align 2, !tbaa !396
  %2565 = add <16 x i16> %2555, %2549
  %2566 = add <16 x i16> %2565, %2561
  %2567 = add <16 x i16> %2558, %2552
  %2568 = add <16 x i16> %2567, %2564
  %2569 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2566, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2570 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2568, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2571 = shufflevector <16 x i16> %2569, <16 x i16> %2570, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2572 = lshr <32 x i16> %2571, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2573 = shufflevector <32 x i16> %2572, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2574 = zext i32 %.pre-phi3313 to i64
  %2575 = mul nsw i64 %96, %2574
  %2576 = add nsw i64 %98, %2575
  %2577 = getelementptr inbounds i16, i16* %blur_x, i64 %2576
  %2578 = getelementptr inbounds i16, i16* %2577, i64 -32
  %2579 = bitcast i16* %2578 to <16 x i16>*
  store <16 x i16> %2573, <16 x i16>* %2579, align 2, !tbaa !399
  %2580 = shufflevector <32 x i16> %2572, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2581 = getelementptr inbounds i16, i16* %2577, i64 -16
  %2582 = bitcast i16* %2581 to <16 x i16>*
  store <16 x i16> %2580, <16 x i16>* %2582, align 2, !tbaa !399
  %2583 = zext i32 %.pre-phi to i64
  %2584 = mul nsw i64 %2583, %108
  %2585 = add nsw i64 %2584, %93
  %2586 = getelementptr inbounds i16, i16* %blur_x, i64 %2585
  %2587 = getelementptr inbounds i16, i16* %2586, i64 -32
  %2588 = bitcast i16* %2587 to <16 x i16>*
  %2589 = load <16 x i16>, <16 x i16>* %2588, align 2, !tbaa !399
  %2590 = getelementptr inbounds i16, i16* %2586, i64 -16
  %2591 = bitcast i16* %2590 to <16 x i16>*
  %2592 = load <16 x i16>, <16 x i16>* %2591, align 2, !tbaa !399
  %2593 = mul nsw i64 %2574, %108
  %2594 = add nsw i64 %2593, %93
  %2595 = getelementptr inbounds i16, i16* %blur_x, i64 %2594
  %2596 = getelementptr inbounds i16, i16* %2595, i64 -32
  %2597 = bitcast i16* %2596 to <16 x i16>*
  %2598 = load <16 x i16>, <16 x i16>* %2597, align 2, !tbaa !399
  %2599 = getelementptr inbounds i16, i16* %2595, i64 -16
  %2600 = bitcast i16* %2599 to <16 x i16>*
  %2601 = load <16 x i16>, <16 x i16>* %2600, align 2, !tbaa !399
  %2602 = zext i32 %.pre-phi3323 to i64
  %2603 = mul nsw i64 %2602, %108
  %2604 = add nsw i64 %2603, %93
  %2605 = getelementptr inbounds i16, i16* %blur_x, i64 %2604
  %2606 = getelementptr inbounds i16, i16* %2605, i64 -32
  %2607 = bitcast i16* %2606 to <16 x i16>*
  %2608 = load <16 x i16>, <16 x i16>* %2607, align 2, !tbaa !399
  %2609 = getelementptr inbounds i16, i16* %2605, i64 -16
  %2610 = bitcast i16* %2609 to <16 x i16>*
  %2611 = load <16 x i16>, <16 x i16>* %2610, align 2, !tbaa !399
  %2612 = add <16 x i16> %2598, %2589
  %2613 = add <16 x i16> %2612, %2608
  %2614 = add <16 x i16> %2601, %2592
  %2615 = add <16 x i16> %2614, %2611
  %2616 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2613, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2617 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2615, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2618 = shufflevector <16 x i16> %2616, <16 x i16> %2617, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2619 = lshr <32 x i16> %2618, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2620 = shufflevector <32 x i16> %2619, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2621 = sext i32 %a26 to i64
  %2622 = add nsw i64 %2621, 3
  %2623 = mul nsw i64 %2622, %109
  %2624 = add nsw i64 %111, %2623
  %2625 = getelementptr inbounds i16, i16* %65, i64 %2624
  %2626 = getelementptr inbounds i16, i16* %2625, i64 -32
  %2627 = bitcast i16* %2626 to <16 x i16>*
  store <16 x i16> %2620, <16 x i16>* %2627, align 2, !tbaa !401
  %2628 = shufflevector <32 x i16> %2619, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2629 = getelementptr inbounds i16, i16* %2625, i64 -16
  %2630 = bitcast i16* %2629 to <16 x i16>*
  store <16 x i16> %2628, <16 x i16>* %2630, align 2, !tbaa !401
  br label %after_bb119

"for blur_y.s0.x.x.rebased124":                   ; preds = %"for blur_y.s0.x.x.rebased124.preheader", %"consume blur_x131"
  %indvars.iv3140 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased124.preheader" ], [ %indvars.iv.next3141, %"consume blur_x131" ]
  %2631 = add nsw i64 %indvars.iv3140, %100
  %2632 = icmp slt i64 %2631, 1
  %2633 = trunc i64 %2631 to i32
  %2634 = shl nsw i32 %2633, 5
  %2635 = icmp sgt i32 %4, %2634
  %2636 = or i1 %2632, %2635
  br i1 %2636, label %"produce blur_x130", label %"for blur_y.s0.x.x.rebased124.consume blur_x131_crit_edge"

"for blur_y.s0.x.x.rebased124.consume blur_x131_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased124"
  %.pre3328 = shl nsw i64 %2631, 5
  br label %"consume blur_x131"

"end for blur_y.s0.x.x.rebased125":               ; preds = %"consume blur_x131", %after_bb119
  br i1 %101, label %"for blur_y.s0.x.x.rebased132.preheader", label %"end for blur_y.s0.x.x.rebased133", !prof !386

"for blur_y.s0.x.x.rebased132.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased125"
  %2637 = sext i32 %t1644 to i64
  %2638 = zext i32 %.pre-phi to i64
  %2639 = mul nsw i64 %2638, %108
  %2640 = sub nsw i64 %2639, %95
  %2641 = zext i32 %.pre-phi3313 to i64
  %2642 = mul nsw i64 %2641, %108
  %2643 = sub nsw i64 %2642, %95
  %2644 = zext i32 %.pre-phi3323 to i64
  %2645 = mul nsw i64 %2644, %108
  %2646 = sub nsw i64 %2645, %95
  %2647 = sext i32 %a26 to i64
  %2648 = add nsw i64 %2647, 3
  %2649 = mul nsw i64 %2648, %109
  %2650 = add nsw i64 %2649, %112
  br label %"for blur_y.s0.x.x.rebased132"

"produce blur_x130":                              ; preds = %"for blur_y.s0.x.x.rebased124"
  %t720 = add nsw i32 %2634, %t1697
  %2651 = sext i32 %t720 to i64
  %2652 = getelementptr inbounds i16, i16* %read_input, i64 %2651
  %2653 = getelementptr inbounds i16, i16* %2652, i64 1
  %2654 = bitcast i16* %2653 to <16 x i16>*
  %2655 = load <16 x i16>, <16 x i16>* %2654, align 2, !tbaa !396
  %2656 = getelementptr inbounds i16, i16* %2652, i64 17
  %2657 = bitcast i16* %2656 to <16 x i16>*
  %2658 = load <16 x i16>, <16 x i16>* %2657, align 2, !tbaa !396
  %2659 = getelementptr inbounds i16, i16* %2652, i64 2
  %2660 = bitcast i16* %2659 to <16 x i16>*
  %2661 = load <16 x i16>, <16 x i16>* %2660, align 2, !tbaa !396
  %2662 = getelementptr inbounds i16, i16* %2652, i64 18
  %2663 = bitcast i16* %2662 to <16 x i16>*
  %2664 = load <16 x i16>, <16 x i16>* %2663, align 2, !tbaa !396
  %2665 = bitcast i16* %2652 to <16 x i16>*
  %2666 = load <16 x i16>, <16 x i16>* %2665, align 2, !tbaa !396
  %2667 = getelementptr inbounds i16, i16* %2652, i64 16
  %2668 = bitcast i16* %2667 to <16 x i16>*
  %2669 = load <16 x i16>, <16 x i16>* %2668, align 2, !tbaa !396
  %2670 = add <16 x i16> %2661, %2655
  %2671 = add <16 x i16> %2670, %2666
  %2672 = add <16 x i16> %2664, %2658
  %2673 = add <16 x i16> %2672, %2669
  %2674 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2671, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2675 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2673, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2676 = shufflevector <16 x i16> %2674, <16 x i16> %2675, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2677 = lshr <32 x i16> %2676, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2678 = shufflevector <32 x i16> %2677, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2679 = shl nsw i64 %2631, 5
  %2680 = add nsw i64 %2679, %2532
  %2681 = getelementptr inbounds i16, i16* %blur_x, i64 %2680
  %2682 = bitcast i16* %2681 to <16 x i16>*
  store <16 x i16> %2678, <16 x i16>* %2682, align 2, !tbaa !399
  %2683 = shufflevector <32 x i16> %2677, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2684 = getelementptr inbounds i16, i16* %2681, i64 16
  %2685 = bitcast i16* %2684 to <16 x i16>*
  store <16 x i16> %2683, <16 x i16>* %2685, align 2, !tbaa !399
  br label %"consume blur_x131"

"consume blur_x131":                              ; preds = %"for blur_y.s0.x.x.rebased124.consume blur_x131_crit_edge", %"produce blur_x130"
  %.pre-phi3329 = phi i64 [ %.pre3328, %"for blur_y.s0.x.x.rebased124.consume blur_x131_crit_edge" ], [ %2679, %"produce blur_x130" ]
  %2686 = add nsw i64 %2535, %.pre-phi3329
  %2687 = getelementptr inbounds i16, i16* %blur_x, i64 %2686
  %2688 = bitcast i16* %2687 to <16 x i16>*
  %2689 = load <16 x i16>, <16 x i16>* %2688, align 2, !tbaa !399
  %2690 = getelementptr inbounds i16, i16* %2687, i64 16
  %2691 = bitcast i16* %2690 to <16 x i16>*
  %2692 = load <16 x i16>, <16 x i16>* %2691, align 2, !tbaa !399
  %2693 = add nsw i64 %2538, %.pre-phi3329
  %2694 = getelementptr inbounds i16, i16* %blur_x, i64 %2693
  %2695 = bitcast i16* %2694 to <16 x i16>*
  %2696 = load <16 x i16>, <16 x i16>* %2695, align 2, !tbaa !399
  %2697 = getelementptr inbounds i16, i16* %2694, i64 16
  %2698 = bitcast i16* %2697 to <16 x i16>*
  %2699 = load <16 x i16>, <16 x i16>* %2698, align 2, !tbaa !399
  %2700 = add nsw i64 %2541, %.pre-phi3329
  %2701 = getelementptr inbounds i16, i16* %blur_x, i64 %2700
  %2702 = bitcast i16* %2701 to <16 x i16>*
  %2703 = load <16 x i16>, <16 x i16>* %2702, align 2, !tbaa !399
  %2704 = getelementptr inbounds i16, i16* %2701, i64 16
  %2705 = bitcast i16* %2704 to <16 x i16>*
  %2706 = load <16 x i16>, <16 x i16>* %2705, align 2, !tbaa !399
  %2707 = add <16 x i16> %2696, %2689
  %2708 = add <16 x i16> %2707, %2703
  %2709 = add <16 x i16> %2699, %2692
  %2710 = add <16 x i16> %2709, %2706
  %2711 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2708, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2712 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2710, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2713 = shufflevector <16 x i16> %2711, <16 x i16> %2712, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2714 = lshr <32 x i16> %2713, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2715 = shufflevector <32 x i16> %2714, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2716 = add nsw i64 %2545, %.pre-phi3329
  %2717 = getelementptr inbounds i16, i16* %65, i64 %2716
  %2718 = bitcast i16* %2717 to <16 x i16>*
  store <16 x i16> %2715, <16 x i16>* %2718, align 2, !tbaa !401
  %2719 = shufflevector <32 x i16> %2714, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2720 = getelementptr inbounds i16, i16* %2717, i64 16
  %2721 = bitcast i16* %2720 to <16 x i16>*
  store <16 x i16> %2719, <16 x i16>* %2721, align 2, !tbaa !401
  %indvars.iv.next3141 = add nuw nsw i64 %indvars.iv3140, 1
  %.not2639 = icmp eq i64 %indvars.iv.next3141, %180
  br i1 %.not2639, label %"end for blur_y.s0.x.x.rebased125", label %"for blur_y.s0.x.x.rebased124"

"for blur_y.s0.x.x.rebased132":                   ; preds = %"for blur_y.s0.x.x.rebased132.preheader", %"consume blur_x140"
  %blur_y.s0.x.x.rebased134 = phi i32 [ %2800, %"consume blur_x140" ], [ 0, %"for blur_y.s0.x.x.rebased132.preheader" ]
  %2722 = add nsw i32 %blur_y.s0.x.x.rebased134, %t1582
  %a112 = shl nsw i32 %2722, 5
  %2723 = icmp sgt i32 %a14, %a112
  %b118 = select i1 %2723, i32 %a112, i32 %a14
  %2724 = icmp slt i32 %2722, 1
  %2725 = icmp sgt i32 %4, %a112
  %2726 = or i1 %2724, %2725
  br i1 %2726, label %"produce blur_x138", label %"consume blur_x140"

"end for blur_y.s0.x.x.rebased133":               ; preds = %"consume blur_x140", %"end for blur_y.s0.x.x.rebased125"
  br i1 %34, label %"produce blur_x144", label %after_bb141

"produce blur_x138":                              ; preds = %"for blur_y.s0.x.x.rebased132"
  %2727 = icmp slt i32 %b118, %4
  %blur_x.s0.x.v1.base.s139 = select i1 %2727, i32 %b118, i32 %4
  %t725 = add nsw i32 %blur_x.s0.x.v1.base.s139, %t1697
  %2728 = sext i32 %t725 to i64
  %2729 = getelementptr inbounds i16, i16* %read_input, i64 %2728
  %2730 = getelementptr inbounds i16, i16* %2729, i64 1
  %2731 = bitcast i16* %2730 to <16 x i16>*
  %2732 = load <16 x i16>, <16 x i16>* %2731, align 2, !tbaa !396
  %2733 = getelementptr inbounds i16, i16* %2729, i64 17
  %2734 = bitcast i16* %2733 to <16 x i16>*
  %2735 = load <16 x i16>, <16 x i16>* %2734, align 2, !tbaa !396
  %2736 = getelementptr inbounds i16, i16* %2729, i64 2
  %2737 = bitcast i16* %2736 to <16 x i16>*
  %2738 = load <16 x i16>, <16 x i16>* %2737, align 2, !tbaa !396
  %2739 = getelementptr inbounds i16, i16* %2729, i64 18
  %2740 = bitcast i16* %2739 to <16 x i16>*
  %2741 = load <16 x i16>, <16 x i16>* %2740, align 2, !tbaa !396
  %2742 = bitcast i16* %2729 to <16 x i16>*
  %2743 = load <16 x i16>, <16 x i16>* %2742, align 2, !tbaa !396
  %2744 = getelementptr inbounds i16, i16* %2729, i64 16
  %2745 = bitcast i16* %2744 to <16 x i16>*
  %2746 = load <16 x i16>, <16 x i16>* %2745, align 2, !tbaa !396
  %2747 = add <16 x i16> %2738, %2732
  %2748 = add <16 x i16> %2747, %2743
  %2749 = add <16 x i16> %2741, %2735
  %2750 = add <16 x i16> %2749, %2746
  %2751 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2748, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2752 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2750, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2753 = shufflevector <16 x i16> %2751, <16 x i16> %2752, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2754 = lshr <32 x i16> %2753, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2755 = shufflevector <32 x i16> %2754, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2756 = sext i32 %blur_x.s0.x.v1.base.s139 to i64
  %2757 = add nsw i64 %2756, %2637
  %2758 = getelementptr inbounds i16, i16* %blur_x, i64 %2757
  %2759 = bitcast i16* %2758 to <16 x i16>*
  store <16 x i16> %2755, <16 x i16>* %2759, align 2, !tbaa !399
  %2760 = shufflevector <32 x i16> %2754, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2761 = getelementptr inbounds i16, i16* %2758, i64 16
  %2762 = bitcast i16* %2761 to <16 x i16>*
  store <16 x i16> %2760, <16 x i16>* %2762, align 2, !tbaa !399
  br label %"consume blur_x140"

"consume blur_x140":                              ; preds = %"for blur_y.s0.x.x.rebased132", %"produce blur_x138"
  %2763 = sext i32 %b118 to i64
  %2764 = add nsw i64 %2640, %2763
  %2765 = getelementptr inbounds i16, i16* %blur_x, i64 %2764
  %2766 = bitcast i16* %2765 to <16 x i16>*
  %2767 = load <16 x i16>, <16 x i16>* %2766, align 2, !tbaa !399
  %2768 = getelementptr inbounds i16, i16* %2765, i64 16
  %2769 = bitcast i16* %2768 to <16 x i16>*
  %2770 = load <16 x i16>, <16 x i16>* %2769, align 2, !tbaa !399
  %2771 = add nsw i64 %2643, %2763
  %2772 = getelementptr inbounds i16, i16* %blur_x, i64 %2771
  %2773 = bitcast i16* %2772 to <16 x i16>*
  %2774 = load <16 x i16>, <16 x i16>* %2773, align 2, !tbaa !399
  %2775 = getelementptr inbounds i16, i16* %2772, i64 16
  %2776 = bitcast i16* %2775 to <16 x i16>*
  %2777 = load <16 x i16>, <16 x i16>* %2776, align 2, !tbaa !399
  %2778 = add nsw i64 %2646, %2763
  %2779 = getelementptr inbounds i16, i16* %blur_x, i64 %2778
  %2780 = bitcast i16* %2779 to <16 x i16>*
  %2781 = load <16 x i16>, <16 x i16>* %2780, align 2, !tbaa !399
  %2782 = getelementptr inbounds i16, i16* %2779, i64 16
  %2783 = bitcast i16* %2782 to <16 x i16>*
  %2784 = load <16 x i16>, <16 x i16>* %2783, align 2, !tbaa !399
  %2785 = add <16 x i16> %2774, %2767
  %2786 = add <16 x i16> %2785, %2781
  %2787 = add <16 x i16> %2777, %2770
  %2788 = add <16 x i16> %2787, %2784
  %2789 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2786, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2790 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2788, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2791 = shufflevector <16 x i16> %2789, <16 x i16> %2790, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2792 = lshr <32 x i16> %2791, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2793 = shufflevector <32 x i16> %2792, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2794 = add nsw i64 %2650, %2763
  %2795 = getelementptr inbounds i16, i16* %65, i64 %2794
  %2796 = bitcast i16* %2795 to <16 x i16>*
  store <16 x i16> %2793, <16 x i16>* %2796, align 2, !tbaa !401
  %2797 = shufflevector <32 x i16> %2792, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2798 = getelementptr inbounds i16, i16* %2795, i64 16
  %2799 = bitcast i16* %2798 to <16 x i16>*
  store <16 x i16> %2797, <16 x i16>* %2799, align 2, !tbaa !401
  %2800 = add nuw nsw i32 %blur_y.s0.x.x.rebased134, 1
  %.not2638 = icmp eq i32 %2800, %t1639
  br i1 %.not2638, label %"end for blur_y.s0.x.x.rebased133", label %"for blur_y.s0.x.x.rebased132"

after_bb141:                                      ; preds = %"end for blur_y.s0.x.x.rebased133", %"produce blur_x144"
  br i1 %99, label %"for blur_y.s0.x.x.rebased146.preheader", label %"end for blur_y.s0.x.x.rebased147", !prof !386

"for blur_y.s0.x.x.rebased146.preheader":         ; preds = %after_bb141
  %2801 = sext i32 %t1650 to i64
  %2802 = zext i32 %.pre-phi3313 to i64
  %2803 = mul nsw i64 %2802, %108
  %2804 = sub nsw i64 %2803, %95
  %2805 = zext i32 %.pre-phi3317 to i64
  %2806 = mul nsw i64 %2805, %108
  %2807 = sub nsw i64 %2806, %95
  %2808 = zext i32 %.pre-phi to i64
  %2809 = mul nsw i64 %2808, %108
  %2810 = sub nsw i64 %2809, %95
  %2811 = sext i32 %a26 to i64
  %2812 = add nsw i64 %2811, 4
  %2813 = mul nsw i64 %2812, %109
  %2814 = add nsw i64 %2813, %112
  br label %"for blur_y.s0.x.x.rebased146"

"produce blur_x144":                              ; preds = %"end for blur_y.s0.x.x.rebased133"
  %2815 = getelementptr inbounds i16, i16* %read_input, i64 %119
  %2816 = getelementptr inbounds i16, i16* %2815, i64 -31
  %2817 = bitcast i16* %2816 to <16 x i16>*
  %2818 = load <16 x i16>, <16 x i16>* %2817, align 2, !tbaa !396
  %2819 = getelementptr inbounds i16, i16* %2815, i64 -15
  %2820 = bitcast i16* %2819 to <16 x i16>*
  %2821 = load <16 x i16>, <16 x i16>* %2820, align 2, !tbaa !396
  %2822 = getelementptr inbounds i16, i16* %2815, i64 -30
  %2823 = bitcast i16* %2822 to <16 x i16>*
  %2824 = load <16 x i16>, <16 x i16>* %2823, align 2, !tbaa !396
  %2825 = getelementptr inbounds i16, i16* %2815, i64 -14
  %2826 = bitcast i16* %2825 to <16 x i16>*
  %2827 = load <16 x i16>, <16 x i16>* %2826, align 2, !tbaa !396
  %2828 = getelementptr inbounds i16, i16* %2815, i64 -32
  %2829 = bitcast i16* %2828 to <16 x i16>*
  %2830 = load <16 x i16>, <16 x i16>* %2829, align 2, !tbaa !396
  %2831 = getelementptr inbounds i16, i16* %2815, i64 -16
  %2832 = bitcast i16* %2831 to <16 x i16>*
  %2833 = load <16 x i16>, <16 x i16>* %2832, align 2, !tbaa !396
  %2834 = add <16 x i16> %2824, %2818
  %2835 = add <16 x i16> %2834, %2830
  %2836 = add <16 x i16> %2827, %2821
  %2837 = add <16 x i16> %2836, %2833
  %2838 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2835, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2839 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2837, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2840 = shufflevector <16 x i16> %2838, <16 x i16> %2839, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2841 = lshr <32 x i16> %2840, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2842 = shufflevector <32 x i16> %2841, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2843 = zext i32 %.pre-phi3317 to i64
  %2844 = mul nsw i64 %96, %2843
  %2845 = add nsw i64 %98, %2844
  %2846 = getelementptr inbounds i16, i16* %blur_x, i64 %2845
  %2847 = getelementptr inbounds i16, i16* %2846, i64 -32
  %2848 = bitcast i16* %2847 to <16 x i16>*
  store <16 x i16> %2842, <16 x i16>* %2848, align 2, !tbaa !399
  %2849 = shufflevector <32 x i16> %2841, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2850 = getelementptr inbounds i16, i16* %2846, i64 -16
  %2851 = bitcast i16* %2850 to <16 x i16>*
  store <16 x i16> %2849, <16 x i16>* %2851, align 2, !tbaa !399
  %2852 = zext i32 %.pre-phi3313 to i64
  %2853 = mul nsw i64 %2852, %108
  %2854 = add nsw i64 %2853, %93
  %2855 = getelementptr inbounds i16, i16* %blur_x, i64 %2854
  %2856 = getelementptr inbounds i16, i16* %2855, i64 -32
  %2857 = bitcast i16* %2856 to <16 x i16>*
  %2858 = load <16 x i16>, <16 x i16>* %2857, align 2, !tbaa !399
  %2859 = getelementptr inbounds i16, i16* %2855, i64 -16
  %2860 = bitcast i16* %2859 to <16 x i16>*
  %2861 = load <16 x i16>, <16 x i16>* %2860, align 2, !tbaa !399
  %2862 = mul nsw i64 %2843, %108
  %2863 = add nsw i64 %2862, %93
  %2864 = getelementptr inbounds i16, i16* %blur_x, i64 %2863
  %2865 = getelementptr inbounds i16, i16* %2864, i64 -32
  %2866 = bitcast i16* %2865 to <16 x i16>*
  %2867 = load <16 x i16>, <16 x i16>* %2866, align 2, !tbaa !399
  %2868 = getelementptr inbounds i16, i16* %2864, i64 -16
  %2869 = bitcast i16* %2868 to <16 x i16>*
  %2870 = load <16 x i16>, <16 x i16>* %2869, align 2, !tbaa !399
  %2871 = zext i32 %.pre-phi to i64
  %2872 = mul nsw i64 %2871, %108
  %2873 = add nsw i64 %2872, %93
  %2874 = getelementptr inbounds i16, i16* %blur_x, i64 %2873
  %2875 = getelementptr inbounds i16, i16* %2874, i64 -32
  %2876 = bitcast i16* %2875 to <16 x i16>*
  %2877 = load <16 x i16>, <16 x i16>* %2876, align 2, !tbaa !399
  %2878 = getelementptr inbounds i16, i16* %2874, i64 -16
  %2879 = bitcast i16* %2878 to <16 x i16>*
  %2880 = load <16 x i16>, <16 x i16>* %2879, align 2, !tbaa !399
  %2881 = add <16 x i16> %2867, %2858
  %2882 = add <16 x i16> %2881, %2877
  %2883 = add <16 x i16> %2870, %2861
  %2884 = add <16 x i16> %2883, %2880
  %2885 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2882, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2886 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2884, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2887 = shufflevector <16 x i16> %2885, <16 x i16> %2886, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2888 = lshr <32 x i16> %2887, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2889 = shufflevector <32 x i16> %2888, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2890 = sext i32 %a26 to i64
  %2891 = add nsw i64 %2890, 4
  %2892 = mul nsw i64 %2891, %109
  %2893 = add nsw i64 %111, %2892
  %2894 = getelementptr inbounds i16, i16* %65, i64 %2893
  %2895 = getelementptr inbounds i16, i16* %2894, i64 -32
  %2896 = bitcast i16* %2895 to <16 x i16>*
  store <16 x i16> %2889, <16 x i16>* %2896, align 2, !tbaa !401
  %2897 = shufflevector <32 x i16> %2888, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2898 = getelementptr inbounds i16, i16* %2894, i64 -16
  %2899 = bitcast i16* %2898 to <16 x i16>*
  store <16 x i16> %2897, <16 x i16>* %2899, align 2, !tbaa !401
  br label %after_bb141

"for blur_y.s0.x.x.rebased146":                   ; preds = %"for blur_y.s0.x.x.rebased146.preheader", %"consume blur_x153"
  %indvars.iv3143 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased146.preheader" ], [ %indvars.iv.next3144, %"consume blur_x153" ]
  %2900 = add nsw i64 %indvars.iv3143, %100
  %2901 = icmp slt i64 %2900, 1
  %2902 = trunc i64 %2900 to i32
  %2903 = shl nsw i32 %2902, 5
  %2904 = icmp sgt i32 %4, %2903
  %2905 = or i1 %2901, %2904
  br i1 %2905, label %"produce blur_x152", label %"for blur_y.s0.x.x.rebased146.consume blur_x153_crit_edge"

"for blur_y.s0.x.x.rebased146.consume blur_x153_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased146"
  %.pre3330 = shl nsw i64 %2900, 5
  br label %"consume blur_x153"

"end for blur_y.s0.x.x.rebased147":               ; preds = %"consume blur_x153", %after_bb141
  br i1 %101, label %"for blur_y.s0.x.x.rebased154.preheader", label %"end for blur_y.s0.x.x.rebased155", !prof !386

"for blur_y.s0.x.x.rebased154.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased147"
  %2906 = sext i32 %t1650 to i64
  %2907 = zext i32 %.pre-phi3313 to i64
  %2908 = mul nsw i64 %2907, %108
  %2909 = sub nsw i64 %2908, %95
  %2910 = zext i32 %.pre-phi3317 to i64
  %2911 = mul nsw i64 %2910, %108
  %2912 = sub nsw i64 %2911, %95
  %2913 = zext i32 %.pre-phi to i64
  %2914 = mul nsw i64 %2913, %108
  %2915 = sub nsw i64 %2914, %95
  %2916 = sext i32 %a26 to i64
  %2917 = add nsw i64 %2916, 4
  %2918 = mul nsw i64 %2917, %109
  %2919 = add nsw i64 %2918, %112
  br label %"for blur_y.s0.x.x.rebased154"

"produce blur_x152":                              ; preds = %"for blur_y.s0.x.x.rebased146"
  %t736 = add nsw i32 %2903, %t1713
  %2920 = sext i32 %t736 to i64
  %2921 = getelementptr inbounds i16, i16* %read_input, i64 %2920
  %2922 = getelementptr inbounds i16, i16* %2921, i64 1
  %2923 = bitcast i16* %2922 to <16 x i16>*
  %2924 = load <16 x i16>, <16 x i16>* %2923, align 2, !tbaa !396
  %2925 = getelementptr inbounds i16, i16* %2921, i64 17
  %2926 = bitcast i16* %2925 to <16 x i16>*
  %2927 = load <16 x i16>, <16 x i16>* %2926, align 2, !tbaa !396
  %2928 = getelementptr inbounds i16, i16* %2921, i64 2
  %2929 = bitcast i16* %2928 to <16 x i16>*
  %2930 = load <16 x i16>, <16 x i16>* %2929, align 2, !tbaa !396
  %2931 = getelementptr inbounds i16, i16* %2921, i64 18
  %2932 = bitcast i16* %2931 to <16 x i16>*
  %2933 = load <16 x i16>, <16 x i16>* %2932, align 2, !tbaa !396
  %2934 = bitcast i16* %2921 to <16 x i16>*
  %2935 = load <16 x i16>, <16 x i16>* %2934, align 2, !tbaa !396
  %2936 = getelementptr inbounds i16, i16* %2921, i64 16
  %2937 = bitcast i16* %2936 to <16 x i16>*
  %2938 = load <16 x i16>, <16 x i16>* %2937, align 2, !tbaa !396
  %2939 = add <16 x i16> %2930, %2924
  %2940 = add <16 x i16> %2939, %2935
  %2941 = add <16 x i16> %2933, %2927
  %2942 = add <16 x i16> %2941, %2938
  %2943 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2940, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2944 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2942, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2945 = shufflevector <16 x i16> %2943, <16 x i16> %2944, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2946 = lshr <32 x i16> %2945, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2947 = shufflevector <32 x i16> %2946, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2948 = shl nsw i64 %2900, 5
  %2949 = add nsw i64 %2948, %2801
  %2950 = getelementptr inbounds i16, i16* %blur_x, i64 %2949
  %2951 = bitcast i16* %2950 to <16 x i16>*
  store <16 x i16> %2947, <16 x i16>* %2951, align 2, !tbaa !399
  %2952 = shufflevector <32 x i16> %2946, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2953 = getelementptr inbounds i16, i16* %2950, i64 16
  %2954 = bitcast i16* %2953 to <16 x i16>*
  store <16 x i16> %2952, <16 x i16>* %2954, align 2, !tbaa !399
  br label %"consume blur_x153"

"consume blur_x153":                              ; preds = %"for blur_y.s0.x.x.rebased146.consume blur_x153_crit_edge", %"produce blur_x152"
  %.pre-phi3331 = phi i64 [ %.pre3330, %"for blur_y.s0.x.x.rebased146.consume blur_x153_crit_edge" ], [ %2948, %"produce blur_x152" ]
  %2955 = add nsw i64 %2804, %.pre-phi3331
  %2956 = getelementptr inbounds i16, i16* %blur_x, i64 %2955
  %2957 = bitcast i16* %2956 to <16 x i16>*
  %2958 = load <16 x i16>, <16 x i16>* %2957, align 2, !tbaa !399
  %2959 = getelementptr inbounds i16, i16* %2956, i64 16
  %2960 = bitcast i16* %2959 to <16 x i16>*
  %2961 = load <16 x i16>, <16 x i16>* %2960, align 2, !tbaa !399
  %2962 = add nsw i64 %2807, %.pre-phi3331
  %2963 = getelementptr inbounds i16, i16* %blur_x, i64 %2962
  %2964 = bitcast i16* %2963 to <16 x i16>*
  %2965 = load <16 x i16>, <16 x i16>* %2964, align 2, !tbaa !399
  %2966 = getelementptr inbounds i16, i16* %2963, i64 16
  %2967 = bitcast i16* %2966 to <16 x i16>*
  %2968 = load <16 x i16>, <16 x i16>* %2967, align 2, !tbaa !399
  %2969 = add nsw i64 %2810, %.pre-phi3331
  %2970 = getelementptr inbounds i16, i16* %blur_x, i64 %2969
  %2971 = bitcast i16* %2970 to <16 x i16>*
  %2972 = load <16 x i16>, <16 x i16>* %2971, align 2, !tbaa !399
  %2973 = getelementptr inbounds i16, i16* %2970, i64 16
  %2974 = bitcast i16* %2973 to <16 x i16>*
  %2975 = load <16 x i16>, <16 x i16>* %2974, align 2, !tbaa !399
  %2976 = add <16 x i16> %2965, %2958
  %2977 = add <16 x i16> %2976, %2972
  %2978 = add <16 x i16> %2968, %2961
  %2979 = add <16 x i16> %2978, %2975
  %2980 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2977, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2981 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2979, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2982 = shufflevector <16 x i16> %2980, <16 x i16> %2981, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2983 = lshr <32 x i16> %2982, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2984 = shufflevector <32 x i16> %2983, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2985 = add nsw i64 %2814, %.pre-phi3331
  %2986 = getelementptr inbounds i16, i16* %65, i64 %2985
  %2987 = bitcast i16* %2986 to <16 x i16>*
  store <16 x i16> %2984, <16 x i16>* %2987, align 2, !tbaa !401
  %2988 = shufflevector <32 x i16> %2983, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2989 = getelementptr inbounds i16, i16* %2986, i64 16
  %2990 = bitcast i16* %2989 to <16 x i16>*
  store <16 x i16> %2988, <16 x i16>* %2990, align 2, !tbaa !401
  %indvars.iv.next3144 = add nuw nsw i64 %indvars.iv3143, 1
  %.not2637 = icmp eq i64 %indvars.iv.next3144, %180
  br i1 %.not2637, label %"end for blur_y.s0.x.x.rebased147", label %"for blur_y.s0.x.x.rebased146"

"for blur_y.s0.x.x.rebased154":                   ; preds = %"for blur_y.s0.x.x.rebased154.preheader", %"consume blur_x162"
  %blur_y.s0.x.x.rebased156 = phi i32 [ %3069, %"consume blur_x162" ], [ 0, %"for blur_y.s0.x.x.rebased154.preheader" ]
  %2991 = add nsw i32 %blur_y.s0.x.x.rebased156, %t1582
  %a119 = shl nsw i32 %2991, 5
  %2992 = icmp sgt i32 %a14, %a119
  %b125 = select i1 %2992, i32 %a119, i32 %a14
  %2993 = icmp slt i32 %2991, 1
  %2994 = icmp sgt i32 %4, %a119
  %2995 = or i1 %2993, %2994
  br i1 %2995, label %"produce blur_x160", label %"consume blur_x162"

"end for blur_y.s0.x.x.rebased155":               ; preds = %"consume blur_x162", %"end for blur_y.s0.x.x.rebased147"
  br i1 %34, label %"produce blur_x166", label %after_bb163

"produce blur_x160":                              ; preds = %"for blur_y.s0.x.x.rebased154"
  %2996 = icmp slt i32 %b125, %4
  %blur_x.s0.x.v1.base.s161 = select i1 %2996, i32 %b125, i32 %4
  %t741 = add nsw i32 %blur_x.s0.x.v1.base.s161, %t1713
  %2997 = sext i32 %t741 to i64
  %2998 = getelementptr inbounds i16, i16* %read_input, i64 %2997
  %2999 = getelementptr inbounds i16, i16* %2998, i64 1
  %3000 = bitcast i16* %2999 to <16 x i16>*
  %3001 = load <16 x i16>, <16 x i16>* %3000, align 2, !tbaa !396
  %3002 = getelementptr inbounds i16, i16* %2998, i64 17
  %3003 = bitcast i16* %3002 to <16 x i16>*
  %3004 = load <16 x i16>, <16 x i16>* %3003, align 2, !tbaa !396
  %3005 = getelementptr inbounds i16, i16* %2998, i64 2
  %3006 = bitcast i16* %3005 to <16 x i16>*
  %3007 = load <16 x i16>, <16 x i16>* %3006, align 2, !tbaa !396
  %3008 = getelementptr inbounds i16, i16* %2998, i64 18
  %3009 = bitcast i16* %3008 to <16 x i16>*
  %3010 = load <16 x i16>, <16 x i16>* %3009, align 2, !tbaa !396
  %3011 = bitcast i16* %2998 to <16 x i16>*
  %3012 = load <16 x i16>, <16 x i16>* %3011, align 2, !tbaa !396
  %3013 = getelementptr inbounds i16, i16* %2998, i64 16
  %3014 = bitcast i16* %3013 to <16 x i16>*
  %3015 = load <16 x i16>, <16 x i16>* %3014, align 2, !tbaa !396
  %3016 = add <16 x i16> %3007, %3001
  %3017 = add <16 x i16> %3016, %3012
  %3018 = add <16 x i16> %3010, %3004
  %3019 = add <16 x i16> %3018, %3015
  %3020 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3017, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3021 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3019, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3022 = shufflevector <16 x i16> %3020, <16 x i16> %3021, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3023 = lshr <32 x i16> %3022, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3024 = shufflevector <32 x i16> %3023, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3025 = sext i32 %blur_x.s0.x.v1.base.s161 to i64
  %3026 = add nsw i64 %3025, %2906
  %3027 = getelementptr inbounds i16, i16* %blur_x, i64 %3026
  %3028 = bitcast i16* %3027 to <16 x i16>*
  store <16 x i16> %3024, <16 x i16>* %3028, align 2, !tbaa !399
  %3029 = shufflevector <32 x i16> %3023, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3030 = getelementptr inbounds i16, i16* %3027, i64 16
  %3031 = bitcast i16* %3030 to <16 x i16>*
  store <16 x i16> %3029, <16 x i16>* %3031, align 2, !tbaa !399
  br label %"consume blur_x162"

"consume blur_x162":                              ; preds = %"for blur_y.s0.x.x.rebased154", %"produce blur_x160"
  %3032 = sext i32 %b125 to i64
  %3033 = add nsw i64 %2909, %3032
  %3034 = getelementptr inbounds i16, i16* %blur_x, i64 %3033
  %3035 = bitcast i16* %3034 to <16 x i16>*
  %3036 = load <16 x i16>, <16 x i16>* %3035, align 2, !tbaa !399
  %3037 = getelementptr inbounds i16, i16* %3034, i64 16
  %3038 = bitcast i16* %3037 to <16 x i16>*
  %3039 = load <16 x i16>, <16 x i16>* %3038, align 2, !tbaa !399
  %3040 = add nsw i64 %2912, %3032
  %3041 = getelementptr inbounds i16, i16* %blur_x, i64 %3040
  %3042 = bitcast i16* %3041 to <16 x i16>*
  %3043 = load <16 x i16>, <16 x i16>* %3042, align 2, !tbaa !399
  %3044 = getelementptr inbounds i16, i16* %3041, i64 16
  %3045 = bitcast i16* %3044 to <16 x i16>*
  %3046 = load <16 x i16>, <16 x i16>* %3045, align 2, !tbaa !399
  %3047 = add nsw i64 %2915, %3032
  %3048 = getelementptr inbounds i16, i16* %blur_x, i64 %3047
  %3049 = bitcast i16* %3048 to <16 x i16>*
  %3050 = load <16 x i16>, <16 x i16>* %3049, align 2, !tbaa !399
  %3051 = getelementptr inbounds i16, i16* %3048, i64 16
  %3052 = bitcast i16* %3051 to <16 x i16>*
  %3053 = load <16 x i16>, <16 x i16>* %3052, align 2, !tbaa !399
  %3054 = add <16 x i16> %3043, %3036
  %3055 = add <16 x i16> %3054, %3050
  %3056 = add <16 x i16> %3046, %3039
  %3057 = add <16 x i16> %3056, %3053
  %3058 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3055, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3059 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3057, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3060 = shufflevector <16 x i16> %3058, <16 x i16> %3059, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3061 = lshr <32 x i16> %3060, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3062 = shufflevector <32 x i16> %3061, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3063 = add nsw i64 %2919, %3032
  %3064 = getelementptr inbounds i16, i16* %65, i64 %3063
  %3065 = bitcast i16* %3064 to <16 x i16>*
  store <16 x i16> %3062, <16 x i16>* %3065, align 2, !tbaa !401
  %3066 = shufflevector <32 x i16> %3061, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3067 = getelementptr inbounds i16, i16* %3064, i64 16
  %3068 = bitcast i16* %3067 to <16 x i16>*
  store <16 x i16> %3066, <16 x i16>* %3068, align 2, !tbaa !401
  %3069 = add nuw nsw i32 %blur_y.s0.x.x.rebased156, 1
  %.not2636 = icmp eq i32 %3069, %t1639
  br i1 %.not2636, label %"end for blur_y.s0.x.x.rebased155", label %"for blur_y.s0.x.x.rebased154"

after_bb163:                                      ; preds = %"end for blur_y.s0.x.x.rebased155", %"produce blur_x166"
  br i1 %99, label %"for blur_y.s0.x.x.rebased168.preheader", label %"end for blur_y.s0.x.x.rebased169", !prof !386

"for blur_y.s0.x.x.rebased168.preheader":         ; preds = %after_bb163
  %3070 = sext i32 %t1666 to i64
  %3071 = zext i32 %.pre-phi3317 to i64
  %3072 = mul nsw i64 %3071, %108
  %3073 = sub nsw i64 %3072, %95
  %3074 = zext i32 %.pre-phi3323 to i64
  %3075 = mul nsw i64 %3074, %108
  %3076 = sub nsw i64 %3075, %95
  %3077 = zext i32 %.pre-phi3313 to i64
  %3078 = mul nsw i64 %3077, %108
  %3079 = sub nsw i64 %3078, %95
  %3080 = sext i32 %a26 to i64
  %3081 = add nsw i64 %3080, 5
  %3082 = mul nsw i64 %3081, %109
  %3083 = add nsw i64 %3082, %112
  br label %"for blur_y.s0.x.x.rebased168"

"produce blur_x166":                              ; preds = %"end for blur_y.s0.x.x.rebased155"
  %3084 = getelementptr inbounds i16, i16* %read_input, i64 %121
  %3085 = getelementptr inbounds i16, i16* %3084, i64 -31
  %3086 = bitcast i16* %3085 to <16 x i16>*
  %3087 = load <16 x i16>, <16 x i16>* %3086, align 2, !tbaa !396
  %3088 = getelementptr inbounds i16, i16* %3084, i64 -15
  %3089 = bitcast i16* %3088 to <16 x i16>*
  %3090 = load <16 x i16>, <16 x i16>* %3089, align 2, !tbaa !396
  %3091 = getelementptr inbounds i16, i16* %3084, i64 -30
  %3092 = bitcast i16* %3091 to <16 x i16>*
  %3093 = load <16 x i16>, <16 x i16>* %3092, align 2, !tbaa !396
  %3094 = getelementptr inbounds i16, i16* %3084, i64 -14
  %3095 = bitcast i16* %3094 to <16 x i16>*
  %3096 = load <16 x i16>, <16 x i16>* %3095, align 2, !tbaa !396
  %3097 = getelementptr inbounds i16, i16* %3084, i64 -32
  %3098 = bitcast i16* %3097 to <16 x i16>*
  %3099 = load <16 x i16>, <16 x i16>* %3098, align 2, !tbaa !396
  %3100 = getelementptr inbounds i16, i16* %3084, i64 -16
  %3101 = bitcast i16* %3100 to <16 x i16>*
  %3102 = load <16 x i16>, <16 x i16>* %3101, align 2, !tbaa !396
  %3103 = add <16 x i16> %3093, %3087
  %3104 = add <16 x i16> %3103, %3099
  %3105 = add <16 x i16> %3096, %3090
  %3106 = add <16 x i16> %3105, %3102
  %3107 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3104, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3108 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3106, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3109 = shufflevector <16 x i16> %3107, <16 x i16> %3108, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3110 = lshr <32 x i16> %3109, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3111 = shufflevector <32 x i16> %3110, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3112 = zext i32 %.pre-phi3323 to i64
  %3113 = mul nsw i64 %96, %3112
  %3114 = add nsw i64 %98, %3113
  %3115 = getelementptr inbounds i16, i16* %blur_x, i64 %3114
  %3116 = getelementptr inbounds i16, i16* %3115, i64 -32
  %3117 = bitcast i16* %3116 to <16 x i16>*
  store <16 x i16> %3111, <16 x i16>* %3117, align 2, !tbaa !399
  %3118 = shufflevector <32 x i16> %3110, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3119 = getelementptr inbounds i16, i16* %3115, i64 -16
  %3120 = bitcast i16* %3119 to <16 x i16>*
  store <16 x i16> %3118, <16 x i16>* %3120, align 2, !tbaa !399
  %3121 = zext i32 %.pre-phi3317 to i64
  %3122 = mul nsw i64 %3121, %108
  %3123 = add nsw i64 %3122, %93
  %3124 = getelementptr inbounds i16, i16* %blur_x, i64 %3123
  %3125 = getelementptr inbounds i16, i16* %3124, i64 -32
  %3126 = bitcast i16* %3125 to <16 x i16>*
  %3127 = load <16 x i16>, <16 x i16>* %3126, align 2, !tbaa !399
  %3128 = getelementptr inbounds i16, i16* %3124, i64 -16
  %3129 = bitcast i16* %3128 to <16 x i16>*
  %3130 = load <16 x i16>, <16 x i16>* %3129, align 2, !tbaa !399
  %3131 = mul nsw i64 %3112, %108
  %3132 = add nsw i64 %3131, %93
  %3133 = getelementptr inbounds i16, i16* %blur_x, i64 %3132
  %3134 = getelementptr inbounds i16, i16* %3133, i64 -32
  %3135 = bitcast i16* %3134 to <16 x i16>*
  %3136 = load <16 x i16>, <16 x i16>* %3135, align 2, !tbaa !399
  %3137 = getelementptr inbounds i16, i16* %3133, i64 -16
  %3138 = bitcast i16* %3137 to <16 x i16>*
  %3139 = load <16 x i16>, <16 x i16>* %3138, align 2, !tbaa !399
  %3140 = zext i32 %.pre-phi3313 to i64
  %3141 = mul nsw i64 %3140, %108
  %3142 = add nsw i64 %3141, %93
  %3143 = getelementptr inbounds i16, i16* %blur_x, i64 %3142
  %3144 = getelementptr inbounds i16, i16* %3143, i64 -32
  %3145 = bitcast i16* %3144 to <16 x i16>*
  %3146 = load <16 x i16>, <16 x i16>* %3145, align 2, !tbaa !399
  %3147 = getelementptr inbounds i16, i16* %3143, i64 -16
  %3148 = bitcast i16* %3147 to <16 x i16>*
  %3149 = load <16 x i16>, <16 x i16>* %3148, align 2, !tbaa !399
  %3150 = add <16 x i16> %3136, %3127
  %3151 = add <16 x i16> %3150, %3146
  %3152 = add <16 x i16> %3139, %3130
  %3153 = add <16 x i16> %3152, %3149
  %3154 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3151, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3155 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3153, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3156 = shufflevector <16 x i16> %3154, <16 x i16> %3155, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3157 = lshr <32 x i16> %3156, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3158 = shufflevector <32 x i16> %3157, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3159 = sext i32 %a26 to i64
  %3160 = add nsw i64 %3159, 5
  %3161 = mul nsw i64 %3160, %109
  %3162 = add nsw i64 %111, %3161
  %3163 = getelementptr inbounds i16, i16* %65, i64 %3162
  %3164 = getelementptr inbounds i16, i16* %3163, i64 -32
  %3165 = bitcast i16* %3164 to <16 x i16>*
  store <16 x i16> %3158, <16 x i16>* %3165, align 2, !tbaa !401
  %3166 = shufflevector <32 x i16> %3157, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3167 = getelementptr inbounds i16, i16* %3163, i64 -16
  %3168 = bitcast i16* %3167 to <16 x i16>*
  store <16 x i16> %3166, <16 x i16>* %3168, align 2, !tbaa !401
  br label %after_bb163

"for blur_y.s0.x.x.rebased168":                   ; preds = %"for blur_y.s0.x.x.rebased168.preheader", %"consume blur_x175"
  %indvars.iv3146 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased168.preheader" ], [ %indvars.iv.next3147, %"consume blur_x175" ]
  %3169 = add nsw i64 %indvars.iv3146, %100
  %3170 = icmp slt i64 %3169, 1
  %3171 = trunc i64 %3169 to i32
  %3172 = shl nsw i32 %3171, 5
  %3173 = icmp sgt i32 %4, %3172
  %3174 = or i1 %3170, %3173
  br i1 %3174, label %"produce blur_x174", label %"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge"

"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased168"
  %.pre3332 = shl nsw i64 %3169, 5
  br label %"consume blur_x175"

"end for blur_y.s0.x.x.rebased169":               ; preds = %"consume blur_x175", %after_bb163
  br i1 %101, label %"for blur_y.s0.x.x.rebased176.preheader", label %"end for blur_y.s0.x.x.rebased177", !prof !386

"for blur_y.s0.x.x.rebased176.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased169"
  %3175 = sext i32 %t1666 to i64
  %3176 = zext i32 %.pre-phi3317 to i64
  %3177 = mul nsw i64 %3176, %108
  %3178 = sub nsw i64 %3177, %95
  %3179 = zext i32 %.pre-phi3323 to i64
  %3180 = mul nsw i64 %3179, %108
  %3181 = sub nsw i64 %3180, %95
  %3182 = zext i32 %.pre-phi3313 to i64
  %3183 = mul nsw i64 %3182, %108
  %3184 = sub nsw i64 %3183, %95
  %3185 = sext i32 %a26 to i64
  %3186 = add nsw i64 %3185, 5
  %3187 = mul nsw i64 %3186, %109
  %3188 = add nsw i64 %3187, %112
  br label %"for blur_y.s0.x.x.rebased176"

"produce blur_x174":                              ; preds = %"for blur_y.s0.x.x.rebased168"
  %t752 = add nsw i32 %3172, %t1729
  %3189 = sext i32 %t752 to i64
  %3190 = getelementptr inbounds i16, i16* %read_input, i64 %3189
  %3191 = getelementptr inbounds i16, i16* %3190, i64 1
  %3192 = bitcast i16* %3191 to <16 x i16>*
  %3193 = load <16 x i16>, <16 x i16>* %3192, align 2, !tbaa !396
  %3194 = getelementptr inbounds i16, i16* %3190, i64 17
  %3195 = bitcast i16* %3194 to <16 x i16>*
  %3196 = load <16 x i16>, <16 x i16>* %3195, align 2, !tbaa !396
  %3197 = getelementptr inbounds i16, i16* %3190, i64 2
  %3198 = bitcast i16* %3197 to <16 x i16>*
  %3199 = load <16 x i16>, <16 x i16>* %3198, align 2, !tbaa !396
  %3200 = getelementptr inbounds i16, i16* %3190, i64 18
  %3201 = bitcast i16* %3200 to <16 x i16>*
  %3202 = load <16 x i16>, <16 x i16>* %3201, align 2, !tbaa !396
  %3203 = bitcast i16* %3190 to <16 x i16>*
  %3204 = load <16 x i16>, <16 x i16>* %3203, align 2, !tbaa !396
  %3205 = getelementptr inbounds i16, i16* %3190, i64 16
  %3206 = bitcast i16* %3205 to <16 x i16>*
  %3207 = load <16 x i16>, <16 x i16>* %3206, align 2, !tbaa !396
  %3208 = add <16 x i16> %3199, %3193
  %3209 = add <16 x i16> %3208, %3204
  %3210 = add <16 x i16> %3202, %3196
  %3211 = add <16 x i16> %3210, %3207
  %3212 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3209, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3213 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3211, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3214 = shufflevector <16 x i16> %3212, <16 x i16> %3213, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3215 = lshr <32 x i16> %3214, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3216 = shufflevector <32 x i16> %3215, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3217 = shl nsw i64 %3169, 5
  %3218 = add nsw i64 %3217, %3070
  %3219 = getelementptr inbounds i16, i16* %blur_x, i64 %3218
  %3220 = bitcast i16* %3219 to <16 x i16>*
  store <16 x i16> %3216, <16 x i16>* %3220, align 2, !tbaa !399
  %3221 = shufflevector <32 x i16> %3215, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3222 = getelementptr inbounds i16, i16* %3219, i64 16
  %3223 = bitcast i16* %3222 to <16 x i16>*
  store <16 x i16> %3221, <16 x i16>* %3223, align 2, !tbaa !399
  br label %"consume blur_x175"

"consume blur_x175":                              ; preds = %"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge", %"produce blur_x174"
  %.pre-phi3333 = phi i64 [ %.pre3332, %"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge" ], [ %3217, %"produce blur_x174" ]
  %3224 = add nsw i64 %3073, %.pre-phi3333
  %3225 = getelementptr inbounds i16, i16* %blur_x, i64 %3224
  %3226 = bitcast i16* %3225 to <16 x i16>*
  %3227 = load <16 x i16>, <16 x i16>* %3226, align 2, !tbaa !399
  %3228 = getelementptr inbounds i16, i16* %3225, i64 16
  %3229 = bitcast i16* %3228 to <16 x i16>*
  %3230 = load <16 x i16>, <16 x i16>* %3229, align 2, !tbaa !399
  %3231 = add nsw i64 %3076, %.pre-phi3333
  %3232 = getelementptr inbounds i16, i16* %blur_x, i64 %3231
  %3233 = bitcast i16* %3232 to <16 x i16>*
  %3234 = load <16 x i16>, <16 x i16>* %3233, align 2, !tbaa !399
  %3235 = getelementptr inbounds i16, i16* %3232, i64 16
  %3236 = bitcast i16* %3235 to <16 x i16>*
  %3237 = load <16 x i16>, <16 x i16>* %3236, align 2, !tbaa !399
  %3238 = add nsw i64 %3079, %.pre-phi3333
  %3239 = getelementptr inbounds i16, i16* %blur_x, i64 %3238
  %3240 = bitcast i16* %3239 to <16 x i16>*
  %3241 = load <16 x i16>, <16 x i16>* %3240, align 2, !tbaa !399
  %3242 = getelementptr inbounds i16, i16* %3239, i64 16
  %3243 = bitcast i16* %3242 to <16 x i16>*
  %3244 = load <16 x i16>, <16 x i16>* %3243, align 2, !tbaa !399
  %3245 = add <16 x i16> %3234, %3227
  %3246 = add <16 x i16> %3245, %3241
  %3247 = add <16 x i16> %3237, %3230
  %3248 = add <16 x i16> %3247, %3244
  %3249 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3246, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3250 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3248, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3251 = shufflevector <16 x i16> %3249, <16 x i16> %3250, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3252 = lshr <32 x i16> %3251, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3253 = shufflevector <32 x i16> %3252, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3254 = add nsw i64 %3083, %.pre-phi3333
  %3255 = getelementptr inbounds i16, i16* %65, i64 %3254
  %3256 = bitcast i16* %3255 to <16 x i16>*
  store <16 x i16> %3253, <16 x i16>* %3256, align 2, !tbaa !401
  %3257 = shufflevector <32 x i16> %3252, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3258 = getelementptr inbounds i16, i16* %3255, i64 16
  %3259 = bitcast i16* %3258 to <16 x i16>*
  store <16 x i16> %3257, <16 x i16>* %3259, align 2, !tbaa !401
  %indvars.iv.next3147 = add nuw nsw i64 %indvars.iv3146, 1
  %.not2635 = icmp eq i64 %indvars.iv.next3147, %180
  br i1 %.not2635, label %"end for blur_y.s0.x.x.rebased169", label %"for blur_y.s0.x.x.rebased168"

"for blur_y.s0.x.x.rebased176":                   ; preds = %"for blur_y.s0.x.x.rebased176.preheader", %"consume blur_x184"
  %blur_y.s0.x.x.rebased178 = phi i32 [ %3338, %"consume blur_x184" ], [ 0, %"for blur_y.s0.x.x.rebased176.preheader" ]
  %3260 = add nsw i32 %blur_y.s0.x.x.rebased178, %t1582
  %a126 = shl nsw i32 %3260, 5
  %3261 = icmp sgt i32 %a14, %a126
  %b132 = select i1 %3261, i32 %a126, i32 %a14
  %3262 = icmp slt i32 %3260, 1
  %3263 = icmp sgt i32 %4, %a126
  %3264 = or i1 %3262, %3263
  br i1 %3264, label %"produce blur_x182", label %"consume blur_x184"

"end for blur_y.s0.x.x.rebased177":               ; preds = %"consume blur_x184", %"end for blur_y.s0.x.x.rebased169"
  br i1 %34, label %"produce blur_x188", label %after_bb185

"produce blur_x182":                              ; preds = %"for blur_y.s0.x.x.rebased176"
  %3265 = icmp slt i32 %b132, %4
  %blur_x.s0.x.v1.base.s183 = select i1 %3265, i32 %b132, i32 %4
  %t757 = add nsw i32 %blur_x.s0.x.v1.base.s183, %t1729
  %3266 = sext i32 %t757 to i64
  %3267 = getelementptr inbounds i16, i16* %read_input, i64 %3266
  %3268 = getelementptr inbounds i16, i16* %3267, i64 1
  %3269 = bitcast i16* %3268 to <16 x i16>*
  %3270 = load <16 x i16>, <16 x i16>* %3269, align 2, !tbaa !396
  %3271 = getelementptr inbounds i16, i16* %3267, i64 17
  %3272 = bitcast i16* %3271 to <16 x i16>*
  %3273 = load <16 x i16>, <16 x i16>* %3272, align 2, !tbaa !396
  %3274 = getelementptr inbounds i16, i16* %3267, i64 2
  %3275 = bitcast i16* %3274 to <16 x i16>*
  %3276 = load <16 x i16>, <16 x i16>* %3275, align 2, !tbaa !396
  %3277 = getelementptr inbounds i16, i16* %3267, i64 18
  %3278 = bitcast i16* %3277 to <16 x i16>*
  %3279 = load <16 x i16>, <16 x i16>* %3278, align 2, !tbaa !396
  %3280 = bitcast i16* %3267 to <16 x i16>*
  %3281 = load <16 x i16>, <16 x i16>* %3280, align 2, !tbaa !396
  %3282 = getelementptr inbounds i16, i16* %3267, i64 16
  %3283 = bitcast i16* %3282 to <16 x i16>*
  %3284 = load <16 x i16>, <16 x i16>* %3283, align 2, !tbaa !396
  %3285 = add <16 x i16> %3276, %3270
  %3286 = add <16 x i16> %3285, %3281
  %3287 = add <16 x i16> %3279, %3273
  %3288 = add <16 x i16> %3287, %3284
  %3289 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3286, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3290 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3288, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3291 = shufflevector <16 x i16> %3289, <16 x i16> %3290, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3292 = lshr <32 x i16> %3291, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3293 = shufflevector <32 x i16> %3292, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3294 = sext i32 %blur_x.s0.x.v1.base.s183 to i64
  %3295 = add nsw i64 %3294, %3175
  %3296 = getelementptr inbounds i16, i16* %blur_x, i64 %3295
  %3297 = bitcast i16* %3296 to <16 x i16>*
  store <16 x i16> %3293, <16 x i16>* %3297, align 2, !tbaa !399
  %3298 = shufflevector <32 x i16> %3292, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3299 = getelementptr inbounds i16, i16* %3296, i64 16
  %3300 = bitcast i16* %3299 to <16 x i16>*
  store <16 x i16> %3298, <16 x i16>* %3300, align 2, !tbaa !399
  br label %"consume blur_x184"

"consume blur_x184":                              ; preds = %"for blur_y.s0.x.x.rebased176", %"produce blur_x182"
  %3301 = sext i32 %b132 to i64
  %3302 = add nsw i64 %3178, %3301
  %3303 = getelementptr inbounds i16, i16* %blur_x, i64 %3302
  %3304 = bitcast i16* %3303 to <16 x i16>*
  %3305 = load <16 x i16>, <16 x i16>* %3304, align 2, !tbaa !399
  %3306 = getelementptr inbounds i16, i16* %3303, i64 16
  %3307 = bitcast i16* %3306 to <16 x i16>*
  %3308 = load <16 x i16>, <16 x i16>* %3307, align 2, !tbaa !399
  %3309 = add nsw i64 %3181, %3301
  %3310 = getelementptr inbounds i16, i16* %blur_x, i64 %3309
  %3311 = bitcast i16* %3310 to <16 x i16>*
  %3312 = load <16 x i16>, <16 x i16>* %3311, align 2, !tbaa !399
  %3313 = getelementptr inbounds i16, i16* %3310, i64 16
  %3314 = bitcast i16* %3313 to <16 x i16>*
  %3315 = load <16 x i16>, <16 x i16>* %3314, align 2, !tbaa !399
  %3316 = add nsw i64 %3184, %3301
  %3317 = getelementptr inbounds i16, i16* %blur_x, i64 %3316
  %3318 = bitcast i16* %3317 to <16 x i16>*
  %3319 = load <16 x i16>, <16 x i16>* %3318, align 2, !tbaa !399
  %3320 = getelementptr inbounds i16, i16* %3317, i64 16
  %3321 = bitcast i16* %3320 to <16 x i16>*
  %3322 = load <16 x i16>, <16 x i16>* %3321, align 2, !tbaa !399
  %3323 = add <16 x i16> %3312, %3305
  %3324 = add <16 x i16> %3323, %3319
  %3325 = add <16 x i16> %3315, %3308
  %3326 = add <16 x i16> %3325, %3322
  %3327 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3324, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3328 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3326, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3329 = shufflevector <16 x i16> %3327, <16 x i16> %3328, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3330 = lshr <32 x i16> %3329, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3331 = shufflevector <32 x i16> %3330, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3332 = add nsw i64 %3188, %3301
  %3333 = getelementptr inbounds i16, i16* %65, i64 %3332
  %3334 = bitcast i16* %3333 to <16 x i16>*
  store <16 x i16> %3331, <16 x i16>* %3334, align 2, !tbaa !401
  %3335 = shufflevector <32 x i16> %3330, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3336 = getelementptr inbounds i16, i16* %3333, i64 16
  %3337 = bitcast i16* %3336 to <16 x i16>*
  store <16 x i16> %3335, <16 x i16>* %3337, align 2, !tbaa !401
  %3338 = add nuw nsw i32 %blur_y.s0.x.x.rebased178, 1
  %.not2634 = icmp eq i32 %3338, %t1639
  br i1 %.not2634, label %"end for blur_y.s0.x.x.rebased177", label %"for blur_y.s0.x.x.rebased176"

after_bb185:                                      ; preds = %"end for blur_y.s0.x.x.rebased177", %"produce blur_x188"
  br i1 %99, label %"for blur_y.s0.x.x.rebased190.preheader", label %"end for blur_y.s0.x.x.rebased191", !prof !386

"for blur_y.s0.x.x.rebased190.preheader":         ; preds = %after_bb185
  %3339 = sext i32 %t1638 to i64
  %3340 = zext i32 %.pre-phi3323 to i64
  %3341 = mul nsw i64 %3340, %108
  %3342 = sub nsw i64 %3341, %95
  %3343 = zext i32 %.pre-phi to i64
  %3344 = mul nsw i64 %3343, %108
  %3345 = sub nsw i64 %3344, %95
  %3346 = zext i32 %.pre-phi3317 to i64
  %3347 = mul nsw i64 %3346, %108
  %3348 = sub nsw i64 %3347, %95
  %3349 = sext i32 %a26 to i64
  %3350 = add nsw i64 %3349, 6
  %3351 = mul nsw i64 %3350, %109
  %3352 = add nsw i64 %3351, %112
  br label %"for blur_y.s0.x.x.rebased190"

"produce blur_x188":                              ; preds = %"end for blur_y.s0.x.x.rebased177"
  %3353 = getelementptr inbounds i16, i16* %read_input, i64 %123
  %3354 = getelementptr inbounds i16, i16* %3353, i64 -31
  %3355 = bitcast i16* %3354 to <16 x i16>*
  %3356 = load <16 x i16>, <16 x i16>* %3355, align 2, !tbaa !396
  %3357 = getelementptr inbounds i16, i16* %3353, i64 -15
  %3358 = bitcast i16* %3357 to <16 x i16>*
  %3359 = load <16 x i16>, <16 x i16>* %3358, align 2, !tbaa !396
  %3360 = getelementptr inbounds i16, i16* %3353, i64 -30
  %3361 = bitcast i16* %3360 to <16 x i16>*
  %3362 = load <16 x i16>, <16 x i16>* %3361, align 2, !tbaa !396
  %3363 = getelementptr inbounds i16, i16* %3353, i64 -14
  %3364 = bitcast i16* %3363 to <16 x i16>*
  %3365 = load <16 x i16>, <16 x i16>* %3364, align 2, !tbaa !396
  %3366 = getelementptr inbounds i16, i16* %3353, i64 -32
  %3367 = bitcast i16* %3366 to <16 x i16>*
  %3368 = load <16 x i16>, <16 x i16>* %3367, align 2, !tbaa !396
  %3369 = getelementptr inbounds i16, i16* %3353, i64 -16
  %3370 = bitcast i16* %3369 to <16 x i16>*
  %3371 = load <16 x i16>, <16 x i16>* %3370, align 2, !tbaa !396
  %3372 = add <16 x i16> %3362, %3356
  %3373 = add <16 x i16> %3372, %3368
  %3374 = add <16 x i16> %3365, %3359
  %3375 = add <16 x i16> %3374, %3371
  %3376 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3373, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3377 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3375, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3378 = shufflevector <16 x i16> %3376, <16 x i16> %3377, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3379 = lshr <32 x i16> %3378, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3380 = shufflevector <32 x i16> %3379, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3381 = zext i32 %.pre-phi to i64
  %3382 = mul nsw i64 %96, %3381
  %3383 = add nsw i64 %98, %3382
  %3384 = getelementptr inbounds i16, i16* %blur_x, i64 %3383
  %3385 = getelementptr inbounds i16, i16* %3384, i64 -32
  %3386 = bitcast i16* %3385 to <16 x i16>*
  store <16 x i16> %3380, <16 x i16>* %3386, align 2, !tbaa !399
  %3387 = shufflevector <32 x i16> %3379, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3388 = getelementptr inbounds i16, i16* %3384, i64 -16
  %3389 = bitcast i16* %3388 to <16 x i16>*
  store <16 x i16> %3387, <16 x i16>* %3389, align 2, !tbaa !399
  %3390 = zext i32 %.pre-phi3323 to i64
  %3391 = mul nsw i64 %3390, %108
  %3392 = add nsw i64 %3391, %93
  %3393 = getelementptr inbounds i16, i16* %blur_x, i64 %3392
  %3394 = getelementptr inbounds i16, i16* %3393, i64 -32
  %3395 = bitcast i16* %3394 to <16 x i16>*
  %3396 = load <16 x i16>, <16 x i16>* %3395, align 2, !tbaa !399
  %3397 = getelementptr inbounds i16, i16* %3393, i64 -16
  %3398 = bitcast i16* %3397 to <16 x i16>*
  %3399 = load <16 x i16>, <16 x i16>* %3398, align 2, !tbaa !399
  %3400 = mul nsw i64 %3381, %108
  %3401 = add nsw i64 %3400, %93
  %3402 = getelementptr inbounds i16, i16* %blur_x, i64 %3401
  %3403 = getelementptr inbounds i16, i16* %3402, i64 -32
  %3404 = bitcast i16* %3403 to <16 x i16>*
  %3405 = load <16 x i16>, <16 x i16>* %3404, align 2, !tbaa !399
  %3406 = getelementptr inbounds i16, i16* %3402, i64 -16
  %3407 = bitcast i16* %3406 to <16 x i16>*
  %3408 = load <16 x i16>, <16 x i16>* %3407, align 2, !tbaa !399
  %3409 = zext i32 %.pre-phi3317 to i64
  %3410 = mul nsw i64 %3409, %108
  %3411 = add nsw i64 %3410, %93
  %3412 = getelementptr inbounds i16, i16* %blur_x, i64 %3411
  %3413 = getelementptr inbounds i16, i16* %3412, i64 -32
  %3414 = bitcast i16* %3413 to <16 x i16>*
  %3415 = load <16 x i16>, <16 x i16>* %3414, align 2, !tbaa !399
  %3416 = getelementptr inbounds i16, i16* %3412, i64 -16
  %3417 = bitcast i16* %3416 to <16 x i16>*
  %3418 = load <16 x i16>, <16 x i16>* %3417, align 2, !tbaa !399
  %3419 = add <16 x i16> %3405, %3396
  %3420 = add <16 x i16> %3419, %3415
  %3421 = add <16 x i16> %3408, %3399
  %3422 = add <16 x i16> %3421, %3418
  %3423 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3420, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3424 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3422, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3425 = shufflevector <16 x i16> %3423, <16 x i16> %3424, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3426 = lshr <32 x i16> %3425, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3427 = shufflevector <32 x i16> %3426, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3428 = sext i32 %a26 to i64
  %3429 = add nsw i64 %3428, 6
  %3430 = mul nsw i64 %3429, %109
  %3431 = add nsw i64 %111, %3430
  %3432 = getelementptr inbounds i16, i16* %65, i64 %3431
  %3433 = getelementptr inbounds i16, i16* %3432, i64 -32
  %3434 = bitcast i16* %3433 to <16 x i16>*
  store <16 x i16> %3427, <16 x i16>* %3434, align 2, !tbaa !401
  %3435 = shufflevector <32 x i16> %3426, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3436 = getelementptr inbounds i16, i16* %3432, i64 -16
  %3437 = bitcast i16* %3436 to <16 x i16>*
  store <16 x i16> %3435, <16 x i16>* %3437, align 2, !tbaa !401
  br label %after_bb185

"for blur_y.s0.x.x.rebased190":                   ; preds = %"for blur_y.s0.x.x.rebased190.preheader", %"consume blur_x197"
  %indvars.iv3149 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased190.preheader" ], [ %indvars.iv.next3150, %"consume blur_x197" ]
  %3438 = add nsw i64 %indvars.iv3149, %100
  %3439 = icmp slt i64 %3438, 1
  %3440 = trunc i64 %3438 to i32
  %3441 = shl nsw i32 %3440, 5
  %3442 = icmp sgt i32 %4, %3441
  %3443 = or i1 %3439, %3442
  br i1 %3443, label %"produce blur_x196", label %"for blur_y.s0.x.x.rebased190.consume blur_x197_crit_edge"

"for blur_y.s0.x.x.rebased190.consume blur_x197_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased190"
  %.pre3334 = shl nsw i64 %3438, 5
  br label %"consume blur_x197"

"end for blur_y.s0.x.x.rebased191":               ; preds = %"consume blur_x197", %after_bb185
  br i1 %101, label %"for blur_y.s0.x.x.rebased198.preheader", label %"end for blur_y.s0.x.x.rebased199", !prof !386

"for blur_y.s0.x.x.rebased198.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased191"
  %3444 = sext i32 %t1638 to i64
  %3445 = zext i32 %.pre-phi3323 to i64
  %3446 = mul nsw i64 %3445, %108
  %3447 = sub nsw i64 %3446, %95
  %3448 = zext i32 %.pre-phi to i64
  %3449 = mul nsw i64 %3448, %108
  %3450 = sub nsw i64 %3449, %95
  %3451 = zext i32 %.pre-phi3317 to i64
  %3452 = mul nsw i64 %3451, %108
  %3453 = sub nsw i64 %3452, %95
  %3454 = sext i32 %a26 to i64
  %3455 = add nsw i64 %3454, 6
  %3456 = mul nsw i64 %3455, %109
  %3457 = add nsw i64 %3456, %112
  br label %"for blur_y.s0.x.x.rebased198"

"produce blur_x196":                              ; preds = %"for blur_y.s0.x.x.rebased190"
  %t768 = add nsw i32 %3441, %t1745
  %3458 = sext i32 %t768 to i64
  %3459 = getelementptr inbounds i16, i16* %read_input, i64 %3458
  %3460 = getelementptr inbounds i16, i16* %3459, i64 1
  %3461 = bitcast i16* %3460 to <16 x i16>*
  %3462 = load <16 x i16>, <16 x i16>* %3461, align 2, !tbaa !396
  %3463 = getelementptr inbounds i16, i16* %3459, i64 17
  %3464 = bitcast i16* %3463 to <16 x i16>*
  %3465 = load <16 x i16>, <16 x i16>* %3464, align 2, !tbaa !396
  %3466 = getelementptr inbounds i16, i16* %3459, i64 2
  %3467 = bitcast i16* %3466 to <16 x i16>*
  %3468 = load <16 x i16>, <16 x i16>* %3467, align 2, !tbaa !396
  %3469 = getelementptr inbounds i16, i16* %3459, i64 18
  %3470 = bitcast i16* %3469 to <16 x i16>*
  %3471 = load <16 x i16>, <16 x i16>* %3470, align 2, !tbaa !396
  %3472 = bitcast i16* %3459 to <16 x i16>*
  %3473 = load <16 x i16>, <16 x i16>* %3472, align 2, !tbaa !396
  %3474 = getelementptr inbounds i16, i16* %3459, i64 16
  %3475 = bitcast i16* %3474 to <16 x i16>*
  %3476 = load <16 x i16>, <16 x i16>* %3475, align 2, !tbaa !396
  %3477 = add <16 x i16> %3468, %3462
  %3478 = add <16 x i16> %3477, %3473
  %3479 = add <16 x i16> %3471, %3465
  %3480 = add <16 x i16> %3479, %3476
  %3481 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3478, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3482 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3480, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3483 = shufflevector <16 x i16> %3481, <16 x i16> %3482, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3484 = lshr <32 x i16> %3483, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3485 = shufflevector <32 x i16> %3484, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3486 = shl nsw i64 %3438, 5
  %3487 = add nsw i64 %3486, %3339
  %3488 = getelementptr inbounds i16, i16* %blur_x, i64 %3487
  %3489 = bitcast i16* %3488 to <16 x i16>*
  store <16 x i16> %3485, <16 x i16>* %3489, align 2, !tbaa !399
  %3490 = shufflevector <32 x i16> %3484, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3491 = getelementptr inbounds i16, i16* %3488, i64 16
  %3492 = bitcast i16* %3491 to <16 x i16>*
  store <16 x i16> %3490, <16 x i16>* %3492, align 2, !tbaa !399
  br label %"consume blur_x197"

"consume blur_x197":                              ; preds = %"for blur_y.s0.x.x.rebased190.consume blur_x197_crit_edge", %"produce blur_x196"
  %.pre-phi3335 = phi i64 [ %.pre3334, %"for blur_y.s0.x.x.rebased190.consume blur_x197_crit_edge" ], [ %3486, %"produce blur_x196" ]
  %3493 = add nsw i64 %3342, %.pre-phi3335
  %3494 = getelementptr inbounds i16, i16* %blur_x, i64 %3493
  %3495 = bitcast i16* %3494 to <16 x i16>*
  %3496 = load <16 x i16>, <16 x i16>* %3495, align 2, !tbaa !399
  %3497 = getelementptr inbounds i16, i16* %3494, i64 16
  %3498 = bitcast i16* %3497 to <16 x i16>*
  %3499 = load <16 x i16>, <16 x i16>* %3498, align 2, !tbaa !399
  %3500 = add nsw i64 %3345, %.pre-phi3335
  %3501 = getelementptr inbounds i16, i16* %blur_x, i64 %3500
  %3502 = bitcast i16* %3501 to <16 x i16>*
  %3503 = load <16 x i16>, <16 x i16>* %3502, align 2, !tbaa !399
  %3504 = getelementptr inbounds i16, i16* %3501, i64 16
  %3505 = bitcast i16* %3504 to <16 x i16>*
  %3506 = load <16 x i16>, <16 x i16>* %3505, align 2, !tbaa !399
  %3507 = add nsw i64 %3348, %.pre-phi3335
  %3508 = getelementptr inbounds i16, i16* %blur_x, i64 %3507
  %3509 = bitcast i16* %3508 to <16 x i16>*
  %3510 = load <16 x i16>, <16 x i16>* %3509, align 2, !tbaa !399
  %3511 = getelementptr inbounds i16, i16* %3508, i64 16
  %3512 = bitcast i16* %3511 to <16 x i16>*
  %3513 = load <16 x i16>, <16 x i16>* %3512, align 2, !tbaa !399
  %3514 = add <16 x i16> %3503, %3496
  %3515 = add <16 x i16> %3514, %3510
  %3516 = add <16 x i16> %3506, %3499
  %3517 = add <16 x i16> %3516, %3513
  %3518 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3515, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3519 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3517, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3520 = shufflevector <16 x i16> %3518, <16 x i16> %3519, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3521 = lshr <32 x i16> %3520, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3522 = shufflevector <32 x i16> %3521, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3523 = add nsw i64 %3352, %.pre-phi3335
  %3524 = getelementptr inbounds i16, i16* %65, i64 %3523
  %3525 = bitcast i16* %3524 to <16 x i16>*
  store <16 x i16> %3522, <16 x i16>* %3525, align 2, !tbaa !401
  %3526 = shufflevector <32 x i16> %3521, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3527 = getelementptr inbounds i16, i16* %3524, i64 16
  %3528 = bitcast i16* %3527 to <16 x i16>*
  store <16 x i16> %3526, <16 x i16>* %3528, align 2, !tbaa !401
  %indvars.iv.next3150 = add nuw nsw i64 %indvars.iv3149, 1
  %.not2633 = icmp eq i64 %indvars.iv.next3150, %180
  br i1 %.not2633, label %"end for blur_y.s0.x.x.rebased191", label %"for blur_y.s0.x.x.rebased190"

"for blur_y.s0.x.x.rebased198":                   ; preds = %"for blur_y.s0.x.x.rebased198.preheader", %"consume blur_x206"
  %blur_y.s0.x.x.rebased200 = phi i32 [ %3607, %"consume blur_x206" ], [ 0, %"for blur_y.s0.x.x.rebased198.preheader" ]
  %3529 = add nsw i32 %blur_y.s0.x.x.rebased200, %t1582
  %a133 = shl nsw i32 %3529, 5
  %3530 = icmp sgt i32 %a14, %a133
  %b139 = select i1 %3530, i32 %a133, i32 %a14
  %3531 = icmp slt i32 %3529, 1
  %3532 = icmp sgt i32 %4, %a133
  %3533 = or i1 %3531, %3532
  br i1 %3533, label %"produce blur_x204", label %"consume blur_x206"

"end for blur_y.s0.x.x.rebased199":               ; preds = %"consume blur_x206", %"end for blur_y.s0.x.x.rebased191"
  br i1 %34, label %"produce blur_x210", label %after_bb207

"produce blur_x204":                              ; preds = %"for blur_y.s0.x.x.rebased198"
  %3534 = icmp slt i32 %b139, %4
  %blur_x.s0.x.v1.base.s205 = select i1 %3534, i32 %b139, i32 %4
  %t773 = add nsw i32 %blur_x.s0.x.v1.base.s205, %t1745
  %3535 = sext i32 %t773 to i64
  %3536 = getelementptr inbounds i16, i16* %read_input, i64 %3535
  %3537 = getelementptr inbounds i16, i16* %3536, i64 1
  %3538 = bitcast i16* %3537 to <16 x i16>*
  %3539 = load <16 x i16>, <16 x i16>* %3538, align 2, !tbaa !396
  %3540 = getelementptr inbounds i16, i16* %3536, i64 17
  %3541 = bitcast i16* %3540 to <16 x i16>*
  %3542 = load <16 x i16>, <16 x i16>* %3541, align 2, !tbaa !396
  %3543 = getelementptr inbounds i16, i16* %3536, i64 2
  %3544 = bitcast i16* %3543 to <16 x i16>*
  %3545 = load <16 x i16>, <16 x i16>* %3544, align 2, !tbaa !396
  %3546 = getelementptr inbounds i16, i16* %3536, i64 18
  %3547 = bitcast i16* %3546 to <16 x i16>*
  %3548 = load <16 x i16>, <16 x i16>* %3547, align 2, !tbaa !396
  %3549 = bitcast i16* %3536 to <16 x i16>*
  %3550 = load <16 x i16>, <16 x i16>* %3549, align 2, !tbaa !396
  %3551 = getelementptr inbounds i16, i16* %3536, i64 16
  %3552 = bitcast i16* %3551 to <16 x i16>*
  %3553 = load <16 x i16>, <16 x i16>* %3552, align 2, !tbaa !396
  %3554 = add <16 x i16> %3545, %3539
  %3555 = add <16 x i16> %3554, %3550
  %3556 = add <16 x i16> %3548, %3542
  %3557 = add <16 x i16> %3556, %3553
  %3558 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3555, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3559 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3557, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3560 = shufflevector <16 x i16> %3558, <16 x i16> %3559, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3561 = lshr <32 x i16> %3560, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3562 = shufflevector <32 x i16> %3561, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3563 = sext i32 %blur_x.s0.x.v1.base.s205 to i64
  %3564 = add nsw i64 %3563, %3444
  %3565 = getelementptr inbounds i16, i16* %blur_x, i64 %3564
  %3566 = bitcast i16* %3565 to <16 x i16>*
  store <16 x i16> %3562, <16 x i16>* %3566, align 2, !tbaa !399
  %3567 = shufflevector <32 x i16> %3561, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3568 = getelementptr inbounds i16, i16* %3565, i64 16
  %3569 = bitcast i16* %3568 to <16 x i16>*
  store <16 x i16> %3567, <16 x i16>* %3569, align 2, !tbaa !399
  br label %"consume blur_x206"

"consume blur_x206":                              ; preds = %"for blur_y.s0.x.x.rebased198", %"produce blur_x204"
  %3570 = sext i32 %b139 to i64
  %3571 = add nsw i64 %3447, %3570
  %3572 = getelementptr inbounds i16, i16* %blur_x, i64 %3571
  %3573 = bitcast i16* %3572 to <16 x i16>*
  %3574 = load <16 x i16>, <16 x i16>* %3573, align 2, !tbaa !399
  %3575 = getelementptr inbounds i16, i16* %3572, i64 16
  %3576 = bitcast i16* %3575 to <16 x i16>*
  %3577 = load <16 x i16>, <16 x i16>* %3576, align 2, !tbaa !399
  %3578 = add nsw i64 %3450, %3570
  %3579 = getelementptr inbounds i16, i16* %blur_x, i64 %3578
  %3580 = bitcast i16* %3579 to <16 x i16>*
  %3581 = load <16 x i16>, <16 x i16>* %3580, align 2, !tbaa !399
  %3582 = getelementptr inbounds i16, i16* %3579, i64 16
  %3583 = bitcast i16* %3582 to <16 x i16>*
  %3584 = load <16 x i16>, <16 x i16>* %3583, align 2, !tbaa !399
  %3585 = add nsw i64 %3453, %3570
  %3586 = getelementptr inbounds i16, i16* %blur_x, i64 %3585
  %3587 = bitcast i16* %3586 to <16 x i16>*
  %3588 = load <16 x i16>, <16 x i16>* %3587, align 2, !tbaa !399
  %3589 = getelementptr inbounds i16, i16* %3586, i64 16
  %3590 = bitcast i16* %3589 to <16 x i16>*
  %3591 = load <16 x i16>, <16 x i16>* %3590, align 2, !tbaa !399
  %3592 = add <16 x i16> %3581, %3574
  %3593 = add <16 x i16> %3592, %3588
  %3594 = add <16 x i16> %3584, %3577
  %3595 = add <16 x i16> %3594, %3591
  %3596 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3593, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3597 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3595, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3598 = shufflevector <16 x i16> %3596, <16 x i16> %3597, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3599 = lshr <32 x i16> %3598, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3600 = shufflevector <32 x i16> %3599, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3601 = add nsw i64 %3457, %3570
  %3602 = getelementptr inbounds i16, i16* %65, i64 %3601
  %3603 = bitcast i16* %3602 to <16 x i16>*
  store <16 x i16> %3600, <16 x i16>* %3603, align 2, !tbaa !401
  %3604 = shufflevector <32 x i16> %3599, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3605 = getelementptr inbounds i16, i16* %3602, i64 16
  %3606 = bitcast i16* %3605 to <16 x i16>*
  store <16 x i16> %3604, <16 x i16>* %3606, align 2, !tbaa !401
  %3607 = add nuw nsw i32 %blur_y.s0.x.x.rebased200, 1
  %.not2632 = icmp eq i32 %3607, %t1639
  br i1 %.not2632, label %"end for blur_y.s0.x.x.rebased199", label %"for blur_y.s0.x.x.rebased198"

after_bb207:                                      ; preds = %"end for blur_y.s0.x.x.rebased199", %"produce blur_x210"
  br i1 %99, label %"for blur_y.s0.x.x.rebased212.preheader", label %"end for blur_y.s0.x.x.rebased213", !prof !386

"for blur_y.s0.x.x.rebased212.preheader":         ; preds = %after_bb207
  %3608 = sext i32 %t1644 to i64
  %3609 = zext i32 %.pre-phi to i64
  %3610 = mul nsw i64 %3609, %108
  %3611 = sub nsw i64 %3610, %95
  %3612 = zext i32 %.pre-phi3313 to i64
  %3613 = mul nsw i64 %3612, %108
  %3614 = sub nsw i64 %3613, %95
  %3615 = zext i32 %.pre-phi3323 to i64
  %3616 = mul nsw i64 %3615, %108
  %3617 = sub nsw i64 %3616, %95
  %3618 = sext i32 %a26 to i64
  %3619 = add nsw i64 %3618, 7
  %3620 = mul nsw i64 %3619, %109
  %3621 = add nsw i64 %3620, %112
  br label %"for blur_y.s0.x.x.rebased212"

"produce blur_x210":                              ; preds = %"end for blur_y.s0.x.x.rebased199"
  %3622 = getelementptr inbounds i16, i16* %read_input, i64 %125
  %3623 = getelementptr inbounds i16, i16* %3622, i64 -31
  %3624 = bitcast i16* %3623 to <16 x i16>*
  %3625 = load <16 x i16>, <16 x i16>* %3624, align 2, !tbaa !396
  %3626 = getelementptr inbounds i16, i16* %3622, i64 -15
  %3627 = bitcast i16* %3626 to <16 x i16>*
  %3628 = load <16 x i16>, <16 x i16>* %3627, align 2, !tbaa !396
  %3629 = getelementptr inbounds i16, i16* %3622, i64 -30
  %3630 = bitcast i16* %3629 to <16 x i16>*
  %3631 = load <16 x i16>, <16 x i16>* %3630, align 2, !tbaa !396
  %3632 = getelementptr inbounds i16, i16* %3622, i64 -14
  %3633 = bitcast i16* %3632 to <16 x i16>*
  %3634 = load <16 x i16>, <16 x i16>* %3633, align 2, !tbaa !396
  %3635 = getelementptr inbounds i16, i16* %3622, i64 -32
  %3636 = bitcast i16* %3635 to <16 x i16>*
  %3637 = load <16 x i16>, <16 x i16>* %3636, align 2, !tbaa !396
  %3638 = getelementptr inbounds i16, i16* %3622, i64 -16
  %3639 = bitcast i16* %3638 to <16 x i16>*
  %3640 = load <16 x i16>, <16 x i16>* %3639, align 2, !tbaa !396
  %3641 = add <16 x i16> %3631, %3625
  %3642 = add <16 x i16> %3641, %3637
  %3643 = add <16 x i16> %3634, %3628
  %3644 = add <16 x i16> %3643, %3640
  %3645 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3642, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3646 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3644, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3647 = shufflevector <16 x i16> %3645, <16 x i16> %3646, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3648 = lshr <32 x i16> %3647, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3649 = shufflevector <32 x i16> %3648, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3650 = zext i32 %.pre-phi3313 to i64
  %3651 = mul nsw i64 %96, %3650
  %3652 = add nsw i64 %98, %3651
  %3653 = getelementptr inbounds i16, i16* %blur_x, i64 %3652
  %3654 = getelementptr inbounds i16, i16* %3653, i64 -32
  %3655 = bitcast i16* %3654 to <16 x i16>*
  store <16 x i16> %3649, <16 x i16>* %3655, align 2, !tbaa !399
  %3656 = shufflevector <32 x i16> %3648, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3657 = getelementptr inbounds i16, i16* %3653, i64 -16
  %3658 = bitcast i16* %3657 to <16 x i16>*
  store <16 x i16> %3656, <16 x i16>* %3658, align 2, !tbaa !399
  %3659 = zext i32 %.pre-phi to i64
  %3660 = mul nsw i64 %3659, %108
  %3661 = add nsw i64 %3660, %93
  %3662 = getelementptr inbounds i16, i16* %blur_x, i64 %3661
  %3663 = getelementptr inbounds i16, i16* %3662, i64 -32
  %3664 = bitcast i16* %3663 to <16 x i16>*
  %3665 = load <16 x i16>, <16 x i16>* %3664, align 2, !tbaa !399
  %3666 = getelementptr inbounds i16, i16* %3662, i64 -16
  %3667 = bitcast i16* %3666 to <16 x i16>*
  %3668 = load <16 x i16>, <16 x i16>* %3667, align 2, !tbaa !399
  %3669 = mul nsw i64 %3650, %108
  %3670 = add nsw i64 %3669, %93
  %3671 = getelementptr inbounds i16, i16* %blur_x, i64 %3670
  %3672 = getelementptr inbounds i16, i16* %3671, i64 -32
  %3673 = bitcast i16* %3672 to <16 x i16>*
  %3674 = load <16 x i16>, <16 x i16>* %3673, align 2, !tbaa !399
  %3675 = getelementptr inbounds i16, i16* %3671, i64 -16
  %3676 = bitcast i16* %3675 to <16 x i16>*
  %3677 = load <16 x i16>, <16 x i16>* %3676, align 2, !tbaa !399
  %3678 = zext i32 %.pre-phi3323 to i64
  %3679 = mul nsw i64 %3678, %108
  %3680 = add nsw i64 %3679, %93
  %3681 = getelementptr inbounds i16, i16* %blur_x, i64 %3680
  %3682 = getelementptr inbounds i16, i16* %3681, i64 -32
  %3683 = bitcast i16* %3682 to <16 x i16>*
  %3684 = load <16 x i16>, <16 x i16>* %3683, align 2, !tbaa !399
  %3685 = getelementptr inbounds i16, i16* %3681, i64 -16
  %3686 = bitcast i16* %3685 to <16 x i16>*
  %3687 = load <16 x i16>, <16 x i16>* %3686, align 2, !tbaa !399
  %3688 = add <16 x i16> %3674, %3665
  %3689 = add <16 x i16> %3688, %3684
  %3690 = add <16 x i16> %3677, %3668
  %3691 = add <16 x i16> %3690, %3687
  %3692 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3689, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3693 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3691, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3694 = shufflevector <16 x i16> %3692, <16 x i16> %3693, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3695 = lshr <32 x i16> %3694, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3696 = shufflevector <32 x i16> %3695, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3697 = sext i32 %a26 to i64
  %3698 = add nsw i64 %3697, 7
  %3699 = mul nsw i64 %3698, %109
  %3700 = add nsw i64 %111, %3699
  %3701 = getelementptr inbounds i16, i16* %65, i64 %3700
  %3702 = getelementptr inbounds i16, i16* %3701, i64 -32
  %3703 = bitcast i16* %3702 to <16 x i16>*
  store <16 x i16> %3696, <16 x i16>* %3703, align 2, !tbaa !401
  %3704 = shufflevector <32 x i16> %3695, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3705 = getelementptr inbounds i16, i16* %3701, i64 -16
  %3706 = bitcast i16* %3705 to <16 x i16>*
  store <16 x i16> %3704, <16 x i16>* %3706, align 2, !tbaa !401
  br label %after_bb207

"for blur_y.s0.x.x.rebased212":                   ; preds = %"for blur_y.s0.x.x.rebased212.preheader", %"consume blur_x219"
  %indvars.iv3152 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased212.preheader" ], [ %indvars.iv.next3153, %"consume blur_x219" ]
  %3707 = add nsw i64 %indvars.iv3152, %100
  %3708 = icmp slt i64 %3707, 1
  %3709 = trunc i64 %3707 to i32
  %3710 = shl nsw i32 %3709, 5
  %3711 = icmp sgt i32 %4, %3710
  %3712 = or i1 %3708, %3711
  br i1 %3712, label %"produce blur_x218", label %"for blur_y.s0.x.x.rebased212.consume blur_x219_crit_edge"

"for blur_y.s0.x.x.rebased212.consume blur_x219_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased212"
  %.pre3336 = shl nsw i64 %3707, 5
  br label %"consume blur_x219"

"end for blur_y.s0.x.x.rebased213":               ; preds = %"consume blur_x219", %after_bb207
  br i1 %101, label %"for blur_y.s0.x.x.rebased220.preheader", label %"end for blur_y.s0.x.x.rebased221", !prof !386

"for blur_y.s0.x.x.rebased220.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased213"
  %3713 = sext i32 %t1644 to i64
  %3714 = zext i32 %.pre-phi to i64
  %3715 = mul nsw i64 %3714, %108
  %3716 = sub nsw i64 %3715, %95
  %3717 = zext i32 %.pre-phi3313 to i64
  %3718 = mul nsw i64 %3717, %108
  %3719 = sub nsw i64 %3718, %95
  %3720 = zext i32 %.pre-phi3323 to i64
  %3721 = mul nsw i64 %3720, %108
  %3722 = sub nsw i64 %3721, %95
  %3723 = sext i32 %a26 to i64
  %3724 = add nsw i64 %3723, 7
  %3725 = mul nsw i64 %3724, %109
  %3726 = add nsw i64 %3725, %112
  br label %"for blur_y.s0.x.x.rebased220"

"produce blur_x218":                              ; preds = %"for blur_y.s0.x.x.rebased212"
  %t784 = add nsw i32 %3710, %t1761
  %3727 = sext i32 %t784 to i64
  %3728 = getelementptr inbounds i16, i16* %read_input, i64 %3727
  %3729 = getelementptr inbounds i16, i16* %3728, i64 1
  %3730 = bitcast i16* %3729 to <16 x i16>*
  %3731 = load <16 x i16>, <16 x i16>* %3730, align 2, !tbaa !396
  %3732 = getelementptr inbounds i16, i16* %3728, i64 17
  %3733 = bitcast i16* %3732 to <16 x i16>*
  %3734 = load <16 x i16>, <16 x i16>* %3733, align 2, !tbaa !396
  %3735 = getelementptr inbounds i16, i16* %3728, i64 2
  %3736 = bitcast i16* %3735 to <16 x i16>*
  %3737 = load <16 x i16>, <16 x i16>* %3736, align 2, !tbaa !396
  %3738 = getelementptr inbounds i16, i16* %3728, i64 18
  %3739 = bitcast i16* %3738 to <16 x i16>*
  %3740 = load <16 x i16>, <16 x i16>* %3739, align 2, !tbaa !396
  %3741 = bitcast i16* %3728 to <16 x i16>*
  %3742 = load <16 x i16>, <16 x i16>* %3741, align 2, !tbaa !396
  %3743 = getelementptr inbounds i16, i16* %3728, i64 16
  %3744 = bitcast i16* %3743 to <16 x i16>*
  %3745 = load <16 x i16>, <16 x i16>* %3744, align 2, !tbaa !396
  %3746 = add <16 x i16> %3737, %3731
  %3747 = add <16 x i16> %3746, %3742
  %3748 = add <16 x i16> %3740, %3734
  %3749 = add <16 x i16> %3748, %3745
  %3750 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3747, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3751 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3749, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3752 = shufflevector <16 x i16> %3750, <16 x i16> %3751, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3753 = lshr <32 x i16> %3752, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3754 = shufflevector <32 x i16> %3753, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3755 = shl nsw i64 %3707, 5
  %3756 = add nsw i64 %3755, %3608
  %3757 = getelementptr inbounds i16, i16* %blur_x, i64 %3756
  %3758 = bitcast i16* %3757 to <16 x i16>*
  store <16 x i16> %3754, <16 x i16>* %3758, align 2, !tbaa !399
  %3759 = shufflevector <32 x i16> %3753, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3760 = getelementptr inbounds i16, i16* %3757, i64 16
  %3761 = bitcast i16* %3760 to <16 x i16>*
  store <16 x i16> %3759, <16 x i16>* %3761, align 2, !tbaa !399
  br label %"consume blur_x219"

"consume blur_x219":                              ; preds = %"for blur_y.s0.x.x.rebased212.consume blur_x219_crit_edge", %"produce blur_x218"
  %.pre-phi3337 = phi i64 [ %.pre3336, %"for blur_y.s0.x.x.rebased212.consume blur_x219_crit_edge" ], [ %3755, %"produce blur_x218" ]
  %3762 = add nsw i64 %3611, %.pre-phi3337
  %3763 = getelementptr inbounds i16, i16* %blur_x, i64 %3762
  %3764 = bitcast i16* %3763 to <16 x i16>*
  %3765 = load <16 x i16>, <16 x i16>* %3764, align 2, !tbaa !399
  %3766 = getelementptr inbounds i16, i16* %3763, i64 16
  %3767 = bitcast i16* %3766 to <16 x i16>*
  %3768 = load <16 x i16>, <16 x i16>* %3767, align 2, !tbaa !399
  %3769 = add nsw i64 %3614, %.pre-phi3337
  %3770 = getelementptr inbounds i16, i16* %blur_x, i64 %3769
  %3771 = bitcast i16* %3770 to <16 x i16>*
  %3772 = load <16 x i16>, <16 x i16>* %3771, align 2, !tbaa !399
  %3773 = getelementptr inbounds i16, i16* %3770, i64 16
  %3774 = bitcast i16* %3773 to <16 x i16>*
  %3775 = load <16 x i16>, <16 x i16>* %3774, align 2, !tbaa !399
  %3776 = add nsw i64 %3617, %.pre-phi3337
  %3777 = getelementptr inbounds i16, i16* %blur_x, i64 %3776
  %3778 = bitcast i16* %3777 to <16 x i16>*
  %3779 = load <16 x i16>, <16 x i16>* %3778, align 2, !tbaa !399
  %3780 = getelementptr inbounds i16, i16* %3777, i64 16
  %3781 = bitcast i16* %3780 to <16 x i16>*
  %3782 = load <16 x i16>, <16 x i16>* %3781, align 2, !tbaa !399
  %3783 = add <16 x i16> %3772, %3765
  %3784 = add <16 x i16> %3783, %3779
  %3785 = add <16 x i16> %3775, %3768
  %3786 = add <16 x i16> %3785, %3782
  %3787 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3784, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3788 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3786, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3789 = shufflevector <16 x i16> %3787, <16 x i16> %3788, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3790 = lshr <32 x i16> %3789, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3791 = shufflevector <32 x i16> %3790, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3792 = add nsw i64 %3621, %.pre-phi3337
  %3793 = getelementptr inbounds i16, i16* %65, i64 %3792
  %3794 = bitcast i16* %3793 to <16 x i16>*
  store <16 x i16> %3791, <16 x i16>* %3794, align 2, !tbaa !401
  %3795 = shufflevector <32 x i16> %3790, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3796 = getelementptr inbounds i16, i16* %3793, i64 16
  %3797 = bitcast i16* %3796 to <16 x i16>*
  store <16 x i16> %3795, <16 x i16>* %3797, align 2, !tbaa !401
  %indvars.iv.next3153 = add nuw nsw i64 %indvars.iv3152, 1
  %.not2631 = icmp eq i64 %indvars.iv.next3153, %180
  br i1 %.not2631, label %"end for blur_y.s0.x.x.rebased213", label %"for blur_y.s0.x.x.rebased212"

"for blur_y.s0.x.x.rebased220":                   ; preds = %"for blur_y.s0.x.x.rebased220.preheader", %"consume blur_x228"
  %blur_y.s0.x.x.rebased222 = phi i32 [ %3876, %"consume blur_x228" ], [ 0, %"for blur_y.s0.x.x.rebased220.preheader" ]
  %3798 = add nsw i32 %blur_y.s0.x.x.rebased222, %t1582
  %a140 = shl nsw i32 %3798, 5
  %3799 = icmp sgt i32 %a14, %a140
  %b146 = select i1 %3799, i32 %a140, i32 %a14
  %3800 = icmp slt i32 %3798, 1
  %3801 = icmp sgt i32 %4, %a140
  %3802 = or i1 %3800, %3801
  br i1 %3802, label %"produce blur_x226", label %"consume blur_x228"

"end for blur_y.s0.x.x.rebased221":               ; preds = %"consume blur_x228", %"end for blur_y.s0.x.x.rebased213"
  br i1 %34, label %"produce blur_x232", label %after_bb229

"produce blur_x226":                              ; preds = %"for blur_y.s0.x.x.rebased220"
  %3803 = icmp slt i32 %b146, %4
  %blur_x.s0.x.v1.base.s227 = select i1 %3803, i32 %b146, i32 %4
  %t789 = add nsw i32 %blur_x.s0.x.v1.base.s227, %t1761
  %3804 = sext i32 %t789 to i64
  %3805 = getelementptr inbounds i16, i16* %read_input, i64 %3804
  %3806 = getelementptr inbounds i16, i16* %3805, i64 1
  %3807 = bitcast i16* %3806 to <16 x i16>*
  %3808 = load <16 x i16>, <16 x i16>* %3807, align 2, !tbaa !396
  %3809 = getelementptr inbounds i16, i16* %3805, i64 17
  %3810 = bitcast i16* %3809 to <16 x i16>*
  %3811 = load <16 x i16>, <16 x i16>* %3810, align 2, !tbaa !396
  %3812 = getelementptr inbounds i16, i16* %3805, i64 2
  %3813 = bitcast i16* %3812 to <16 x i16>*
  %3814 = load <16 x i16>, <16 x i16>* %3813, align 2, !tbaa !396
  %3815 = getelementptr inbounds i16, i16* %3805, i64 18
  %3816 = bitcast i16* %3815 to <16 x i16>*
  %3817 = load <16 x i16>, <16 x i16>* %3816, align 2, !tbaa !396
  %3818 = bitcast i16* %3805 to <16 x i16>*
  %3819 = load <16 x i16>, <16 x i16>* %3818, align 2, !tbaa !396
  %3820 = getelementptr inbounds i16, i16* %3805, i64 16
  %3821 = bitcast i16* %3820 to <16 x i16>*
  %3822 = load <16 x i16>, <16 x i16>* %3821, align 2, !tbaa !396
  %3823 = add <16 x i16> %3814, %3808
  %3824 = add <16 x i16> %3823, %3819
  %3825 = add <16 x i16> %3817, %3811
  %3826 = add <16 x i16> %3825, %3822
  %3827 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3824, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3828 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3826, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3829 = shufflevector <16 x i16> %3827, <16 x i16> %3828, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3830 = lshr <32 x i16> %3829, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3831 = shufflevector <32 x i16> %3830, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3832 = sext i32 %blur_x.s0.x.v1.base.s227 to i64
  %3833 = add nsw i64 %3832, %3713
  %3834 = getelementptr inbounds i16, i16* %blur_x, i64 %3833
  %3835 = bitcast i16* %3834 to <16 x i16>*
  store <16 x i16> %3831, <16 x i16>* %3835, align 2, !tbaa !399
  %3836 = shufflevector <32 x i16> %3830, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3837 = getelementptr inbounds i16, i16* %3834, i64 16
  %3838 = bitcast i16* %3837 to <16 x i16>*
  store <16 x i16> %3836, <16 x i16>* %3838, align 2, !tbaa !399
  br label %"consume blur_x228"

"consume blur_x228":                              ; preds = %"for blur_y.s0.x.x.rebased220", %"produce blur_x226"
  %3839 = sext i32 %b146 to i64
  %3840 = add nsw i64 %3716, %3839
  %3841 = getelementptr inbounds i16, i16* %blur_x, i64 %3840
  %3842 = bitcast i16* %3841 to <16 x i16>*
  %3843 = load <16 x i16>, <16 x i16>* %3842, align 2, !tbaa !399
  %3844 = getelementptr inbounds i16, i16* %3841, i64 16
  %3845 = bitcast i16* %3844 to <16 x i16>*
  %3846 = load <16 x i16>, <16 x i16>* %3845, align 2, !tbaa !399
  %3847 = add nsw i64 %3719, %3839
  %3848 = getelementptr inbounds i16, i16* %blur_x, i64 %3847
  %3849 = bitcast i16* %3848 to <16 x i16>*
  %3850 = load <16 x i16>, <16 x i16>* %3849, align 2, !tbaa !399
  %3851 = getelementptr inbounds i16, i16* %3848, i64 16
  %3852 = bitcast i16* %3851 to <16 x i16>*
  %3853 = load <16 x i16>, <16 x i16>* %3852, align 2, !tbaa !399
  %3854 = add nsw i64 %3722, %3839
  %3855 = getelementptr inbounds i16, i16* %blur_x, i64 %3854
  %3856 = bitcast i16* %3855 to <16 x i16>*
  %3857 = load <16 x i16>, <16 x i16>* %3856, align 2, !tbaa !399
  %3858 = getelementptr inbounds i16, i16* %3855, i64 16
  %3859 = bitcast i16* %3858 to <16 x i16>*
  %3860 = load <16 x i16>, <16 x i16>* %3859, align 2, !tbaa !399
  %3861 = add <16 x i16> %3850, %3843
  %3862 = add <16 x i16> %3861, %3857
  %3863 = add <16 x i16> %3853, %3846
  %3864 = add <16 x i16> %3863, %3860
  %3865 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3862, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3866 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3864, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3867 = shufflevector <16 x i16> %3865, <16 x i16> %3866, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3868 = lshr <32 x i16> %3867, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3869 = shufflevector <32 x i16> %3868, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3870 = add nsw i64 %3726, %3839
  %3871 = getelementptr inbounds i16, i16* %65, i64 %3870
  %3872 = bitcast i16* %3871 to <16 x i16>*
  store <16 x i16> %3869, <16 x i16>* %3872, align 2, !tbaa !401
  %3873 = shufflevector <32 x i16> %3868, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3874 = getelementptr inbounds i16, i16* %3871, i64 16
  %3875 = bitcast i16* %3874 to <16 x i16>*
  store <16 x i16> %3873, <16 x i16>* %3875, align 2, !tbaa !401
  %3876 = add nuw nsw i32 %blur_y.s0.x.x.rebased222, 1
  %.not2630 = icmp eq i32 %3876, %t1639
  br i1 %.not2630, label %"end for blur_y.s0.x.x.rebased221", label %"for blur_y.s0.x.x.rebased220"

after_bb229:                                      ; preds = %"end for blur_y.s0.x.x.rebased221", %"produce blur_x232"
  br i1 %99, label %"for blur_y.s0.x.x.rebased234.preheader", label %"end for blur_y.s0.x.x.rebased235", !prof !386

"for blur_y.s0.x.x.rebased234.preheader":         ; preds = %after_bb229
  %3877 = sext i32 %t1650 to i64
  %3878 = zext i32 %.pre-phi3313 to i64
  %3879 = mul nsw i64 %3878, %108
  %3880 = sub nsw i64 %3879, %95
  %3881 = zext i32 %.pre-phi3317 to i64
  %3882 = mul nsw i64 %3881, %108
  %3883 = sub nsw i64 %3882, %95
  %3884 = zext i32 %.pre-phi to i64
  %3885 = mul nsw i64 %3884, %108
  %3886 = sub nsw i64 %3885, %95
  %3887 = sext i32 %a26 to i64
  %3888 = add nsw i64 %3887, 8
  %3889 = mul nsw i64 %3888, %109
  %3890 = add nsw i64 %3889, %112
  br label %"for blur_y.s0.x.x.rebased234"

"produce blur_x232":                              ; preds = %"end for blur_y.s0.x.x.rebased221"
  %3891 = getelementptr inbounds i16, i16* %read_input, i64 %127
  %3892 = getelementptr inbounds i16, i16* %3891, i64 -31
  %3893 = bitcast i16* %3892 to <16 x i16>*
  %3894 = load <16 x i16>, <16 x i16>* %3893, align 2, !tbaa !396
  %3895 = getelementptr inbounds i16, i16* %3891, i64 -15
  %3896 = bitcast i16* %3895 to <16 x i16>*
  %3897 = load <16 x i16>, <16 x i16>* %3896, align 2, !tbaa !396
  %3898 = getelementptr inbounds i16, i16* %3891, i64 -30
  %3899 = bitcast i16* %3898 to <16 x i16>*
  %3900 = load <16 x i16>, <16 x i16>* %3899, align 2, !tbaa !396
  %3901 = getelementptr inbounds i16, i16* %3891, i64 -14
  %3902 = bitcast i16* %3901 to <16 x i16>*
  %3903 = load <16 x i16>, <16 x i16>* %3902, align 2, !tbaa !396
  %3904 = getelementptr inbounds i16, i16* %3891, i64 -32
  %3905 = bitcast i16* %3904 to <16 x i16>*
  %3906 = load <16 x i16>, <16 x i16>* %3905, align 2, !tbaa !396
  %3907 = getelementptr inbounds i16, i16* %3891, i64 -16
  %3908 = bitcast i16* %3907 to <16 x i16>*
  %3909 = load <16 x i16>, <16 x i16>* %3908, align 2, !tbaa !396
  %3910 = add <16 x i16> %3900, %3894
  %3911 = add <16 x i16> %3910, %3906
  %3912 = add <16 x i16> %3903, %3897
  %3913 = add <16 x i16> %3912, %3909
  %3914 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3911, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3915 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3913, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3916 = shufflevector <16 x i16> %3914, <16 x i16> %3915, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3917 = lshr <32 x i16> %3916, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3918 = shufflevector <32 x i16> %3917, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3919 = zext i32 %.pre-phi3317 to i64
  %3920 = mul nsw i64 %96, %3919
  %3921 = add nsw i64 %98, %3920
  %3922 = getelementptr inbounds i16, i16* %blur_x, i64 %3921
  %3923 = getelementptr inbounds i16, i16* %3922, i64 -32
  %3924 = bitcast i16* %3923 to <16 x i16>*
  store <16 x i16> %3918, <16 x i16>* %3924, align 2, !tbaa !399
  %3925 = shufflevector <32 x i16> %3917, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3926 = getelementptr inbounds i16, i16* %3922, i64 -16
  %3927 = bitcast i16* %3926 to <16 x i16>*
  store <16 x i16> %3925, <16 x i16>* %3927, align 2, !tbaa !399
  %3928 = zext i32 %.pre-phi3313 to i64
  %3929 = mul nsw i64 %3928, %108
  %3930 = add nsw i64 %3929, %93
  %3931 = getelementptr inbounds i16, i16* %blur_x, i64 %3930
  %3932 = getelementptr inbounds i16, i16* %3931, i64 -32
  %3933 = bitcast i16* %3932 to <16 x i16>*
  %3934 = load <16 x i16>, <16 x i16>* %3933, align 2, !tbaa !399
  %3935 = getelementptr inbounds i16, i16* %3931, i64 -16
  %3936 = bitcast i16* %3935 to <16 x i16>*
  %3937 = load <16 x i16>, <16 x i16>* %3936, align 2, !tbaa !399
  %3938 = mul nsw i64 %3919, %108
  %3939 = add nsw i64 %3938, %93
  %3940 = getelementptr inbounds i16, i16* %blur_x, i64 %3939
  %3941 = getelementptr inbounds i16, i16* %3940, i64 -32
  %3942 = bitcast i16* %3941 to <16 x i16>*
  %3943 = load <16 x i16>, <16 x i16>* %3942, align 2, !tbaa !399
  %3944 = getelementptr inbounds i16, i16* %3940, i64 -16
  %3945 = bitcast i16* %3944 to <16 x i16>*
  %3946 = load <16 x i16>, <16 x i16>* %3945, align 2, !tbaa !399
  %3947 = zext i32 %.pre-phi to i64
  %3948 = mul nsw i64 %3947, %108
  %3949 = add nsw i64 %3948, %93
  %3950 = getelementptr inbounds i16, i16* %blur_x, i64 %3949
  %3951 = getelementptr inbounds i16, i16* %3950, i64 -32
  %3952 = bitcast i16* %3951 to <16 x i16>*
  %3953 = load <16 x i16>, <16 x i16>* %3952, align 2, !tbaa !399
  %3954 = getelementptr inbounds i16, i16* %3950, i64 -16
  %3955 = bitcast i16* %3954 to <16 x i16>*
  %3956 = load <16 x i16>, <16 x i16>* %3955, align 2, !tbaa !399
  %3957 = add <16 x i16> %3943, %3934
  %3958 = add <16 x i16> %3957, %3953
  %3959 = add <16 x i16> %3946, %3937
  %3960 = add <16 x i16> %3959, %3956
  %3961 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3958, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3962 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3960, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3963 = shufflevector <16 x i16> %3961, <16 x i16> %3962, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3964 = lshr <32 x i16> %3963, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3965 = shufflevector <32 x i16> %3964, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3966 = sext i32 %a26 to i64
  %3967 = add nsw i64 %3966, 8
  %3968 = mul nsw i64 %3967, %109
  %3969 = add nsw i64 %111, %3968
  %3970 = getelementptr inbounds i16, i16* %65, i64 %3969
  %3971 = getelementptr inbounds i16, i16* %3970, i64 -32
  %3972 = bitcast i16* %3971 to <16 x i16>*
  store <16 x i16> %3965, <16 x i16>* %3972, align 2, !tbaa !401
  %3973 = shufflevector <32 x i16> %3964, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3974 = getelementptr inbounds i16, i16* %3970, i64 -16
  %3975 = bitcast i16* %3974 to <16 x i16>*
  store <16 x i16> %3973, <16 x i16>* %3975, align 2, !tbaa !401
  br label %after_bb229

"for blur_y.s0.x.x.rebased234":                   ; preds = %"for blur_y.s0.x.x.rebased234.preheader", %"consume blur_x241"
  %indvars.iv3155 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased234.preheader" ], [ %indvars.iv.next3156, %"consume blur_x241" ]
  %3976 = add nsw i64 %indvars.iv3155, %100
  %3977 = icmp slt i64 %3976, 1
  %3978 = trunc i64 %3976 to i32
  %3979 = shl nsw i32 %3978, 5
  %3980 = icmp sgt i32 %4, %3979
  %3981 = or i1 %3977, %3980
  br i1 %3981, label %"produce blur_x240", label %"for blur_y.s0.x.x.rebased234.consume blur_x241_crit_edge"

"for blur_y.s0.x.x.rebased234.consume blur_x241_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased234"
  %.pre3338 = shl nsw i64 %3976, 5
  br label %"consume blur_x241"

"end for blur_y.s0.x.x.rebased235":               ; preds = %"consume blur_x241", %after_bb229
  br i1 %101, label %"for blur_y.s0.x.x.rebased242.preheader", label %"end for blur_y.s0.x.x.rebased243", !prof !386

"for blur_y.s0.x.x.rebased242.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased235"
  %3982 = sext i32 %t1650 to i64
  %3983 = zext i32 %.pre-phi3313 to i64
  %3984 = mul nsw i64 %3983, %108
  %3985 = sub nsw i64 %3984, %95
  %3986 = zext i32 %.pre-phi3317 to i64
  %3987 = mul nsw i64 %3986, %108
  %3988 = sub nsw i64 %3987, %95
  %3989 = zext i32 %.pre-phi to i64
  %3990 = mul nsw i64 %3989, %108
  %3991 = sub nsw i64 %3990, %95
  %3992 = sext i32 %a26 to i64
  %3993 = add nsw i64 %3992, 8
  %3994 = mul nsw i64 %3993, %109
  %3995 = add nsw i64 %3994, %112
  br label %"for blur_y.s0.x.x.rebased242"

"produce blur_x240":                              ; preds = %"for blur_y.s0.x.x.rebased234"
  %t800 = add nsw i32 %3979, %t1777
  %3996 = sext i32 %t800 to i64
  %3997 = getelementptr inbounds i16, i16* %read_input, i64 %3996
  %3998 = getelementptr inbounds i16, i16* %3997, i64 1
  %3999 = bitcast i16* %3998 to <16 x i16>*
  %4000 = load <16 x i16>, <16 x i16>* %3999, align 2, !tbaa !396
  %4001 = getelementptr inbounds i16, i16* %3997, i64 17
  %4002 = bitcast i16* %4001 to <16 x i16>*
  %4003 = load <16 x i16>, <16 x i16>* %4002, align 2, !tbaa !396
  %4004 = getelementptr inbounds i16, i16* %3997, i64 2
  %4005 = bitcast i16* %4004 to <16 x i16>*
  %4006 = load <16 x i16>, <16 x i16>* %4005, align 2, !tbaa !396
  %4007 = getelementptr inbounds i16, i16* %3997, i64 18
  %4008 = bitcast i16* %4007 to <16 x i16>*
  %4009 = load <16 x i16>, <16 x i16>* %4008, align 2, !tbaa !396
  %4010 = bitcast i16* %3997 to <16 x i16>*
  %4011 = load <16 x i16>, <16 x i16>* %4010, align 2, !tbaa !396
  %4012 = getelementptr inbounds i16, i16* %3997, i64 16
  %4013 = bitcast i16* %4012 to <16 x i16>*
  %4014 = load <16 x i16>, <16 x i16>* %4013, align 2, !tbaa !396
  %4015 = add <16 x i16> %4006, %4000
  %4016 = add <16 x i16> %4015, %4011
  %4017 = add <16 x i16> %4009, %4003
  %4018 = add <16 x i16> %4017, %4014
  %4019 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4016, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4020 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4018, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4021 = shufflevector <16 x i16> %4019, <16 x i16> %4020, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4022 = lshr <32 x i16> %4021, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4023 = shufflevector <32 x i16> %4022, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4024 = shl nsw i64 %3976, 5
  %4025 = add nsw i64 %4024, %3877
  %4026 = getelementptr inbounds i16, i16* %blur_x, i64 %4025
  %4027 = bitcast i16* %4026 to <16 x i16>*
  store <16 x i16> %4023, <16 x i16>* %4027, align 2, !tbaa !399
  %4028 = shufflevector <32 x i16> %4022, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4029 = getelementptr inbounds i16, i16* %4026, i64 16
  %4030 = bitcast i16* %4029 to <16 x i16>*
  store <16 x i16> %4028, <16 x i16>* %4030, align 2, !tbaa !399
  br label %"consume blur_x241"

"consume blur_x241":                              ; preds = %"for blur_y.s0.x.x.rebased234.consume blur_x241_crit_edge", %"produce blur_x240"
  %.pre-phi3339 = phi i64 [ %.pre3338, %"for blur_y.s0.x.x.rebased234.consume blur_x241_crit_edge" ], [ %4024, %"produce blur_x240" ]
  %4031 = add nsw i64 %3880, %.pre-phi3339
  %4032 = getelementptr inbounds i16, i16* %blur_x, i64 %4031
  %4033 = bitcast i16* %4032 to <16 x i16>*
  %4034 = load <16 x i16>, <16 x i16>* %4033, align 2, !tbaa !399
  %4035 = getelementptr inbounds i16, i16* %4032, i64 16
  %4036 = bitcast i16* %4035 to <16 x i16>*
  %4037 = load <16 x i16>, <16 x i16>* %4036, align 2, !tbaa !399
  %4038 = add nsw i64 %3883, %.pre-phi3339
  %4039 = getelementptr inbounds i16, i16* %blur_x, i64 %4038
  %4040 = bitcast i16* %4039 to <16 x i16>*
  %4041 = load <16 x i16>, <16 x i16>* %4040, align 2, !tbaa !399
  %4042 = getelementptr inbounds i16, i16* %4039, i64 16
  %4043 = bitcast i16* %4042 to <16 x i16>*
  %4044 = load <16 x i16>, <16 x i16>* %4043, align 2, !tbaa !399
  %4045 = add nsw i64 %3886, %.pre-phi3339
  %4046 = getelementptr inbounds i16, i16* %blur_x, i64 %4045
  %4047 = bitcast i16* %4046 to <16 x i16>*
  %4048 = load <16 x i16>, <16 x i16>* %4047, align 2, !tbaa !399
  %4049 = getelementptr inbounds i16, i16* %4046, i64 16
  %4050 = bitcast i16* %4049 to <16 x i16>*
  %4051 = load <16 x i16>, <16 x i16>* %4050, align 2, !tbaa !399
  %4052 = add <16 x i16> %4041, %4034
  %4053 = add <16 x i16> %4052, %4048
  %4054 = add <16 x i16> %4044, %4037
  %4055 = add <16 x i16> %4054, %4051
  %4056 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4053, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4057 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4055, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4058 = shufflevector <16 x i16> %4056, <16 x i16> %4057, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4059 = lshr <32 x i16> %4058, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4060 = shufflevector <32 x i16> %4059, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4061 = add nsw i64 %3890, %.pre-phi3339
  %4062 = getelementptr inbounds i16, i16* %65, i64 %4061
  %4063 = bitcast i16* %4062 to <16 x i16>*
  store <16 x i16> %4060, <16 x i16>* %4063, align 2, !tbaa !401
  %4064 = shufflevector <32 x i16> %4059, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4065 = getelementptr inbounds i16, i16* %4062, i64 16
  %4066 = bitcast i16* %4065 to <16 x i16>*
  store <16 x i16> %4064, <16 x i16>* %4066, align 2, !tbaa !401
  %indvars.iv.next3156 = add nuw nsw i64 %indvars.iv3155, 1
  %.not2629 = icmp eq i64 %indvars.iv.next3156, %180
  br i1 %.not2629, label %"end for blur_y.s0.x.x.rebased235", label %"for blur_y.s0.x.x.rebased234"

"for blur_y.s0.x.x.rebased242":                   ; preds = %"for blur_y.s0.x.x.rebased242.preheader", %"consume blur_x250"
  %blur_y.s0.x.x.rebased244 = phi i32 [ %4145, %"consume blur_x250" ], [ 0, %"for blur_y.s0.x.x.rebased242.preheader" ]
  %4067 = add nsw i32 %blur_y.s0.x.x.rebased244, %t1582
  %a147 = shl nsw i32 %4067, 5
  %4068 = icmp sgt i32 %a14, %a147
  %b153 = select i1 %4068, i32 %a147, i32 %a14
  %4069 = icmp slt i32 %4067, 1
  %4070 = icmp sgt i32 %4, %a147
  %4071 = or i1 %4069, %4070
  br i1 %4071, label %"produce blur_x248", label %"consume blur_x250"

"end for blur_y.s0.x.x.rebased243":               ; preds = %"consume blur_x250", %"end for blur_y.s0.x.x.rebased235"
  br i1 %34, label %"produce blur_x254", label %after_bb251

"produce blur_x248":                              ; preds = %"for blur_y.s0.x.x.rebased242"
  %4072 = icmp slt i32 %b153, %4
  %blur_x.s0.x.v1.base.s249 = select i1 %4072, i32 %b153, i32 %4
  %t805 = add nsw i32 %blur_x.s0.x.v1.base.s249, %t1777
  %4073 = sext i32 %t805 to i64
  %4074 = getelementptr inbounds i16, i16* %read_input, i64 %4073
  %4075 = getelementptr inbounds i16, i16* %4074, i64 1
  %4076 = bitcast i16* %4075 to <16 x i16>*
  %4077 = load <16 x i16>, <16 x i16>* %4076, align 2, !tbaa !396
  %4078 = getelementptr inbounds i16, i16* %4074, i64 17
  %4079 = bitcast i16* %4078 to <16 x i16>*
  %4080 = load <16 x i16>, <16 x i16>* %4079, align 2, !tbaa !396
  %4081 = getelementptr inbounds i16, i16* %4074, i64 2
  %4082 = bitcast i16* %4081 to <16 x i16>*
  %4083 = load <16 x i16>, <16 x i16>* %4082, align 2, !tbaa !396
  %4084 = getelementptr inbounds i16, i16* %4074, i64 18
  %4085 = bitcast i16* %4084 to <16 x i16>*
  %4086 = load <16 x i16>, <16 x i16>* %4085, align 2, !tbaa !396
  %4087 = bitcast i16* %4074 to <16 x i16>*
  %4088 = load <16 x i16>, <16 x i16>* %4087, align 2, !tbaa !396
  %4089 = getelementptr inbounds i16, i16* %4074, i64 16
  %4090 = bitcast i16* %4089 to <16 x i16>*
  %4091 = load <16 x i16>, <16 x i16>* %4090, align 2, !tbaa !396
  %4092 = add <16 x i16> %4083, %4077
  %4093 = add <16 x i16> %4092, %4088
  %4094 = add <16 x i16> %4086, %4080
  %4095 = add <16 x i16> %4094, %4091
  %4096 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4093, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4097 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4095, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4098 = shufflevector <16 x i16> %4096, <16 x i16> %4097, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4099 = lshr <32 x i16> %4098, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4100 = shufflevector <32 x i16> %4099, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4101 = sext i32 %blur_x.s0.x.v1.base.s249 to i64
  %4102 = add nsw i64 %4101, %3982
  %4103 = getelementptr inbounds i16, i16* %blur_x, i64 %4102
  %4104 = bitcast i16* %4103 to <16 x i16>*
  store <16 x i16> %4100, <16 x i16>* %4104, align 2, !tbaa !399
  %4105 = shufflevector <32 x i16> %4099, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4106 = getelementptr inbounds i16, i16* %4103, i64 16
  %4107 = bitcast i16* %4106 to <16 x i16>*
  store <16 x i16> %4105, <16 x i16>* %4107, align 2, !tbaa !399
  br label %"consume blur_x250"

"consume blur_x250":                              ; preds = %"for blur_y.s0.x.x.rebased242", %"produce blur_x248"
  %4108 = sext i32 %b153 to i64
  %4109 = add nsw i64 %3985, %4108
  %4110 = getelementptr inbounds i16, i16* %blur_x, i64 %4109
  %4111 = bitcast i16* %4110 to <16 x i16>*
  %4112 = load <16 x i16>, <16 x i16>* %4111, align 2, !tbaa !399
  %4113 = getelementptr inbounds i16, i16* %4110, i64 16
  %4114 = bitcast i16* %4113 to <16 x i16>*
  %4115 = load <16 x i16>, <16 x i16>* %4114, align 2, !tbaa !399
  %4116 = add nsw i64 %3988, %4108
  %4117 = getelementptr inbounds i16, i16* %blur_x, i64 %4116
  %4118 = bitcast i16* %4117 to <16 x i16>*
  %4119 = load <16 x i16>, <16 x i16>* %4118, align 2, !tbaa !399
  %4120 = getelementptr inbounds i16, i16* %4117, i64 16
  %4121 = bitcast i16* %4120 to <16 x i16>*
  %4122 = load <16 x i16>, <16 x i16>* %4121, align 2, !tbaa !399
  %4123 = add nsw i64 %3991, %4108
  %4124 = getelementptr inbounds i16, i16* %blur_x, i64 %4123
  %4125 = bitcast i16* %4124 to <16 x i16>*
  %4126 = load <16 x i16>, <16 x i16>* %4125, align 2, !tbaa !399
  %4127 = getelementptr inbounds i16, i16* %4124, i64 16
  %4128 = bitcast i16* %4127 to <16 x i16>*
  %4129 = load <16 x i16>, <16 x i16>* %4128, align 2, !tbaa !399
  %4130 = add <16 x i16> %4119, %4112
  %4131 = add <16 x i16> %4130, %4126
  %4132 = add <16 x i16> %4122, %4115
  %4133 = add <16 x i16> %4132, %4129
  %4134 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4131, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4135 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4133, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4136 = shufflevector <16 x i16> %4134, <16 x i16> %4135, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4137 = lshr <32 x i16> %4136, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4138 = shufflevector <32 x i16> %4137, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4139 = add nsw i64 %3995, %4108
  %4140 = getelementptr inbounds i16, i16* %65, i64 %4139
  %4141 = bitcast i16* %4140 to <16 x i16>*
  store <16 x i16> %4138, <16 x i16>* %4141, align 2, !tbaa !401
  %4142 = shufflevector <32 x i16> %4137, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4143 = getelementptr inbounds i16, i16* %4140, i64 16
  %4144 = bitcast i16* %4143 to <16 x i16>*
  store <16 x i16> %4142, <16 x i16>* %4144, align 2, !tbaa !401
  %4145 = add nuw nsw i32 %blur_y.s0.x.x.rebased244, 1
  %.not2628 = icmp eq i32 %4145, %t1639
  br i1 %.not2628, label %"end for blur_y.s0.x.x.rebased243", label %"for blur_y.s0.x.x.rebased242"

after_bb251:                                      ; preds = %"end for blur_y.s0.x.x.rebased243", %"produce blur_x254"
  br i1 %99, label %"for blur_y.s0.x.x.rebased256.preheader", label %"end for blur_y.s0.x.x.rebased257", !prof !386

"for blur_y.s0.x.x.rebased256.preheader":         ; preds = %after_bb251
  %4146 = sext i32 %t1666 to i64
  %4147 = zext i32 %.pre-phi3317 to i64
  %4148 = mul nsw i64 %4147, %108
  %4149 = sub nsw i64 %4148, %95
  %4150 = zext i32 %.pre-phi3323 to i64
  %4151 = mul nsw i64 %4150, %108
  %4152 = sub nsw i64 %4151, %95
  %4153 = zext i32 %.pre-phi3313 to i64
  %4154 = mul nsw i64 %4153, %108
  %4155 = sub nsw i64 %4154, %95
  %4156 = sext i32 %a26 to i64
  %4157 = add nsw i64 %4156, 9
  %4158 = mul nsw i64 %4157, %109
  %4159 = add nsw i64 %4158, %112
  br label %"for blur_y.s0.x.x.rebased256"

"produce blur_x254":                              ; preds = %"end for blur_y.s0.x.x.rebased243"
  %4160 = getelementptr inbounds i16, i16* %read_input, i64 %129
  %4161 = getelementptr inbounds i16, i16* %4160, i64 -31
  %4162 = bitcast i16* %4161 to <16 x i16>*
  %4163 = load <16 x i16>, <16 x i16>* %4162, align 2, !tbaa !396
  %4164 = getelementptr inbounds i16, i16* %4160, i64 -15
  %4165 = bitcast i16* %4164 to <16 x i16>*
  %4166 = load <16 x i16>, <16 x i16>* %4165, align 2, !tbaa !396
  %4167 = getelementptr inbounds i16, i16* %4160, i64 -30
  %4168 = bitcast i16* %4167 to <16 x i16>*
  %4169 = load <16 x i16>, <16 x i16>* %4168, align 2, !tbaa !396
  %4170 = getelementptr inbounds i16, i16* %4160, i64 -14
  %4171 = bitcast i16* %4170 to <16 x i16>*
  %4172 = load <16 x i16>, <16 x i16>* %4171, align 2, !tbaa !396
  %4173 = getelementptr inbounds i16, i16* %4160, i64 -32
  %4174 = bitcast i16* %4173 to <16 x i16>*
  %4175 = load <16 x i16>, <16 x i16>* %4174, align 2, !tbaa !396
  %4176 = getelementptr inbounds i16, i16* %4160, i64 -16
  %4177 = bitcast i16* %4176 to <16 x i16>*
  %4178 = load <16 x i16>, <16 x i16>* %4177, align 2, !tbaa !396
  %4179 = add <16 x i16> %4169, %4163
  %4180 = add <16 x i16> %4179, %4175
  %4181 = add <16 x i16> %4172, %4166
  %4182 = add <16 x i16> %4181, %4178
  %4183 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4180, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4184 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4182, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4185 = shufflevector <16 x i16> %4183, <16 x i16> %4184, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4186 = lshr <32 x i16> %4185, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4187 = shufflevector <32 x i16> %4186, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4188 = zext i32 %.pre-phi3323 to i64
  %4189 = mul nsw i64 %96, %4188
  %4190 = add nsw i64 %98, %4189
  %4191 = getelementptr inbounds i16, i16* %blur_x, i64 %4190
  %4192 = getelementptr inbounds i16, i16* %4191, i64 -32
  %4193 = bitcast i16* %4192 to <16 x i16>*
  store <16 x i16> %4187, <16 x i16>* %4193, align 2, !tbaa !399
  %4194 = shufflevector <32 x i16> %4186, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4195 = getelementptr inbounds i16, i16* %4191, i64 -16
  %4196 = bitcast i16* %4195 to <16 x i16>*
  store <16 x i16> %4194, <16 x i16>* %4196, align 2, !tbaa !399
  %4197 = zext i32 %.pre-phi3317 to i64
  %4198 = mul nsw i64 %4197, %108
  %4199 = add nsw i64 %4198, %93
  %4200 = getelementptr inbounds i16, i16* %blur_x, i64 %4199
  %4201 = getelementptr inbounds i16, i16* %4200, i64 -32
  %4202 = bitcast i16* %4201 to <16 x i16>*
  %4203 = load <16 x i16>, <16 x i16>* %4202, align 2, !tbaa !399
  %4204 = getelementptr inbounds i16, i16* %4200, i64 -16
  %4205 = bitcast i16* %4204 to <16 x i16>*
  %4206 = load <16 x i16>, <16 x i16>* %4205, align 2, !tbaa !399
  %4207 = mul nsw i64 %4188, %108
  %4208 = add nsw i64 %4207, %93
  %4209 = getelementptr inbounds i16, i16* %blur_x, i64 %4208
  %4210 = getelementptr inbounds i16, i16* %4209, i64 -32
  %4211 = bitcast i16* %4210 to <16 x i16>*
  %4212 = load <16 x i16>, <16 x i16>* %4211, align 2, !tbaa !399
  %4213 = getelementptr inbounds i16, i16* %4209, i64 -16
  %4214 = bitcast i16* %4213 to <16 x i16>*
  %4215 = load <16 x i16>, <16 x i16>* %4214, align 2, !tbaa !399
  %4216 = zext i32 %.pre-phi3313 to i64
  %4217 = mul nsw i64 %4216, %108
  %4218 = add nsw i64 %4217, %93
  %4219 = getelementptr inbounds i16, i16* %blur_x, i64 %4218
  %4220 = getelementptr inbounds i16, i16* %4219, i64 -32
  %4221 = bitcast i16* %4220 to <16 x i16>*
  %4222 = load <16 x i16>, <16 x i16>* %4221, align 2, !tbaa !399
  %4223 = getelementptr inbounds i16, i16* %4219, i64 -16
  %4224 = bitcast i16* %4223 to <16 x i16>*
  %4225 = load <16 x i16>, <16 x i16>* %4224, align 2, !tbaa !399
  %4226 = add <16 x i16> %4212, %4203
  %4227 = add <16 x i16> %4226, %4222
  %4228 = add <16 x i16> %4215, %4206
  %4229 = add <16 x i16> %4228, %4225
  %4230 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4227, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4231 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4229, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4232 = shufflevector <16 x i16> %4230, <16 x i16> %4231, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4233 = lshr <32 x i16> %4232, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4234 = shufflevector <32 x i16> %4233, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4235 = sext i32 %a26 to i64
  %4236 = add nsw i64 %4235, 9
  %4237 = mul nsw i64 %4236, %109
  %4238 = add nsw i64 %111, %4237
  %4239 = getelementptr inbounds i16, i16* %65, i64 %4238
  %4240 = getelementptr inbounds i16, i16* %4239, i64 -32
  %4241 = bitcast i16* %4240 to <16 x i16>*
  store <16 x i16> %4234, <16 x i16>* %4241, align 2, !tbaa !401
  %4242 = shufflevector <32 x i16> %4233, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4243 = getelementptr inbounds i16, i16* %4239, i64 -16
  %4244 = bitcast i16* %4243 to <16 x i16>*
  store <16 x i16> %4242, <16 x i16>* %4244, align 2, !tbaa !401
  br label %after_bb251

"for blur_y.s0.x.x.rebased256":                   ; preds = %"for blur_y.s0.x.x.rebased256.preheader", %"consume blur_x263"
  %indvars.iv3158 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased256.preheader" ], [ %indvars.iv.next3159, %"consume blur_x263" ]
  %4245 = add nsw i64 %indvars.iv3158, %100
  %4246 = icmp slt i64 %4245, 1
  %4247 = trunc i64 %4245 to i32
  %4248 = shl nsw i32 %4247, 5
  %4249 = icmp sgt i32 %4, %4248
  %4250 = or i1 %4246, %4249
  br i1 %4250, label %"produce blur_x262", label %"for blur_y.s0.x.x.rebased256.consume blur_x263_crit_edge"

"for blur_y.s0.x.x.rebased256.consume blur_x263_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased256"
  %.pre3340 = shl nsw i64 %4245, 5
  br label %"consume blur_x263"

"end for blur_y.s0.x.x.rebased257":               ; preds = %"consume blur_x263", %after_bb251
  br i1 %101, label %"for blur_y.s0.x.x.rebased264.preheader", label %"end for blur_y.s0.x.x.rebased265", !prof !386

"for blur_y.s0.x.x.rebased264.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased257"
  %4251 = sext i32 %t1666 to i64
  %4252 = zext i32 %.pre-phi3317 to i64
  %4253 = mul nsw i64 %4252, %108
  %4254 = sub nsw i64 %4253, %95
  %4255 = zext i32 %.pre-phi3323 to i64
  %4256 = mul nsw i64 %4255, %108
  %4257 = sub nsw i64 %4256, %95
  %4258 = zext i32 %.pre-phi3313 to i64
  %4259 = mul nsw i64 %4258, %108
  %4260 = sub nsw i64 %4259, %95
  %4261 = sext i32 %a26 to i64
  %4262 = add nsw i64 %4261, 9
  %4263 = mul nsw i64 %4262, %109
  %4264 = add nsw i64 %4263, %112
  br label %"for blur_y.s0.x.x.rebased264"

"produce blur_x262":                              ; preds = %"for blur_y.s0.x.x.rebased256"
  %t816 = add nsw i32 %4248, %t1793
  %4265 = sext i32 %t816 to i64
  %4266 = getelementptr inbounds i16, i16* %read_input, i64 %4265
  %4267 = getelementptr inbounds i16, i16* %4266, i64 1
  %4268 = bitcast i16* %4267 to <16 x i16>*
  %4269 = load <16 x i16>, <16 x i16>* %4268, align 2, !tbaa !396
  %4270 = getelementptr inbounds i16, i16* %4266, i64 17
  %4271 = bitcast i16* %4270 to <16 x i16>*
  %4272 = load <16 x i16>, <16 x i16>* %4271, align 2, !tbaa !396
  %4273 = getelementptr inbounds i16, i16* %4266, i64 2
  %4274 = bitcast i16* %4273 to <16 x i16>*
  %4275 = load <16 x i16>, <16 x i16>* %4274, align 2, !tbaa !396
  %4276 = getelementptr inbounds i16, i16* %4266, i64 18
  %4277 = bitcast i16* %4276 to <16 x i16>*
  %4278 = load <16 x i16>, <16 x i16>* %4277, align 2, !tbaa !396
  %4279 = bitcast i16* %4266 to <16 x i16>*
  %4280 = load <16 x i16>, <16 x i16>* %4279, align 2, !tbaa !396
  %4281 = getelementptr inbounds i16, i16* %4266, i64 16
  %4282 = bitcast i16* %4281 to <16 x i16>*
  %4283 = load <16 x i16>, <16 x i16>* %4282, align 2, !tbaa !396
  %4284 = add <16 x i16> %4275, %4269
  %4285 = add <16 x i16> %4284, %4280
  %4286 = add <16 x i16> %4278, %4272
  %4287 = add <16 x i16> %4286, %4283
  %4288 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4285, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4289 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4287, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4290 = shufflevector <16 x i16> %4288, <16 x i16> %4289, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4291 = lshr <32 x i16> %4290, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4292 = shufflevector <32 x i16> %4291, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4293 = shl nsw i64 %4245, 5
  %4294 = add nsw i64 %4293, %4146
  %4295 = getelementptr inbounds i16, i16* %blur_x, i64 %4294
  %4296 = bitcast i16* %4295 to <16 x i16>*
  store <16 x i16> %4292, <16 x i16>* %4296, align 2, !tbaa !399
  %4297 = shufflevector <32 x i16> %4291, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4298 = getelementptr inbounds i16, i16* %4295, i64 16
  %4299 = bitcast i16* %4298 to <16 x i16>*
  store <16 x i16> %4297, <16 x i16>* %4299, align 2, !tbaa !399
  br label %"consume blur_x263"

"consume blur_x263":                              ; preds = %"for blur_y.s0.x.x.rebased256.consume blur_x263_crit_edge", %"produce blur_x262"
  %.pre-phi3341 = phi i64 [ %.pre3340, %"for blur_y.s0.x.x.rebased256.consume blur_x263_crit_edge" ], [ %4293, %"produce blur_x262" ]
  %4300 = add nsw i64 %4149, %.pre-phi3341
  %4301 = getelementptr inbounds i16, i16* %blur_x, i64 %4300
  %4302 = bitcast i16* %4301 to <16 x i16>*
  %4303 = load <16 x i16>, <16 x i16>* %4302, align 2, !tbaa !399
  %4304 = getelementptr inbounds i16, i16* %4301, i64 16
  %4305 = bitcast i16* %4304 to <16 x i16>*
  %4306 = load <16 x i16>, <16 x i16>* %4305, align 2, !tbaa !399
  %4307 = add nsw i64 %4152, %.pre-phi3341
  %4308 = getelementptr inbounds i16, i16* %blur_x, i64 %4307
  %4309 = bitcast i16* %4308 to <16 x i16>*
  %4310 = load <16 x i16>, <16 x i16>* %4309, align 2, !tbaa !399
  %4311 = getelementptr inbounds i16, i16* %4308, i64 16
  %4312 = bitcast i16* %4311 to <16 x i16>*
  %4313 = load <16 x i16>, <16 x i16>* %4312, align 2, !tbaa !399
  %4314 = add nsw i64 %4155, %.pre-phi3341
  %4315 = getelementptr inbounds i16, i16* %blur_x, i64 %4314
  %4316 = bitcast i16* %4315 to <16 x i16>*
  %4317 = load <16 x i16>, <16 x i16>* %4316, align 2, !tbaa !399
  %4318 = getelementptr inbounds i16, i16* %4315, i64 16
  %4319 = bitcast i16* %4318 to <16 x i16>*
  %4320 = load <16 x i16>, <16 x i16>* %4319, align 2, !tbaa !399
  %4321 = add <16 x i16> %4310, %4303
  %4322 = add <16 x i16> %4321, %4317
  %4323 = add <16 x i16> %4313, %4306
  %4324 = add <16 x i16> %4323, %4320
  %4325 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4322, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4326 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4324, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4327 = shufflevector <16 x i16> %4325, <16 x i16> %4326, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4328 = lshr <32 x i16> %4327, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4329 = shufflevector <32 x i16> %4328, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4330 = add nsw i64 %4159, %.pre-phi3341
  %4331 = getelementptr inbounds i16, i16* %65, i64 %4330
  %4332 = bitcast i16* %4331 to <16 x i16>*
  store <16 x i16> %4329, <16 x i16>* %4332, align 2, !tbaa !401
  %4333 = shufflevector <32 x i16> %4328, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4334 = getelementptr inbounds i16, i16* %4331, i64 16
  %4335 = bitcast i16* %4334 to <16 x i16>*
  store <16 x i16> %4333, <16 x i16>* %4335, align 2, !tbaa !401
  %indvars.iv.next3159 = add nuw nsw i64 %indvars.iv3158, 1
  %.not2627 = icmp eq i64 %indvars.iv.next3159, %180
  br i1 %.not2627, label %"end for blur_y.s0.x.x.rebased257", label %"for blur_y.s0.x.x.rebased256"

"for blur_y.s0.x.x.rebased264":                   ; preds = %"for blur_y.s0.x.x.rebased264.preheader", %"consume blur_x272"
  %blur_y.s0.x.x.rebased266 = phi i32 [ %4414, %"consume blur_x272" ], [ 0, %"for blur_y.s0.x.x.rebased264.preheader" ]
  %4336 = add nsw i32 %blur_y.s0.x.x.rebased266, %t1582
  %a154 = shl nsw i32 %4336, 5
  %4337 = icmp sgt i32 %a14, %a154
  %b160 = select i1 %4337, i32 %a154, i32 %a14
  %4338 = icmp slt i32 %4336, 1
  %4339 = icmp sgt i32 %4, %a154
  %4340 = or i1 %4338, %4339
  br i1 %4340, label %"produce blur_x270", label %"consume blur_x272"

"end for blur_y.s0.x.x.rebased265":               ; preds = %"consume blur_x272", %"end for blur_y.s0.x.x.rebased257"
  br i1 %34, label %"produce blur_x276", label %after_bb273

"produce blur_x270":                              ; preds = %"for blur_y.s0.x.x.rebased264"
  %4341 = icmp slt i32 %b160, %4
  %blur_x.s0.x.v1.base.s271 = select i1 %4341, i32 %b160, i32 %4
  %t821 = add nsw i32 %blur_x.s0.x.v1.base.s271, %t1793
  %4342 = sext i32 %t821 to i64
  %4343 = getelementptr inbounds i16, i16* %read_input, i64 %4342
  %4344 = getelementptr inbounds i16, i16* %4343, i64 1
  %4345 = bitcast i16* %4344 to <16 x i16>*
  %4346 = load <16 x i16>, <16 x i16>* %4345, align 2, !tbaa !396
  %4347 = getelementptr inbounds i16, i16* %4343, i64 17
  %4348 = bitcast i16* %4347 to <16 x i16>*
  %4349 = load <16 x i16>, <16 x i16>* %4348, align 2, !tbaa !396
  %4350 = getelementptr inbounds i16, i16* %4343, i64 2
  %4351 = bitcast i16* %4350 to <16 x i16>*
  %4352 = load <16 x i16>, <16 x i16>* %4351, align 2, !tbaa !396
  %4353 = getelementptr inbounds i16, i16* %4343, i64 18
  %4354 = bitcast i16* %4353 to <16 x i16>*
  %4355 = load <16 x i16>, <16 x i16>* %4354, align 2, !tbaa !396
  %4356 = bitcast i16* %4343 to <16 x i16>*
  %4357 = load <16 x i16>, <16 x i16>* %4356, align 2, !tbaa !396
  %4358 = getelementptr inbounds i16, i16* %4343, i64 16
  %4359 = bitcast i16* %4358 to <16 x i16>*
  %4360 = load <16 x i16>, <16 x i16>* %4359, align 2, !tbaa !396
  %4361 = add <16 x i16> %4352, %4346
  %4362 = add <16 x i16> %4361, %4357
  %4363 = add <16 x i16> %4355, %4349
  %4364 = add <16 x i16> %4363, %4360
  %4365 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4362, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4366 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4364, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4367 = shufflevector <16 x i16> %4365, <16 x i16> %4366, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4368 = lshr <32 x i16> %4367, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4369 = shufflevector <32 x i16> %4368, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4370 = sext i32 %blur_x.s0.x.v1.base.s271 to i64
  %4371 = add nsw i64 %4370, %4251
  %4372 = getelementptr inbounds i16, i16* %blur_x, i64 %4371
  %4373 = bitcast i16* %4372 to <16 x i16>*
  store <16 x i16> %4369, <16 x i16>* %4373, align 2, !tbaa !399
  %4374 = shufflevector <32 x i16> %4368, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4375 = getelementptr inbounds i16, i16* %4372, i64 16
  %4376 = bitcast i16* %4375 to <16 x i16>*
  store <16 x i16> %4374, <16 x i16>* %4376, align 2, !tbaa !399
  br label %"consume blur_x272"

"consume blur_x272":                              ; preds = %"for blur_y.s0.x.x.rebased264", %"produce blur_x270"
  %4377 = sext i32 %b160 to i64
  %4378 = add nsw i64 %4254, %4377
  %4379 = getelementptr inbounds i16, i16* %blur_x, i64 %4378
  %4380 = bitcast i16* %4379 to <16 x i16>*
  %4381 = load <16 x i16>, <16 x i16>* %4380, align 2, !tbaa !399
  %4382 = getelementptr inbounds i16, i16* %4379, i64 16
  %4383 = bitcast i16* %4382 to <16 x i16>*
  %4384 = load <16 x i16>, <16 x i16>* %4383, align 2, !tbaa !399
  %4385 = add nsw i64 %4257, %4377
  %4386 = getelementptr inbounds i16, i16* %blur_x, i64 %4385
  %4387 = bitcast i16* %4386 to <16 x i16>*
  %4388 = load <16 x i16>, <16 x i16>* %4387, align 2, !tbaa !399
  %4389 = getelementptr inbounds i16, i16* %4386, i64 16
  %4390 = bitcast i16* %4389 to <16 x i16>*
  %4391 = load <16 x i16>, <16 x i16>* %4390, align 2, !tbaa !399
  %4392 = add nsw i64 %4260, %4377
  %4393 = getelementptr inbounds i16, i16* %blur_x, i64 %4392
  %4394 = bitcast i16* %4393 to <16 x i16>*
  %4395 = load <16 x i16>, <16 x i16>* %4394, align 2, !tbaa !399
  %4396 = getelementptr inbounds i16, i16* %4393, i64 16
  %4397 = bitcast i16* %4396 to <16 x i16>*
  %4398 = load <16 x i16>, <16 x i16>* %4397, align 2, !tbaa !399
  %4399 = add <16 x i16> %4388, %4381
  %4400 = add <16 x i16> %4399, %4395
  %4401 = add <16 x i16> %4391, %4384
  %4402 = add <16 x i16> %4401, %4398
  %4403 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4400, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4404 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4402, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4405 = shufflevector <16 x i16> %4403, <16 x i16> %4404, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4406 = lshr <32 x i16> %4405, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4407 = shufflevector <32 x i16> %4406, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4408 = add nsw i64 %4264, %4377
  %4409 = getelementptr inbounds i16, i16* %65, i64 %4408
  %4410 = bitcast i16* %4409 to <16 x i16>*
  store <16 x i16> %4407, <16 x i16>* %4410, align 2, !tbaa !401
  %4411 = shufflevector <32 x i16> %4406, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4412 = getelementptr inbounds i16, i16* %4409, i64 16
  %4413 = bitcast i16* %4412 to <16 x i16>*
  store <16 x i16> %4411, <16 x i16>* %4413, align 2, !tbaa !401
  %4414 = add nuw nsw i32 %blur_y.s0.x.x.rebased266, 1
  %.not2626 = icmp eq i32 %4414, %t1639
  br i1 %.not2626, label %"end for blur_y.s0.x.x.rebased265", label %"for blur_y.s0.x.x.rebased264"

after_bb273:                                      ; preds = %"end for blur_y.s0.x.x.rebased265", %"produce blur_x276"
  br i1 %99, label %"for blur_y.s0.x.x.rebased278.preheader", label %"end for blur_y.s0.x.x.rebased279", !prof !386

"for blur_y.s0.x.x.rebased278.preheader":         ; preds = %after_bb273
  %4415 = sext i32 %t1638 to i64
  %4416 = zext i32 %.pre-phi3323 to i64
  %4417 = mul nsw i64 %4416, %108
  %4418 = sub nsw i64 %4417, %95
  %4419 = zext i32 %.pre-phi to i64
  %4420 = mul nsw i64 %4419, %108
  %4421 = sub nsw i64 %4420, %95
  %4422 = zext i32 %.pre-phi3317 to i64
  %4423 = mul nsw i64 %4422, %108
  %4424 = sub nsw i64 %4423, %95
  %4425 = sext i32 %a26 to i64
  %4426 = add nsw i64 %4425, 10
  %4427 = mul nsw i64 %4426, %109
  %4428 = add nsw i64 %4427, %112
  br label %"for blur_y.s0.x.x.rebased278"

"produce blur_x276":                              ; preds = %"end for blur_y.s0.x.x.rebased265"
  %4429 = getelementptr inbounds i16, i16* %read_input, i64 %131
  %4430 = getelementptr inbounds i16, i16* %4429, i64 -31
  %4431 = bitcast i16* %4430 to <16 x i16>*
  %4432 = load <16 x i16>, <16 x i16>* %4431, align 2, !tbaa !396
  %4433 = getelementptr inbounds i16, i16* %4429, i64 -15
  %4434 = bitcast i16* %4433 to <16 x i16>*
  %4435 = load <16 x i16>, <16 x i16>* %4434, align 2, !tbaa !396
  %4436 = getelementptr inbounds i16, i16* %4429, i64 -30
  %4437 = bitcast i16* %4436 to <16 x i16>*
  %4438 = load <16 x i16>, <16 x i16>* %4437, align 2, !tbaa !396
  %4439 = getelementptr inbounds i16, i16* %4429, i64 -14
  %4440 = bitcast i16* %4439 to <16 x i16>*
  %4441 = load <16 x i16>, <16 x i16>* %4440, align 2, !tbaa !396
  %4442 = getelementptr inbounds i16, i16* %4429, i64 -32
  %4443 = bitcast i16* %4442 to <16 x i16>*
  %4444 = load <16 x i16>, <16 x i16>* %4443, align 2, !tbaa !396
  %4445 = getelementptr inbounds i16, i16* %4429, i64 -16
  %4446 = bitcast i16* %4445 to <16 x i16>*
  %4447 = load <16 x i16>, <16 x i16>* %4446, align 2, !tbaa !396
  %4448 = add <16 x i16> %4438, %4432
  %4449 = add <16 x i16> %4448, %4444
  %4450 = add <16 x i16> %4441, %4435
  %4451 = add <16 x i16> %4450, %4447
  %4452 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4449, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4453 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4451, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4454 = shufflevector <16 x i16> %4452, <16 x i16> %4453, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4455 = lshr <32 x i16> %4454, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4456 = shufflevector <32 x i16> %4455, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4457 = zext i32 %.pre-phi to i64
  %4458 = mul nsw i64 %96, %4457
  %4459 = add nsw i64 %98, %4458
  %4460 = getelementptr inbounds i16, i16* %blur_x, i64 %4459
  %4461 = getelementptr inbounds i16, i16* %4460, i64 -32
  %4462 = bitcast i16* %4461 to <16 x i16>*
  store <16 x i16> %4456, <16 x i16>* %4462, align 2, !tbaa !399
  %4463 = shufflevector <32 x i16> %4455, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4464 = getelementptr inbounds i16, i16* %4460, i64 -16
  %4465 = bitcast i16* %4464 to <16 x i16>*
  store <16 x i16> %4463, <16 x i16>* %4465, align 2, !tbaa !399
  %4466 = zext i32 %.pre-phi3323 to i64
  %4467 = mul nsw i64 %4466, %108
  %4468 = add nsw i64 %4467, %93
  %4469 = getelementptr inbounds i16, i16* %blur_x, i64 %4468
  %4470 = getelementptr inbounds i16, i16* %4469, i64 -32
  %4471 = bitcast i16* %4470 to <16 x i16>*
  %4472 = load <16 x i16>, <16 x i16>* %4471, align 2, !tbaa !399
  %4473 = getelementptr inbounds i16, i16* %4469, i64 -16
  %4474 = bitcast i16* %4473 to <16 x i16>*
  %4475 = load <16 x i16>, <16 x i16>* %4474, align 2, !tbaa !399
  %4476 = mul nsw i64 %4457, %108
  %4477 = add nsw i64 %4476, %93
  %4478 = getelementptr inbounds i16, i16* %blur_x, i64 %4477
  %4479 = getelementptr inbounds i16, i16* %4478, i64 -32
  %4480 = bitcast i16* %4479 to <16 x i16>*
  %4481 = load <16 x i16>, <16 x i16>* %4480, align 2, !tbaa !399
  %4482 = getelementptr inbounds i16, i16* %4478, i64 -16
  %4483 = bitcast i16* %4482 to <16 x i16>*
  %4484 = load <16 x i16>, <16 x i16>* %4483, align 2, !tbaa !399
  %4485 = zext i32 %.pre-phi3317 to i64
  %4486 = mul nsw i64 %4485, %108
  %4487 = add nsw i64 %4486, %93
  %4488 = getelementptr inbounds i16, i16* %blur_x, i64 %4487
  %4489 = getelementptr inbounds i16, i16* %4488, i64 -32
  %4490 = bitcast i16* %4489 to <16 x i16>*
  %4491 = load <16 x i16>, <16 x i16>* %4490, align 2, !tbaa !399
  %4492 = getelementptr inbounds i16, i16* %4488, i64 -16
  %4493 = bitcast i16* %4492 to <16 x i16>*
  %4494 = load <16 x i16>, <16 x i16>* %4493, align 2, !tbaa !399
  %4495 = add <16 x i16> %4481, %4472
  %4496 = add <16 x i16> %4495, %4491
  %4497 = add <16 x i16> %4484, %4475
  %4498 = add <16 x i16> %4497, %4494
  %4499 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4496, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4500 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4498, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4501 = shufflevector <16 x i16> %4499, <16 x i16> %4500, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4502 = lshr <32 x i16> %4501, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4503 = shufflevector <32 x i16> %4502, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4504 = sext i32 %a26 to i64
  %4505 = add nsw i64 %4504, 10
  %4506 = mul nsw i64 %4505, %109
  %4507 = add nsw i64 %111, %4506
  %4508 = getelementptr inbounds i16, i16* %65, i64 %4507
  %4509 = getelementptr inbounds i16, i16* %4508, i64 -32
  %4510 = bitcast i16* %4509 to <16 x i16>*
  store <16 x i16> %4503, <16 x i16>* %4510, align 2, !tbaa !401
  %4511 = shufflevector <32 x i16> %4502, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4512 = getelementptr inbounds i16, i16* %4508, i64 -16
  %4513 = bitcast i16* %4512 to <16 x i16>*
  store <16 x i16> %4511, <16 x i16>* %4513, align 2, !tbaa !401
  br label %after_bb273

"for blur_y.s0.x.x.rebased278":                   ; preds = %"for blur_y.s0.x.x.rebased278.preheader", %"consume blur_x285"
  %indvars.iv3161 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased278.preheader" ], [ %indvars.iv.next3162, %"consume blur_x285" ]
  %4514 = add nsw i64 %indvars.iv3161, %100
  %4515 = icmp slt i64 %4514, 1
  %4516 = trunc i64 %4514 to i32
  %4517 = shl nsw i32 %4516, 5
  %4518 = icmp sgt i32 %4, %4517
  %4519 = or i1 %4515, %4518
  br i1 %4519, label %"produce blur_x284", label %"for blur_y.s0.x.x.rebased278.consume blur_x285_crit_edge"

"for blur_y.s0.x.x.rebased278.consume blur_x285_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased278"
  %.pre3342 = shl nsw i64 %4514, 5
  br label %"consume blur_x285"

"end for blur_y.s0.x.x.rebased279":               ; preds = %"consume blur_x285", %after_bb273
  br i1 %101, label %"for blur_y.s0.x.x.rebased286.preheader", label %"end for blur_y.s0.x.x.rebased287", !prof !386

"for blur_y.s0.x.x.rebased286.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased279"
  %4520 = sext i32 %t1638 to i64
  %4521 = zext i32 %.pre-phi3323 to i64
  %4522 = mul nsw i64 %4521, %108
  %4523 = sub nsw i64 %4522, %95
  %4524 = zext i32 %.pre-phi to i64
  %4525 = mul nsw i64 %4524, %108
  %4526 = sub nsw i64 %4525, %95
  %4527 = zext i32 %.pre-phi3317 to i64
  %4528 = mul nsw i64 %4527, %108
  %4529 = sub nsw i64 %4528, %95
  %4530 = sext i32 %a26 to i64
  %4531 = add nsw i64 %4530, 10
  %4532 = mul nsw i64 %4531, %109
  %4533 = add nsw i64 %4532, %112
  br label %"for blur_y.s0.x.x.rebased286"

"produce blur_x284":                              ; preds = %"for blur_y.s0.x.x.rebased278"
  %t832 = add nsw i32 %4517, %t1809
  %4534 = sext i32 %t832 to i64
  %4535 = getelementptr inbounds i16, i16* %read_input, i64 %4534
  %4536 = getelementptr inbounds i16, i16* %4535, i64 1
  %4537 = bitcast i16* %4536 to <16 x i16>*
  %4538 = load <16 x i16>, <16 x i16>* %4537, align 2, !tbaa !396
  %4539 = getelementptr inbounds i16, i16* %4535, i64 17
  %4540 = bitcast i16* %4539 to <16 x i16>*
  %4541 = load <16 x i16>, <16 x i16>* %4540, align 2, !tbaa !396
  %4542 = getelementptr inbounds i16, i16* %4535, i64 2
  %4543 = bitcast i16* %4542 to <16 x i16>*
  %4544 = load <16 x i16>, <16 x i16>* %4543, align 2, !tbaa !396
  %4545 = getelementptr inbounds i16, i16* %4535, i64 18
  %4546 = bitcast i16* %4545 to <16 x i16>*
  %4547 = load <16 x i16>, <16 x i16>* %4546, align 2, !tbaa !396
  %4548 = bitcast i16* %4535 to <16 x i16>*
  %4549 = load <16 x i16>, <16 x i16>* %4548, align 2, !tbaa !396
  %4550 = getelementptr inbounds i16, i16* %4535, i64 16
  %4551 = bitcast i16* %4550 to <16 x i16>*
  %4552 = load <16 x i16>, <16 x i16>* %4551, align 2, !tbaa !396
  %4553 = add <16 x i16> %4544, %4538
  %4554 = add <16 x i16> %4553, %4549
  %4555 = add <16 x i16> %4547, %4541
  %4556 = add <16 x i16> %4555, %4552
  %4557 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4554, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4558 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4556, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4559 = shufflevector <16 x i16> %4557, <16 x i16> %4558, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4560 = lshr <32 x i16> %4559, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4561 = shufflevector <32 x i16> %4560, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4562 = shl nsw i64 %4514, 5
  %4563 = add nsw i64 %4562, %4415
  %4564 = getelementptr inbounds i16, i16* %blur_x, i64 %4563
  %4565 = bitcast i16* %4564 to <16 x i16>*
  store <16 x i16> %4561, <16 x i16>* %4565, align 2, !tbaa !399
  %4566 = shufflevector <32 x i16> %4560, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4567 = getelementptr inbounds i16, i16* %4564, i64 16
  %4568 = bitcast i16* %4567 to <16 x i16>*
  store <16 x i16> %4566, <16 x i16>* %4568, align 2, !tbaa !399
  br label %"consume blur_x285"

"consume blur_x285":                              ; preds = %"for blur_y.s0.x.x.rebased278.consume blur_x285_crit_edge", %"produce blur_x284"
  %.pre-phi3343 = phi i64 [ %.pre3342, %"for blur_y.s0.x.x.rebased278.consume blur_x285_crit_edge" ], [ %4562, %"produce blur_x284" ]
  %4569 = add nsw i64 %4418, %.pre-phi3343
  %4570 = getelementptr inbounds i16, i16* %blur_x, i64 %4569
  %4571 = bitcast i16* %4570 to <16 x i16>*
  %4572 = load <16 x i16>, <16 x i16>* %4571, align 2, !tbaa !399
  %4573 = getelementptr inbounds i16, i16* %4570, i64 16
  %4574 = bitcast i16* %4573 to <16 x i16>*
  %4575 = load <16 x i16>, <16 x i16>* %4574, align 2, !tbaa !399
  %4576 = add nsw i64 %4421, %.pre-phi3343
  %4577 = getelementptr inbounds i16, i16* %blur_x, i64 %4576
  %4578 = bitcast i16* %4577 to <16 x i16>*
  %4579 = load <16 x i16>, <16 x i16>* %4578, align 2, !tbaa !399
  %4580 = getelementptr inbounds i16, i16* %4577, i64 16
  %4581 = bitcast i16* %4580 to <16 x i16>*
  %4582 = load <16 x i16>, <16 x i16>* %4581, align 2, !tbaa !399
  %4583 = add nsw i64 %4424, %.pre-phi3343
  %4584 = getelementptr inbounds i16, i16* %blur_x, i64 %4583
  %4585 = bitcast i16* %4584 to <16 x i16>*
  %4586 = load <16 x i16>, <16 x i16>* %4585, align 2, !tbaa !399
  %4587 = getelementptr inbounds i16, i16* %4584, i64 16
  %4588 = bitcast i16* %4587 to <16 x i16>*
  %4589 = load <16 x i16>, <16 x i16>* %4588, align 2, !tbaa !399
  %4590 = add <16 x i16> %4579, %4572
  %4591 = add <16 x i16> %4590, %4586
  %4592 = add <16 x i16> %4582, %4575
  %4593 = add <16 x i16> %4592, %4589
  %4594 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4591, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4595 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4593, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4596 = shufflevector <16 x i16> %4594, <16 x i16> %4595, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4597 = lshr <32 x i16> %4596, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4598 = shufflevector <32 x i16> %4597, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4599 = add nsw i64 %4428, %.pre-phi3343
  %4600 = getelementptr inbounds i16, i16* %65, i64 %4599
  %4601 = bitcast i16* %4600 to <16 x i16>*
  store <16 x i16> %4598, <16 x i16>* %4601, align 2, !tbaa !401
  %4602 = shufflevector <32 x i16> %4597, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4603 = getelementptr inbounds i16, i16* %4600, i64 16
  %4604 = bitcast i16* %4603 to <16 x i16>*
  store <16 x i16> %4602, <16 x i16>* %4604, align 2, !tbaa !401
  %indvars.iv.next3162 = add nuw nsw i64 %indvars.iv3161, 1
  %.not2625 = icmp eq i64 %indvars.iv.next3162, %180
  br i1 %.not2625, label %"end for blur_y.s0.x.x.rebased279", label %"for blur_y.s0.x.x.rebased278"

"for blur_y.s0.x.x.rebased286":                   ; preds = %"for blur_y.s0.x.x.rebased286.preheader", %"consume blur_x294"
  %blur_y.s0.x.x.rebased288 = phi i32 [ %4683, %"consume blur_x294" ], [ 0, %"for blur_y.s0.x.x.rebased286.preheader" ]
  %4605 = add nsw i32 %blur_y.s0.x.x.rebased288, %t1582
  %a161 = shl nsw i32 %4605, 5
  %4606 = icmp sgt i32 %a14, %a161
  %b167 = select i1 %4606, i32 %a161, i32 %a14
  %4607 = icmp slt i32 %4605, 1
  %4608 = icmp sgt i32 %4, %a161
  %4609 = or i1 %4607, %4608
  br i1 %4609, label %"produce blur_x292", label %"consume blur_x294"

"end for blur_y.s0.x.x.rebased287":               ; preds = %"consume blur_x294", %"end for blur_y.s0.x.x.rebased279"
  br i1 %34, label %"produce blur_x298", label %after_bb295

"produce blur_x292":                              ; preds = %"for blur_y.s0.x.x.rebased286"
  %4610 = icmp slt i32 %b167, %4
  %blur_x.s0.x.v1.base.s293 = select i1 %4610, i32 %b167, i32 %4
  %t837 = add nsw i32 %blur_x.s0.x.v1.base.s293, %t1809
  %4611 = sext i32 %t837 to i64
  %4612 = getelementptr inbounds i16, i16* %read_input, i64 %4611
  %4613 = getelementptr inbounds i16, i16* %4612, i64 1
  %4614 = bitcast i16* %4613 to <16 x i16>*
  %4615 = load <16 x i16>, <16 x i16>* %4614, align 2, !tbaa !396
  %4616 = getelementptr inbounds i16, i16* %4612, i64 17
  %4617 = bitcast i16* %4616 to <16 x i16>*
  %4618 = load <16 x i16>, <16 x i16>* %4617, align 2, !tbaa !396
  %4619 = getelementptr inbounds i16, i16* %4612, i64 2
  %4620 = bitcast i16* %4619 to <16 x i16>*
  %4621 = load <16 x i16>, <16 x i16>* %4620, align 2, !tbaa !396
  %4622 = getelementptr inbounds i16, i16* %4612, i64 18
  %4623 = bitcast i16* %4622 to <16 x i16>*
  %4624 = load <16 x i16>, <16 x i16>* %4623, align 2, !tbaa !396
  %4625 = bitcast i16* %4612 to <16 x i16>*
  %4626 = load <16 x i16>, <16 x i16>* %4625, align 2, !tbaa !396
  %4627 = getelementptr inbounds i16, i16* %4612, i64 16
  %4628 = bitcast i16* %4627 to <16 x i16>*
  %4629 = load <16 x i16>, <16 x i16>* %4628, align 2, !tbaa !396
  %4630 = add <16 x i16> %4621, %4615
  %4631 = add <16 x i16> %4630, %4626
  %4632 = add <16 x i16> %4624, %4618
  %4633 = add <16 x i16> %4632, %4629
  %4634 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4631, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4635 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4633, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4636 = shufflevector <16 x i16> %4634, <16 x i16> %4635, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4637 = lshr <32 x i16> %4636, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4638 = shufflevector <32 x i16> %4637, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4639 = sext i32 %blur_x.s0.x.v1.base.s293 to i64
  %4640 = add nsw i64 %4639, %4520
  %4641 = getelementptr inbounds i16, i16* %blur_x, i64 %4640
  %4642 = bitcast i16* %4641 to <16 x i16>*
  store <16 x i16> %4638, <16 x i16>* %4642, align 2, !tbaa !399
  %4643 = shufflevector <32 x i16> %4637, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4644 = getelementptr inbounds i16, i16* %4641, i64 16
  %4645 = bitcast i16* %4644 to <16 x i16>*
  store <16 x i16> %4643, <16 x i16>* %4645, align 2, !tbaa !399
  br label %"consume blur_x294"

"consume blur_x294":                              ; preds = %"for blur_y.s0.x.x.rebased286", %"produce blur_x292"
  %4646 = sext i32 %b167 to i64
  %4647 = add nsw i64 %4523, %4646
  %4648 = getelementptr inbounds i16, i16* %blur_x, i64 %4647
  %4649 = bitcast i16* %4648 to <16 x i16>*
  %4650 = load <16 x i16>, <16 x i16>* %4649, align 2, !tbaa !399
  %4651 = getelementptr inbounds i16, i16* %4648, i64 16
  %4652 = bitcast i16* %4651 to <16 x i16>*
  %4653 = load <16 x i16>, <16 x i16>* %4652, align 2, !tbaa !399
  %4654 = add nsw i64 %4526, %4646
  %4655 = getelementptr inbounds i16, i16* %blur_x, i64 %4654
  %4656 = bitcast i16* %4655 to <16 x i16>*
  %4657 = load <16 x i16>, <16 x i16>* %4656, align 2, !tbaa !399
  %4658 = getelementptr inbounds i16, i16* %4655, i64 16
  %4659 = bitcast i16* %4658 to <16 x i16>*
  %4660 = load <16 x i16>, <16 x i16>* %4659, align 2, !tbaa !399
  %4661 = add nsw i64 %4529, %4646
  %4662 = getelementptr inbounds i16, i16* %blur_x, i64 %4661
  %4663 = bitcast i16* %4662 to <16 x i16>*
  %4664 = load <16 x i16>, <16 x i16>* %4663, align 2, !tbaa !399
  %4665 = getelementptr inbounds i16, i16* %4662, i64 16
  %4666 = bitcast i16* %4665 to <16 x i16>*
  %4667 = load <16 x i16>, <16 x i16>* %4666, align 2, !tbaa !399
  %4668 = add <16 x i16> %4657, %4650
  %4669 = add <16 x i16> %4668, %4664
  %4670 = add <16 x i16> %4660, %4653
  %4671 = add <16 x i16> %4670, %4667
  %4672 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4669, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4673 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4671, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4674 = shufflevector <16 x i16> %4672, <16 x i16> %4673, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4675 = lshr <32 x i16> %4674, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4676 = shufflevector <32 x i16> %4675, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4677 = add nsw i64 %4533, %4646
  %4678 = getelementptr inbounds i16, i16* %65, i64 %4677
  %4679 = bitcast i16* %4678 to <16 x i16>*
  store <16 x i16> %4676, <16 x i16>* %4679, align 2, !tbaa !401
  %4680 = shufflevector <32 x i16> %4675, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4681 = getelementptr inbounds i16, i16* %4678, i64 16
  %4682 = bitcast i16* %4681 to <16 x i16>*
  store <16 x i16> %4680, <16 x i16>* %4682, align 2, !tbaa !401
  %4683 = add nuw nsw i32 %blur_y.s0.x.x.rebased288, 1
  %.not2624 = icmp eq i32 %4683, %t1639
  br i1 %.not2624, label %"end for blur_y.s0.x.x.rebased287", label %"for blur_y.s0.x.x.rebased286"

after_bb295:                                      ; preds = %"end for blur_y.s0.x.x.rebased287", %"produce blur_x298"
  br i1 %99, label %"for blur_y.s0.x.x.rebased300.preheader", label %"end for blur_y.s0.x.x.rebased301", !prof !386

"for blur_y.s0.x.x.rebased300.preheader":         ; preds = %after_bb295
  %4684 = sext i32 %t1644 to i64
  %4685 = zext i32 %.pre-phi to i64
  %4686 = mul nsw i64 %4685, %108
  %4687 = sub nsw i64 %4686, %95
  %4688 = zext i32 %.pre-phi3313 to i64
  %4689 = mul nsw i64 %4688, %108
  %4690 = sub nsw i64 %4689, %95
  %4691 = zext i32 %.pre-phi3323 to i64
  %4692 = mul nsw i64 %4691, %108
  %4693 = sub nsw i64 %4692, %95
  %4694 = sext i32 %a26 to i64
  %4695 = add nsw i64 %4694, 11
  %4696 = mul nsw i64 %4695, %109
  %4697 = add nsw i64 %4696, %112
  br label %"for blur_y.s0.x.x.rebased300"

"produce blur_x298":                              ; preds = %"end for blur_y.s0.x.x.rebased287"
  %4698 = getelementptr inbounds i16, i16* %read_input, i64 %133
  %4699 = getelementptr inbounds i16, i16* %4698, i64 -31
  %4700 = bitcast i16* %4699 to <16 x i16>*
  %4701 = load <16 x i16>, <16 x i16>* %4700, align 2, !tbaa !396
  %4702 = getelementptr inbounds i16, i16* %4698, i64 -15
  %4703 = bitcast i16* %4702 to <16 x i16>*
  %4704 = load <16 x i16>, <16 x i16>* %4703, align 2, !tbaa !396
  %4705 = getelementptr inbounds i16, i16* %4698, i64 -30
  %4706 = bitcast i16* %4705 to <16 x i16>*
  %4707 = load <16 x i16>, <16 x i16>* %4706, align 2, !tbaa !396
  %4708 = getelementptr inbounds i16, i16* %4698, i64 -14
  %4709 = bitcast i16* %4708 to <16 x i16>*
  %4710 = load <16 x i16>, <16 x i16>* %4709, align 2, !tbaa !396
  %4711 = getelementptr inbounds i16, i16* %4698, i64 -32
  %4712 = bitcast i16* %4711 to <16 x i16>*
  %4713 = load <16 x i16>, <16 x i16>* %4712, align 2, !tbaa !396
  %4714 = getelementptr inbounds i16, i16* %4698, i64 -16
  %4715 = bitcast i16* %4714 to <16 x i16>*
  %4716 = load <16 x i16>, <16 x i16>* %4715, align 2, !tbaa !396
  %4717 = add <16 x i16> %4707, %4701
  %4718 = add <16 x i16> %4717, %4713
  %4719 = add <16 x i16> %4710, %4704
  %4720 = add <16 x i16> %4719, %4716
  %4721 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4718, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4722 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4720, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4723 = shufflevector <16 x i16> %4721, <16 x i16> %4722, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4724 = lshr <32 x i16> %4723, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4725 = shufflevector <32 x i16> %4724, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4726 = zext i32 %.pre-phi3313 to i64
  %4727 = mul nsw i64 %96, %4726
  %4728 = add nsw i64 %98, %4727
  %4729 = getelementptr inbounds i16, i16* %blur_x, i64 %4728
  %4730 = getelementptr inbounds i16, i16* %4729, i64 -32
  %4731 = bitcast i16* %4730 to <16 x i16>*
  store <16 x i16> %4725, <16 x i16>* %4731, align 2, !tbaa !399
  %4732 = shufflevector <32 x i16> %4724, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4733 = getelementptr inbounds i16, i16* %4729, i64 -16
  %4734 = bitcast i16* %4733 to <16 x i16>*
  store <16 x i16> %4732, <16 x i16>* %4734, align 2, !tbaa !399
  %4735 = zext i32 %.pre-phi to i64
  %4736 = mul nsw i64 %4735, %108
  %4737 = add nsw i64 %4736, %93
  %4738 = getelementptr inbounds i16, i16* %blur_x, i64 %4737
  %4739 = getelementptr inbounds i16, i16* %4738, i64 -32
  %4740 = bitcast i16* %4739 to <16 x i16>*
  %4741 = load <16 x i16>, <16 x i16>* %4740, align 2, !tbaa !399
  %4742 = getelementptr inbounds i16, i16* %4738, i64 -16
  %4743 = bitcast i16* %4742 to <16 x i16>*
  %4744 = load <16 x i16>, <16 x i16>* %4743, align 2, !tbaa !399
  %4745 = mul nsw i64 %4726, %108
  %4746 = add nsw i64 %4745, %93
  %4747 = getelementptr inbounds i16, i16* %blur_x, i64 %4746
  %4748 = getelementptr inbounds i16, i16* %4747, i64 -32
  %4749 = bitcast i16* %4748 to <16 x i16>*
  %4750 = load <16 x i16>, <16 x i16>* %4749, align 2, !tbaa !399
  %4751 = getelementptr inbounds i16, i16* %4747, i64 -16
  %4752 = bitcast i16* %4751 to <16 x i16>*
  %4753 = load <16 x i16>, <16 x i16>* %4752, align 2, !tbaa !399
  %4754 = zext i32 %.pre-phi3323 to i64
  %4755 = mul nsw i64 %4754, %108
  %4756 = add nsw i64 %4755, %93
  %4757 = getelementptr inbounds i16, i16* %blur_x, i64 %4756
  %4758 = getelementptr inbounds i16, i16* %4757, i64 -32
  %4759 = bitcast i16* %4758 to <16 x i16>*
  %4760 = load <16 x i16>, <16 x i16>* %4759, align 2, !tbaa !399
  %4761 = getelementptr inbounds i16, i16* %4757, i64 -16
  %4762 = bitcast i16* %4761 to <16 x i16>*
  %4763 = load <16 x i16>, <16 x i16>* %4762, align 2, !tbaa !399
  %4764 = add <16 x i16> %4750, %4741
  %4765 = add <16 x i16> %4764, %4760
  %4766 = add <16 x i16> %4753, %4744
  %4767 = add <16 x i16> %4766, %4763
  %4768 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4765, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4769 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4767, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4770 = shufflevector <16 x i16> %4768, <16 x i16> %4769, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4771 = lshr <32 x i16> %4770, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4772 = shufflevector <32 x i16> %4771, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4773 = sext i32 %a26 to i64
  %4774 = add nsw i64 %4773, 11
  %4775 = mul nsw i64 %4774, %109
  %4776 = add nsw i64 %111, %4775
  %4777 = getelementptr inbounds i16, i16* %65, i64 %4776
  %4778 = getelementptr inbounds i16, i16* %4777, i64 -32
  %4779 = bitcast i16* %4778 to <16 x i16>*
  store <16 x i16> %4772, <16 x i16>* %4779, align 2, !tbaa !401
  %4780 = shufflevector <32 x i16> %4771, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4781 = getelementptr inbounds i16, i16* %4777, i64 -16
  %4782 = bitcast i16* %4781 to <16 x i16>*
  store <16 x i16> %4780, <16 x i16>* %4782, align 2, !tbaa !401
  br label %after_bb295

"for blur_y.s0.x.x.rebased300":                   ; preds = %"for blur_y.s0.x.x.rebased300.preheader", %"consume blur_x307"
  %indvars.iv3164 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased300.preheader" ], [ %indvars.iv.next3165, %"consume blur_x307" ]
  %4783 = add nsw i64 %indvars.iv3164, %100
  %4784 = icmp slt i64 %4783, 1
  %4785 = trunc i64 %4783 to i32
  %4786 = shl nsw i32 %4785, 5
  %4787 = icmp sgt i32 %4, %4786
  %4788 = or i1 %4784, %4787
  br i1 %4788, label %"produce blur_x306", label %"for blur_y.s0.x.x.rebased300.consume blur_x307_crit_edge"

"for blur_y.s0.x.x.rebased300.consume blur_x307_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased300"
  %.pre3344 = shl nsw i64 %4783, 5
  br label %"consume blur_x307"

"end for blur_y.s0.x.x.rebased301":               ; preds = %"consume blur_x307", %after_bb295
  br i1 %101, label %"for blur_y.s0.x.x.rebased308.preheader", label %"end for blur_y.s0.x.x.rebased309", !prof !386

"for blur_y.s0.x.x.rebased308.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased301"
  %4789 = sext i32 %t1644 to i64
  %4790 = zext i32 %.pre-phi to i64
  %4791 = mul nsw i64 %4790, %108
  %4792 = sub nsw i64 %4791, %95
  %4793 = zext i32 %.pre-phi3313 to i64
  %4794 = mul nsw i64 %4793, %108
  %4795 = sub nsw i64 %4794, %95
  %4796 = zext i32 %.pre-phi3323 to i64
  %4797 = mul nsw i64 %4796, %108
  %4798 = sub nsw i64 %4797, %95
  %4799 = sext i32 %a26 to i64
  %4800 = add nsw i64 %4799, 11
  %4801 = mul nsw i64 %4800, %109
  %4802 = add nsw i64 %4801, %112
  br label %"for blur_y.s0.x.x.rebased308"

"produce blur_x306":                              ; preds = %"for blur_y.s0.x.x.rebased300"
  %t848 = add nsw i32 %4786, %t1825
  %4803 = sext i32 %t848 to i64
  %4804 = getelementptr inbounds i16, i16* %read_input, i64 %4803
  %4805 = getelementptr inbounds i16, i16* %4804, i64 1
  %4806 = bitcast i16* %4805 to <16 x i16>*
  %4807 = load <16 x i16>, <16 x i16>* %4806, align 2, !tbaa !396
  %4808 = getelementptr inbounds i16, i16* %4804, i64 17
  %4809 = bitcast i16* %4808 to <16 x i16>*
  %4810 = load <16 x i16>, <16 x i16>* %4809, align 2, !tbaa !396
  %4811 = getelementptr inbounds i16, i16* %4804, i64 2
  %4812 = bitcast i16* %4811 to <16 x i16>*
  %4813 = load <16 x i16>, <16 x i16>* %4812, align 2, !tbaa !396
  %4814 = getelementptr inbounds i16, i16* %4804, i64 18
  %4815 = bitcast i16* %4814 to <16 x i16>*
  %4816 = load <16 x i16>, <16 x i16>* %4815, align 2, !tbaa !396
  %4817 = bitcast i16* %4804 to <16 x i16>*
  %4818 = load <16 x i16>, <16 x i16>* %4817, align 2, !tbaa !396
  %4819 = getelementptr inbounds i16, i16* %4804, i64 16
  %4820 = bitcast i16* %4819 to <16 x i16>*
  %4821 = load <16 x i16>, <16 x i16>* %4820, align 2, !tbaa !396
  %4822 = add <16 x i16> %4813, %4807
  %4823 = add <16 x i16> %4822, %4818
  %4824 = add <16 x i16> %4816, %4810
  %4825 = add <16 x i16> %4824, %4821
  %4826 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4823, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4827 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4825, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4828 = shufflevector <16 x i16> %4826, <16 x i16> %4827, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4829 = lshr <32 x i16> %4828, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4830 = shufflevector <32 x i16> %4829, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4831 = shl nsw i64 %4783, 5
  %4832 = add nsw i64 %4831, %4684
  %4833 = getelementptr inbounds i16, i16* %blur_x, i64 %4832
  %4834 = bitcast i16* %4833 to <16 x i16>*
  store <16 x i16> %4830, <16 x i16>* %4834, align 2, !tbaa !399
  %4835 = shufflevector <32 x i16> %4829, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4836 = getelementptr inbounds i16, i16* %4833, i64 16
  %4837 = bitcast i16* %4836 to <16 x i16>*
  store <16 x i16> %4835, <16 x i16>* %4837, align 2, !tbaa !399
  br label %"consume blur_x307"

"consume blur_x307":                              ; preds = %"for blur_y.s0.x.x.rebased300.consume blur_x307_crit_edge", %"produce blur_x306"
  %.pre-phi3345 = phi i64 [ %.pre3344, %"for blur_y.s0.x.x.rebased300.consume blur_x307_crit_edge" ], [ %4831, %"produce blur_x306" ]
  %4838 = add nsw i64 %4687, %.pre-phi3345
  %4839 = getelementptr inbounds i16, i16* %blur_x, i64 %4838
  %4840 = bitcast i16* %4839 to <16 x i16>*
  %4841 = load <16 x i16>, <16 x i16>* %4840, align 2, !tbaa !399
  %4842 = getelementptr inbounds i16, i16* %4839, i64 16
  %4843 = bitcast i16* %4842 to <16 x i16>*
  %4844 = load <16 x i16>, <16 x i16>* %4843, align 2, !tbaa !399
  %4845 = add nsw i64 %4690, %.pre-phi3345
  %4846 = getelementptr inbounds i16, i16* %blur_x, i64 %4845
  %4847 = bitcast i16* %4846 to <16 x i16>*
  %4848 = load <16 x i16>, <16 x i16>* %4847, align 2, !tbaa !399
  %4849 = getelementptr inbounds i16, i16* %4846, i64 16
  %4850 = bitcast i16* %4849 to <16 x i16>*
  %4851 = load <16 x i16>, <16 x i16>* %4850, align 2, !tbaa !399
  %4852 = add nsw i64 %4693, %.pre-phi3345
  %4853 = getelementptr inbounds i16, i16* %blur_x, i64 %4852
  %4854 = bitcast i16* %4853 to <16 x i16>*
  %4855 = load <16 x i16>, <16 x i16>* %4854, align 2, !tbaa !399
  %4856 = getelementptr inbounds i16, i16* %4853, i64 16
  %4857 = bitcast i16* %4856 to <16 x i16>*
  %4858 = load <16 x i16>, <16 x i16>* %4857, align 2, !tbaa !399
  %4859 = add <16 x i16> %4848, %4841
  %4860 = add <16 x i16> %4859, %4855
  %4861 = add <16 x i16> %4851, %4844
  %4862 = add <16 x i16> %4861, %4858
  %4863 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4860, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4864 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4862, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4865 = shufflevector <16 x i16> %4863, <16 x i16> %4864, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4866 = lshr <32 x i16> %4865, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4867 = shufflevector <32 x i16> %4866, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4868 = add nsw i64 %4697, %.pre-phi3345
  %4869 = getelementptr inbounds i16, i16* %65, i64 %4868
  %4870 = bitcast i16* %4869 to <16 x i16>*
  store <16 x i16> %4867, <16 x i16>* %4870, align 2, !tbaa !401
  %4871 = shufflevector <32 x i16> %4866, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4872 = getelementptr inbounds i16, i16* %4869, i64 16
  %4873 = bitcast i16* %4872 to <16 x i16>*
  store <16 x i16> %4871, <16 x i16>* %4873, align 2, !tbaa !401
  %indvars.iv.next3165 = add nuw nsw i64 %indvars.iv3164, 1
  %.not2623 = icmp eq i64 %indvars.iv.next3165, %180
  br i1 %.not2623, label %"end for blur_y.s0.x.x.rebased301", label %"for blur_y.s0.x.x.rebased300"

"for blur_y.s0.x.x.rebased308":                   ; preds = %"for blur_y.s0.x.x.rebased308.preheader", %"consume blur_x316"
  %blur_y.s0.x.x.rebased310 = phi i32 [ %4952, %"consume blur_x316" ], [ 0, %"for blur_y.s0.x.x.rebased308.preheader" ]
  %4874 = add nsw i32 %blur_y.s0.x.x.rebased310, %t1582
  %a168 = shl nsw i32 %4874, 5
  %4875 = icmp sgt i32 %a14, %a168
  %b174 = select i1 %4875, i32 %a168, i32 %a14
  %4876 = icmp slt i32 %4874, 1
  %4877 = icmp sgt i32 %4, %a168
  %4878 = or i1 %4876, %4877
  br i1 %4878, label %"produce blur_x314", label %"consume blur_x316"

"end for blur_y.s0.x.x.rebased309":               ; preds = %"consume blur_x316", %"end for blur_y.s0.x.x.rebased301"
  br i1 %34, label %"produce blur_x320", label %after_bb317

"produce blur_x314":                              ; preds = %"for blur_y.s0.x.x.rebased308"
  %4879 = icmp slt i32 %b174, %4
  %blur_x.s0.x.v1.base.s315 = select i1 %4879, i32 %b174, i32 %4
  %t853 = add nsw i32 %blur_x.s0.x.v1.base.s315, %t1825
  %4880 = sext i32 %t853 to i64
  %4881 = getelementptr inbounds i16, i16* %read_input, i64 %4880
  %4882 = getelementptr inbounds i16, i16* %4881, i64 1
  %4883 = bitcast i16* %4882 to <16 x i16>*
  %4884 = load <16 x i16>, <16 x i16>* %4883, align 2, !tbaa !396
  %4885 = getelementptr inbounds i16, i16* %4881, i64 17
  %4886 = bitcast i16* %4885 to <16 x i16>*
  %4887 = load <16 x i16>, <16 x i16>* %4886, align 2, !tbaa !396
  %4888 = getelementptr inbounds i16, i16* %4881, i64 2
  %4889 = bitcast i16* %4888 to <16 x i16>*
  %4890 = load <16 x i16>, <16 x i16>* %4889, align 2, !tbaa !396
  %4891 = getelementptr inbounds i16, i16* %4881, i64 18
  %4892 = bitcast i16* %4891 to <16 x i16>*
  %4893 = load <16 x i16>, <16 x i16>* %4892, align 2, !tbaa !396
  %4894 = bitcast i16* %4881 to <16 x i16>*
  %4895 = load <16 x i16>, <16 x i16>* %4894, align 2, !tbaa !396
  %4896 = getelementptr inbounds i16, i16* %4881, i64 16
  %4897 = bitcast i16* %4896 to <16 x i16>*
  %4898 = load <16 x i16>, <16 x i16>* %4897, align 2, !tbaa !396
  %4899 = add <16 x i16> %4890, %4884
  %4900 = add <16 x i16> %4899, %4895
  %4901 = add <16 x i16> %4893, %4887
  %4902 = add <16 x i16> %4901, %4898
  %4903 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4900, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4904 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4902, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4905 = shufflevector <16 x i16> %4903, <16 x i16> %4904, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4906 = lshr <32 x i16> %4905, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4907 = shufflevector <32 x i16> %4906, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4908 = sext i32 %blur_x.s0.x.v1.base.s315 to i64
  %4909 = add nsw i64 %4908, %4789
  %4910 = getelementptr inbounds i16, i16* %blur_x, i64 %4909
  %4911 = bitcast i16* %4910 to <16 x i16>*
  store <16 x i16> %4907, <16 x i16>* %4911, align 2, !tbaa !399
  %4912 = shufflevector <32 x i16> %4906, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4913 = getelementptr inbounds i16, i16* %4910, i64 16
  %4914 = bitcast i16* %4913 to <16 x i16>*
  store <16 x i16> %4912, <16 x i16>* %4914, align 2, !tbaa !399
  br label %"consume blur_x316"

"consume blur_x316":                              ; preds = %"for blur_y.s0.x.x.rebased308", %"produce blur_x314"
  %4915 = sext i32 %b174 to i64
  %4916 = add nsw i64 %4792, %4915
  %4917 = getelementptr inbounds i16, i16* %blur_x, i64 %4916
  %4918 = bitcast i16* %4917 to <16 x i16>*
  %4919 = load <16 x i16>, <16 x i16>* %4918, align 2, !tbaa !399
  %4920 = getelementptr inbounds i16, i16* %4917, i64 16
  %4921 = bitcast i16* %4920 to <16 x i16>*
  %4922 = load <16 x i16>, <16 x i16>* %4921, align 2, !tbaa !399
  %4923 = add nsw i64 %4795, %4915
  %4924 = getelementptr inbounds i16, i16* %blur_x, i64 %4923
  %4925 = bitcast i16* %4924 to <16 x i16>*
  %4926 = load <16 x i16>, <16 x i16>* %4925, align 2, !tbaa !399
  %4927 = getelementptr inbounds i16, i16* %4924, i64 16
  %4928 = bitcast i16* %4927 to <16 x i16>*
  %4929 = load <16 x i16>, <16 x i16>* %4928, align 2, !tbaa !399
  %4930 = add nsw i64 %4798, %4915
  %4931 = getelementptr inbounds i16, i16* %blur_x, i64 %4930
  %4932 = bitcast i16* %4931 to <16 x i16>*
  %4933 = load <16 x i16>, <16 x i16>* %4932, align 2, !tbaa !399
  %4934 = getelementptr inbounds i16, i16* %4931, i64 16
  %4935 = bitcast i16* %4934 to <16 x i16>*
  %4936 = load <16 x i16>, <16 x i16>* %4935, align 2, !tbaa !399
  %4937 = add <16 x i16> %4926, %4919
  %4938 = add <16 x i16> %4937, %4933
  %4939 = add <16 x i16> %4929, %4922
  %4940 = add <16 x i16> %4939, %4936
  %4941 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4938, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4942 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4940, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4943 = shufflevector <16 x i16> %4941, <16 x i16> %4942, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4944 = lshr <32 x i16> %4943, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4945 = shufflevector <32 x i16> %4944, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4946 = add nsw i64 %4802, %4915
  %4947 = getelementptr inbounds i16, i16* %65, i64 %4946
  %4948 = bitcast i16* %4947 to <16 x i16>*
  store <16 x i16> %4945, <16 x i16>* %4948, align 2, !tbaa !401
  %4949 = shufflevector <32 x i16> %4944, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4950 = getelementptr inbounds i16, i16* %4947, i64 16
  %4951 = bitcast i16* %4950 to <16 x i16>*
  store <16 x i16> %4949, <16 x i16>* %4951, align 2, !tbaa !401
  %4952 = add nuw nsw i32 %blur_y.s0.x.x.rebased310, 1
  %.not2622 = icmp eq i32 %4952, %t1639
  br i1 %.not2622, label %"end for blur_y.s0.x.x.rebased309", label %"for blur_y.s0.x.x.rebased308"

after_bb317:                                      ; preds = %"end for blur_y.s0.x.x.rebased309", %"produce blur_x320"
  br i1 %99, label %"for blur_y.s0.x.x.rebased322.preheader", label %"end for blur_y.s0.x.x.rebased323", !prof !386

"for blur_y.s0.x.x.rebased322.preheader":         ; preds = %after_bb317
  %4953 = sext i32 %t1650 to i64
  %4954 = zext i32 %.pre-phi3313 to i64
  %4955 = mul nsw i64 %4954, %108
  %4956 = sub nsw i64 %4955, %95
  %4957 = zext i32 %.pre-phi3317 to i64
  %4958 = mul nsw i64 %4957, %108
  %4959 = sub nsw i64 %4958, %95
  %4960 = zext i32 %.pre-phi to i64
  %4961 = mul nsw i64 %4960, %108
  %4962 = sub nsw i64 %4961, %95
  %4963 = sext i32 %a26 to i64
  %4964 = add nsw i64 %4963, 12
  %4965 = mul nsw i64 %4964, %109
  %4966 = add nsw i64 %4965, %112
  br label %"for blur_y.s0.x.x.rebased322"

"produce blur_x320":                              ; preds = %"end for blur_y.s0.x.x.rebased309"
  %4967 = getelementptr inbounds i16, i16* %read_input, i64 %135
  %4968 = getelementptr inbounds i16, i16* %4967, i64 -31
  %4969 = bitcast i16* %4968 to <16 x i16>*
  %4970 = load <16 x i16>, <16 x i16>* %4969, align 2, !tbaa !396
  %4971 = getelementptr inbounds i16, i16* %4967, i64 -15
  %4972 = bitcast i16* %4971 to <16 x i16>*
  %4973 = load <16 x i16>, <16 x i16>* %4972, align 2, !tbaa !396
  %4974 = getelementptr inbounds i16, i16* %4967, i64 -30
  %4975 = bitcast i16* %4974 to <16 x i16>*
  %4976 = load <16 x i16>, <16 x i16>* %4975, align 2, !tbaa !396
  %4977 = getelementptr inbounds i16, i16* %4967, i64 -14
  %4978 = bitcast i16* %4977 to <16 x i16>*
  %4979 = load <16 x i16>, <16 x i16>* %4978, align 2, !tbaa !396
  %4980 = getelementptr inbounds i16, i16* %4967, i64 -32
  %4981 = bitcast i16* %4980 to <16 x i16>*
  %4982 = load <16 x i16>, <16 x i16>* %4981, align 2, !tbaa !396
  %4983 = getelementptr inbounds i16, i16* %4967, i64 -16
  %4984 = bitcast i16* %4983 to <16 x i16>*
  %4985 = load <16 x i16>, <16 x i16>* %4984, align 2, !tbaa !396
  %4986 = add <16 x i16> %4976, %4970
  %4987 = add <16 x i16> %4986, %4982
  %4988 = add <16 x i16> %4979, %4973
  %4989 = add <16 x i16> %4988, %4985
  %4990 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4987, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4991 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4989, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4992 = shufflevector <16 x i16> %4990, <16 x i16> %4991, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4993 = lshr <32 x i16> %4992, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4994 = shufflevector <32 x i16> %4993, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4995 = zext i32 %.pre-phi3317 to i64
  %4996 = mul nsw i64 %96, %4995
  %4997 = add nsw i64 %98, %4996
  %4998 = getelementptr inbounds i16, i16* %blur_x, i64 %4997
  %4999 = getelementptr inbounds i16, i16* %4998, i64 -32
  %5000 = bitcast i16* %4999 to <16 x i16>*
  store <16 x i16> %4994, <16 x i16>* %5000, align 2, !tbaa !399
  %5001 = shufflevector <32 x i16> %4993, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5002 = getelementptr inbounds i16, i16* %4998, i64 -16
  %5003 = bitcast i16* %5002 to <16 x i16>*
  store <16 x i16> %5001, <16 x i16>* %5003, align 2, !tbaa !399
  %5004 = zext i32 %.pre-phi3313 to i64
  %5005 = mul nsw i64 %5004, %108
  %5006 = add nsw i64 %5005, %93
  %5007 = getelementptr inbounds i16, i16* %blur_x, i64 %5006
  %5008 = getelementptr inbounds i16, i16* %5007, i64 -32
  %5009 = bitcast i16* %5008 to <16 x i16>*
  %5010 = load <16 x i16>, <16 x i16>* %5009, align 2, !tbaa !399
  %5011 = getelementptr inbounds i16, i16* %5007, i64 -16
  %5012 = bitcast i16* %5011 to <16 x i16>*
  %5013 = load <16 x i16>, <16 x i16>* %5012, align 2, !tbaa !399
  %5014 = mul nsw i64 %4995, %108
  %5015 = add nsw i64 %5014, %93
  %5016 = getelementptr inbounds i16, i16* %blur_x, i64 %5015
  %5017 = getelementptr inbounds i16, i16* %5016, i64 -32
  %5018 = bitcast i16* %5017 to <16 x i16>*
  %5019 = load <16 x i16>, <16 x i16>* %5018, align 2, !tbaa !399
  %5020 = getelementptr inbounds i16, i16* %5016, i64 -16
  %5021 = bitcast i16* %5020 to <16 x i16>*
  %5022 = load <16 x i16>, <16 x i16>* %5021, align 2, !tbaa !399
  %5023 = zext i32 %.pre-phi to i64
  %5024 = mul nsw i64 %5023, %108
  %5025 = add nsw i64 %5024, %93
  %5026 = getelementptr inbounds i16, i16* %blur_x, i64 %5025
  %5027 = getelementptr inbounds i16, i16* %5026, i64 -32
  %5028 = bitcast i16* %5027 to <16 x i16>*
  %5029 = load <16 x i16>, <16 x i16>* %5028, align 2, !tbaa !399
  %5030 = getelementptr inbounds i16, i16* %5026, i64 -16
  %5031 = bitcast i16* %5030 to <16 x i16>*
  %5032 = load <16 x i16>, <16 x i16>* %5031, align 2, !tbaa !399
  %5033 = add <16 x i16> %5019, %5010
  %5034 = add <16 x i16> %5033, %5029
  %5035 = add <16 x i16> %5022, %5013
  %5036 = add <16 x i16> %5035, %5032
  %5037 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5034, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5038 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5036, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5039 = shufflevector <16 x i16> %5037, <16 x i16> %5038, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5040 = lshr <32 x i16> %5039, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5041 = shufflevector <32 x i16> %5040, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5042 = sext i32 %a26 to i64
  %5043 = add nsw i64 %5042, 12
  %5044 = mul nsw i64 %5043, %109
  %5045 = add nsw i64 %111, %5044
  %5046 = getelementptr inbounds i16, i16* %65, i64 %5045
  %5047 = getelementptr inbounds i16, i16* %5046, i64 -32
  %5048 = bitcast i16* %5047 to <16 x i16>*
  store <16 x i16> %5041, <16 x i16>* %5048, align 2, !tbaa !401
  %5049 = shufflevector <32 x i16> %5040, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5050 = getelementptr inbounds i16, i16* %5046, i64 -16
  %5051 = bitcast i16* %5050 to <16 x i16>*
  store <16 x i16> %5049, <16 x i16>* %5051, align 2, !tbaa !401
  br label %after_bb317

"for blur_y.s0.x.x.rebased322":                   ; preds = %"for blur_y.s0.x.x.rebased322.preheader", %"consume blur_x329"
  %indvars.iv3167 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased322.preheader" ], [ %indvars.iv.next3168, %"consume blur_x329" ]
  %5052 = add nsw i64 %indvars.iv3167, %100
  %5053 = icmp slt i64 %5052, 1
  %5054 = trunc i64 %5052 to i32
  %5055 = shl nsw i32 %5054, 5
  %5056 = icmp sgt i32 %4, %5055
  %5057 = or i1 %5053, %5056
  br i1 %5057, label %"produce blur_x328", label %"for blur_y.s0.x.x.rebased322.consume blur_x329_crit_edge"

"for blur_y.s0.x.x.rebased322.consume blur_x329_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased322"
  %.pre3346 = shl nsw i64 %5052, 5
  br label %"consume blur_x329"

"end for blur_y.s0.x.x.rebased323":               ; preds = %"consume blur_x329", %after_bb317
  br i1 %101, label %"for blur_y.s0.x.x.rebased330.preheader", label %"end for blur_y.s0.x.x.rebased331", !prof !386

"for blur_y.s0.x.x.rebased330.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased323"
  %5058 = sext i32 %t1650 to i64
  %5059 = zext i32 %.pre-phi3313 to i64
  %5060 = mul nsw i64 %5059, %108
  %5061 = sub nsw i64 %5060, %95
  %5062 = zext i32 %.pre-phi3317 to i64
  %5063 = mul nsw i64 %5062, %108
  %5064 = sub nsw i64 %5063, %95
  %5065 = zext i32 %.pre-phi to i64
  %5066 = mul nsw i64 %5065, %108
  %5067 = sub nsw i64 %5066, %95
  %5068 = sext i32 %a26 to i64
  %5069 = add nsw i64 %5068, 12
  %5070 = mul nsw i64 %5069, %109
  %5071 = add nsw i64 %5070, %112
  br label %"for blur_y.s0.x.x.rebased330"

"produce blur_x328":                              ; preds = %"for blur_y.s0.x.x.rebased322"
  %t864 = add nsw i32 %5055, %t1841
  %5072 = sext i32 %t864 to i64
  %5073 = getelementptr inbounds i16, i16* %read_input, i64 %5072
  %5074 = getelementptr inbounds i16, i16* %5073, i64 1
  %5075 = bitcast i16* %5074 to <16 x i16>*
  %5076 = load <16 x i16>, <16 x i16>* %5075, align 2, !tbaa !396
  %5077 = getelementptr inbounds i16, i16* %5073, i64 17
  %5078 = bitcast i16* %5077 to <16 x i16>*
  %5079 = load <16 x i16>, <16 x i16>* %5078, align 2, !tbaa !396
  %5080 = getelementptr inbounds i16, i16* %5073, i64 2
  %5081 = bitcast i16* %5080 to <16 x i16>*
  %5082 = load <16 x i16>, <16 x i16>* %5081, align 2, !tbaa !396
  %5083 = getelementptr inbounds i16, i16* %5073, i64 18
  %5084 = bitcast i16* %5083 to <16 x i16>*
  %5085 = load <16 x i16>, <16 x i16>* %5084, align 2, !tbaa !396
  %5086 = bitcast i16* %5073 to <16 x i16>*
  %5087 = load <16 x i16>, <16 x i16>* %5086, align 2, !tbaa !396
  %5088 = getelementptr inbounds i16, i16* %5073, i64 16
  %5089 = bitcast i16* %5088 to <16 x i16>*
  %5090 = load <16 x i16>, <16 x i16>* %5089, align 2, !tbaa !396
  %5091 = add <16 x i16> %5082, %5076
  %5092 = add <16 x i16> %5091, %5087
  %5093 = add <16 x i16> %5085, %5079
  %5094 = add <16 x i16> %5093, %5090
  %5095 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5092, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5096 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5094, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5097 = shufflevector <16 x i16> %5095, <16 x i16> %5096, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5098 = lshr <32 x i16> %5097, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5099 = shufflevector <32 x i16> %5098, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5100 = shl nsw i64 %5052, 5
  %5101 = add nsw i64 %5100, %4953
  %5102 = getelementptr inbounds i16, i16* %blur_x, i64 %5101
  %5103 = bitcast i16* %5102 to <16 x i16>*
  store <16 x i16> %5099, <16 x i16>* %5103, align 2, !tbaa !399
  %5104 = shufflevector <32 x i16> %5098, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5105 = getelementptr inbounds i16, i16* %5102, i64 16
  %5106 = bitcast i16* %5105 to <16 x i16>*
  store <16 x i16> %5104, <16 x i16>* %5106, align 2, !tbaa !399
  br label %"consume blur_x329"

"consume blur_x329":                              ; preds = %"for blur_y.s0.x.x.rebased322.consume blur_x329_crit_edge", %"produce blur_x328"
  %.pre-phi3347 = phi i64 [ %.pre3346, %"for blur_y.s0.x.x.rebased322.consume blur_x329_crit_edge" ], [ %5100, %"produce blur_x328" ]
  %5107 = add nsw i64 %4956, %.pre-phi3347
  %5108 = getelementptr inbounds i16, i16* %blur_x, i64 %5107
  %5109 = bitcast i16* %5108 to <16 x i16>*
  %5110 = load <16 x i16>, <16 x i16>* %5109, align 2, !tbaa !399
  %5111 = getelementptr inbounds i16, i16* %5108, i64 16
  %5112 = bitcast i16* %5111 to <16 x i16>*
  %5113 = load <16 x i16>, <16 x i16>* %5112, align 2, !tbaa !399
  %5114 = add nsw i64 %4959, %.pre-phi3347
  %5115 = getelementptr inbounds i16, i16* %blur_x, i64 %5114
  %5116 = bitcast i16* %5115 to <16 x i16>*
  %5117 = load <16 x i16>, <16 x i16>* %5116, align 2, !tbaa !399
  %5118 = getelementptr inbounds i16, i16* %5115, i64 16
  %5119 = bitcast i16* %5118 to <16 x i16>*
  %5120 = load <16 x i16>, <16 x i16>* %5119, align 2, !tbaa !399
  %5121 = add nsw i64 %4962, %.pre-phi3347
  %5122 = getelementptr inbounds i16, i16* %blur_x, i64 %5121
  %5123 = bitcast i16* %5122 to <16 x i16>*
  %5124 = load <16 x i16>, <16 x i16>* %5123, align 2, !tbaa !399
  %5125 = getelementptr inbounds i16, i16* %5122, i64 16
  %5126 = bitcast i16* %5125 to <16 x i16>*
  %5127 = load <16 x i16>, <16 x i16>* %5126, align 2, !tbaa !399
  %5128 = add <16 x i16> %5117, %5110
  %5129 = add <16 x i16> %5128, %5124
  %5130 = add <16 x i16> %5120, %5113
  %5131 = add <16 x i16> %5130, %5127
  %5132 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5129, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5133 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5131, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5134 = shufflevector <16 x i16> %5132, <16 x i16> %5133, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5135 = lshr <32 x i16> %5134, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5136 = shufflevector <32 x i16> %5135, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5137 = add nsw i64 %4966, %.pre-phi3347
  %5138 = getelementptr inbounds i16, i16* %65, i64 %5137
  %5139 = bitcast i16* %5138 to <16 x i16>*
  store <16 x i16> %5136, <16 x i16>* %5139, align 2, !tbaa !401
  %5140 = shufflevector <32 x i16> %5135, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5141 = getelementptr inbounds i16, i16* %5138, i64 16
  %5142 = bitcast i16* %5141 to <16 x i16>*
  store <16 x i16> %5140, <16 x i16>* %5142, align 2, !tbaa !401
  %indvars.iv.next3168 = add nuw nsw i64 %indvars.iv3167, 1
  %.not2621 = icmp eq i64 %indvars.iv.next3168, %180
  br i1 %.not2621, label %"end for blur_y.s0.x.x.rebased323", label %"for blur_y.s0.x.x.rebased322"

"for blur_y.s0.x.x.rebased330":                   ; preds = %"for blur_y.s0.x.x.rebased330.preheader", %"consume blur_x338"
  %blur_y.s0.x.x.rebased332 = phi i32 [ %5221, %"consume blur_x338" ], [ 0, %"for blur_y.s0.x.x.rebased330.preheader" ]
  %5143 = add nsw i32 %blur_y.s0.x.x.rebased332, %t1582
  %a175 = shl nsw i32 %5143, 5
  %5144 = icmp sgt i32 %a14, %a175
  %b181 = select i1 %5144, i32 %a175, i32 %a14
  %5145 = icmp slt i32 %5143, 1
  %5146 = icmp sgt i32 %4, %a175
  %5147 = or i1 %5145, %5146
  br i1 %5147, label %"produce blur_x336", label %"consume blur_x338"

"end for blur_y.s0.x.x.rebased331":               ; preds = %"consume blur_x338", %"end for blur_y.s0.x.x.rebased323"
  br i1 %34, label %"produce blur_x342", label %after_bb339

"produce blur_x336":                              ; preds = %"for blur_y.s0.x.x.rebased330"
  %5148 = icmp slt i32 %b181, %4
  %blur_x.s0.x.v1.base.s337 = select i1 %5148, i32 %b181, i32 %4
  %t869 = add nsw i32 %blur_x.s0.x.v1.base.s337, %t1841
  %5149 = sext i32 %t869 to i64
  %5150 = getelementptr inbounds i16, i16* %read_input, i64 %5149
  %5151 = getelementptr inbounds i16, i16* %5150, i64 1
  %5152 = bitcast i16* %5151 to <16 x i16>*
  %5153 = load <16 x i16>, <16 x i16>* %5152, align 2, !tbaa !396
  %5154 = getelementptr inbounds i16, i16* %5150, i64 17
  %5155 = bitcast i16* %5154 to <16 x i16>*
  %5156 = load <16 x i16>, <16 x i16>* %5155, align 2, !tbaa !396
  %5157 = getelementptr inbounds i16, i16* %5150, i64 2
  %5158 = bitcast i16* %5157 to <16 x i16>*
  %5159 = load <16 x i16>, <16 x i16>* %5158, align 2, !tbaa !396
  %5160 = getelementptr inbounds i16, i16* %5150, i64 18
  %5161 = bitcast i16* %5160 to <16 x i16>*
  %5162 = load <16 x i16>, <16 x i16>* %5161, align 2, !tbaa !396
  %5163 = bitcast i16* %5150 to <16 x i16>*
  %5164 = load <16 x i16>, <16 x i16>* %5163, align 2, !tbaa !396
  %5165 = getelementptr inbounds i16, i16* %5150, i64 16
  %5166 = bitcast i16* %5165 to <16 x i16>*
  %5167 = load <16 x i16>, <16 x i16>* %5166, align 2, !tbaa !396
  %5168 = add <16 x i16> %5159, %5153
  %5169 = add <16 x i16> %5168, %5164
  %5170 = add <16 x i16> %5162, %5156
  %5171 = add <16 x i16> %5170, %5167
  %5172 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5169, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5173 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5171, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5174 = shufflevector <16 x i16> %5172, <16 x i16> %5173, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5175 = lshr <32 x i16> %5174, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5176 = shufflevector <32 x i16> %5175, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5177 = sext i32 %blur_x.s0.x.v1.base.s337 to i64
  %5178 = add nsw i64 %5177, %5058
  %5179 = getelementptr inbounds i16, i16* %blur_x, i64 %5178
  %5180 = bitcast i16* %5179 to <16 x i16>*
  store <16 x i16> %5176, <16 x i16>* %5180, align 2, !tbaa !399
  %5181 = shufflevector <32 x i16> %5175, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5182 = getelementptr inbounds i16, i16* %5179, i64 16
  %5183 = bitcast i16* %5182 to <16 x i16>*
  store <16 x i16> %5181, <16 x i16>* %5183, align 2, !tbaa !399
  br label %"consume blur_x338"

"consume blur_x338":                              ; preds = %"for blur_y.s0.x.x.rebased330", %"produce blur_x336"
  %5184 = sext i32 %b181 to i64
  %5185 = add nsw i64 %5061, %5184
  %5186 = getelementptr inbounds i16, i16* %blur_x, i64 %5185
  %5187 = bitcast i16* %5186 to <16 x i16>*
  %5188 = load <16 x i16>, <16 x i16>* %5187, align 2, !tbaa !399
  %5189 = getelementptr inbounds i16, i16* %5186, i64 16
  %5190 = bitcast i16* %5189 to <16 x i16>*
  %5191 = load <16 x i16>, <16 x i16>* %5190, align 2, !tbaa !399
  %5192 = add nsw i64 %5064, %5184
  %5193 = getelementptr inbounds i16, i16* %blur_x, i64 %5192
  %5194 = bitcast i16* %5193 to <16 x i16>*
  %5195 = load <16 x i16>, <16 x i16>* %5194, align 2, !tbaa !399
  %5196 = getelementptr inbounds i16, i16* %5193, i64 16
  %5197 = bitcast i16* %5196 to <16 x i16>*
  %5198 = load <16 x i16>, <16 x i16>* %5197, align 2, !tbaa !399
  %5199 = add nsw i64 %5067, %5184
  %5200 = getelementptr inbounds i16, i16* %blur_x, i64 %5199
  %5201 = bitcast i16* %5200 to <16 x i16>*
  %5202 = load <16 x i16>, <16 x i16>* %5201, align 2, !tbaa !399
  %5203 = getelementptr inbounds i16, i16* %5200, i64 16
  %5204 = bitcast i16* %5203 to <16 x i16>*
  %5205 = load <16 x i16>, <16 x i16>* %5204, align 2, !tbaa !399
  %5206 = add <16 x i16> %5195, %5188
  %5207 = add <16 x i16> %5206, %5202
  %5208 = add <16 x i16> %5198, %5191
  %5209 = add <16 x i16> %5208, %5205
  %5210 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5207, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5211 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5209, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5212 = shufflevector <16 x i16> %5210, <16 x i16> %5211, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5213 = lshr <32 x i16> %5212, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5214 = shufflevector <32 x i16> %5213, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5215 = add nsw i64 %5071, %5184
  %5216 = getelementptr inbounds i16, i16* %65, i64 %5215
  %5217 = bitcast i16* %5216 to <16 x i16>*
  store <16 x i16> %5214, <16 x i16>* %5217, align 2, !tbaa !401
  %5218 = shufflevector <32 x i16> %5213, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5219 = getelementptr inbounds i16, i16* %5216, i64 16
  %5220 = bitcast i16* %5219 to <16 x i16>*
  store <16 x i16> %5218, <16 x i16>* %5220, align 2, !tbaa !401
  %5221 = add nuw nsw i32 %blur_y.s0.x.x.rebased332, 1
  %.not2620 = icmp eq i32 %5221, %t1639
  br i1 %.not2620, label %"end for blur_y.s0.x.x.rebased331", label %"for blur_y.s0.x.x.rebased330"

after_bb339:                                      ; preds = %"end for blur_y.s0.x.x.rebased331", %"produce blur_x342"
  br i1 %99, label %"for blur_y.s0.x.x.rebased344.preheader", label %"end for blur_y.s0.x.x.rebased345", !prof !386

"for blur_y.s0.x.x.rebased344.preheader":         ; preds = %after_bb339
  %5222 = sext i32 %t1666 to i64
  %5223 = zext i32 %.pre-phi3317 to i64
  %5224 = mul nsw i64 %5223, %108
  %5225 = sub nsw i64 %5224, %95
  %5226 = zext i32 %.pre-phi3323 to i64
  %5227 = mul nsw i64 %5226, %108
  %5228 = sub nsw i64 %5227, %95
  %5229 = zext i32 %.pre-phi3313 to i64
  %5230 = mul nsw i64 %5229, %108
  %5231 = sub nsw i64 %5230, %95
  %5232 = sext i32 %a26 to i64
  %5233 = add nsw i64 %5232, 13
  %5234 = mul nsw i64 %5233, %109
  %5235 = add nsw i64 %5234, %112
  br label %"for blur_y.s0.x.x.rebased344"

"produce blur_x342":                              ; preds = %"end for blur_y.s0.x.x.rebased331"
  %5236 = getelementptr inbounds i16, i16* %read_input, i64 %137
  %5237 = getelementptr inbounds i16, i16* %5236, i64 -31
  %5238 = bitcast i16* %5237 to <16 x i16>*
  %5239 = load <16 x i16>, <16 x i16>* %5238, align 2, !tbaa !396
  %5240 = getelementptr inbounds i16, i16* %5236, i64 -15
  %5241 = bitcast i16* %5240 to <16 x i16>*
  %5242 = load <16 x i16>, <16 x i16>* %5241, align 2, !tbaa !396
  %5243 = getelementptr inbounds i16, i16* %5236, i64 -30
  %5244 = bitcast i16* %5243 to <16 x i16>*
  %5245 = load <16 x i16>, <16 x i16>* %5244, align 2, !tbaa !396
  %5246 = getelementptr inbounds i16, i16* %5236, i64 -14
  %5247 = bitcast i16* %5246 to <16 x i16>*
  %5248 = load <16 x i16>, <16 x i16>* %5247, align 2, !tbaa !396
  %5249 = getelementptr inbounds i16, i16* %5236, i64 -32
  %5250 = bitcast i16* %5249 to <16 x i16>*
  %5251 = load <16 x i16>, <16 x i16>* %5250, align 2, !tbaa !396
  %5252 = getelementptr inbounds i16, i16* %5236, i64 -16
  %5253 = bitcast i16* %5252 to <16 x i16>*
  %5254 = load <16 x i16>, <16 x i16>* %5253, align 2, !tbaa !396
  %5255 = add <16 x i16> %5245, %5239
  %5256 = add <16 x i16> %5255, %5251
  %5257 = add <16 x i16> %5248, %5242
  %5258 = add <16 x i16> %5257, %5254
  %5259 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5256, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5260 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5258, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5261 = shufflevector <16 x i16> %5259, <16 x i16> %5260, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5262 = lshr <32 x i16> %5261, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5263 = shufflevector <32 x i16> %5262, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5264 = zext i32 %.pre-phi3323 to i64
  %5265 = mul nsw i64 %96, %5264
  %5266 = add nsw i64 %98, %5265
  %5267 = getelementptr inbounds i16, i16* %blur_x, i64 %5266
  %5268 = getelementptr inbounds i16, i16* %5267, i64 -32
  %5269 = bitcast i16* %5268 to <16 x i16>*
  store <16 x i16> %5263, <16 x i16>* %5269, align 2, !tbaa !399
  %5270 = shufflevector <32 x i16> %5262, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5271 = getelementptr inbounds i16, i16* %5267, i64 -16
  %5272 = bitcast i16* %5271 to <16 x i16>*
  store <16 x i16> %5270, <16 x i16>* %5272, align 2, !tbaa !399
  %5273 = zext i32 %.pre-phi3317 to i64
  %5274 = mul nsw i64 %5273, %108
  %5275 = add nsw i64 %5274, %93
  %5276 = getelementptr inbounds i16, i16* %blur_x, i64 %5275
  %5277 = getelementptr inbounds i16, i16* %5276, i64 -32
  %5278 = bitcast i16* %5277 to <16 x i16>*
  %5279 = load <16 x i16>, <16 x i16>* %5278, align 2, !tbaa !399
  %5280 = getelementptr inbounds i16, i16* %5276, i64 -16
  %5281 = bitcast i16* %5280 to <16 x i16>*
  %5282 = load <16 x i16>, <16 x i16>* %5281, align 2, !tbaa !399
  %5283 = mul nsw i64 %5264, %108
  %5284 = add nsw i64 %5283, %93
  %5285 = getelementptr inbounds i16, i16* %blur_x, i64 %5284
  %5286 = getelementptr inbounds i16, i16* %5285, i64 -32
  %5287 = bitcast i16* %5286 to <16 x i16>*
  %5288 = load <16 x i16>, <16 x i16>* %5287, align 2, !tbaa !399
  %5289 = getelementptr inbounds i16, i16* %5285, i64 -16
  %5290 = bitcast i16* %5289 to <16 x i16>*
  %5291 = load <16 x i16>, <16 x i16>* %5290, align 2, !tbaa !399
  %5292 = zext i32 %.pre-phi3313 to i64
  %5293 = mul nsw i64 %5292, %108
  %5294 = add nsw i64 %5293, %93
  %5295 = getelementptr inbounds i16, i16* %blur_x, i64 %5294
  %5296 = getelementptr inbounds i16, i16* %5295, i64 -32
  %5297 = bitcast i16* %5296 to <16 x i16>*
  %5298 = load <16 x i16>, <16 x i16>* %5297, align 2, !tbaa !399
  %5299 = getelementptr inbounds i16, i16* %5295, i64 -16
  %5300 = bitcast i16* %5299 to <16 x i16>*
  %5301 = load <16 x i16>, <16 x i16>* %5300, align 2, !tbaa !399
  %5302 = add <16 x i16> %5288, %5279
  %5303 = add <16 x i16> %5302, %5298
  %5304 = add <16 x i16> %5291, %5282
  %5305 = add <16 x i16> %5304, %5301
  %5306 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5303, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5307 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5305, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5308 = shufflevector <16 x i16> %5306, <16 x i16> %5307, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5309 = lshr <32 x i16> %5308, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5310 = shufflevector <32 x i16> %5309, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5311 = sext i32 %a26 to i64
  %5312 = add nsw i64 %5311, 13
  %5313 = mul nsw i64 %5312, %109
  %5314 = add nsw i64 %111, %5313
  %5315 = getelementptr inbounds i16, i16* %65, i64 %5314
  %5316 = getelementptr inbounds i16, i16* %5315, i64 -32
  %5317 = bitcast i16* %5316 to <16 x i16>*
  store <16 x i16> %5310, <16 x i16>* %5317, align 2, !tbaa !401
  %5318 = shufflevector <32 x i16> %5309, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5319 = getelementptr inbounds i16, i16* %5315, i64 -16
  %5320 = bitcast i16* %5319 to <16 x i16>*
  store <16 x i16> %5318, <16 x i16>* %5320, align 2, !tbaa !401
  br label %after_bb339

"for blur_y.s0.x.x.rebased344":                   ; preds = %"for blur_y.s0.x.x.rebased344.preheader", %"consume blur_x351"
  %indvars.iv3170 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased344.preheader" ], [ %indvars.iv.next3171, %"consume blur_x351" ]
  %5321 = add nsw i64 %indvars.iv3170, %100
  %5322 = icmp slt i64 %5321, 1
  %5323 = trunc i64 %5321 to i32
  %5324 = shl nsw i32 %5323, 5
  %5325 = icmp sgt i32 %4, %5324
  %5326 = or i1 %5322, %5325
  br i1 %5326, label %"produce blur_x350", label %"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge"

"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased344"
  %.pre3348 = shl nsw i64 %5321, 5
  br label %"consume blur_x351"

"end for blur_y.s0.x.x.rebased345":               ; preds = %"consume blur_x351", %after_bb339
  br i1 %101, label %"for blur_y.s0.x.x.rebased352.preheader", label %"end for blur_y.s0.x.x.rebased353", !prof !386

"for blur_y.s0.x.x.rebased352.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased345"
  %5327 = sext i32 %t1666 to i64
  %5328 = zext i32 %.pre-phi3317 to i64
  %5329 = mul nsw i64 %5328, %108
  %5330 = sub nsw i64 %5329, %95
  %5331 = zext i32 %.pre-phi3323 to i64
  %5332 = mul nsw i64 %5331, %108
  %5333 = sub nsw i64 %5332, %95
  %5334 = zext i32 %.pre-phi3313 to i64
  %5335 = mul nsw i64 %5334, %108
  %5336 = sub nsw i64 %5335, %95
  %5337 = sext i32 %a26 to i64
  %5338 = add nsw i64 %5337, 13
  %5339 = mul nsw i64 %5338, %109
  %5340 = add nsw i64 %5339, %112
  br label %"for blur_y.s0.x.x.rebased352"

"produce blur_x350":                              ; preds = %"for blur_y.s0.x.x.rebased344"
  %t880 = add nsw i32 %5324, %t1857
  %5341 = sext i32 %t880 to i64
  %5342 = getelementptr inbounds i16, i16* %read_input, i64 %5341
  %5343 = getelementptr inbounds i16, i16* %5342, i64 1
  %5344 = bitcast i16* %5343 to <16 x i16>*
  %5345 = load <16 x i16>, <16 x i16>* %5344, align 2, !tbaa !396
  %5346 = getelementptr inbounds i16, i16* %5342, i64 17
  %5347 = bitcast i16* %5346 to <16 x i16>*
  %5348 = load <16 x i16>, <16 x i16>* %5347, align 2, !tbaa !396
  %5349 = getelementptr inbounds i16, i16* %5342, i64 2
  %5350 = bitcast i16* %5349 to <16 x i16>*
  %5351 = load <16 x i16>, <16 x i16>* %5350, align 2, !tbaa !396
  %5352 = getelementptr inbounds i16, i16* %5342, i64 18
  %5353 = bitcast i16* %5352 to <16 x i16>*
  %5354 = load <16 x i16>, <16 x i16>* %5353, align 2, !tbaa !396
  %5355 = bitcast i16* %5342 to <16 x i16>*
  %5356 = load <16 x i16>, <16 x i16>* %5355, align 2, !tbaa !396
  %5357 = getelementptr inbounds i16, i16* %5342, i64 16
  %5358 = bitcast i16* %5357 to <16 x i16>*
  %5359 = load <16 x i16>, <16 x i16>* %5358, align 2, !tbaa !396
  %5360 = add <16 x i16> %5351, %5345
  %5361 = add <16 x i16> %5360, %5356
  %5362 = add <16 x i16> %5354, %5348
  %5363 = add <16 x i16> %5362, %5359
  %5364 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5361, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5365 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5363, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5366 = shufflevector <16 x i16> %5364, <16 x i16> %5365, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5367 = lshr <32 x i16> %5366, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5368 = shufflevector <32 x i16> %5367, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5369 = shl nsw i64 %5321, 5
  %5370 = add nsw i64 %5369, %5222
  %5371 = getelementptr inbounds i16, i16* %blur_x, i64 %5370
  %5372 = bitcast i16* %5371 to <16 x i16>*
  store <16 x i16> %5368, <16 x i16>* %5372, align 2, !tbaa !399
  %5373 = shufflevector <32 x i16> %5367, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5374 = getelementptr inbounds i16, i16* %5371, i64 16
  %5375 = bitcast i16* %5374 to <16 x i16>*
  store <16 x i16> %5373, <16 x i16>* %5375, align 2, !tbaa !399
  br label %"consume blur_x351"

"consume blur_x351":                              ; preds = %"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge", %"produce blur_x350"
  %.pre-phi3349 = phi i64 [ %.pre3348, %"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge" ], [ %5369, %"produce blur_x350" ]
  %5376 = add nsw i64 %5225, %.pre-phi3349
  %5377 = getelementptr inbounds i16, i16* %blur_x, i64 %5376
  %5378 = bitcast i16* %5377 to <16 x i16>*
  %5379 = load <16 x i16>, <16 x i16>* %5378, align 2, !tbaa !399
  %5380 = getelementptr inbounds i16, i16* %5377, i64 16
  %5381 = bitcast i16* %5380 to <16 x i16>*
  %5382 = load <16 x i16>, <16 x i16>* %5381, align 2, !tbaa !399
  %5383 = add nsw i64 %5228, %.pre-phi3349
  %5384 = getelementptr inbounds i16, i16* %blur_x, i64 %5383
  %5385 = bitcast i16* %5384 to <16 x i16>*
  %5386 = load <16 x i16>, <16 x i16>* %5385, align 2, !tbaa !399
  %5387 = getelementptr inbounds i16, i16* %5384, i64 16
  %5388 = bitcast i16* %5387 to <16 x i16>*
  %5389 = load <16 x i16>, <16 x i16>* %5388, align 2, !tbaa !399
  %5390 = add nsw i64 %5231, %.pre-phi3349
  %5391 = getelementptr inbounds i16, i16* %blur_x, i64 %5390
  %5392 = bitcast i16* %5391 to <16 x i16>*
  %5393 = load <16 x i16>, <16 x i16>* %5392, align 2, !tbaa !399
  %5394 = getelementptr inbounds i16, i16* %5391, i64 16
  %5395 = bitcast i16* %5394 to <16 x i16>*
  %5396 = load <16 x i16>, <16 x i16>* %5395, align 2, !tbaa !399
  %5397 = add <16 x i16> %5386, %5379
  %5398 = add <16 x i16> %5397, %5393
  %5399 = add <16 x i16> %5389, %5382
  %5400 = add <16 x i16> %5399, %5396
  %5401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5398, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5402 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5400, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5403 = shufflevector <16 x i16> %5401, <16 x i16> %5402, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5404 = lshr <32 x i16> %5403, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5405 = shufflevector <32 x i16> %5404, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5406 = add nsw i64 %5235, %.pre-phi3349
  %5407 = getelementptr inbounds i16, i16* %65, i64 %5406
  %5408 = bitcast i16* %5407 to <16 x i16>*
  store <16 x i16> %5405, <16 x i16>* %5408, align 2, !tbaa !401
  %5409 = shufflevector <32 x i16> %5404, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5410 = getelementptr inbounds i16, i16* %5407, i64 16
  %5411 = bitcast i16* %5410 to <16 x i16>*
  store <16 x i16> %5409, <16 x i16>* %5411, align 2, !tbaa !401
  %indvars.iv.next3171 = add nuw nsw i64 %indvars.iv3170, 1
  %.not2619 = icmp eq i64 %indvars.iv.next3171, %180
  br i1 %.not2619, label %"end for blur_y.s0.x.x.rebased345", label %"for blur_y.s0.x.x.rebased344"

"for blur_y.s0.x.x.rebased352":                   ; preds = %"for blur_y.s0.x.x.rebased352.preheader", %"consume blur_x360"
  %blur_y.s0.x.x.rebased354 = phi i32 [ %5490, %"consume blur_x360" ], [ 0, %"for blur_y.s0.x.x.rebased352.preheader" ]
  %5412 = add nsw i32 %blur_y.s0.x.x.rebased354, %t1582
  %a182 = shl nsw i32 %5412, 5
  %5413 = icmp sgt i32 %a14, %a182
  %b188 = select i1 %5413, i32 %a182, i32 %a14
  %5414 = icmp slt i32 %5412, 1
  %5415 = icmp sgt i32 %4, %a182
  %5416 = or i1 %5414, %5415
  br i1 %5416, label %"produce blur_x358", label %"consume blur_x360"

"end for blur_y.s0.x.x.rebased353":               ; preds = %"consume blur_x360", %"end for blur_y.s0.x.x.rebased345"
  br i1 %34, label %"produce blur_x364", label %after_bb361

"produce blur_x358":                              ; preds = %"for blur_y.s0.x.x.rebased352"
  %5417 = icmp slt i32 %b188, %4
  %blur_x.s0.x.v1.base.s359 = select i1 %5417, i32 %b188, i32 %4
  %t885 = add nsw i32 %blur_x.s0.x.v1.base.s359, %t1857
  %5418 = sext i32 %t885 to i64
  %5419 = getelementptr inbounds i16, i16* %read_input, i64 %5418
  %5420 = getelementptr inbounds i16, i16* %5419, i64 1
  %5421 = bitcast i16* %5420 to <16 x i16>*
  %5422 = load <16 x i16>, <16 x i16>* %5421, align 2, !tbaa !396
  %5423 = getelementptr inbounds i16, i16* %5419, i64 17
  %5424 = bitcast i16* %5423 to <16 x i16>*
  %5425 = load <16 x i16>, <16 x i16>* %5424, align 2, !tbaa !396
  %5426 = getelementptr inbounds i16, i16* %5419, i64 2
  %5427 = bitcast i16* %5426 to <16 x i16>*
  %5428 = load <16 x i16>, <16 x i16>* %5427, align 2, !tbaa !396
  %5429 = getelementptr inbounds i16, i16* %5419, i64 18
  %5430 = bitcast i16* %5429 to <16 x i16>*
  %5431 = load <16 x i16>, <16 x i16>* %5430, align 2, !tbaa !396
  %5432 = bitcast i16* %5419 to <16 x i16>*
  %5433 = load <16 x i16>, <16 x i16>* %5432, align 2, !tbaa !396
  %5434 = getelementptr inbounds i16, i16* %5419, i64 16
  %5435 = bitcast i16* %5434 to <16 x i16>*
  %5436 = load <16 x i16>, <16 x i16>* %5435, align 2, !tbaa !396
  %5437 = add <16 x i16> %5428, %5422
  %5438 = add <16 x i16> %5437, %5433
  %5439 = add <16 x i16> %5431, %5425
  %5440 = add <16 x i16> %5439, %5436
  %5441 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5438, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5442 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5440, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5443 = shufflevector <16 x i16> %5441, <16 x i16> %5442, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5444 = lshr <32 x i16> %5443, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5445 = shufflevector <32 x i16> %5444, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5446 = sext i32 %blur_x.s0.x.v1.base.s359 to i64
  %5447 = add nsw i64 %5446, %5327
  %5448 = getelementptr inbounds i16, i16* %blur_x, i64 %5447
  %5449 = bitcast i16* %5448 to <16 x i16>*
  store <16 x i16> %5445, <16 x i16>* %5449, align 2, !tbaa !399
  %5450 = shufflevector <32 x i16> %5444, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5451 = getelementptr inbounds i16, i16* %5448, i64 16
  %5452 = bitcast i16* %5451 to <16 x i16>*
  store <16 x i16> %5450, <16 x i16>* %5452, align 2, !tbaa !399
  br label %"consume blur_x360"

"consume blur_x360":                              ; preds = %"for blur_y.s0.x.x.rebased352", %"produce blur_x358"
  %5453 = sext i32 %b188 to i64
  %5454 = add nsw i64 %5330, %5453
  %5455 = getelementptr inbounds i16, i16* %blur_x, i64 %5454
  %5456 = bitcast i16* %5455 to <16 x i16>*
  %5457 = load <16 x i16>, <16 x i16>* %5456, align 2, !tbaa !399
  %5458 = getelementptr inbounds i16, i16* %5455, i64 16
  %5459 = bitcast i16* %5458 to <16 x i16>*
  %5460 = load <16 x i16>, <16 x i16>* %5459, align 2, !tbaa !399
  %5461 = add nsw i64 %5333, %5453
  %5462 = getelementptr inbounds i16, i16* %blur_x, i64 %5461
  %5463 = bitcast i16* %5462 to <16 x i16>*
  %5464 = load <16 x i16>, <16 x i16>* %5463, align 2, !tbaa !399
  %5465 = getelementptr inbounds i16, i16* %5462, i64 16
  %5466 = bitcast i16* %5465 to <16 x i16>*
  %5467 = load <16 x i16>, <16 x i16>* %5466, align 2, !tbaa !399
  %5468 = add nsw i64 %5336, %5453
  %5469 = getelementptr inbounds i16, i16* %blur_x, i64 %5468
  %5470 = bitcast i16* %5469 to <16 x i16>*
  %5471 = load <16 x i16>, <16 x i16>* %5470, align 2, !tbaa !399
  %5472 = getelementptr inbounds i16, i16* %5469, i64 16
  %5473 = bitcast i16* %5472 to <16 x i16>*
  %5474 = load <16 x i16>, <16 x i16>* %5473, align 2, !tbaa !399
  %5475 = add <16 x i16> %5464, %5457
  %5476 = add <16 x i16> %5475, %5471
  %5477 = add <16 x i16> %5467, %5460
  %5478 = add <16 x i16> %5477, %5474
  %5479 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5476, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5480 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5478, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5481 = shufflevector <16 x i16> %5479, <16 x i16> %5480, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5482 = lshr <32 x i16> %5481, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5483 = shufflevector <32 x i16> %5482, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5484 = add nsw i64 %5340, %5453
  %5485 = getelementptr inbounds i16, i16* %65, i64 %5484
  %5486 = bitcast i16* %5485 to <16 x i16>*
  store <16 x i16> %5483, <16 x i16>* %5486, align 2, !tbaa !401
  %5487 = shufflevector <32 x i16> %5482, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5488 = getelementptr inbounds i16, i16* %5485, i64 16
  %5489 = bitcast i16* %5488 to <16 x i16>*
  store <16 x i16> %5487, <16 x i16>* %5489, align 2, !tbaa !401
  %5490 = add nuw nsw i32 %blur_y.s0.x.x.rebased354, 1
  %.not2618 = icmp eq i32 %5490, %t1639
  br i1 %.not2618, label %"end for blur_y.s0.x.x.rebased353", label %"for blur_y.s0.x.x.rebased352"

after_bb361:                                      ; preds = %"end for blur_y.s0.x.x.rebased353", %"produce blur_x364"
  br i1 %99, label %"for blur_y.s0.x.x.rebased366.preheader", label %"end for blur_y.s0.x.x.rebased367", !prof !386

"for blur_y.s0.x.x.rebased366.preheader":         ; preds = %after_bb361
  %5491 = sext i32 %t1638 to i64
  %5492 = zext i32 %.pre-phi3323 to i64
  %5493 = mul nsw i64 %5492, %108
  %5494 = sub nsw i64 %5493, %95
  %5495 = zext i32 %.pre-phi to i64
  %5496 = mul nsw i64 %5495, %108
  %5497 = sub nsw i64 %5496, %95
  %5498 = zext i32 %.pre-phi3317 to i64
  %5499 = mul nsw i64 %5498, %108
  %5500 = sub nsw i64 %5499, %95
  %5501 = sext i32 %a26 to i64
  %5502 = add nsw i64 %5501, 14
  %5503 = mul nsw i64 %5502, %109
  %5504 = add nsw i64 %5503, %112
  br label %"for blur_y.s0.x.x.rebased366"

"produce blur_x364":                              ; preds = %"end for blur_y.s0.x.x.rebased353"
  %5505 = getelementptr inbounds i16, i16* %read_input, i64 %139
  %5506 = getelementptr inbounds i16, i16* %5505, i64 -31
  %5507 = bitcast i16* %5506 to <16 x i16>*
  %5508 = load <16 x i16>, <16 x i16>* %5507, align 2, !tbaa !396
  %5509 = getelementptr inbounds i16, i16* %5505, i64 -15
  %5510 = bitcast i16* %5509 to <16 x i16>*
  %5511 = load <16 x i16>, <16 x i16>* %5510, align 2, !tbaa !396
  %5512 = getelementptr inbounds i16, i16* %5505, i64 -30
  %5513 = bitcast i16* %5512 to <16 x i16>*
  %5514 = load <16 x i16>, <16 x i16>* %5513, align 2, !tbaa !396
  %5515 = getelementptr inbounds i16, i16* %5505, i64 -14
  %5516 = bitcast i16* %5515 to <16 x i16>*
  %5517 = load <16 x i16>, <16 x i16>* %5516, align 2, !tbaa !396
  %5518 = getelementptr inbounds i16, i16* %5505, i64 -32
  %5519 = bitcast i16* %5518 to <16 x i16>*
  %5520 = load <16 x i16>, <16 x i16>* %5519, align 2, !tbaa !396
  %5521 = getelementptr inbounds i16, i16* %5505, i64 -16
  %5522 = bitcast i16* %5521 to <16 x i16>*
  %5523 = load <16 x i16>, <16 x i16>* %5522, align 2, !tbaa !396
  %5524 = add <16 x i16> %5514, %5508
  %5525 = add <16 x i16> %5524, %5520
  %5526 = add <16 x i16> %5517, %5511
  %5527 = add <16 x i16> %5526, %5523
  %5528 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5525, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5529 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5527, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5530 = shufflevector <16 x i16> %5528, <16 x i16> %5529, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5531 = lshr <32 x i16> %5530, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5532 = shufflevector <32 x i16> %5531, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5533 = zext i32 %.pre-phi to i64
  %5534 = mul nsw i64 %96, %5533
  %5535 = add nsw i64 %98, %5534
  %5536 = getelementptr inbounds i16, i16* %blur_x, i64 %5535
  %5537 = getelementptr inbounds i16, i16* %5536, i64 -32
  %5538 = bitcast i16* %5537 to <16 x i16>*
  store <16 x i16> %5532, <16 x i16>* %5538, align 2, !tbaa !399
  %5539 = shufflevector <32 x i16> %5531, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5540 = getelementptr inbounds i16, i16* %5536, i64 -16
  %5541 = bitcast i16* %5540 to <16 x i16>*
  store <16 x i16> %5539, <16 x i16>* %5541, align 2, !tbaa !399
  %5542 = zext i32 %.pre-phi3323 to i64
  %5543 = mul nsw i64 %5542, %108
  %5544 = add nsw i64 %5543, %93
  %5545 = getelementptr inbounds i16, i16* %blur_x, i64 %5544
  %5546 = getelementptr inbounds i16, i16* %5545, i64 -32
  %5547 = bitcast i16* %5546 to <16 x i16>*
  %5548 = load <16 x i16>, <16 x i16>* %5547, align 2, !tbaa !399
  %5549 = getelementptr inbounds i16, i16* %5545, i64 -16
  %5550 = bitcast i16* %5549 to <16 x i16>*
  %5551 = load <16 x i16>, <16 x i16>* %5550, align 2, !tbaa !399
  %5552 = mul nsw i64 %5533, %108
  %5553 = add nsw i64 %5552, %93
  %5554 = getelementptr inbounds i16, i16* %blur_x, i64 %5553
  %5555 = getelementptr inbounds i16, i16* %5554, i64 -32
  %5556 = bitcast i16* %5555 to <16 x i16>*
  %5557 = load <16 x i16>, <16 x i16>* %5556, align 2, !tbaa !399
  %5558 = getelementptr inbounds i16, i16* %5554, i64 -16
  %5559 = bitcast i16* %5558 to <16 x i16>*
  %5560 = load <16 x i16>, <16 x i16>* %5559, align 2, !tbaa !399
  %5561 = zext i32 %.pre-phi3317 to i64
  %5562 = mul nsw i64 %5561, %108
  %5563 = add nsw i64 %5562, %93
  %5564 = getelementptr inbounds i16, i16* %blur_x, i64 %5563
  %5565 = getelementptr inbounds i16, i16* %5564, i64 -32
  %5566 = bitcast i16* %5565 to <16 x i16>*
  %5567 = load <16 x i16>, <16 x i16>* %5566, align 2, !tbaa !399
  %5568 = getelementptr inbounds i16, i16* %5564, i64 -16
  %5569 = bitcast i16* %5568 to <16 x i16>*
  %5570 = load <16 x i16>, <16 x i16>* %5569, align 2, !tbaa !399
  %5571 = add <16 x i16> %5557, %5548
  %5572 = add <16 x i16> %5571, %5567
  %5573 = add <16 x i16> %5560, %5551
  %5574 = add <16 x i16> %5573, %5570
  %5575 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5572, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5576 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5574, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5577 = shufflevector <16 x i16> %5575, <16 x i16> %5576, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5578 = lshr <32 x i16> %5577, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5579 = shufflevector <32 x i16> %5578, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5580 = sext i32 %a26 to i64
  %5581 = add nsw i64 %5580, 14
  %5582 = mul nsw i64 %5581, %109
  %5583 = add nsw i64 %111, %5582
  %5584 = getelementptr inbounds i16, i16* %65, i64 %5583
  %5585 = getelementptr inbounds i16, i16* %5584, i64 -32
  %5586 = bitcast i16* %5585 to <16 x i16>*
  store <16 x i16> %5579, <16 x i16>* %5586, align 2, !tbaa !401
  %5587 = shufflevector <32 x i16> %5578, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5588 = getelementptr inbounds i16, i16* %5584, i64 -16
  %5589 = bitcast i16* %5588 to <16 x i16>*
  store <16 x i16> %5587, <16 x i16>* %5589, align 2, !tbaa !401
  br label %after_bb361

"for blur_y.s0.x.x.rebased366":                   ; preds = %"for blur_y.s0.x.x.rebased366.preheader", %"consume blur_x373"
  %indvars.iv3173 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased366.preheader" ], [ %indvars.iv.next3174, %"consume blur_x373" ]
  %5590 = add nsw i64 %indvars.iv3173, %100
  %5591 = icmp slt i64 %5590, 1
  %5592 = trunc i64 %5590 to i32
  %5593 = shl nsw i32 %5592, 5
  %5594 = icmp sgt i32 %4, %5593
  %5595 = or i1 %5591, %5594
  br i1 %5595, label %"produce blur_x372", label %"for blur_y.s0.x.x.rebased366.consume blur_x373_crit_edge"

"for blur_y.s0.x.x.rebased366.consume blur_x373_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased366"
  %.pre3350 = shl nsw i64 %5590, 5
  br label %"consume blur_x373"

"end for blur_y.s0.x.x.rebased367":               ; preds = %"consume blur_x373", %after_bb361
  br i1 %101, label %"for blur_y.s0.x.x.rebased374.preheader", label %"end for blur_y.s0.x.x.rebased375", !prof !386

"for blur_y.s0.x.x.rebased374.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased367"
  %5596 = sext i32 %t1638 to i64
  %5597 = zext i32 %.pre-phi3323 to i64
  %5598 = mul nsw i64 %5597, %108
  %5599 = sub nsw i64 %5598, %95
  %5600 = zext i32 %.pre-phi to i64
  %5601 = mul nsw i64 %5600, %108
  %5602 = sub nsw i64 %5601, %95
  %5603 = zext i32 %.pre-phi3317 to i64
  %5604 = mul nsw i64 %5603, %108
  %5605 = sub nsw i64 %5604, %95
  %5606 = sext i32 %a26 to i64
  %5607 = add nsw i64 %5606, 14
  %5608 = mul nsw i64 %5607, %109
  %5609 = add nsw i64 %5608, %112
  br label %"for blur_y.s0.x.x.rebased374"

"produce blur_x372":                              ; preds = %"for blur_y.s0.x.x.rebased366"
  %t896 = add nsw i32 %5593, %t1873
  %5610 = sext i32 %t896 to i64
  %5611 = getelementptr inbounds i16, i16* %read_input, i64 %5610
  %5612 = getelementptr inbounds i16, i16* %5611, i64 1
  %5613 = bitcast i16* %5612 to <16 x i16>*
  %5614 = load <16 x i16>, <16 x i16>* %5613, align 2, !tbaa !396
  %5615 = getelementptr inbounds i16, i16* %5611, i64 17
  %5616 = bitcast i16* %5615 to <16 x i16>*
  %5617 = load <16 x i16>, <16 x i16>* %5616, align 2, !tbaa !396
  %5618 = getelementptr inbounds i16, i16* %5611, i64 2
  %5619 = bitcast i16* %5618 to <16 x i16>*
  %5620 = load <16 x i16>, <16 x i16>* %5619, align 2, !tbaa !396
  %5621 = getelementptr inbounds i16, i16* %5611, i64 18
  %5622 = bitcast i16* %5621 to <16 x i16>*
  %5623 = load <16 x i16>, <16 x i16>* %5622, align 2, !tbaa !396
  %5624 = bitcast i16* %5611 to <16 x i16>*
  %5625 = load <16 x i16>, <16 x i16>* %5624, align 2, !tbaa !396
  %5626 = getelementptr inbounds i16, i16* %5611, i64 16
  %5627 = bitcast i16* %5626 to <16 x i16>*
  %5628 = load <16 x i16>, <16 x i16>* %5627, align 2, !tbaa !396
  %5629 = add <16 x i16> %5620, %5614
  %5630 = add <16 x i16> %5629, %5625
  %5631 = add <16 x i16> %5623, %5617
  %5632 = add <16 x i16> %5631, %5628
  %5633 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5630, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5634 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5632, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5635 = shufflevector <16 x i16> %5633, <16 x i16> %5634, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5636 = lshr <32 x i16> %5635, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5637 = shufflevector <32 x i16> %5636, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5638 = shl nsw i64 %5590, 5
  %5639 = add nsw i64 %5638, %5491
  %5640 = getelementptr inbounds i16, i16* %blur_x, i64 %5639
  %5641 = bitcast i16* %5640 to <16 x i16>*
  store <16 x i16> %5637, <16 x i16>* %5641, align 2, !tbaa !399
  %5642 = shufflevector <32 x i16> %5636, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5643 = getelementptr inbounds i16, i16* %5640, i64 16
  %5644 = bitcast i16* %5643 to <16 x i16>*
  store <16 x i16> %5642, <16 x i16>* %5644, align 2, !tbaa !399
  br label %"consume blur_x373"

"consume blur_x373":                              ; preds = %"for blur_y.s0.x.x.rebased366.consume blur_x373_crit_edge", %"produce blur_x372"
  %.pre-phi3351 = phi i64 [ %.pre3350, %"for blur_y.s0.x.x.rebased366.consume blur_x373_crit_edge" ], [ %5638, %"produce blur_x372" ]
  %5645 = add nsw i64 %5494, %.pre-phi3351
  %5646 = getelementptr inbounds i16, i16* %blur_x, i64 %5645
  %5647 = bitcast i16* %5646 to <16 x i16>*
  %5648 = load <16 x i16>, <16 x i16>* %5647, align 2, !tbaa !399
  %5649 = getelementptr inbounds i16, i16* %5646, i64 16
  %5650 = bitcast i16* %5649 to <16 x i16>*
  %5651 = load <16 x i16>, <16 x i16>* %5650, align 2, !tbaa !399
  %5652 = add nsw i64 %5497, %.pre-phi3351
  %5653 = getelementptr inbounds i16, i16* %blur_x, i64 %5652
  %5654 = bitcast i16* %5653 to <16 x i16>*
  %5655 = load <16 x i16>, <16 x i16>* %5654, align 2, !tbaa !399
  %5656 = getelementptr inbounds i16, i16* %5653, i64 16
  %5657 = bitcast i16* %5656 to <16 x i16>*
  %5658 = load <16 x i16>, <16 x i16>* %5657, align 2, !tbaa !399
  %5659 = add nsw i64 %5500, %.pre-phi3351
  %5660 = getelementptr inbounds i16, i16* %blur_x, i64 %5659
  %5661 = bitcast i16* %5660 to <16 x i16>*
  %5662 = load <16 x i16>, <16 x i16>* %5661, align 2, !tbaa !399
  %5663 = getelementptr inbounds i16, i16* %5660, i64 16
  %5664 = bitcast i16* %5663 to <16 x i16>*
  %5665 = load <16 x i16>, <16 x i16>* %5664, align 2, !tbaa !399
  %5666 = add <16 x i16> %5655, %5648
  %5667 = add <16 x i16> %5666, %5662
  %5668 = add <16 x i16> %5658, %5651
  %5669 = add <16 x i16> %5668, %5665
  %5670 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5667, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5671 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5669, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5672 = shufflevector <16 x i16> %5670, <16 x i16> %5671, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5673 = lshr <32 x i16> %5672, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5674 = shufflevector <32 x i16> %5673, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5675 = add nsw i64 %5504, %.pre-phi3351
  %5676 = getelementptr inbounds i16, i16* %65, i64 %5675
  %5677 = bitcast i16* %5676 to <16 x i16>*
  store <16 x i16> %5674, <16 x i16>* %5677, align 2, !tbaa !401
  %5678 = shufflevector <32 x i16> %5673, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5679 = getelementptr inbounds i16, i16* %5676, i64 16
  %5680 = bitcast i16* %5679 to <16 x i16>*
  store <16 x i16> %5678, <16 x i16>* %5680, align 2, !tbaa !401
  %indvars.iv.next3174 = add nuw nsw i64 %indvars.iv3173, 1
  %.not2617 = icmp eq i64 %indvars.iv.next3174, %180
  br i1 %.not2617, label %"end for blur_y.s0.x.x.rebased367", label %"for blur_y.s0.x.x.rebased366"

"for blur_y.s0.x.x.rebased374":                   ; preds = %"for blur_y.s0.x.x.rebased374.preheader", %"consume blur_x382"
  %blur_y.s0.x.x.rebased376 = phi i32 [ %5759, %"consume blur_x382" ], [ 0, %"for blur_y.s0.x.x.rebased374.preheader" ]
  %5681 = add nsw i32 %blur_y.s0.x.x.rebased376, %t1582
  %a189 = shl nsw i32 %5681, 5
  %5682 = icmp sgt i32 %a14, %a189
  %b195 = select i1 %5682, i32 %a189, i32 %a14
  %5683 = icmp slt i32 %5681, 1
  %5684 = icmp sgt i32 %4, %a189
  %5685 = or i1 %5683, %5684
  br i1 %5685, label %"produce blur_x380", label %"consume blur_x382"

"end for blur_y.s0.x.x.rebased375":               ; preds = %"consume blur_x382", %"end for blur_y.s0.x.x.rebased367"
  br i1 %34, label %"produce blur_x386", label %after_bb383

"produce blur_x380":                              ; preds = %"for blur_y.s0.x.x.rebased374"
  %5686 = icmp slt i32 %b195, %4
  %blur_x.s0.x.v1.base.s381 = select i1 %5686, i32 %b195, i32 %4
  %t901 = add nsw i32 %blur_x.s0.x.v1.base.s381, %t1873
  %5687 = sext i32 %t901 to i64
  %5688 = getelementptr inbounds i16, i16* %read_input, i64 %5687
  %5689 = getelementptr inbounds i16, i16* %5688, i64 1
  %5690 = bitcast i16* %5689 to <16 x i16>*
  %5691 = load <16 x i16>, <16 x i16>* %5690, align 2, !tbaa !396
  %5692 = getelementptr inbounds i16, i16* %5688, i64 17
  %5693 = bitcast i16* %5692 to <16 x i16>*
  %5694 = load <16 x i16>, <16 x i16>* %5693, align 2, !tbaa !396
  %5695 = getelementptr inbounds i16, i16* %5688, i64 2
  %5696 = bitcast i16* %5695 to <16 x i16>*
  %5697 = load <16 x i16>, <16 x i16>* %5696, align 2, !tbaa !396
  %5698 = getelementptr inbounds i16, i16* %5688, i64 18
  %5699 = bitcast i16* %5698 to <16 x i16>*
  %5700 = load <16 x i16>, <16 x i16>* %5699, align 2, !tbaa !396
  %5701 = bitcast i16* %5688 to <16 x i16>*
  %5702 = load <16 x i16>, <16 x i16>* %5701, align 2, !tbaa !396
  %5703 = getelementptr inbounds i16, i16* %5688, i64 16
  %5704 = bitcast i16* %5703 to <16 x i16>*
  %5705 = load <16 x i16>, <16 x i16>* %5704, align 2, !tbaa !396
  %5706 = add <16 x i16> %5697, %5691
  %5707 = add <16 x i16> %5706, %5702
  %5708 = add <16 x i16> %5700, %5694
  %5709 = add <16 x i16> %5708, %5705
  %5710 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5707, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5711 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5709, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5712 = shufflevector <16 x i16> %5710, <16 x i16> %5711, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5713 = lshr <32 x i16> %5712, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5714 = shufflevector <32 x i16> %5713, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5715 = sext i32 %blur_x.s0.x.v1.base.s381 to i64
  %5716 = add nsw i64 %5715, %5596
  %5717 = getelementptr inbounds i16, i16* %blur_x, i64 %5716
  %5718 = bitcast i16* %5717 to <16 x i16>*
  store <16 x i16> %5714, <16 x i16>* %5718, align 2, !tbaa !399
  %5719 = shufflevector <32 x i16> %5713, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5720 = getelementptr inbounds i16, i16* %5717, i64 16
  %5721 = bitcast i16* %5720 to <16 x i16>*
  store <16 x i16> %5719, <16 x i16>* %5721, align 2, !tbaa !399
  br label %"consume blur_x382"

"consume blur_x382":                              ; preds = %"for blur_y.s0.x.x.rebased374", %"produce blur_x380"
  %5722 = sext i32 %b195 to i64
  %5723 = add nsw i64 %5599, %5722
  %5724 = getelementptr inbounds i16, i16* %blur_x, i64 %5723
  %5725 = bitcast i16* %5724 to <16 x i16>*
  %5726 = load <16 x i16>, <16 x i16>* %5725, align 2, !tbaa !399
  %5727 = getelementptr inbounds i16, i16* %5724, i64 16
  %5728 = bitcast i16* %5727 to <16 x i16>*
  %5729 = load <16 x i16>, <16 x i16>* %5728, align 2, !tbaa !399
  %5730 = add nsw i64 %5602, %5722
  %5731 = getelementptr inbounds i16, i16* %blur_x, i64 %5730
  %5732 = bitcast i16* %5731 to <16 x i16>*
  %5733 = load <16 x i16>, <16 x i16>* %5732, align 2, !tbaa !399
  %5734 = getelementptr inbounds i16, i16* %5731, i64 16
  %5735 = bitcast i16* %5734 to <16 x i16>*
  %5736 = load <16 x i16>, <16 x i16>* %5735, align 2, !tbaa !399
  %5737 = add nsw i64 %5605, %5722
  %5738 = getelementptr inbounds i16, i16* %blur_x, i64 %5737
  %5739 = bitcast i16* %5738 to <16 x i16>*
  %5740 = load <16 x i16>, <16 x i16>* %5739, align 2, !tbaa !399
  %5741 = getelementptr inbounds i16, i16* %5738, i64 16
  %5742 = bitcast i16* %5741 to <16 x i16>*
  %5743 = load <16 x i16>, <16 x i16>* %5742, align 2, !tbaa !399
  %5744 = add <16 x i16> %5733, %5726
  %5745 = add <16 x i16> %5744, %5740
  %5746 = add <16 x i16> %5736, %5729
  %5747 = add <16 x i16> %5746, %5743
  %5748 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5745, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5749 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5747, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5750 = shufflevector <16 x i16> %5748, <16 x i16> %5749, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5751 = lshr <32 x i16> %5750, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5752 = shufflevector <32 x i16> %5751, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5753 = add nsw i64 %5609, %5722
  %5754 = getelementptr inbounds i16, i16* %65, i64 %5753
  %5755 = bitcast i16* %5754 to <16 x i16>*
  store <16 x i16> %5752, <16 x i16>* %5755, align 2, !tbaa !401
  %5756 = shufflevector <32 x i16> %5751, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5757 = getelementptr inbounds i16, i16* %5754, i64 16
  %5758 = bitcast i16* %5757 to <16 x i16>*
  store <16 x i16> %5756, <16 x i16>* %5758, align 2, !tbaa !401
  %5759 = add nuw nsw i32 %blur_y.s0.x.x.rebased376, 1
  %.not2616 = icmp eq i32 %5759, %t1639
  br i1 %.not2616, label %"end for blur_y.s0.x.x.rebased375", label %"for blur_y.s0.x.x.rebased374"

after_bb383:                                      ; preds = %"end for blur_y.s0.x.x.rebased375", %"produce blur_x386"
  br i1 %99, label %"for blur_y.s0.x.x.rebased388.preheader", label %"end for blur_y.s0.x.x.rebased389", !prof !386

"for blur_y.s0.x.x.rebased388.preheader":         ; preds = %after_bb383
  %5760 = sext i32 %t1644 to i64
  %5761 = zext i32 %.pre-phi to i64
  %5762 = mul nsw i64 %5761, %108
  %5763 = sub nsw i64 %5762, %95
  %5764 = zext i32 %.pre-phi3313 to i64
  %5765 = mul nsw i64 %5764, %108
  %5766 = sub nsw i64 %5765, %95
  %5767 = zext i32 %.pre-phi3323 to i64
  %5768 = mul nsw i64 %5767, %108
  %5769 = sub nsw i64 %5768, %95
  %5770 = sext i32 %a26 to i64
  %5771 = add nsw i64 %5770, 15
  %5772 = mul nsw i64 %5771, %109
  %5773 = add nsw i64 %5772, %112
  br label %"for blur_y.s0.x.x.rebased388"

"produce blur_x386":                              ; preds = %"end for blur_y.s0.x.x.rebased375"
  %5774 = getelementptr inbounds i16, i16* %read_input, i64 %141
  %5775 = getelementptr inbounds i16, i16* %5774, i64 -31
  %5776 = bitcast i16* %5775 to <16 x i16>*
  %5777 = load <16 x i16>, <16 x i16>* %5776, align 2, !tbaa !396
  %5778 = getelementptr inbounds i16, i16* %5774, i64 -15
  %5779 = bitcast i16* %5778 to <16 x i16>*
  %5780 = load <16 x i16>, <16 x i16>* %5779, align 2, !tbaa !396
  %5781 = getelementptr inbounds i16, i16* %5774, i64 -30
  %5782 = bitcast i16* %5781 to <16 x i16>*
  %5783 = load <16 x i16>, <16 x i16>* %5782, align 2, !tbaa !396
  %5784 = getelementptr inbounds i16, i16* %5774, i64 -14
  %5785 = bitcast i16* %5784 to <16 x i16>*
  %5786 = load <16 x i16>, <16 x i16>* %5785, align 2, !tbaa !396
  %5787 = getelementptr inbounds i16, i16* %5774, i64 -32
  %5788 = bitcast i16* %5787 to <16 x i16>*
  %5789 = load <16 x i16>, <16 x i16>* %5788, align 2, !tbaa !396
  %5790 = getelementptr inbounds i16, i16* %5774, i64 -16
  %5791 = bitcast i16* %5790 to <16 x i16>*
  %5792 = load <16 x i16>, <16 x i16>* %5791, align 2, !tbaa !396
  %5793 = add <16 x i16> %5783, %5777
  %5794 = add <16 x i16> %5793, %5789
  %5795 = add <16 x i16> %5786, %5780
  %5796 = add <16 x i16> %5795, %5792
  %5797 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5794, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5798 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5796, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5799 = shufflevector <16 x i16> %5797, <16 x i16> %5798, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5800 = lshr <32 x i16> %5799, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5801 = shufflevector <32 x i16> %5800, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5802 = zext i32 %.pre-phi3313 to i64
  %5803 = mul nsw i64 %96, %5802
  %5804 = add nsw i64 %98, %5803
  %5805 = getelementptr inbounds i16, i16* %blur_x, i64 %5804
  %5806 = getelementptr inbounds i16, i16* %5805, i64 -32
  %5807 = bitcast i16* %5806 to <16 x i16>*
  store <16 x i16> %5801, <16 x i16>* %5807, align 2, !tbaa !399
  %5808 = shufflevector <32 x i16> %5800, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5809 = getelementptr inbounds i16, i16* %5805, i64 -16
  %5810 = bitcast i16* %5809 to <16 x i16>*
  store <16 x i16> %5808, <16 x i16>* %5810, align 2, !tbaa !399
  %5811 = zext i32 %.pre-phi to i64
  %5812 = mul nsw i64 %5811, %108
  %5813 = add nsw i64 %5812, %93
  %5814 = getelementptr inbounds i16, i16* %blur_x, i64 %5813
  %5815 = getelementptr inbounds i16, i16* %5814, i64 -32
  %5816 = bitcast i16* %5815 to <16 x i16>*
  %5817 = load <16 x i16>, <16 x i16>* %5816, align 2, !tbaa !399
  %5818 = getelementptr inbounds i16, i16* %5814, i64 -16
  %5819 = bitcast i16* %5818 to <16 x i16>*
  %5820 = load <16 x i16>, <16 x i16>* %5819, align 2, !tbaa !399
  %5821 = mul nsw i64 %5802, %108
  %5822 = add nsw i64 %5821, %93
  %5823 = getelementptr inbounds i16, i16* %blur_x, i64 %5822
  %5824 = getelementptr inbounds i16, i16* %5823, i64 -32
  %5825 = bitcast i16* %5824 to <16 x i16>*
  %5826 = load <16 x i16>, <16 x i16>* %5825, align 2, !tbaa !399
  %5827 = getelementptr inbounds i16, i16* %5823, i64 -16
  %5828 = bitcast i16* %5827 to <16 x i16>*
  %5829 = load <16 x i16>, <16 x i16>* %5828, align 2, !tbaa !399
  %5830 = zext i32 %.pre-phi3323 to i64
  %5831 = mul nsw i64 %5830, %108
  %5832 = add nsw i64 %5831, %93
  %5833 = getelementptr inbounds i16, i16* %blur_x, i64 %5832
  %5834 = getelementptr inbounds i16, i16* %5833, i64 -32
  %5835 = bitcast i16* %5834 to <16 x i16>*
  %5836 = load <16 x i16>, <16 x i16>* %5835, align 2, !tbaa !399
  %5837 = getelementptr inbounds i16, i16* %5833, i64 -16
  %5838 = bitcast i16* %5837 to <16 x i16>*
  %5839 = load <16 x i16>, <16 x i16>* %5838, align 2, !tbaa !399
  %5840 = add <16 x i16> %5826, %5817
  %5841 = add <16 x i16> %5840, %5836
  %5842 = add <16 x i16> %5829, %5820
  %5843 = add <16 x i16> %5842, %5839
  %5844 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5841, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5845 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5843, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5846 = shufflevector <16 x i16> %5844, <16 x i16> %5845, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5847 = lshr <32 x i16> %5846, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5848 = shufflevector <32 x i16> %5847, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5849 = sext i32 %a26 to i64
  %5850 = add nsw i64 %5849, 15
  %5851 = mul nsw i64 %5850, %109
  %5852 = add nsw i64 %111, %5851
  %5853 = getelementptr inbounds i16, i16* %65, i64 %5852
  %5854 = getelementptr inbounds i16, i16* %5853, i64 -32
  %5855 = bitcast i16* %5854 to <16 x i16>*
  store <16 x i16> %5848, <16 x i16>* %5855, align 2, !tbaa !401
  %5856 = shufflevector <32 x i16> %5847, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5857 = getelementptr inbounds i16, i16* %5853, i64 -16
  %5858 = bitcast i16* %5857 to <16 x i16>*
  store <16 x i16> %5856, <16 x i16>* %5858, align 2, !tbaa !401
  br label %after_bb383

"for blur_y.s0.x.x.rebased388":                   ; preds = %"for blur_y.s0.x.x.rebased388.preheader", %"consume blur_x395"
  %indvars.iv3176 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased388.preheader" ], [ %indvars.iv.next3177, %"consume blur_x395" ]
  %5859 = add nsw i64 %indvars.iv3176, %100
  %5860 = icmp slt i64 %5859, 1
  %5861 = trunc i64 %5859 to i32
  %5862 = shl nsw i32 %5861, 5
  %5863 = icmp sgt i32 %4, %5862
  %5864 = or i1 %5860, %5863
  br i1 %5864, label %"produce blur_x394", label %"for blur_y.s0.x.x.rebased388.consume blur_x395_crit_edge"

"for blur_y.s0.x.x.rebased388.consume blur_x395_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased388"
  %.pre3352 = shl nsw i64 %5859, 5
  br label %"consume blur_x395"

"end for blur_y.s0.x.x.rebased389":               ; preds = %"consume blur_x395", %after_bb383
  br i1 %101, label %"for blur_y.s0.x.x.rebased396.preheader", label %"end for blur_y.s0.x.x.rebased397", !prof !386

"for blur_y.s0.x.x.rebased396.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased389"
  %5865 = sext i32 %t1644 to i64
  %5866 = zext i32 %.pre-phi to i64
  %5867 = mul nsw i64 %5866, %108
  %5868 = sub nsw i64 %5867, %95
  %5869 = zext i32 %.pre-phi3313 to i64
  %5870 = mul nsw i64 %5869, %108
  %5871 = sub nsw i64 %5870, %95
  %5872 = zext i32 %.pre-phi3323 to i64
  %5873 = mul nsw i64 %5872, %108
  %5874 = sub nsw i64 %5873, %95
  %5875 = sext i32 %a26 to i64
  %5876 = add nsw i64 %5875, 15
  %5877 = mul nsw i64 %5876, %109
  %5878 = add nsw i64 %5877, %112
  br label %"for blur_y.s0.x.x.rebased396"

"produce blur_x394":                              ; preds = %"for blur_y.s0.x.x.rebased388"
  %t912 = add nsw i32 %5862, %t1889
  %5879 = sext i32 %t912 to i64
  %5880 = getelementptr inbounds i16, i16* %read_input, i64 %5879
  %5881 = getelementptr inbounds i16, i16* %5880, i64 1
  %5882 = bitcast i16* %5881 to <16 x i16>*
  %5883 = load <16 x i16>, <16 x i16>* %5882, align 2, !tbaa !396
  %5884 = getelementptr inbounds i16, i16* %5880, i64 17
  %5885 = bitcast i16* %5884 to <16 x i16>*
  %5886 = load <16 x i16>, <16 x i16>* %5885, align 2, !tbaa !396
  %5887 = getelementptr inbounds i16, i16* %5880, i64 2
  %5888 = bitcast i16* %5887 to <16 x i16>*
  %5889 = load <16 x i16>, <16 x i16>* %5888, align 2, !tbaa !396
  %5890 = getelementptr inbounds i16, i16* %5880, i64 18
  %5891 = bitcast i16* %5890 to <16 x i16>*
  %5892 = load <16 x i16>, <16 x i16>* %5891, align 2, !tbaa !396
  %5893 = bitcast i16* %5880 to <16 x i16>*
  %5894 = load <16 x i16>, <16 x i16>* %5893, align 2, !tbaa !396
  %5895 = getelementptr inbounds i16, i16* %5880, i64 16
  %5896 = bitcast i16* %5895 to <16 x i16>*
  %5897 = load <16 x i16>, <16 x i16>* %5896, align 2, !tbaa !396
  %5898 = add <16 x i16> %5889, %5883
  %5899 = add <16 x i16> %5898, %5894
  %5900 = add <16 x i16> %5892, %5886
  %5901 = add <16 x i16> %5900, %5897
  %5902 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5899, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5903 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5901, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5904 = shufflevector <16 x i16> %5902, <16 x i16> %5903, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5905 = lshr <32 x i16> %5904, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5906 = shufflevector <32 x i16> %5905, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5907 = shl nsw i64 %5859, 5
  %5908 = add nsw i64 %5907, %5760
  %5909 = getelementptr inbounds i16, i16* %blur_x, i64 %5908
  %5910 = bitcast i16* %5909 to <16 x i16>*
  store <16 x i16> %5906, <16 x i16>* %5910, align 2, !tbaa !399
  %5911 = shufflevector <32 x i16> %5905, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5912 = getelementptr inbounds i16, i16* %5909, i64 16
  %5913 = bitcast i16* %5912 to <16 x i16>*
  store <16 x i16> %5911, <16 x i16>* %5913, align 2, !tbaa !399
  br label %"consume blur_x395"

"consume blur_x395":                              ; preds = %"for blur_y.s0.x.x.rebased388.consume blur_x395_crit_edge", %"produce blur_x394"
  %.pre-phi3353 = phi i64 [ %.pre3352, %"for blur_y.s0.x.x.rebased388.consume blur_x395_crit_edge" ], [ %5907, %"produce blur_x394" ]
  %5914 = add nsw i64 %5763, %.pre-phi3353
  %5915 = getelementptr inbounds i16, i16* %blur_x, i64 %5914
  %5916 = bitcast i16* %5915 to <16 x i16>*
  %5917 = load <16 x i16>, <16 x i16>* %5916, align 2, !tbaa !399
  %5918 = getelementptr inbounds i16, i16* %5915, i64 16
  %5919 = bitcast i16* %5918 to <16 x i16>*
  %5920 = load <16 x i16>, <16 x i16>* %5919, align 2, !tbaa !399
  %5921 = add nsw i64 %5766, %.pre-phi3353
  %5922 = getelementptr inbounds i16, i16* %blur_x, i64 %5921
  %5923 = bitcast i16* %5922 to <16 x i16>*
  %5924 = load <16 x i16>, <16 x i16>* %5923, align 2, !tbaa !399
  %5925 = getelementptr inbounds i16, i16* %5922, i64 16
  %5926 = bitcast i16* %5925 to <16 x i16>*
  %5927 = load <16 x i16>, <16 x i16>* %5926, align 2, !tbaa !399
  %5928 = add nsw i64 %5769, %.pre-phi3353
  %5929 = getelementptr inbounds i16, i16* %blur_x, i64 %5928
  %5930 = bitcast i16* %5929 to <16 x i16>*
  %5931 = load <16 x i16>, <16 x i16>* %5930, align 2, !tbaa !399
  %5932 = getelementptr inbounds i16, i16* %5929, i64 16
  %5933 = bitcast i16* %5932 to <16 x i16>*
  %5934 = load <16 x i16>, <16 x i16>* %5933, align 2, !tbaa !399
  %5935 = add <16 x i16> %5924, %5917
  %5936 = add <16 x i16> %5935, %5931
  %5937 = add <16 x i16> %5927, %5920
  %5938 = add <16 x i16> %5937, %5934
  %5939 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5936, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5940 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5938, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5941 = shufflevector <16 x i16> %5939, <16 x i16> %5940, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5942 = lshr <32 x i16> %5941, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5943 = shufflevector <32 x i16> %5942, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5944 = add nsw i64 %5773, %.pre-phi3353
  %5945 = getelementptr inbounds i16, i16* %65, i64 %5944
  %5946 = bitcast i16* %5945 to <16 x i16>*
  store <16 x i16> %5943, <16 x i16>* %5946, align 2, !tbaa !401
  %5947 = shufflevector <32 x i16> %5942, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5948 = getelementptr inbounds i16, i16* %5945, i64 16
  %5949 = bitcast i16* %5948 to <16 x i16>*
  store <16 x i16> %5947, <16 x i16>* %5949, align 2, !tbaa !401
  %indvars.iv.next3177 = add nuw nsw i64 %indvars.iv3176, 1
  %.not2615 = icmp eq i64 %indvars.iv.next3177, %180
  br i1 %.not2615, label %"end for blur_y.s0.x.x.rebased389", label %"for blur_y.s0.x.x.rebased388"

"for blur_y.s0.x.x.rebased396":                   ; preds = %"for blur_y.s0.x.x.rebased396.preheader", %"consume blur_x404"
  %blur_y.s0.x.x.rebased398 = phi i32 [ %6028, %"consume blur_x404" ], [ 0, %"for blur_y.s0.x.x.rebased396.preheader" ]
  %5950 = add nsw i32 %blur_y.s0.x.x.rebased398, %t1582
  %a196 = shl nsw i32 %5950, 5
  %5951 = icmp sgt i32 %a14, %a196
  %b202 = select i1 %5951, i32 %a196, i32 %a14
  %5952 = icmp slt i32 %5950, 1
  %5953 = icmp sgt i32 %4, %a196
  %5954 = or i1 %5952, %5953
  br i1 %5954, label %"produce blur_x402", label %"consume blur_x404"

"end for blur_y.s0.x.x.rebased397":               ; preds = %"consume blur_x404", %"end for blur_y.s0.x.x.rebased389"
  br i1 %34, label %"produce blur_x408", label %after_bb405

"produce blur_x402":                              ; preds = %"for blur_y.s0.x.x.rebased396"
  %5955 = icmp slt i32 %b202, %4
  %blur_x.s0.x.v1.base.s403 = select i1 %5955, i32 %b202, i32 %4
  %t917 = add nsw i32 %blur_x.s0.x.v1.base.s403, %t1889
  %5956 = sext i32 %t917 to i64
  %5957 = getelementptr inbounds i16, i16* %read_input, i64 %5956
  %5958 = getelementptr inbounds i16, i16* %5957, i64 1
  %5959 = bitcast i16* %5958 to <16 x i16>*
  %5960 = load <16 x i16>, <16 x i16>* %5959, align 2, !tbaa !396
  %5961 = getelementptr inbounds i16, i16* %5957, i64 17
  %5962 = bitcast i16* %5961 to <16 x i16>*
  %5963 = load <16 x i16>, <16 x i16>* %5962, align 2, !tbaa !396
  %5964 = getelementptr inbounds i16, i16* %5957, i64 2
  %5965 = bitcast i16* %5964 to <16 x i16>*
  %5966 = load <16 x i16>, <16 x i16>* %5965, align 2, !tbaa !396
  %5967 = getelementptr inbounds i16, i16* %5957, i64 18
  %5968 = bitcast i16* %5967 to <16 x i16>*
  %5969 = load <16 x i16>, <16 x i16>* %5968, align 2, !tbaa !396
  %5970 = bitcast i16* %5957 to <16 x i16>*
  %5971 = load <16 x i16>, <16 x i16>* %5970, align 2, !tbaa !396
  %5972 = getelementptr inbounds i16, i16* %5957, i64 16
  %5973 = bitcast i16* %5972 to <16 x i16>*
  %5974 = load <16 x i16>, <16 x i16>* %5973, align 2, !tbaa !396
  %5975 = add <16 x i16> %5966, %5960
  %5976 = add <16 x i16> %5975, %5971
  %5977 = add <16 x i16> %5969, %5963
  %5978 = add <16 x i16> %5977, %5974
  %5979 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5976, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5980 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5978, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5981 = shufflevector <16 x i16> %5979, <16 x i16> %5980, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5982 = lshr <32 x i16> %5981, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5983 = shufflevector <32 x i16> %5982, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5984 = sext i32 %blur_x.s0.x.v1.base.s403 to i64
  %5985 = add nsw i64 %5984, %5865
  %5986 = getelementptr inbounds i16, i16* %blur_x, i64 %5985
  %5987 = bitcast i16* %5986 to <16 x i16>*
  store <16 x i16> %5983, <16 x i16>* %5987, align 2, !tbaa !399
  %5988 = shufflevector <32 x i16> %5982, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5989 = getelementptr inbounds i16, i16* %5986, i64 16
  %5990 = bitcast i16* %5989 to <16 x i16>*
  store <16 x i16> %5988, <16 x i16>* %5990, align 2, !tbaa !399
  br label %"consume blur_x404"

"consume blur_x404":                              ; preds = %"for blur_y.s0.x.x.rebased396", %"produce blur_x402"
  %5991 = sext i32 %b202 to i64
  %5992 = add nsw i64 %5868, %5991
  %5993 = getelementptr inbounds i16, i16* %blur_x, i64 %5992
  %5994 = bitcast i16* %5993 to <16 x i16>*
  %5995 = load <16 x i16>, <16 x i16>* %5994, align 2, !tbaa !399
  %5996 = getelementptr inbounds i16, i16* %5993, i64 16
  %5997 = bitcast i16* %5996 to <16 x i16>*
  %5998 = load <16 x i16>, <16 x i16>* %5997, align 2, !tbaa !399
  %5999 = add nsw i64 %5871, %5991
  %6000 = getelementptr inbounds i16, i16* %blur_x, i64 %5999
  %6001 = bitcast i16* %6000 to <16 x i16>*
  %6002 = load <16 x i16>, <16 x i16>* %6001, align 2, !tbaa !399
  %6003 = getelementptr inbounds i16, i16* %6000, i64 16
  %6004 = bitcast i16* %6003 to <16 x i16>*
  %6005 = load <16 x i16>, <16 x i16>* %6004, align 2, !tbaa !399
  %6006 = add nsw i64 %5874, %5991
  %6007 = getelementptr inbounds i16, i16* %blur_x, i64 %6006
  %6008 = bitcast i16* %6007 to <16 x i16>*
  %6009 = load <16 x i16>, <16 x i16>* %6008, align 2, !tbaa !399
  %6010 = getelementptr inbounds i16, i16* %6007, i64 16
  %6011 = bitcast i16* %6010 to <16 x i16>*
  %6012 = load <16 x i16>, <16 x i16>* %6011, align 2, !tbaa !399
  %6013 = add <16 x i16> %6002, %5995
  %6014 = add <16 x i16> %6013, %6009
  %6015 = add <16 x i16> %6005, %5998
  %6016 = add <16 x i16> %6015, %6012
  %6017 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6014, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6018 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6016, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6019 = shufflevector <16 x i16> %6017, <16 x i16> %6018, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6020 = lshr <32 x i16> %6019, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6021 = shufflevector <32 x i16> %6020, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6022 = add nsw i64 %5878, %5991
  %6023 = getelementptr inbounds i16, i16* %65, i64 %6022
  %6024 = bitcast i16* %6023 to <16 x i16>*
  store <16 x i16> %6021, <16 x i16>* %6024, align 2, !tbaa !401
  %6025 = shufflevector <32 x i16> %6020, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6026 = getelementptr inbounds i16, i16* %6023, i64 16
  %6027 = bitcast i16* %6026 to <16 x i16>*
  store <16 x i16> %6025, <16 x i16>* %6027, align 2, !tbaa !401
  %6028 = add nuw nsw i32 %blur_y.s0.x.x.rebased398, 1
  %.not2614 = icmp eq i32 %6028, %t1639
  br i1 %.not2614, label %"end for blur_y.s0.x.x.rebased397", label %"for blur_y.s0.x.x.rebased396"

after_bb405:                                      ; preds = %"end for blur_y.s0.x.x.rebased397", %"produce blur_x408"
  br i1 %99, label %"for blur_y.s0.x.x.rebased410.preheader", label %"end for blur_y.s0.x.x.rebased411", !prof !386

"for blur_y.s0.x.x.rebased410.preheader":         ; preds = %after_bb405
  %6029 = sext i32 %t1650 to i64
  %6030 = zext i32 %.pre-phi3313 to i64
  %6031 = mul nsw i64 %6030, %108
  %6032 = sub nsw i64 %6031, %95
  %6033 = zext i32 %.pre-phi3317 to i64
  %6034 = mul nsw i64 %6033, %108
  %6035 = sub nsw i64 %6034, %95
  %6036 = zext i32 %.pre-phi to i64
  %6037 = mul nsw i64 %6036, %108
  %6038 = sub nsw i64 %6037, %95
  %6039 = sext i32 %a26 to i64
  %6040 = add nsw i64 %6039, 16
  %6041 = mul nsw i64 %6040, %109
  %6042 = add nsw i64 %6041, %112
  br label %"for blur_y.s0.x.x.rebased410"

"produce blur_x408":                              ; preds = %"end for blur_y.s0.x.x.rebased397"
  %6043 = getelementptr inbounds i16, i16* %read_input, i64 %143
  %6044 = getelementptr inbounds i16, i16* %6043, i64 -31
  %6045 = bitcast i16* %6044 to <16 x i16>*
  %6046 = load <16 x i16>, <16 x i16>* %6045, align 2, !tbaa !396
  %6047 = getelementptr inbounds i16, i16* %6043, i64 -15
  %6048 = bitcast i16* %6047 to <16 x i16>*
  %6049 = load <16 x i16>, <16 x i16>* %6048, align 2, !tbaa !396
  %6050 = getelementptr inbounds i16, i16* %6043, i64 -30
  %6051 = bitcast i16* %6050 to <16 x i16>*
  %6052 = load <16 x i16>, <16 x i16>* %6051, align 2, !tbaa !396
  %6053 = getelementptr inbounds i16, i16* %6043, i64 -14
  %6054 = bitcast i16* %6053 to <16 x i16>*
  %6055 = load <16 x i16>, <16 x i16>* %6054, align 2, !tbaa !396
  %6056 = getelementptr inbounds i16, i16* %6043, i64 -32
  %6057 = bitcast i16* %6056 to <16 x i16>*
  %6058 = load <16 x i16>, <16 x i16>* %6057, align 2, !tbaa !396
  %6059 = getelementptr inbounds i16, i16* %6043, i64 -16
  %6060 = bitcast i16* %6059 to <16 x i16>*
  %6061 = load <16 x i16>, <16 x i16>* %6060, align 2, !tbaa !396
  %6062 = add <16 x i16> %6052, %6046
  %6063 = add <16 x i16> %6062, %6058
  %6064 = add <16 x i16> %6055, %6049
  %6065 = add <16 x i16> %6064, %6061
  %6066 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6063, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6067 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6065, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6068 = shufflevector <16 x i16> %6066, <16 x i16> %6067, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6069 = lshr <32 x i16> %6068, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6070 = shufflevector <32 x i16> %6069, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6071 = zext i32 %.pre-phi3317 to i64
  %6072 = mul nsw i64 %96, %6071
  %6073 = add nsw i64 %98, %6072
  %6074 = getelementptr inbounds i16, i16* %blur_x, i64 %6073
  %6075 = getelementptr inbounds i16, i16* %6074, i64 -32
  %6076 = bitcast i16* %6075 to <16 x i16>*
  store <16 x i16> %6070, <16 x i16>* %6076, align 2, !tbaa !399
  %6077 = shufflevector <32 x i16> %6069, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6078 = getelementptr inbounds i16, i16* %6074, i64 -16
  %6079 = bitcast i16* %6078 to <16 x i16>*
  store <16 x i16> %6077, <16 x i16>* %6079, align 2, !tbaa !399
  %6080 = zext i32 %.pre-phi3313 to i64
  %6081 = mul nsw i64 %6080, %108
  %6082 = add nsw i64 %6081, %93
  %6083 = getelementptr inbounds i16, i16* %blur_x, i64 %6082
  %6084 = getelementptr inbounds i16, i16* %6083, i64 -32
  %6085 = bitcast i16* %6084 to <16 x i16>*
  %6086 = load <16 x i16>, <16 x i16>* %6085, align 2, !tbaa !399
  %6087 = getelementptr inbounds i16, i16* %6083, i64 -16
  %6088 = bitcast i16* %6087 to <16 x i16>*
  %6089 = load <16 x i16>, <16 x i16>* %6088, align 2, !tbaa !399
  %6090 = mul nsw i64 %6071, %108
  %6091 = add nsw i64 %6090, %93
  %6092 = getelementptr inbounds i16, i16* %blur_x, i64 %6091
  %6093 = getelementptr inbounds i16, i16* %6092, i64 -32
  %6094 = bitcast i16* %6093 to <16 x i16>*
  %6095 = load <16 x i16>, <16 x i16>* %6094, align 2, !tbaa !399
  %6096 = getelementptr inbounds i16, i16* %6092, i64 -16
  %6097 = bitcast i16* %6096 to <16 x i16>*
  %6098 = load <16 x i16>, <16 x i16>* %6097, align 2, !tbaa !399
  %6099 = zext i32 %.pre-phi to i64
  %6100 = mul nsw i64 %6099, %108
  %6101 = add nsw i64 %6100, %93
  %6102 = getelementptr inbounds i16, i16* %blur_x, i64 %6101
  %6103 = getelementptr inbounds i16, i16* %6102, i64 -32
  %6104 = bitcast i16* %6103 to <16 x i16>*
  %6105 = load <16 x i16>, <16 x i16>* %6104, align 2, !tbaa !399
  %6106 = getelementptr inbounds i16, i16* %6102, i64 -16
  %6107 = bitcast i16* %6106 to <16 x i16>*
  %6108 = load <16 x i16>, <16 x i16>* %6107, align 2, !tbaa !399
  %6109 = add <16 x i16> %6095, %6086
  %6110 = add <16 x i16> %6109, %6105
  %6111 = add <16 x i16> %6098, %6089
  %6112 = add <16 x i16> %6111, %6108
  %6113 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6110, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6114 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6112, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6115 = shufflevector <16 x i16> %6113, <16 x i16> %6114, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6116 = lshr <32 x i16> %6115, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6117 = shufflevector <32 x i16> %6116, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6118 = sext i32 %a26 to i64
  %6119 = add nsw i64 %6118, 16
  %6120 = mul nsw i64 %6119, %109
  %6121 = add nsw i64 %111, %6120
  %6122 = getelementptr inbounds i16, i16* %65, i64 %6121
  %6123 = getelementptr inbounds i16, i16* %6122, i64 -32
  %6124 = bitcast i16* %6123 to <16 x i16>*
  store <16 x i16> %6117, <16 x i16>* %6124, align 2, !tbaa !401
  %6125 = shufflevector <32 x i16> %6116, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6126 = getelementptr inbounds i16, i16* %6122, i64 -16
  %6127 = bitcast i16* %6126 to <16 x i16>*
  store <16 x i16> %6125, <16 x i16>* %6127, align 2, !tbaa !401
  br label %after_bb405

"for blur_y.s0.x.x.rebased410":                   ; preds = %"for blur_y.s0.x.x.rebased410.preheader", %"consume blur_x417"
  %indvars.iv3179 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased410.preheader" ], [ %indvars.iv.next3180, %"consume blur_x417" ]
  %6128 = add nsw i64 %indvars.iv3179, %100
  %6129 = icmp slt i64 %6128, 1
  %6130 = trunc i64 %6128 to i32
  %6131 = shl nsw i32 %6130, 5
  %6132 = icmp sgt i32 %4, %6131
  %6133 = or i1 %6129, %6132
  br i1 %6133, label %"produce blur_x416", label %"for blur_y.s0.x.x.rebased410.consume blur_x417_crit_edge"

"for blur_y.s0.x.x.rebased410.consume blur_x417_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased410"
  %.pre3354 = shl nsw i64 %6128, 5
  br label %"consume blur_x417"

"end for blur_y.s0.x.x.rebased411":               ; preds = %"consume blur_x417", %after_bb405
  br i1 %101, label %"for blur_y.s0.x.x.rebased418.preheader", label %"end for blur_y.s0.x.x.rebased419", !prof !386

"for blur_y.s0.x.x.rebased418.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased411"
  %6134 = sext i32 %t1650 to i64
  %6135 = zext i32 %.pre-phi3313 to i64
  %6136 = mul nsw i64 %6135, %108
  %6137 = sub nsw i64 %6136, %95
  %6138 = zext i32 %.pre-phi3317 to i64
  %6139 = mul nsw i64 %6138, %108
  %6140 = sub nsw i64 %6139, %95
  %6141 = zext i32 %.pre-phi to i64
  %6142 = mul nsw i64 %6141, %108
  %6143 = sub nsw i64 %6142, %95
  %6144 = sext i32 %a26 to i64
  %6145 = add nsw i64 %6144, 16
  %6146 = mul nsw i64 %6145, %109
  %6147 = add nsw i64 %6146, %112
  br label %"for blur_y.s0.x.x.rebased418"

"produce blur_x416":                              ; preds = %"for blur_y.s0.x.x.rebased410"
  %t928 = add nsw i32 %6131, %t1905
  %6148 = sext i32 %t928 to i64
  %6149 = getelementptr inbounds i16, i16* %read_input, i64 %6148
  %6150 = getelementptr inbounds i16, i16* %6149, i64 1
  %6151 = bitcast i16* %6150 to <16 x i16>*
  %6152 = load <16 x i16>, <16 x i16>* %6151, align 2, !tbaa !396
  %6153 = getelementptr inbounds i16, i16* %6149, i64 17
  %6154 = bitcast i16* %6153 to <16 x i16>*
  %6155 = load <16 x i16>, <16 x i16>* %6154, align 2, !tbaa !396
  %6156 = getelementptr inbounds i16, i16* %6149, i64 2
  %6157 = bitcast i16* %6156 to <16 x i16>*
  %6158 = load <16 x i16>, <16 x i16>* %6157, align 2, !tbaa !396
  %6159 = getelementptr inbounds i16, i16* %6149, i64 18
  %6160 = bitcast i16* %6159 to <16 x i16>*
  %6161 = load <16 x i16>, <16 x i16>* %6160, align 2, !tbaa !396
  %6162 = bitcast i16* %6149 to <16 x i16>*
  %6163 = load <16 x i16>, <16 x i16>* %6162, align 2, !tbaa !396
  %6164 = getelementptr inbounds i16, i16* %6149, i64 16
  %6165 = bitcast i16* %6164 to <16 x i16>*
  %6166 = load <16 x i16>, <16 x i16>* %6165, align 2, !tbaa !396
  %6167 = add <16 x i16> %6158, %6152
  %6168 = add <16 x i16> %6167, %6163
  %6169 = add <16 x i16> %6161, %6155
  %6170 = add <16 x i16> %6169, %6166
  %6171 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6168, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6172 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6170, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6173 = shufflevector <16 x i16> %6171, <16 x i16> %6172, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6174 = lshr <32 x i16> %6173, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6175 = shufflevector <32 x i16> %6174, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6176 = shl nsw i64 %6128, 5
  %6177 = add nsw i64 %6176, %6029
  %6178 = getelementptr inbounds i16, i16* %blur_x, i64 %6177
  %6179 = bitcast i16* %6178 to <16 x i16>*
  store <16 x i16> %6175, <16 x i16>* %6179, align 2, !tbaa !399
  %6180 = shufflevector <32 x i16> %6174, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6181 = getelementptr inbounds i16, i16* %6178, i64 16
  %6182 = bitcast i16* %6181 to <16 x i16>*
  store <16 x i16> %6180, <16 x i16>* %6182, align 2, !tbaa !399
  br label %"consume blur_x417"

"consume blur_x417":                              ; preds = %"for blur_y.s0.x.x.rebased410.consume blur_x417_crit_edge", %"produce blur_x416"
  %.pre-phi3355 = phi i64 [ %.pre3354, %"for blur_y.s0.x.x.rebased410.consume blur_x417_crit_edge" ], [ %6176, %"produce blur_x416" ]
  %6183 = add nsw i64 %6032, %.pre-phi3355
  %6184 = getelementptr inbounds i16, i16* %blur_x, i64 %6183
  %6185 = bitcast i16* %6184 to <16 x i16>*
  %6186 = load <16 x i16>, <16 x i16>* %6185, align 2, !tbaa !399
  %6187 = getelementptr inbounds i16, i16* %6184, i64 16
  %6188 = bitcast i16* %6187 to <16 x i16>*
  %6189 = load <16 x i16>, <16 x i16>* %6188, align 2, !tbaa !399
  %6190 = add nsw i64 %6035, %.pre-phi3355
  %6191 = getelementptr inbounds i16, i16* %blur_x, i64 %6190
  %6192 = bitcast i16* %6191 to <16 x i16>*
  %6193 = load <16 x i16>, <16 x i16>* %6192, align 2, !tbaa !399
  %6194 = getelementptr inbounds i16, i16* %6191, i64 16
  %6195 = bitcast i16* %6194 to <16 x i16>*
  %6196 = load <16 x i16>, <16 x i16>* %6195, align 2, !tbaa !399
  %6197 = add nsw i64 %6038, %.pre-phi3355
  %6198 = getelementptr inbounds i16, i16* %blur_x, i64 %6197
  %6199 = bitcast i16* %6198 to <16 x i16>*
  %6200 = load <16 x i16>, <16 x i16>* %6199, align 2, !tbaa !399
  %6201 = getelementptr inbounds i16, i16* %6198, i64 16
  %6202 = bitcast i16* %6201 to <16 x i16>*
  %6203 = load <16 x i16>, <16 x i16>* %6202, align 2, !tbaa !399
  %6204 = add <16 x i16> %6193, %6186
  %6205 = add <16 x i16> %6204, %6200
  %6206 = add <16 x i16> %6196, %6189
  %6207 = add <16 x i16> %6206, %6203
  %6208 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6205, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6209 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6207, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6210 = shufflevector <16 x i16> %6208, <16 x i16> %6209, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6211 = lshr <32 x i16> %6210, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6212 = shufflevector <32 x i16> %6211, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6213 = add nsw i64 %6042, %.pre-phi3355
  %6214 = getelementptr inbounds i16, i16* %65, i64 %6213
  %6215 = bitcast i16* %6214 to <16 x i16>*
  store <16 x i16> %6212, <16 x i16>* %6215, align 2, !tbaa !401
  %6216 = shufflevector <32 x i16> %6211, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6217 = getelementptr inbounds i16, i16* %6214, i64 16
  %6218 = bitcast i16* %6217 to <16 x i16>*
  store <16 x i16> %6216, <16 x i16>* %6218, align 2, !tbaa !401
  %indvars.iv.next3180 = add nuw nsw i64 %indvars.iv3179, 1
  %.not2613 = icmp eq i64 %indvars.iv.next3180, %180
  br i1 %.not2613, label %"end for blur_y.s0.x.x.rebased411", label %"for blur_y.s0.x.x.rebased410"

"for blur_y.s0.x.x.rebased418":                   ; preds = %"for blur_y.s0.x.x.rebased418.preheader", %"consume blur_x426"
  %blur_y.s0.x.x.rebased420 = phi i32 [ %6297, %"consume blur_x426" ], [ 0, %"for blur_y.s0.x.x.rebased418.preheader" ]
  %6219 = add nsw i32 %blur_y.s0.x.x.rebased420, %t1582
  %a203 = shl nsw i32 %6219, 5
  %6220 = icmp sgt i32 %a14, %a203
  %b209 = select i1 %6220, i32 %a203, i32 %a14
  %6221 = icmp slt i32 %6219, 1
  %6222 = icmp sgt i32 %4, %a203
  %6223 = or i1 %6221, %6222
  br i1 %6223, label %"produce blur_x424", label %"consume blur_x426"

"end for blur_y.s0.x.x.rebased419":               ; preds = %"consume blur_x426", %"end for blur_y.s0.x.x.rebased411"
  br i1 %34, label %"produce blur_x430", label %after_bb427

"produce blur_x424":                              ; preds = %"for blur_y.s0.x.x.rebased418"
  %6224 = icmp slt i32 %b209, %4
  %blur_x.s0.x.v1.base.s425 = select i1 %6224, i32 %b209, i32 %4
  %t933 = add nsw i32 %blur_x.s0.x.v1.base.s425, %t1905
  %6225 = sext i32 %t933 to i64
  %6226 = getelementptr inbounds i16, i16* %read_input, i64 %6225
  %6227 = getelementptr inbounds i16, i16* %6226, i64 1
  %6228 = bitcast i16* %6227 to <16 x i16>*
  %6229 = load <16 x i16>, <16 x i16>* %6228, align 2, !tbaa !396
  %6230 = getelementptr inbounds i16, i16* %6226, i64 17
  %6231 = bitcast i16* %6230 to <16 x i16>*
  %6232 = load <16 x i16>, <16 x i16>* %6231, align 2, !tbaa !396
  %6233 = getelementptr inbounds i16, i16* %6226, i64 2
  %6234 = bitcast i16* %6233 to <16 x i16>*
  %6235 = load <16 x i16>, <16 x i16>* %6234, align 2, !tbaa !396
  %6236 = getelementptr inbounds i16, i16* %6226, i64 18
  %6237 = bitcast i16* %6236 to <16 x i16>*
  %6238 = load <16 x i16>, <16 x i16>* %6237, align 2, !tbaa !396
  %6239 = bitcast i16* %6226 to <16 x i16>*
  %6240 = load <16 x i16>, <16 x i16>* %6239, align 2, !tbaa !396
  %6241 = getelementptr inbounds i16, i16* %6226, i64 16
  %6242 = bitcast i16* %6241 to <16 x i16>*
  %6243 = load <16 x i16>, <16 x i16>* %6242, align 2, !tbaa !396
  %6244 = add <16 x i16> %6235, %6229
  %6245 = add <16 x i16> %6244, %6240
  %6246 = add <16 x i16> %6238, %6232
  %6247 = add <16 x i16> %6246, %6243
  %6248 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6245, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6249 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6247, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6250 = shufflevector <16 x i16> %6248, <16 x i16> %6249, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6251 = lshr <32 x i16> %6250, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6252 = shufflevector <32 x i16> %6251, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6253 = sext i32 %blur_x.s0.x.v1.base.s425 to i64
  %6254 = add nsw i64 %6253, %6134
  %6255 = getelementptr inbounds i16, i16* %blur_x, i64 %6254
  %6256 = bitcast i16* %6255 to <16 x i16>*
  store <16 x i16> %6252, <16 x i16>* %6256, align 2, !tbaa !399
  %6257 = shufflevector <32 x i16> %6251, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6258 = getelementptr inbounds i16, i16* %6255, i64 16
  %6259 = bitcast i16* %6258 to <16 x i16>*
  store <16 x i16> %6257, <16 x i16>* %6259, align 2, !tbaa !399
  br label %"consume blur_x426"

"consume blur_x426":                              ; preds = %"for blur_y.s0.x.x.rebased418", %"produce blur_x424"
  %6260 = sext i32 %b209 to i64
  %6261 = add nsw i64 %6137, %6260
  %6262 = getelementptr inbounds i16, i16* %blur_x, i64 %6261
  %6263 = bitcast i16* %6262 to <16 x i16>*
  %6264 = load <16 x i16>, <16 x i16>* %6263, align 2, !tbaa !399
  %6265 = getelementptr inbounds i16, i16* %6262, i64 16
  %6266 = bitcast i16* %6265 to <16 x i16>*
  %6267 = load <16 x i16>, <16 x i16>* %6266, align 2, !tbaa !399
  %6268 = add nsw i64 %6140, %6260
  %6269 = getelementptr inbounds i16, i16* %blur_x, i64 %6268
  %6270 = bitcast i16* %6269 to <16 x i16>*
  %6271 = load <16 x i16>, <16 x i16>* %6270, align 2, !tbaa !399
  %6272 = getelementptr inbounds i16, i16* %6269, i64 16
  %6273 = bitcast i16* %6272 to <16 x i16>*
  %6274 = load <16 x i16>, <16 x i16>* %6273, align 2, !tbaa !399
  %6275 = add nsw i64 %6143, %6260
  %6276 = getelementptr inbounds i16, i16* %blur_x, i64 %6275
  %6277 = bitcast i16* %6276 to <16 x i16>*
  %6278 = load <16 x i16>, <16 x i16>* %6277, align 2, !tbaa !399
  %6279 = getelementptr inbounds i16, i16* %6276, i64 16
  %6280 = bitcast i16* %6279 to <16 x i16>*
  %6281 = load <16 x i16>, <16 x i16>* %6280, align 2, !tbaa !399
  %6282 = add <16 x i16> %6271, %6264
  %6283 = add <16 x i16> %6282, %6278
  %6284 = add <16 x i16> %6274, %6267
  %6285 = add <16 x i16> %6284, %6281
  %6286 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6283, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6287 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6285, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6288 = shufflevector <16 x i16> %6286, <16 x i16> %6287, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6289 = lshr <32 x i16> %6288, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6290 = shufflevector <32 x i16> %6289, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6291 = add nsw i64 %6147, %6260
  %6292 = getelementptr inbounds i16, i16* %65, i64 %6291
  %6293 = bitcast i16* %6292 to <16 x i16>*
  store <16 x i16> %6290, <16 x i16>* %6293, align 2, !tbaa !401
  %6294 = shufflevector <32 x i16> %6289, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6295 = getelementptr inbounds i16, i16* %6292, i64 16
  %6296 = bitcast i16* %6295 to <16 x i16>*
  store <16 x i16> %6294, <16 x i16>* %6296, align 2, !tbaa !401
  %6297 = add nuw nsw i32 %blur_y.s0.x.x.rebased420, 1
  %.not2612 = icmp eq i32 %6297, %t1639
  br i1 %.not2612, label %"end for blur_y.s0.x.x.rebased419", label %"for blur_y.s0.x.x.rebased418"

after_bb427:                                      ; preds = %"end for blur_y.s0.x.x.rebased419", %"produce blur_x430"
  br i1 %99, label %"for blur_y.s0.x.x.rebased432.preheader", label %"end for blur_y.s0.x.x.rebased433", !prof !386

"for blur_y.s0.x.x.rebased432.preheader":         ; preds = %after_bb427
  %6298 = sext i32 %t1666 to i64
  %6299 = zext i32 %.pre-phi3317 to i64
  %6300 = mul nsw i64 %6299, %108
  %6301 = sub nsw i64 %6300, %95
  %6302 = zext i32 %.pre-phi3323 to i64
  %6303 = mul nsw i64 %6302, %108
  %6304 = sub nsw i64 %6303, %95
  %6305 = zext i32 %.pre-phi3313 to i64
  %6306 = mul nsw i64 %6305, %108
  %6307 = sub nsw i64 %6306, %95
  %6308 = sext i32 %a26 to i64
  %6309 = add nsw i64 %6308, 17
  %6310 = mul nsw i64 %6309, %109
  %6311 = add nsw i64 %6310, %112
  br label %"for blur_y.s0.x.x.rebased432"

"produce blur_x430":                              ; preds = %"end for blur_y.s0.x.x.rebased419"
  %6312 = getelementptr inbounds i16, i16* %read_input, i64 %145
  %6313 = getelementptr inbounds i16, i16* %6312, i64 -31
  %6314 = bitcast i16* %6313 to <16 x i16>*
  %6315 = load <16 x i16>, <16 x i16>* %6314, align 2, !tbaa !396
  %6316 = getelementptr inbounds i16, i16* %6312, i64 -15
  %6317 = bitcast i16* %6316 to <16 x i16>*
  %6318 = load <16 x i16>, <16 x i16>* %6317, align 2, !tbaa !396
  %6319 = getelementptr inbounds i16, i16* %6312, i64 -30
  %6320 = bitcast i16* %6319 to <16 x i16>*
  %6321 = load <16 x i16>, <16 x i16>* %6320, align 2, !tbaa !396
  %6322 = getelementptr inbounds i16, i16* %6312, i64 -14
  %6323 = bitcast i16* %6322 to <16 x i16>*
  %6324 = load <16 x i16>, <16 x i16>* %6323, align 2, !tbaa !396
  %6325 = getelementptr inbounds i16, i16* %6312, i64 -32
  %6326 = bitcast i16* %6325 to <16 x i16>*
  %6327 = load <16 x i16>, <16 x i16>* %6326, align 2, !tbaa !396
  %6328 = getelementptr inbounds i16, i16* %6312, i64 -16
  %6329 = bitcast i16* %6328 to <16 x i16>*
  %6330 = load <16 x i16>, <16 x i16>* %6329, align 2, !tbaa !396
  %6331 = add <16 x i16> %6321, %6315
  %6332 = add <16 x i16> %6331, %6327
  %6333 = add <16 x i16> %6324, %6318
  %6334 = add <16 x i16> %6333, %6330
  %6335 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6332, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6336 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6334, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6337 = shufflevector <16 x i16> %6335, <16 x i16> %6336, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6338 = lshr <32 x i16> %6337, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6339 = shufflevector <32 x i16> %6338, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6340 = zext i32 %.pre-phi3323 to i64
  %6341 = mul nsw i64 %96, %6340
  %6342 = add nsw i64 %98, %6341
  %6343 = getelementptr inbounds i16, i16* %blur_x, i64 %6342
  %6344 = getelementptr inbounds i16, i16* %6343, i64 -32
  %6345 = bitcast i16* %6344 to <16 x i16>*
  store <16 x i16> %6339, <16 x i16>* %6345, align 2, !tbaa !399
  %6346 = shufflevector <32 x i16> %6338, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6347 = getelementptr inbounds i16, i16* %6343, i64 -16
  %6348 = bitcast i16* %6347 to <16 x i16>*
  store <16 x i16> %6346, <16 x i16>* %6348, align 2, !tbaa !399
  %6349 = zext i32 %.pre-phi3317 to i64
  %6350 = mul nsw i64 %6349, %108
  %6351 = add nsw i64 %6350, %93
  %6352 = getelementptr inbounds i16, i16* %blur_x, i64 %6351
  %6353 = getelementptr inbounds i16, i16* %6352, i64 -32
  %6354 = bitcast i16* %6353 to <16 x i16>*
  %6355 = load <16 x i16>, <16 x i16>* %6354, align 2, !tbaa !399
  %6356 = getelementptr inbounds i16, i16* %6352, i64 -16
  %6357 = bitcast i16* %6356 to <16 x i16>*
  %6358 = load <16 x i16>, <16 x i16>* %6357, align 2, !tbaa !399
  %6359 = mul nsw i64 %6340, %108
  %6360 = add nsw i64 %6359, %93
  %6361 = getelementptr inbounds i16, i16* %blur_x, i64 %6360
  %6362 = getelementptr inbounds i16, i16* %6361, i64 -32
  %6363 = bitcast i16* %6362 to <16 x i16>*
  %6364 = load <16 x i16>, <16 x i16>* %6363, align 2, !tbaa !399
  %6365 = getelementptr inbounds i16, i16* %6361, i64 -16
  %6366 = bitcast i16* %6365 to <16 x i16>*
  %6367 = load <16 x i16>, <16 x i16>* %6366, align 2, !tbaa !399
  %6368 = zext i32 %.pre-phi3313 to i64
  %6369 = mul nsw i64 %6368, %108
  %6370 = add nsw i64 %6369, %93
  %6371 = getelementptr inbounds i16, i16* %blur_x, i64 %6370
  %6372 = getelementptr inbounds i16, i16* %6371, i64 -32
  %6373 = bitcast i16* %6372 to <16 x i16>*
  %6374 = load <16 x i16>, <16 x i16>* %6373, align 2, !tbaa !399
  %6375 = getelementptr inbounds i16, i16* %6371, i64 -16
  %6376 = bitcast i16* %6375 to <16 x i16>*
  %6377 = load <16 x i16>, <16 x i16>* %6376, align 2, !tbaa !399
  %6378 = add <16 x i16> %6364, %6355
  %6379 = add <16 x i16> %6378, %6374
  %6380 = add <16 x i16> %6367, %6358
  %6381 = add <16 x i16> %6380, %6377
  %6382 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6379, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6383 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6381, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6384 = shufflevector <16 x i16> %6382, <16 x i16> %6383, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6385 = lshr <32 x i16> %6384, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6386 = shufflevector <32 x i16> %6385, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6387 = sext i32 %a26 to i64
  %6388 = add nsw i64 %6387, 17
  %6389 = mul nsw i64 %6388, %109
  %6390 = add nsw i64 %111, %6389
  %6391 = getelementptr inbounds i16, i16* %65, i64 %6390
  %6392 = getelementptr inbounds i16, i16* %6391, i64 -32
  %6393 = bitcast i16* %6392 to <16 x i16>*
  store <16 x i16> %6386, <16 x i16>* %6393, align 2, !tbaa !401
  %6394 = shufflevector <32 x i16> %6385, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6395 = getelementptr inbounds i16, i16* %6391, i64 -16
  %6396 = bitcast i16* %6395 to <16 x i16>*
  store <16 x i16> %6394, <16 x i16>* %6396, align 2, !tbaa !401
  br label %after_bb427

"for blur_y.s0.x.x.rebased432":                   ; preds = %"for blur_y.s0.x.x.rebased432.preheader", %"consume blur_x439"
  %indvars.iv3182 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased432.preheader" ], [ %indvars.iv.next3183, %"consume blur_x439" ]
  %6397 = add nsw i64 %indvars.iv3182, %100
  %6398 = icmp slt i64 %6397, 1
  %6399 = trunc i64 %6397 to i32
  %6400 = shl nsw i32 %6399, 5
  %6401 = icmp sgt i32 %4, %6400
  %6402 = or i1 %6398, %6401
  br i1 %6402, label %"produce blur_x438", label %"for blur_y.s0.x.x.rebased432.consume blur_x439_crit_edge"

"for blur_y.s0.x.x.rebased432.consume blur_x439_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased432"
  %.pre3356 = shl nsw i64 %6397, 5
  br label %"consume blur_x439"

"end for blur_y.s0.x.x.rebased433":               ; preds = %"consume blur_x439", %after_bb427
  br i1 %101, label %"for blur_y.s0.x.x.rebased440.preheader", label %"end for blur_y.s0.x.x.rebased441", !prof !386

"for blur_y.s0.x.x.rebased440.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased433"
  %6403 = sext i32 %t1666 to i64
  %6404 = zext i32 %.pre-phi3317 to i64
  %6405 = mul nsw i64 %6404, %108
  %6406 = sub nsw i64 %6405, %95
  %6407 = zext i32 %.pre-phi3323 to i64
  %6408 = mul nsw i64 %6407, %108
  %6409 = sub nsw i64 %6408, %95
  %6410 = zext i32 %.pre-phi3313 to i64
  %6411 = mul nsw i64 %6410, %108
  %6412 = sub nsw i64 %6411, %95
  %6413 = sext i32 %a26 to i64
  %6414 = add nsw i64 %6413, 17
  %6415 = mul nsw i64 %6414, %109
  %6416 = add nsw i64 %6415, %112
  br label %"for blur_y.s0.x.x.rebased440"

"produce blur_x438":                              ; preds = %"for blur_y.s0.x.x.rebased432"
  %t944 = add nsw i32 %6400, %t1921
  %6417 = sext i32 %t944 to i64
  %6418 = getelementptr inbounds i16, i16* %read_input, i64 %6417
  %6419 = getelementptr inbounds i16, i16* %6418, i64 1
  %6420 = bitcast i16* %6419 to <16 x i16>*
  %6421 = load <16 x i16>, <16 x i16>* %6420, align 2, !tbaa !396
  %6422 = getelementptr inbounds i16, i16* %6418, i64 17
  %6423 = bitcast i16* %6422 to <16 x i16>*
  %6424 = load <16 x i16>, <16 x i16>* %6423, align 2, !tbaa !396
  %6425 = getelementptr inbounds i16, i16* %6418, i64 2
  %6426 = bitcast i16* %6425 to <16 x i16>*
  %6427 = load <16 x i16>, <16 x i16>* %6426, align 2, !tbaa !396
  %6428 = getelementptr inbounds i16, i16* %6418, i64 18
  %6429 = bitcast i16* %6428 to <16 x i16>*
  %6430 = load <16 x i16>, <16 x i16>* %6429, align 2, !tbaa !396
  %6431 = bitcast i16* %6418 to <16 x i16>*
  %6432 = load <16 x i16>, <16 x i16>* %6431, align 2, !tbaa !396
  %6433 = getelementptr inbounds i16, i16* %6418, i64 16
  %6434 = bitcast i16* %6433 to <16 x i16>*
  %6435 = load <16 x i16>, <16 x i16>* %6434, align 2, !tbaa !396
  %6436 = add <16 x i16> %6427, %6421
  %6437 = add <16 x i16> %6436, %6432
  %6438 = add <16 x i16> %6430, %6424
  %6439 = add <16 x i16> %6438, %6435
  %6440 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6437, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6441 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6439, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6442 = shufflevector <16 x i16> %6440, <16 x i16> %6441, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6443 = lshr <32 x i16> %6442, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6444 = shufflevector <32 x i16> %6443, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6445 = shl nsw i64 %6397, 5
  %6446 = add nsw i64 %6445, %6298
  %6447 = getelementptr inbounds i16, i16* %blur_x, i64 %6446
  %6448 = bitcast i16* %6447 to <16 x i16>*
  store <16 x i16> %6444, <16 x i16>* %6448, align 2, !tbaa !399
  %6449 = shufflevector <32 x i16> %6443, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6450 = getelementptr inbounds i16, i16* %6447, i64 16
  %6451 = bitcast i16* %6450 to <16 x i16>*
  store <16 x i16> %6449, <16 x i16>* %6451, align 2, !tbaa !399
  br label %"consume blur_x439"

"consume blur_x439":                              ; preds = %"for blur_y.s0.x.x.rebased432.consume blur_x439_crit_edge", %"produce blur_x438"
  %.pre-phi3357 = phi i64 [ %.pre3356, %"for blur_y.s0.x.x.rebased432.consume blur_x439_crit_edge" ], [ %6445, %"produce blur_x438" ]
  %6452 = add nsw i64 %6301, %.pre-phi3357
  %6453 = getelementptr inbounds i16, i16* %blur_x, i64 %6452
  %6454 = bitcast i16* %6453 to <16 x i16>*
  %6455 = load <16 x i16>, <16 x i16>* %6454, align 2, !tbaa !399
  %6456 = getelementptr inbounds i16, i16* %6453, i64 16
  %6457 = bitcast i16* %6456 to <16 x i16>*
  %6458 = load <16 x i16>, <16 x i16>* %6457, align 2, !tbaa !399
  %6459 = add nsw i64 %6304, %.pre-phi3357
  %6460 = getelementptr inbounds i16, i16* %blur_x, i64 %6459
  %6461 = bitcast i16* %6460 to <16 x i16>*
  %6462 = load <16 x i16>, <16 x i16>* %6461, align 2, !tbaa !399
  %6463 = getelementptr inbounds i16, i16* %6460, i64 16
  %6464 = bitcast i16* %6463 to <16 x i16>*
  %6465 = load <16 x i16>, <16 x i16>* %6464, align 2, !tbaa !399
  %6466 = add nsw i64 %6307, %.pre-phi3357
  %6467 = getelementptr inbounds i16, i16* %blur_x, i64 %6466
  %6468 = bitcast i16* %6467 to <16 x i16>*
  %6469 = load <16 x i16>, <16 x i16>* %6468, align 2, !tbaa !399
  %6470 = getelementptr inbounds i16, i16* %6467, i64 16
  %6471 = bitcast i16* %6470 to <16 x i16>*
  %6472 = load <16 x i16>, <16 x i16>* %6471, align 2, !tbaa !399
  %6473 = add <16 x i16> %6462, %6455
  %6474 = add <16 x i16> %6473, %6469
  %6475 = add <16 x i16> %6465, %6458
  %6476 = add <16 x i16> %6475, %6472
  %6477 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6474, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6478 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6476, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6479 = shufflevector <16 x i16> %6477, <16 x i16> %6478, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6480 = lshr <32 x i16> %6479, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6481 = shufflevector <32 x i16> %6480, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6482 = add nsw i64 %6311, %.pre-phi3357
  %6483 = getelementptr inbounds i16, i16* %65, i64 %6482
  %6484 = bitcast i16* %6483 to <16 x i16>*
  store <16 x i16> %6481, <16 x i16>* %6484, align 2, !tbaa !401
  %6485 = shufflevector <32 x i16> %6480, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6486 = getelementptr inbounds i16, i16* %6483, i64 16
  %6487 = bitcast i16* %6486 to <16 x i16>*
  store <16 x i16> %6485, <16 x i16>* %6487, align 2, !tbaa !401
  %indvars.iv.next3183 = add nuw nsw i64 %indvars.iv3182, 1
  %.not2611 = icmp eq i64 %indvars.iv.next3183, %180
  br i1 %.not2611, label %"end for blur_y.s0.x.x.rebased433", label %"for blur_y.s0.x.x.rebased432"

"for blur_y.s0.x.x.rebased440":                   ; preds = %"for blur_y.s0.x.x.rebased440.preheader", %"consume blur_x448"
  %blur_y.s0.x.x.rebased442 = phi i32 [ %6566, %"consume blur_x448" ], [ 0, %"for blur_y.s0.x.x.rebased440.preheader" ]
  %6488 = add nsw i32 %blur_y.s0.x.x.rebased442, %t1582
  %a210 = shl nsw i32 %6488, 5
  %6489 = icmp sgt i32 %a14, %a210
  %b216 = select i1 %6489, i32 %a210, i32 %a14
  %6490 = icmp slt i32 %6488, 1
  %6491 = icmp sgt i32 %4, %a210
  %6492 = or i1 %6490, %6491
  br i1 %6492, label %"produce blur_x446", label %"consume blur_x448"

"end for blur_y.s0.x.x.rebased441":               ; preds = %"consume blur_x448", %"end for blur_y.s0.x.x.rebased433"
  br i1 %34, label %"produce blur_x452", label %after_bb449

"produce blur_x446":                              ; preds = %"for blur_y.s0.x.x.rebased440"
  %6493 = icmp slt i32 %b216, %4
  %blur_x.s0.x.v1.base.s447 = select i1 %6493, i32 %b216, i32 %4
  %t949 = add nsw i32 %blur_x.s0.x.v1.base.s447, %t1921
  %6494 = sext i32 %t949 to i64
  %6495 = getelementptr inbounds i16, i16* %read_input, i64 %6494
  %6496 = getelementptr inbounds i16, i16* %6495, i64 1
  %6497 = bitcast i16* %6496 to <16 x i16>*
  %6498 = load <16 x i16>, <16 x i16>* %6497, align 2, !tbaa !396
  %6499 = getelementptr inbounds i16, i16* %6495, i64 17
  %6500 = bitcast i16* %6499 to <16 x i16>*
  %6501 = load <16 x i16>, <16 x i16>* %6500, align 2, !tbaa !396
  %6502 = getelementptr inbounds i16, i16* %6495, i64 2
  %6503 = bitcast i16* %6502 to <16 x i16>*
  %6504 = load <16 x i16>, <16 x i16>* %6503, align 2, !tbaa !396
  %6505 = getelementptr inbounds i16, i16* %6495, i64 18
  %6506 = bitcast i16* %6505 to <16 x i16>*
  %6507 = load <16 x i16>, <16 x i16>* %6506, align 2, !tbaa !396
  %6508 = bitcast i16* %6495 to <16 x i16>*
  %6509 = load <16 x i16>, <16 x i16>* %6508, align 2, !tbaa !396
  %6510 = getelementptr inbounds i16, i16* %6495, i64 16
  %6511 = bitcast i16* %6510 to <16 x i16>*
  %6512 = load <16 x i16>, <16 x i16>* %6511, align 2, !tbaa !396
  %6513 = add <16 x i16> %6504, %6498
  %6514 = add <16 x i16> %6513, %6509
  %6515 = add <16 x i16> %6507, %6501
  %6516 = add <16 x i16> %6515, %6512
  %6517 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6514, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6518 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6516, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6519 = shufflevector <16 x i16> %6517, <16 x i16> %6518, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6520 = lshr <32 x i16> %6519, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6521 = shufflevector <32 x i16> %6520, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6522 = sext i32 %blur_x.s0.x.v1.base.s447 to i64
  %6523 = add nsw i64 %6522, %6403
  %6524 = getelementptr inbounds i16, i16* %blur_x, i64 %6523
  %6525 = bitcast i16* %6524 to <16 x i16>*
  store <16 x i16> %6521, <16 x i16>* %6525, align 2, !tbaa !399
  %6526 = shufflevector <32 x i16> %6520, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6527 = getelementptr inbounds i16, i16* %6524, i64 16
  %6528 = bitcast i16* %6527 to <16 x i16>*
  store <16 x i16> %6526, <16 x i16>* %6528, align 2, !tbaa !399
  br label %"consume blur_x448"

"consume blur_x448":                              ; preds = %"for blur_y.s0.x.x.rebased440", %"produce blur_x446"
  %6529 = sext i32 %b216 to i64
  %6530 = add nsw i64 %6406, %6529
  %6531 = getelementptr inbounds i16, i16* %blur_x, i64 %6530
  %6532 = bitcast i16* %6531 to <16 x i16>*
  %6533 = load <16 x i16>, <16 x i16>* %6532, align 2, !tbaa !399
  %6534 = getelementptr inbounds i16, i16* %6531, i64 16
  %6535 = bitcast i16* %6534 to <16 x i16>*
  %6536 = load <16 x i16>, <16 x i16>* %6535, align 2, !tbaa !399
  %6537 = add nsw i64 %6409, %6529
  %6538 = getelementptr inbounds i16, i16* %blur_x, i64 %6537
  %6539 = bitcast i16* %6538 to <16 x i16>*
  %6540 = load <16 x i16>, <16 x i16>* %6539, align 2, !tbaa !399
  %6541 = getelementptr inbounds i16, i16* %6538, i64 16
  %6542 = bitcast i16* %6541 to <16 x i16>*
  %6543 = load <16 x i16>, <16 x i16>* %6542, align 2, !tbaa !399
  %6544 = add nsw i64 %6412, %6529
  %6545 = getelementptr inbounds i16, i16* %blur_x, i64 %6544
  %6546 = bitcast i16* %6545 to <16 x i16>*
  %6547 = load <16 x i16>, <16 x i16>* %6546, align 2, !tbaa !399
  %6548 = getelementptr inbounds i16, i16* %6545, i64 16
  %6549 = bitcast i16* %6548 to <16 x i16>*
  %6550 = load <16 x i16>, <16 x i16>* %6549, align 2, !tbaa !399
  %6551 = add <16 x i16> %6540, %6533
  %6552 = add <16 x i16> %6551, %6547
  %6553 = add <16 x i16> %6543, %6536
  %6554 = add <16 x i16> %6553, %6550
  %6555 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6552, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6556 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6554, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6557 = shufflevector <16 x i16> %6555, <16 x i16> %6556, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6558 = lshr <32 x i16> %6557, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6559 = shufflevector <32 x i16> %6558, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6560 = add nsw i64 %6416, %6529
  %6561 = getelementptr inbounds i16, i16* %65, i64 %6560
  %6562 = bitcast i16* %6561 to <16 x i16>*
  store <16 x i16> %6559, <16 x i16>* %6562, align 2, !tbaa !401
  %6563 = shufflevector <32 x i16> %6558, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6564 = getelementptr inbounds i16, i16* %6561, i64 16
  %6565 = bitcast i16* %6564 to <16 x i16>*
  store <16 x i16> %6563, <16 x i16>* %6565, align 2, !tbaa !401
  %6566 = add nuw nsw i32 %blur_y.s0.x.x.rebased442, 1
  %.not2610 = icmp eq i32 %6566, %t1639
  br i1 %.not2610, label %"end for blur_y.s0.x.x.rebased441", label %"for blur_y.s0.x.x.rebased440"

after_bb449:                                      ; preds = %"end for blur_y.s0.x.x.rebased441", %"produce blur_x452"
  br i1 %99, label %"for blur_y.s0.x.x.rebased454.preheader", label %"end for blur_y.s0.x.x.rebased455", !prof !386

"for blur_y.s0.x.x.rebased454.preheader":         ; preds = %after_bb449
  %6567 = sext i32 %t1638 to i64
  %6568 = zext i32 %.pre-phi3323 to i64
  %6569 = mul nsw i64 %6568, %108
  %6570 = sub nsw i64 %6569, %95
  %6571 = zext i32 %.pre-phi to i64
  %6572 = mul nsw i64 %6571, %108
  %6573 = sub nsw i64 %6572, %95
  %6574 = zext i32 %.pre-phi3317 to i64
  %6575 = mul nsw i64 %6574, %108
  %6576 = sub nsw i64 %6575, %95
  %6577 = sext i32 %a26 to i64
  %6578 = add nsw i64 %6577, 18
  %6579 = mul nsw i64 %6578, %109
  %6580 = add nsw i64 %6579, %112
  br label %"for blur_y.s0.x.x.rebased454"

"produce blur_x452":                              ; preds = %"end for blur_y.s0.x.x.rebased441"
  %6581 = getelementptr inbounds i16, i16* %read_input, i64 %147
  %6582 = getelementptr inbounds i16, i16* %6581, i64 -31
  %6583 = bitcast i16* %6582 to <16 x i16>*
  %6584 = load <16 x i16>, <16 x i16>* %6583, align 2, !tbaa !396
  %6585 = getelementptr inbounds i16, i16* %6581, i64 -15
  %6586 = bitcast i16* %6585 to <16 x i16>*
  %6587 = load <16 x i16>, <16 x i16>* %6586, align 2, !tbaa !396
  %6588 = getelementptr inbounds i16, i16* %6581, i64 -30
  %6589 = bitcast i16* %6588 to <16 x i16>*
  %6590 = load <16 x i16>, <16 x i16>* %6589, align 2, !tbaa !396
  %6591 = getelementptr inbounds i16, i16* %6581, i64 -14
  %6592 = bitcast i16* %6591 to <16 x i16>*
  %6593 = load <16 x i16>, <16 x i16>* %6592, align 2, !tbaa !396
  %6594 = getelementptr inbounds i16, i16* %6581, i64 -32
  %6595 = bitcast i16* %6594 to <16 x i16>*
  %6596 = load <16 x i16>, <16 x i16>* %6595, align 2, !tbaa !396
  %6597 = getelementptr inbounds i16, i16* %6581, i64 -16
  %6598 = bitcast i16* %6597 to <16 x i16>*
  %6599 = load <16 x i16>, <16 x i16>* %6598, align 2, !tbaa !396
  %6600 = add <16 x i16> %6590, %6584
  %6601 = add <16 x i16> %6600, %6596
  %6602 = add <16 x i16> %6593, %6587
  %6603 = add <16 x i16> %6602, %6599
  %6604 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6601, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6605 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6603, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6606 = shufflevector <16 x i16> %6604, <16 x i16> %6605, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6607 = lshr <32 x i16> %6606, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6608 = shufflevector <32 x i16> %6607, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6609 = zext i32 %.pre-phi to i64
  %6610 = mul nsw i64 %96, %6609
  %6611 = add nsw i64 %98, %6610
  %6612 = getelementptr inbounds i16, i16* %blur_x, i64 %6611
  %6613 = getelementptr inbounds i16, i16* %6612, i64 -32
  %6614 = bitcast i16* %6613 to <16 x i16>*
  store <16 x i16> %6608, <16 x i16>* %6614, align 2, !tbaa !399
  %6615 = shufflevector <32 x i16> %6607, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6616 = getelementptr inbounds i16, i16* %6612, i64 -16
  %6617 = bitcast i16* %6616 to <16 x i16>*
  store <16 x i16> %6615, <16 x i16>* %6617, align 2, !tbaa !399
  %6618 = zext i32 %.pre-phi3323 to i64
  %6619 = mul nsw i64 %6618, %108
  %6620 = add nsw i64 %6619, %93
  %6621 = getelementptr inbounds i16, i16* %blur_x, i64 %6620
  %6622 = getelementptr inbounds i16, i16* %6621, i64 -32
  %6623 = bitcast i16* %6622 to <16 x i16>*
  %6624 = load <16 x i16>, <16 x i16>* %6623, align 2, !tbaa !399
  %6625 = getelementptr inbounds i16, i16* %6621, i64 -16
  %6626 = bitcast i16* %6625 to <16 x i16>*
  %6627 = load <16 x i16>, <16 x i16>* %6626, align 2, !tbaa !399
  %6628 = mul nsw i64 %6609, %108
  %6629 = add nsw i64 %6628, %93
  %6630 = getelementptr inbounds i16, i16* %blur_x, i64 %6629
  %6631 = getelementptr inbounds i16, i16* %6630, i64 -32
  %6632 = bitcast i16* %6631 to <16 x i16>*
  %6633 = load <16 x i16>, <16 x i16>* %6632, align 2, !tbaa !399
  %6634 = getelementptr inbounds i16, i16* %6630, i64 -16
  %6635 = bitcast i16* %6634 to <16 x i16>*
  %6636 = load <16 x i16>, <16 x i16>* %6635, align 2, !tbaa !399
  %6637 = zext i32 %.pre-phi3317 to i64
  %6638 = mul nsw i64 %6637, %108
  %6639 = add nsw i64 %6638, %93
  %6640 = getelementptr inbounds i16, i16* %blur_x, i64 %6639
  %6641 = getelementptr inbounds i16, i16* %6640, i64 -32
  %6642 = bitcast i16* %6641 to <16 x i16>*
  %6643 = load <16 x i16>, <16 x i16>* %6642, align 2, !tbaa !399
  %6644 = getelementptr inbounds i16, i16* %6640, i64 -16
  %6645 = bitcast i16* %6644 to <16 x i16>*
  %6646 = load <16 x i16>, <16 x i16>* %6645, align 2, !tbaa !399
  %6647 = add <16 x i16> %6633, %6624
  %6648 = add <16 x i16> %6647, %6643
  %6649 = add <16 x i16> %6636, %6627
  %6650 = add <16 x i16> %6649, %6646
  %6651 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6648, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6652 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6650, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6653 = shufflevector <16 x i16> %6651, <16 x i16> %6652, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6654 = lshr <32 x i16> %6653, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6655 = shufflevector <32 x i16> %6654, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6656 = sext i32 %a26 to i64
  %6657 = add nsw i64 %6656, 18
  %6658 = mul nsw i64 %6657, %109
  %6659 = add nsw i64 %111, %6658
  %6660 = getelementptr inbounds i16, i16* %65, i64 %6659
  %6661 = getelementptr inbounds i16, i16* %6660, i64 -32
  %6662 = bitcast i16* %6661 to <16 x i16>*
  store <16 x i16> %6655, <16 x i16>* %6662, align 2, !tbaa !401
  %6663 = shufflevector <32 x i16> %6654, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6664 = getelementptr inbounds i16, i16* %6660, i64 -16
  %6665 = bitcast i16* %6664 to <16 x i16>*
  store <16 x i16> %6663, <16 x i16>* %6665, align 2, !tbaa !401
  br label %after_bb449

"for blur_y.s0.x.x.rebased454":                   ; preds = %"for blur_y.s0.x.x.rebased454.preheader", %"consume blur_x461"
  %indvars.iv3185 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased454.preheader" ], [ %indvars.iv.next3186, %"consume blur_x461" ]
  %6666 = add nsw i64 %indvars.iv3185, %100
  %6667 = icmp slt i64 %6666, 1
  %6668 = trunc i64 %6666 to i32
  %6669 = shl nsw i32 %6668, 5
  %6670 = icmp sgt i32 %4, %6669
  %6671 = or i1 %6667, %6670
  br i1 %6671, label %"produce blur_x460", label %"for blur_y.s0.x.x.rebased454.consume blur_x461_crit_edge"

"for blur_y.s0.x.x.rebased454.consume blur_x461_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased454"
  %.pre3358 = shl nsw i64 %6666, 5
  br label %"consume blur_x461"

"end for blur_y.s0.x.x.rebased455":               ; preds = %"consume blur_x461", %after_bb449
  br i1 %101, label %"for blur_y.s0.x.x.rebased462.preheader", label %"end for blur_y.s0.x.x.rebased463", !prof !386

"for blur_y.s0.x.x.rebased462.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased455"
  %6672 = sext i32 %t1638 to i64
  %6673 = zext i32 %.pre-phi3323 to i64
  %6674 = mul nsw i64 %6673, %108
  %6675 = sub nsw i64 %6674, %95
  %6676 = zext i32 %.pre-phi to i64
  %6677 = mul nsw i64 %6676, %108
  %6678 = sub nsw i64 %6677, %95
  %6679 = zext i32 %.pre-phi3317 to i64
  %6680 = mul nsw i64 %6679, %108
  %6681 = sub nsw i64 %6680, %95
  %6682 = sext i32 %a26 to i64
  %6683 = add nsw i64 %6682, 18
  %6684 = mul nsw i64 %6683, %109
  %6685 = add nsw i64 %6684, %112
  br label %"for blur_y.s0.x.x.rebased462"

"produce blur_x460":                              ; preds = %"for blur_y.s0.x.x.rebased454"
  %t960 = add nsw i32 %6669, %t1937
  %6686 = sext i32 %t960 to i64
  %6687 = getelementptr inbounds i16, i16* %read_input, i64 %6686
  %6688 = getelementptr inbounds i16, i16* %6687, i64 1
  %6689 = bitcast i16* %6688 to <16 x i16>*
  %6690 = load <16 x i16>, <16 x i16>* %6689, align 2, !tbaa !396
  %6691 = getelementptr inbounds i16, i16* %6687, i64 17
  %6692 = bitcast i16* %6691 to <16 x i16>*
  %6693 = load <16 x i16>, <16 x i16>* %6692, align 2, !tbaa !396
  %6694 = getelementptr inbounds i16, i16* %6687, i64 2
  %6695 = bitcast i16* %6694 to <16 x i16>*
  %6696 = load <16 x i16>, <16 x i16>* %6695, align 2, !tbaa !396
  %6697 = getelementptr inbounds i16, i16* %6687, i64 18
  %6698 = bitcast i16* %6697 to <16 x i16>*
  %6699 = load <16 x i16>, <16 x i16>* %6698, align 2, !tbaa !396
  %6700 = bitcast i16* %6687 to <16 x i16>*
  %6701 = load <16 x i16>, <16 x i16>* %6700, align 2, !tbaa !396
  %6702 = getelementptr inbounds i16, i16* %6687, i64 16
  %6703 = bitcast i16* %6702 to <16 x i16>*
  %6704 = load <16 x i16>, <16 x i16>* %6703, align 2, !tbaa !396
  %6705 = add <16 x i16> %6696, %6690
  %6706 = add <16 x i16> %6705, %6701
  %6707 = add <16 x i16> %6699, %6693
  %6708 = add <16 x i16> %6707, %6704
  %6709 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6706, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6710 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6708, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6711 = shufflevector <16 x i16> %6709, <16 x i16> %6710, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6712 = lshr <32 x i16> %6711, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6713 = shufflevector <32 x i16> %6712, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6714 = shl nsw i64 %6666, 5
  %6715 = add nsw i64 %6714, %6567
  %6716 = getelementptr inbounds i16, i16* %blur_x, i64 %6715
  %6717 = bitcast i16* %6716 to <16 x i16>*
  store <16 x i16> %6713, <16 x i16>* %6717, align 2, !tbaa !399
  %6718 = shufflevector <32 x i16> %6712, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6719 = getelementptr inbounds i16, i16* %6716, i64 16
  %6720 = bitcast i16* %6719 to <16 x i16>*
  store <16 x i16> %6718, <16 x i16>* %6720, align 2, !tbaa !399
  br label %"consume blur_x461"

"consume blur_x461":                              ; preds = %"for blur_y.s0.x.x.rebased454.consume blur_x461_crit_edge", %"produce blur_x460"
  %.pre-phi3359 = phi i64 [ %.pre3358, %"for blur_y.s0.x.x.rebased454.consume blur_x461_crit_edge" ], [ %6714, %"produce blur_x460" ]
  %6721 = add nsw i64 %6570, %.pre-phi3359
  %6722 = getelementptr inbounds i16, i16* %blur_x, i64 %6721
  %6723 = bitcast i16* %6722 to <16 x i16>*
  %6724 = load <16 x i16>, <16 x i16>* %6723, align 2, !tbaa !399
  %6725 = getelementptr inbounds i16, i16* %6722, i64 16
  %6726 = bitcast i16* %6725 to <16 x i16>*
  %6727 = load <16 x i16>, <16 x i16>* %6726, align 2, !tbaa !399
  %6728 = add nsw i64 %6573, %.pre-phi3359
  %6729 = getelementptr inbounds i16, i16* %blur_x, i64 %6728
  %6730 = bitcast i16* %6729 to <16 x i16>*
  %6731 = load <16 x i16>, <16 x i16>* %6730, align 2, !tbaa !399
  %6732 = getelementptr inbounds i16, i16* %6729, i64 16
  %6733 = bitcast i16* %6732 to <16 x i16>*
  %6734 = load <16 x i16>, <16 x i16>* %6733, align 2, !tbaa !399
  %6735 = add nsw i64 %6576, %.pre-phi3359
  %6736 = getelementptr inbounds i16, i16* %blur_x, i64 %6735
  %6737 = bitcast i16* %6736 to <16 x i16>*
  %6738 = load <16 x i16>, <16 x i16>* %6737, align 2, !tbaa !399
  %6739 = getelementptr inbounds i16, i16* %6736, i64 16
  %6740 = bitcast i16* %6739 to <16 x i16>*
  %6741 = load <16 x i16>, <16 x i16>* %6740, align 2, !tbaa !399
  %6742 = add <16 x i16> %6731, %6724
  %6743 = add <16 x i16> %6742, %6738
  %6744 = add <16 x i16> %6734, %6727
  %6745 = add <16 x i16> %6744, %6741
  %6746 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6743, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6747 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6745, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6748 = shufflevector <16 x i16> %6746, <16 x i16> %6747, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6749 = lshr <32 x i16> %6748, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6750 = shufflevector <32 x i16> %6749, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6751 = add nsw i64 %6580, %.pre-phi3359
  %6752 = getelementptr inbounds i16, i16* %65, i64 %6751
  %6753 = bitcast i16* %6752 to <16 x i16>*
  store <16 x i16> %6750, <16 x i16>* %6753, align 2, !tbaa !401
  %6754 = shufflevector <32 x i16> %6749, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6755 = getelementptr inbounds i16, i16* %6752, i64 16
  %6756 = bitcast i16* %6755 to <16 x i16>*
  store <16 x i16> %6754, <16 x i16>* %6756, align 2, !tbaa !401
  %indvars.iv.next3186 = add nuw nsw i64 %indvars.iv3185, 1
  %.not2609 = icmp eq i64 %indvars.iv.next3186, %180
  br i1 %.not2609, label %"end for blur_y.s0.x.x.rebased455", label %"for blur_y.s0.x.x.rebased454"

"for blur_y.s0.x.x.rebased462":                   ; preds = %"for blur_y.s0.x.x.rebased462.preheader", %"consume blur_x470"
  %blur_y.s0.x.x.rebased464 = phi i32 [ %6835, %"consume blur_x470" ], [ 0, %"for blur_y.s0.x.x.rebased462.preheader" ]
  %6757 = add nsw i32 %blur_y.s0.x.x.rebased464, %t1582
  %a217 = shl nsw i32 %6757, 5
  %6758 = icmp sgt i32 %a14, %a217
  %b223 = select i1 %6758, i32 %a217, i32 %a14
  %6759 = icmp slt i32 %6757, 1
  %6760 = icmp sgt i32 %4, %a217
  %6761 = or i1 %6759, %6760
  br i1 %6761, label %"produce blur_x468", label %"consume blur_x470"

"end for blur_y.s0.x.x.rebased463":               ; preds = %"consume blur_x470", %"end for blur_y.s0.x.x.rebased455"
  br i1 %34, label %"produce blur_x474", label %after_bb471

"produce blur_x468":                              ; preds = %"for blur_y.s0.x.x.rebased462"
  %6762 = icmp slt i32 %b223, %4
  %blur_x.s0.x.v1.base.s469 = select i1 %6762, i32 %b223, i32 %4
  %t965 = add nsw i32 %blur_x.s0.x.v1.base.s469, %t1937
  %6763 = sext i32 %t965 to i64
  %6764 = getelementptr inbounds i16, i16* %read_input, i64 %6763
  %6765 = getelementptr inbounds i16, i16* %6764, i64 1
  %6766 = bitcast i16* %6765 to <16 x i16>*
  %6767 = load <16 x i16>, <16 x i16>* %6766, align 2, !tbaa !396
  %6768 = getelementptr inbounds i16, i16* %6764, i64 17
  %6769 = bitcast i16* %6768 to <16 x i16>*
  %6770 = load <16 x i16>, <16 x i16>* %6769, align 2, !tbaa !396
  %6771 = getelementptr inbounds i16, i16* %6764, i64 2
  %6772 = bitcast i16* %6771 to <16 x i16>*
  %6773 = load <16 x i16>, <16 x i16>* %6772, align 2, !tbaa !396
  %6774 = getelementptr inbounds i16, i16* %6764, i64 18
  %6775 = bitcast i16* %6774 to <16 x i16>*
  %6776 = load <16 x i16>, <16 x i16>* %6775, align 2, !tbaa !396
  %6777 = bitcast i16* %6764 to <16 x i16>*
  %6778 = load <16 x i16>, <16 x i16>* %6777, align 2, !tbaa !396
  %6779 = getelementptr inbounds i16, i16* %6764, i64 16
  %6780 = bitcast i16* %6779 to <16 x i16>*
  %6781 = load <16 x i16>, <16 x i16>* %6780, align 2, !tbaa !396
  %6782 = add <16 x i16> %6773, %6767
  %6783 = add <16 x i16> %6782, %6778
  %6784 = add <16 x i16> %6776, %6770
  %6785 = add <16 x i16> %6784, %6781
  %6786 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6783, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6787 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6785, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6788 = shufflevector <16 x i16> %6786, <16 x i16> %6787, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6789 = lshr <32 x i16> %6788, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6790 = shufflevector <32 x i16> %6789, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6791 = sext i32 %blur_x.s0.x.v1.base.s469 to i64
  %6792 = add nsw i64 %6791, %6672
  %6793 = getelementptr inbounds i16, i16* %blur_x, i64 %6792
  %6794 = bitcast i16* %6793 to <16 x i16>*
  store <16 x i16> %6790, <16 x i16>* %6794, align 2, !tbaa !399
  %6795 = shufflevector <32 x i16> %6789, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6796 = getelementptr inbounds i16, i16* %6793, i64 16
  %6797 = bitcast i16* %6796 to <16 x i16>*
  store <16 x i16> %6795, <16 x i16>* %6797, align 2, !tbaa !399
  br label %"consume blur_x470"

"consume blur_x470":                              ; preds = %"for blur_y.s0.x.x.rebased462", %"produce blur_x468"
  %6798 = sext i32 %b223 to i64
  %6799 = add nsw i64 %6675, %6798
  %6800 = getelementptr inbounds i16, i16* %blur_x, i64 %6799
  %6801 = bitcast i16* %6800 to <16 x i16>*
  %6802 = load <16 x i16>, <16 x i16>* %6801, align 2, !tbaa !399
  %6803 = getelementptr inbounds i16, i16* %6800, i64 16
  %6804 = bitcast i16* %6803 to <16 x i16>*
  %6805 = load <16 x i16>, <16 x i16>* %6804, align 2, !tbaa !399
  %6806 = add nsw i64 %6678, %6798
  %6807 = getelementptr inbounds i16, i16* %blur_x, i64 %6806
  %6808 = bitcast i16* %6807 to <16 x i16>*
  %6809 = load <16 x i16>, <16 x i16>* %6808, align 2, !tbaa !399
  %6810 = getelementptr inbounds i16, i16* %6807, i64 16
  %6811 = bitcast i16* %6810 to <16 x i16>*
  %6812 = load <16 x i16>, <16 x i16>* %6811, align 2, !tbaa !399
  %6813 = add nsw i64 %6681, %6798
  %6814 = getelementptr inbounds i16, i16* %blur_x, i64 %6813
  %6815 = bitcast i16* %6814 to <16 x i16>*
  %6816 = load <16 x i16>, <16 x i16>* %6815, align 2, !tbaa !399
  %6817 = getelementptr inbounds i16, i16* %6814, i64 16
  %6818 = bitcast i16* %6817 to <16 x i16>*
  %6819 = load <16 x i16>, <16 x i16>* %6818, align 2, !tbaa !399
  %6820 = add <16 x i16> %6809, %6802
  %6821 = add <16 x i16> %6820, %6816
  %6822 = add <16 x i16> %6812, %6805
  %6823 = add <16 x i16> %6822, %6819
  %6824 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6821, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6825 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6823, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6826 = shufflevector <16 x i16> %6824, <16 x i16> %6825, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6827 = lshr <32 x i16> %6826, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6828 = shufflevector <32 x i16> %6827, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6829 = add nsw i64 %6685, %6798
  %6830 = getelementptr inbounds i16, i16* %65, i64 %6829
  %6831 = bitcast i16* %6830 to <16 x i16>*
  store <16 x i16> %6828, <16 x i16>* %6831, align 2, !tbaa !401
  %6832 = shufflevector <32 x i16> %6827, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6833 = getelementptr inbounds i16, i16* %6830, i64 16
  %6834 = bitcast i16* %6833 to <16 x i16>*
  store <16 x i16> %6832, <16 x i16>* %6834, align 2, !tbaa !401
  %6835 = add nuw nsw i32 %blur_y.s0.x.x.rebased464, 1
  %.not2608 = icmp eq i32 %6835, %t1639
  br i1 %.not2608, label %"end for blur_y.s0.x.x.rebased463", label %"for blur_y.s0.x.x.rebased462"

after_bb471:                                      ; preds = %"end for blur_y.s0.x.x.rebased463", %"produce blur_x474"
  br i1 %99, label %"for blur_y.s0.x.x.rebased476.preheader", label %"end for blur_y.s0.x.x.rebased477", !prof !386

"for blur_y.s0.x.x.rebased476.preheader":         ; preds = %after_bb471
  %6836 = sext i32 %t1644 to i64
  %6837 = zext i32 %.pre-phi to i64
  %6838 = mul nsw i64 %6837, %108
  %6839 = sub nsw i64 %6838, %95
  %6840 = zext i32 %.pre-phi3313 to i64
  %6841 = mul nsw i64 %6840, %108
  %6842 = sub nsw i64 %6841, %95
  %6843 = zext i32 %.pre-phi3323 to i64
  %6844 = mul nsw i64 %6843, %108
  %6845 = sub nsw i64 %6844, %95
  %6846 = sext i32 %a26 to i64
  %6847 = add nsw i64 %6846, 19
  %6848 = mul nsw i64 %6847, %109
  %6849 = add nsw i64 %6848, %112
  br label %"for blur_y.s0.x.x.rebased476"

"produce blur_x474":                              ; preds = %"end for blur_y.s0.x.x.rebased463"
  %6850 = getelementptr inbounds i16, i16* %read_input, i64 %149
  %6851 = getelementptr inbounds i16, i16* %6850, i64 -31
  %6852 = bitcast i16* %6851 to <16 x i16>*
  %6853 = load <16 x i16>, <16 x i16>* %6852, align 2, !tbaa !396
  %6854 = getelementptr inbounds i16, i16* %6850, i64 -15
  %6855 = bitcast i16* %6854 to <16 x i16>*
  %6856 = load <16 x i16>, <16 x i16>* %6855, align 2, !tbaa !396
  %6857 = getelementptr inbounds i16, i16* %6850, i64 -30
  %6858 = bitcast i16* %6857 to <16 x i16>*
  %6859 = load <16 x i16>, <16 x i16>* %6858, align 2, !tbaa !396
  %6860 = getelementptr inbounds i16, i16* %6850, i64 -14
  %6861 = bitcast i16* %6860 to <16 x i16>*
  %6862 = load <16 x i16>, <16 x i16>* %6861, align 2, !tbaa !396
  %6863 = getelementptr inbounds i16, i16* %6850, i64 -32
  %6864 = bitcast i16* %6863 to <16 x i16>*
  %6865 = load <16 x i16>, <16 x i16>* %6864, align 2, !tbaa !396
  %6866 = getelementptr inbounds i16, i16* %6850, i64 -16
  %6867 = bitcast i16* %6866 to <16 x i16>*
  %6868 = load <16 x i16>, <16 x i16>* %6867, align 2, !tbaa !396
  %6869 = add <16 x i16> %6859, %6853
  %6870 = add <16 x i16> %6869, %6865
  %6871 = add <16 x i16> %6862, %6856
  %6872 = add <16 x i16> %6871, %6868
  %6873 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6870, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6874 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6872, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6875 = shufflevector <16 x i16> %6873, <16 x i16> %6874, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6876 = lshr <32 x i16> %6875, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6877 = shufflevector <32 x i16> %6876, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6878 = zext i32 %.pre-phi3313 to i64
  %6879 = mul nsw i64 %96, %6878
  %6880 = add nsw i64 %98, %6879
  %6881 = getelementptr inbounds i16, i16* %blur_x, i64 %6880
  %6882 = getelementptr inbounds i16, i16* %6881, i64 -32
  %6883 = bitcast i16* %6882 to <16 x i16>*
  store <16 x i16> %6877, <16 x i16>* %6883, align 2, !tbaa !399
  %6884 = shufflevector <32 x i16> %6876, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6885 = getelementptr inbounds i16, i16* %6881, i64 -16
  %6886 = bitcast i16* %6885 to <16 x i16>*
  store <16 x i16> %6884, <16 x i16>* %6886, align 2, !tbaa !399
  %6887 = zext i32 %.pre-phi to i64
  %6888 = mul nsw i64 %6887, %108
  %6889 = add nsw i64 %6888, %93
  %6890 = getelementptr inbounds i16, i16* %blur_x, i64 %6889
  %6891 = getelementptr inbounds i16, i16* %6890, i64 -32
  %6892 = bitcast i16* %6891 to <16 x i16>*
  %6893 = load <16 x i16>, <16 x i16>* %6892, align 2, !tbaa !399
  %6894 = getelementptr inbounds i16, i16* %6890, i64 -16
  %6895 = bitcast i16* %6894 to <16 x i16>*
  %6896 = load <16 x i16>, <16 x i16>* %6895, align 2, !tbaa !399
  %6897 = mul nsw i64 %6878, %108
  %6898 = add nsw i64 %6897, %93
  %6899 = getelementptr inbounds i16, i16* %blur_x, i64 %6898
  %6900 = getelementptr inbounds i16, i16* %6899, i64 -32
  %6901 = bitcast i16* %6900 to <16 x i16>*
  %6902 = load <16 x i16>, <16 x i16>* %6901, align 2, !tbaa !399
  %6903 = getelementptr inbounds i16, i16* %6899, i64 -16
  %6904 = bitcast i16* %6903 to <16 x i16>*
  %6905 = load <16 x i16>, <16 x i16>* %6904, align 2, !tbaa !399
  %6906 = zext i32 %.pre-phi3323 to i64
  %6907 = mul nsw i64 %6906, %108
  %6908 = add nsw i64 %6907, %93
  %6909 = getelementptr inbounds i16, i16* %blur_x, i64 %6908
  %6910 = getelementptr inbounds i16, i16* %6909, i64 -32
  %6911 = bitcast i16* %6910 to <16 x i16>*
  %6912 = load <16 x i16>, <16 x i16>* %6911, align 2, !tbaa !399
  %6913 = getelementptr inbounds i16, i16* %6909, i64 -16
  %6914 = bitcast i16* %6913 to <16 x i16>*
  %6915 = load <16 x i16>, <16 x i16>* %6914, align 2, !tbaa !399
  %6916 = add <16 x i16> %6902, %6893
  %6917 = add <16 x i16> %6916, %6912
  %6918 = add <16 x i16> %6905, %6896
  %6919 = add <16 x i16> %6918, %6915
  %6920 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6917, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6921 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6919, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6922 = shufflevector <16 x i16> %6920, <16 x i16> %6921, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6923 = lshr <32 x i16> %6922, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6924 = shufflevector <32 x i16> %6923, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6925 = sext i32 %a26 to i64
  %6926 = add nsw i64 %6925, 19
  %6927 = mul nsw i64 %6926, %109
  %6928 = add nsw i64 %111, %6927
  %6929 = getelementptr inbounds i16, i16* %65, i64 %6928
  %6930 = getelementptr inbounds i16, i16* %6929, i64 -32
  %6931 = bitcast i16* %6930 to <16 x i16>*
  store <16 x i16> %6924, <16 x i16>* %6931, align 2, !tbaa !401
  %6932 = shufflevector <32 x i16> %6923, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6933 = getelementptr inbounds i16, i16* %6929, i64 -16
  %6934 = bitcast i16* %6933 to <16 x i16>*
  store <16 x i16> %6932, <16 x i16>* %6934, align 2, !tbaa !401
  br label %after_bb471

"for blur_y.s0.x.x.rebased476":                   ; preds = %"for blur_y.s0.x.x.rebased476.preheader", %"consume blur_x483"
  %indvars.iv3188 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased476.preheader" ], [ %indvars.iv.next3189, %"consume blur_x483" ]
  %6935 = add nsw i64 %indvars.iv3188, %100
  %6936 = icmp slt i64 %6935, 1
  %6937 = trunc i64 %6935 to i32
  %6938 = shl nsw i32 %6937, 5
  %6939 = icmp sgt i32 %4, %6938
  %6940 = or i1 %6936, %6939
  br i1 %6940, label %"produce blur_x482", label %"for blur_y.s0.x.x.rebased476.consume blur_x483_crit_edge"

"for blur_y.s0.x.x.rebased476.consume blur_x483_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased476"
  %.pre3360 = shl nsw i64 %6935, 5
  br label %"consume blur_x483"

"end for blur_y.s0.x.x.rebased477":               ; preds = %"consume blur_x483", %after_bb471
  br i1 %101, label %"for blur_y.s0.x.x.rebased484.preheader", label %"end for blur_y.s0.x.x.rebased485", !prof !386

"for blur_y.s0.x.x.rebased484.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased477"
  %6941 = sext i32 %t1644 to i64
  %6942 = zext i32 %.pre-phi to i64
  %6943 = mul nsw i64 %6942, %108
  %6944 = sub nsw i64 %6943, %95
  %6945 = zext i32 %.pre-phi3313 to i64
  %6946 = mul nsw i64 %6945, %108
  %6947 = sub nsw i64 %6946, %95
  %6948 = zext i32 %.pre-phi3323 to i64
  %6949 = mul nsw i64 %6948, %108
  %6950 = sub nsw i64 %6949, %95
  %6951 = sext i32 %a26 to i64
  %6952 = add nsw i64 %6951, 19
  %6953 = mul nsw i64 %6952, %109
  %6954 = add nsw i64 %6953, %112
  br label %"for blur_y.s0.x.x.rebased484"

"produce blur_x482":                              ; preds = %"for blur_y.s0.x.x.rebased476"
  %t976 = add nsw i32 %6938, %t1953
  %6955 = sext i32 %t976 to i64
  %6956 = getelementptr inbounds i16, i16* %read_input, i64 %6955
  %6957 = getelementptr inbounds i16, i16* %6956, i64 1
  %6958 = bitcast i16* %6957 to <16 x i16>*
  %6959 = load <16 x i16>, <16 x i16>* %6958, align 2, !tbaa !396
  %6960 = getelementptr inbounds i16, i16* %6956, i64 17
  %6961 = bitcast i16* %6960 to <16 x i16>*
  %6962 = load <16 x i16>, <16 x i16>* %6961, align 2, !tbaa !396
  %6963 = getelementptr inbounds i16, i16* %6956, i64 2
  %6964 = bitcast i16* %6963 to <16 x i16>*
  %6965 = load <16 x i16>, <16 x i16>* %6964, align 2, !tbaa !396
  %6966 = getelementptr inbounds i16, i16* %6956, i64 18
  %6967 = bitcast i16* %6966 to <16 x i16>*
  %6968 = load <16 x i16>, <16 x i16>* %6967, align 2, !tbaa !396
  %6969 = bitcast i16* %6956 to <16 x i16>*
  %6970 = load <16 x i16>, <16 x i16>* %6969, align 2, !tbaa !396
  %6971 = getelementptr inbounds i16, i16* %6956, i64 16
  %6972 = bitcast i16* %6971 to <16 x i16>*
  %6973 = load <16 x i16>, <16 x i16>* %6972, align 2, !tbaa !396
  %6974 = add <16 x i16> %6965, %6959
  %6975 = add <16 x i16> %6974, %6970
  %6976 = add <16 x i16> %6968, %6962
  %6977 = add <16 x i16> %6976, %6973
  %6978 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6975, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6979 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6977, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6980 = shufflevector <16 x i16> %6978, <16 x i16> %6979, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6981 = lshr <32 x i16> %6980, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6982 = shufflevector <32 x i16> %6981, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6983 = shl nsw i64 %6935, 5
  %6984 = add nsw i64 %6983, %6836
  %6985 = getelementptr inbounds i16, i16* %blur_x, i64 %6984
  %6986 = bitcast i16* %6985 to <16 x i16>*
  store <16 x i16> %6982, <16 x i16>* %6986, align 2, !tbaa !399
  %6987 = shufflevector <32 x i16> %6981, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6988 = getelementptr inbounds i16, i16* %6985, i64 16
  %6989 = bitcast i16* %6988 to <16 x i16>*
  store <16 x i16> %6987, <16 x i16>* %6989, align 2, !tbaa !399
  br label %"consume blur_x483"

"consume blur_x483":                              ; preds = %"for blur_y.s0.x.x.rebased476.consume blur_x483_crit_edge", %"produce blur_x482"
  %.pre-phi3361 = phi i64 [ %.pre3360, %"for blur_y.s0.x.x.rebased476.consume blur_x483_crit_edge" ], [ %6983, %"produce blur_x482" ]
  %6990 = add nsw i64 %6839, %.pre-phi3361
  %6991 = getelementptr inbounds i16, i16* %blur_x, i64 %6990
  %6992 = bitcast i16* %6991 to <16 x i16>*
  %6993 = load <16 x i16>, <16 x i16>* %6992, align 2, !tbaa !399
  %6994 = getelementptr inbounds i16, i16* %6991, i64 16
  %6995 = bitcast i16* %6994 to <16 x i16>*
  %6996 = load <16 x i16>, <16 x i16>* %6995, align 2, !tbaa !399
  %6997 = add nsw i64 %6842, %.pre-phi3361
  %6998 = getelementptr inbounds i16, i16* %blur_x, i64 %6997
  %6999 = bitcast i16* %6998 to <16 x i16>*
  %7000 = load <16 x i16>, <16 x i16>* %6999, align 2, !tbaa !399
  %7001 = getelementptr inbounds i16, i16* %6998, i64 16
  %7002 = bitcast i16* %7001 to <16 x i16>*
  %7003 = load <16 x i16>, <16 x i16>* %7002, align 2, !tbaa !399
  %7004 = add nsw i64 %6845, %.pre-phi3361
  %7005 = getelementptr inbounds i16, i16* %blur_x, i64 %7004
  %7006 = bitcast i16* %7005 to <16 x i16>*
  %7007 = load <16 x i16>, <16 x i16>* %7006, align 2, !tbaa !399
  %7008 = getelementptr inbounds i16, i16* %7005, i64 16
  %7009 = bitcast i16* %7008 to <16 x i16>*
  %7010 = load <16 x i16>, <16 x i16>* %7009, align 2, !tbaa !399
  %7011 = add <16 x i16> %7000, %6993
  %7012 = add <16 x i16> %7011, %7007
  %7013 = add <16 x i16> %7003, %6996
  %7014 = add <16 x i16> %7013, %7010
  %7015 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7012, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7016 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7014, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7017 = shufflevector <16 x i16> %7015, <16 x i16> %7016, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7018 = lshr <32 x i16> %7017, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7019 = shufflevector <32 x i16> %7018, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7020 = add nsw i64 %6849, %.pre-phi3361
  %7021 = getelementptr inbounds i16, i16* %65, i64 %7020
  %7022 = bitcast i16* %7021 to <16 x i16>*
  store <16 x i16> %7019, <16 x i16>* %7022, align 2, !tbaa !401
  %7023 = shufflevector <32 x i16> %7018, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7024 = getelementptr inbounds i16, i16* %7021, i64 16
  %7025 = bitcast i16* %7024 to <16 x i16>*
  store <16 x i16> %7023, <16 x i16>* %7025, align 2, !tbaa !401
  %indvars.iv.next3189 = add nuw nsw i64 %indvars.iv3188, 1
  %.not2607 = icmp eq i64 %indvars.iv.next3189, %180
  br i1 %.not2607, label %"end for blur_y.s0.x.x.rebased477", label %"for blur_y.s0.x.x.rebased476"

"for blur_y.s0.x.x.rebased484":                   ; preds = %"for blur_y.s0.x.x.rebased484.preheader", %"consume blur_x492"
  %blur_y.s0.x.x.rebased486 = phi i32 [ %7104, %"consume blur_x492" ], [ 0, %"for blur_y.s0.x.x.rebased484.preheader" ]
  %7026 = add nsw i32 %blur_y.s0.x.x.rebased486, %t1582
  %a224 = shl nsw i32 %7026, 5
  %7027 = icmp sgt i32 %a14, %a224
  %b230 = select i1 %7027, i32 %a224, i32 %a14
  %7028 = icmp slt i32 %7026, 1
  %7029 = icmp sgt i32 %4, %a224
  %7030 = or i1 %7028, %7029
  br i1 %7030, label %"produce blur_x490", label %"consume blur_x492"

"end for blur_y.s0.x.x.rebased485":               ; preds = %"consume blur_x492", %"end for blur_y.s0.x.x.rebased477"
  br i1 %34, label %"produce blur_x496", label %after_bb493

"produce blur_x490":                              ; preds = %"for blur_y.s0.x.x.rebased484"
  %7031 = icmp slt i32 %b230, %4
  %blur_x.s0.x.v1.base.s491 = select i1 %7031, i32 %b230, i32 %4
  %t981 = add nsw i32 %blur_x.s0.x.v1.base.s491, %t1953
  %7032 = sext i32 %t981 to i64
  %7033 = getelementptr inbounds i16, i16* %read_input, i64 %7032
  %7034 = getelementptr inbounds i16, i16* %7033, i64 1
  %7035 = bitcast i16* %7034 to <16 x i16>*
  %7036 = load <16 x i16>, <16 x i16>* %7035, align 2, !tbaa !396
  %7037 = getelementptr inbounds i16, i16* %7033, i64 17
  %7038 = bitcast i16* %7037 to <16 x i16>*
  %7039 = load <16 x i16>, <16 x i16>* %7038, align 2, !tbaa !396
  %7040 = getelementptr inbounds i16, i16* %7033, i64 2
  %7041 = bitcast i16* %7040 to <16 x i16>*
  %7042 = load <16 x i16>, <16 x i16>* %7041, align 2, !tbaa !396
  %7043 = getelementptr inbounds i16, i16* %7033, i64 18
  %7044 = bitcast i16* %7043 to <16 x i16>*
  %7045 = load <16 x i16>, <16 x i16>* %7044, align 2, !tbaa !396
  %7046 = bitcast i16* %7033 to <16 x i16>*
  %7047 = load <16 x i16>, <16 x i16>* %7046, align 2, !tbaa !396
  %7048 = getelementptr inbounds i16, i16* %7033, i64 16
  %7049 = bitcast i16* %7048 to <16 x i16>*
  %7050 = load <16 x i16>, <16 x i16>* %7049, align 2, !tbaa !396
  %7051 = add <16 x i16> %7042, %7036
  %7052 = add <16 x i16> %7051, %7047
  %7053 = add <16 x i16> %7045, %7039
  %7054 = add <16 x i16> %7053, %7050
  %7055 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7052, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7056 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7054, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7057 = shufflevector <16 x i16> %7055, <16 x i16> %7056, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7058 = lshr <32 x i16> %7057, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7059 = shufflevector <32 x i16> %7058, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7060 = sext i32 %blur_x.s0.x.v1.base.s491 to i64
  %7061 = add nsw i64 %7060, %6941
  %7062 = getelementptr inbounds i16, i16* %blur_x, i64 %7061
  %7063 = bitcast i16* %7062 to <16 x i16>*
  store <16 x i16> %7059, <16 x i16>* %7063, align 2, !tbaa !399
  %7064 = shufflevector <32 x i16> %7058, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7065 = getelementptr inbounds i16, i16* %7062, i64 16
  %7066 = bitcast i16* %7065 to <16 x i16>*
  store <16 x i16> %7064, <16 x i16>* %7066, align 2, !tbaa !399
  br label %"consume blur_x492"

"consume blur_x492":                              ; preds = %"for blur_y.s0.x.x.rebased484", %"produce blur_x490"
  %7067 = sext i32 %b230 to i64
  %7068 = add nsw i64 %6944, %7067
  %7069 = getelementptr inbounds i16, i16* %blur_x, i64 %7068
  %7070 = bitcast i16* %7069 to <16 x i16>*
  %7071 = load <16 x i16>, <16 x i16>* %7070, align 2, !tbaa !399
  %7072 = getelementptr inbounds i16, i16* %7069, i64 16
  %7073 = bitcast i16* %7072 to <16 x i16>*
  %7074 = load <16 x i16>, <16 x i16>* %7073, align 2, !tbaa !399
  %7075 = add nsw i64 %6947, %7067
  %7076 = getelementptr inbounds i16, i16* %blur_x, i64 %7075
  %7077 = bitcast i16* %7076 to <16 x i16>*
  %7078 = load <16 x i16>, <16 x i16>* %7077, align 2, !tbaa !399
  %7079 = getelementptr inbounds i16, i16* %7076, i64 16
  %7080 = bitcast i16* %7079 to <16 x i16>*
  %7081 = load <16 x i16>, <16 x i16>* %7080, align 2, !tbaa !399
  %7082 = add nsw i64 %6950, %7067
  %7083 = getelementptr inbounds i16, i16* %blur_x, i64 %7082
  %7084 = bitcast i16* %7083 to <16 x i16>*
  %7085 = load <16 x i16>, <16 x i16>* %7084, align 2, !tbaa !399
  %7086 = getelementptr inbounds i16, i16* %7083, i64 16
  %7087 = bitcast i16* %7086 to <16 x i16>*
  %7088 = load <16 x i16>, <16 x i16>* %7087, align 2, !tbaa !399
  %7089 = add <16 x i16> %7078, %7071
  %7090 = add <16 x i16> %7089, %7085
  %7091 = add <16 x i16> %7081, %7074
  %7092 = add <16 x i16> %7091, %7088
  %7093 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7090, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7094 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7092, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7095 = shufflevector <16 x i16> %7093, <16 x i16> %7094, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7096 = lshr <32 x i16> %7095, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7097 = shufflevector <32 x i16> %7096, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7098 = add nsw i64 %6954, %7067
  %7099 = getelementptr inbounds i16, i16* %65, i64 %7098
  %7100 = bitcast i16* %7099 to <16 x i16>*
  store <16 x i16> %7097, <16 x i16>* %7100, align 2, !tbaa !401
  %7101 = shufflevector <32 x i16> %7096, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7102 = getelementptr inbounds i16, i16* %7099, i64 16
  %7103 = bitcast i16* %7102 to <16 x i16>*
  store <16 x i16> %7101, <16 x i16>* %7103, align 2, !tbaa !401
  %7104 = add nuw nsw i32 %blur_y.s0.x.x.rebased486, 1
  %.not2606 = icmp eq i32 %7104, %t1639
  br i1 %.not2606, label %"end for blur_y.s0.x.x.rebased485", label %"for blur_y.s0.x.x.rebased484"

after_bb493:                                      ; preds = %"end for blur_y.s0.x.x.rebased485", %"produce blur_x496"
  br i1 %99, label %"for blur_y.s0.x.x.rebased498.preheader", label %"end for blur_y.s0.x.x.rebased499", !prof !386

"for blur_y.s0.x.x.rebased498.preheader":         ; preds = %after_bb493
  %7105 = sext i32 %t1650 to i64
  %7106 = zext i32 %.pre-phi3313 to i64
  %7107 = mul nsw i64 %7106, %108
  %7108 = sub nsw i64 %7107, %95
  %7109 = zext i32 %.pre-phi3317 to i64
  %7110 = mul nsw i64 %7109, %108
  %7111 = sub nsw i64 %7110, %95
  %7112 = zext i32 %.pre-phi to i64
  %7113 = mul nsw i64 %7112, %108
  %7114 = sub nsw i64 %7113, %95
  %7115 = sext i32 %a26 to i64
  %7116 = add nsw i64 %7115, 20
  %7117 = mul nsw i64 %7116, %109
  %7118 = add nsw i64 %7117, %112
  br label %"for blur_y.s0.x.x.rebased498"

"produce blur_x496":                              ; preds = %"end for blur_y.s0.x.x.rebased485"
  %7119 = getelementptr inbounds i16, i16* %read_input, i64 %151
  %7120 = getelementptr inbounds i16, i16* %7119, i64 -31
  %7121 = bitcast i16* %7120 to <16 x i16>*
  %7122 = load <16 x i16>, <16 x i16>* %7121, align 2, !tbaa !396
  %7123 = getelementptr inbounds i16, i16* %7119, i64 -15
  %7124 = bitcast i16* %7123 to <16 x i16>*
  %7125 = load <16 x i16>, <16 x i16>* %7124, align 2, !tbaa !396
  %7126 = getelementptr inbounds i16, i16* %7119, i64 -30
  %7127 = bitcast i16* %7126 to <16 x i16>*
  %7128 = load <16 x i16>, <16 x i16>* %7127, align 2, !tbaa !396
  %7129 = getelementptr inbounds i16, i16* %7119, i64 -14
  %7130 = bitcast i16* %7129 to <16 x i16>*
  %7131 = load <16 x i16>, <16 x i16>* %7130, align 2, !tbaa !396
  %7132 = getelementptr inbounds i16, i16* %7119, i64 -32
  %7133 = bitcast i16* %7132 to <16 x i16>*
  %7134 = load <16 x i16>, <16 x i16>* %7133, align 2, !tbaa !396
  %7135 = getelementptr inbounds i16, i16* %7119, i64 -16
  %7136 = bitcast i16* %7135 to <16 x i16>*
  %7137 = load <16 x i16>, <16 x i16>* %7136, align 2, !tbaa !396
  %7138 = add <16 x i16> %7128, %7122
  %7139 = add <16 x i16> %7138, %7134
  %7140 = add <16 x i16> %7131, %7125
  %7141 = add <16 x i16> %7140, %7137
  %7142 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7139, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7143 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7141, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7144 = shufflevector <16 x i16> %7142, <16 x i16> %7143, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7145 = lshr <32 x i16> %7144, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7146 = shufflevector <32 x i16> %7145, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7147 = zext i32 %.pre-phi3317 to i64
  %7148 = mul nsw i64 %96, %7147
  %7149 = add nsw i64 %98, %7148
  %7150 = getelementptr inbounds i16, i16* %blur_x, i64 %7149
  %7151 = getelementptr inbounds i16, i16* %7150, i64 -32
  %7152 = bitcast i16* %7151 to <16 x i16>*
  store <16 x i16> %7146, <16 x i16>* %7152, align 2, !tbaa !399
  %7153 = shufflevector <32 x i16> %7145, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7154 = getelementptr inbounds i16, i16* %7150, i64 -16
  %7155 = bitcast i16* %7154 to <16 x i16>*
  store <16 x i16> %7153, <16 x i16>* %7155, align 2, !tbaa !399
  %7156 = zext i32 %.pre-phi3313 to i64
  %7157 = mul nsw i64 %7156, %108
  %7158 = add nsw i64 %7157, %93
  %7159 = getelementptr inbounds i16, i16* %blur_x, i64 %7158
  %7160 = getelementptr inbounds i16, i16* %7159, i64 -32
  %7161 = bitcast i16* %7160 to <16 x i16>*
  %7162 = load <16 x i16>, <16 x i16>* %7161, align 2, !tbaa !399
  %7163 = getelementptr inbounds i16, i16* %7159, i64 -16
  %7164 = bitcast i16* %7163 to <16 x i16>*
  %7165 = load <16 x i16>, <16 x i16>* %7164, align 2, !tbaa !399
  %7166 = mul nsw i64 %7147, %108
  %7167 = add nsw i64 %7166, %93
  %7168 = getelementptr inbounds i16, i16* %blur_x, i64 %7167
  %7169 = getelementptr inbounds i16, i16* %7168, i64 -32
  %7170 = bitcast i16* %7169 to <16 x i16>*
  %7171 = load <16 x i16>, <16 x i16>* %7170, align 2, !tbaa !399
  %7172 = getelementptr inbounds i16, i16* %7168, i64 -16
  %7173 = bitcast i16* %7172 to <16 x i16>*
  %7174 = load <16 x i16>, <16 x i16>* %7173, align 2, !tbaa !399
  %7175 = zext i32 %.pre-phi to i64
  %7176 = mul nsw i64 %7175, %108
  %7177 = add nsw i64 %7176, %93
  %7178 = getelementptr inbounds i16, i16* %blur_x, i64 %7177
  %7179 = getelementptr inbounds i16, i16* %7178, i64 -32
  %7180 = bitcast i16* %7179 to <16 x i16>*
  %7181 = load <16 x i16>, <16 x i16>* %7180, align 2, !tbaa !399
  %7182 = getelementptr inbounds i16, i16* %7178, i64 -16
  %7183 = bitcast i16* %7182 to <16 x i16>*
  %7184 = load <16 x i16>, <16 x i16>* %7183, align 2, !tbaa !399
  %7185 = add <16 x i16> %7171, %7162
  %7186 = add <16 x i16> %7185, %7181
  %7187 = add <16 x i16> %7174, %7165
  %7188 = add <16 x i16> %7187, %7184
  %7189 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7186, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7190 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7188, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7191 = shufflevector <16 x i16> %7189, <16 x i16> %7190, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7192 = lshr <32 x i16> %7191, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7193 = shufflevector <32 x i16> %7192, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7194 = sext i32 %a26 to i64
  %7195 = add nsw i64 %7194, 20
  %7196 = mul nsw i64 %7195, %109
  %7197 = add nsw i64 %111, %7196
  %7198 = getelementptr inbounds i16, i16* %65, i64 %7197
  %7199 = getelementptr inbounds i16, i16* %7198, i64 -32
  %7200 = bitcast i16* %7199 to <16 x i16>*
  store <16 x i16> %7193, <16 x i16>* %7200, align 2, !tbaa !401
  %7201 = shufflevector <32 x i16> %7192, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7202 = getelementptr inbounds i16, i16* %7198, i64 -16
  %7203 = bitcast i16* %7202 to <16 x i16>*
  store <16 x i16> %7201, <16 x i16>* %7203, align 2, !tbaa !401
  br label %after_bb493

"for blur_y.s0.x.x.rebased498":                   ; preds = %"for blur_y.s0.x.x.rebased498.preheader", %"consume blur_x505"
  %indvars.iv3191 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased498.preheader" ], [ %indvars.iv.next3192, %"consume blur_x505" ]
  %7204 = add nsw i64 %indvars.iv3191, %100
  %7205 = icmp slt i64 %7204, 1
  %7206 = trunc i64 %7204 to i32
  %7207 = shl nsw i32 %7206, 5
  %7208 = icmp sgt i32 %4, %7207
  %7209 = or i1 %7205, %7208
  br i1 %7209, label %"produce blur_x504", label %"for blur_y.s0.x.x.rebased498.consume blur_x505_crit_edge"

"for blur_y.s0.x.x.rebased498.consume blur_x505_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased498"
  %.pre3362 = shl nsw i64 %7204, 5
  br label %"consume blur_x505"

"end for blur_y.s0.x.x.rebased499":               ; preds = %"consume blur_x505", %after_bb493
  br i1 %101, label %"for blur_y.s0.x.x.rebased506.preheader", label %"end for blur_y.s0.x.x.rebased507", !prof !386

"for blur_y.s0.x.x.rebased506.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased499"
  %7210 = sext i32 %t1650 to i64
  %7211 = zext i32 %.pre-phi3313 to i64
  %7212 = mul nsw i64 %7211, %108
  %7213 = sub nsw i64 %7212, %95
  %7214 = zext i32 %.pre-phi3317 to i64
  %7215 = mul nsw i64 %7214, %108
  %7216 = sub nsw i64 %7215, %95
  %7217 = zext i32 %.pre-phi to i64
  %7218 = mul nsw i64 %7217, %108
  %7219 = sub nsw i64 %7218, %95
  %7220 = sext i32 %a26 to i64
  %7221 = add nsw i64 %7220, 20
  %7222 = mul nsw i64 %7221, %109
  %7223 = add nsw i64 %7222, %112
  br label %"for blur_y.s0.x.x.rebased506"

"produce blur_x504":                              ; preds = %"for blur_y.s0.x.x.rebased498"
  %t992 = add nsw i32 %7207, %t1969
  %7224 = sext i32 %t992 to i64
  %7225 = getelementptr inbounds i16, i16* %read_input, i64 %7224
  %7226 = getelementptr inbounds i16, i16* %7225, i64 1
  %7227 = bitcast i16* %7226 to <16 x i16>*
  %7228 = load <16 x i16>, <16 x i16>* %7227, align 2, !tbaa !396
  %7229 = getelementptr inbounds i16, i16* %7225, i64 17
  %7230 = bitcast i16* %7229 to <16 x i16>*
  %7231 = load <16 x i16>, <16 x i16>* %7230, align 2, !tbaa !396
  %7232 = getelementptr inbounds i16, i16* %7225, i64 2
  %7233 = bitcast i16* %7232 to <16 x i16>*
  %7234 = load <16 x i16>, <16 x i16>* %7233, align 2, !tbaa !396
  %7235 = getelementptr inbounds i16, i16* %7225, i64 18
  %7236 = bitcast i16* %7235 to <16 x i16>*
  %7237 = load <16 x i16>, <16 x i16>* %7236, align 2, !tbaa !396
  %7238 = bitcast i16* %7225 to <16 x i16>*
  %7239 = load <16 x i16>, <16 x i16>* %7238, align 2, !tbaa !396
  %7240 = getelementptr inbounds i16, i16* %7225, i64 16
  %7241 = bitcast i16* %7240 to <16 x i16>*
  %7242 = load <16 x i16>, <16 x i16>* %7241, align 2, !tbaa !396
  %7243 = add <16 x i16> %7234, %7228
  %7244 = add <16 x i16> %7243, %7239
  %7245 = add <16 x i16> %7237, %7231
  %7246 = add <16 x i16> %7245, %7242
  %7247 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7244, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7248 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7246, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7249 = shufflevector <16 x i16> %7247, <16 x i16> %7248, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7250 = lshr <32 x i16> %7249, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7251 = shufflevector <32 x i16> %7250, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7252 = shl nsw i64 %7204, 5
  %7253 = add nsw i64 %7252, %7105
  %7254 = getelementptr inbounds i16, i16* %blur_x, i64 %7253
  %7255 = bitcast i16* %7254 to <16 x i16>*
  store <16 x i16> %7251, <16 x i16>* %7255, align 2, !tbaa !399
  %7256 = shufflevector <32 x i16> %7250, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7257 = getelementptr inbounds i16, i16* %7254, i64 16
  %7258 = bitcast i16* %7257 to <16 x i16>*
  store <16 x i16> %7256, <16 x i16>* %7258, align 2, !tbaa !399
  br label %"consume blur_x505"

"consume blur_x505":                              ; preds = %"for blur_y.s0.x.x.rebased498.consume blur_x505_crit_edge", %"produce blur_x504"
  %.pre-phi3363 = phi i64 [ %.pre3362, %"for blur_y.s0.x.x.rebased498.consume blur_x505_crit_edge" ], [ %7252, %"produce blur_x504" ]
  %7259 = add nsw i64 %7108, %.pre-phi3363
  %7260 = getelementptr inbounds i16, i16* %blur_x, i64 %7259
  %7261 = bitcast i16* %7260 to <16 x i16>*
  %7262 = load <16 x i16>, <16 x i16>* %7261, align 2, !tbaa !399
  %7263 = getelementptr inbounds i16, i16* %7260, i64 16
  %7264 = bitcast i16* %7263 to <16 x i16>*
  %7265 = load <16 x i16>, <16 x i16>* %7264, align 2, !tbaa !399
  %7266 = add nsw i64 %7111, %.pre-phi3363
  %7267 = getelementptr inbounds i16, i16* %blur_x, i64 %7266
  %7268 = bitcast i16* %7267 to <16 x i16>*
  %7269 = load <16 x i16>, <16 x i16>* %7268, align 2, !tbaa !399
  %7270 = getelementptr inbounds i16, i16* %7267, i64 16
  %7271 = bitcast i16* %7270 to <16 x i16>*
  %7272 = load <16 x i16>, <16 x i16>* %7271, align 2, !tbaa !399
  %7273 = add nsw i64 %7114, %.pre-phi3363
  %7274 = getelementptr inbounds i16, i16* %blur_x, i64 %7273
  %7275 = bitcast i16* %7274 to <16 x i16>*
  %7276 = load <16 x i16>, <16 x i16>* %7275, align 2, !tbaa !399
  %7277 = getelementptr inbounds i16, i16* %7274, i64 16
  %7278 = bitcast i16* %7277 to <16 x i16>*
  %7279 = load <16 x i16>, <16 x i16>* %7278, align 2, !tbaa !399
  %7280 = add <16 x i16> %7269, %7262
  %7281 = add <16 x i16> %7280, %7276
  %7282 = add <16 x i16> %7272, %7265
  %7283 = add <16 x i16> %7282, %7279
  %7284 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7281, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7285 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7283, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7286 = shufflevector <16 x i16> %7284, <16 x i16> %7285, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7287 = lshr <32 x i16> %7286, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7288 = shufflevector <32 x i16> %7287, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7289 = add nsw i64 %7118, %.pre-phi3363
  %7290 = getelementptr inbounds i16, i16* %65, i64 %7289
  %7291 = bitcast i16* %7290 to <16 x i16>*
  store <16 x i16> %7288, <16 x i16>* %7291, align 2, !tbaa !401
  %7292 = shufflevector <32 x i16> %7287, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7293 = getelementptr inbounds i16, i16* %7290, i64 16
  %7294 = bitcast i16* %7293 to <16 x i16>*
  store <16 x i16> %7292, <16 x i16>* %7294, align 2, !tbaa !401
  %indvars.iv.next3192 = add nuw nsw i64 %indvars.iv3191, 1
  %.not2605 = icmp eq i64 %indvars.iv.next3192, %180
  br i1 %.not2605, label %"end for blur_y.s0.x.x.rebased499", label %"for blur_y.s0.x.x.rebased498"

"for blur_y.s0.x.x.rebased506":                   ; preds = %"for blur_y.s0.x.x.rebased506.preheader", %"consume blur_x514"
  %blur_y.s0.x.x.rebased508 = phi i32 [ %7373, %"consume blur_x514" ], [ 0, %"for blur_y.s0.x.x.rebased506.preheader" ]
  %7295 = add nsw i32 %blur_y.s0.x.x.rebased508, %t1582
  %a231 = shl nsw i32 %7295, 5
  %7296 = icmp sgt i32 %a14, %a231
  %b237 = select i1 %7296, i32 %a231, i32 %a14
  %7297 = icmp slt i32 %7295, 1
  %7298 = icmp sgt i32 %4, %a231
  %7299 = or i1 %7297, %7298
  br i1 %7299, label %"produce blur_x512", label %"consume blur_x514"

"end for blur_y.s0.x.x.rebased507":               ; preds = %"consume blur_x514", %"end for blur_y.s0.x.x.rebased499"
  br i1 %34, label %"produce blur_x518", label %after_bb515

"produce blur_x512":                              ; preds = %"for blur_y.s0.x.x.rebased506"
  %7300 = icmp slt i32 %b237, %4
  %blur_x.s0.x.v1.base.s513 = select i1 %7300, i32 %b237, i32 %4
  %t997 = add nsw i32 %blur_x.s0.x.v1.base.s513, %t1969
  %7301 = sext i32 %t997 to i64
  %7302 = getelementptr inbounds i16, i16* %read_input, i64 %7301
  %7303 = getelementptr inbounds i16, i16* %7302, i64 1
  %7304 = bitcast i16* %7303 to <16 x i16>*
  %7305 = load <16 x i16>, <16 x i16>* %7304, align 2, !tbaa !396
  %7306 = getelementptr inbounds i16, i16* %7302, i64 17
  %7307 = bitcast i16* %7306 to <16 x i16>*
  %7308 = load <16 x i16>, <16 x i16>* %7307, align 2, !tbaa !396
  %7309 = getelementptr inbounds i16, i16* %7302, i64 2
  %7310 = bitcast i16* %7309 to <16 x i16>*
  %7311 = load <16 x i16>, <16 x i16>* %7310, align 2, !tbaa !396
  %7312 = getelementptr inbounds i16, i16* %7302, i64 18
  %7313 = bitcast i16* %7312 to <16 x i16>*
  %7314 = load <16 x i16>, <16 x i16>* %7313, align 2, !tbaa !396
  %7315 = bitcast i16* %7302 to <16 x i16>*
  %7316 = load <16 x i16>, <16 x i16>* %7315, align 2, !tbaa !396
  %7317 = getelementptr inbounds i16, i16* %7302, i64 16
  %7318 = bitcast i16* %7317 to <16 x i16>*
  %7319 = load <16 x i16>, <16 x i16>* %7318, align 2, !tbaa !396
  %7320 = add <16 x i16> %7311, %7305
  %7321 = add <16 x i16> %7320, %7316
  %7322 = add <16 x i16> %7314, %7308
  %7323 = add <16 x i16> %7322, %7319
  %7324 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7321, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7325 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7323, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7326 = shufflevector <16 x i16> %7324, <16 x i16> %7325, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7327 = lshr <32 x i16> %7326, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7328 = shufflevector <32 x i16> %7327, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7329 = sext i32 %blur_x.s0.x.v1.base.s513 to i64
  %7330 = add nsw i64 %7329, %7210
  %7331 = getelementptr inbounds i16, i16* %blur_x, i64 %7330
  %7332 = bitcast i16* %7331 to <16 x i16>*
  store <16 x i16> %7328, <16 x i16>* %7332, align 2, !tbaa !399
  %7333 = shufflevector <32 x i16> %7327, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7334 = getelementptr inbounds i16, i16* %7331, i64 16
  %7335 = bitcast i16* %7334 to <16 x i16>*
  store <16 x i16> %7333, <16 x i16>* %7335, align 2, !tbaa !399
  br label %"consume blur_x514"

"consume blur_x514":                              ; preds = %"for blur_y.s0.x.x.rebased506", %"produce blur_x512"
  %7336 = sext i32 %b237 to i64
  %7337 = add nsw i64 %7213, %7336
  %7338 = getelementptr inbounds i16, i16* %blur_x, i64 %7337
  %7339 = bitcast i16* %7338 to <16 x i16>*
  %7340 = load <16 x i16>, <16 x i16>* %7339, align 2, !tbaa !399
  %7341 = getelementptr inbounds i16, i16* %7338, i64 16
  %7342 = bitcast i16* %7341 to <16 x i16>*
  %7343 = load <16 x i16>, <16 x i16>* %7342, align 2, !tbaa !399
  %7344 = add nsw i64 %7216, %7336
  %7345 = getelementptr inbounds i16, i16* %blur_x, i64 %7344
  %7346 = bitcast i16* %7345 to <16 x i16>*
  %7347 = load <16 x i16>, <16 x i16>* %7346, align 2, !tbaa !399
  %7348 = getelementptr inbounds i16, i16* %7345, i64 16
  %7349 = bitcast i16* %7348 to <16 x i16>*
  %7350 = load <16 x i16>, <16 x i16>* %7349, align 2, !tbaa !399
  %7351 = add nsw i64 %7219, %7336
  %7352 = getelementptr inbounds i16, i16* %blur_x, i64 %7351
  %7353 = bitcast i16* %7352 to <16 x i16>*
  %7354 = load <16 x i16>, <16 x i16>* %7353, align 2, !tbaa !399
  %7355 = getelementptr inbounds i16, i16* %7352, i64 16
  %7356 = bitcast i16* %7355 to <16 x i16>*
  %7357 = load <16 x i16>, <16 x i16>* %7356, align 2, !tbaa !399
  %7358 = add <16 x i16> %7347, %7340
  %7359 = add <16 x i16> %7358, %7354
  %7360 = add <16 x i16> %7350, %7343
  %7361 = add <16 x i16> %7360, %7357
  %7362 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7359, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7363 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7361, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7364 = shufflevector <16 x i16> %7362, <16 x i16> %7363, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7365 = lshr <32 x i16> %7364, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7366 = shufflevector <32 x i16> %7365, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7367 = add nsw i64 %7223, %7336
  %7368 = getelementptr inbounds i16, i16* %65, i64 %7367
  %7369 = bitcast i16* %7368 to <16 x i16>*
  store <16 x i16> %7366, <16 x i16>* %7369, align 2, !tbaa !401
  %7370 = shufflevector <32 x i16> %7365, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7371 = getelementptr inbounds i16, i16* %7368, i64 16
  %7372 = bitcast i16* %7371 to <16 x i16>*
  store <16 x i16> %7370, <16 x i16>* %7372, align 2, !tbaa !401
  %7373 = add nuw nsw i32 %blur_y.s0.x.x.rebased508, 1
  %.not2604 = icmp eq i32 %7373, %t1639
  br i1 %.not2604, label %"end for blur_y.s0.x.x.rebased507", label %"for blur_y.s0.x.x.rebased506"

after_bb515:                                      ; preds = %"end for blur_y.s0.x.x.rebased507", %"produce blur_x518"
  br i1 %99, label %"for blur_y.s0.x.x.rebased520.preheader", label %"end for blur_y.s0.x.x.rebased521", !prof !386

"for blur_y.s0.x.x.rebased520.preheader":         ; preds = %after_bb515
  %7374 = sext i32 %t1666 to i64
  %7375 = zext i32 %.pre-phi3317 to i64
  %7376 = mul nsw i64 %7375, %108
  %7377 = sub nsw i64 %7376, %95
  %7378 = zext i32 %.pre-phi3323 to i64
  %7379 = mul nsw i64 %7378, %108
  %7380 = sub nsw i64 %7379, %95
  %7381 = zext i32 %.pre-phi3313 to i64
  %7382 = mul nsw i64 %7381, %108
  %7383 = sub nsw i64 %7382, %95
  %7384 = sext i32 %a26 to i64
  %7385 = add nsw i64 %7384, 21
  %7386 = mul nsw i64 %7385, %109
  %7387 = add nsw i64 %7386, %112
  br label %"for blur_y.s0.x.x.rebased520"

"produce blur_x518":                              ; preds = %"end for blur_y.s0.x.x.rebased507"
  %7388 = getelementptr inbounds i16, i16* %read_input, i64 %153
  %7389 = getelementptr inbounds i16, i16* %7388, i64 -31
  %7390 = bitcast i16* %7389 to <16 x i16>*
  %7391 = load <16 x i16>, <16 x i16>* %7390, align 2, !tbaa !396
  %7392 = getelementptr inbounds i16, i16* %7388, i64 -15
  %7393 = bitcast i16* %7392 to <16 x i16>*
  %7394 = load <16 x i16>, <16 x i16>* %7393, align 2, !tbaa !396
  %7395 = getelementptr inbounds i16, i16* %7388, i64 -30
  %7396 = bitcast i16* %7395 to <16 x i16>*
  %7397 = load <16 x i16>, <16 x i16>* %7396, align 2, !tbaa !396
  %7398 = getelementptr inbounds i16, i16* %7388, i64 -14
  %7399 = bitcast i16* %7398 to <16 x i16>*
  %7400 = load <16 x i16>, <16 x i16>* %7399, align 2, !tbaa !396
  %7401 = getelementptr inbounds i16, i16* %7388, i64 -32
  %7402 = bitcast i16* %7401 to <16 x i16>*
  %7403 = load <16 x i16>, <16 x i16>* %7402, align 2, !tbaa !396
  %7404 = getelementptr inbounds i16, i16* %7388, i64 -16
  %7405 = bitcast i16* %7404 to <16 x i16>*
  %7406 = load <16 x i16>, <16 x i16>* %7405, align 2, !tbaa !396
  %7407 = add <16 x i16> %7397, %7391
  %7408 = add <16 x i16> %7407, %7403
  %7409 = add <16 x i16> %7400, %7394
  %7410 = add <16 x i16> %7409, %7406
  %7411 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7408, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7412 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7410, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7413 = shufflevector <16 x i16> %7411, <16 x i16> %7412, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7414 = lshr <32 x i16> %7413, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7415 = shufflevector <32 x i16> %7414, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7416 = zext i32 %.pre-phi3323 to i64
  %7417 = mul nsw i64 %96, %7416
  %7418 = add nsw i64 %98, %7417
  %7419 = getelementptr inbounds i16, i16* %blur_x, i64 %7418
  %7420 = getelementptr inbounds i16, i16* %7419, i64 -32
  %7421 = bitcast i16* %7420 to <16 x i16>*
  store <16 x i16> %7415, <16 x i16>* %7421, align 2, !tbaa !399
  %7422 = shufflevector <32 x i16> %7414, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7423 = getelementptr inbounds i16, i16* %7419, i64 -16
  %7424 = bitcast i16* %7423 to <16 x i16>*
  store <16 x i16> %7422, <16 x i16>* %7424, align 2, !tbaa !399
  %7425 = zext i32 %.pre-phi3317 to i64
  %7426 = mul nsw i64 %7425, %108
  %7427 = add nsw i64 %7426, %93
  %7428 = getelementptr inbounds i16, i16* %blur_x, i64 %7427
  %7429 = getelementptr inbounds i16, i16* %7428, i64 -32
  %7430 = bitcast i16* %7429 to <16 x i16>*
  %7431 = load <16 x i16>, <16 x i16>* %7430, align 2, !tbaa !399
  %7432 = getelementptr inbounds i16, i16* %7428, i64 -16
  %7433 = bitcast i16* %7432 to <16 x i16>*
  %7434 = load <16 x i16>, <16 x i16>* %7433, align 2, !tbaa !399
  %7435 = mul nsw i64 %7416, %108
  %7436 = add nsw i64 %7435, %93
  %7437 = getelementptr inbounds i16, i16* %blur_x, i64 %7436
  %7438 = getelementptr inbounds i16, i16* %7437, i64 -32
  %7439 = bitcast i16* %7438 to <16 x i16>*
  %7440 = load <16 x i16>, <16 x i16>* %7439, align 2, !tbaa !399
  %7441 = getelementptr inbounds i16, i16* %7437, i64 -16
  %7442 = bitcast i16* %7441 to <16 x i16>*
  %7443 = load <16 x i16>, <16 x i16>* %7442, align 2, !tbaa !399
  %7444 = zext i32 %.pre-phi3313 to i64
  %7445 = mul nsw i64 %7444, %108
  %7446 = add nsw i64 %7445, %93
  %7447 = getelementptr inbounds i16, i16* %blur_x, i64 %7446
  %7448 = getelementptr inbounds i16, i16* %7447, i64 -32
  %7449 = bitcast i16* %7448 to <16 x i16>*
  %7450 = load <16 x i16>, <16 x i16>* %7449, align 2, !tbaa !399
  %7451 = getelementptr inbounds i16, i16* %7447, i64 -16
  %7452 = bitcast i16* %7451 to <16 x i16>*
  %7453 = load <16 x i16>, <16 x i16>* %7452, align 2, !tbaa !399
  %7454 = add <16 x i16> %7440, %7431
  %7455 = add <16 x i16> %7454, %7450
  %7456 = add <16 x i16> %7443, %7434
  %7457 = add <16 x i16> %7456, %7453
  %7458 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7455, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7459 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7457, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7460 = shufflevector <16 x i16> %7458, <16 x i16> %7459, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7461 = lshr <32 x i16> %7460, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7462 = shufflevector <32 x i16> %7461, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7463 = sext i32 %a26 to i64
  %7464 = add nsw i64 %7463, 21
  %7465 = mul nsw i64 %7464, %109
  %7466 = add nsw i64 %111, %7465
  %7467 = getelementptr inbounds i16, i16* %65, i64 %7466
  %7468 = getelementptr inbounds i16, i16* %7467, i64 -32
  %7469 = bitcast i16* %7468 to <16 x i16>*
  store <16 x i16> %7462, <16 x i16>* %7469, align 2, !tbaa !401
  %7470 = shufflevector <32 x i16> %7461, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7471 = getelementptr inbounds i16, i16* %7467, i64 -16
  %7472 = bitcast i16* %7471 to <16 x i16>*
  store <16 x i16> %7470, <16 x i16>* %7472, align 2, !tbaa !401
  br label %after_bb515

"for blur_y.s0.x.x.rebased520":                   ; preds = %"for blur_y.s0.x.x.rebased520.preheader", %"consume blur_x527"
  %indvars.iv3194 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased520.preheader" ], [ %indvars.iv.next3195, %"consume blur_x527" ]
  %7473 = add nsw i64 %indvars.iv3194, %100
  %7474 = icmp slt i64 %7473, 1
  %7475 = trunc i64 %7473 to i32
  %7476 = shl nsw i32 %7475, 5
  %7477 = icmp sgt i32 %4, %7476
  %7478 = or i1 %7474, %7477
  br i1 %7478, label %"produce blur_x526", label %"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge"

"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased520"
  %.pre3364 = shl nsw i64 %7473, 5
  br label %"consume blur_x527"

"end for blur_y.s0.x.x.rebased521":               ; preds = %"consume blur_x527", %after_bb515
  br i1 %101, label %"for blur_y.s0.x.x.rebased528.preheader", label %"end for blur_y.s0.x.x.rebased529", !prof !386

"for blur_y.s0.x.x.rebased528.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased521"
  %7479 = sext i32 %t1666 to i64
  %7480 = zext i32 %.pre-phi3317 to i64
  %7481 = mul nsw i64 %7480, %108
  %7482 = sub nsw i64 %7481, %95
  %7483 = zext i32 %.pre-phi3323 to i64
  %7484 = mul nsw i64 %7483, %108
  %7485 = sub nsw i64 %7484, %95
  %7486 = zext i32 %.pre-phi3313 to i64
  %7487 = mul nsw i64 %7486, %108
  %7488 = sub nsw i64 %7487, %95
  %7489 = sext i32 %a26 to i64
  %7490 = add nsw i64 %7489, 21
  %7491 = mul nsw i64 %7490, %109
  %7492 = add nsw i64 %7491, %112
  br label %"for blur_y.s0.x.x.rebased528"

"produce blur_x526":                              ; preds = %"for blur_y.s0.x.x.rebased520"
  %t1008 = add nsw i32 %7476, %t1985
  %7493 = sext i32 %t1008 to i64
  %7494 = getelementptr inbounds i16, i16* %read_input, i64 %7493
  %7495 = getelementptr inbounds i16, i16* %7494, i64 1
  %7496 = bitcast i16* %7495 to <16 x i16>*
  %7497 = load <16 x i16>, <16 x i16>* %7496, align 2, !tbaa !396
  %7498 = getelementptr inbounds i16, i16* %7494, i64 17
  %7499 = bitcast i16* %7498 to <16 x i16>*
  %7500 = load <16 x i16>, <16 x i16>* %7499, align 2, !tbaa !396
  %7501 = getelementptr inbounds i16, i16* %7494, i64 2
  %7502 = bitcast i16* %7501 to <16 x i16>*
  %7503 = load <16 x i16>, <16 x i16>* %7502, align 2, !tbaa !396
  %7504 = getelementptr inbounds i16, i16* %7494, i64 18
  %7505 = bitcast i16* %7504 to <16 x i16>*
  %7506 = load <16 x i16>, <16 x i16>* %7505, align 2, !tbaa !396
  %7507 = bitcast i16* %7494 to <16 x i16>*
  %7508 = load <16 x i16>, <16 x i16>* %7507, align 2, !tbaa !396
  %7509 = getelementptr inbounds i16, i16* %7494, i64 16
  %7510 = bitcast i16* %7509 to <16 x i16>*
  %7511 = load <16 x i16>, <16 x i16>* %7510, align 2, !tbaa !396
  %7512 = add <16 x i16> %7503, %7497
  %7513 = add <16 x i16> %7512, %7508
  %7514 = add <16 x i16> %7506, %7500
  %7515 = add <16 x i16> %7514, %7511
  %7516 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7513, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7517 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7515, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7518 = shufflevector <16 x i16> %7516, <16 x i16> %7517, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7519 = lshr <32 x i16> %7518, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7520 = shufflevector <32 x i16> %7519, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7521 = shl nsw i64 %7473, 5
  %7522 = add nsw i64 %7521, %7374
  %7523 = getelementptr inbounds i16, i16* %blur_x, i64 %7522
  %7524 = bitcast i16* %7523 to <16 x i16>*
  store <16 x i16> %7520, <16 x i16>* %7524, align 2, !tbaa !399
  %7525 = shufflevector <32 x i16> %7519, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7526 = getelementptr inbounds i16, i16* %7523, i64 16
  %7527 = bitcast i16* %7526 to <16 x i16>*
  store <16 x i16> %7525, <16 x i16>* %7527, align 2, !tbaa !399
  br label %"consume blur_x527"

"consume blur_x527":                              ; preds = %"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge", %"produce blur_x526"
  %.pre-phi3365 = phi i64 [ %.pre3364, %"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge" ], [ %7521, %"produce blur_x526" ]
  %7528 = add nsw i64 %7377, %.pre-phi3365
  %7529 = getelementptr inbounds i16, i16* %blur_x, i64 %7528
  %7530 = bitcast i16* %7529 to <16 x i16>*
  %7531 = load <16 x i16>, <16 x i16>* %7530, align 2, !tbaa !399
  %7532 = getelementptr inbounds i16, i16* %7529, i64 16
  %7533 = bitcast i16* %7532 to <16 x i16>*
  %7534 = load <16 x i16>, <16 x i16>* %7533, align 2, !tbaa !399
  %7535 = add nsw i64 %7380, %.pre-phi3365
  %7536 = getelementptr inbounds i16, i16* %blur_x, i64 %7535
  %7537 = bitcast i16* %7536 to <16 x i16>*
  %7538 = load <16 x i16>, <16 x i16>* %7537, align 2, !tbaa !399
  %7539 = getelementptr inbounds i16, i16* %7536, i64 16
  %7540 = bitcast i16* %7539 to <16 x i16>*
  %7541 = load <16 x i16>, <16 x i16>* %7540, align 2, !tbaa !399
  %7542 = add nsw i64 %7383, %.pre-phi3365
  %7543 = getelementptr inbounds i16, i16* %blur_x, i64 %7542
  %7544 = bitcast i16* %7543 to <16 x i16>*
  %7545 = load <16 x i16>, <16 x i16>* %7544, align 2, !tbaa !399
  %7546 = getelementptr inbounds i16, i16* %7543, i64 16
  %7547 = bitcast i16* %7546 to <16 x i16>*
  %7548 = load <16 x i16>, <16 x i16>* %7547, align 2, !tbaa !399
  %7549 = add <16 x i16> %7538, %7531
  %7550 = add <16 x i16> %7549, %7545
  %7551 = add <16 x i16> %7541, %7534
  %7552 = add <16 x i16> %7551, %7548
  %7553 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7550, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7554 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7552, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7555 = shufflevector <16 x i16> %7553, <16 x i16> %7554, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7556 = lshr <32 x i16> %7555, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7557 = shufflevector <32 x i16> %7556, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7558 = add nsw i64 %7387, %.pre-phi3365
  %7559 = getelementptr inbounds i16, i16* %65, i64 %7558
  %7560 = bitcast i16* %7559 to <16 x i16>*
  store <16 x i16> %7557, <16 x i16>* %7560, align 2, !tbaa !401
  %7561 = shufflevector <32 x i16> %7556, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7562 = getelementptr inbounds i16, i16* %7559, i64 16
  %7563 = bitcast i16* %7562 to <16 x i16>*
  store <16 x i16> %7561, <16 x i16>* %7563, align 2, !tbaa !401
  %indvars.iv.next3195 = add nuw nsw i64 %indvars.iv3194, 1
  %.not2603 = icmp eq i64 %indvars.iv.next3195, %180
  br i1 %.not2603, label %"end for blur_y.s0.x.x.rebased521", label %"for blur_y.s0.x.x.rebased520"

"for blur_y.s0.x.x.rebased528":                   ; preds = %"for blur_y.s0.x.x.rebased528.preheader", %"consume blur_x536"
  %blur_y.s0.x.x.rebased530 = phi i32 [ %7642, %"consume blur_x536" ], [ 0, %"for blur_y.s0.x.x.rebased528.preheader" ]
  %7564 = add nsw i32 %blur_y.s0.x.x.rebased530, %t1582
  %a238 = shl nsw i32 %7564, 5
  %7565 = icmp sgt i32 %a14, %a238
  %b244 = select i1 %7565, i32 %a238, i32 %a14
  %7566 = icmp slt i32 %7564, 1
  %7567 = icmp sgt i32 %4, %a238
  %7568 = or i1 %7566, %7567
  br i1 %7568, label %"produce blur_x534", label %"consume blur_x536"

"end for blur_y.s0.x.x.rebased529":               ; preds = %"consume blur_x536", %"end for blur_y.s0.x.x.rebased521"
  br i1 %34, label %"produce blur_x540", label %after_bb537

"produce blur_x534":                              ; preds = %"for blur_y.s0.x.x.rebased528"
  %7569 = icmp slt i32 %b244, %4
  %blur_x.s0.x.v1.base.s535 = select i1 %7569, i32 %b244, i32 %4
  %t1013 = add nsw i32 %blur_x.s0.x.v1.base.s535, %t1985
  %7570 = sext i32 %t1013 to i64
  %7571 = getelementptr inbounds i16, i16* %read_input, i64 %7570
  %7572 = getelementptr inbounds i16, i16* %7571, i64 1
  %7573 = bitcast i16* %7572 to <16 x i16>*
  %7574 = load <16 x i16>, <16 x i16>* %7573, align 2, !tbaa !396
  %7575 = getelementptr inbounds i16, i16* %7571, i64 17
  %7576 = bitcast i16* %7575 to <16 x i16>*
  %7577 = load <16 x i16>, <16 x i16>* %7576, align 2, !tbaa !396
  %7578 = getelementptr inbounds i16, i16* %7571, i64 2
  %7579 = bitcast i16* %7578 to <16 x i16>*
  %7580 = load <16 x i16>, <16 x i16>* %7579, align 2, !tbaa !396
  %7581 = getelementptr inbounds i16, i16* %7571, i64 18
  %7582 = bitcast i16* %7581 to <16 x i16>*
  %7583 = load <16 x i16>, <16 x i16>* %7582, align 2, !tbaa !396
  %7584 = bitcast i16* %7571 to <16 x i16>*
  %7585 = load <16 x i16>, <16 x i16>* %7584, align 2, !tbaa !396
  %7586 = getelementptr inbounds i16, i16* %7571, i64 16
  %7587 = bitcast i16* %7586 to <16 x i16>*
  %7588 = load <16 x i16>, <16 x i16>* %7587, align 2, !tbaa !396
  %7589 = add <16 x i16> %7580, %7574
  %7590 = add <16 x i16> %7589, %7585
  %7591 = add <16 x i16> %7583, %7577
  %7592 = add <16 x i16> %7591, %7588
  %7593 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7590, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7594 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7592, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7595 = shufflevector <16 x i16> %7593, <16 x i16> %7594, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7596 = lshr <32 x i16> %7595, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7597 = shufflevector <32 x i16> %7596, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7598 = sext i32 %blur_x.s0.x.v1.base.s535 to i64
  %7599 = add nsw i64 %7598, %7479
  %7600 = getelementptr inbounds i16, i16* %blur_x, i64 %7599
  %7601 = bitcast i16* %7600 to <16 x i16>*
  store <16 x i16> %7597, <16 x i16>* %7601, align 2, !tbaa !399
  %7602 = shufflevector <32 x i16> %7596, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7603 = getelementptr inbounds i16, i16* %7600, i64 16
  %7604 = bitcast i16* %7603 to <16 x i16>*
  store <16 x i16> %7602, <16 x i16>* %7604, align 2, !tbaa !399
  br label %"consume blur_x536"

"consume blur_x536":                              ; preds = %"for blur_y.s0.x.x.rebased528", %"produce blur_x534"
  %7605 = sext i32 %b244 to i64
  %7606 = add nsw i64 %7482, %7605
  %7607 = getelementptr inbounds i16, i16* %blur_x, i64 %7606
  %7608 = bitcast i16* %7607 to <16 x i16>*
  %7609 = load <16 x i16>, <16 x i16>* %7608, align 2, !tbaa !399
  %7610 = getelementptr inbounds i16, i16* %7607, i64 16
  %7611 = bitcast i16* %7610 to <16 x i16>*
  %7612 = load <16 x i16>, <16 x i16>* %7611, align 2, !tbaa !399
  %7613 = add nsw i64 %7485, %7605
  %7614 = getelementptr inbounds i16, i16* %blur_x, i64 %7613
  %7615 = bitcast i16* %7614 to <16 x i16>*
  %7616 = load <16 x i16>, <16 x i16>* %7615, align 2, !tbaa !399
  %7617 = getelementptr inbounds i16, i16* %7614, i64 16
  %7618 = bitcast i16* %7617 to <16 x i16>*
  %7619 = load <16 x i16>, <16 x i16>* %7618, align 2, !tbaa !399
  %7620 = add nsw i64 %7488, %7605
  %7621 = getelementptr inbounds i16, i16* %blur_x, i64 %7620
  %7622 = bitcast i16* %7621 to <16 x i16>*
  %7623 = load <16 x i16>, <16 x i16>* %7622, align 2, !tbaa !399
  %7624 = getelementptr inbounds i16, i16* %7621, i64 16
  %7625 = bitcast i16* %7624 to <16 x i16>*
  %7626 = load <16 x i16>, <16 x i16>* %7625, align 2, !tbaa !399
  %7627 = add <16 x i16> %7616, %7609
  %7628 = add <16 x i16> %7627, %7623
  %7629 = add <16 x i16> %7619, %7612
  %7630 = add <16 x i16> %7629, %7626
  %7631 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7628, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7632 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7630, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7633 = shufflevector <16 x i16> %7631, <16 x i16> %7632, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7634 = lshr <32 x i16> %7633, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7635 = shufflevector <32 x i16> %7634, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7636 = add nsw i64 %7492, %7605
  %7637 = getelementptr inbounds i16, i16* %65, i64 %7636
  %7638 = bitcast i16* %7637 to <16 x i16>*
  store <16 x i16> %7635, <16 x i16>* %7638, align 2, !tbaa !401
  %7639 = shufflevector <32 x i16> %7634, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7640 = getelementptr inbounds i16, i16* %7637, i64 16
  %7641 = bitcast i16* %7640 to <16 x i16>*
  store <16 x i16> %7639, <16 x i16>* %7641, align 2, !tbaa !401
  %7642 = add nuw nsw i32 %blur_y.s0.x.x.rebased530, 1
  %.not2602 = icmp eq i32 %7642, %t1639
  br i1 %.not2602, label %"end for blur_y.s0.x.x.rebased529", label %"for blur_y.s0.x.x.rebased528"

after_bb537:                                      ; preds = %"end for blur_y.s0.x.x.rebased529", %"produce blur_x540"
  br i1 %99, label %"for blur_y.s0.x.x.rebased542.preheader", label %"end for blur_y.s0.x.x.rebased543", !prof !386

"for blur_y.s0.x.x.rebased542.preheader":         ; preds = %after_bb537
  %7643 = sext i32 %t1638 to i64
  %7644 = zext i32 %.pre-phi3323 to i64
  %7645 = mul nsw i64 %7644, %108
  %7646 = sub nsw i64 %7645, %95
  %7647 = zext i32 %.pre-phi to i64
  %7648 = mul nsw i64 %7647, %108
  %7649 = sub nsw i64 %7648, %95
  %7650 = zext i32 %.pre-phi3317 to i64
  %7651 = mul nsw i64 %7650, %108
  %7652 = sub nsw i64 %7651, %95
  %7653 = sext i32 %a26 to i64
  %7654 = add nsw i64 %7653, 22
  %7655 = mul nsw i64 %7654, %109
  %7656 = add nsw i64 %7655, %112
  br label %"for blur_y.s0.x.x.rebased542"

"produce blur_x540":                              ; preds = %"end for blur_y.s0.x.x.rebased529"
  %7657 = getelementptr inbounds i16, i16* %read_input, i64 %155
  %7658 = getelementptr inbounds i16, i16* %7657, i64 -31
  %7659 = bitcast i16* %7658 to <16 x i16>*
  %7660 = load <16 x i16>, <16 x i16>* %7659, align 2, !tbaa !396
  %7661 = getelementptr inbounds i16, i16* %7657, i64 -15
  %7662 = bitcast i16* %7661 to <16 x i16>*
  %7663 = load <16 x i16>, <16 x i16>* %7662, align 2, !tbaa !396
  %7664 = getelementptr inbounds i16, i16* %7657, i64 -30
  %7665 = bitcast i16* %7664 to <16 x i16>*
  %7666 = load <16 x i16>, <16 x i16>* %7665, align 2, !tbaa !396
  %7667 = getelementptr inbounds i16, i16* %7657, i64 -14
  %7668 = bitcast i16* %7667 to <16 x i16>*
  %7669 = load <16 x i16>, <16 x i16>* %7668, align 2, !tbaa !396
  %7670 = getelementptr inbounds i16, i16* %7657, i64 -32
  %7671 = bitcast i16* %7670 to <16 x i16>*
  %7672 = load <16 x i16>, <16 x i16>* %7671, align 2, !tbaa !396
  %7673 = getelementptr inbounds i16, i16* %7657, i64 -16
  %7674 = bitcast i16* %7673 to <16 x i16>*
  %7675 = load <16 x i16>, <16 x i16>* %7674, align 2, !tbaa !396
  %7676 = add <16 x i16> %7666, %7660
  %7677 = add <16 x i16> %7676, %7672
  %7678 = add <16 x i16> %7669, %7663
  %7679 = add <16 x i16> %7678, %7675
  %7680 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7677, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7681 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7679, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7682 = shufflevector <16 x i16> %7680, <16 x i16> %7681, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7683 = lshr <32 x i16> %7682, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7684 = shufflevector <32 x i16> %7683, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7685 = zext i32 %.pre-phi to i64
  %7686 = mul nsw i64 %96, %7685
  %7687 = add nsw i64 %98, %7686
  %7688 = getelementptr inbounds i16, i16* %blur_x, i64 %7687
  %7689 = getelementptr inbounds i16, i16* %7688, i64 -32
  %7690 = bitcast i16* %7689 to <16 x i16>*
  store <16 x i16> %7684, <16 x i16>* %7690, align 2, !tbaa !399
  %7691 = shufflevector <32 x i16> %7683, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7692 = getelementptr inbounds i16, i16* %7688, i64 -16
  %7693 = bitcast i16* %7692 to <16 x i16>*
  store <16 x i16> %7691, <16 x i16>* %7693, align 2, !tbaa !399
  %7694 = zext i32 %.pre-phi3323 to i64
  %7695 = mul nsw i64 %7694, %108
  %7696 = add nsw i64 %7695, %93
  %7697 = getelementptr inbounds i16, i16* %blur_x, i64 %7696
  %7698 = getelementptr inbounds i16, i16* %7697, i64 -32
  %7699 = bitcast i16* %7698 to <16 x i16>*
  %7700 = load <16 x i16>, <16 x i16>* %7699, align 2, !tbaa !399
  %7701 = getelementptr inbounds i16, i16* %7697, i64 -16
  %7702 = bitcast i16* %7701 to <16 x i16>*
  %7703 = load <16 x i16>, <16 x i16>* %7702, align 2, !tbaa !399
  %7704 = mul nsw i64 %7685, %108
  %7705 = add nsw i64 %7704, %93
  %7706 = getelementptr inbounds i16, i16* %blur_x, i64 %7705
  %7707 = getelementptr inbounds i16, i16* %7706, i64 -32
  %7708 = bitcast i16* %7707 to <16 x i16>*
  %7709 = load <16 x i16>, <16 x i16>* %7708, align 2, !tbaa !399
  %7710 = getelementptr inbounds i16, i16* %7706, i64 -16
  %7711 = bitcast i16* %7710 to <16 x i16>*
  %7712 = load <16 x i16>, <16 x i16>* %7711, align 2, !tbaa !399
  %7713 = zext i32 %.pre-phi3317 to i64
  %7714 = mul nsw i64 %7713, %108
  %7715 = add nsw i64 %7714, %93
  %7716 = getelementptr inbounds i16, i16* %blur_x, i64 %7715
  %7717 = getelementptr inbounds i16, i16* %7716, i64 -32
  %7718 = bitcast i16* %7717 to <16 x i16>*
  %7719 = load <16 x i16>, <16 x i16>* %7718, align 2, !tbaa !399
  %7720 = getelementptr inbounds i16, i16* %7716, i64 -16
  %7721 = bitcast i16* %7720 to <16 x i16>*
  %7722 = load <16 x i16>, <16 x i16>* %7721, align 2, !tbaa !399
  %7723 = add <16 x i16> %7709, %7700
  %7724 = add <16 x i16> %7723, %7719
  %7725 = add <16 x i16> %7712, %7703
  %7726 = add <16 x i16> %7725, %7722
  %7727 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7724, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7728 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7726, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7729 = shufflevector <16 x i16> %7727, <16 x i16> %7728, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7730 = lshr <32 x i16> %7729, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7731 = shufflevector <32 x i16> %7730, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7732 = sext i32 %a26 to i64
  %7733 = add nsw i64 %7732, 22
  %7734 = mul nsw i64 %7733, %109
  %7735 = add nsw i64 %111, %7734
  %7736 = getelementptr inbounds i16, i16* %65, i64 %7735
  %7737 = getelementptr inbounds i16, i16* %7736, i64 -32
  %7738 = bitcast i16* %7737 to <16 x i16>*
  store <16 x i16> %7731, <16 x i16>* %7738, align 2, !tbaa !401
  %7739 = shufflevector <32 x i16> %7730, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7740 = getelementptr inbounds i16, i16* %7736, i64 -16
  %7741 = bitcast i16* %7740 to <16 x i16>*
  store <16 x i16> %7739, <16 x i16>* %7741, align 2, !tbaa !401
  br label %after_bb537

"for blur_y.s0.x.x.rebased542":                   ; preds = %"for blur_y.s0.x.x.rebased542.preheader", %"consume blur_x549"
  %indvars.iv3197 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased542.preheader" ], [ %indvars.iv.next3198, %"consume blur_x549" ]
  %7742 = add nsw i64 %indvars.iv3197, %100
  %7743 = icmp slt i64 %7742, 1
  %7744 = trunc i64 %7742 to i32
  %7745 = shl nsw i32 %7744, 5
  %7746 = icmp sgt i32 %4, %7745
  %7747 = or i1 %7743, %7746
  br i1 %7747, label %"produce blur_x548", label %"for blur_y.s0.x.x.rebased542.consume blur_x549_crit_edge"

"for blur_y.s0.x.x.rebased542.consume blur_x549_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased542"
  %.pre3366 = shl nsw i64 %7742, 5
  br label %"consume blur_x549"

"end for blur_y.s0.x.x.rebased543":               ; preds = %"consume blur_x549", %after_bb537
  br i1 %101, label %"for blur_y.s0.x.x.rebased550.preheader", label %"end for blur_y.s0.x.x.rebased551", !prof !386

"for blur_y.s0.x.x.rebased550.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased543"
  %7748 = sext i32 %t1638 to i64
  %7749 = zext i32 %.pre-phi3323 to i64
  %7750 = mul nsw i64 %7749, %108
  %7751 = sub nsw i64 %7750, %95
  %7752 = zext i32 %.pre-phi to i64
  %7753 = mul nsw i64 %7752, %108
  %7754 = sub nsw i64 %7753, %95
  %7755 = zext i32 %.pre-phi3317 to i64
  %7756 = mul nsw i64 %7755, %108
  %7757 = sub nsw i64 %7756, %95
  %7758 = sext i32 %a26 to i64
  %7759 = add nsw i64 %7758, 22
  %7760 = mul nsw i64 %7759, %109
  %7761 = add nsw i64 %7760, %112
  br label %"for blur_y.s0.x.x.rebased550"

"produce blur_x548":                              ; preds = %"for blur_y.s0.x.x.rebased542"
  %t1024 = add nsw i32 %7745, %t2001
  %7762 = sext i32 %t1024 to i64
  %7763 = getelementptr inbounds i16, i16* %read_input, i64 %7762
  %7764 = getelementptr inbounds i16, i16* %7763, i64 1
  %7765 = bitcast i16* %7764 to <16 x i16>*
  %7766 = load <16 x i16>, <16 x i16>* %7765, align 2, !tbaa !396
  %7767 = getelementptr inbounds i16, i16* %7763, i64 17
  %7768 = bitcast i16* %7767 to <16 x i16>*
  %7769 = load <16 x i16>, <16 x i16>* %7768, align 2, !tbaa !396
  %7770 = getelementptr inbounds i16, i16* %7763, i64 2
  %7771 = bitcast i16* %7770 to <16 x i16>*
  %7772 = load <16 x i16>, <16 x i16>* %7771, align 2, !tbaa !396
  %7773 = getelementptr inbounds i16, i16* %7763, i64 18
  %7774 = bitcast i16* %7773 to <16 x i16>*
  %7775 = load <16 x i16>, <16 x i16>* %7774, align 2, !tbaa !396
  %7776 = bitcast i16* %7763 to <16 x i16>*
  %7777 = load <16 x i16>, <16 x i16>* %7776, align 2, !tbaa !396
  %7778 = getelementptr inbounds i16, i16* %7763, i64 16
  %7779 = bitcast i16* %7778 to <16 x i16>*
  %7780 = load <16 x i16>, <16 x i16>* %7779, align 2, !tbaa !396
  %7781 = add <16 x i16> %7772, %7766
  %7782 = add <16 x i16> %7781, %7777
  %7783 = add <16 x i16> %7775, %7769
  %7784 = add <16 x i16> %7783, %7780
  %7785 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7782, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7786 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7784, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7787 = shufflevector <16 x i16> %7785, <16 x i16> %7786, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7788 = lshr <32 x i16> %7787, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7789 = shufflevector <32 x i16> %7788, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7790 = shl nsw i64 %7742, 5
  %7791 = add nsw i64 %7790, %7643
  %7792 = getelementptr inbounds i16, i16* %blur_x, i64 %7791
  %7793 = bitcast i16* %7792 to <16 x i16>*
  store <16 x i16> %7789, <16 x i16>* %7793, align 2, !tbaa !399
  %7794 = shufflevector <32 x i16> %7788, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7795 = getelementptr inbounds i16, i16* %7792, i64 16
  %7796 = bitcast i16* %7795 to <16 x i16>*
  store <16 x i16> %7794, <16 x i16>* %7796, align 2, !tbaa !399
  br label %"consume blur_x549"

"consume blur_x549":                              ; preds = %"for blur_y.s0.x.x.rebased542.consume blur_x549_crit_edge", %"produce blur_x548"
  %.pre-phi3367 = phi i64 [ %.pre3366, %"for blur_y.s0.x.x.rebased542.consume blur_x549_crit_edge" ], [ %7790, %"produce blur_x548" ]
  %7797 = add nsw i64 %7646, %.pre-phi3367
  %7798 = getelementptr inbounds i16, i16* %blur_x, i64 %7797
  %7799 = bitcast i16* %7798 to <16 x i16>*
  %7800 = load <16 x i16>, <16 x i16>* %7799, align 2, !tbaa !399
  %7801 = getelementptr inbounds i16, i16* %7798, i64 16
  %7802 = bitcast i16* %7801 to <16 x i16>*
  %7803 = load <16 x i16>, <16 x i16>* %7802, align 2, !tbaa !399
  %7804 = add nsw i64 %7649, %.pre-phi3367
  %7805 = getelementptr inbounds i16, i16* %blur_x, i64 %7804
  %7806 = bitcast i16* %7805 to <16 x i16>*
  %7807 = load <16 x i16>, <16 x i16>* %7806, align 2, !tbaa !399
  %7808 = getelementptr inbounds i16, i16* %7805, i64 16
  %7809 = bitcast i16* %7808 to <16 x i16>*
  %7810 = load <16 x i16>, <16 x i16>* %7809, align 2, !tbaa !399
  %7811 = add nsw i64 %7652, %.pre-phi3367
  %7812 = getelementptr inbounds i16, i16* %blur_x, i64 %7811
  %7813 = bitcast i16* %7812 to <16 x i16>*
  %7814 = load <16 x i16>, <16 x i16>* %7813, align 2, !tbaa !399
  %7815 = getelementptr inbounds i16, i16* %7812, i64 16
  %7816 = bitcast i16* %7815 to <16 x i16>*
  %7817 = load <16 x i16>, <16 x i16>* %7816, align 2, !tbaa !399
  %7818 = add <16 x i16> %7807, %7800
  %7819 = add <16 x i16> %7818, %7814
  %7820 = add <16 x i16> %7810, %7803
  %7821 = add <16 x i16> %7820, %7817
  %7822 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7819, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7823 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7821, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7824 = shufflevector <16 x i16> %7822, <16 x i16> %7823, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7825 = lshr <32 x i16> %7824, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7826 = shufflevector <32 x i16> %7825, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7827 = add nsw i64 %7656, %.pre-phi3367
  %7828 = getelementptr inbounds i16, i16* %65, i64 %7827
  %7829 = bitcast i16* %7828 to <16 x i16>*
  store <16 x i16> %7826, <16 x i16>* %7829, align 2, !tbaa !401
  %7830 = shufflevector <32 x i16> %7825, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7831 = getelementptr inbounds i16, i16* %7828, i64 16
  %7832 = bitcast i16* %7831 to <16 x i16>*
  store <16 x i16> %7830, <16 x i16>* %7832, align 2, !tbaa !401
  %indvars.iv.next3198 = add nuw nsw i64 %indvars.iv3197, 1
  %.not2601 = icmp eq i64 %indvars.iv.next3198, %180
  br i1 %.not2601, label %"end for blur_y.s0.x.x.rebased543", label %"for blur_y.s0.x.x.rebased542"

"for blur_y.s0.x.x.rebased550":                   ; preds = %"for blur_y.s0.x.x.rebased550.preheader", %"consume blur_x558"
  %blur_y.s0.x.x.rebased552 = phi i32 [ %7911, %"consume blur_x558" ], [ 0, %"for blur_y.s0.x.x.rebased550.preheader" ]
  %7833 = add nsw i32 %blur_y.s0.x.x.rebased552, %t1582
  %a245 = shl nsw i32 %7833, 5
  %7834 = icmp sgt i32 %a14, %a245
  %b251 = select i1 %7834, i32 %a245, i32 %a14
  %7835 = icmp slt i32 %7833, 1
  %7836 = icmp sgt i32 %4, %a245
  %7837 = or i1 %7835, %7836
  br i1 %7837, label %"produce blur_x556", label %"consume blur_x558"

"end for blur_y.s0.x.x.rebased551":               ; preds = %"consume blur_x558", %"end for blur_y.s0.x.x.rebased543"
  br i1 %34, label %"produce blur_x562", label %after_bb559

"produce blur_x556":                              ; preds = %"for blur_y.s0.x.x.rebased550"
  %7838 = icmp slt i32 %b251, %4
  %blur_x.s0.x.v1.base.s557 = select i1 %7838, i32 %b251, i32 %4
  %t1029 = add nsw i32 %blur_x.s0.x.v1.base.s557, %t2001
  %7839 = sext i32 %t1029 to i64
  %7840 = getelementptr inbounds i16, i16* %read_input, i64 %7839
  %7841 = getelementptr inbounds i16, i16* %7840, i64 1
  %7842 = bitcast i16* %7841 to <16 x i16>*
  %7843 = load <16 x i16>, <16 x i16>* %7842, align 2, !tbaa !396
  %7844 = getelementptr inbounds i16, i16* %7840, i64 17
  %7845 = bitcast i16* %7844 to <16 x i16>*
  %7846 = load <16 x i16>, <16 x i16>* %7845, align 2, !tbaa !396
  %7847 = getelementptr inbounds i16, i16* %7840, i64 2
  %7848 = bitcast i16* %7847 to <16 x i16>*
  %7849 = load <16 x i16>, <16 x i16>* %7848, align 2, !tbaa !396
  %7850 = getelementptr inbounds i16, i16* %7840, i64 18
  %7851 = bitcast i16* %7850 to <16 x i16>*
  %7852 = load <16 x i16>, <16 x i16>* %7851, align 2, !tbaa !396
  %7853 = bitcast i16* %7840 to <16 x i16>*
  %7854 = load <16 x i16>, <16 x i16>* %7853, align 2, !tbaa !396
  %7855 = getelementptr inbounds i16, i16* %7840, i64 16
  %7856 = bitcast i16* %7855 to <16 x i16>*
  %7857 = load <16 x i16>, <16 x i16>* %7856, align 2, !tbaa !396
  %7858 = add <16 x i16> %7849, %7843
  %7859 = add <16 x i16> %7858, %7854
  %7860 = add <16 x i16> %7852, %7846
  %7861 = add <16 x i16> %7860, %7857
  %7862 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7859, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7863 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7861, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7864 = shufflevector <16 x i16> %7862, <16 x i16> %7863, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7865 = lshr <32 x i16> %7864, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7866 = shufflevector <32 x i16> %7865, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7867 = sext i32 %blur_x.s0.x.v1.base.s557 to i64
  %7868 = add nsw i64 %7867, %7748
  %7869 = getelementptr inbounds i16, i16* %blur_x, i64 %7868
  %7870 = bitcast i16* %7869 to <16 x i16>*
  store <16 x i16> %7866, <16 x i16>* %7870, align 2, !tbaa !399
  %7871 = shufflevector <32 x i16> %7865, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7872 = getelementptr inbounds i16, i16* %7869, i64 16
  %7873 = bitcast i16* %7872 to <16 x i16>*
  store <16 x i16> %7871, <16 x i16>* %7873, align 2, !tbaa !399
  br label %"consume blur_x558"

"consume blur_x558":                              ; preds = %"for blur_y.s0.x.x.rebased550", %"produce blur_x556"
  %7874 = sext i32 %b251 to i64
  %7875 = add nsw i64 %7751, %7874
  %7876 = getelementptr inbounds i16, i16* %blur_x, i64 %7875
  %7877 = bitcast i16* %7876 to <16 x i16>*
  %7878 = load <16 x i16>, <16 x i16>* %7877, align 2, !tbaa !399
  %7879 = getelementptr inbounds i16, i16* %7876, i64 16
  %7880 = bitcast i16* %7879 to <16 x i16>*
  %7881 = load <16 x i16>, <16 x i16>* %7880, align 2, !tbaa !399
  %7882 = add nsw i64 %7754, %7874
  %7883 = getelementptr inbounds i16, i16* %blur_x, i64 %7882
  %7884 = bitcast i16* %7883 to <16 x i16>*
  %7885 = load <16 x i16>, <16 x i16>* %7884, align 2, !tbaa !399
  %7886 = getelementptr inbounds i16, i16* %7883, i64 16
  %7887 = bitcast i16* %7886 to <16 x i16>*
  %7888 = load <16 x i16>, <16 x i16>* %7887, align 2, !tbaa !399
  %7889 = add nsw i64 %7757, %7874
  %7890 = getelementptr inbounds i16, i16* %blur_x, i64 %7889
  %7891 = bitcast i16* %7890 to <16 x i16>*
  %7892 = load <16 x i16>, <16 x i16>* %7891, align 2, !tbaa !399
  %7893 = getelementptr inbounds i16, i16* %7890, i64 16
  %7894 = bitcast i16* %7893 to <16 x i16>*
  %7895 = load <16 x i16>, <16 x i16>* %7894, align 2, !tbaa !399
  %7896 = add <16 x i16> %7885, %7878
  %7897 = add <16 x i16> %7896, %7892
  %7898 = add <16 x i16> %7888, %7881
  %7899 = add <16 x i16> %7898, %7895
  %7900 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7897, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7901 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7899, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7902 = shufflevector <16 x i16> %7900, <16 x i16> %7901, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7903 = lshr <32 x i16> %7902, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7904 = shufflevector <32 x i16> %7903, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7905 = add nsw i64 %7761, %7874
  %7906 = getelementptr inbounds i16, i16* %65, i64 %7905
  %7907 = bitcast i16* %7906 to <16 x i16>*
  store <16 x i16> %7904, <16 x i16>* %7907, align 2, !tbaa !401
  %7908 = shufflevector <32 x i16> %7903, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7909 = getelementptr inbounds i16, i16* %7906, i64 16
  %7910 = bitcast i16* %7909 to <16 x i16>*
  store <16 x i16> %7908, <16 x i16>* %7910, align 2, !tbaa !401
  %7911 = add nuw nsw i32 %blur_y.s0.x.x.rebased552, 1
  %.not2600 = icmp eq i32 %7911, %t1639
  br i1 %.not2600, label %"end for blur_y.s0.x.x.rebased551", label %"for blur_y.s0.x.x.rebased550"

after_bb559:                                      ; preds = %"end for blur_y.s0.x.x.rebased551", %"produce blur_x562"
  br i1 %99, label %"for blur_y.s0.x.x.rebased564.preheader", label %"end for blur_y.s0.x.x.rebased565", !prof !386

"for blur_y.s0.x.x.rebased564.preheader":         ; preds = %after_bb559
  %7912 = sext i32 %t1644 to i64
  %7913 = zext i32 %.pre-phi to i64
  %7914 = mul nsw i64 %7913, %108
  %7915 = sub nsw i64 %7914, %95
  %7916 = zext i32 %.pre-phi3313 to i64
  %7917 = mul nsw i64 %7916, %108
  %7918 = sub nsw i64 %7917, %95
  %7919 = zext i32 %.pre-phi3323 to i64
  %7920 = mul nsw i64 %7919, %108
  %7921 = sub nsw i64 %7920, %95
  %7922 = sext i32 %a26 to i64
  %7923 = add nsw i64 %7922, 23
  %7924 = mul nsw i64 %7923, %109
  %7925 = add nsw i64 %7924, %112
  br label %"for blur_y.s0.x.x.rebased564"

"produce blur_x562":                              ; preds = %"end for blur_y.s0.x.x.rebased551"
  %7926 = getelementptr inbounds i16, i16* %read_input, i64 %157
  %7927 = getelementptr inbounds i16, i16* %7926, i64 -31
  %7928 = bitcast i16* %7927 to <16 x i16>*
  %7929 = load <16 x i16>, <16 x i16>* %7928, align 2, !tbaa !396
  %7930 = getelementptr inbounds i16, i16* %7926, i64 -15
  %7931 = bitcast i16* %7930 to <16 x i16>*
  %7932 = load <16 x i16>, <16 x i16>* %7931, align 2, !tbaa !396
  %7933 = getelementptr inbounds i16, i16* %7926, i64 -30
  %7934 = bitcast i16* %7933 to <16 x i16>*
  %7935 = load <16 x i16>, <16 x i16>* %7934, align 2, !tbaa !396
  %7936 = getelementptr inbounds i16, i16* %7926, i64 -14
  %7937 = bitcast i16* %7936 to <16 x i16>*
  %7938 = load <16 x i16>, <16 x i16>* %7937, align 2, !tbaa !396
  %7939 = getelementptr inbounds i16, i16* %7926, i64 -32
  %7940 = bitcast i16* %7939 to <16 x i16>*
  %7941 = load <16 x i16>, <16 x i16>* %7940, align 2, !tbaa !396
  %7942 = getelementptr inbounds i16, i16* %7926, i64 -16
  %7943 = bitcast i16* %7942 to <16 x i16>*
  %7944 = load <16 x i16>, <16 x i16>* %7943, align 2, !tbaa !396
  %7945 = add <16 x i16> %7935, %7929
  %7946 = add <16 x i16> %7945, %7941
  %7947 = add <16 x i16> %7938, %7932
  %7948 = add <16 x i16> %7947, %7944
  %7949 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7946, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7950 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7948, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7951 = shufflevector <16 x i16> %7949, <16 x i16> %7950, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7952 = lshr <32 x i16> %7951, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7953 = shufflevector <32 x i16> %7952, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7954 = zext i32 %.pre-phi3313 to i64
  %7955 = mul nsw i64 %96, %7954
  %7956 = add nsw i64 %98, %7955
  %7957 = getelementptr inbounds i16, i16* %blur_x, i64 %7956
  %7958 = getelementptr inbounds i16, i16* %7957, i64 -32
  %7959 = bitcast i16* %7958 to <16 x i16>*
  store <16 x i16> %7953, <16 x i16>* %7959, align 2, !tbaa !399
  %7960 = shufflevector <32 x i16> %7952, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7961 = getelementptr inbounds i16, i16* %7957, i64 -16
  %7962 = bitcast i16* %7961 to <16 x i16>*
  store <16 x i16> %7960, <16 x i16>* %7962, align 2, !tbaa !399
  %7963 = zext i32 %.pre-phi to i64
  %7964 = mul nsw i64 %7963, %108
  %7965 = add nsw i64 %7964, %93
  %7966 = getelementptr inbounds i16, i16* %blur_x, i64 %7965
  %7967 = getelementptr inbounds i16, i16* %7966, i64 -32
  %7968 = bitcast i16* %7967 to <16 x i16>*
  %7969 = load <16 x i16>, <16 x i16>* %7968, align 2, !tbaa !399
  %7970 = getelementptr inbounds i16, i16* %7966, i64 -16
  %7971 = bitcast i16* %7970 to <16 x i16>*
  %7972 = load <16 x i16>, <16 x i16>* %7971, align 2, !tbaa !399
  %7973 = mul nsw i64 %7954, %108
  %7974 = add nsw i64 %7973, %93
  %7975 = getelementptr inbounds i16, i16* %blur_x, i64 %7974
  %7976 = getelementptr inbounds i16, i16* %7975, i64 -32
  %7977 = bitcast i16* %7976 to <16 x i16>*
  %7978 = load <16 x i16>, <16 x i16>* %7977, align 2, !tbaa !399
  %7979 = getelementptr inbounds i16, i16* %7975, i64 -16
  %7980 = bitcast i16* %7979 to <16 x i16>*
  %7981 = load <16 x i16>, <16 x i16>* %7980, align 2, !tbaa !399
  %7982 = zext i32 %.pre-phi3323 to i64
  %7983 = mul nsw i64 %7982, %108
  %7984 = add nsw i64 %7983, %93
  %7985 = getelementptr inbounds i16, i16* %blur_x, i64 %7984
  %7986 = getelementptr inbounds i16, i16* %7985, i64 -32
  %7987 = bitcast i16* %7986 to <16 x i16>*
  %7988 = load <16 x i16>, <16 x i16>* %7987, align 2, !tbaa !399
  %7989 = getelementptr inbounds i16, i16* %7985, i64 -16
  %7990 = bitcast i16* %7989 to <16 x i16>*
  %7991 = load <16 x i16>, <16 x i16>* %7990, align 2, !tbaa !399
  %7992 = add <16 x i16> %7978, %7969
  %7993 = add <16 x i16> %7992, %7988
  %7994 = add <16 x i16> %7981, %7972
  %7995 = add <16 x i16> %7994, %7991
  %7996 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7993, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7997 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7995, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7998 = shufflevector <16 x i16> %7996, <16 x i16> %7997, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7999 = lshr <32 x i16> %7998, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8000 = shufflevector <32 x i16> %7999, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8001 = sext i32 %a26 to i64
  %8002 = add nsw i64 %8001, 23
  %8003 = mul nsw i64 %8002, %109
  %8004 = add nsw i64 %111, %8003
  %8005 = getelementptr inbounds i16, i16* %65, i64 %8004
  %8006 = getelementptr inbounds i16, i16* %8005, i64 -32
  %8007 = bitcast i16* %8006 to <16 x i16>*
  store <16 x i16> %8000, <16 x i16>* %8007, align 2, !tbaa !401
  %8008 = shufflevector <32 x i16> %7999, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8009 = getelementptr inbounds i16, i16* %8005, i64 -16
  %8010 = bitcast i16* %8009 to <16 x i16>*
  store <16 x i16> %8008, <16 x i16>* %8010, align 2, !tbaa !401
  br label %after_bb559

"for blur_y.s0.x.x.rebased564":                   ; preds = %"for blur_y.s0.x.x.rebased564.preheader", %"consume blur_x571"
  %indvars.iv3200 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased564.preheader" ], [ %indvars.iv.next3201, %"consume blur_x571" ]
  %8011 = add nsw i64 %indvars.iv3200, %100
  %8012 = icmp slt i64 %8011, 1
  %8013 = trunc i64 %8011 to i32
  %8014 = shl nsw i32 %8013, 5
  %8015 = icmp sgt i32 %4, %8014
  %8016 = or i1 %8012, %8015
  br i1 %8016, label %"produce blur_x570", label %"for blur_y.s0.x.x.rebased564.consume blur_x571_crit_edge"

"for blur_y.s0.x.x.rebased564.consume blur_x571_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased564"
  %.pre3368 = shl nsw i64 %8011, 5
  br label %"consume blur_x571"

"end for blur_y.s0.x.x.rebased565":               ; preds = %"consume blur_x571", %after_bb559
  br i1 %101, label %"for blur_y.s0.x.x.rebased572.preheader", label %"end for blur_y.s0.x.x.rebased573", !prof !386

"for blur_y.s0.x.x.rebased572.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased565"
  %8017 = sext i32 %t1644 to i64
  %8018 = zext i32 %.pre-phi to i64
  %8019 = mul nsw i64 %8018, %108
  %8020 = sub nsw i64 %8019, %95
  %8021 = zext i32 %.pre-phi3313 to i64
  %8022 = mul nsw i64 %8021, %108
  %8023 = sub nsw i64 %8022, %95
  %8024 = zext i32 %.pre-phi3323 to i64
  %8025 = mul nsw i64 %8024, %108
  %8026 = sub nsw i64 %8025, %95
  %8027 = sext i32 %a26 to i64
  %8028 = add nsw i64 %8027, 23
  %8029 = mul nsw i64 %8028, %109
  %8030 = add nsw i64 %8029, %112
  br label %"for blur_y.s0.x.x.rebased572"

"produce blur_x570":                              ; preds = %"for blur_y.s0.x.x.rebased564"
  %t1040 = add nsw i32 %8014, %t2017
  %8031 = sext i32 %t1040 to i64
  %8032 = getelementptr inbounds i16, i16* %read_input, i64 %8031
  %8033 = getelementptr inbounds i16, i16* %8032, i64 1
  %8034 = bitcast i16* %8033 to <16 x i16>*
  %8035 = load <16 x i16>, <16 x i16>* %8034, align 2, !tbaa !396
  %8036 = getelementptr inbounds i16, i16* %8032, i64 17
  %8037 = bitcast i16* %8036 to <16 x i16>*
  %8038 = load <16 x i16>, <16 x i16>* %8037, align 2, !tbaa !396
  %8039 = getelementptr inbounds i16, i16* %8032, i64 2
  %8040 = bitcast i16* %8039 to <16 x i16>*
  %8041 = load <16 x i16>, <16 x i16>* %8040, align 2, !tbaa !396
  %8042 = getelementptr inbounds i16, i16* %8032, i64 18
  %8043 = bitcast i16* %8042 to <16 x i16>*
  %8044 = load <16 x i16>, <16 x i16>* %8043, align 2, !tbaa !396
  %8045 = bitcast i16* %8032 to <16 x i16>*
  %8046 = load <16 x i16>, <16 x i16>* %8045, align 2, !tbaa !396
  %8047 = getelementptr inbounds i16, i16* %8032, i64 16
  %8048 = bitcast i16* %8047 to <16 x i16>*
  %8049 = load <16 x i16>, <16 x i16>* %8048, align 2, !tbaa !396
  %8050 = add <16 x i16> %8041, %8035
  %8051 = add <16 x i16> %8050, %8046
  %8052 = add <16 x i16> %8044, %8038
  %8053 = add <16 x i16> %8052, %8049
  %8054 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8051, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8055 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8053, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8056 = shufflevector <16 x i16> %8054, <16 x i16> %8055, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8057 = lshr <32 x i16> %8056, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8058 = shufflevector <32 x i16> %8057, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8059 = shl nsw i64 %8011, 5
  %8060 = add nsw i64 %8059, %7912
  %8061 = getelementptr inbounds i16, i16* %blur_x, i64 %8060
  %8062 = bitcast i16* %8061 to <16 x i16>*
  store <16 x i16> %8058, <16 x i16>* %8062, align 2, !tbaa !399
  %8063 = shufflevector <32 x i16> %8057, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8064 = getelementptr inbounds i16, i16* %8061, i64 16
  %8065 = bitcast i16* %8064 to <16 x i16>*
  store <16 x i16> %8063, <16 x i16>* %8065, align 2, !tbaa !399
  br label %"consume blur_x571"

"consume blur_x571":                              ; preds = %"for blur_y.s0.x.x.rebased564.consume blur_x571_crit_edge", %"produce blur_x570"
  %.pre-phi3369 = phi i64 [ %.pre3368, %"for blur_y.s0.x.x.rebased564.consume blur_x571_crit_edge" ], [ %8059, %"produce blur_x570" ]
  %8066 = add nsw i64 %7915, %.pre-phi3369
  %8067 = getelementptr inbounds i16, i16* %blur_x, i64 %8066
  %8068 = bitcast i16* %8067 to <16 x i16>*
  %8069 = load <16 x i16>, <16 x i16>* %8068, align 2, !tbaa !399
  %8070 = getelementptr inbounds i16, i16* %8067, i64 16
  %8071 = bitcast i16* %8070 to <16 x i16>*
  %8072 = load <16 x i16>, <16 x i16>* %8071, align 2, !tbaa !399
  %8073 = add nsw i64 %7918, %.pre-phi3369
  %8074 = getelementptr inbounds i16, i16* %blur_x, i64 %8073
  %8075 = bitcast i16* %8074 to <16 x i16>*
  %8076 = load <16 x i16>, <16 x i16>* %8075, align 2, !tbaa !399
  %8077 = getelementptr inbounds i16, i16* %8074, i64 16
  %8078 = bitcast i16* %8077 to <16 x i16>*
  %8079 = load <16 x i16>, <16 x i16>* %8078, align 2, !tbaa !399
  %8080 = add nsw i64 %7921, %.pre-phi3369
  %8081 = getelementptr inbounds i16, i16* %blur_x, i64 %8080
  %8082 = bitcast i16* %8081 to <16 x i16>*
  %8083 = load <16 x i16>, <16 x i16>* %8082, align 2, !tbaa !399
  %8084 = getelementptr inbounds i16, i16* %8081, i64 16
  %8085 = bitcast i16* %8084 to <16 x i16>*
  %8086 = load <16 x i16>, <16 x i16>* %8085, align 2, !tbaa !399
  %8087 = add <16 x i16> %8076, %8069
  %8088 = add <16 x i16> %8087, %8083
  %8089 = add <16 x i16> %8079, %8072
  %8090 = add <16 x i16> %8089, %8086
  %8091 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8088, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8092 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8090, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8093 = shufflevector <16 x i16> %8091, <16 x i16> %8092, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8094 = lshr <32 x i16> %8093, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8095 = shufflevector <32 x i16> %8094, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8096 = add nsw i64 %7925, %.pre-phi3369
  %8097 = getelementptr inbounds i16, i16* %65, i64 %8096
  %8098 = bitcast i16* %8097 to <16 x i16>*
  store <16 x i16> %8095, <16 x i16>* %8098, align 2, !tbaa !401
  %8099 = shufflevector <32 x i16> %8094, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8100 = getelementptr inbounds i16, i16* %8097, i64 16
  %8101 = bitcast i16* %8100 to <16 x i16>*
  store <16 x i16> %8099, <16 x i16>* %8101, align 2, !tbaa !401
  %indvars.iv.next3201 = add nuw nsw i64 %indvars.iv3200, 1
  %.not2599 = icmp eq i64 %indvars.iv.next3201, %180
  br i1 %.not2599, label %"end for blur_y.s0.x.x.rebased565", label %"for blur_y.s0.x.x.rebased564"

"for blur_y.s0.x.x.rebased572":                   ; preds = %"for blur_y.s0.x.x.rebased572.preheader", %"consume blur_x580"
  %blur_y.s0.x.x.rebased574 = phi i32 [ %8180, %"consume blur_x580" ], [ 0, %"for blur_y.s0.x.x.rebased572.preheader" ]
  %8102 = add nsw i32 %blur_y.s0.x.x.rebased574, %t1582
  %a252 = shl nsw i32 %8102, 5
  %8103 = icmp sgt i32 %a14, %a252
  %b258 = select i1 %8103, i32 %a252, i32 %a14
  %8104 = icmp slt i32 %8102, 1
  %8105 = icmp sgt i32 %4, %a252
  %8106 = or i1 %8104, %8105
  br i1 %8106, label %"produce blur_x578", label %"consume blur_x580"

"end for blur_y.s0.x.x.rebased573":               ; preds = %"consume blur_x580", %"end for blur_y.s0.x.x.rebased565"
  br i1 %34, label %"produce blur_x584", label %after_bb581

"produce blur_x578":                              ; preds = %"for blur_y.s0.x.x.rebased572"
  %8107 = icmp slt i32 %b258, %4
  %blur_x.s0.x.v1.base.s579 = select i1 %8107, i32 %b258, i32 %4
  %t1045 = add nsw i32 %blur_x.s0.x.v1.base.s579, %t2017
  %8108 = sext i32 %t1045 to i64
  %8109 = getelementptr inbounds i16, i16* %read_input, i64 %8108
  %8110 = getelementptr inbounds i16, i16* %8109, i64 1
  %8111 = bitcast i16* %8110 to <16 x i16>*
  %8112 = load <16 x i16>, <16 x i16>* %8111, align 2, !tbaa !396
  %8113 = getelementptr inbounds i16, i16* %8109, i64 17
  %8114 = bitcast i16* %8113 to <16 x i16>*
  %8115 = load <16 x i16>, <16 x i16>* %8114, align 2, !tbaa !396
  %8116 = getelementptr inbounds i16, i16* %8109, i64 2
  %8117 = bitcast i16* %8116 to <16 x i16>*
  %8118 = load <16 x i16>, <16 x i16>* %8117, align 2, !tbaa !396
  %8119 = getelementptr inbounds i16, i16* %8109, i64 18
  %8120 = bitcast i16* %8119 to <16 x i16>*
  %8121 = load <16 x i16>, <16 x i16>* %8120, align 2, !tbaa !396
  %8122 = bitcast i16* %8109 to <16 x i16>*
  %8123 = load <16 x i16>, <16 x i16>* %8122, align 2, !tbaa !396
  %8124 = getelementptr inbounds i16, i16* %8109, i64 16
  %8125 = bitcast i16* %8124 to <16 x i16>*
  %8126 = load <16 x i16>, <16 x i16>* %8125, align 2, !tbaa !396
  %8127 = add <16 x i16> %8118, %8112
  %8128 = add <16 x i16> %8127, %8123
  %8129 = add <16 x i16> %8121, %8115
  %8130 = add <16 x i16> %8129, %8126
  %8131 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8128, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8132 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8130, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8133 = shufflevector <16 x i16> %8131, <16 x i16> %8132, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8134 = lshr <32 x i16> %8133, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8135 = shufflevector <32 x i16> %8134, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8136 = sext i32 %blur_x.s0.x.v1.base.s579 to i64
  %8137 = add nsw i64 %8136, %8017
  %8138 = getelementptr inbounds i16, i16* %blur_x, i64 %8137
  %8139 = bitcast i16* %8138 to <16 x i16>*
  store <16 x i16> %8135, <16 x i16>* %8139, align 2, !tbaa !399
  %8140 = shufflevector <32 x i16> %8134, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8141 = getelementptr inbounds i16, i16* %8138, i64 16
  %8142 = bitcast i16* %8141 to <16 x i16>*
  store <16 x i16> %8140, <16 x i16>* %8142, align 2, !tbaa !399
  br label %"consume blur_x580"

"consume blur_x580":                              ; preds = %"for blur_y.s0.x.x.rebased572", %"produce blur_x578"
  %8143 = sext i32 %b258 to i64
  %8144 = add nsw i64 %8020, %8143
  %8145 = getelementptr inbounds i16, i16* %blur_x, i64 %8144
  %8146 = bitcast i16* %8145 to <16 x i16>*
  %8147 = load <16 x i16>, <16 x i16>* %8146, align 2, !tbaa !399
  %8148 = getelementptr inbounds i16, i16* %8145, i64 16
  %8149 = bitcast i16* %8148 to <16 x i16>*
  %8150 = load <16 x i16>, <16 x i16>* %8149, align 2, !tbaa !399
  %8151 = add nsw i64 %8023, %8143
  %8152 = getelementptr inbounds i16, i16* %blur_x, i64 %8151
  %8153 = bitcast i16* %8152 to <16 x i16>*
  %8154 = load <16 x i16>, <16 x i16>* %8153, align 2, !tbaa !399
  %8155 = getelementptr inbounds i16, i16* %8152, i64 16
  %8156 = bitcast i16* %8155 to <16 x i16>*
  %8157 = load <16 x i16>, <16 x i16>* %8156, align 2, !tbaa !399
  %8158 = add nsw i64 %8026, %8143
  %8159 = getelementptr inbounds i16, i16* %blur_x, i64 %8158
  %8160 = bitcast i16* %8159 to <16 x i16>*
  %8161 = load <16 x i16>, <16 x i16>* %8160, align 2, !tbaa !399
  %8162 = getelementptr inbounds i16, i16* %8159, i64 16
  %8163 = bitcast i16* %8162 to <16 x i16>*
  %8164 = load <16 x i16>, <16 x i16>* %8163, align 2, !tbaa !399
  %8165 = add <16 x i16> %8154, %8147
  %8166 = add <16 x i16> %8165, %8161
  %8167 = add <16 x i16> %8157, %8150
  %8168 = add <16 x i16> %8167, %8164
  %8169 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8166, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8170 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8168, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8171 = shufflevector <16 x i16> %8169, <16 x i16> %8170, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8172 = lshr <32 x i16> %8171, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8173 = shufflevector <32 x i16> %8172, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8174 = add nsw i64 %8030, %8143
  %8175 = getelementptr inbounds i16, i16* %65, i64 %8174
  %8176 = bitcast i16* %8175 to <16 x i16>*
  store <16 x i16> %8173, <16 x i16>* %8176, align 2, !tbaa !401
  %8177 = shufflevector <32 x i16> %8172, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8178 = getelementptr inbounds i16, i16* %8175, i64 16
  %8179 = bitcast i16* %8178 to <16 x i16>*
  store <16 x i16> %8177, <16 x i16>* %8179, align 2, !tbaa !401
  %8180 = add nuw nsw i32 %blur_y.s0.x.x.rebased574, 1
  %.not2598 = icmp eq i32 %8180, %t1639
  br i1 %.not2598, label %"end for blur_y.s0.x.x.rebased573", label %"for blur_y.s0.x.x.rebased572"

after_bb581:                                      ; preds = %"end for blur_y.s0.x.x.rebased573", %"produce blur_x584"
  br i1 %99, label %"for blur_y.s0.x.x.rebased586.preheader", label %"end for blur_y.s0.x.x.rebased587", !prof !386

"for blur_y.s0.x.x.rebased586.preheader":         ; preds = %after_bb581
  %8181 = sext i32 %t1650 to i64
  %8182 = zext i32 %.pre-phi3313 to i64
  %8183 = mul nsw i64 %8182, %108
  %8184 = sub nsw i64 %8183, %95
  %8185 = zext i32 %.pre-phi3317 to i64
  %8186 = mul nsw i64 %8185, %108
  %8187 = sub nsw i64 %8186, %95
  %8188 = zext i32 %.pre-phi to i64
  %8189 = mul nsw i64 %8188, %108
  %8190 = sub nsw i64 %8189, %95
  %8191 = sext i32 %a26 to i64
  %8192 = add nsw i64 %8191, 24
  %8193 = mul nsw i64 %8192, %109
  %8194 = add nsw i64 %8193, %112
  br label %"for blur_y.s0.x.x.rebased586"

"produce blur_x584":                              ; preds = %"end for blur_y.s0.x.x.rebased573"
  %8195 = getelementptr inbounds i16, i16* %read_input, i64 %159
  %8196 = getelementptr inbounds i16, i16* %8195, i64 -31
  %8197 = bitcast i16* %8196 to <16 x i16>*
  %8198 = load <16 x i16>, <16 x i16>* %8197, align 2, !tbaa !396
  %8199 = getelementptr inbounds i16, i16* %8195, i64 -15
  %8200 = bitcast i16* %8199 to <16 x i16>*
  %8201 = load <16 x i16>, <16 x i16>* %8200, align 2, !tbaa !396
  %8202 = getelementptr inbounds i16, i16* %8195, i64 -30
  %8203 = bitcast i16* %8202 to <16 x i16>*
  %8204 = load <16 x i16>, <16 x i16>* %8203, align 2, !tbaa !396
  %8205 = getelementptr inbounds i16, i16* %8195, i64 -14
  %8206 = bitcast i16* %8205 to <16 x i16>*
  %8207 = load <16 x i16>, <16 x i16>* %8206, align 2, !tbaa !396
  %8208 = getelementptr inbounds i16, i16* %8195, i64 -32
  %8209 = bitcast i16* %8208 to <16 x i16>*
  %8210 = load <16 x i16>, <16 x i16>* %8209, align 2, !tbaa !396
  %8211 = getelementptr inbounds i16, i16* %8195, i64 -16
  %8212 = bitcast i16* %8211 to <16 x i16>*
  %8213 = load <16 x i16>, <16 x i16>* %8212, align 2, !tbaa !396
  %8214 = add <16 x i16> %8204, %8198
  %8215 = add <16 x i16> %8214, %8210
  %8216 = add <16 x i16> %8207, %8201
  %8217 = add <16 x i16> %8216, %8213
  %8218 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8215, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8219 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8217, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8220 = shufflevector <16 x i16> %8218, <16 x i16> %8219, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8221 = lshr <32 x i16> %8220, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8222 = shufflevector <32 x i16> %8221, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8223 = zext i32 %.pre-phi3317 to i64
  %8224 = mul nsw i64 %96, %8223
  %8225 = add nsw i64 %98, %8224
  %8226 = getelementptr inbounds i16, i16* %blur_x, i64 %8225
  %8227 = getelementptr inbounds i16, i16* %8226, i64 -32
  %8228 = bitcast i16* %8227 to <16 x i16>*
  store <16 x i16> %8222, <16 x i16>* %8228, align 2, !tbaa !399
  %8229 = shufflevector <32 x i16> %8221, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8230 = getelementptr inbounds i16, i16* %8226, i64 -16
  %8231 = bitcast i16* %8230 to <16 x i16>*
  store <16 x i16> %8229, <16 x i16>* %8231, align 2, !tbaa !399
  %8232 = zext i32 %.pre-phi3313 to i64
  %8233 = mul nsw i64 %8232, %108
  %8234 = add nsw i64 %8233, %93
  %8235 = getelementptr inbounds i16, i16* %blur_x, i64 %8234
  %8236 = getelementptr inbounds i16, i16* %8235, i64 -32
  %8237 = bitcast i16* %8236 to <16 x i16>*
  %8238 = load <16 x i16>, <16 x i16>* %8237, align 2, !tbaa !399
  %8239 = getelementptr inbounds i16, i16* %8235, i64 -16
  %8240 = bitcast i16* %8239 to <16 x i16>*
  %8241 = load <16 x i16>, <16 x i16>* %8240, align 2, !tbaa !399
  %8242 = mul nsw i64 %8223, %108
  %8243 = add nsw i64 %8242, %93
  %8244 = getelementptr inbounds i16, i16* %blur_x, i64 %8243
  %8245 = getelementptr inbounds i16, i16* %8244, i64 -32
  %8246 = bitcast i16* %8245 to <16 x i16>*
  %8247 = load <16 x i16>, <16 x i16>* %8246, align 2, !tbaa !399
  %8248 = getelementptr inbounds i16, i16* %8244, i64 -16
  %8249 = bitcast i16* %8248 to <16 x i16>*
  %8250 = load <16 x i16>, <16 x i16>* %8249, align 2, !tbaa !399
  %8251 = zext i32 %.pre-phi to i64
  %8252 = mul nsw i64 %8251, %108
  %8253 = add nsw i64 %8252, %93
  %8254 = getelementptr inbounds i16, i16* %blur_x, i64 %8253
  %8255 = getelementptr inbounds i16, i16* %8254, i64 -32
  %8256 = bitcast i16* %8255 to <16 x i16>*
  %8257 = load <16 x i16>, <16 x i16>* %8256, align 2, !tbaa !399
  %8258 = getelementptr inbounds i16, i16* %8254, i64 -16
  %8259 = bitcast i16* %8258 to <16 x i16>*
  %8260 = load <16 x i16>, <16 x i16>* %8259, align 2, !tbaa !399
  %8261 = add <16 x i16> %8247, %8238
  %8262 = add <16 x i16> %8261, %8257
  %8263 = add <16 x i16> %8250, %8241
  %8264 = add <16 x i16> %8263, %8260
  %8265 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8262, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8266 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8264, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8267 = shufflevector <16 x i16> %8265, <16 x i16> %8266, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8268 = lshr <32 x i16> %8267, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8269 = shufflevector <32 x i16> %8268, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8270 = sext i32 %a26 to i64
  %8271 = add nsw i64 %8270, 24
  %8272 = mul nsw i64 %8271, %109
  %8273 = add nsw i64 %111, %8272
  %8274 = getelementptr inbounds i16, i16* %65, i64 %8273
  %8275 = getelementptr inbounds i16, i16* %8274, i64 -32
  %8276 = bitcast i16* %8275 to <16 x i16>*
  store <16 x i16> %8269, <16 x i16>* %8276, align 2, !tbaa !401
  %8277 = shufflevector <32 x i16> %8268, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8278 = getelementptr inbounds i16, i16* %8274, i64 -16
  %8279 = bitcast i16* %8278 to <16 x i16>*
  store <16 x i16> %8277, <16 x i16>* %8279, align 2, !tbaa !401
  br label %after_bb581

"for blur_y.s0.x.x.rebased586":                   ; preds = %"for blur_y.s0.x.x.rebased586.preheader", %"consume blur_x593"
  %indvars.iv3203 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased586.preheader" ], [ %indvars.iv.next3204, %"consume blur_x593" ]
  %8280 = add nsw i64 %indvars.iv3203, %100
  %8281 = icmp slt i64 %8280, 1
  %8282 = trunc i64 %8280 to i32
  %8283 = shl nsw i32 %8282, 5
  %8284 = icmp sgt i32 %4, %8283
  %8285 = or i1 %8281, %8284
  br i1 %8285, label %"produce blur_x592", label %"for blur_y.s0.x.x.rebased586.consume blur_x593_crit_edge"

"for blur_y.s0.x.x.rebased586.consume blur_x593_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased586"
  %.pre3370 = shl nsw i64 %8280, 5
  br label %"consume blur_x593"

"end for blur_y.s0.x.x.rebased587":               ; preds = %"consume blur_x593", %after_bb581
  br i1 %101, label %"for blur_y.s0.x.x.rebased594.preheader", label %"end for blur_y.s0.x.x.rebased595", !prof !386

"for blur_y.s0.x.x.rebased594.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased587"
  %8286 = sext i32 %t1650 to i64
  %8287 = zext i32 %.pre-phi3313 to i64
  %8288 = mul nsw i64 %8287, %108
  %8289 = sub nsw i64 %8288, %95
  %8290 = zext i32 %.pre-phi3317 to i64
  %8291 = mul nsw i64 %8290, %108
  %8292 = sub nsw i64 %8291, %95
  %8293 = zext i32 %.pre-phi to i64
  %8294 = mul nsw i64 %8293, %108
  %8295 = sub nsw i64 %8294, %95
  %8296 = sext i32 %a26 to i64
  %8297 = add nsw i64 %8296, 24
  %8298 = mul nsw i64 %8297, %109
  %8299 = add nsw i64 %8298, %112
  br label %"for blur_y.s0.x.x.rebased594"

"produce blur_x592":                              ; preds = %"for blur_y.s0.x.x.rebased586"
  %t1056 = add nsw i32 %8283, %t2033
  %8300 = sext i32 %t1056 to i64
  %8301 = getelementptr inbounds i16, i16* %read_input, i64 %8300
  %8302 = getelementptr inbounds i16, i16* %8301, i64 1
  %8303 = bitcast i16* %8302 to <16 x i16>*
  %8304 = load <16 x i16>, <16 x i16>* %8303, align 2, !tbaa !396
  %8305 = getelementptr inbounds i16, i16* %8301, i64 17
  %8306 = bitcast i16* %8305 to <16 x i16>*
  %8307 = load <16 x i16>, <16 x i16>* %8306, align 2, !tbaa !396
  %8308 = getelementptr inbounds i16, i16* %8301, i64 2
  %8309 = bitcast i16* %8308 to <16 x i16>*
  %8310 = load <16 x i16>, <16 x i16>* %8309, align 2, !tbaa !396
  %8311 = getelementptr inbounds i16, i16* %8301, i64 18
  %8312 = bitcast i16* %8311 to <16 x i16>*
  %8313 = load <16 x i16>, <16 x i16>* %8312, align 2, !tbaa !396
  %8314 = bitcast i16* %8301 to <16 x i16>*
  %8315 = load <16 x i16>, <16 x i16>* %8314, align 2, !tbaa !396
  %8316 = getelementptr inbounds i16, i16* %8301, i64 16
  %8317 = bitcast i16* %8316 to <16 x i16>*
  %8318 = load <16 x i16>, <16 x i16>* %8317, align 2, !tbaa !396
  %8319 = add <16 x i16> %8310, %8304
  %8320 = add <16 x i16> %8319, %8315
  %8321 = add <16 x i16> %8313, %8307
  %8322 = add <16 x i16> %8321, %8318
  %8323 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8320, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8324 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8322, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8325 = shufflevector <16 x i16> %8323, <16 x i16> %8324, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8326 = lshr <32 x i16> %8325, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8327 = shufflevector <32 x i16> %8326, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8328 = shl nsw i64 %8280, 5
  %8329 = add nsw i64 %8328, %8181
  %8330 = getelementptr inbounds i16, i16* %blur_x, i64 %8329
  %8331 = bitcast i16* %8330 to <16 x i16>*
  store <16 x i16> %8327, <16 x i16>* %8331, align 2, !tbaa !399
  %8332 = shufflevector <32 x i16> %8326, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8333 = getelementptr inbounds i16, i16* %8330, i64 16
  %8334 = bitcast i16* %8333 to <16 x i16>*
  store <16 x i16> %8332, <16 x i16>* %8334, align 2, !tbaa !399
  br label %"consume blur_x593"

"consume blur_x593":                              ; preds = %"for blur_y.s0.x.x.rebased586.consume blur_x593_crit_edge", %"produce blur_x592"
  %.pre-phi3371 = phi i64 [ %.pre3370, %"for blur_y.s0.x.x.rebased586.consume blur_x593_crit_edge" ], [ %8328, %"produce blur_x592" ]
  %8335 = add nsw i64 %8184, %.pre-phi3371
  %8336 = getelementptr inbounds i16, i16* %blur_x, i64 %8335
  %8337 = bitcast i16* %8336 to <16 x i16>*
  %8338 = load <16 x i16>, <16 x i16>* %8337, align 2, !tbaa !399
  %8339 = getelementptr inbounds i16, i16* %8336, i64 16
  %8340 = bitcast i16* %8339 to <16 x i16>*
  %8341 = load <16 x i16>, <16 x i16>* %8340, align 2, !tbaa !399
  %8342 = add nsw i64 %8187, %.pre-phi3371
  %8343 = getelementptr inbounds i16, i16* %blur_x, i64 %8342
  %8344 = bitcast i16* %8343 to <16 x i16>*
  %8345 = load <16 x i16>, <16 x i16>* %8344, align 2, !tbaa !399
  %8346 = getelementptr inbounds i16, i16* %8343, i64 16
  %8347 = bitcast i16* %8346 to <16 x i16>*
  %8348 = load <16 x i16>, <16 x i16>* %8347, align 2, !tbaa !399
  %8349 = add nsw i64 %8190, %.pre-phi3371
  %8350 = getelementptr inbounds i16, i16* %blur_x, i64 %8349
  %8351 = bitcast i16* %8350 to <16 x i16>*
  %8352 = load <16 x i16>, <16 x i16>* %8351, align 2, !tbaa !399
  %8353 = getelementptr inbounds i16, i16* %8350, i64 16
  %8354 = bitcast i16* %8353 to <16 x i16>*
  %8355 = load <16 x i16>, <16 x i16>* %8354, align 2, !tbaa !399
  %8356 = add <16 x i16> %8345, %8338
  %8357 = add <16 x i16> %8356, %8352
  %8358 = add <16 x i16> %8348, %8341
  %8359 = add <16 x i16> %8358, %8355
  %8360 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8357, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8361 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8359, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8362 = shufflevector <16 x i16> %8360, <16 x i16> %8361, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8363 = lshr <32 x i16> %8362, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8364 = shufflevector <32 x i16> %8363, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8365 = add nsw i64 %8194, %.pre-phi3371
  %8366 = getelementptr inbounds i16, i16* %65, i64 %8365
  %8367 = bitcast i16* %8366 to <16 x i16>*
  store <16 x i16> %8364, <16 x i16>* %8367, align 2, !tbaa !401
  %8368 = shufflevector <32 x i16> %8363, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8369 = getelementptr inbounds i16, i16* %8366, i64 16
  %8370 = bitcast i16* %8369 to <16 x i16>*
  store <16 x i16> %8368, <16 x i16>* %8370, align 2, !tbaa !401
  %indvars.iv.next3204 = add nuw nsw i64 %indvars.iv3203, 1
  %.not2597 = icmp eq i64 %indvars.iv.next3204, %180
  br i1 %.not2597, label %"end for blur_y.s0.x.x.rebased587", label %"for blur_y.s0.x.x.rebased586"

"for blur_y.s0.x.x.rebased594":                   ; preds = %"for blur_y.s0.x.x.rebased594.preheader", %"consume blur_x602"
  %blur_y.s0.x.x.rebased596 = phi i32 [ %8449, %"consume blur_x602" ], [ 0, %"for blur_y.s0.x.x.rebased594.preheader" ]
  %8371 = add nsw i32 %blur_y.s0.x.x.rebased596, %t1582
  %a259 = shl nsw i32 %8371, 5
  %8372 = icmp sgt i32 %a14, %a259
  %b265 = select i1 %8372, i32 %a259, i32 %a14
  %8373 = icmp slt i32 %8371, 1
  %8374 = icmp sgt i32 %4, %a259
  %8375 = or i1 %8373, %8374
  br i1 %8375, label %"produce blur_x600", label %"consume blur_x602"

"end for blur_y.s0.x.x.rebased595":               ; preds = %"consume blur_x602", %"end for blur_y.s0.x.x.rebased587"
  br i1 %34, label %"produce blur_x606", label %after_bb603

"produce blur_x600":                              ; preds = %"for blur_y.s0.x.x.rebased594"
  %8376 = icmp slt i32 %b265, %4
  %blur_x.s0.x.v1.base.s601 = select i1 %8376, i32 %b265, i32 %4
  %t1061 = add nsw i32 %blur_x.s0.x.v1.base.s601, %t2033
  %8377 = sext i32 %t1061 to i64
  %8378 = getelementptr inbounds i16, i16* %read_input, i64 %8377
  %8379 = getelementptr inbounds i16, i16* %8378, i64 1
  %8380 = bitcast i16* %8379 to <16 x i16>*
  %8381 = load <16 x i16>, <16 x i16>* %8380, align 2, !tbaa !396
  %8382 = getelementptr inbounds i16, i16* %8378, i64 17
  %8383 = bitcast i16* %8382 to <16 x i16>*
  %8384 = load <16 x i16>, <16 x i16>* %8383, align 2, !tbaa !396
  %8385 = getelementptr inbounds i16, i16* %8378, i64 2
  %8386 = bitcast i16* %8385 to <16 x i16>*
  %8387 = load <16 x i16>, <16 x i16>* %8386, align 2, !tbaa !396
  %8388 = getelementptr inbounds i16, i16* %8378, i64 18
  %8389 = bitcast i16* %8388 to <16 x i16>*
  %8390 = load <16 x i16>, <16 x i16>* %8389, align 2, !tbaa !396
  %8391 = bitcast i16* %8378 to <16 x i16>*
  %8392 = load <16 x i16>, <16 x i16>* %8391, align 2, !tbaa !396
  %8393 = getelementptr inbounds i16, i16* %8378, i64 16
  %8394 = bitcast i16* %8393 to <16 x i16>*
  %8395 = load <16 x i16>, <16 x i16>* %8394, align 2, !tbaa !396
  %8396 = add <16 x i16> %8387, %8381
  %8397 = add <16 x i16> %8396, %8392
  %8398 = add <16 x i16> %8390, %8384
  %8399 = add <16 x i16> %8398, %8395
  %8400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8397, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8399, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8402 = shufflevector <16 x i16> %8400, <16 x i16> %8401, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8403 = lshr <32 x i16> %8402, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8404 = shufflevector <32 x i16> %8403, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8405 = sext i32 %blur_x.s0.x.v1.base.s601 to i64
  %8406 = add nsw i64 %8405, %8286
  %8407 = getelementptr inbounds i16, i16* %blur_x, i64 %8406
  %8408 = bitcast i16* %8407 to <16 x i16>*
  store <16 x i16> %8404, <16 x i16>* %8408, align 2, !tbaa !399
  %8409 = shufflevector <32 x i16> %8403, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8410 = getelementptr inbounds i16, i16* %8407, i64 16
  %8411 = bitcast i16* %8410 to <16 x i16>*
  store <16 x i16> %8409, <16 x i16>* %8411, align 2, !tbaa !399
  br label %"consume blur_x602"

"consume blur_x602":                              ; preds = %"for blur_y.s0.x.x.rebased594", %"produce blur_x600"
  %8412 = sext i32 %b265 to i64
  %8413 = add nsw i64 %8289, %8412
  %8414 = getelementptr inbounds i16, i16* %blur_x, i64 %8413
  %8415 = bitcast i16* %8414 to <16 x i16>*
  %8416 = load <16 x i16>, <16 x i16>* %8415, align 2, !tbaa !399
  %8417 = getelementptr inbounds i16, i16* %8414, i64 16
  %8418 = bitcast i16* %8417 to <16 x i16>*
  %8419 = load <16 x i16>, <16 x i16>* %8418, align 2, !tbaa !399
  %8420 = add nsw i64 %8292, %8412
  %8421 = getelementptr inbounds i16, i16* %blur_x, i64 %8420
  %8422 = bitcast i16* %8421 to <16 x i16>*
  %8423 = load <16 x i16>, <16 x i16>* %8422, align 2, !tbaa !399
  %8424 = getelementptr inbounds i16, i16* %8421, i64 16
  %8425 = bitcast i16* %8424 to <16 x i16>*
  %8426 = load <16 x i16>, <16 x i16>* %8425, align 2, !tbaa !399
  %8427 = add nsw i64 %8295, %8412
  %8428 = getelementptr inbounds i16, i16* %blur_x, i64 %8427
  %8429 = bitcast i16* %8428 to <16 x i16>*
  %8430 = load <16 x i16>, <16 x i16>* %8429, align 2, !tbaa !399
  %8431 = getelementptr inbounds i16, i16* %8428, i64 16
  %8432 = bitcast i16* %8431 to <16 x i16>*
  %8433 = load <16 x i16>, <16 x i16>* %8432, align 2, !tbaa !399
  %8434 = add <16 x i16> %8423, %8416
  %8435 = add <16 x i16> %8434, %8430
  %8436 = add <16 x i16> %8426, %8419
  %8437 = add <16 x i16> %8436, %8433
  %8438 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8435, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8439 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8437, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8440 = shufflevector <16 x i16> %8438, <16 x i16> %8439, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8441 = lshr <32 x i16> %8440, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8442 = shufflevector <32 x i16> %8441, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8443 = add nsw i64 %8299, %8412
  %8444 = getelementptr inbounds i16, i16* %65, i64 %8443
  %8445 = bitcast i16* %8444 to <16 x i16>*
  store <16 x i16> %8442, <16 x i16>* %8445, align 2, !tbaa !401
  %8446 = shufflevector <32 x i16> %8441, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8447 = getelementptr inbounds i16, i16* %8444, i64 16
  %8448 = bitcast i16* %8447 to <16 x i16>*
  store <16 x i16> %8446, <16 x i16>* %8448, align 2, !tbaa !401
  %8449 = add nuw nsw i32 %blur_y.s0.x.x.rebased596, 1
  %.not2596 = icmp eq i32 %8449, %t1639
  br i1 %.not2596, label %"end for blur_y.s0.x.x.rebased595", label %"for blur_y.s0.x.x.rebased594"

after_bb603:                                      ; preds = %"end for blur_y.s0.x.x.rebased595", %"produce blur_x606"
  br i1 %99, label %"for blur_y.s0.x.x.rebased608.preheader", label %"end for blur_y.s0.x.x.rebased609", !prof !386

"for blur_y.s0.x.x.rebased608.preheader":         ; preds = %after_bb603
  %8450 = sext i32 %t1666 to i64
  %8451 = zext i32 %.pre-phi3317 to i64
  %8452 = mul nsw i64 %8451, %108
  %8453 = sub nsw i64 %8452, %95
  %8454 = zext i32 %.pre-phi3323 to i64
  %8455 = mul nsw i64 %8454, %108
  %8456 = sub nsw i64 %8455, %95
  %8457 = zext i32 %.pre-phi3313 to i64
  %8458 = mul nsw i64 %8457, %108
  %8459 = sub nsw i64 %8458, %95
  %8460 = sext i32 %a26 to i64
  %8461 = add nsw i64 %8460, 25
  %8462 = mul nsw i64 %8461, %109
  %8463 = add nsw i64 %8462, %112
  br label %"for blur_y.s0.x.x.rebased608"

"produce blur_x606":                              ; preds = %"end for blur_y.s0.x.x.rebased595"
  %8464 = getelementptr inbounds i16, i16* %read_input, i64 %161
  %8465 = getelementptr inbounds i16, i16* %8464, i64 -31
  %8466 = bitcast i16* %8465 to <16 x i16>*
  %8467 = load <16 x i16>, <16 x i16>* %8466, align 2, !tbaa !396
  %8468 = getelementptr inbounds i16, i16* %8464, i64 -15
  %8469 = bitcast i16* %8468 to <16 x i16>*
  %8470 = load <16 x i16>, <16 x i16>* %8469, align 2, !tbaa !396
  %8471 = getelementptr inbounds i16, i16* %8464, i64 -30
  %8472 = bitcast i16* %8471 to <16 x i16>*
  %8473 = load <16 x i16>, <16 x i16>* %8472, align 2, !tbaa !396
  %8474 = getelementptr inbounds i16, i16* %8464, i64 -14
  %8475 = bitcast i16* %8474 to <16 x i16>*
  %8476 = load <16 x i16>, <16 x i16>* %8475, align 2, !tbaa !396
  %8477 = getelementptr inbounds i16, i16* %8464, i64 -32
  %8478 = bitcast i16* %8477 to <16 x i16>*
  %8479 = load <16 x i16>, <16 x i16>* %8478, align 2, !tbaa !396
  %8480 = getelementptr inbounds i16, i16* %8464, i64 -16
  %8481 = bitcast i16* %8480 to <16 x i16>*
  %8482 = load <16 x i16>, <16 x i16>* %8481, align 2, !tbaa !396
  %8483 = add <16 x i16> %8473, %8467
  %8484 = add <16 x i16> %8483, %8479
  %8485 = add <16 x i16> %8476, %8470
  %8486 = add <16 x i16> %8485, %8482
  %8487 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8484, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8488 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8486, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8489 = shufflevector <16 x i16> %8487, <16 x i16> %8488, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8490 = lshr <32 x i16> %8489, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8491 = shufflevector <32 x i16> %8490, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8492 = zext i32 %.pre-phi3323 to i64
  %8493 = mul nsw i64 %96, %8492
  %8494 = add nsw i64 %98, %8493
  %8495 = getelementptr inbounds i16, i16* %blur_x, i64 %8494
  %8496 = getelementptr inbounds i16, i16* %8495, i64 -32
  %8497 = bitcast i16* %8496 to <16 x i16>*
  store <16 x i16> %8491, <16 x i16>* %8497, align 2, !tbaa !399
  %8498 = shufflevector <32 x i16> %8490, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8499 = getelementptr inbounds i16, i16* %8495, i64 -16
  %8500 = bitcast i16* %8499 to <16 x i16>*
  store <16 x i16> %8498, <16 x i16>* %8500, align 2, !tbaa !399
  %8501 = zext i32 %.pre-phi3317 to i64
  %8502 = mul nsw i64 %8501, %108
  %8503 = add nsw i64 %8502, %93
  %8504 = getelementptr inbounds i16, i16* %blur_x, i64 %8503
  %8505 = getelementptr inbounds i16, i16* %8504, i64 -32
  %8506 = bitcast i16* %8505 to <16 x i16>*
  %8507 = load <16 x i16>, <16 x i16>* %8506, align 2, !tbaa !399
  %8508 = getelementptr inbounds i16, i16* %8504, i64 -16
  %8509 = bitcast i16* %8508 to <16 x i16>*
  %8510 = load <16 x i16>, <16 x i16>* %8509, align 2, !tbaa !399
  %8511 = mul nsw i64 %8492, %108
  %8512 = add nsw i64 %8511, %93
  %8513 = getelementptr inbounds i16, i16* %blur_x, i64 %8512
  %8514 = getelementptr inbounds i16, i16* %8513, i64 -32
  %8515 = bitcast i16* %8514 to <16 x i16>*
  %8516 = load <16 x i16>, <16 x i16>* %8515, align 2, !tbaa !399
  %8517 = getelementptr inbounds i16, i16* %8513, i64 -16
  %8518 = bitcast i16* %8517 to <16 x i16>*
  %8519 = load <16 x i16>, <16 x i16>* %8518, align 2, !tbaa !399
  %8520 = zext i32 %.pre-phi3313 to i64
  %8521 = mul nsw i64 %8520, %108
  %8522 = add nsw i64 %8521, %93
  %8523 = getelementptr inbounds i16, i16* %blur_x, i64 %8522
  %8524 = getelementptr inbounds i16, i16* %8523, i64 -32
  %8525 = bitcast i16* %8524 to <16 x i16>*
  %8526 = load <16 x i16>, <16 x i16>* %8525, align 2, !tbaa !399
  %8527 = getelementptr inbounds i16, i16* %8523, i64 -16
  %8528 = bitcast i16* %8527 to <16 x i16>*
  %8529 = load <16 x i16>, <16 x i16>* %8528, align 2, !tbaa !399
  %8530 = add <16 x i16> %8516, %8507
  %8531 = add <16 x i16> %8530, %8526
  %8532 = add <16 x i16> %8519, %8510
  %8533 = add <16 x i16> %8532, %8529
  %8534 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8531, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8535 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8533, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8536 = shufflevector <16 x i16> %8534, <16 x i16> %8535, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8537 = lshr <32 x i16> %8536, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8538 = shufflevector <32 x i16> %8537, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8539 = sext i32 %a26 to i64
  %8540 = add nsw i64 %8539, 25
  %8541 = mul nsw i64 %8540, %109
  %8542 = add nsw i64 %111, %8541
  %8543 = getelementptr inbounds i16, i16* %65, i64 %8542
  %8544 = getelementptr inbounds i16, i16* %8543, i64 -32
  %8545 = bitcast i16* %8544 to <16 x i16>*
  store <16 x i16> %8538, <16 x i16>* %8545, align 2, !tbaa !401
  %8546 = shufflevector <32 x i16> %8537, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8547 = getelementptr inbounds i16, i16* %8543, i64 -16
  %8548 = bitcast i16* %8547 to <16 x i16>*
  store <16 x i16> %8546, <16 x i16>* %8548, align 2, !tbaa !401
  br label %after_bb603

"for blur_y.s0.x.x.rebased608":                   ; preds = %"for blur_y.s0.x.x.rebased608.preheader", %"consume blur_x615"
  %indvars.iv3206 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased608.preheader" ], [ %indvars.iv.next3207, %"consume blur_x615" ]
  %8549 = add nsw i64 %indvars.iv3206, %100
  %8550 = icmp slt i64 %8549, 1
  %8551 = trunc i64 %8549 to i32
  %8552 = shl nsw i32 %8551, 5
  %8553 = icmp sgt i32 %4, %8552
  %8554 = or i1 %8550, %8553
  br i1 %8554, label %"produce blur_x614", label %"for blur_y.s0.x.x.rebased608.consume blur_x615_crit_edge"

"for blur_y.s0.x.x.rebased608.consume blur_x615_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased608"
  %.pre3372 = shl nsw i64 %8549, 5
  br label %"consume blur_x615"

"end for blur_y.s0.x.x.rebased609":               ; preds = %"consume blur_x615", %after_bb603
  br i1 %101, label %"for blur_y.s0.x.x.rebased616.preheader", label %"end for blur_y.s0.x.x.rebased617", !prof !386

"for blur_y.s0.x.x.rebased616.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased609"
  %8555 = sext i32 %t1666 to i64
  %8556 = zext i32 %.pre-phi3317 to i64
  %8557 = mul nsw i64 %8556, %108
  %8558 = sub nsw i64 %8557, %95
  %8559 = zext i32 %.pre-phi3323 to i64
  %8560 = mul nsw i64 %8559, %108
  %8561 = sub nsw i64 %8560, %95
  %8562 = zext i32 %.pre-phi3313 to i64
  %8563 = mul nsw i64 %8562, %108
  %8564 = sub nsw i64 %8563, %95
  %8565 = sext i32 %a26 to i64
  %8566 = add nsw i64 %8565, 25
  %8567 = mul nsw i64 %8566, %109
  %8568 = add nsw i64 %8567, %112
  br label %"for blur_y.s0.x.x.rebased616"

"produce blur_x614":                              ; preds = %"for blur_y.s0.x.x.rebased608"
  %t1072 = add nsw i32 %8552, %t2049
  %8569 = sext i32 %t1072 to i64
  %8570 = getelementptr inbounds i16, i16* %read_input, i64 %8569
  %8571 = getelementptr inbounds i16, i16* %8570, i64 1
  %8572 = bitcast i16* %8571 to <16 x i16>*
  %8573 = load <16 x i16>, <16 x i16>* %8572, align 2, !tbaa !396
  %8574 = getelementptr inbounds i16, i16* %8570, i64 17
  %8575 = bitcast i16* %8574 to <16 x i16>*
  %8576 = load <16 x i16>, <16 x i16>* %8575, align 2, !tbaa !396
  %8577 = getelementptr inbounds i16, i16* %8570, i64 2
  %8578 = bitcast i16* %8577 to <16 x i16>*
  %8579 = load <16 x i16>, <16 x i16>* %8578, align 2, !tbaa !396
  %8580 = getelementptr inbounds i16, i16* %8570, i64 18
  %8581 = bitcast i16* %8580 to <16 x i16>*
  %8582 = load <16 x i16>, <16 x i16>* %8581, align 2, !tbaa !396
  %8583 = bitcast i16* %8570 to <16 x i16>*
  %8584 = load <16 x i16>, <16 x i16>* %8583, align 2, !tbaa !396
  %8585 = getelementptr inbounds i16, i16* %8570, i64 16
  %8586 = bitcast i16* %8585 to <16 x i16>*
  %8587 = load <16 x i16>, <16 x i16>* %8586, align 2, !tbaa !396
  %8588 = add <16 x i16> %8579, %8573
  %8589 = add <16 x i16> %8588, %8584
  %8590 = add <16 x i16> %8582, %8576
  %8591 = add <16 x i16> %8590, %8587
  %8592 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8589, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8593 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8591, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8594 = shufflevector <16 x i16> %8592, <16 x i16> %8593, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8595 = lshr <32 x i16> %8594, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8596 = shufflevector <32 x i16> %8595, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8597 = shl nsw i64 %8549, 5
  %8598 = add nsw i64 %8597, %8450
  %8599 = getelementptr inbounds i16, i16* %blur_x, i64 %8598
  %8600 = bitcast i16* %8599 to <16 x i16>*
  store <16 x i16> %8596, <16 x i16>* %8600, align 2, !tbaa !399
  %8601 = shufflevector <32 x i16> %8595, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8602 = getelementptr inbounds i16, i16* %8599, i64 16
  %8603 = bitcast i16* %8602 to <16 x i16>*
  store <16 x i16> %8601, <16 x i16>* %8603, align 2, !tbaa !399
  br label %"consume blur_x615"

"consume blur_x615":                              ; preds = %"for blur_y.s0.x.x.rebased608.consume blur_x615_crit_edge", %"produce blur_x614"
  %.pre-phi3373 = phi i64 [ %.pre3372, %"for blur_y.s0.x.x.rebased608.consume blur_x615_crit_edge" ], [ %8597, %"produce blur_x614" ]
  %8604 = add nsw i64 %8453, %.pre-phi3373
  %8605 = getelementptr inbounds i16, i16* %blur_x, i64 %8604
  %8606 = bitcast i16* %8605 to <16 x i16>*
  %8607 = load <16 x i16>, <16 x i16>* %8606, align 2, !tbaa !399
  %8608 = getelementptr inbounds i16, i16* %8605, i64 16
  %8609 = bitcast i16* %8608 to <16 x i16>*
  %8610 = load <16 x i16>, <16 x i16>* %8609, align 2, !tbaa !399
  %8611 = add nsw i64 %8456, %.pre-phi3373
  %8612 = getelementptr inbounds i16, i16* %blur_x, i64 %8611
  %8613 = bitcast i16* %8612 to <16 x i16>*
  %8614 = load <16 x i16>, <16 x i16>* %8613, align 2, !tbaa !399
  %8615 = getelementptr inbounds i16, i16* %8612, i64 16
  %8616 = bitcast i16* %8615 to <16 x i16>*
  %8617 = load <16 x i16>, <16 x i16>* %8616, align 2, !tbaa !399
  %8618 = add nsw i64 %8459, %.pre-phi3373
  %8619 = getelementptr inbounds i16, i16* %blur_x, i64 %8618
  %8620 = bitcast i16* %8619 to <16 x i16>*
  %8621 = load <16 x i16>, <16 x i16>* %8620, align 2, !tbaa !399
  %8622 = getelementptr inbounds i16, i16* %8619, i64 16
  %8623 = bitcast i16* %8622 to <16 x i16>*
  %8624 = load <16 x i16>, <16 x i16>* %8623, align 2, !tbaa !399
  %8625 = add <16 x i16> %8614, %8607
  %8626 = add <16 x i16> %8625, %8621
  %8627 = add <16 x i16> %8617, %8610
  %8628 = add <16 x i16> %8627, %8624
  %8629 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8626, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8630 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8628, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8631 = shufflevector <16 x i16> %8629, <16 x i16> %8630, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8632 = lshr <32 x i16> %8631, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8633 = shufflevector <32 x i16> %8632, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8634 = add nsw i64 %8463, %.pre-phi3373
  %8635 = getelementptr inbounds i16, i16* %65, i64 %8634
  %8636 = bitcast i16* %8635 to <16 x i16>*
  store <16 x i16> %8633, <16 x i16>* %8636, align 2, !tbaa !401
  %8637 = shufflevector <32 x i16> %8632, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8638 = getelementptr inbounds i16, i16* %8635, i64 16
  %8639 = bitcast i16* %8638 to <16 x i16>*
  store <16 x i16> %8637, <16 x i16>* %8639, align 2, !tbaa !401
  %indvars.iv.next3207 = add nuw nsw i64 %indvars.iv3206, 1
  %.not2595 = icmp eq i64 %indvars.iv.next3207, %180
  br i1 %.not2595, label %"end for blur_y.s0.x.x.rebased609", label %"for blur_y.s0.x.x.rebased608"

"for blur_y.s0.x.x.rebased616":                   ; preds = %"for blur_y.s0.x.x.rebased616.preheader", %"consume blur_x624"
  %blur_y.s0.x.x.rebased618 = phi i32 [ %8718, %"consume blur_x624" ], [ 0, %"for blur_y.s0.x.x.rebased616.preheader" ]
  %8640 = add nsw i32 %blur_y.s0.x.x.rebased618, %t1582
  %a266 = shl nsw i32 %8640, 5
  %8641 = icmp sgt i32 %a14, %a266
  %b272 = select i1 %8641, i32 %a266, i32 %a14
  %8642 = icmp slt i32 %8640, 1
  %8643 = icmp sgt i32 %4, %a266
  %8644 = or i1 %8642, %8643
  br i1 %8644, label %"produce blur_x622", label %"consume blur_x624"

"end for blur_y.s0.x.x.rebased617":               ; preds = %"consume blur_x624", %"end for blur_y.s0.x.x.rebased609"
  br i1 %34, label %"produce blur_x628", label %after_bb625

"produce blur_x622":                              ; preds = %"for blur_y.s0.x.x.rebased616"
  %8645 = icmp slt i32 %b272, %4
  %blur_x.s0.x.v1.base.s623 = select i1 %8645, i32 %b272, i32 %4
  %t1077 = add nsw i32 %blur_x.s0.x.v1.base.s623, %t2049
  %8646 = sext i32 %t1077 to i64
  %8647 = getelementptr inbounds i16, i16* %read_input, i64 %8646
  %8648 = getelementptr inbounds i16, i16* %8647, i64 1
  %8649 = bitcast i16* %8648 to <16 x i16>*
  %8650 = load <16 x i16>, <16 x i16>* %8649, align 2, !tbaa !396
  %8651 = getelementptr inbounds i16, i16* %8647, i64 17
  %8652 = bitcast i16* %8651 to <16 x i16>*
  %8653 = load <16 x i16>, <16 x i16>* %8652, align 2, !tbaa !396
  %8654 = getelementptr inbounds i16, i16* %8647, i64 2
  %8655 = bitcast i16* %8654 to <16 x i16>*
  %8656 = load <16 x i16>, <16 x i16>* %8655, align 2, !tbaa !396
  %8657 = getelementptr inbounds i16, i16* %8647, i64 18
  %8658 = bitcast i16* %8657 to <16 x i16>*
  %8659 = load <16 x i16>, <16 x i16>* %8658, align 2, !tbaa !396
  %8660 = bitcast i16* %8647 to <16 x i16>*
  %8661 = load <16 x i16>, <16 x i16>* %8660, align 2, !tbaa !396
  %8662 = getelementptr inbounds i16, i16* %8647, i64 16
  %8663 = bitcast i16* %8662 to <16 x i16>*
  %8664 = load <16 x i16>, <16 x i16>* %8663, align 2, !tbaa !396
  %8665 = add <16 x i16> %8656, %8650
  %8666 = add <16 x i16> %8665, %8661
  %8667 = add <16 x i16> %8659, %8653
  %8668 = add <16 x i16> %8667, %8664
  %8669 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8666, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8670 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8668, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8671 = shufflevector <16 x i16> %8669, <16 x i16> %8670, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8672 = lshr <32 x i16> %8671, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8673 = shufflevector <32 x i16> %8672, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8674 = sext i32 %blur_x.s0.x.v1.base.s623 to i64
  %8675 = add nsw i64 %8674, %8555
  %8676 = getelementptr inbounds i16, i16* %blur_x, i64 %8675
  %8677 = bitcast i16* %8676 to <16 x i16>*
  store <16 x i16> %8673, <16 x i16>* %8677, align 2, !tbaa !399
  %8678 = shufflevector <32 x i16> %8672, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8679 = getelementptr inbounds i16, i16* %8676, i64 16
  %8680 = bitcast i16* %8679 to <16 x i16>*
  store <16 x i16> %8678, <16 x i16>* %8680, align 2, !tbaa !399
  br label %"consume blur_x624"

"consume blur_x624":                              ; preds = %"for blur_y.s0.x.x.rebased616", %"produce blur_x622"
  %8681 = sext i32 %b272 to i64
  %8682 = add nsw i64 %8558, %8681
  %8683 = getelementptr inbounds i16, i16* %blur_x, i64 %8682
  %8684 = bitcast i16* %8683 to <16 x i16>*
  %8685 = load <16 x i16>, <16 x i16>* %8684, align 2, !tbaa !399
  %8686 = getelementptr inbounds i16, i16* %8683, i64 16
  %8687 = bitcast i16* %8686 to <16 x i16>*
  %8688 = load <16 x i16>, <16 x i16>* %8687, align 2, !tbaa !399
  %8689 = add nsw i64 %8561, %8681
  %8690 = getelementptr inbounds i16, i16* %blur_x, i64 %8689
  %8691 = bitcast i16* %8690 to <16 x i16>*
  %8692 = load <16 x i16>, <16 x i16>* %8691, align 2, !tbaa !399
  %8693 = getelementptr inbounds i16, i16* %8690, i64 16
  %8694 = bitcast i16* %8693 to <16 x i16>*
  %8695 = load <16 x i16>, <16 x i16>* %8694, align 2, !tbaa !399
  %8696 = add nsw i64 %8564, %8681
  %8697 = getelementptr inbounds i16, i16* %blur_x, i64 %8696
  %8698 = bitcast i16* %8697 to <16 x i16>*
  %8699 = load <16 x i16>, <16 x i16>* %8698, align 2, !tbaa !399
  %8700 = getelementptr inbounds i16, i16* %8697, i64 16
  %8701 = bitcast i16* %8700 to <16 x i16>*
  %8702 = load <16 x i16>, <16 x i16>* %8701, align 2, !tbaa !399
  %8703 = add <16 x i16> %8692, %8685
  %8704 = add <16 x i16> %8703, %8699
  %8705 = add <16 x i16> %8695, %8688
  %8706 = add <16 x i16> %8705, %8702
  %8707 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8704, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8708 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8706, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8709 = shufflevector <16 x i16> %8707, <16 x i16> %8708, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8710 = lshr <32 x i16> %8709, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8711 = shufflevector <32 x i16> %8710, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8712 = add nsw i64 %8568, %8681
  %8713 = getelementptr inbounds i16, i16* %65, i64 %8712
  %8714 = bitcast i16* %8713 to <16 x i16>*
  store <16 x i16> %8711, <16 x i16>* %8714, align 2, !tbaa !401
  %8715 = shufflevector <32 x i16> %8710, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8716 = getelementptr inbounds i16, i16* %8713, i64 16
  %8717 = bitcast i16* %8716 to <16 x i16>*
  store <16 x i16> %8715, <16 x i16>* %8717, align 2, !tbaa !401
  %8718 = add nuw nsw i32 %blur_y.s0.x.x.rebased618, 1
  %.not2594 = icmp eq i32 %8718, %t1639
  br i1 %.not2594, label %"end for blur_y.s0.x.x.rebased617", label %"for blur_y.s0.x.x.rebased616"

after_bb625:                                      ; preds = %"end for blur_y.s0.x.x.rebased617", %"produce blur_x628"
  br i1 %99, label %"for blur_y.s0.x.x.rebased630.preheader", label %"end for blur_y.s0.x.x.rebased631", !prof !386

"for blur_y.s0.x.x.rebased630.preheader":         ; preds = %after_bb625
  %8719 = sext i32 %t1638 to i64
  %8720 = zext i32 %.pre-phi3323 to i64
  %8721 = mul nsw i64 %8720, %108
  %8722 = sub nsw i64 %8721, %95
  %8723 = zext i32 %.pre-phi to i64
  %8724 = mul nsw i64 %8723, %108
  %8725 = sub nsw i64 %8724, %95
  %8726 = zext i32 %.pre-phi3317 to i64
  %8727 = mul nsw i64 %8726, %108
  %8728 = sub nsw i64 %8727, %95
  %8729 = sext i32 %a26 to i64
  %8730 = add nsw i64 %8729, 26
  %8731 = mul nsw i64 %8730, %109
  %8732 = add nsw i64 %8731, %112
  br label %"for blur_y.s0.x.x.rebased630"

"produce blur_x628":                              ; preds = %"end for blur_y.s0.x.x.rebased617"
  %8733 = getelementptr inbounds i16, i16* %read_input, i64 %163
  %8734 = getelementptr inbounds i16, i16* %8733, i64 -31
  %8735 = bitcast i16* %8734 to <16 x i16>*
  %8736 = load <16 x i16>, <16 x i16>* %8735, align 2, !tbaa !396
  %8737 = getelementptr inbounds i16, i16* %8733, i64 -15
  %8738 = bitcast i16* %8737 to <16 x i16>*
  %8739 = load <16 x i16>, <16 x i16>* %8738, align 2, !tbaa !396
  %8740 = getelementptr inbounds i16, i16* %8733, i64 -30
  %8741 = bitcast i16* %8740 to <16 x i16>*
  %8742 = load <16 x i16>, <16 x i16>* %8741, align 2, !tbaa !396
  %8743 = getelementptr inbounds i16, i16* %8733, i64 -14
  %8744 = bitcast i16* %8743 to <16 x i16>*
  %8745 = load <16 x i16>, <16 x i16>* %8744, align 2, !tbaa !396
  %8746 = getelementptr inbounds i16, i16* %8733, i64 -32
  %8747 = bitcast i16* %8746 to <16 x i16>*
  %8748 = load <16 x i16>, <16 x i16>* %8747, align 2, !tbaa !396
  %8749 = getelementptr inbounds i16, i16* %8733, i64 -16
  %8750 = bitcast i16* %8749 to <16 x i16>*
  %8751 = load <16 x i16>, <16 x i16>* %8750, align 2, !tbaa !396
  %8752 = add <16 x i16> %8742, %8736
  %8753 = add <16 x i16> %8752, %8748
  %8754 = add <16 x i16> %8745, %8739
  %8755 = add <16 x i16> %8754, %8751
  %8756 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8753, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8757 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8755, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8758 = shufflevector <16 x i16> %8756, <16 x i16> %8757, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8759 = lshr <32 x i16> %8758, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8760 = shufflevector <32 x i16> %8759, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8761 = zext i32 %.pre-phi to i64
  %8762 = mul nsw i64 %96, %8761
  %8763 = add nsw i64 %98, %8762
  %8764 = getelementptr inbounds i16, i16* %blur_x, i64 %8763
  %8765 = getelementptr inbounds i16, i16* %8764, i64 -32
  %8766 = bitcast i16* %8765 to <16 x i16>*
  store <16 x i16> %8760, <16 x i16>* %8766, align 2, !tbaa !399
  %8767 = shufflevector <32 x i16> %8759, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8768 = getelementptr inbounds i16, i16* %8764, i64 -16
  %8769 = bitcast i16* %8768 to <16 x i16>*
  store <16 x i16> %8767, <16 x i16>* %8769, align 2, !tbaa !399
  %8770 = zext i32 %.pre-phi3323 to i64
  %8771 = mul nsw i64 %8770, %108
  %8772 = add nsw i64 %8771, %93
  %8773 = getelementptr inbounds i16, i16* %blur_x, i64 %8772
  %8774 = getelementptr inbounds i16, i16* %8773, i64 -32
  %8775 = bitcast i16* %8774 to <16 x i16>*
  %8776 = load <16 x i16>, <16 x i16>* %8775, align 2, !tbaa !399
  %8777 = getelementptr inbounds i16, i16* %8773, i64 -16
  %8778 = bitcast i16* %8777 to <16 x i16>*
  %8779 = load <16 x i16>, <16 x i16>* %8778, align 2, !tbaa !399
  %8780 = mul nsw i64 %8761, %108
  %8781 = add nsw i64 %8780, %93
  %8782 = getelementptr inbounds i16, i16* %blur_x, i64 %8781
  %8783 = getelementptr inbounds i16, i16* %8782, i64 -32
  %8784 = bitcast i16* %8783 to <16 x i16>*
  %8785 = load <16 x i16>, <16 x i16>* %8784, align 2, !tbaa !399
  %8786 = getelementptr inbounds i16, i16* %8782, i64 -16
  %8787 = bitcast i16* %8786 to <16 x i16>*
  %8788 = load <16 x i16>, <16 x i16>* %8787, align 2, !tbaa !399
  %8789 = zext i32 %.pre-phi3317 to i64
  %8790 = mul nsw i64 %8789, %108
  %8791 = add nsw i64 %8790, %93
  %8792 = getelementptr inbounds i16, i16* %blur_x, i64 %8791
  %8793 = getelementptr inbounds i16, i16* %8792, i64 -32
  %8794 = bitcast i16* %8793 to <16 x i16>*
  %8795 = load <16 x i16>, <16 x i16>* %8794, align 2, !tbaa !399
  %8796 = getelementptr inbounds i16, i16* %8792, i64 -16
  %8797 = bitcast i16* %8796 to <16 x i16>*
  %8798 = load <16 x i16>, <16 x i16>* %8797, align 2, !tbaa !399
  %8799 = add <16 x i16> %8785, %8776
  %8800 = add <16 x i16> %8799, %8795
  %8801 = add <16 x i16> %8788, %8779
  %8802 = add <16 x i16> %8801, %8798
  %8803 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8800, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8804 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8802, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8805 = shufflevector <16 x i16> %8803, <16 x i16> %8804, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8806 = lshr <32 x i16> %8805, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8807 = shufflevector <32 x i16> %8806, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8808 = sext i32 %a26 to i64
  %8809 = add nsw i64 %8808, 26
  %8810 = mul nsw i64 %8809, %109
  %8811 = add nsw i64 %111, %8810
  %8812 = getelementptr inbounds i16, i16* %65, i64 %8811
  %8813 = getelementptr inbounds i16, i16* %8812, i64 -32
  %8814 = bitcast i16* %8813 to <16 x i16>*
  store <16 x i16> %8807, <16 x i16>* %8814, align 2, !tbaa !401
  %8815 = shufflevector <32 x i16> %8806, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8816 = getelementptr inbounds i16, i16* %8812, i64 -16
  %8817 = bitcast i16* %8816 to <16 x i16>*
  store <16 x i16> %8815, <16 x i16>* %8817, align 2, !tbaa !401
  br label %after_bb625

"for blur_y.s0.x.x.rebased630":                   ; preds = %"for blur_y.s0.x.x.rebased630.preheader", %"consume blur_x637"
  %indvars.iv3209 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased630.preheader" ], [ %indvars.iv.next3210, %"consume blur_x637" ]
  %8818 = add nsw i64 %indvars.iv3209, %100
  %8819 = icmp slt i64 %8818, 1
  %8820 = trunc i64 %8818 to i32
  %8821 = shl nsw i32 %8820, 5
  %8822 = icmp sgt i32 %4, %8821
  %8823 = or i1 %8819, %8822
  br i1 %8823, label %"produce blur_x636", label %"for blur_y.s0.x.x.rebased630.consume blur_x637_crit_edge"

"for blur_y.s0.x.x.rebased630.consume blur_x637_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased630"
  %.pre3374 = shl nsw i64 %8818, 5
  br label %"consume blur_x637"

"end for blur_y.s0.x.x.rebased631":               ; preds = %"consume blur_x637", %after_bb625
  br i1 %101, label %"for blur_y.s0.x.x.rebased638.preheader", label %"end for blur_y.s0.x.x.rebased639", !prof !386

"for blur_y.s0.x.x.rebased638.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased631"
  %8824 = sext i32 %t1638 to i64
  %8825 = zext i32 %.pre-phi3323 to i64
  %8826 = mul nsw i64 %8825, %108
  %8827 = sub nsw i64 %8826, %95
  %8828 = zext i32 %.pre-phi to i64
  %8829 = mul nsw i64 %8828, %108
  %8830 = sub nsw i64 %8829, %95
  %8831 = zext i32 %.pre-phi3317 to i64
  %8832 = mul nsw i64 %8831, %108
  %8833 = sub nsw i64 %8832, %95
  %8834 = sext i32 %a26 to i64
  %8835 = add nsw i64 %8834, 26
  %8836 = mul nsw i64 %8835, %109
  %8837 = add nsw i64 %8836, %112
  br label %"for blur_y.s0.x.x.rebased638"

"produce blur_x636":                              ; preds = %"for blur_y.s0.x.x.rebased630"
  %t1088 = add nsw i32 %8821, %t2065
  %8838 = sext i32 %t1088 to i64
  %8839 = getelementptr inbounds i16, i16* %read_input, i64 %8838
  %8840 = getelementptr inbounds i16, i16* %8839, i64 1
  %8841 = bitcast i16* %8840 to <16 x i16>*
  %8842 = load <16 x i16>, <16 x i16>* %8841, align 2, !tbaa !396
  %8843 = getelementptr inbounds i16, i16* %8839, i64 17
  %8844 = bitcast i16* %8843 to <16 x i16>*
  %8845 = load <16 x i16>, <16 x i16>* %8844, align 2, !tbaa !396
  %8846 = getelementptr inbounds i16, i16* %8839, i64 2
  %8847 = bitcast i16* %8846 to <16 x i16>*
  %8848 = load <16 x i16>, <16 x i16>* %8847, align 2, !tbaa !396
  %8849 = getelementptr inbounds i16, i16* %8839, i64 18
  %8850 = bitcast i16* %8849 to <16 x i16>*
  %8851 = load <16 x i16>, <16 x i16>* %8850, align 2, !tbaa !396
  %8852 = bitcast i16* %8839 to <16 x i16>*
  %8853 = load <16 x i16>, <16 x i16>* %8852, align 2, !tbaa !396
  %8854 = getelementptr inbounds i16, i16* %8839, i64 16
  %8855 = bitcast i16* %8854 to <16 x i16>*
  %8856 = load <16 x i16>, <16 x i16>* %8855, align 2, !tbaa !396
  %8857 = add <16 x i16> %8848, %8842
  %8858 = add <16 x i16> %8857, %8853
  %8859 = add <16 x i16> %8851, %8845
  %8860 = add <16 x i16> %8859, %8856
  %8861 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8858, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8862 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8860, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8863 = shufflevector <16 x i16> %8861, <16 x i16> %8862, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8864 = lshr <32 x i16> %8863, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8865 = shufflevector <32 x i16> %8864, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8866 = shl nsw i64 %8818, 5
  %8867 = add nsw i64 %8866, %8719
  %8868 = getelementptr inbounds i16, i16* %blur_x, i64 %8867
  %8869 = bitcast i16* %8868 to <16 x i16>*
  store <16 x i16> %8865, <16 x i16>* %8869, align 2, !tbaa !399
  %8870 = shufflevector <32 x i16> %8864, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8871 = getelementptr inbounds i16, i16* %8868, i64 16
  %8872 = bitcast i16* %8871 to <16 x i16>*
  store <16 x i16> %8870, <16 x i16>* %8872, align 2, !tbaa !399
  br label %"consume blur_x637"

"consume blur_x637":                              ; preds = %"for blur_y.s0.x.x.rebased630.consume blur_x637_crit_edge", %"produce blur_x636"
  %.pre-phi3375 = phi i64 [ %.pre3374, %"for blur_y.s0.x.x.rebased630.consume blur_x637_crit_edge" ], [ %8866, %"produce blur_x636" ]
  %8873 = add nsw i64 %8722, %.pre-phi3375
  %8874 = getelementptr inbounds i16, i16* %blur_x, i64 %8873
  %8875 = bitcast i16* %8874 to <16 x i16>*
  %8876 = load <16 x i16>, <16 x i16>* %8875, align 2, !tbaa !399
  %8877 = getelementptr inbounds i16, i16* %8874, i64 16
  %8878 = bitcast i16* %8877 to <16 x i16>*
  %8879 = load <16 x i16>, <16 x i16>* %8878, align 2, !tbaa !399
  %8880 = add nsw i64 %8725, %.pre-phi3375
  %8881 = getelementptr inbounds i16, i16* %blur_x, i64 %8880
  %8882 = bitcast i16* %8881 to <16 x i16>*
  %8883 = load <16 x i16>, <16 x i16>* %8882, align 2, !tbaa !399
  %8884 = getelementptr inbounds i16, i16* %8881, i64 16
  %8885 = bitcast i16* %8884 to <16 x i16>*
  %8886 = load <16 x i16>, <16 x i16>* %8885, align 2, !tbaa !399
  %8887 = add nsw i64 %8728, %.pre-phi3375
  %8888 = getelementptr inbounds i16, i16* %blur_x, i64 %8887
  %8889 = bitcast i16* %8888 to <16 x i16>*
  %8890 = load <16 x i16>, <16 x i16>* %8889, align 2, !tbaa !399
  %8891 = getelementptr inbounds i16, i16* %8888, i64 16
  %8892 = bitcast i16* %8891 to <16 x i16>*
  %8893 = load <16 x i16>, <16 x i16>* %8892, align 2, !tbaa !399
  %8894 = add <16 x i16> %8883, %8876
  %8895 = add <16 x i16> %8894, %8890
  %8896 = add <16 x i16> %8886, %8879
  %8897 = add <16 x i16> %8896, %8893
  %8898 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8895, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8899 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8897, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8900 = shufflevector <16 x i16> %8898, <16 x i16> %8899, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8901 = lshr <32 x i16> %8900, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8902 = shufflevector <32 x i16> %8901, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8903 = add nsw i64 %8732, %.pre-phi3375
  %8904 = getelementptr inbounds i16, i16* %65, i64 %8903
  %8905 = bitcast i16* %8904 to <16 x i16>*
  store <16 x i16> %8902, <16 x i16>* %8905, align 2, !tbaa !401
  %8906 = shufflevector <32 x i16> %8901, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8907 = getelementptr inbounds i16, i16* %8904, i64 16
  %8908 = bitcast i16* %8907 to <16 x i16>*
  store <16 x i16> %8906, <16 x i16>* %8908, align 2, !tbaa !401
  %indvars.iv.next3210 = add nuw nsw i64 %indvars.iv3209, 1
  %.not2593 = icmp eq i64 %indvars.iv.next3210, %180
  br i1 %.not2593, label %"end for blur_y.s0.x.x.rebased631", label %"for blur_y.s0.x.x.rebased630"

"for blur_y.s0.x.x.rebased638":                   ; preds = %"for blur_y.s0.x.x.rebased638.preheader", %"consume blur_x646"
  %blur_y.s0.x.x.rebased640 = phi i32 [ %8987, %"consume blur_x646" ], [ 0, %"for blur_y.s0.x.x.rebased638.preheader" ]
  %8909 = add nsw i32 %blur_y.s0.x.x.rebased640, %t1582
  %a273 = shl nsw i32 %8909, 5
  %8910 = icmp sgt i32 %a14, %a273
  %b279 = select i1 %8910, i32 %a273, i32 %a14
  %8911 = icmp slt i32 %8909, 1
  %8912 = icmp sgt i32 %4, %a273
  %8913 = or i1 %8911, %8912
  br i1 %8913, label %"produce blur_x644", label %"consume blur_x646"

"end for blur_y.s0.x.x.rebased639":               ; preds = %"consume blur_x646", %"end for blur_y.s0.x.x.rebased631"
  br i1 %34, label %"produce blur_x650", label %after_bb647

"produce blur_x644":                              ; preds = %"for blur_y.s0.x.x.rebased638"
  %8914 = icmp slt i32 %b279, %4
  %blur_x.s0.x.v1.base.s645 = select i1 %8914, i32 %b279, i32 %4
  %t1093 = add nsw i32 %blur_x.s0.x.v1.base.s645, %t2065
  %8915 = sext i32 %t1093 to i64
  %8916 = getelementptr inbounds i16, i16* %read_input, i64 %8915
  %8917 = getelementptr inbounds i16, i16* %8916, i64 1
  %8918 = bitcast i16* %8917 to <16 x i16>*
  %8919 = load <16 x i16>, <16 x i16>* %8918, align 2, !tbaa !396
  %8920 = getelementptr inbounds i16, i16* %8916, i64 17
  %8921 = bitcast i16* %8920 to <16 x i16>*
  %8922 = load <16 x i16>, <16 x i16>* %8921, align 2, !tbaa !396
  %8923 = getelementptr inbounds i16, i16* %8916, i64 2
  %8924 = bitcast i16* %8923 to <16 x i16>*
  %8925 = load <16 x i16>, <16 x i16>* %8924, align 2, !tbaa !396
  %8926 = getelementptr inbounds i16, i16* %8916, i64 18
  %8927 = bitcast i16* %8926 to <16 x i16>*
  %8928 = load <16 x i16>, <16 x i16>* %8927, align 2, !tbaa !396
  %8929 = bitcast i16* %8916 to <16 x i16>*
  %8930 = load <16 x i16>, <16 x i16>* %8929, align 2, !tbaa !396
  %8931 = getelementptr inbounds i16, i16* %8916, i64 16
  %8932 = bitcast i16* %8931 to <16 x i16>*
  %8933 = load <16 x i16>, <16 x i16>* %8932, align 2, !tbaa !396
  %8934 = add <16 x i16> %8925, %8919
  %8935 = add <16 x i16> %8934, %8930
  %8936 = add <16 x i16> %8928, %8922
  %8937 = add <16 x i16> %8936, %8933
  %8938 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8935, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8939 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8937, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8940 = shufflevector <16 x i16> %8938, <16 x i16> %8939, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8941 = lshr <32 x i16> %8940, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8942 = shufflevector <32 x i16> %8941, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8943 = sext i32 %blur_x.s0.x.v1.base.s645 to i64
  %8944 = add nsw i64 %8943, %8824
  %8945 = getelementptr inbounds i16, i16* %blur_x, i64 %8944
  %8946 = bitcast i16* %8945 to <16 x i16>*
  store <16 x i16> %8942, <16 x i16>* %8946, align 2, !tbaa !399
  %8947 = shufflevector <32 x i16> %8941, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8948 = getelementptr inbounds i16, i16* %8945, i64 16
  %8949 = bitcast i16* %8948 to <16 x i16>*
  store <16 x i16> %8947, <16 x i16>* %8949, align 2, !tbaa !399
  br label %"consume blur_x646"

"consume blur_x646":                              ; preds = %"for blur_y.s0.x.x.rebased638", %"produce blur_x644"
  %8950 = sext i32 %b279 to i64
  %8951 = add nsw i64 %8827, %8950
  %8952 = getelementptr inbounds i16, i16* %blur_x, i64 %8951
  %8953 = bitcast i16* %8952 to <16 x i16>*
  %8954 = load <16 x i16>, <16 x i16>* %8953, align 2, !tbaa !399
  %8955 = getelementptr inbounds i16, i16* %8952, i64 16
  %8956 = bitcast i16* %8955 to <16 x i16>*
  %8957 = load <16 x i16>, <16 x i16>* %8956, align 2, !tbaa !399
  %8958 = add nsw i64 %8830, %8950
  %8959 = getelementptr inbounds i16, i16* %blur_x, i64 %8958
  %8960 = bitcast i16* %8959 to <16 x i16>*
  %8961 = load <16 x i16>, <16 x i16>* %8960, align 2, !tbaa !399
  %8962 = getelementptr inbounds i16, i16* %8959, i64 16
  %8963 = bitcast i16* %8962 to <16 x i16>*
  %8964 = load <16 x i16>, <16 x i16>* %8963, align 2, !tbaa !399
  %8965 = add nsw i64 %8833, %8950
  %8966 = getelementptr inbounds i16, i16* %blur_x, i64 %8965
  %8967 = bitcast i16* %8966 to <16 x i16>*
  %8968 = load <16 x i16>, <16 x i16>* %8967, align 2, !tbaa !399
  %8969 = getelementptr inbounds i16, i16* %8966, i64 16
  %8970 = bitcast i16* %8969 to <16 x i16>*
  %8971 = load <16 x i16>, <16 x i16>* %8970, align 2, !tbaa !399
  %8972 = add <16 x i16> %8961, %8954
  %8973 = add <16 x i16> %8972, %8968
  %8974 = add <16 x i16> %8964, %8957
  %8975 = add <16 x i16> %8974, %8971
  %8976 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8973, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8977 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8975, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8978 = shufflevector <16 x i16> %8976, <16 x i16> %8977, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8979 = lshr <32 x i16> %8978, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8980 = shufflevector <32 x i16> %8979, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8981 = add nsw i64 %8837, %8950
  %8982 = getelementptr inbounds i16, i16* %65, i64 %8981
  %8983 = bitcast i16* %8982 to <16 x i16>*
  store <16 x i16> %8980, <16 x i16>* %8983, align 2, !tbaa !401
  %8984 = shufflevector <32 x i16> %8979, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8985 = getelementptr inbounds i16, i16* %8982, i64 16
  %8986 = bitcast i16* %8985 to <16 x i16>*
  store <16 x i16> %8984, <16 x i16>* %8986, align 2, !tbaa !401
  %8987 = add nuw nsw i32 %blur_y.s0.x.x.rebased640, 1
  %.not2592 = icmp eq i32 %8987, %t1639
  br i1 %.not2592, label %"end for blur_y.s0.x.x.rebased639", label %"for blur_y.s0.x.x.rebased638"

after_bb647:                                      ; preds = %"end for blur_y.s0.x.x.rebased639", %"produce blur_x650"
  br i1 %99, label %"for blur_y.s0.x.x.rebased652.preheader", label %"end for blur_y.s0.x.x.rebased653", !prof !386

"for blur_y.s0.x.x.rebased652.preheader":         ; preds = %after_bb647
  %8988 = sext i32 %t1644 to i64
  %8989 = zext i32 %.pre-phi to i64
  %8990 = mul nsw i64 %8989, %108
  %8991 = sub nsw i64 %8990, %95
  %8992 = zext i32 %.pre-phi3313 to i64
  %8993 = mul nsw i64 %8992, %108
  %8994 = sub nsw i64 %8993, %95
  %8995 = zext i32 %.pre-phi3323 to i64
  %8996 = mul nsw i64 %8995, %108
  %8997 = sub nsw i64 %8996, %95
  %8998 = sext i32 %a26 to i64
  %8999 = add nsw i64 %8998, 27
  %9000 = mul nsw i64 %8999, %109
  %9001 = add nsw i64 %9000, %112
  br label %"for blur_y.s0.x.x.rebased652"

"produce blur_x650":                              ; preds = %"end for blur_y.s0.x.x.rebased639"
  %9002 = getelementptr inbounds i16, i16* %read_input, i64 %165
  %9003 = getelementptr inbounds i16, i16* %9002, i64 -31
  %9004 = bitcast i16* %9003 to <16 x i16>*
  %9005 = load <16 x i16>, <16 x i16>* %9004, align 2, !tbaa !396
  %9006 = getelementptr inbounds i16, i16* %9002, i64 -15
  %9007 = bitcast i16* %9006 to <16 x i16>*
  %9008 = load <16 x i16>, <16 x i16>* %9007, align 2, !tbaa !396
  %9009 = getelementptr inbounds i16, i16* %9002, i64 -30
  %9010 = bitcast i16* %9009 to <16 x i16>*
  %9011 = load <16 x i16>, <16 x i16>* %9010, align 2, !tbaa !396
  %9012 = getelementptr inbounds i16, i16* %9002, i64 -14
  %9013 = bitcast i16* %9012 to <16 x i16>*
  %9014 = load <16 x i16>, <16 x i16>* %9013, align 2, !tbaa !396
  %9015 = getelementptr inbounds i16, i16* %9002, i64 -32
  %9016 = bitcast i16* %9015 to <16 x i16>*
  %9017 = load <16 x i16>, <16 x i16>* %9016, align 2, !tbaa !396
  %9018 = getelementptr inbounds i16, i16* %9002, i64 -16
  %9019 = bitcast i16* %9018 to <16 x i16>*
  %9020 = load <16 x i16>, <16 x i16>* %9019, align 2, !tbaa !396
  %9021 = add <16 x i16> %9011, %9005
  %9022 = add <16 x i16> %9021, %9017
  %9023 = add <16 x i16> %9014, %9008
  %9024 = add <16 x i16> %9023, %9020
  %9025 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9022, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9026 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9024, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9027 = shufflevector <16 x i16> %9025, <16 x i16> %9026, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9028 = lshr <32 x i16> %9027, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9029 = shufflevector <32 x i16> %9028, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9030 = zext i32 %.pre-phi3313 to i64
  %9031 = mul nsw i64 %96, %9030
  %9032 = add nsw i64 %98, %9031
  %9033 = getelementptr inbounds i16, i16* %blur_x, i64 %9032
  %9034 = getelementptr inbounds i16, i16* %9033, i64 -32
  %9035 = bitcast i16* %9034 to <16 x i16>*
  store <16 x i16> %9029, <16 x i16>* %9035, align 2, !tbaa !399
  %9036 = shufflevector <32 x i16> %9028, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9037 = getelementptr inbounds i16, i16* %9033, i64 -16
  %9038 = bitcast i16* %9037 to <16 x i16>*
  store <16 x i16> %9036, <16 x i16>* %9038, align 2, !tbaa !399
  %9039 = zext i32 %.pre-phi to i64
  %9040 = mul nsw i64 %9039, %108
  %9041 = add nsw i64 %9040, %93
  %9042 = getelementptr inbounds i16, i16* %blur_x, i64 %9041
  %9043 = getelementptr inbounds i16, i16* %9042, i64 -32
  %9044 = bitcast i16* %9043 to <16 x i16>*
  %9045 = load <16 x i16>, <16 x i16>* %9044, align 2, !tbaa !399
  %9046 = getelementptr inbounds i16, i16* %9042, i64 -16
  %9047 = bitcast i16* %9046 to <16 x i16>*
  %9048 = load <16 x i16>, <16 x i16>* %9047, align 2, !tbaa !399
  %9049 = mul nsw i64 %9030, %108
  %9050 = add nsw i64 %9049, %93
  %9051 = getelementptr inbounds i16, i16* %blur_x, i64 %9050
  %9052 = getelementptr inbounds i16, i16* %9051, i64 -32
  %9053 = bitcast i16* %9052 to <16 x i16>*
  %9054 = load <16 x i16>, <16 x i16>* %9053, align 2, !tbaa !399
  %9055 = getelementptr inbounds i16, i16* %9051, i64 -16
  %9056 = bitcast i16* %9055 to <16 x i16>*
  %9057 = load <16 x i16>, <16 x i16>* %9056, align 2, !tbaa !399
  %9058 = zext i32 %.pre-phi3323 to i64
  %9059 = mul nsw i64 %9058, %108
  %9060 = add nsw i64 %9059, %93
  %9061 = getelementptr inbounds i16, i16* %blur_x, i64 %9060
  %9062 = getelementptr inbounds i16, i16* %9061, i64 -32
  %9063 = bitcast i16* %9062 to <16 x i16>*
  %9064 = load <16 x i16>, <16 x i16>* %9063, align 2, !tbaa !399
  %9065 = getelementptr inbounds i16, i16* %9061, i64 -16
  %9066 = bitcast i16* %9065 to <16 x i16>*
  %9067 = load <16 x i16>, <16 x i16>* %9066, align 2, !tbaa !399
  %9068 = add <16 x i16> %9054, %9045
  %9069 = add <16 x i16> %9068, %9064
  %9070 = add <16 x i16> %9057, %9048
  %9071 = add <16 x i16> %9070, %9067
  %9072 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9069, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9073 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9071, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9074 = shufflevector <16 x i16> %9072, <16 x i16> %9073, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9075 = lshr <32 x i16> %9074, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9076 = shufflevector <32 x i16> %9075, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9077 = sext i32 %a26 to i64
  %9078 = add nsw i64 %9077, 27
  %9079 = mul nsw i64 %9078, %109
  %9080 = add nsw i64 %111, %9079
  %9081 = getelementptr inbounds i16, i16* %65, i64 %9080
  %9082 = getelementptr inbounds i16, i16* %9081, i64 -32
  %9083 = bitcast i16* %9082 to <16 x i16>*
  store <16 x i16> %9076, <16 x i16>* %9083, align 2, !tbaa !401
  %9084 = shufflevector <32 x i16> %9075, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9085 = getelementptr inbounds i16, i16* %9081, i64 -16
  %9086 = bitcast i16* %9085 to <16 x i16>*
  store <16 x i16> %9084, <16 x i16>* %9086, align 2, !tbaa !401
  br label %after_bb647

"for blur_y.s0.x.x.rebased652":                   ; preds = %"for blur_y.s0.x.x.rebased652.preheader", %"consume blur_x659"
  %indvars.iv3212 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased652.preheader" ], [ %indvars.iv.next3213, %"consume blur_x659" ]
  %9087 = add nsw i64 %indvars.iv3212, %100
  %9088 = icmp slt i64 %9087, 1
  %9089 = trunc i64 %9087 to i32
  %9090 = shl nsw i32 %9089, 5
  %9091 = icmp sgt i32 %4, %9090
  %9092 = or i1 %9088, %9091
  br i1 %9092, label %"produce blur_x658", label %"for blur_y.s0.x.x.rebased652.consume blur_x659_crit_edge"

"for blur_y.s0.x.x.rebased652.consume blur_x659_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased652"
  %.pre3376 = shl nsw i64 %9087, 5
  br label %"consume blur_x659"

"end for blur_y.s0.x.x.rebased653":               ; preds = %"consume blur_x659", %after_bb647
  br i1 %101, label %"for blur_y.s0.x.x.rebased660.preheader", label %"end for blur_y.s0.x.x.rebased661", !prof !386

"for blur_y.s0.x.x.rebased660.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased653"
  %9093 = sext i32 %t1644 to i64
  %9094 = zext i32 %.pre-phi to i64
  %9095 = mul nsw i64 %9094, %108
  %9096 = sub nsw i64 %9095, %95
  %9097 = zext i32 %.pre-phi3313 to i64
  %9098 = mul nsw i64 %9097, %108
  %9099 = sub nsw i64 %9098, %95
  %9100 = zext i32 %.pre-phi3323 to i64
  %9101 = mul nsw i64 %9100, %108
  %9102 = sub nsw i64 %9101, %95
  %9103 = sext i32 %a26 to i64
  %9104 = add nsw i64 %9103, 27
  %9105 = mul nsw i64 %9104, %109
  %9106 = add nsw i64 %9105, %112
  br label %"for blur_y.s0.x.x.rebased660"

"produce blur_x658":                              ; preds = %"for blur_y.s0.x.x.rebased652"
  %t1104 = add nsw i32 %9090, %t2081
  %9107 = sext i32 %t1104 to i64
  %9108 = getelementptr inbounds i16, i16* %read_input, i64 %9107
  %9109 = getelementptr inbounds i16, i16* %9108, i64 1
  %9110 = bitcast i16* %9109 to <16 x i16>*
  %9111 = load <16 x i16>, <16 x i16>* %9110, align 2, !tbaa !396
  %9112 = getelementptr inbounds i16, i16* %9108, i64 17
  %9113 = bitcast i16* %9112 to <16 x i16>*
  %9114 = load <16 x i16>, <16 x i16>* %9113, align 2, !tbaa !396
  %9115 = getelementptr inbounds i16, i16* %9108, i64 2
  %9116 = bitcast i16* %9115 to <16 x i16>*
  %9117 = load <16 x i16>, <16 x i16>* %9116, align 2, !tbaa !396
  %9118 = getelementptr inbounds i16, i16* %9108, i64 18
  %9119 = bitcast i16* %9118 to <16 x i16>*
  %9120 = load <16 x i16>, <16 x i16>* %9119, align 2, !tbaa !396
  %9121 = bitcast i16* %9108 to <16 x i16>*
  %9122 = load <16 x i16>, <16 x i16>* %9121, align 2, !tbaa !396
  %9123 = getelementptr inbounds i16, i16* %9108, i64 16
  %9124 = bitcast i16* %9123 to <16 x i16>*
  %9125 = load <16 x i16>, <16 x i16>* %9124, align 2, !tbaa !396
  %9126 = add <16 x i16> %9117, %9111
  %9127 = add <16 x i16> %9126, %9122
  %9128 = add <16 x i16> %9120, %9114
  %9129 = add <16 x i16> %9128, %9125
  %9130 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9127, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9131 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9129, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9132 = shufflevector <16 x i16> %9130, <16 x i16> %9131, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9133 = lshr <32 x i16> %9132, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9134 = shufflevector <32 x i16> %9133, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9135 = shl nsw i64 %9087, 5
  %9136 = add nsw i64 %9135, %8988
  %9137 = getelementptr inbounds i16, i16* %blur_x, i64 %9136
  %9138 = bitcast i16* %9137 to <16 x i16>*
  store <16 x i16> %9134, <16 x i16>* %9138, align 2, !tbaa !399
  %9139 = shufflevector <32 x i16> %9133, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9140 = getelementptr inbounds i16, i16* %9137, i64 16
  %9141 = bitcast i16* %9140 to <16 x i16>*
  store <16 x i16> %9139, <16 x i16>* %9141, align 2, !tbaa !399
  br label %"consume blur_x659"

"consume blur_x659":                              ; preds = %"for blur_y.s0.x.x.rebased652.consume blur_x659_crit_edge", %"produce blur_x658"
  %.pre-phi3377 = phi i64 [ %.pre3376, %"for blur_y.s0.x.x.rebased652.consume blur_x659_crit_edge" ], [ %9135, %"produce blur_x658" ]
  %9142 = add nsw i64 %8991, %.pre-phi3377
  %9143 = getelementptr inbounds i16, i16* %blur_x, i64 %9142
  %9144 = bitcast i16* %9143 to <16 x i16>*
  %9145 = load <16 x i16>, <16 x i16>* %9144, align 2, !tbaa !399
  %9146 = getelementptr inbounds i16, i16* %9143, i64 16
  %9147 = bitcast i16* %9146 to <16 x i16>*
  %9148 = load <16 x i16>, <16 x i16>* %9147, align 2, !tbaa !399
  %9149 = add nsw i64 %8994, %.pre-phi3377
  %9150 = getelementptr inbounds i16, i16* %blur_x, i64 %9149
  %9151 = bitcast i16* %9150 to <16 x i16>*
  %9152 = load <16 x i16>, <16 x i16>* %9151, align 2, !tbaa !399
  %9153 = getelementptr inbounds i16, i16* %9150, i64 16
  %9154 = bitcast i16* %9153 to <16 x i16>*
  %9155 = load <16 x i16>, <16 x i16>* %9154, align 2, !tbaa !399
  %9156 = add nsw i64 %8997, %.pre-phi3377
  %9157 = getelementptr inbounds i16, i16* %blur_x, i64 %9156
  %9158 = bitcast i16* %9157 to <16 x i16>*
  %9159 = load <16 x i16>, <16 x i16>* %9158, align 2, !tbaa !399
  %9160 = getelementptr inbounds i16, i16* %9157, i64 16
  %9161 = bitcast i16* %9160 to <16 x i16>*
  %9162 = load <16 x i16>, <16 x i16>* %9161, align 2, !tbaa !399
  %9163 = add <16 x i16> %9152, %9145
  %9164 = add <16 x i16> %9163, %9159
  %9165 = add <16 x i16> %9155, %9148
  %9166 = add <16 x i16> %9165, %9162
  %9167 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9164, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9168 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9166, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9169 = shufflevector <16 x i16> %9167, <16 x i16> %9168, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9170 = lshr <32 x i16> %9169, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9171 = shufflevector <32 x i16> %9170, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9172 = add nsw i64 %9001, %.pre-phi3377
  %9173 = getelementptr inbounds i16, i16* %65, i64 %9172
  %9174 = bitcast i16* %9173 to <16 x i16>*
  store <16 x i16> %9171, <16 x i16>* %9174, align 2, !tbaa !401
  %9175 = shufflevector <32 x i16> %9170, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9176 = getelementptr inbounds i16, i16* %9173, i64 16
  %9177 = bitcast i16* %9176 to <16 x i16>*
  store <16 x i16> %9175, <16 x i16>* %9177, align 2, !tbaa !401
  %indvars.iv.next3213 = add nuw nsw i64 %indvars.iv3212, 1
  %.not2591 = icmp eq i64 %indvars.iv.next3213, %180
  br i1 %.not2591, label %"end for blur_y.s0.x.x.rebased653", label %"for blur_y.s0.x.x.rebased652"

"for blur_y.s0.x.x.rebased660":                   ; preds = %"for blur_y.s0.x.x.rebased660.preheader", %"consume blur_x668"
  %blur_y.s0.x.x.rebased662 = phi i32 [ %9256, %"consume blur_x668" ], [ 0, %"for blur_y.s0.x.x.rebased660.preheader" ]
  %9178 = add nsw i32 %blur_y.s0.x.x.rebased662, %t1582
  %a280 = shl nsw i32 %9178, 5
  %9179 = icmp sgt i32 %a14, %a280
  %b286 = select i1 %9179, i32 %a280, i32 %a14
  %9180 = icmp slt i32 %9178, 1
  %9181 = icmp sgt i32 %4, %a280
  %9182 = or i1 %9180, %9181
  br i1 %9182, label %"produce blur_x666", label %"consume blur_x668"

"end for blur_y.s0.x.x.rebased661":               ; preds = %"consume blur_x668", %"end for blur_y.s0.x.x.rebased653"
  br i1 %34, label %"produce blur_x672", label %after_bb669

"produce blur_x666":                              ; preds = %"for blur_y.s0.x.x.rebased660"
  %9183 = icmp slt i32 %b286, %4
  %blur_x.s0.x.v1.base.s667 = select i1 %9183, i32 %b286, i32 %4
  %t1109 = add nsw i32 %blur_x.s0.x.v1.base.s667, %t2081
  %9184 = sext i32 %t1109 to i64
  %9185 = getelementptr inbounds i16, i16* %read_input, i64 %9184
  %9186 = getelementptr inbounds i16, i16* %9185, i64 1
  %9187 = bitcast i16* %9186 to <16 x i16>*
  %9188 = load <16 x i16>, <16 x i16>* %9187, align 2, !tbaa !396
  %9189 = getelementptr inbounds i16, i16* %9185, i64 17
  %9190 = bitcast i16* %9189 to <16 x i16>*
  %9191 = load <16 x i16>, <16 x i16>* %9190, align 2, !tbaa !396
  %9192 = getelementptr inbounds i16, i16* %9185, i64 2
  %9193 = bitcast i16* %9192 to <16 x i16>*
  %9194 = load <16 x i16>, <16 x i16>* %9193, align 2, !tbaa !396
  %9195 = getelementptr inbounds i16, i16* %9185, i64 18
  %9196 = bitcast i16* %9195 to <16 x i16>*
  %9197 = load <16 x i16>, <16 x i16>* %9196, align 2, !tbaa !396
  %9198 = bitcast i16* %9185 to <16 x i16>*
  %9199 = load <16 x i16>, <16 x i16>* %9198, align 2, !tbaa !396
  %9200 = getelementptr inbounds i16, i16* %9185, i64 16
  %9201 = bitcast i16* %9200 to <16 x i16>*
  %9202 = load <16 x i16>, <16 x i16>* %9201, align 2, !tbaa !396
  %9203 = add <16 x i16> %9194, %9188
  %9204 = add <16 x i16> %9203, %9199
  %9205 = add <16 x i16> %9197, %9191
  %9206 = add <16 x i16> %9205, %9202
  %9207 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9204, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9208 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9206, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9209 = shufflevector <16 x i16> %9207, <16 x i16> %9208, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9210 = lshr <32 x i16> %9209, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9211 = shufflevector <32 x i16> %9210, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9212 = sext i32 %blur_x.s0.x.v1.base.s667 to i64
  %9213 = add nsw i64 %9212, %9093
  %9214 = getelementptr inbounds i16, i16* %blur_x, i64 %9213
  %9215 = bitcast i16* %9214 to <16 x i16>*
  store <16 x i16> %9211, <16 x i16>* %9215, align 2, !tbaa !399
  %9216 = shufflevector <32 x i16> %9210, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9217 = getelementptr inbounds i16, i16* %9214, i64 16
  %9218 = bitcast i16* %9217 to <16 x i16>*
  store <16 x i16> %9216, <16 x i16>* %9218, align 2, !tbaa !399
  br label %"consume blur_x668"

"consume blur_x668":                              ; preds = %"for blur_y.s0.x.x.rebased660", %"produce blur_x666"
  %9219 = sext i32 %b286 to i64
  %9220 = add nsw i64 %9096, %9219
  %9221 = getelementptr inbounds i16, i16* %blur_x, i64 %9220
  %9222 = bitcast i16* %9221 to <16 x i16>*
  %9223 = load <16 x i16>, <16 x i16>* %9222, align 2, !tbaa !399
  %9224 = getelementptr inbounds i16, i16* %9221, i64 16
  %9225 = bitcast i16* %9224 to <16 x i16>*
  %9226 = load <16 x i16>, <16 x i16>* %9225, align 2, !tbaa !399
  %9227 = add nsw i64 %9099, %9219
  %9228 = getelementptr inbounds i16, i16* %blur_x, i64 %9227
  %9229 = bitcast i16* %9228 to <16 x i16>*
  %9230 = load <16 x i16>, <16 x i16>* %9229, align 2, !tbaa !399
  %9231 = getelementptr inbounds i16, i16* %9228, i64 16
  %9232 = bitcast i16* %9231 to <16 x i16>*
  %9233 = load <16 x i16>, <16 x i16>* %9232, align 2, !tbaa !399
  %9234 = add nsw i64 %9102, %9219
  %9235 = getelementptr inbounds i16, i16* %blur_x, i64 %9234
  %9236 = bitcast i16* %9235 to <16 x i16>*
  %9237 = load <16 x i16>, <16 x i16>* %9236, align 2, !tbaa !399
  %9238 = getelementptr inbounds i16, i16* %9235, i64 16
  %9239 = bitcast i16* %9238 to <16 x i16>*
  %9240 = load <16 x i16>, <16 x i16>* %9239, align 2, !tbaa !399
  %9241 = add <16 x i16> %9230, %9223
  %9242 = add <16 x i16> %9241, %9237
  %9243 = add <16 x i16> %9233, %9226
  %9244 = add <16 x i16> %9243, %9240
  %9245 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9242, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9246 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9244, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9247 = shufflevector <16 x i16> %9245, <16 x i16> %9246, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9248 = lshr <32 x i16> %9247, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9249 = shufflevector <32 x i16> %9248, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9250 = add nsw i64 %9106, %9219
  %9251 = getelementptr inbounds i16, i16* %65, i64 %9250
  %9252 = bitcast i16* %9251 to <16 x i16>*
  store <16 x i16> %9249, <16 x i16>* %9252, align 2, !tbaa !401
  %9253 = shufflevector <32 x i16> %9248, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9254 = getelementptr inbounds i16, i16* %9251, i64 16
  %9255 = bitcast i16* %9254 to <16 x i16>*
  store <16 x i16> %9253, <16 x i16>* %9255, align 2, !tbaa !401
  %9256 = add nuw nsw i32 %blur_y.s0.x.x.rebased662, 1
  %.not2590 = icmp eq i32 %9256, %t1639
  br i1 %.not2590, label %"end for blur_y.s0.x.x.rebased661", label %"for blur_y.s0.x.x.rebased660"

after_bb669:                                      ; preds = %"end for blur_y.s0.x.x.rebased661", %"produce blur_x672"
  br i1 %99, label %"for blur_y.s0.x.x.rebased674.preheader", label %"end for blur_y.s0.x.x.rebased675", !prof !386

"for blur_y.s0.x.x.rebased674.preheader":         ; preds = %after_bb669
  %9257 = sext i32 %t1650 to i64
  %9258 = zext i32 %.pre-phi3313 to i64
  %9259 = mul nsw i64 %9258, %108
  %9260 = sub nsw i64 %9259, %95
  %9261 = zext i32 %.pre-phi3317 to i64
  %9262 = mul nsw i64 %9261, %108
  %9263 = sub nsw i64 %9262, %95
  %9264 = zext i32 %.pre-phi to i64
  %9265 = mul nsw i64 %9264, %108
  %9266 = sub nsw i64 %9265, %95
  %9267 = sext i32 %a26 to i64
  %9268 = add nsw i64 %9267, 28
  %9269 = mul nsw i64 %9268, %109
  %9270 = add nsw i64 %9269, %112
  br label %"for blur_y.s0.x.x.rebased674"

"produce blur_x672":                              ; preds = %"end for blur_y.s0.x.x.rebased661"
  %9271 = getelementptr inbounds i16, i16* %read_input, i64 %167
  %9272 = getelementptr inbounds i16, i16* %9271, i64 -31
  %9273 = bitcast i16* %9272 to <16 x i16>*
  %9274 = load <16 x i16>, <16 x i16>* %9273, align 2, !tbaa !396
  %9275 = getelementptr inbounds i16, i16* %9271, i64 -15
  %9276 = bitcast i16* %9275 to <16 x i16>*
  %9277 = load <16 x i16>, <16 x i16>* %9276, align 2, !tbaa !396
  %9278 = getelementptr inbounds i16, i16* %9271, i64 -30
  %9279 = bitcast i16* %9278 to <16 x i16>*
  %9280 = load <16 x i16>, <16 x i16>* %9279, align 2, !tbaa !396
  %9281 = getelementptr inbounds i16, i16* %9271, i64 -14
  %9282 = bitcast i16* %9281 to <16 x i16>*
  %9283 = load <16 x i16>, <16 x i16>* %9282, align 2, !tbaa !396
  %9284 = getelementptr inbounds i16, i16* %9271, i64 -32
  %9285 = bitcast i16* %9284 to <16 x i16>*
  %9286 = load <16 x i16>, <16 x i16>* %9285, align 2, !tbaa !396
  %9287 = getelementptr inbounds i16, i16* %9271, i64 -16
  %9288 = bitcast i16* %9287 to <16 x i16>*
  %9289 = load <16 x i16>, <16 x i16>* %9288, align 2, !tbaa !396
  %9290 = add <16 x i16> %9280, %9274
  %9291 = add <16 x i16> %9290, %9286
  %9292 = add <16 x i16> %9283, %9277
  %9293 = add <16 x i16> %9292, %9289
  %9294 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9291, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9295 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9293, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9296 = shufflevector <16 x i16> %9294, <16 x i16> %9295, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9297 = lshr <32 x i16> %9296, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9298 = shufflevector <32 x i16> %9297, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9299 = zext i32 %.pre-phi3317 to i64
  %9300 = mul nsw i64 %96, %9299
  %9301 = add nsw i64 %98, %9300
  %9302 = getelementptr inbounds i16, i16* %blur_x, i64 %9301
  %9303 = getelementptr inbounds i16, i16* %9302, i64 -32
  %9304 = bitcast i16* %9303 to <16 x i16>*
  store <16 x i16> %9298, <16 x i16>* %9304, align 2, !tbaa !399
  %9305 = shufflevector <32 x i16> %9297, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9306 = getelementptr inbounds i16, i16* %9302, i64 -16
  %9307 = bitcast i16* %9306 to <16 x i16>*
  store <16 x i16> %9305, <16 x i16>* %9307, align 2, !tbaa !399
  %9308 = zext i32 %.pre-phi3313 to i64
  %9309 = mul nsw i64 %9308, %108
  %9310 = add nsw i64 %9309, %93
  %9311 = getelementptr inbounds i16, i16* %blur_x, i64 %9310
  %9312 = getelementptr inbounds i16, i16* %9311, i64 -32
  %9313 = bitcast i16* %9312 to <16 x i16>*
  %9314 = load <16 x i16>, <16 x i16>* %9313, align 2, !tbaa !399
  %9315 = getelementptr inbounds i16, i16* %9311, i64 -16
  %9316 = bitcast i16* %9315 to <16 x i16>*
  %9317 = load <16 x i16>, <16 x i16>* %9316, align 2, !tbaa !399
  %9318 = mul nsw i64 %9299, %108
  %9319 = add nsw i64 %9318, %93
  %9320 = getelementptr inbounds i16, i16* %blur_x, i64 %9319
  %9321 = getelementptr inbounds i16, i16* %9320, i64 -32
  %9322 = bitcast i16* %9321 to <16 x i16>*
  %9323 = load <16 x i16>, <16 x i16>* %9322, align 2, !tbaa !399
  %9324 = getelementptr inbounds i16, i16* %9320, i64 -16
  %9325 = bitcast i16* %9324 to <16 x i16>*
  %9326 = load <16 x i16>, <16 x i16>* %9325, align 2, !tbaa !399
  %9327 = zext i32 %.pre-phi to i64
  %9328 = mul nsw i64 %9327, %108
  %9329 = add nsw i64 %9328, %93
  %9330 = getelementptr inbounds i16, i16* %blur_x, i64 %9329
  %9331 = getelementptr inbounds i16, i16* %9330, i64 -32
  %9332 = bitcast i16* %9331 to <16 x i16>*
  %9333 = load <16 x i16>, <16 x i16>* %9332, align 2, !tbaa !399
  %9334 = getelementptr inbounds i16, i16* %9330, i64 -16
  %9335 = bitcast i16* %9334 to <16 x i16>*
  %9336 = load <16 x i16>, <16 x i16>* %9335, align 2, !tbaa !399
  %9337 = add <16 x i16> %9323, %9314
  %9338 = add <16 x i16> %9337, %9333
  %9339 = add <16 x i16> %9326, %9317
  %9340 = add <16 x i16> %9339, %9336
  %9341 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9338, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9342 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9340, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9343 = shufflevector <16 x i16> %9341, <16 x i16> %9342, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9344 = lshr <32 x i16> %9343, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9345 = shufflevector <32 x i16> %9344, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9346 = sext i32 %a26 to i64
  %9347 = add nsw i64 %9346, 28
  %9348 = mul nsw i64 %9347, %109
  %9349 = add nsw i64 %111, %9348
  %9350 = getelementptr inbounds i16, i16* %65, i64 %9349
  %9351 = getelementptr inbounds i16, i16* %9350, i64 -32
  %9352 = bitcast i16* %9351 to <16 x i16>*
  store <16 x i16> %9345, <16 x i16>* %9352, align 2, !tbaa !401
  %9353 = shufflevector <32 x i16> %9344, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9354 = getelementptr inbounds i16, i16* %9350, i64 -16
  %9355 = bitcast i16* %9354 to <16 x i16>*
  store <16 x i16> %9353, <16 x i16>* %9355, align 2, !tbaa !401
  br label %after_bb669

"for blur_y.s0.x.x.rebased674":                   ; preds = %"for blur_y.s0.x.x.rebased674.preheader", %"consume blur_x681"
  %indvars.iv3215 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased674.preheader" ], [ %indvars.iv.next3216, %"consume blur_x681" ]
  %9356 = add nsw i64 %indvars.iv3215, %100
  %9357 = icmp slt i64 %9356, 1
  %9358 = trunc i64 %9356 to i32
  %9359 = shl nsw i32 %9358, 5
  %9360 = icmp sgt i32 %4, %9359
  %9361 = or i1 %9357, %9360
  br i1 %9361, label %"produce blur_x680", label %"for blur_y.s0.x.x.rebased674.consume blur_x681_crit_edge"

"for blur_y.s0.x.x.rebased674.consume blur_x681_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased674"
  %.pre3378 = shl nsw i64 %9356, 5
  br label %"consume blur_x681"

"end for blur_y.s0.x.x.rebased675":               ; preds = %"consume blur_x681", %after_bb669
  br i1 %101, label %"for blur_y.s0.x.x.rebased682.preheader", label %"end for blur_y.s0.x.x.rebased683", !prof !386

"for blur_y.s0.x.x.rebased682.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased675"
  %9362 = sext i32 %t1650 to i64
  %9363 = zext i32 %.pre-phi3313 to i64
  %9364 = mul nsw i64 %9363, %108
  %9365 = sub nsw i64 %9364, %95
  %9366 = zext i32 %.pre-phi3317 to i64
  %9367 = mul nsw i64 %9366, %108
  %9368 = sub nsw i64 %9367, %95
  %9369 = zext i32 %.pre-phi to i64
  %9370 = mul nsw i64 %9369, %108
  %9371 = sub nsw i64 %9370, %95
  %9372 = sext i32 %a26 to i64
  %9373 = add nsw i64 %9372, 28
  %9374 = mul nsw i64 %9373, %109
  %9375 = add nsw i64 %9374, %112
  br label %"for blur_y.s0.x.x.rebased682"

"produce blur_x680":                              ; preds = %"for blur_y.s0.x.x.rebased674"
  %t1120 = add nsw i32 %9359, %t2097
  %9376 = sext i32 %t1120 to i64
  %9377 = getelementptr inbounds i16, i16* %read_input, i64 %9376
  %9378 = getelementptr inbounds i16, i16* %9377, i64 1
  %9379 = bitcast i16* %9378 to <16 x i16>*
  %9380 = load <16 x i16>, <16 x i16>* %9379, align 2, !tbaa !396
  %9381 = getelementptr inbounds i16, i16* %9377, i64 17
  %9382 = bitcast i16* %9381 to <16 x i16>*
  %9383 = load <16 x i16>, <16 x i16>* %9382, align 2, !tbaa !396
  %9384 = getelementptr inbounds i16, i16* %9377, i64 2
  %9385 = bitcast i16* %9384 to <16 x i16>*
  %9386 = load <16 x i16>, <16 x i16>* %9385, align 2, !tbaa !396
  %9387 = getelementptr inbounds i16, i16* %9377, i64 18
  %9388 = bitcast i16* %9387 to <16 x i16>*
  %9389 = load <16 x i16>, <16 x i16>* %9388, align 2, !tbaa !396
  %9390 = bitcast i16* %9377 to <16 x i16>*
  %9391 = load <16 x i16>, <16 x i16>* %9390, align 2, !tbaa !396
  %9392 = getelementptr inbounds i16, i16* %9377, i64 16
  %9393 = bitcast i16* %9392 to <16 x i16>*
  %9394 = load <16 x i16>, <16 x i16>* %9393, align 2, !tbaa !396
  %9395 = add <16 x i16> %9386, %9380
  %9396 = add <16 x i16> %9395, %9391
  %9397 = add <16 x i16> %9389, %9383
  %9398 = add <16 x i16> %9397, %9394
  %9399 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9396, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9398, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9401 = shufflevector <16 x i16> %9399, <16 x i16> %9400, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9402 = lshr <32 x i16> %9401, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9403 = shufflevector <32 x i16> %9402, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9404 = shl nsw i64 %9356, 5
  %9405 = add nsw i64 %9404, %9257
  %9406 = getelementptr inbounds i16, i16* %blur_x, i64 %9405
  %9407 = bitcast i16* %9406 to <16 x i16>*
  store <16 x i16> %9403, <16 x i16>* %9407, align 2, !tbaa !399
  %9408 = shufflevector <32 x i16> %9402, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9409 = getelementptr inbounds i16, i16* %9406, i64 16
  %9410 = bitcast i16* %9409 to <16 x i16>*
  store <16 x i16> %9408, <16 x i16>* %9410, align 2, !tbaa !399
  br label %"consume blur_x681"

"consume blur_x681":                              ; preds = %"for blur_y.s0.x.x.rebased674.consume blur_x681_crit_edge", %"produce blur_x680"
  %.pre-phi3379 = phi i64 [ %.pre3378, %"for blur_y.s0.x.x.rebased674.consume blur_x681_crit_edge" ], [ %9404, %"produce blur_x680" ]
  %9411 = add nsw i64 %9260, %.pre-phi3379
  %9412 = getelementptr inbounds i16, i16* %blur_x, i64 %9411
  %9413 = bitcast i16* %9412 to <16 x i16>*
  %9414 = load <16 x i16>, <16 x i16>* %9413, align 2, !tbaa !399
  %9415 = getelementptr inbounds i16, i16* %9412, i64 16
  %9416 = bitcast i16* %9415 to <16 x i16>*
  %9417 = load <16 x i16>, <16 x i16>* %9416, align 2, !tbaa !399
  %9418 = add nsw i64 %9263, %.pre-phi3379
  %9419 = getelementptr inbounds i16, i16* %blur_x, i64 %9418
  %9420 = bitcast i16* %9419 to <16 x i16>*
  %9421 = load <16 x i16>, <16 x i16>* %9420, align 2, !tbaa !399
  %9422 = getelementptr inbounds i16, i16* %9419, i64 16
  %9423 = bitcast i16* %9422 to <16 x i16>*
  %9424 = load <16 x i16>, <16 x i16>* %9423, align 2, !tbaa !399
  %9425 = add nsw i64 %9266, %.pre-phi3379
  %9426 = getelementptr inbounds i16, i16* %blur_x, i64 %9425
  %9427 = bitcast i16* %9426 to <16 x i16>*
  %9428 = load <16 x i16>, <16 x i16>* %9427, align 2, !tbaa !399
  %9429 = getelementptr inbounds i16, i16* %9426, i64 16
  %9430 = bitcast i16* %9429 to <16 x i16>*
  %9431 = load <16 x i16>, <16 x i16>* %9430, align 2, !tbaa !399
  %9432 = add <16 x i16> %9421, %9414
  %9433 = add <16 x i16> %9432, %9428
  %9434 = add <16 x i16> %9424, %9417
  %9435 = add <16 x i16> %9434, %9431
  %9436 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9433, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9437 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9435, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9438 = shufflevector <16 x i16> %9436, <16 x i16> %9437, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9439 = lshr <32 x i16> %9438, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9440 = shufflevector <32 x i16> %9439, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9441 = add nsw i64 %9270, %.pre-phi3379
  %9442 = getelementptr inbounds i16, i16* %65, i64 %9441
  %9443 = bitcast i16* %9442 to <16 x i16>*
  store <16 x i16> %9440, <16 x i16>* %9443, align 2, !tbaa !401
  %9444 = shufflevector <32 x i16> %9439, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9445 = getelementptr inbounds i16, i16* %9442, i64 16
  %9446 = bitcast i16* %9445 to <16 x i16>*
  store <16 x i16> %9444, <16 x i16>* %9446, align 2, !tbaa !401
  %indvars.iv.next3216 = add nuw nsw i64 %indvars.iv3215, 1
  %.not2589 = icmp eq i64 %indvars.iv.next3216, %180
  br i1 %.not2589, label %"end for blur_y.s0.x.x.rebased675", label %"for blur_y.s0.x.x.rebased674"

"for blur_y.s0.x.x.rebased682":                   ; preds = %"for blur_y.s0.x.x.rebased682.preheader", %"consume blur_x690"
  %blur_y.s0.x.x.rebased684 = phi i32 [ %9525, %"consume blur_x690" ], [ 0, %"for blur_y.s0.x.x.rebased682.preheader" ]
  %9447 = add nsw i32 %blur_y.s0.x.x.rebased684, %t1582
  %a287 = shl nsw i32 %9447, 5
  %9448 = icmp sgt i32 %a14, %a287
  %b293 = select i1 %9448, i32 %a287, i32 %a14
  %9449 = icmp slt i32 %9447, 1
  %9450 = icmp sgt i32 %4, %a287
  %9451 = or i1 %9449, %9450
  br i1 %9451, label %"produce blur_x688", label %"consume blur_x690"

"end for blur_y.s0.x.x.rebased683":               ; preds = %"consume blur_x690", %"end for blur_y.s0.x.x.rebased675"
  br i1 %34, label %"produce blur_x694", label %after_bb691

"produce blur_x688":                              ; preds = %"for blur_y.s0.x.x.rebased682"
  %9452 = icmp slt i32 %b293, %4
  %blur_x.s0.x.v1.base.s689 = select i1 %9452, i32 %b293, i32 %4
  %t1125 = add nsw i32 %blur_x.s0.x.v1.base.s689, %t2097
  %9453 = sext i32 %t1125 to i64
  %9454 = getelementptr inbounds i16, i16* %read_input, i64 %9453
  %9455 = getelementptr inbounds i16, i16* %9454, i64 1
  %9456 = bitcast i16* %9455 to <16 x i16>*
  %9457 = load <16 x i16>, <16 x i16>* %9456, align 2, !tbaa !396
  %9458 = getelementptr inbounds i16, i16* %9454, i64 17
  %9459 = bitcast i16* %9458 to <16 x i16>*
  %9460 = load <16 x i16>, <16 x i16>* %9459, align 2, !tbaa !396
  %9461 = getelementptr inbounds i16, i16* %9454, i64 2
  %9462 = bitcast i16* %9461 to <16 x i16>*
  %9463 = load <16 x i16>, <16 x i16>* %9462, align 2, !tbaa !396
  %9464 = getelementptr inbounds i16, i16* %9454, i64 18
  %9465 = bitcast i16* %9464 to <16 x i16>*
  %9466 = load <16 x i16>, <16 x i16>* %9465, align 2, !tbaa !396
  %9467 = bitcast i16* %9454 to <16 x i16>*
  %9468 = load <16 x i16>, <16 x i16>* %9467, align 2, !tbaa !396
  %9469 = getelementptr inbounds i16, i16* %9454, i64 16
  %9470 = bitcast i16* %9469 to <16 x i16>*
  %9471 = load <16 x i16>, <16 x i16>* %9470, align 2, !tbaa !396
  %9472 = add <16 x i16> %9463, %9457
  %9473 = add <16 x i16> %9472, %9468
  %9474 = add <16 x i16> %9466, %9460
  %9475 = add <16 x i16> %9474, %9471
  %9476 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9473, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9477 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9475, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9478 = shufflevector <16 x i16> %9476, <16 x i16> %9477, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9479 = lshr <32 x i16> %9478, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9480 = shufflevector <32 x i16> %9479, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9481 = sext i32 %blur_x.s0.x.v1.base.s689 to i64
  %9482 = add nsw i64 %9481, %9362
  %9483 = getelementptr inbounds i16, i16* %blur_x, i64 %9482
  %9484 = bitcast i16* %9483 to <16 x i16>*
  store <16 x i16> %9480, <16 x i16>* %9484, align 2, !tbaa !399
  %9485 = shufflevector <32 x i16> %9479, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9486 = getelementptr inbounds i16, i16* %9483, i64 16
  %9487 = bitcast i16* %9486 to <16 x i16>*
  store <16 x i16> %9485, <16 x i16>* %9487, align 2, !tbaa !399
  br label %"consume blur_x690"

"consume blur_x690":                              ; preds = %"for blur_y.s0.x.x.rebased682", %"produce blur_x688"
  %9488 = sext i32 %b293 to i64
  %9489 = add nsw i64 %9365, %9488
  %9490 = getelementptr inbounds i16, i16* %blur_x, i64 %9489
  %9491 = bitcast i16* %9490 to <16 x i16>*
  %9492 = load <16 x i16>, <16 x i16>* %9491, align 2, !tbaa !399
  %9493 = getelementptr inbounds i16, i16* %9490, i64 16
  %9494 = bitcast i16* %9493 to <16 x i16>*
  %9495 = load <16 x i16>, <16 x i16>* %9494, align 2, !tbaa !399
  %9496 = add nsw i64 %9368, %9488
  %9497 = getelementptr inbounds i16, i16* %blur_x, i64 %9496
  %9498 = bitcast i16* %9497 to <16 x i16>*
  %9499 = load <16 x i16>, <16 x i16>* %9498, align 2, !tbaa !399
  %9500 = getelementptr inbounds i16, i16* %9497, i64 16
  %9501 = bitcast i16* %9500 to <16 x i16>*
  %9502 = load <16 x i16>, <16 x i16>* %9501, align 2, !tbaa !399
  %9503 = add nsw i64 %9371, %9488
  %9504 = getelementptr inbounds i16, i16* %blur_x, i64 %9503
  %9505 = bitcast i16* %9504 to <16 x i16>*
  %9506 = load <16 x i16>, <16 x i16>* %9505, align 2, !tbaa !399
  %9507 = getelementptr inbounds i16, i16* %9504, i64 16
  %9508 = bitcast i16* %9507 to <16 x i16>*
  %9509 = load <16 x i16>, <16 x i16>* %9508, align 2, !tbaa !399
  %9510 = add <16 x i16> %9499, %9492
  %9511 = add <16 x i16> %9510, %9506
  %9512 = add <16 x i16> %9502, %9495
  %9513 = add <16 x i16> %9512, %9509
  %9514 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9511, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9515 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9513, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9516 = shufflevector <16 x i16> %9514, <16 x i16> %9515, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9517 = lshr <32 x i16> %9516, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9518 = shufflevector <32 x i16> %9517, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9519 = add nsw i64 %9375, %9488
  %9520 = getelementptr inbounds i16, i16* %65, i64 %9519
  %9521 = bitcast i16* %9520 to <16 x i16>*
  store <16 x i16> %9518, <16 x i16>* %9521, align 2, !tbaa !401
  %9522 = shufflevector <32 x i16> %9517, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9523 = getelementptr inbounds i16, i16* %9520, i64 16
  %9524 = bitcast i16* %9523 to <16 x i16>*
  store <16 x i16> %9522, <16 x i16>* %9524, align 2, !tbaa !401
  %9525 = add nuw nsw i32 %blur_y.s0.x.x.rebased684, 1
  %.not2588 = icmp eq i32 %9525, %t1639
  br i1 %.not2588, label %"end for blur_y.s0.x.x.rebased683", label %"for blur_y.s0.x.x.rebased682"

after_bb691:                                      ; preds = %"end for blur_y.s0.x.x.rebased683", %"produce blur_x694"
  br i1 %99, label %"for blur_y.s0.x.x.rebased696.preheader", label %"end for blur_y.s0.x.x.rebased697", !prof !386

"for blur_y.s0.x.x.rebased696.preheader":         ; preds = %after_bb691
  %9526 = sext i32 %t1666 to i64
  %9527 = zext i32 %.pre-phi3317 to i64
  %9528 = mul nsw i64 %9527, %108
  %9529 = sub nsw i64 %9528, %95
  %9530 = zext i32 %.pre-phi3323 to i64
  %9531 = mul nsw i64 %9530, %108
  %9532 = sub nsw i64 %9531, %95
  %9533 = zext i32 %.pre-phi3313 to i64
  %9534 = mul nsw i64 %9533, %108
  %9535 = sub nsw i64 %9534, %95
  %9536 = sext i32 %a26 to i64
  %9537 = add nsw i64 %9536, 29
  %9538 = mul nsw i64 %9537, %109
  %9539 = add nsw i64 %9538, %112
  br label %"for blur_y.s0.x.x.rebased696"

"produce blur_x694":                              ; preds = %"end for blur_y.s0.x.x.rebased683"
  %9540 = getelementptr inbounds i16, i16* %read_input, i64 %169
  %9541 = getelementptr inbounds i16, i16* %9540, i64 -31
  %9542 = bitcast i16* %9541 to <16 x i16>*
  %9543 = load <16 x i16>, <16 x i16>* %9542, align 2, !tbaa !396
  %9544 = getelementptr inbounds i16, i16* %9540, i64 -15
  %9545 = bitcast i16* %9544 to <16 x i16>*
  %9546 = load <16 x i16>, <16 x i16>* %9545, align 2, !tbaa !396
  %9547 = getelementptr inbounds i16, i16* %9540, i64 -30
  %9548 = bitcast i16* %9547 to <16 x i16>*
  %9549 = load <16 x i16>, <16 x i16>* %9548, align 2, !tbaa !396
  %9550 = getelementptr inbounds i16, i16* %9540, i64 -14
  %9551 = bitcast i16* %9550 to <16 x i16>*
  %9552 = load <16 x i16>, <16 x i16>* %9551, align 2, !tbaa !396
  %9553 = getelementptr inbounds i16, i16* %9540, i64 -32
  %9554 = bitcast i16* %9553 to <16 x i16>*
  %9555 = load <16 x i16>, <16 x i16>* %9554, align 2, !tbaa !396
  %9556 = getelementptr inbounds i16, i16* %9540, i64 -16
  %9557 = bitcast i16* %9556 to <16 x i16>*
  %9558 = load <16 x i16>, <16 x i16>* %9557, align 2, !tbaa !396
  %9559 = add <16 x i16> %9549, %9543
  %9560 = add <16 x i16> %9559, %9555
  %9561 = add <16 x i16> %9552, %9546
  %9562 = add <16 x i16> %9561, %9558
  %9563 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9560, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9564 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9562, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9565 = shufflevector <16 x i16> %9563, <16 x i16> %9564, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9566 = lshr <32 x i16> %9565, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9567 = shufflevector <32 x i16> %9566, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9568 = zext i32 %.pre-phi3323 to i64
  %9569 = mul nsw i64 %96, %9568
  %9570 = add nsw i64 %98, %9569
  %9571 = getelementptr inbounds i16, i16* %blur_x, i64 %9570
  %9572 = getelementptr inbounds i16, i16* %9571, i64 -32
  %9573 = bitcast i16* %9572 to <16 x i16>*
  store <16 x i16> %9567, <16 x i16>* %9573, align 2, !tbaa !399
  %9574 = shufflevector <32 x i16> %9566, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9575 = getelementptr inbounds i16, i16* %9571, i64 -16
  %9576 = bitcast i16* %9575 to <16 x i16>*
  store <16 x i16> %9574, <16 x i16>* %9576, align 2, !tbaa !399
  %9577 = zext i32 %.pre-phi3317 to i64
  %9578 = mul nsw i64 %9577, %108
  %9579 = add nsw i64 %9578, %93
  %9580 = getelementptr inbounds i16, i16* %blur_x, i64 %9579
  %9581 = getelementptr inbounds i16, i16* %9580, i64 -32
  %9582 = bitcast i16* %9581 to <16 x i16>*
  %9583 = load <16 x i16>, <16 x i16>* %9582, align 2, !tbaa !399
  %9584 = getelementptr inbounds i16, i16* %9580, i64 -16
  %9585 = bitcast i16* %9584 to <16 x i16>*
  %9586 = load <16 x i16>, <16 x i16>* %9585, align 2, !tbaa !399
  %9587 = mul nsw i64 %9568, %108
  %9588 = add nsw i64 %9587, %93
  %9589 = getelementptr inbounds i16, i16* %blur_x, i64 %9588
  %9590 = getelementptr inbounds i16, i16* %9589, i64 -32
  %9591 = bitcast i16* %9590 to <16 x i16>*
  %9592 = load <16 x i16>, <16 x i16>* %9591, align 2, !tbaa !399
  %9593 = getelementptr inbounds i16, i16* %9589, i64 -16
  %9594 = bitcast i16* %9593 to <16 x i16>*
  %9595 = load <16 x i16>, <16 x i16>* %9594, align 2, !tbaa !399
  %9596 = zext i32 %.pre-phi3313 to i64
  %9597 = mul nsw i64 %9596, %108
  %9598 = add nsw i64 %9597, %93
  %9599 = getelementptr inbounds i16, i16* %blur_x, i64 %9598
  %9600 = getelementptr inbounds i16, i16* %9599, i64 -32
  %9601 = bitcast i16* %9600 to <16 x i16>*
  %9602 = load <16 x i16>, <16 x i16>* %9601, align 2, !tbaa !399
  %9603 = getelementptr inbounds i16, i16* %9599, i64 -16
  %9604 = bitcast i16* %9603 to <16 x i16>*
  %9605 = load <16 x i16>, <16 x i16>* %9604, align 2, !tbaa !399
  %9606 = add <16 x i16> %9592, %9583
  %9607 = add <16 x i16> %9606, %9602
  %9608 = add <16 x i16> %9595, %9586
  %9609 = add <16 x i16> %9608, %9605
  %9610 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9607, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9611 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9609, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9612 = shufflevector <16 x i16> %9610, <16 x i16> %9611, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9613 = lshr <32 x i16> %9612, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9614 = shufflevector <32 x i16> %9613, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9615 = sext i32 %a26 to i64
  %9616 = add nsw i64 %9615, 29
  %9617 = mul nsw i64 %9616, %109
  %9618 = add nsw i64 %111, %9617
  %9619 = getelementptr inbounds i16, i16* %65, i64 %9618
  %9620 = getelementptr inbounds i16, i16* %9619, i64 -32
  %9621 = bitcast i16* %9620 to <16 x i16>*
  store <16 x i16> %9614, <16 x i16>* %9621, align 2, !tbaa !401
  %9622 = shufflevector <32 x i16> %9613, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9623 = getelementptr inbounds i16, i16* %9619, i64 -16
  %9624 = bitcast i16* %9623 to <16 x i16>*
  store <16 x i16> %9622, <16 x i16>* %9624, align 2, !tbaa !401
  br label %after_bb691

"for blur_y.s0.x.x.rebased696":                   ; preds = %"for blur_y.s0.x.x.rebased696.preheader", %"consume blur_x703"
  %indvars.iv3218 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased696.preheader" ], [ %indvars.iv.next3219, %"consume blur_x703" ]
  %9625 = add nsw i64 %indvars.iv3218, %100
  %9626 = icmp slt i64 %9625, 1
  %9627 = trunc i64 %9625 to i32
  %9628 = shl nsw i32 %9627, 5
  %9629 = icmp sgt i32 %4, %9628
  %9630 = or i1 %9626, %9629
  br i1 %9630, label %"produce blur_x702", label %"for blur_y.s0.x.x.rebased696.consume blur_x703_crit_edge"

"for blur_y.s0.x.x.rebased696.consume blur_x703_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased696"
  %.pre3380 = shl nsw i64 %9625, 5
  br label %"consume blur_x703"

"end for blur_y.s0.x.x.rebased697":               ; preds = %"consume blur_x703", %after_bb691
  br i1 %101, label %"for blur_y.s0.x.x.rebased704.preheader", label %"end for blur_y.s0.x.x.rebased705", !prof !386

"for blur_y.s0.x.x.rebased704.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased697"
  %9631 = sext i32 %t1666 to i64
  %9632 = zext i32 %.pre-phi3317 to i64
  %9633 = mul nsw i64 %9632, %108
  %9634 = sub nsw i64 %9633, %95
  %9635 = zext i32 %.pre-phi3323 to i64
  %9636 = mul nsw i64 %9635, %108
  %9637 = sub nsw i64 %9636, %95
  %9638 = zext i32 %.pre-phi3313 to i64
  %9639 = mul nsw i64 %9638, %108
  %9640 = sub nsw i64 %9639, %95
  %9641 = sext i32 %a26 to i64
  %9642 = add nsw i64 %9641, 29
  %9643 = mul nsw i64 %9642, %109
  %9644 = add nsw i64 %9643, %112
  br label %"for blur_y.s0.x.x.rebased704"

"produce blur_x702":                              ; preds = %"for blur_y.s0.x.x.rebased696"
  %t1136 = add nsw i32 %9628, %t2113
  %9645 = sext i32 %t1136 to i64
  %9646 = getelementptr inbounds i16, i16* %read_input, i64 %9645
  %9647 = getelementptr inbounds i16, i16* %9646, i64 1
  %9648 = bitcast i16* %9647 to <16 x i16>*
  %9649 = load <16 x i16>, <16 x i16>* %9648, align 2, !tbaa !396
  %9650 = getelementptr inbounds i16, i16* %9646, i64 17
  %9651 = bitcast i16* %9650 to <16 x i16>*
  %9652 = load <16 x i16>, <16 x i16>* %9651, align 2, !tbaa !396
  %9653 = getelementptr inbounds i16, i16* %9646, i64 2
  %9654 = bitcast i16* %9653 to <16 x i16>*
  %9655 = load <16 x i16>, <16 x i16>* %9654, align 2, !tbaa !396
  %9656 = getelementptr inbounds i16, i16* %9646, i64 18
  %9657 = bitcast i16* %9656 to <16 x i16>*
  %9658 = load <16 x i16>, <16 x i16>* %9657, align 2, !tbaa !396
  %9659 = bitcast i16* %9646 to <16 x i16>*
  %9660 = load <16 x i16>, <16 x i16>* %9659, align 2, !tbaa !396
  %9661 = getelementptr inbounds i16, i16* %9646, i64 16
  %9662 = bitcast i16* %9661 to <16 x i16>*
  %9663 = load <16 x i16>, <16 x i16>* %9662, align 2, !tbaa !396
  %9664 = add <16 x i16> %9655, %9649
  %9665 = add <16 x i16> %9664, %9660
  %9666 = add <16 x i16> %9658, %9652
  %9667 = add <16 x i16> %9666, %9663
  %9668 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9665, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9669 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9667, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9670 = shufflevector <16 x i16> %9668, <16 x i16> %9669, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9671 = lshr <32 x i16> %9670, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9672 = shufflevector <32 x i16> %9671, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9673 = shl nsw i64 %9625, 5
  %9674 = add nsw i64 %9673, %9526
  %9675 = getelementptr inbounds i16, i16* %blur_x, i64 %9674
  %9676 = bitcast i16* %9675 to <16 x i16>*
  store <16 x i16> %9672, <16 x i16>* %9676, align 2, !tbaa !399
  %9677 = shufflevector <32 x i16> %9671, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9678 = getelementptr inbounds i16, i16* %9675, i64 16
  %9679 = bitcast i16* %9678 to <16 x i16>*
  store <16 x i16> %9677, <16 x i16>* %9679, align 2, !tbaa !399
  br label %"consume blur_x703"

"consume blur_x703":                              ; preds = %"for blur_y.s0.x.x.rebased696.consume blur_x703_crit_edge", %"produce blur_x702"
  %.pre-phi3381 = phi i64 [ %.pre3380, %"for blur_y.s0.x.x.rebased696.consume blur_x703_crit_edge" ], [ %9673, %"produce blur_x702" ]
  %9680 = add nsw i64 %9529, %.pre-phi3381
  %9681 = getelementptr inbounds i16, i16* %blur_x, i64 %9680
  %9682 = bitcast i16* %9681 to <16 x i16>*
  %9683 = load <16 x i16>, <16 x i16>* %9682, align 2, !tbaa !399
  %9684 = getelementptr inbounds i16, i16* %9681, i64 16
  %9685 = bitcast i16* %9684 to <16 x i16>*
  %9686 = load <16 x i16>, <16 x i16>* %9685, align 2, !tbaa !399
  %9687 = add nsw i64 %9532, %.pre-phi3381
  %9688 = getelementptr inbounds i16, i16* %blur_x, i64 %9687
  %9689 = bitcast i16* %9688 to <16 x i16>*
  %9690 = load <16 x i16>, <16 x i16>* %9689, align 2, !tbaa !399
  %9691 = getelementptr inbounds i16, i16* %9688, i64 16
  %9692 = bitcast i16* %9691 to <16 x i16>*
  %9693 = load <16 x i16>, <16 x i16>* %9692, align 2, !tbaa !399
  %9694 = add nsw i64 %9535, %.pre-phi3381
  %9695 = getelementptr inbounds i16, i16* %blur_x, i64 %9694
  %9696 = bitcast i16* %9695 to <16 x i16>*
  %9697 = load <16 x i16>, <16 x i16>* %9696, align 2, !tbaa !399
  %9698 = getelementptr inbounds i16, i16* %9695, i64 16
  %9699 = bitcast i16* %9698 to <16 x i16>*
  %9700 = load <16 x i16>, <16 x i16>* %9699, align 2, !tbaa !399
  %9701 = add <16 x i16> %9690, %9683
  %9702 = add <16 x i16> %9701, %9697
  %9703 = add <16 x i16> %9693, %9686
  %9704 = add <16 x i16> %9703, %9700
  %9705 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9702, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9706 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9704, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9707 = shufflevector <16 x i16> %9705, <16 x i16> %9706, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9708 = lshr <32 x i16> %9707, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9709 = shufflevector <32 x i16> %9708, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9710 = add nsw i64 %9539, %.pre-phi3381
  %9711 = getelementptr inbounds i16, i16* %65, i64 %9710
  %9712 = bitcast i16* %9711 to <16 x i16>*
  store <16 x i16> %9709, <16 x i16>* %9712, align 2, !tbaa !401
  %9713 = shufflevector <32 x i16> %9708, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9714 = getelementptr inbounds i16, i16* %9711, i64 16
  %9715 = bitcast i16* %9714 to <16 x i16>*
  store <16 x i16> %9713, <16 x i16>* %9715, align 2, !tbaa !401
  %indvars.iv.next3219 = add nuw nsw i64 %indvars.iv3218, 1
  %.not2587 = icmp eq i64 %indvars.iv.next3219, %180
  br i1 %.not2587, label %"end for blur_y.s0.x.x.rebased697", label %"for blur_y.s0.x.x.rebased696"

"for blur_y.s0.x.x.rebased704":                   ; preds = %"for blur_y.s0.x.x.rebased704.preheader", %"consume blur_x712"
  %blur_y.s0.x.x.rebased706 = phi i32 [ %9794, %"consume blur_x712" ], [ 0, %"for blur_y.s0.x.x.rebased704.preheader" ]
  %9716 = add nsw i32 %blur_y.s0.x.x.rebased706, %t1582
  %a294 = shl nsw i32 %9716, 5
  %9717 = icmp sgt i32 %a14, %a294
  %b300 = select i1 %9717, i32 %a294, i32 %a14
  %9718 = icmp slt i32 %9716, 1
  %9719 = icmp sgt i32 %4, %a294
  %9720 = or i1 %9718, %9719
  br i1 %9720, label %"produce blur_x710", label %"consume blur_x712"

"end for blur_y.s0.x.x.rebased705":               ; preds = %"consume blur_x712", %"end for blur_y.s0.x.x.rebased697"
  br i1 %34, label %"produce blur_x716", label %after_bb713

"produce blur_x710":                              ; preds = %"for blur_y.s0.x.x.rebased704"
  %9721 = icmp slt i32 %b300, %4
  %blur_x.s0.x.v1.base.s711 = select i1 %9721, i32 %b300, i32 %4
  %t1141 = add nsw i32 %blur_x.s0.x.v1.base.s711, %t2113
  %9722 = sext i32 %t1141 to i64
  %9723 = getelementptr inbounds i16, i16* %read_input, i64 %9722
  %9724 = getelementptr inbounds i16, i16* %9723, i64 1
  %9725 = bitcast i16* %9724 to <16 x i16>*
  %9726 = load <16 x i16>, <16 x i16>* %9725, align 2, !tbaa !396
  %9727 = getelementptr inbounds i16, i16* %9723, i64 17
  %9728 = bitcast i16* %9727 to <16 x i16>*
  %9729 = load <16 x i16>, <16 x i16>* %9728, align 2, !tbaa !396
  %9730 = getelementptr inbounds i16, i16* %9723, i64 2
  %9731 = bitcast i16* %9730 to <16 x i16>*
  %9732 = load <16 x i16>, <16 x i16>* %9731, align 2, !tbaa !396
  %9733 = getelementptr inbounds i16, i16* %9723, i64 18
  %9734 = bitcast i16* %9733 to <16 x i16>*
  %9735 = load <16 x i16>, <16 x i16>* %9734, align 2, !tbaa !396
  %9736 = bitcast i16* %9723 to <16 x i16>*
  %9737 = load <16 x i16>, <16 x i16>* %9736, align 2, !tbaa !396
  %9738 = getelementptr inbounds i16, i16* %9723, i64 16
  %9739 = bitcast i16* %9738 to <16 x i16>*
  %9740 = load <16 x i16>, <16 x i16>* %9739, align 2, !tbaa !396
  %9741 = add <16 x i16> %9732, %9726
  %9742 = add <16 x i16> %9741, %9737
  %9743 = add <16 x i16> %9735, %9729
  %9744 = add <16 x i16> %9743, %9740
  %9745 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9742, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9746 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9744, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9747 = shufflevector <16 x i16> %9745, <16 x i16> %9746, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9748 = lshr <32 x i16> %9747, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9749 = shufflevector <32 x i16> %9748, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9750 = sext i32 %blur_x.s0.x.v1.base.s711 to i64
  %9751 = add nsw i64 %9750, %9631
  %9752 = getelementptr inbounds i16, i16* %blur_x, i64 %9751
  %9753 = bitcast i16* %9752 to <16 x i16>*
  store <16 x i16> %9749, <16 x i16>* %9753, align 2, !tbaa !399
  %9754 = shufflevector <32 x i16> %9748, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9755 = getelementptr inbounds i16, i16* %9752, i64 16
  %9756 = bitcast i16* %9755 to <16 x i16>*
  store <16 x i16> %9754, <16 x i16>* %9756, align 2, !tbaa !399
  br label %"consume blur_x712"

"consume blur_x712":                              ; preds = %"for blur_y.s0.x.x.rebased704", %"produce blur_x710"
  %9757 = sext i32 %b300 to i64
  %9758 = add nsw i64 %9634, %9757
  %9759 = getelementptr inbounds i16, i16* %blur_x, i64 %9758
  %9760 = bitcast i16* %9759 to <16 x i16>*
  %9761 = load <16 x i16>, <16 x i16>* %9760, align 2, !tbaa !399
  %9762 = getelementptr inbounds i16, i16* %9759, i64 16
  %9763 = bitcast i16* %9762 to <16 x i16>*
  %9764 = load <16 x i16>, <16 x i16>* %9763, align 2, !tbaa !399
  %9765 = add nsw i64 %9637, %9757
  %9766 = getelementptr inbounds i16, i16* %blur_x, i64 %9765
  %9767 = bitcast i16* %9766 to <16 x i16>*
  %9768 = load <16 x i16>, <16 x i16>* %9767, align 2, !tbaa !399
  %9769 = getelementptr inbounds i16, i16* %9766, i64 16
  %9770 = bitcast i16* %9769 to <16 x i16>*
  %9771 = load <16 x i16>, <16 x i16>* %9770, align 2, !tbaa !399
  %9772 = add nsw i64 %9640, %9757
  %9773 = getelementptr inbounds i16, i16* %blur_x, i64 %9772
  %9774 = bitcast i16* %9773 to <16 x i16>*
  %9775 = load <16 x i16>, <16 x i16>* %9774, align 2, !tbaa !399
  %9776 = getelementptr inbounds i16, i16* %9773, i64 16
  %9777 = bitcast i16* %9776 to <16 x i16>*
  %9778 = load <16 x i16>, <16 x i16>* %9777, align 2, !tbaa !399
  %9779 = add <16 x i16> %9768, %9761
  %9780 = add <16 x i16> %9779, %9775
  %9781 = add <16 x i16> %9771, %9764
  %9782 = add <16 x i16> %9781, %9778
  %9783 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9780, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9784 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9782, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9785 = shufflevector <16 x i16> %9783, <16 x i16> %9784, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9786 = lshr <32 x i16> %9785, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9787 = shufflevector <32 x i16> %9786, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9788 = add nsw i64 %9644, %9757
  %9789 = getelementptr inbounds i16, i16* %65, i64 %9788
  %9790 = bitcast i16* %9789 to <16 x i16>*
  store <16 x i16> %9787, <16 x i16>* %9790, align 2, !tbaa !401
  %9791 = shufflevector <32 x i16> %9786, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9792 = getelementptr inbounds i16, i16* %9789, i64 16
  %9793 = bitcast i16* %9792 to <16 x i16>*
  store <16 x i16> %9791, <16 x i16>* %9793, align 2, !tbaa !401
  %9794 = add nuw nsw i32 %blur_y.s0.x.x.rebased706, 1
  %.not2586 = icmp eq i32 %9794, %t1639
  br i1 %.not2586, label %"end for blur_y.s0.x.x.rebased705", label %"for blur_y.s0.x.x.rebased704"

after_bb713:                                      ; preds = %"end for blur_y.s0.x.x.rebased705", %"produce blur_x716"
  br i1 %99, label %"for blur_y.s0.x.x.rebased718.preheader", label %"end for blur_y.s0.x.x.rebased719", !prof !386

"for blur_y.s0.x.x.rebased718.preheader":         ; preds = %after_bb713
  %9795 = sext i32 %t1638 to i64
  %9796 = zext i32 %.pre-phi3323 to i64
  %9797 = mul nsw i64 %9796, %108
  %9798 = sub nsw i64 %9797, %95
  %9799 = zext i32 %.pre-phi to i64
  %9800 = mul nsw i64 %9799, %108
  %9801 = sub nsw i64 %9800, %95
  %9802 = zext i32 %.pre-phi3317 to i64
  %9803 = mul nsw i64 %9802, %108
  %9804 = sub nsw i64 %9803, %95
  %9805 = sext i32 %a26 to i64
  %9806 = add nsw i64 %9805, 30
  %9807 = mul nsw i64 %9806, %109
  %9808 = add nsw i64 %9807, %112
  br label %"for blur_y.s0.x.x.rebased718"

"produce blur_x716":                              ; preds = %"end for blur_y.s0.x.x.rebased705"
  %9809 = getelementptr inbounds i16, i16* %read_input, i64 %171
  %9810 = getelementptr inbounds i16, i16* %9809, i64 -31
  %9811 = bitcast i16* %9810 to <16 x i16>*
  %9812 = load <16 x i16>, <16 x i16>* %9811, align 2, !tbaa !396
  %9813 = getelementptr inbounds i16, i16* %9809, i64 -15
  %9814 = bitcast i16* %9813 to <16 x i16>*
  %9815 = load <16 x i16>, <16 x i16>* %9814, align 2, !tbaa !396
  %9816 = getelementptr inbounds i16, i16* %9809, i64 -30
  %9817 = bitcast i16* %9816 to <16 x i16>*
  %9818 = load <16 x i16>, <16 x i16>* %9817, align 2, !tbaa !396
  %9819 = getelementptr inbounds i16, i16* %9809, i64 -14
  %9820 = bitcast i16* %9819 to <16 x i16>*
  %9821 = load <16 x i16>, <16 x i16>* %9820, align 2, !tbaa !396
  %9822 = getelementptr inbounds i16, i16* %9809, i64 -32
  %9823 = bitcast i16* %9822 to <16 x i16>*
  %9824 = load <16 x i16>, <16 x i16>* %9823, align 2, !tbaa !396
  %9825 = getelementptr inbounds i16, i16* %9809, i64 -16
  %9826 = bitcast i16* %9825 to <16 x i16>*
  %9827 = load <16 x i16>, <16 x i16>* %9826, align 2, !tbaa !396
  %9828 = add <16 x i16> %9818, %9812
  %9829 = add <16 x i16> %9828, %9824
  %9830 = add <16 x i16> %9821, %9815
  %9831 = add <16 x i16> %9830, %9827
  %9832 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9829, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9833 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9831, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9834 = shufflevector <16 x i16> %9832, <16 x i16> %9833, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9835 = lshr <32 x i16> %9834, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9836 = shufflevector <32 x i16> %9835, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9837 = zext i32 %.pre-phi to i64
  %9838 = mul nsw i64 %96, %9837
  %9839 = add nsw i64 %98, %9838
  %9840 = getelementptr inbounds i16, i16* %blur_x, i64 %9839
  %9841 = getelementptr inbounds i16, i16* %9840, i64 -32
  %9842 = bitcast i16* %9841 to <16 x i16>*
  store <16 x i16> %9836, <16 x i16>* %9842, align 2, !tbaa !399
  %9843 = shufflevector <32 x i16> %9835, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9844 = getelementptr inbounds i16, i16* %9840, i64 -16
  %9845 = bitcast i16* %9844 to <16 x i16>*
  store <16 x i16> %9843, <16 x i16>* %9845, align 2, !tbaa !399
  %9846 = zext i32 %.pre-phi3323 to i64
  %9847 = mul nsw i64 %9846, %108
  %9848 = add nsw i64 %9847, %93
  %9849 = getelementptr inbounds i16, i16* %blur_x, i64 %9848
  %9850 = getelementptr inbounds i16, i16* %9849, i64 -32
  %9851 = bitcast i16* %9850 to <16 x i16>*
  %9852 = load <16 x i16>, <16 x i16>* %9851, align 2, !tbaa !399
  %9853 = getelementptr inbounds i16, i16* %9849, i64 -16
  %9854 = bitcast i16* %9853 to <16 x i16>*
  %9855 = load <16 x i16>, <16 x i16>* %9854, align 2, !tbaa !399
  %9856 = mul nsw i64 %9837, %108
  %9857 = add nsw i64 %9856, %93
  %9858 = getelementptr inbounds i16, i16* %blur_x, i64 %9857
  %9859 = getelementptr inbounds i16, i16* %9858, i64 -32
  %9860 = bitcast i16* %9859 to <16 x i16>*
  %9861 = load <16 x i16>, <16 x i16>* %9860, align 2, !tbaa !399
  %9862 = getelementptr inbounds i16, i16* %9858, i64 -16
  %9863 = bitcast i16* %9862 to <16 x i16>*
  %9864 = load <16 x i16>, <16 x i16>* %9863, align 2, !tbaa !399
  %9865 = zext i32 %.pre-phi3317 to i64
  %9866 = mul nsw i64 %9865, %108
  %9867 = add nsw i64 %9866, %93
  %9868 = getelementptr inbounds i16, i16* %blur_x, i64 %9867
  %9869 = getelementptr inbounds i16, i16* %9868, i64 -32
  %9870 = bitcast i16* %9869 to <16 x i16>*
  %9871 = load <16 x i16>, <16 x i16>* %9870, align 2, !tbaa !399
  %9872 = getelementptr inbounds i16, i16* %9868, i64 -16
  %9873 = bitcast i16* %9872 to <16 x i16>*
  %9874 = load <16 x i16>, <16 x i16>* %9873, align 2, !tbaa !399
  %9875 = add <16 x i16> %9861, %9852
  %9876 = add <16 x i16> %9875, %9871
  %9877 = add <16 x i16> %9864, %9855
  %9878 = add <16 x i16> %9877, %9874
  %9879 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9876, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9880 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9878, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9881 = shufflevector <16 x i16> %9879, <16 x i16> %9880, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9882 = lshr <32 x i16> %9881, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9883 = shufflevector <32 x i16> %9882, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9884 = sext i32 %a26 to i64
  %9885 = add nsw i64 %9884, 30
  %9886 = mul nsw i64 %9885, %109
  %9887 = add nsw i64 %111, %9886
  %9888 = getelementptr inbounds i16, i16* %65, i64 %9887
  %9889 = getelementptr inbounds i16, i16* %9888, i64 -32
  %9890 = bitcast i16* %9889 to <16 x i16>*
  store <16 x i16> %9883, <16 x i16>* %9890, align 2, !tbaa !401
  %9891 = shufflevector <32 x i16> %9882, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9892 = getelementptr inbounds i16, i16* %9888, i64 -16
  %9893 = bitcast i16* %9892 to <16 x i16>*
  store <16 x i16> %9891, <16 x i16>* %9893, align 2, !tbaa !401
  br label %after_bb713

"for blur_y.s0.x.x.rebased718":                   ; preds = %"for blur_y.s0.x.x.rebased718.preheader", %"consume blur_x725"
  %indvars.iv3221 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased718.preheader" ], [ %indvars.iv.next3222, %"consume blur_x725" ]
  %9894 = add nsw i64 %indvars.iv3221, %100
  %9895 = icmp slt i64 %9894, 1
  %9896 = trunc i64 %9894 to i32
  %9897 = shl nsw i32 %9896, 5
  %9898 = icmp sgt i32 %4, %9897
  %9899 = or i1 %9895, %9898
  br i1 %9899, label %"produce blur_x724", label %"for blur_y.s0.x.x.rebased718.consume blur_x725_crit_edge"

"for blur_y.s0.x.x.rebased718.consume blur_x725_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased718"
  %.pre3382 = shl nsw i64 %9894, 5
  br label %"consume blur_x725"

"end for blur_y.s0.x.x.rebased719":               ; preds = %"consume blur_x725", %after_bb713
  br i1 %101, label %"for blur_y.s0.x.x.rebased726.preheader", label %"end for blur_y.s0.x.x.rebased727", !prof !386

"for blur_y.s0.x.x.rebased726.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased719"
  %9900 = sext i32 %t1638 to i64
  %9901 = zext i32 %.pre-phi3323 to i64
  %9902 = mul nsw i64 %9901, %108
  %9903 = sub nsw i64 %9902, %95
  %9904 = zext i32 %.pre-phi to i64
  %9905 = mul nsw i64 %9904, %108
  %9906 = sub nsw i64 %9905, %95
  %9907 = zext i32 %.pre-phi3317 to i64
  %9908 = mul nsw i64 %9907, %108
  %9909 = sub nsw i64 %9908, %95
  %9910 = sext i32 %a26 to i64
  %9911 = add nsw i64 %9910, 30
  %9912 = mul nsw i64 %9911, %109
  %9913 = add nsw i64 %9912, %112
  br label %"for blur_y.s0.x.x.rebased726"

"produce blur_x724":                              ; preds = %"for blur_y.s0.x.x.rebased718"
  %t1152 = add nsw i32 %9897, %t2129
  %9914 = sext i32 %t1152 to i64
  %9915 = getelementptr inbounds i16, i16* %read_input, i64 %9914
  %9916 = getelementptr inbounds i16, i16* %9915, i64 1
  %9917 = bitcast i16* %9916 to <16 x i16>*
  %9918 = load <16 x i16>, <16 x i16>* %9917, align 2, !tbaa !396
  %9919 = getelementptr inbounds i16, i16* %9915, i64 17
  %9920 = bitcast i16* %9919 to <16 x i16>*
  %9921 = load <16 x i16>, <16 x i16>* %9920, align 2, !tbaa !396
  %9922 = getelementptr inbounds i16, i16* %9915, i64 2
  %9923 = bitcast i16* %9922 to <16 x i16>*
  %9924 = load <16 x i16>, <16 x i16>* %9923, align 2, !tbaa !396
  %9925 = getelementptr inbounds i16, i16* %9915, i64 18
  %9926 = bitcast i16* %9925 to <16 x i16>*
  %9927 = load <16 x i16>, <16 x i16>* %9926, align 2, !tbaa !396
  %9928 = bitcast i16* %9915 to <16 x i16>*
  %9929 = load <16 x i16>, <16 x i16>* %9928, align 2, !tbaa !396
  %9930 = getelementptr inbounds i16, i16* %9915, i64 16
  %9931 = bitcast i16* %9930 to <16 x i16>*
  %9932 = load <16 x i16>, <16 x i16>* %9931, align 2, !tbaa !396
  %9933 = add <16 x i16> %9924, %9918
  %9934 = add <16 x i16> %9933, %9929
  %9935 = add <16 x i16> %9927, %9921
  %9936 = add <16 x i16> %9935, %9932
  %9937 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9934, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9938 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9936, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9939 = shufflevector <16 x i16> %9937, <16 x i16> %9938, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9940 = lshr <32 x i16> %9939, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9941 = shufflevector <32 x i16> %9940, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9942 = shl nsw i64 %9894, 5
  %9943 = add nsw i64 %9942, %9795
  %9944 = getelementptr inbounds i16, i16* %blur_x, i64 %9943
  %9945 = bitcast i16* %9944 to <16 x i16>*
  store <16 x i16> %9941, <16 x i16>* %9945, align 2, !tbaa !399
  %9946 = shufflevector <32 x i16> %9940, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9947 = getelementptr inbounds i16, i16* %9944, i64 16
  %9948 = bitcast i16* %9947 to <16 x i16>*
  store <16 x i16> %9946, <16 x i16>* %9948, align 2, !tbaa !399
  br label %"consume blur_x725"

"consume blur_x725":                              ; preds = %"for blur_y.s0.x.x.rebased718.consume blur_x725_crit_edge", %"produce blur_x724"
  %.pre-phi3383 = phi i64 [ %.pre3382, %"for blur_y.s0.x.x.rebased718.consume blur_x725_crit_edge" ], [ %9942, %"produce blur_x724" ]
  %9949 = add nsw i64 %9798, %.pre-phi3383
  %9950 = getelementptr inbounds i16, i16* %blur_x, i64 %9949
  %9951 = bitcast i16* %9950 to <16 x i16>*
  %9952 = load <16 x i16>, <16 x i16>* %9951, align 2, !tbaa !399
  %9953 = getelementptr inbounds i16, i16* %9950, i64 16
  %9954 = bitcast i16* %9953 to <16 x i16>*
  %9955 = load <16 x i16>, <16 x i16>* %9954, align 2, !tbaa !399
  %9956 = add nsw i64 %9801, %.pre-phi3383
  %9957 = getelementptr inbounds i16, i16* %blur_x, i64 %9956
  %9958 = bitcast i16* %9957 to <16 x i16>*
  %9959 = load <16 x i16>, <16 x i16>* %9958, align 2, !tbaa !399
  %9960 = getelementptr inbounds i16, i16* %9957, i64 16
  %9961 = bitcast i16* %9960 to <16 x i16>*
  %9962 = load <16 x i16>, <16 x i16>* %9961, align 2, !tbaa !399
  %9963 = add nsw i64 %9804, %.pre-phi3383
  %9964 = getelementptr inbounds i16, i16* %blur_x, i64 %9963
  %9965 = bitcast i16* %9964 to <16 x i16>*
  %9966 = load <16 x i16>, <16 x i16>* %9965, align 2, !tbaa !399
  %9967 = getelementptr inbounds i16, i16* %9964, i64 16
  %9968 = bitcast i16* %9967 to <16 x i16>*
  %9969 = load <16 x i16>, <16 x i16>* %9968, align 2, !tbaa !399
  %9970 = add <16 x i16> %9959, %9952
  %9971 = add <16 x i16> %9970, %9966
  %9972 = add <16 x i16> %9962, %9955
  %9973 = add <16 x i16> %9972, %9969
  %9974 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9971, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9975 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9973, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9976 = shufflevector <16 x i16> %9974, <16 x i16> %9975, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9977 = lshr <32 x i16> %9976, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9978 = shufflevector <32 x i16> %9977, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9979 = add nsw i64 %9808, %.pre-phi3383
  %9980 = getelementptr inbounds i16, i16* %65, i64 %9979
  %9981 = bitcast i16* %9980 to <16 x i16>*
  store <16 x i16> %9978, <16 x i16>* %9981, align 2, !tbaa !401
  %9982 = shufflevector <32 x i16> %9977, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9983 = getelementptr inbounds i16, i16* %9980, i64 16
  %9984 = bitcast i16* %9983 to <16 x i16>*
  store <16 x i16> %9982, <16 x i16>* %9984, align 2, !tbaa !401
  %indvars.iv.next3222 = add nuw nsw i64 %indvars.iv3221, 1
  %.not2585 = icmp eq i64 %indvars.iv.next3222, %180
  br i1 %.not2585, label %"end for blur_y.s0.x.x.rebased719", label %"for blur_y.s0.x.x.rebased718"

"for blur_y.s0.x.x.rebased726":                   ; preds = %"for blur_y.s0.x.x.rebased726.preheader", %"consume blur_x734"
  %blur_y.s0.x.x.rebased728 = phi i32 [ %10063, %"consume blur_x734" ], [ 0, %"for blur_y.s0.x.x.rebased726.preheader" ]
  %9985 = add nsw i32 %blur_y.s0.x.x.rebased728, %t1582
  %a301 = shl nsw i32 %9985, 5
  %9986 = icmp sgt i32 %a14, %a301
  %b307 = select i1 %9986, i32 %a301, i32 %a14
  %9987 = icmp slt i32 %9985, 1
  %9988 = icmp sgt i32 %4, %a301
  %9989 = or i1 %9987, %9988
  br i1 %9989, label %"produce blur_x732", label %"consume blur_x734"

"end for blur_y.s0.x.x.rebased727":               ; preds = %"consume blur_x734", %"end for blur_y.s0.x.x.rebased719"
  br i1 %34, label %"produce blur_x738", label %after_bb735

"produce blur_x732":                              ; preds = %"for blur_y.s0.x.x.rebased726"
  %9990 = icmp slt i32 %b307, %4
  %blur_x.s0.x.v1.base.s733 = select i1 %9990, i32 %b307, i32 %4
  %t1157 = add nsw i32 %blur_x.s0.x.v1.base.s733, %t2129
  %9991 = sext i32 %t1157 to i64
  %9992 = getelementptr inbounds i16, i16* %read_input, i64 %9991
  %9993 = getelementptr inbounds i16, i16* %9992, i64 1
  %9994 = bitcast i16* %9993 to <16 x i16>*
  %9995 = load <16 x i16>, <16 x i16>* %9994, align 2, !tbaa !396
  %9996 = getelementptr inbounds i16, i16* %9992, i64 17
  %9997 = bitcast i16* %9996 to <16 x i16>*
  %9998 = load <16 x i16>, <16 x i16>* %9997, align 2, !tbaa !396
  %9999 = getelementptr inbounds i16, i16* %9992, i64 2
  %10000 = bitcast i16* %9999 to <16 x i16>*
  %10001 = load <16 x i16>, <16 x i16>* %10000, align 2, !tbaa !396
  %10002 = getelementptr inbounds i16, i16* %9992, i64 18
  %10003 = bitcast i16* %10002 to <16 x i16>*
  %10004 = load <16 x i16>, <16 x i16>* %10003, align 2, !tbaa !396
  %10005 = bitcast i16* %9992 to <16 x i16>*
  %10006 = load <16 x i16>, <16 x i16>* %10005, align 2, !tbaa !396
  %10007 = getelementptr inbounds i16, i16* %9992, i64 16
  %10008 = bitcast i16* %10007 to <16 x i16>*
  %10009 = load <16 x i16>, <16 x i16>* %10008, align 2, !tbaa !396
  %10010 = add <16 x i16> %10001, %9995
  %10011 = add <16 x i16> %10010, %10006
  %10012 = add <16 x i16> %10004, %9998
  %10013 = add <16 x i16> %10012, %10009
  %10014 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10011, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10015 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10013, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10016 = shufflevector <16 x i16> %10014, <16 x i16> %10015, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10017 = lshr <32 x i16> %10016, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10018 = shufflevector <32 x i16> %10017, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10019 = sext i32 %blur_x.s0.x.v1.base.s733 to i64
  %10020 = add nsw i64 %10019, %9900
  %10021 = getelementptr inbounds i16, i16* %blur_x, i64 %10020
  %10022 = bitcast i16* %10021 to <16 x i16>*
  store <16 x i16> %10018, <16 x i16>* %10022, align 2, !tbaa !399
  %10023 = shufflevector <32 x i16> %10017, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10024 = getelementptr inbounds i16, i16* %10021, i64 16
  %10025 = bitcast i16* %10024 to <16 x i16>*
  store <16 x i16> %10023, <16 x i16>* %10025, align 2, !tbaa !399
  br label %"consume blur_x734"

"consume blur_x734":                              ; preds = %"for blur_y.s0.x.x.rebased726", %"produce blur_x732"
  %10026 = sext i32 %b307 to i64
  %10027 = add nsw i64 %9903, %10026
  %10028 = getelementptr inbounds i16, i16* %blur_x, i64 %10027
  %10029 = bitcast i16* %10028 to <16 x i16>*
  %10030 = load <16 x i16>, <16 x i16>* %10029, align 2, !tbaa !399
  %10031 = getelementptr inbounds i16, i16* %10028, i64 16
  %10032 = bitcast i16* %10031 to <16 x i16>*
  %10033 = load <16 x i16>, <16 x i16>* %10032, align 2, !tbaa !399
  %10034 = add nsw i64 %9906, %10026
  %10035 = getelementptr inbounds i16, i16* %blur_x, i64 %10034
  %10036 = bitcast i16* %10035 to <16 x i16>*
  %10037 = load <16 x i16>, <16 x i16>* %10036, align 2, !tbaa !399
  %10038 = getelementptr inbounds i16, i16* %10035, i64 16
  %10039 = bitcast i16* %10038 to <16 x i16>*
  %10040 = load <16 x i16>, <16 x i16>* %10039, align 2, !tbaa !399
  %10041 = add nsw i64 %9909, %10026
  %10042 = getelementptr inbounds i16, i16* %blur_x, i64 %10041
  %10043 = bitcast i16* %10042 to <16 x i16>*
  %10044 = load <16 x i16>, <16 x i16>* %10043, align 2, !tbaa !399
  %10045 = getelementptr inbounds i16, i16* %10042, i64 16
  %10046 = bitcast i16* %10045 to <16 x i16>*
  %10047 = load <16 x i16>, <16 x i16>* %10046, align 2, !tbaa !399
  %10048 = add <16 x i16> %10037, %10030
  %10049 = add <16 x i16> %10048, %10044
  %10050 = add <16 x i16> %10040, %10033
  %10051 = add <16 x i16> %10050, %10047
  %10052 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10049, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10053 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10051, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10054 = shufflevector <16 x i16> %10052, <16 x i16> %10053, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10055 = lshr <32 x i16> %10054, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10056 = shufflevector <32 x i16> %10055, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10057 = add nsw i64 %9913, %10026
  %10058 = getelementptr inbounds i16, i16* %65, i64 %10057
  %10059 = bitcast i16* %10058 to <16 x i16>*
  store <16 x i16> %10056, <16 x i16>* %10059, align 2, !tbaa !401
  %10060 = shufflevector <32 x i16> %10055, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10061 = getelementptr inbounds i16, i16* %10058, i64 16
  %10062 = bitcast i16* %10061 to <16 x i16>*
  store <16 x i16> %10060, <16 x i16>* %10062, align 2, !tbaa !401
  %10063 = add nuw nsw i32 %blur_y.s0.x.x.rebased728, 1
  %.not2584 = icmp eq i32 %10063, %t1639
  br i1 %.not2584, label %"end for blur_y.s0.x.x.rebased727", label %"for blur_y.s0.x.x.rebased726"

after_bb735:                                      ; preds = %"end for blur_y.s0.x.x.rebased727", %"produce blur_x738"
  br i1 %99, label %"for blur_y.s0.x.x.rebased740.preheader", label %"end for blur_y.s0.x.x.rebased741", !prof !386

"for blur_y.s0.x.x.rebased740.preheader":         ; preds = %after_bb735
  %10064 = sext i32 %t1644 to i64
  %10065 = zext i32 %.pre-phi to i64
  %10066 = mul nsw i64 %10065, %108
  %10067 = sub nsw i64 %10066, %95
  %10068 = zext i32 %.pre-phi3313 to i64
  %10069 = mul nsw i64 %10068, %108
  %10070 = sub nsw i64 %10069, %95
  %10071 = zext i32 %.pre-phi3323 to i64
  %10072 = mul nsw i64 %10071, %108
  %10073 = sub nsw i64 %10072, %95
  %10074 = sext i32 %a26 to i64
  %10075 = add nsw i64 %10074, 31
  %10076 = mul nsw i64 %10075, %109
  %10077 = add nsw i64 %10076, %112
  br label %"for blur_y.s0.x.x.rebased740"

"produce blur_x738":                              ; preds = %"end for blur_y.s0.x.x.rebased727"
  %10078 = getelementptr inbounds i16, i16* %read_input, i64 %173
  %10079 = getelementptr inbounds i16, i16* %10078, i64 -31
  %10080 = bitcast i16* %10079 to <16 x i16>*
  %10081 = load <16 x i16>, <16 x i16>* %10080, align 2, !tbaa !396
  %10082 = getelementptr inbounds i16, i16* %10078, i64 -15
  %10083 = bitcast i16* %10082 to <16 x i16>*
  %10084 = load <16 x i16>, <16 x i16>* %10083, align 2, !tbaa !396
  %10085 = getelementptr inbounds i16, i16* %10078, i64 -30
  %10086 = bitcast i16* %10085 to <16 x i16>*
  %10087 = load <16 x i16>, <16 x i16>* %10086, align 2, !tbaa !396
  %10088 = getelementptr inbounds i16, i16* %10078, i64 -14
  %10089 = bitcast i16* %10088 to <16 x i16>*
  %10090 = load <16 x i16>, <16 x i16>* %10089, align 2, !tbaa !396
  %10091 = getelementptr inbounds i16, i16* %10078, i64 -32
  %10092 = bitcast i16* %10091 to <16 x i16>*
  %10093 = load <16 x i16>, <16 x i16>* %10092, align 2, !tbaa !396
  %10094 = getelementptr inbounds i16, i16* %10078, i64 -16
  %10095 = bitcast i16* %10094 to <16 x i16>*
  %10096 = load <16 x i16>, <16 x i16>* %10095, align 2, !tbaa !396
  %10097 = add <16 x i16> %10087, %10081
  %10098 = add <16 x i16> %10097, %10093
  %10099 = add <16 x i16> %10090, %10084
  %10100 = add <16 x i16> %10099, %10096
  %10101 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10098, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10102 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10100, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10103 = shufflevector <16 x i16> %10101, <16 x i16> %10102, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10104 = lshr <32 x i16> %10103, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10105 = shufflevector <32 x i16> %10104, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10106 = zext i32 %.pre-phi3313 to i64
  %10107 = mul nsw i64 %96, %10106
  %10108 = add nsw i64 %98, %10107
  %10109 = getelementptr inbounds i16, i16* %blur_x, i64 %10108
  %10110 = getelementptr inbounds i16, i16* %10109, i64 -32
  %10111 = bitcast i16* %10110 to <16 x i16>*
  store <16 x i16> %10105, <16 x i16>* %10111, align 2, !tbaa !399
  %10112 = shufflevector <32 x i16> %10104, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10113 = getelementptr inbounds i16, i16* %10109, i64 -16
  %10114 = bitcast i16* %10113 to <16 x i16>*
  store <16 x i16> %10112, <16 x i16>* %10114, align 2, !tbaa !399
  %10115 = zext i32 %.pre-phi to i64
  %10116 = mul nsw i64 %10115, %108
  %10117 = add nsw i64 %10116, %93
  %10118 = getelementptr inbounds i16, i16* %blur_x, i64 %10117
  %10119 = getelementptr inbounds i16, i16* %10118, i64 -32
  %10120 = bitcast i16* %10119 to <16 x i16>*
  %10121 = load <16 x i16>, <16 x i16>* %10120, align 2, !tbaa !399
  %10122 = getelementptr inbounds i16, i16* %10118, i64 -16
  %10123 = bitcast i16* %10122 to <16 x i16>*
  %10124 = load <16 x i16>, <16 x i16>* %10123, align 2, !tbaa !399
  %10125 = mul nsw i64 %10106, %108
  %10126 = add nsw i64 %10125, %93
  %10127 = getelementptr inbounds i16, i16* %blur_x, i64 %10126
  %10128 = getelementptr inbounds i16, i16* %10127, i64 -32
  %10129 = bitcast i16* %10128 to <16 x i16>*
  %10130 = load <16 x i16>, <16 x i16>* %10129, align 2, !tbaa !399
  %10131 = getelementptr inbounds i16, i16* %10127, i64 -16
  %10132 = bitcast i16* %10131 to <16 x i16>*
  %10133 = load <16 x i16>, <16 x i16>* %10132, align 2, !tbaa !399
  %10134 = zext i32 %.pre-phi3323 to i64
  %10135 = mul nsw i64 %10134, %108
  %10136 = add nsw i64 %10135, %93
  %10137 = getelementptr inbounds i16, i16* %blur_x, i64 %10136
  %10138 = getelementptr inbounds i16, i16* %10137, i64 -32
  %10139 = bitcast i16* %10138 to <16 x i16>*
  %10140 = load <16 x i16>, <16 x i16>* %10139, align 2, !tbaa !399
  %10141 = getelementptr inbounds i16, i16* %10137, i64 -16
  %10142 = bitcast i16* %10141 to <16 x i16>*
  %10143 = load <16 x i16>, <16 x i16>* %10142, align 2, !tbaa !399
  %10144 = add <16 x i16> %10130, %10121
  %10145 = add <16 x i16> %10144, %10140
  %10146 = add <16 x i16> %10133, %10124
  %10147 = add <16 x i16> %10146, %10143
  %10148 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10145, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10149 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10147, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10150 = shufflevector <16 x i16> %10148, <16 x i16> %10149, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10151 = lshr <32 x i16> %10150, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10152 = shufflevector <32 x i16> %10151, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10153 = sext i32 %a26 to i64
  %10154 = add nsw i64 %10153, 31
  %10155 = mul nsw i64 %10154, %109
  %10156 = add nsw i64 %111, %10155
  %10157 = getelementptr inbounds i16, i16* %65, i64 %10156
  %10158 = getelementptr inbounds i16, i16* %10157, i64 -32
  %10159 = bitcast i16* %10158 to <16 x i16>*
  store <16 x i16> %10152, <16 x i16>* %10159, align 2, !tbaa !401
  %10160 = shufflevector <32 x i16> %10151, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10161 = getelementptr inbounds i16, i16* %10157, i64 -16
  %10162 = bitcast i16* %10161 to <16 x i16>*
  store <16 x i16> %10160, <16 x i16>* %10162, align 2, !tbaa !401
  br label %after_bb735

"for blur_y.s0.x.x.rebased740":                   ; preds = %"for blur_y.s0.x.x.rebased740.preheader", %"consume blur_x747"
  %indvars.iv3224 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased740.preheader" ], [ %indvars.iv.next3225, %"consume blur_x747" ]
  %10163 = add nsw i64 %indvars.iv3224, %100
  %10164 = icmp slt i64 %10163, 1
  %10165 = trunc i64 %10163 to i32
  %10166 = shl nsw i32 %10165, 5
  %10167 = icmp sgt i32 %4, %10166
  %10168 = or i1 %10164, %10167
  br i1 %10168, label %"produce blur_x746", label %"for blur_y.s0.x.x.rebased740.consume blur_x747_crit_edge"

"for blur_y.s0.x.x.rebased740.consume blur_x747_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased740"
  %.pre3384 = shl nsw i64 %10163, 5
  br label %"consume blur_x747"

"end for blur_y.s0.x.x.rebased741":               ; preds = %"consume blur_x747", %after_bb735
  br i1 %101, label %"for blur_y.s0.x.x.rebased748.preheader", label %"end for blur_y.s0.x.x.rebased749", !prof !386

"for blur_y.s0.x.x.rebased748.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased741"
  %10169 = sext i32 %t1644 to i64
  %10170 = zext i32 %.pre-phi to i64
  %10171 = mul nsw i64 %10170, %108
  %10172 = sub nsw i64 %10171, %95
  %10173 = zext i32 %.pre-phi3313 to i64
  %10174 = mul nsw i64 %10173, %108
  %10175 = sub nsw i64 %10174, %95
  %10176 = zext i32 %.pre-phi3323 to i64
  %10177 = mul nsw i64 %10176, %108
  %10178 = sub nsw i64 %10177, %95
  %10179 = sext i32 %a26 to i64
  %10180 = add nsw i64 %10179, 31
  %10181 = mul nsw i64 %10180, %109
  %10182 = add nsw i64 %10181, %112
  br label %"for blur_y.s0.x.x.rebased748"

"produce blur_x746":                              ; preds = %"for blur_y.s0.x.x.rebased740"
  %t1168 = add nsw i32 %10166, %t2145
  %10183 = sext i32 %t1168 to i64
  %10184 = getelementptr inbounds i16, i16* %read_input, i64 %10183
  %10185 = getelementptr inbounds i16, i16* %10184, i64 1
  %10186 = bitcast i16* %10185 to <16 x i16>*
  %10187 = load <16 x i16>, <16 x i16>* %10186, align 2, !tbaa !396
  %10188 = getelementptr inbounds i16, i16* %10184, i64 17
  %10189 = bitcast i16* %10188 to <16 x i16>*
  %10190 = load <16 x i16>, <16 x i16>* %10189, align 2, !tbaa !396
  %10191 = getelementptr inbounds i16, i16* %10184, i64 2
  %10192 = bitcast i16* %10191 to <16 x i16>*
  %10193 = load <16 x i16>, <16 x i16>* %10192, align 2, !tbaa !396
  %10194 = getelementptr inbounds i16, i16* %10184, i64 18
  %10195 = bitcast i16* %10194 to <16 x i16>*
  %10196 = load <16 x i16>, <16 x i16>* %10195, align 2, !tbaa !396
  %10197 = bitcast i16* %10184 to <16 x i16>*
  %10198 = load <16 x i16>, <16 x i16>* %10197, align 2, !tbaa !396
  %10199 = getelementptr inbounds i16, i16* %10184, i64 16
  %10200 = bitcast i16* %10199 to <16 x i16>*
  %10201 = load <16 x i16>, <16 x i16>* %10200, align 2, !tbaa !396
  %10202 = add <16 x i16> %10193, %10187
  %10203 = add <16 x i16> %10202, %10198
  %10204 = add <16 x i16> %10196, %10190
  %10205 = add <16 x i16> %10204, %10201
  %10206 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10203, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10207 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10205, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10208 = shufflevector <16 x i16> %10206, <16 x i16> %10207, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10209 = lshr <32 x i16> %10208, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10210 = shufflevector <32 x i16> %10209, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10211 = shl nsw i64 %10163, 5
  %10212 = add nsw i64 %10211, %10064
  %10213 = getelementptr inbounds i16, i16* %blur_x, i64 %10212
  %10214 = bitcast i16* %10213 to <16 x i16>*
  store <16 x i16> %10210, <16 x i16>* %10214, align 2, !tbaa !399
  %10215 = shufflevector <32 x i16> %10209, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10216 = getelementptr inbounds i16, i16* %10213, i64 16
  %10217 = bitcast i16* %10216 to <16 x i16>*
  store <16 x i16> %10215, <16 x i16>* %10217, align 2, !tbaa !399
  br label %"consume blur_x747"

"consume blur_x747":                              ; preds = %"for blur_y.s0.x.x.rebased740.consume blur_x747_crit_edge", %"produce blur_x746"
  %.pre-phi3385 = phi i64 [ %.pre3384, %"for blur_y.s0.x.x.rebased740.consume blur_x747_crit_edge" ], [ %10211, %"produce blur_x746" ]
  %10218 = add nsw i64 %10067, %.pre-phi3385
  %10219 = getelementptr inbounds i16, i16* %blur_x, i64 %10218
  %10220 = bitcast i16* %10219 to <16 x i16>*
  %10221 = load <16 x i16>, <16 x i16>* %10220, align 2, !tbaa !399
  %10222 = getelementptr inbounds i16, i16* %10219, i64 16
  %10223 = bitcast i16* %10222 to <16 x i16>*
  %10224 = load <16 x i16>, <16 x i16>* %10223, align 2, !tbaa !399
  %10225 = add nsw i64 %10070, %.pre-phi3385
  %10226 = getelementptr inbounds i16, i16* %blur_x, i64 %10225
  %10227 = bitcast i16* %10226 to <16 x i16>*
  %10228 = load <16 x i16>, <16 x i16>* %10227, align 2, !tbaa !399
  %10229 = getelementptr inbounds i16, i16* %10226, i64 16
  %10230 = bitcast i16* %10229 to <16 x i16>*
  %10231 = load <16 x i16>, <16 x i16>* %10230, align 2, !tbaa !399
  %10232 = add nsw i64 %10073, %.pre-phi3385
  %10233 = getelementptr inbounds i16, i16* %blur_x, i64 %10232
  %10234 = bitcast i16* %10233 to <16 x i16>*
  %10235 = load <16 x i16>, <16 x i16>* %10234, align 2, !tbaa !399
  %10236 = getelementptr inbounds i16, i16* %10233, i64 16
  %10237 = bitcast i16* %10236 to <16 x i16>*
  %10238 = load <16 x i16>, <16 x i16>* %10237, align 2, !tbaa !399
  %10239 = add <16 x i16> %10228, %10221
  %10240 = add <16 x i16> %10239, %10235
  %10241 = add <16 x i16> %10231, %10224
  %10242 = add <16 x i16> %10241, %10238
  %10243 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10240, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10244 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10242, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10245 = shufflevector <16 x i16> %10243, <16 x i16> %10244, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10246 = lshr <32 x i16> %10245, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10247 = shufflevector <32 x i16> %10246, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10248 = add nsw i64 %10077, %.pre-phi3385
  %10249 = getelementptr inbounds i16, i16* %65, i64 %10248
  %10250 = bitcast i16* %10249 to <16 x i16>*
  store <16 x i16> %10247, <16 x i16>* %10250, align 2, !tbaa !401
  %10251 = shufflevector <32 x i16> %10246, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10252 = getelementptr inbounds i16, i16* %10249, i64 16
  %10253 = bitcast i16* %10252 to <16 x i16>*
  store <16 x i16> %10251, <16 x i16>* %10253, align 2, !tbaa !401
  %indvars.iv.next3225 = add nuw nsw i64 %indvars.iv3224, 1
  %.not2583 = icmp eq i64 %indvars.iv.next3225, %180
  br i1 %.not2583, label %"end for blur_y.s0.x.x.rebased741", label %"for blur_y.s0.x.x.rebased740"

"for blur_y.s0.x.x.rebased748":                   ; preds = %"for blur_y.s0.x.x.rebased748.preheader", %"consume blur_x756"
  %blur_y.s0.x.x.rebased750 = phi i32 [ %10333, %"consume blur_x756" ], [ 0, %"for blur_y.s0.x.x.rebased748.preheader" ]
  %10254 = add nsw i32 %blur_y.s0.x.x.rebased750, %t1582
  %a308 = shl nsw i32 %10254, 5
  %10255 = icmp sgt i32 %a14, %a308
  %b314 = select i1 %10255, i32 %a308, i32 %a14
  %10256 = icmp slt i32 %10254, 1
  %10257 = icmp sgt i32 %4, %a308
  %10258 = or i1 %10256, %10257
  br i1 %10258, label %"produce blur_x754", label %"consume blur_x756"

"end for blur_y.s0.x.x.rebased749":               ; preds = %"consume blur_x756", %"end for blur_y.s0.x.x.rebased741"
  %10259 = add nuw nsw i32 %blur_y.s0.y.y, 1
  %.not2581 = icmp eq i32 %10259, %t1568
  br i1 %.not2581, label %"end for blur_y.s0.y.y.loopexit", label %"for blur_y.s0.y.y"

"produce blur_x754":                              ; preds = %"for blur_y.s0.x.x.rebased748"
  %10260 = icmp slt i32 %b314, %4
  %blur_x.s0.x.v1.base.s755 = select i1 %10260, i32 %b314, i32 %4
  %t1173 = add nsw i32 %blur_x.s0.x.v1.base.s755, %t2145
  %10261 = sext i32 %t1173 to i64
  %10262 = getelementptr inbounds i16, i16* %read_input, i64 %10261
  %10263 = getelementptr inbounds i16, i16* %10262, i64 1
  %10264 = bitcast i16* %10263 to <16 x i16>*
  %10265 = load <16 x i16>, <16 x i16>* %10264, align 2, !tbaa !396
  %10266 = getelementptr inbounds i16, i16* %10262, i64 17
  %10267 = bitcast i16* %10266 to <16 x i16>*
  %10268 = load <16 x i16>, <16 x i16>* %10267, align 2, !tbaa !396
  %10269 = getelementptr inbounds i16, i16* %10262, i64 2
  %10270 = bitcast i16* %10269 to <16 x i16>*
  %10271 = load <16 x i16>, <16 x i16>* %10270, align 2, !tbaa !396
  %10272 = getelementptr inbounds i16, i16* %10262, i64 18
  %10273 = bitcast i16* %10272 to <16 x i16>*
  %10274 = load <16 x i16>, <16 x i16>* %10273, align 2, !tbaa !396
  %10275 = bitcast i16* %10262 to <16 x i16>*
  %10276 = load <16 x i16>, <16 x i16>* %10275, align 2, !tbaa !396
  %10277 = getelementptr inbounds i16, i16* %10262, i64 16
  %10278 = bitcast i16* %10277 to <16 x i16>*
  %10279 = load <16 x i16>, <16 x i16>* %10278, align 2, !tbaa !396
  %10280 = add <16 x i16> %10271, %10265
  %10281 = add <16 x i16> %10280, %10276
  %10282 = add <16 x i16> %10274, %10268
  %10283 = add <16 x i16> %10282, %10279
  %10284 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10281, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10285 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10283, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10286 = shufflevector <16 x i16> %10284, <16 x i16> %10285, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10287 = lshr <32 x i16> %10286, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10288 = shufflevector <32 x i16> %10287, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10289 = sext i32 %blur_x.s0.x.v1.base.s755 to i64
  %10290 = add nsw i64 %10289, %10169
  %10291 = getelementptr inbounds i16, i16* %blur_x, i64 %10290
  %10292 = bitcast i16* %10291 to <16 x i16>*
  store <16 x i16> %10288, <16 x i16>* %10292, align 2, !tbaa !399
  %10293 = shufflevector <32 x i16> %10287, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10294 = getelementptr inbounds i16, i16* %10291, i64 16
  %10295 = bitcast i16* %10294 to <16 x i16>*
  store <16 x i16> %10293, <16 x i16>* %10295, align 2, !tbaa !399
  br label %"consume blur_x756"

"consume blur_x756":                              ; preds = %"for blur_y.s0.x.x.rebased748", %"produce blur_x754"
  %10296 = sext i32 %b314 to i64
  %10297 = add nsw i64 %10172, %10296
  %10298 = getelementptr inbounds i16, i16* %blur_x, i64 %10297
  %10299 = bitcast i16* %10298 to <16 x i16>*
  %10300 = load <16 x i16>, <16 x i16>* %10299, align 2, !tbaa !399
  %10301 = getelementptr inbounds i16, i16* %10298, i64 16
  %10302 = bitcast i16* %10301 to <16 x i16>*
  %10303 = load <16 x i16>, <16 x i16>* %10302, align 2, !tbaa !399
  %10304 = add nsw i64 %10175, %10296
  %10305 = getelementptr inbounds i16, i16* %blur_x, i64 %10304
  %10306 = bitcast i16* %10305 to <16 x i16>*
  %10307 = load <16 x i16>, <16 x i16>* %10306, align 2, !tbaa !399
  %10308 = getelementptr inbounds i16, i16* %10305, i64 16
  %10309 = bitcast i16* %10308 to <16 x i16>*
  %10310 = load <16 x i16>, <16 x i16>* %10309, align 2, !tbaa !399
  %10311 = add nsw i64 %10178, %10296
  %10312 = getelementptr inbounds i16, i16* %blur_x, i64 %10311
  %10313 = bitcast i16* %10312 to <16 x i16>*
  %10314 = load <16 x i16>, <16 x i16>* %10313, align 2, !tbaa !399
  %10315 = getelementptr inbounds i16, i16* %10312, i64 16
  %10316 = bitcast i16* %10315 to <16 x i16>*
  %10317 = load <16 x i16>, <16 x i16>* %10316, align 2, !tbaa !399
  %10318 = add <16 x i16> %10307, %10300
  %10319 = add <16 x i16> %10318, %10314
  %10320 = add <16 x i16> %10310, %10303
  %10321 = add <16 x i16> %10320, %10317
  %10322 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10319, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10323 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10321, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10324 = shufflevector <16 x i16> %10322, <16 x i16> %10323, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10325 = lshr <32 x i16> %10324, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10326 = shufflevector <32 x i16> %10325, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10327 = add nsw i64 %10182, %10296
  %10328 = getelementptr inbounds i16, i16* %65, i64 %10327
  %10329 = bitcast i16* %10328 to <16 x i16>*
  store <16 x i16> %10326, <16 x i16>* %10329, align 2, !tbaa !401
  %10330 = shufflevector <32 x i16> %10325, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10331 = getelementptr inbounds i16, i16* %10328, i64 16
  %10332 = bitcast i16* %10331 to <16 x i16>*
  store <16 x i16> %10330, <16 x i16>* %10332, align 2, !tbaa !401
  %10333 = add nuw nsw i32 %blur_y.s0.x.x.rebased750, 1
  %.not2582 = icmp eq i32 %10333, %t1639
  br i1 %.not2582, label %"end for blur_y.s0.x.x.rebased749", label %"for blur_y.s0.x.x.rebased748"

"for blur_y.s0.y.y778":                           ; preds = %"for blur_y.s0.y.y778.preheader", %"end for blur_y.s0.x.x.rebased2266"
  %blur_y.s0.y.y780 = phi i32 [ %19706, %"end for blur_y.s0.x.x.rebased2266" ], [ 0, %"for blur_y.s0.y.y778.preheader" ]
  %a361 = shl nsw i32 %blur_y.s0.y.y780, 5
  %10334 = icmp sgt i32 %b363, %a361
  %blur_y.s0.y.yi.base.s781 = select i1 %10334, i32 %a361, i32 %b363
  %10335 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i2726 = icmp ult i64 %10335, %261
  %10336 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i2726, label %if.then.i2729, label %pseudostack_alloc.exit2742, !prof !390

if.then.i2729:                                    ; preds = %"for blur_y.s0.y.y778"
  %tobool1.not.i2728 = icmp ne i8* %10336, null
  %10337 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i2731 = icmp ugt i64 %10337, 16384
  %or.cond2796 = and i1 %tobool1.not.i2728, %cmp2.i2731
  br i1 %or.cond2796, label %if.then3.i2733, label %if.end.i2737

if.then3.i2733:                                   ; preds = %if.then.i2729
  call void @halide_free(i8* null, i8* nonnull %10336) #16
  %.pre3307 = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i2737

if.end.i2737:                                     ; preds = %if.then3.i2733, %if.then.i2729
  %10338 = phi i64 [ %.pre3307, %if.then3.i2733 ], [ %10337, %if.then.i2729 ]
  %add.i2735 = add i64 %10338, %261
  store i64 %add.i2735, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i2736 = icmp ugt i64 %add.i2735, 16384
  br i1 %cmp7.i2736, label %if.then8.i2739, label %if.end11.i2741

if.then8.i2739:                                   ; preds = %if.end.i2737
  %call.i2738 = call i8* @halide_malloc(i8* null, i64 %261) #16
  br label %if.end11.i2741

if.end11.i2741:                                   ; preds = %if.then8.i2739, %if.end.i2737
  %storemerge.i2740 = phi i8* [ %call.i2738, %if.then8.i2739 ], [ null, %if.end.i2737 ]
  store i8* %storemerge.i2740, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %261, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2742

pseudostack_alloc.exit2742:                       ; preds = %"for blur_y.s0.y.y778", %if.end11.i2741
  %10339 = phi i8* [ %storemerge.i2740, %if.end11.i2741 ], [ %10336, %"for blur_y.s0.y.y778" ]
  %10340 = bitcast i8* %10339 to i16*
  %.not2432 = icmp eq i8* %10339, null
  br i1 %.not2432, label %then_bb783, label %"produce read_input785", !prof !392

"end for blur_y.s0.y.y779":                       ; preds = %"end for blur_y.s0.y.y"
  %tobool.not.i.not = icmp eq i8* %.02785, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i2743

if.then.i2743.loopexit:                           ; preds = %"end for blur_y.s0.x.x.rebased2266"
  %10341 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %10342 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %if.then.i2743

if.then.i2743:                                    ; preds = %if.then.i2743.loopexit, %"end for blur_y.s0.y.y779"
  %.12793 = phi i8* [ %.0, %"end for blur_y.s0.y.y779" ], [ %10341, %if.then.i2743.loopexit ]
  %.127862790 = phi i8* [ %.02785, %"end for blur_y.s0.y.y779" ], [ %10342, %if.then.i2743.loopexit ]
  %ptr1.i = bitcast i8* %.127862790 to i8**
  %10343 = load i8*, i8** %ptr1.i, align 8, !tbaa !389
  %tobool.not.i2767 = icmp eq i8* %10343, null
  br i1 %tobool.not.i2767, label %pseudostack_free.exit, label %land.lhs.true.i2770

land.lhs.true.i2770:                              ; preds = %if.then.i2743
  %cumulative_size.i2768 = getelementptr inbounds i8, i8* %.127862790, i64 16
  %10344 = bitcast i8* %cumulative_size.i2768 to i64*
  %10345 = load i64, i64* %10344, align 8, !tbaa !391
  %cmp.i2769 = icmp ugt i64 %10345, 16384
  br i1 %cmp.i2769, label %if.then.i2771, label %pseudostack_free.exit

if.then.i2771:                                    ; preds = %land.lhs.true.i2770
  call void @halide_free(i8* null, i8* nonnull %10343) #16
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i2743, %land.lhs.true.i2770, %if.then.i2771
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.127862790, i8 0, i64 24, i1 false)
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %"end for blur_y.s0.y.y779", %pseudostack_free.exit
  %.12792 = phi i8* [ %.0, %"end for blur_y.s0.y.y779" ], [ %.12793, %pseudostack_free.exit ]
  %tobool.not.i2745.not = icmp eq i8* %.12792, null
  br i1 %tobool.not.i2745.not, label %call_destructor.exit2748, label %if.then.i2746

if.then.i2746:                                    ; preds = %call_destructor.exit
  %ptr1.i2774 = bitcast i8* %.12792 to i8**
  %10346 = load i8*, i8** %ptr1.i2774, align 8, !tbaa !389
  %tobool.not.i2775 = icmp eq i8* %10346, null
  br i1 %tobool.not.i2775, label %pseudostack_free.exit2783, label %land.lhs.true.i2778

land.lhs.true.i2778:                              ; preds = %if.then.i2746
  %cumulative_size.i2776 = getelementptr inbounds i8, i8* %.12792, i64 16
  %10347 = bitcast i8* %cumulative_size.i2776 to i64*
  %10348 = load i64, i64* %10347, align 8, !tbaa !391
  %cmp.i2777 = icmp ugt i64 %10348, 16384
  br i1 %cmp.i2777, label %if.then.i2779, label %pseudostack_free.exit2783

if.then.i2779:                                    ; preds = %land.lhs.true.i2778
  call void @halide_free(i8* null, i8* nonnull %10346) #16
  br label %pseudostack_free.exit2783

pseudostack_free.exit2783:                        ; preds = %if.then.i2746, %land.lhs.true.i2778, %if.then.i2779
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.12792, i8 0, i64 24, i1 false)
  br label %call_destructor.exit2748

call_destructor.exit2748:                         ; preds = %call_destructor.exit, %pseudostack_free.exit2783
  ret i32 0

then_bb783:                                       ; preds = %pseudostack_alloc.exit2742
  %10349 = alloca i8*, i64 %261, align 32
  %10350 = bitcast i8** %10349 to i16*
  store i8** %10349, i8*** %262, align 8
  br label %"produce read_input785"

"produce read_input785":                          ; preds = %pseudostack_alloc.exit2742, %then_bb783
  %read_input784 = phi i16* [ %10350, %then_bb783 ], [ %10340, %pseudostack_alloc.exit2742 ]
  %a365 = add nsw i32 %blur_y.s0.y.yi.base.s781, %195
  %10351 = icmp sgt i32 %a365, %201
  %a364 = select i1 %10351, i32 %a365, i32 %201
  %b366 = add nsw i32 %a365, 34
  %10352 = icmp sgt i32 %b366, %a364
  %10353 = icmp sgt i32 %a364, %b371
  %a368 = select i1 %10353, i32 %a364, i32 %b371
  %10354 = icmp sgt i32 %b366, %a368
  %a374 = sub i32 %263, %blur_y.s0.y.yi.base.s781
  %10355 = icmp sgt i32 %a374, 0
  br i1 %10355, label %"for read_input.s0.y.rebased792.preheader", label %"end for read_input.s0.y.rebased793", !prof !386

"for read_input.s0.y.rebased792.preheader":       ; preds = %"produce read_input785"
  %10356 = icmp slt i32 %a374, 34
  %a373 = select i1 %10356, i32 %a374, i32 34
  %10357 = add nsw i32 %264, %blur_y.s0.y.yi.base.s781
  %10358 = sext i32 %10357 to i64
  %10359 = zext i32 %a373 to i64
  br label %"for read_input.s0.y.rebased792"

"for read_input.s0.y.rebased792":                 ; preds = %"for read_input.s0.y.rebased792.preheader", %"end for read_input.s0.x.x798"
  %indvars.iv3227 = phi i64 [ 0, %"for read_input.s0.y.rebased792.preheader" ], [ %indvars.iv.next3228, %"end for read_input.s0.x.x798" ]
  %10360 = add nsw i64 %indvars.iv3227, %10358
  %10361 = icmp slt i64 %10360, %509
  %10362 = trunc i64 %10360 to i32
  %a381 = select i1 %10361, i32 %10362, i32 %b384
  %10363 = trunc i64 %indvars.iv3227 to i32
  %10364 = mul i32 %a363, %10363
  %t1610796 = sub i32 %10364, %265
  %10365 = icmp sgt i32 %a381, 0
  %10366 = select i1 %10365, i32 %a381, i32 0
  %10367 = mul nsw i32 %10366, %203
  %t1609795 = sub nsw i32 %10367, %199
  %10368 = insertelement <32 x i32> undef, i32 %t1609795, i32 0
  %10369 = shufflevector <32 x i32> %10368, <32 x i32> undef, <32 x i32> zeroinitializer
  %10370 = sext i32 %t1610796 to i64
  br label %"for read_input.s0.x.x797"

"end for read_input.s0.y.rebased793":             ; preds = %"end for read_input.s0.x.x798", %"produce read_input785"
  %10371 = icmp sgt i32 %t1592, %a365
  %a410 = select i1 %10371, i32 %t1592, i32 %a365
  %10372 = icmp sgt i32 %b366, %a410
  %10373 = select i1 %10372, i32 %a410, i32 %b366
  %10374 = select i1 %10352, i32 %a364, i32 %b366
  %t1611802 = sub nsw i32 %10373, %10374
  %10375 = icmp sgt i32 %t1611802, 0
  br i1 %10375, label %"for read_input.s0.y.rebased807.preheader", label %"end for read_input.s0.y.rebased808", !prof !386

"for read_input.s0.y.rebased807.preheader":       ; preds = %"end for read_input.s0.y.rebased793"
  %10376 = sub i32 %10374, %201
  %10377 = sext i32 %blur_y.s0.y.yi.base.s781 to i64
  %a450 = sub nsw i64 %276, %10377
  %10378 = icmp slt i64 %a450, 34
  %a449 = select i1 %10378, i64 %a450, i64 34
  %10379 = icmp sgt i64 %a449, 0
  %10380 = select i1 %10379, i64 %a449, i64 0
  %10381 = sext i32 %10376 to i64
  %10382 = zext i32 %t1611802 to i64
  br label %"for read_input.s0.y.rebased807"

"for read_input.s0.x.x797":                       ; preds = %"for read_input.s0.y.rebased792", %"for read_input.s0.x.x797"
  %read_input.s0.x.x799 = phi i32 [ %10581, %"for read_input.s0.x.x797" ], [ 0, %"for read_input.s0.y.rebased792" ]
  %10383 = shl nsw i32 %read_input.s0.x.x799, 5
  %a403 = add nsw i32 %266, %10383
  %10384 = icmp sgt i32 %b405, %a403
  %read_input.s0.x.v2.base.s800 = select i1 %10384, i32 %a403, i32 %b405
  %10385 = add nsw i32 %read_input.s0.x.v2.base.s800, -32
  %10386 = insertelement <32 x i32> undef, i32 %10385, i32 0
  %10387 = shufflevector <32 x i32> %10386, <32 x i32> undef, <32 x i32> zeroinitializer
  %a406 = add nsw <32 x i32> %10387, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10388 = shufflevector <32 x i32> %a406, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10389 = icmp sgt <8 x i32> %269, %10388
  %10390 = shufflevector <32 x i32> %a406, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10391 = icmp sgt <8 x i32> %269, %10390
  %10392 = shufflevector <32 x i32> %a406, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10393 = icmp sgt <8 x i32> %269, %10392
  %10394 = shufflevector <32 x i32> %a406, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10395 = icmp sgt <8 x i32> %269, %10394
  %10396 = select <8 x i1> %10389, <8 x i32> %10388, <8 x i32> %269
  %10397 = select <8 x i1> %10391, <8 x i32> %10390, <8 x i32> %269
  %10398 = select <8 x i1> %10393, <8 x i32> %10392, <8 x i32> %269
  %10399 = select <8 x i1> %10395, <8 x i32> %10394, <8 x i32> %269
  %10400 = icmp sgt <8 x i32> %10396, %271
  %10401 = icmp sgt <8 x i32> %10397, %271
  %10402 = icmp sgt <8 x i32> %10398, %271
  %10403 = icmp sgt <8 x i32> %10399, %271
  %10404 = select <8 x i1> %10400, <8 x i32> %10396, <8 x i32> %271
  %10405 = select <8 x i1> %10401, <8 x i32> %10397, <8 x i32> %271
  %10406 = select <8 x i1> %10402, <8 x i32> %10398, <8 x i32> %271
  %10407 = select <8 x i1> %10403, <8 x i32> %10399, <8 x i32> %271
  %10408 = shufflevector <8 x i32> %10404, <8 x i32> %10405, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10409 = shufflevector <8 x i32> %10406, <8 x i32> %10407, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10410 = shufflevector <16 x i32> %10408, <16 x i32> %10409, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10411 = add nsw <32 x i32> %10410, %10369
  %10412 = extractelement <32 x i32> %10411, i32 0
  %10413 = sext i32 %10412 to i64
  %10414 = getelementptr inbounds i16, i16* %256, i64 %10413
  %10415 = load i16, i16* %10414, align 2, !tbaa !393
  %10416 = insertelement <32 x i16> undef, i16 %10415, i32 0
  %10417 = extractelement <32 x i32> %10411, i32 1
  %10418 = sext i32 %10417 to i64
  %10419 = getelementptr inbounds i16, i16* %256, i64 %10418
  %10420 = load i16, i16* %10419, align 2, !tbaa !393
  %10421 = insertelement <32 x i16> %10416, i16 %10420, i32 1
  %10422 = extractelement <32 x i32> %10411, i32 2
  %10423 = sext i32 %10422 to i64
  %10424 = getelementptr inbounds i16, i16* %256, i64 %10423
  %10425 = load i16, i16* %10424, align 2, !tbaa !393
  %10426 = insertelement <32 x i16> %10421, i16 %10425, i32 2
  %10427 = extractelement <32 x i32> %10411, i32 3
  %10428 = sext i32 %10427 to i64
  %10429 = getelementptr inbounds i16, i16* %256, i64 %10428
  %10430 = load i16, i16* %10429, align 2, !tbaa !393
  %10431 = insertelement <32 x i16> %10426, i16 %10430, i32 3
  %10432 = extractelement <32 x i32> %10411, i32 4
  %10433 = sext i32 %10432 to i64
  %10434 = getelementptr inbounds i16, i16* %256, i64 %10433
  %10435 = load i16, i16* %10434, align 2, !tbaa !393
  %10436 = insertelement <32 x i16> %10431, i16 %10435, i32 4
  %10437 = extractelement <32 x i32> %10411, i32 5
  %10438 = sext i32 %10437 to i64
  %10439 = getelementptr inbounds i16, i16* %256, i64 %10438
  %10440 = load i16, i16* %10439, align 2, !tbaa !393
  %10441 = insertelement <32 x i16> %10436, i16 %10440, i32 5
  %10442 = extractelement <32 x i32> %10411, i32 6
  %10443 = sext i32 %10442 to i64
  %10444 = getelementptr inbounds i16, i16* %256, i64 %10443
  %10445 = load i16, i16* %10444, align 2, !tbaa !393
  %10446 = insertelement <32 x i16> %10441, i16 %10445, i32 6
  %10447 = extractelement <32 x i32> %10411, i32 7
  %10448 = sext i32 %10447 to i64
  %10449 = getelementptr inbounds i16, i16* %256, i64 %10448
  %10450 = load i16, i16* %10449, align 2, !tbaa !393
  %10451 = insertelement <32 x i16> %10446, i16 %10450, i32 7
  %10452 = extractelement <32 x i32> %10411, i32 8
  %10453 = sext i32 %10452 to i64
  %10454 = getelementptr inbounds i16, i16* %256, i64 %10453
  %10455 = load i16, i16* %10454, align 2, !tbaa !393
  %10456 = insertelement <32 x i16> %10451, i16 %10455, i32 8
  %10457 = extractelement <32 x i32> %10411, i32 9
  %10458 = sext i32 %10457 to i64
  %10459 = getelementptr inbounds i16, i16* %256, i64 %10458
  %10460 = load i16, i16* %10459, align 2, !tbaa !393
  %10461 = insertelement <32 x i16> %10456, i16 %10460, i32 9
  %10462 = extractelement <32 x i32> %10411, i32 10
  %10463 = sext i32 %10462 to i64
  %10464 = getelementptr inbounds i16, i16* %256, i64 %10463
  %10465 = load i16, i16* %10464, align 2, !tbaa !393
  %10466 = insertelement <32 x i16> %10461, i16 %10465, i32 10
  %10467 = extractelement <32 x i32> %10411, i32 11
  %10468 = sext i32 %10467 to i64
  %10469 = getelementptr inbounds i16, i16* %256, i64 %10468
  %10470 = load i16, i16* %10469, align 2, !tbaa !393
  %10471 = insertelement <32 x i16> %10466, i16 %10470, i32 11
  %10472 = extractelement <32 x i32> %10411, i32 12
  %10473 = sext i32 %10472 to i64
  %10474 = getelementptr inbounds i16, i16* %256, i64 %10473
  %10475 = load i16, i16* %10474, align 2, !tbaa !393
  %10476 = insertelement <32 x i16> %10471, i16 %10475, i32 12
  %10477 = extractelement <32 x i32> %10411, i32 13
  %10478 = sext i32 %10477 to i64
  %10479 = getelementptr inbounds i16, i16* %256, i64 %10478
  %10480 = load i16, i16* %10479, align 2, !tbaa !393
  %10481 = insertelement <32 x i16> %10476, i16 %10480, i32 13
  %10482 = extractelement <32 x i32> %10411, i32 14
  %10483 = sext i32 %10482 to i64
  %10484 = getelementptr inbounds i16, i16* %256, i64 %10483
  %10485 = load i16, i16* %10484, align 2, !tbaa !393
  %10486 = insertelement <32 x i16> %10481, i16 %10485, i32 14
  %10487 = extractelement <32 x i32> %10411, i32 15
  %10488 = sext i32 %10487 to i64
  %10489 = getelementptr inbounds i16, i16* %256, i64 %10488
  %10490 = load i16, i16* %10489, align 2, !tbaa !393
  %10491 = insertelement <32 x i16> %10486, i16 %10490, i32 15
  %10492 = extractelement <32 x i32> %10411, i32 16
  %10493 = sext i32 %10492 to i64
  %10494 = getelementptr inbounds i16, i16* %256, i64 %10493
  %10495 = load i16, i16* %10494, align 2, !tbaa !393
  %10496 = insertelement <32 x i16> %10491, i16 %10495, i32 16
  %10497 = extractelement <32 x i32> %10411, i32 17
  %10498 = sext i32 %10497 to i64
  %10499 = getelementptr inbounds i16, i16* %256, i64 %10498
  %10500 = load i16, i16* %10499, align 2, !tbaa !393
  %10501 = insertelement <32 x i16> %10496, i16 %10500, i32 17
  %10502 = extractelement <32 x i32> %10411, i32 18
  %10503 = sext i32 %10502 to i64
  %10504 = getelementptr inbounds i16, i16* %256, i64 %10503
  %10505 = load i16, i16* %10504, align 2, !tbaa !393
  %10506 = insertelement <32 x i16> %10501, i16 %10505, i32 18
  %10507 = extractelement <32 x i32> %10411, i32 19
  %10508 = sext i32 %10507 to i64
  %10509 = getelementptr inbounds i16, i16* %256, i64 %10508
  %10510 = load i16, i16* %10509, align 2, !tbaa !393
  %10511 = insertelement <32 x i16> %10506, i16 %10510, i32 19
  %10512 = extractelement <32 x i32> %10411, i32 20
  %10513 = sext i32 %10512 to i64
  %10514 = getelementptr inbounds i16, i16* %256, i64 %10513
  %10515 = load i16, i16* %10514, align 2, !tbaa !393
  %10516 = insertelement <32 x i16> %10511, i16 %10515, i32 20
  %10517 = extractelement <32 x i32> %10411, i32 21
  %10518 = sext i32 %10517 to i64
  %10519 = getelementptr inbounds i16, i16* %256, i64 %10518
  %10520 = load i16, i16* %10519, align 2, !tbaa !393
  %10521 = insertelement <32 x i16> %10516, i16 %10520, i32 21
  %10522 = extractelement <32 x i32> %10411, i32 22
  %10523 = sext i32 %10522 to i64
  %10524 = getelementptr inbounds i16, i16* %256, i64 %10523
  %10525 = load i16, i16* %10524, align 2, !tbaa !393
  %10526 = insertelement <32 x i16> %10521, i16 %10525, i32 22
  %10527 = extractelement <32 x i32> %10411, i32 23
  %10528 = sext i32 %10527 to i64
  %10529 = getelementptr inbounds i16, i16* %256, i64 %10528
  %10530 = load i16, i16* %10529, align 2, !tbaa !393
  %10531 = insertelement <32 x i16> %10526, i16 %10530, i32 23
  %10532 = extractelement <32 x i32> %10411, i32 24
  %10533 = sext i32 %10532 to i64
  %10534 = getelementptr inbounds i16, i16* %256, i64 %10533
  %10535 = load i16, i16* %10534, align 2, !tbaa !393
  %10536 = insertelement <32 x i16> %10531, i16 %10535, i32 24
  %10537 = extractelement <32 x i32> %10411, i32 25
  %10538 = sext i32 %10537 to i64
  %10539 = getelementptr inbounds i16, i16* %256, i64 %10538
  %10540 = load i16, i16* %10539, align 2, !tbaa !393
  %10541 = insertelement <32 x i16> %10536, i16 %10540, i32 25
  %10542 = extractelement <32 x i32> %10411, i32 26
  %10543 = sext i32 %10542 to i64
  %10544 = getelementptr inbounds i16, i16* %256, i64 %10543
  %10545 = load i16, i16* %10544, align 2, !tbaa !393
  %10546 = insertelement <32 x i16> %10541, i16 %10545, i32 26
  %10547 = extractelement <32 x i32> %10411, i32 27
  %10548 = sext i32 %10547 to i64
  %10549 = getelementptr inbounds i16, i16* %256, i64 %10548
  %10550 = load i16, i16* %10549, align 2, !tbaa !393
  %10551 = insertelement <32 x i16> %10546, i16 %10550, i32 27
  %10552 = extractelement <32 x i32> %10411, i32 28
  %10553 = sext i32 %10552 to i64
  %10554 = getelementptr inbounds i16, i16* %256, i64 %10553
  %10555 = load i16, i16* %10554, align 2, !tbaa !393
  %10556 = insertelement <32 x i16> %10551, i16 %10555, i32 28
  %10557 = extractelement <32 x i32> %10411, i32 29
  %10558 = sext i32 %10557 to i64
  %10559 = getelementptr inbounds i16, i16* %256, i64 %10558
  %10560 = load i16, i16* %10559, align 2, !tbaa !393
  %10561 = insertelement <32 x i16> %10556, i16 %10560, i32 29
  %10562 = extractelement <32 x i32> %10411, i32 30
  %10563 = sext i32 %10562 to i64
  %10564 = getelementptr inbounds i16, i16* %256, i64 %10563
  %10565 = load i16, i16* %10564, align 2, !tbaa !393
  %10566 = insertelement <32 x i16> %10561, i16 %10565, i32 30
  %10567 = extractelement <32 x i32> %10411, i32 31
  %10568 = sext i32 %10567 to i64
  %10569 = getelementptr inbounds i16, i16* %256, i64 %10568
  %10570 = load i16, i16* %10569, align 2, !tbaa !393
  %10571 = insertelement <32 x i16> %10566, i16 %10570, i32 31
  %10572 = shufflevector <32 x i16> %10571, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10573 = sext i32 %read_input.s0.x.v2.base.s800 to i64
  %10574 = add nsw i64 %10573, %10370
  %10575 = getelementptr inbounds i16, i16* %read_input784, i64 %10574
  %10576 = getelementptr inbounds i16, i16* %10575, i64 -32
  %10577 = bitcast i16* %10576 to <16 x i16>*
  store <16 x i16> %10572, <16 x i16>* %10577, align 2, !tbaa !396
  %10578 = shufflevector <32 x i16> %10571, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10579 = getelementptr inbounds i16, i16* %10575, i64 -16
  %10580 = bitcast i16* %10579 to <16 x i16>*
  store <16 x i16> %10578, <16 x i16>* %10580, align 2, !tbaa !396
  %10581 = add nuw nsw i32 %read_input.s0.x.x799, 1
  %.not2577 = icmp eq i32 %10581, %211
  br i1 %.not2577, label %"end for read_input.s0.x.x798", label %"for read_input.s0.x.x797"

"end for read_input.s0.x.x798":                   ; preds = %"for read_input.s0.x.x797"
  %indvars.iv.next3228 = add nuw nsw i64 %indvars.iv3227, 1
  %.not2576 = icmp eq i64 %indvars.iv.next3228, %10359
  br i1 %.not2576, label %"end for read_input.s0.y.rebased793", label %"for read_input.s0.y.rebased792"

"for read_input.s0.y.rebased807":                 ; preds = %"for read_input.s0.y.rebased807.preheader", %"end for read_input.s0.x.x.rebased823"
  %indvars.iv3233 = phi i64 [ 0, %"for read_input.s0.y.rebased807.preheader" ], [ %indvars.iv.next3234, %"end for read_input.s0.x.x.rebased823" ]
  %10582 = add nsw i64 %indvars.iv3233, %10381
  %10583 = mul nsw i64 %10582, %513
  %10584 = sub nsw i64 %10583, %514
  br i1 %273, label %"for read_input.s0.x.x811.preheader", label %"end for read_input.s0.x.x812", !prof !386

"for read_input.s0.x.x811.preheader":             ; preds = %"for read_input.s0.y.rebased807"
  %10585 = trunc i64 %10584 to i32
  %10586 = insertelement <32 x i32> undef, i32 %10585, i32 0
  %10587 = shufflevector <32 x i32> %10586, <32 x i32> undef, <32 x i32> zeroinitializer
  %10588 = add nuw nsw i64 %10380, %indvars.iv3233
  %10589 = mul nsw i64 %10588, %277
  %10590 = sub i64 %10589, %278
  br label %"for read_input.s0.x.x811"

"end for read_input.s0.y.rebased808":             ; preds = %"end for read_input.s0.x.x.rebased823", %"end for read_input.s0.y.rebased793"
  %a510 = add nsw i32 %blur_y.s0.y.yi.base.s781, %281
  %10591 = icmp slt i32 %a510, 0
  %a509 = select i1 %10591, i32 %a510, i32 0
  %10592 = icmp sgt i32 %a509, -34
  br i1 %10592, label %"for read_input.s0.y.rebased831.preheader", label %"end for read_input.s0.y.rebased832", !prof !386

"for read_input.s0.y.rebased831.preheader":       ; preds = %"end for read_input.s0.y.rebased808"
  %10593 = select i1 %10354, i32 %a368, i32 %b366
  %10594 = sub nsw i32 %10593, %201
  %10595 = sext i32 %blur_y.s0.y.yi.base.s781 to i64
  %a534 = sub nsw i64 %283, %10595
  %10596 = icmp slt i64 %a534, 34
  %a533 = select i1 %10596, i64 %a534, i64 34
  %10597 = icmp sgt i64 %a533, 0
  %10598 = select i1 %10597, i64 %a533, i64 0
  %a509.op = add nsw i32 %a509, 33
  %10599 = zext i32 %a509.op to i64
  br label %"for read_input.s0.y.rebased831"

"for read_input.s0.x.x811":                       ; preds = %"for read_input.s0.x.x811.preheader", %"for read_input.s0.x.x811"
  %read_input.s0.x.x813 = phi i32 [ %10798, %"for read_input.s0.x.x811" ], [ 0, %"for read_input.s0.x.x811.preheader" ]
  %10600 = shl nsw i32 %read_input.s0.x.x813, 5
  %a445 = add nsw i32 %266, %10600
  %10601 = icmp sgt i32 %b405, %a445
  %read_input.s0.x.v2.base.s814 = select i1 %10601, i32 %a445, i32 %b405
  %10602 = add nsw i32 %read_input.s0.x.v2.base.s814, -32
  %10603 = insertelement <32 x i32> undef, i32 %10602, i32 0
  %10604 = shufflevector <32 x i32> %10603, <32 x i32> undef, <32 x i32> zeroinitializer
  %a448 = add nsw <32 x i32> %10604, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10605 = shufflevector <32 x i32> %a448, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10606 = icmp sgt <8 x i32> %269, %10605
  %10607 = shufflevector <32 x i32> %a448, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10608 = icmp sgt <8 x i32> %269, %10607
  %10609 = shufflevector <32 x i32> %a448, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10610 = icmp sgt <8 x i32> %269, %10609
  %10611 = shufflevector <32 x i32> %a448, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10612 = icmp sgt <8 x i32> %269, %10611
  %10613 = select <8 x i1> %10606, <8 x i32> %10605, <8 x i32> %269
  %10614 = select <8 x i1> %10608, <8 x i32> %10607, <8 x i32> %269
  %10615 = select <8 x i1> %10610, <8 x i32> %10609, <8 x i32> %269
  %10616 = select <8 x i1> %10612, <8 x i32> %10611, <8 x i32> %269
  %10617 = icmp sgt <8 x i32> %10613, %271
  %10618 = icmp sgt <8 x i32> %10614, %271
  %10619 = icmp sgt <8 x i32> %10615, %271
  %10620 = icmp sgt <8 x i32> %10616, %271
  %10621 = select <8 x i1> %10617, <8 x i32> %10613, <8 x i32> %271
  %10622 = select <8 x i1> %10618, <8 x i32> %10614, <8 x i32> %271
  %10623 = select <8 x i1> %10619, <8 x i32> %10615, <8 x i32> %271
  %10624 = select <8 x i1> %10620, <8 x i32> %10616, <8 x i32> %271
  %10625 = shufflevector <8 x i32> %10621, <8 x i32> %10622, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10626 = shufflevector <8 x i32> %10623, <8 x i32> %10624, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10627 = shufflevector <16 x i32> %10625, <16 x i32> %10626, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10628 = add nsw <32 x i32> %10627, %10587
  %10629 = extractelement <32 x i32> %10628, i32 0
  %10630 = sext i32 %10629 to i64
  %10631 = getelementptr inbounds i16, i16* %256, i64 %10630
  %10632 = load i16, i16* %10631, align 2, !tbaa !393
  %10633 = insertelement <32 x i16> undef, i16 %10632, i32 0
  %10634 = extractelement <32 x i32> %10628, i32 1
  %10635 = sext i32 %10634 to i64
  %10636 = getelementptr inbounds i16, i16* %256, i64 %10635
  %10637 = load i16, i16* %10636, align 2, !tbaa !393
  %10638 = insertelement <32 x i16> %10633, i16 %10637, i32 1
  %10639 = extractelement <32 x i32> %10628, i32 2
  %10640 = sext i32 %10639 to i64
  %10641 = getelementptr inbounds i16, i16* %256, i64 %10640
  %10642 = load i16, i16* %10641, align 2, !tbaa !393
  %10643 = insertelement <32 x i16> %10638, i16 %10642, i32 2
  %10644 = extractelement <32 x i32> %10628, i32 3
  %10645 = sext i32 %10644 to i64
  %10646 = getelementptr inbounds i16, i16* %256, i64 %10645
  %10647 = load i16, i16* %10646, align 2, !tbaa !393
  %10648 = insertelement <32 x i16> %10643, i16 %10647, i32 3
  %10649 = extractelement <32 x i32> %10628, i32 4
  %10650 = sext i32 %10649 to i64
  %10651 = getelementptr inbounds i16, i16* %256, i64 %10650
  %10652 = load i16, i16* %10651, align 2, !tbaa !393
  %10653 = insertelement <32 x i16> %10648, i16 %10652, i32 4
  %10654 = extractelement <32 x i32> %10628, i32 5
  %10655 = sext i32 %10654 to i64
  %10656 = getelementptr inbounds i16, i16* %256, i64 %10655
  %10657 = load i16, i16* %10656, align 2, !tbaa !393
  %10658 = insertelement <32 x i16> %10653, i16 %10657, i32 5
  %10659 = extractelement <32 x i32> %10628, i32 6
  %10660 = sext i32 %10659 to i64
  %10661 = getelementptr inbounds i16, i16* %256, i64 %10660
  %10662 = load i16, i16* %10661, align 2, !tbaa !393
  %10663 = insertelement <32 x i16> %10658, i16 %10662, i32 6
  %10664 = extractelement <32 x i32> %10628, i32 7
  %10665 = sext i32 %10664 to i64
  %10666 = getelementptr inbounds i16, i16* %256, i64 %10665
  %10667 = load i16, i16* %10666, align 2, !tbaa !393
  %10668 = insertelement <32 x i16> %10663, i16 %10667, i32 7
  %10669 = extractelement <32 x i32> %10628, i32 8
  %10670 = sext i32 %10669 to i64
  %10671 = getelementptr inbounds i16, i16* %256, i64 %10670
  %10672 = load i16, i16* %10671, align 2, !tbaa !393
  %10673 = insertelement <32 x i16> %10668, i16 %10672, i32 8
  %10674 = extractelement <32 x i32> %10628, i32 9
  %10675 = sext i32 %10674 to i64
  %10676 = getelementptr inbounds i16, i16* %256, i64 %10675
  %10677 = load i16, i16* %10676, align 2, !tbaa !393
  %10678 = insertelement <32 x i16> %10673, i16 %10677, i32 9
  %10679 = extractelement <32 x i32> %10628, i32 10
  %10680 = sext i32 %10679 to i64
  %10681 = getelementptr inbounds i16, i16* %256, i64 %10680
  %10682 = load i16, i16* %10681, align 2, !tbaa !393
  %10683 = insertelement <32 x i16> %10678, i16 %10682, i32 10
  %10684 = extractelement <32 x i32> %10628, i32 11
  %10685 = sext i32 %10684 to i64
  %10686 = getelementptr inbounds i16, i16* %256, i64 %10685
  %10687 = load i16, i16* %10686, align 2, !tbaa !393
  %10688 = insertelement <32 x i16> %10683, i16 %10687, i32 11
  %10689 = extractelement <32 x i32> %10628, i32 12
  %10690 = sext i32 %10689 to i64
  %10691 = getelementptr inbounds i16, i16* %256, i64 %10690
  %10692 = load i16, i16* %10691, align 2, !tbaa !393
  %10693 = insertelement <32 x i16> %10688, i16 %10692, i32 12
  %10694 = extractelement <32 x i32> %10628, i32 13
  %10695 = sext i32 %10694 to i64
  %10696 = getelementptr inbounds i16, i16* %256, i64 %10695
  %10697 = load i16, i16* %10696, align 2, !tbaa !393
  %10698 = insertelement <32 x i16> %10693, i16 %10697, i32 13
  %10699 = extractelement <32 x i32> %10628, i32 14
  %10700 = sext i32 %10699 to i64
  %10701 = getelementptr inbounds i16, i16* %256, i64 %10700
  %10702 = load i16, i16* %10701, align 2, !tbaa !393
  %10703 = insertelement <32 x i16> %10698, i16 %10702, i32 14
  %10704 = extractelement <32 x i32> %10628, i32 15
  %10705 = sext i32 %10704 to i64
  %10706 = getelementptr inbounds i16, i16* %256, i64 %10705
  %10707 = load i16, i16* %10706, align 2, !tbaa !393
  %10708 = insertelement <32 x i16> %10703, i16 %10707, i32 15
  %10709 = extractelement <32 x i32> %10628, i32 16
  %10710 = sext i32 %10709 to i64
  %10711 = getelementptr inbounds i16, i16* %256, i64 %10710
  %10712 = load i16, i16* %10711, align 2, !tbaa !393
  %10713 = insertelement <32 x i16> %10708, i16 %10712, i32 16
  %10714 = extractelement <32 x i32> %10628, i32 17
  %10715 = sext i32 %10714 to i64
  %10716 = getelementptr inbounds i16, i16* %256, i64 %10715
  %10717 = load i16, i16* %10716, align 2, !tbaa !393
  %10718 = insertelement <32 x i16> %10713, i16 %10717, i32 17
  %10719 = extractelement <32 x i32> %10628, i32 18
  %10720 = sext i32 %10719 to i64
  %10721 = getelementptr inbounds i16, i16* %256, i64 %10720
  %10722 = load i16, i16* %10721, align 2, !tbaa !393
  %10723 = insertelement <32 x i16> %10718, i16 %10722, i32 18
  %10724 = extractelement <32 x i32> %10628, i32 19
  %10725 = sext i32 %10724 to i64
  %10726 = getelementptr inbounds i16, i16* %256, i64 %10725
  %10727 = load i16, i16* %10726, align 2, !tbaa !393
  %10728 = insertelement <32 x i16> %10723, i16 %10727, i32 19
  %10729 = extractelement <32 x i32> %10628, i32 20
  %10730 = sext i32 %10729 to i64
  %10731 = getelementptr inbounds i16, i16* %256, i64 %10730
  %10732 = load i16, i16* %10731, align 2, !tbaa !393
  %10733 = insertelement <32 x i16> %10728, i16 %10732, i32 20
  %10734 = extractelement <32 x i32> %10628, i32 21
  %10735 = sext i32 %10734 to i64
  %10736 = getelementptr inbounds i16, i16* %256, i64 %10735
  %10737 = load i16, i16* %10736, align 2, !tbaa !393
  %10738 = insertelement <32 x i16> %10733, i16 %10737, i32 21
  %10739 = extractelement <32 x i32> %10628, i32 22
  %10740 = sext i32 %10739 to i64
  %10741 = getelementptr inbounds i16, i16* %256, i64 %10740
  %10742 = load i16, i16* %10741, align 2, !tbaa !393
  %10743 = insertelement <32 x i16> %10738, i16 %10742, i32 22
  %10744 = extractelement <32 x i32> %10628, i32 23
  %10745 = sext i32 %10744 to i64
  %10746 = getelementptr inbounds i16, i16* %256, i64 %10745
  %10747 = load i16, i16* %10746, align 2, !tbaa !393
  %10748 = insertelement <32 x i16> %10743, i16 %10747, i32 23
  %10749 = extractelement <32 x i32> %10628, i32 24
  %10750 = sext i32 %10749 to i64
  %10751 = getelementptr inbounds i16, i16* %256, i64 %10750
  %10752 = load i16, i16* %10751, align 2, !tbaa !393
  %10753 = insertelement <32 x i16> %10748, i16 %10752, i32 24
  %10754 = extractelement <32 x i32> %10628, i32 25
  %10755 = sext i32 %10754 to i64
  %10756 = getelementptr inbounds i16, i16* %256, i64 %10755
  %10757 = load i16, i16* %10756, align 2, !tbaa !393
  %10758 = insertelement <32 x i16> %10753, i16 %10757, i32 25
  %10759 = extractelement <32 x i32> %10628, i32 26
  %10760 = sext i32 %10759 to i64
  %10761 = getelementptr inbounds i16, i16* %256, i64 %10760
  %10762 = load i16, i16* %10761, align 2, !tbaa !393
  %10763 = insertelement <32 x i16> %10758, i16 %10762, i32 26
  %10764 = extractelement <32 x i32> %10628, i32 27
  %10765 = sext i32 %10764 to i64
  %10766 = getelementptr inbounds i16, i16* %256, i64 %10765
  %10767 = load i16, i16* %10766, align 2, !tbaa !393
  %10768 = insertelement <32 x i16> %10763, i16 %10767, i32 27
  %10769 = extractelement <32 x i32> %10628, i32 28
  %10770 = sext i32 %10769 to i64
  %10771 = getelementptr inbounds i16, i16* %256, i64 %10770
  %10772 = load i16, i16* %10771, align 2, !tbaa !393
  %10773 = insertelement <32 x i16> %10768, i16 %10772, i32 28
  %10774 = extractelement <32 x i32> %10628, i32 29
  %10775 = sext i32 %10774 to i64
  %10776 = getelementptr inbounds i16, i16* %256, i64 %10775
  %10777 = load i16, i16* %10776, align 2, !tbaa !393
  %10778 = insertelement <32 x i16> %10773, i16 %10777, i32 29
  %10779 = extractelement <32 x i32> %10628, i32 30
  %10780 = sext i32 %10779 to i64
  %10781 = getelementptr inbounds i16, i16* %256, i64 %10780
  %10782 = load i16, i16* %10781, align 2, !tbaa !393
  %10783 = insertelement <32 x i16> %10778, i16 %10782, i32 30
  %10784 = extractelement <32 x i32> %10628, i32 31
  %10785 = sext i32 %10784 to i64
  %10786 = getelementptr inbounds i16, i16* %256, i64 %10785
  %10787 = load i16, i16* %10786, align 2, !tbaa !393
  %10788 = insertelement <32 x i16> %10783, i16 %10787, i32 31
  %10789 = shufflevector <32 x i16> %10788, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10790 = sext i32 %read_input.s0.x.v2.base.s814 to i64
  %10791 = add nsw i64 %10590, %10790
  %10792 = getelementptr inbounds i16, i16* %read_input784, i64 %10791
  %10793 = getelementptr inbounds i16, i16* %10792, i64 -32
  %10794 = bitcast i16* %10793 to <16 x i16>*
  store <16 x i16> %10789, <16 x i16>* %10794, align 2, !tbaa !396
  %10795 = shufflevector <32 x i16> %10788, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10796 = getelementptr inbounds i16, i16* %10792, i64 -16
  %10797 = bitcast i16* %10796 to <16 x i16>*
  store <16 x i16> %10795, <16 x i16>* %10797, align 2, !tbaa !396
  %10798 = add nuw nsw i32 %read_input.s0.x.x813, 1
  %.not2574 = icmp eq i32 %10798, %t1598
  br i1 %.not2574, label %"end for read_input.s0.x.x812", label %"for read_input.s0.x.x811"

"end for read_input.s0.x.x812":                   ; preds = %"for read_input.s0.x.x811", %"for read_input.s0.y.rebased807"
  br i1 %279, label %"for read_input.s0.x.x.rebased817.preheader", label %"end for read_input.s0.x.x.rebased818", !prof !386

"for read_input.s0.x.x.rebased817.preheader":     ; preds = %"end for read_input.s0.x.x812"
  %10799 = add nuw nsw i64 %10380, %indvars.iv3233
  %10800 = mul nsw i64 %10799, %277
  %10801 = sub i64 %10800, %278
  br i1 %517, label %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased817"

"for read_input.s0.x.x.rebased817":               ; preds = %"for read_input.s0.x.x.rebased817.preheader", %"for read_input.s0.x.x.rebased817"
  %indvars.iv3230 = phi i64 [ %indvars.iv.next3231.3, %"for read_input.s0.x.x.rebased817" ], [ 0, %"for read_input.s0.x.x.rebased817.preheader" ]
  %niter3468 = phi i64 [ %niter3468.nsub.3, %"for read_input.s0.x.x.rebased817" ], [ %unroll_iter3467, %"for read_input.s0.x.x.rebased817.preheader" ]
  %10802 = add nuw nsw i64 %indvars.iv3230, %510
  %10803 = shl nsw i64 %10802, 5
  %10804 = add nsw i64 %10803, %511
  %10805 = add nsw i64 %10804, %10584
  %10806 = getelementptr inbounds i16, i16* %256, i64 %10805
  %10807 = getelementptr inbounds i16, i16* %10806, i64 -32
  %10808 = bitcast i16* %10807 to <16 x i16>*
  %10809 = load <16 x i16>, <16 x i16>* %10808, align 2, !tbaa !393
  %10810 = getelementptr inbounds i16, i16* %10806, i64 -16
  %10811 = bitcast i16* %10810 to <16 x i16>*
  %10812 = load <16 x i16>, <16 x i16>* %10811, align 2, !tbaa !393
  %10813 = add nsw i64 %10801, %10804
  %10814 = getelementptr inbounds i16, i16* %read_input784, i64 %10813
  %10815 = getelementptr inbounds i16, i16* %10814, i64 -32
  %10816 = bitcast i16* %10815 to <16 x i16>*
  store <16 x i16> %10809, <16 x i16>* %10816, align 2, !tbaa !396
  %10817 = getelementptr inbounds i16, i16* %10814, i64 -16
  %10818 = bitcast i16* %10817 to <16 x i16>*
  store <16 x i16> %10812, <16 x i16>* %10818, align 2, !tbaa !396
  %indvars.iv.next3231 = or i64 %indvars.iv3230, 1
  %10819 = add nuw nsw i64 %indvars.iv.next3231, %510
  %10820 = shl nsw i64 %10819, 5
  %10821 = add nsw i64 %10820, %511
  %10822 = add nsw i64 %10821, %10584
  %10823 = getelementptr inbounds i16, i16* %256, i64 %10822
  %10824 = getelementptr inbounds i16, i16* %10823, i64 -32
  %10825 = bitcast i16* %10824 to <16 x i16>*
  %10826 = load <16 x i16>, <16 x i16>* %10825, align 2, !tbaa !393
  %10827 = getelementptr inbounds i16, i16* %10823, i64 -16
  %10828 = bitcast i16* %10827 to <16 x i16>*
  %10829 = load <16 x i16>, <16 x i16>* %10828, align 2, !tbaa !393
  %10830 = add nsw i64 %10801, %10821
  %10831 = getelementptr inbounds i16, i16* %read_input784, i64 %10830
  %10832 = getelementptr inbounds i16, i16* %10831, i64 -32
  %10833 = bitcast i16* %10832 to <16 x i16>*
  store <16 x i16> %10826, <16 x i16>* %10833, align 2, !tbaa !396
  %10834 = getelementptr inbounds i16, i16* %10831, i64 -16
  %10835 = bitcast i16* %10834 to <16 x i16>*
  store <16 x i16> %10829, <16 x i16>* %10835, align 2, !tbaa !396
  %indvars.iv.next3231.1 = or i64 %indvars.iv3230, 2
  %10836 = add nuw nsw i64 %indvars.iv.next3231.1, %510
  %10837 = shl nsw i64 %10836, 5
  %10838 = add nsw i64 %10837, %511
  %10839 = add nsw i64 %10838, %10584
  %10840 = getelementptr inbounds i16, i16* %256, i64 %10839
  %10841 = getelementptr inbounds i16, i16* %10840, i64 -32
  %10842 = bitcast i16* %10841 to <16 x i16>*
  %10843 = load <16 x i16>, <16 x i16>* %10842, align 2, !tbaa !393
  %10844 = getelementptr inbounds i16, i16* %10840, i64 -16
  %10845 = bitcast i16* %10844 to <16 x i16>*
  %10846 = load <16 x i16>, <16 x i16>* %10845, align 2, !tbaa !393
  %10847 = add nsw i64 %10801, %10838
  %10848 = getelementptr inbounds i16, i16* %read_input784, i64 %10847
  %10849 = getelementptr inbounds i16, i16* %10848, i64 -32
  %10850 = bitcast i16* %10849 to <16 x i16>*
  store <16 x i16> %10843, <16 x i16>* %10850, align 2, !tbaa !396
  %10851 = getelementptr inbounds i16, i16* %10848, i64 -16
  %10852 = bitcast i16* %10851 to <16 x i16>*
  store <16 x i16> %10846, <16 x i16>* %10852, align 2, !tbaa !396
  %indvars.iv.next3231.2 = or i64 %indvars.iv3230, 3
  %10853 = add nuw nsw i64 %indvars.iv.next3231.2, %510
  %10854 = shl nsw i64 %10853, 5
  %10855 = add nsw i64 %10854, %511
  %10856 = add nsw i64 %10855, %10584
  %10857 = getelementptr inbounds i16, i16* %256, i64 %10856
  %10858 = getelementptr inbounds i16, i16* %10857, i64 -32
  %10859 = bitcast i16* %10858 to <16 x i16>*
  %10860 = load <16 x i16>, <16 x i16>* %10859, align 2, !tbaa !393
  %10861 = getelementptr inbounds i16, i16* %10857, i64 -16
  %10862 = bitcast i16* %10861 to <16 x i16>*
  %10863 = load <16 x i16>, <16 x i16>* %10862, align 2, !tbaa !393
  %10864 = add nsw i64 %10801, %10855
  %10865 = getelementptr inbounds i16, i16* %read_input784, i64 %10864
  %10866 = getelementptr inbounds i16, i16* %10865, i64 -32
  %10867 = bitcast i16* %10866 to <16 x i16>*
  store <16 x i16> %10860, <16 x i16>* %10867, align 2, !tbaa !396
  %10868 = getelementptr inbounds i16, i16* %10865, i64 -16
  %10869 = bitcast i16* %10868 to <16 x i16>*
  store <16 x i16> %10863, <16 x i16>* %10869, align 2, !tbaa !396
  %indvars.iv.next3231.3 = add nuw nsw i64 %indvars.iv3230, 4
  %niter3468.nsub.3 = add i64 %niter3468, -4
  %niter3468.ncmp.3 = icmp eq i64 %niter3468.nsub.3, 0
  br i1 %niter3468.ncmp.3, label %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased817"

"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased817", %"for read_input.s0.x.x.rebased817.preheader"
  %indvars.iv3230.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased817.preheader" ], [ %indvars.iv.next3231.3, %"for read_input.s0.x.x.rebased817" ]
  br i1 %lcmp.mod3466.not, label %"end for read_input.s0.x.x.rebased818", label %"for read_input.s0.x.x.rebased817.epil"

"for read_input.s0.x.x.rebased817.epil":          ; preds = %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased817.epil"
  %indvars.iv3230.epil = phi i64 [ %indvars.iv.next3231.epil, %"for read_input.s0.x.x.rebased817.epil" ], [ %indvars.iv3230.unr, %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa" ]
  %epil.iter3465 = phi i64 [ %epil.iter3465.sub, %"for read_input.s0.x.x.rebased817.epil" ], [ %xtraiter3464, %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa" ]
  %10870 = add nuw nsw i64 %indvars.iv3230.epil, %510
  %10871 = shl nsw i64 %10870, 5
  %10872 = add nsw i64 %10871, %511
  %10873 = add nsw i64 %10872, %10584
  %10874 = getelementptr inbounds i16, i16* %256, i64 %10873
  %10875 = getelementptr inbounds i16, i16* %10874, i64 -32
  %10876 = bitcast i16* %10875 to <16 x i16>*
  %10877 = load <16 x i16>, <16 x i16>* %10876, align 2, !tbaa !393
  %10878 = getelementptr inbounds i16, i16* %10874, i64 -16
  %10879 = bitcast i16* %10878 to <16 x i16>*
  %10880 = load <16 x i16>, <16 x i16>* %10879, align 2, !tbaa !393
  %10881 = add nsw i64 %10801, %10872
  %10882 = getelementptr inbounds i16, i16* %read_input784, i64 %10881
  %10883 = getelementptr inbounds i16, i16* %10882, i64 -32
  %10884 = bitcast i16* %10883 to <16 x i16>*
  store <16 x i16> %10877, <16 x i16>* %10884, align 2, !tbaa !396
  %10885 = getelementptr inbounds i16, i16* %10882, i64 -16
  %10886 = bitcast i16* %10885 to <16 x i16>*
  store <16 x i16> %10880, <16 x i16>* %10886, align 2, !tbaa !396
  %indvars.iv.next3231.epil = add nuw nsw i64 %indvars.iv3230.epil, 1
  %epil.iter3465.sub = add i64 %epil.iter3465, -1
  %epil.iter3465.cmp.not = icmp eq i64 %epil.iter3465.sub, 0
  br i1 %epil.iter3465.cmp.not, label %"end for read_input.s0.x.x.rebased818", label %"for read_input.s0.x.x.rebased817.epil", !llvm.loop !403

"end for read_input.s0.x.x.rebased818":           ; preds = %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased817.epil", %"end for read_input.s0.x.x812"
  br i1 %280, label %"for read_input.s0.x.x.rebased822.preheader", label %"end for read_input.s0.x.x.rebased823", !prof !386

"for read_input.s0.x.x.rebased822.preheader":     ; preds = %"end for read_input.s0.x.x.rebased818"
  %10887 = trunc i64 %10584 to i32
  %10888 = insertelement <32 x i32> undef, i32 %10887, i32 0
  %10889 = shufflevector <32 x i32> %10888, <32 x i32> undef, <32 x i32> zeroinitializer
  %10890 = add nuw nsw i64 %10380, %indvars.iv3233
  %10891 = mul nsw i64 %10890, %277
  %10892 = sub i64 %10891, %278
  br label %"for read_input.s0.x.x.rebased822"

"for read_input.s0.x.x.rebased822":               ; preds = %"for read_input.s0.x.x.rebased822.preheader", %"for read_input.s0.x.x.rebased822"
  %read_input.s0.x.x.rebased824 = phi i32 [ %11092, %"for read_input.s0.x.x.rebased822" ], [ 0, %"for read_input.s0.x.x.rebased822.preheader" ]
  %10893 = add nsw i32 %read_input.s0.x.x.rebased824, %272
  %10894 = shl nsw i32 %10893, 5
  %a487 = add nsw i32 %266, %10894
  %10895 = icmp sgt i32 %b405, %a487
  %read_input.s0.x.v2.base.s825 = select i1 %10895, i32 %a487, i32 %b405
  %10896 = add nsw i32 %read_input.s0.x.v2.base.s825, -32
  %10897 = insertelement <32 x i32> undef, i32 %10896, i32 0
  %10898 = shufflevector <32 x i32> %10897, <32 x i32> undef, <32 x i32> zeroinitializer
  %a503 = add nsw <32 x i32> %10898, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10899 = shufflevector <32 x i32> %a503, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10900 = icmp sgt <8 x i32> %269, %10899
  %10901 = shufflevector <32 x i32> %a503, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10902 = icmp sgt <8 x i32> %269, %10901
  %10903 = shufflevector <32 x i32> %a503, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10904 = icmp sgt <8 x i32> %269, %10903
  %10905 = shufflevector <32 x i32> %a503, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10906 = icmp sgt <8 x i32> %269, %10905
  %10907 = select <8 x i1> %10900, <8 x i32> %10899, <8 x i32> %269
  %10908 = select <8 x i1> %10902, <8 x i32> %10901, <8 x i32> %269
  %10909 = select <8 x i1> %10904, <8 x i32> %10903, <8 x i32> %269
  %10910 = select <8 x i1> %10906, <8 x i32> %10905, <8 x i32> %269
  %10911 = icmp sgt <8 x i32> %10907, %271
  %10912 = icmp sgt <8 x i32> %10908, %271
  %10913 = icmp sgt <8 x i32> %10909, %271
  %10914 = icmp sgt <8 x i32> %10910, %271
  %10915 = select <8 x i1> %10911, <8 x i32> %10907, <8 x i32> %271
  %10916 = select <8 x i1> %10912, <8 x i32> %10908, <8 x i32> %271
  %10917 = select <8 x i1> %10913, <8 x i32> %10909, <8 x i32> %271
  %10918 = select <8 x i1> %10914, <8 x i32> %10910, <8 x i32> %271
  %10919 = shufflevector <8 x i32> %10915, <8 x i32> %10916, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10920 = shufflevector <8 x i32> %10917, <8 x i32> %10918, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10921 = shufflevector <16 x i32> %10919, <16 x i32> %10920, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10922 = add nsw <32 x i32> %10921, %10889
  %10923 = extractelement <32 x i32> %10922, i32 0
  %10924 = sext i32 %10923 to i64
  %10925 = getelementptr inbounds i16, i16* %256, i64 %10924
  %10926 = load i16, i16* %10925, align 2, !tbaa !393
  %10927 = insertelement <32 x i16> undef, i16 %10926, i32 0
  %10928 = extractelement <32 x i32> %10922, i32 1
  %10929 = sext i32 %10928 to i64
  %10930 = getelementptr inbounds i16, i16* %256, i64 %10929
  %10931 = load i16, i16* %10930, align 2, !tbaa !393
  %10932 = insertelement <32 x i16> %10927, i16 %10931, i32 1
  %10933 = extractelement <32 x i32> %10922, i32 2
  %10934 = sext i32 %10933 to i64
  %10935 = getelementptr inbounds i16, i16* %256, i64 %10934
  %10936 = load i16, i16* %10935, align 2, !tbaa !393
  %10937 = insertelement <32 x i16> %10932, i16 %10936, i32 2
  %10938 = extractelement <32 x i32> %10922, i32 3
  %10939 = sext i32 %10938 to i64
  %10940 = getelementptr inbounds i16, i16* %256, i64 %10939
  %10941 = load i16, i16* %10940, align 2, !tbaa !393
  %10942 = insertelement <32 x i16> %10937, i16 %10941, i32 3
  %10943 = extractelement <32 x i32> %10922, i32 4
  %10944 = sext i32 %10943 to i64
  %10945 = getelementptr inbounds i16, i16* %256, i64 %10944
  %10946 = load i16, i16* %10945, align 2, !tbaa !393
  %10947 = insertelement <32 x i16> %10942, i16 %10946, i32 4
  %10948 = extractelement <32 x i32> %10922, i32 5
  %10949 = sext i32 %10948 to i64
  %10950 = getelementptr inbounds i16, i16* %256, i64 %10949
  %10951 = load i16, i16* %10950, align 2, !tbaa !393
  %10952 = insertelement <32 x i16> %10947, i16 %10951, i32 5
  %10953 = extractelement <32 x i32> %10922, i32 6
  %10954 = sext i32 %10953 to i64
  %10955 = getelementptr inbounds i16, i16* %256, i64 %10954
  %10956 = load i16, i16* %10955, align 2, !tbaa !393
  %10957 = insertelement <32 x i16> %10952, i16 %10956, i32 6
  %10958 = extractelement <32 x i32> %10922, i32 7
  %10959 = sext i32 %10958 to i64
  %10960 = getelementptr inbounds i16, i16* %256, i64 %10959
  %10961 = load i16, i16* %10960, align 2, !tbaa !393
  %10962 = insertelement <32 x i16> %10957, i16 %10961, i32 7
  %10963 = extractelement <32 x i32> %10922, i32 8
  %10964 = sext i32 %10963 to i64
  %10965 = getelementptr inbounds i16, i16* %256, i64 %10964
  %10966 = load i16, i16* %10965, align 2, !tbaa !393
  %10967 = insertelement <32 x i16> %10962, i16 %10966, i32 8
  %10968 = extractelement <32 x i32> %10922, i32 9
  %10969 = sext i32 %10968 to i64
  %10970 = getelementptr inbounds i16, i16* %256, i64 %10969
  %10971 = load i16, i16* %10970, align 2, !tbaa !393
  %10972 = insertelement <32 x i16> %10967, i16 %10971, i32 9
  %10973 = extractelement <32 x i32> %10922, i32 10
  %10974 = sext i32 %10973 to i64
  %10975 = getelementptr inbounds i16, i16* %256, i64 %10974
  %10976 = load i16, i16* %10975, align 2, !tbaa !393
  %10977 = insertelement <32 x i16> %10972, i16 %10976, i32 10
  %10978 = extractelement <32 x i32> %10922, i32 11
  %10979 = sext i32 %10978 to i64
  %10980 = getelementptr inbounds i16, i16* %256, i64 %10979
  %10981 = load i16, i16* %10980, align 2, !tbaa !393
  %10982 = insertelement <32 x i16> %10977, i16 %10981, i32 11
  %10983 = extractelement <32 x i32> %10922, i32 12
  %10984 = sext i32 %10983 to i64
  %10985 = getelementptr inbounds i16, i16* %256, i64 %10984
  %10986 = load i16, i16* %10985, align 2, !tbaa !393
  %10987 = insertelement <32 x i16> %10982, i16 %10986, i32 12
  %10988 = extractelement <32 x i32> %10922, i32 13
  %10989 = sext i32 %10988 to i64
  %10990 = getelementptr inbounds i16, i16* %256, i64 %10989
  %10991 = load i16, i16* %10990, align 2, !tbaa !393
  %10992 = insertelement <32 x i16> %10987, i16 %10991, i32 13
  %10993 = extractelement <32 x i32> %10922, i32 14
  %10994 = sext i32 %10993 to i64
  %10995 = getelementptr inbounds i16, i16* %256, i64 %10994
  %10996 = load i16, i16* %10995, align 2, !tbaa !393
  %10997 = insertelement <32 x i16> %10992, i16 %10996, i32 14
  %10998 = extractelement <32 x i32> %10922, i32 15
  %10999 = sext i32 %10998 to i64
  %11000 = getelementptr inbounds i16, i16* %256, i64 %10999
  %11001 = load i16, i16* %11000, align 2, !tbaa !393
  %11002 = insertelement <32 x i16> %10997, i16 %11001, i32 15
  %11003 = extractelement <32 x i32> %10922, i32 16
  %11004 = sext i32 %11003 to i64
  %11005 = getelementptr inbounds i16, i16* %256, i64 %11004
  %11006 = load i16, i16* %11005, align 2, !tbaa !393
  %11007 = insertelement <32 x i16> %11002, i16 %11006, i32 16
  %11008 = extractelement <32 x i32> %10922, i32 17
  %11009 = sext i32 %11008 to i64
  %11010 = getelementptr inbounds i16, i16* %256, i64 %11009
  %11011 = load i16, i16* %11010, align 2, !tbaa !393
  %11012 = insertelement <32 x i16> %11007, i16 %11011, i32 17
  %11013 = extractelement <32 x i32> %10922, i32 18
  %11014 = sext i32 %11013 to i64
  %11015 = getelementptr inbounds i16, i16* %256, i64 %11014
  %11016 = load i16, i16* %11015, align 2, !tbaa !393
  %11017 = insertelement <32 x i16> %11012, i16 %11016, i32 18
  %11018 = extractelement <32 x i32> %10922, i32 19
  %11019 = sext i32 %11018 to i64
  %11020 = getelementptr inbounds i16, i16* %256, i64 %11019
  %11021 = load i16, i16* %11020, align 2, !tbaa !393
  %11022 = insertelement <32 x i16> %11017, i16 %11021, i32 19
  %11023 = extractelement <32 x i32> %10922, i32 20
  %11024 = sext i32 %11023 to i64
  %11025 = getelementptr inbounds i16, i16* %256, i64 %11024
  %11026 = load i16, i16* %11025, align 2, !tbaa !393
  %11027 = insertelement <32 x i16> %11022, i16 %11026, i32 20
  %11028 = extractelement <32 x i32> %10922, i32 21
  %11029 = sext i32 %11028 to i64
  %11030 = getelementptr inbounds i16, i16* %256, i64 %11029
  %11031 = load i16, i16* %11030, align 2, !tbaa !393
  %11032 = insertelement <32 x i16> %11027, i16 %11031, i32 21
  %11033 = extractelement <32 x i32> %10922, i32 22
  %11034 = sext i32 %11033 to i64
  %11035 = getelementptr inbounds i16, i16* %256, i64 %11034
  %11036 = load i16, i16* %11035, align 2, !tbaa !393
  %11037 = insertelement <32 x i16> %11032, i16 %11036, i32 22
  %11038 = extractelement <32 x i32> %10922, i32 23
  %11039 = sext i32 %11038 to i64
  %11040 = getelementptr inbounds i16, i16* %256, i64 %11039
  %11041 = load i16, i16* %11040, align 2, !tbaa !393
  %11042 = insertelement <32 x i16> %11037, i16 %11041, i32 23
  %11043 = extractelement <32 x i32> %10922, i32 24
  %11044 = sext i32 %11043 to i64
  %11045 = getelementptr inbounds i16, i16* %256, i64 %11044
  %11046 = load i16, i16* %11045, align 2, !tbaa !393
  %11047 = insertelement <32 x i16> %11042, i16 %11046, i32 24
  %11048 = extractelement <32 x i32> %10922, i32 25
  %11049 = sext i32 %11048 to i64
  %11050 = getelementptr inbounds i16, i16* %256, i64 %11049
  %11051 = load i16, i16* %11050, align 2, !tbaa !393
  %11052 = insertelement <32 x i16> %11047, i16 %11051, i32 25
  %11053 = extractelement <32 x i32> %10922, i32 26
  %11054 = sext i32 %11053 to i64
  %11055 = getelementptr inbounds i16, i16* %256, i64 %11054
  %11056 = load i16, i16* %11055, align 2, !tbaa !393
  %11057 = insertelement <32 x i16> %11052, i16 %11056, i32 26
  %11058 = extractelement <32 x i32> %10922, i32 27
  %11059 = sext i32 %11058 to i64
  %11060 = getelementptr inbounds i16, i16* %256, i64 %11059
  %11061 = load i16, i16* %11060, align 2, !tbaa !393
  %11062 = insertelement <32 x i16> %11057, i16 %11061, i32 27
  %11063 = extractelement <32 x i32> %10922, i32 28
  %11064 = sext i32 %11063 to i64
  %11065 = getelementptr inbounds i16, i16* %256, i64 %11064
  %11066 = load i16, i16* %11065, align 2, !tbaa !393
  %11067 = insertelement <32 x i16> %11062, i16 %11066, i32 28
  %11068 = extractelement <32 x i32> %10922, i32 29
  %11069 = sext i32 %11068 to i64
  %11070 = getelementptr inbounds i16, i16* %256, i64 %11069
  %11071 = load i16, i16* %11070, align 2, !tbaa !393
  %11072 = insertelement <32 x i16> %11067, i16 %11071, i32 29
  %11073 = extractelement <32 x i32> %10922, i32 30
  %11074 = sext i32 %11073 to i64
  %11075 = getelementptr inbounds i16, i16* %256, i64 %11074
  %11076 = load i16, i16* %11075, align 2, !tbaa !393
  %11077 = insertelement <32 x i16> %11072, i16 %11076, i32 30
  %11078 = extractelement <32 x i32> %10922, i32 31
  %11079 = sext i32 %11078 to i64
  %11080 = getelementptr inbounds i16, i16* %256, i64 %11079
  %11081 = load i16, i16* %11080, align 2, !tbaa !393
  %11082 = insertelement <32 x i16> %11077, i16 %11081, i32 31
  %11083 = shufflevector <32 x i16> %11082, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11084 = sext i32 %read_input.s0.x.v2.base.s825 to i64
  %11085 = add nsw i64 %10892, %11084
  %11086 = getelementptr inbounds i16, i16* %read_input784, i64 %11085
  %11087 = getelementptr inbounds i16, i16* %11086, i64 -32
  %11088 = bitcast i16* %11087 to <16 x i16>*
  store <16 x i16> %11083, <16 x i16>* %11088, align 2, !tbaa !396
  %11089 = shufflevector <32 x i16> %11082, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11090 = getelementptr inbounds i16, i16* %11086, i64 -16
  %11091 = bitcast i16* %11090 to <16 x i16>*
  store <16 x i16> %11089, <16 x i16>* %11091, align 2, !tbaa !396
  %11092 = add nuw nsw i32 %read_input.s0.x.x.rebased824, 1
  %.not2572 = icmp eq i32 %11092, %t1617803
  br i1 %.not2572, label %"end for read_input.s0.x.x.rebased823", label %"for read_input.s0.x.x.rebased822"

"end for read_input.s0.x.x.rebased823":           ; preds = %"for read_input.s0.x.x.rebased822", %"end for read_input.s0.x.x.rebased818"
  %indvars.iv.next3234 = add nuw nsw i64 %indvars.iv3233, 1
  %.not2571 = icmp eq i64 %indvars.iv.next3234, %10382
  br i1 %.not2571, label %"end for read_input.s0.y.rebased808", label %"for read_input.s0.y.rebased807"

"for read_input.s0.y.rebased831":                 ; preds = %"for read_input.s0.y.rebased831.preheader", %"end for read_input.s0.x.x836"
  %indvars.iv3236 = phi i64 [ 0, %"for read_input.s0.y.rebased831.preheader" ], [ %indvars.iv.next3237, %"end for read_input.s0.x.x836" ]
  %11093 = trunc i64 %indvars.iv3236 to i32
  %a523 = add nsw i32 %10594, %11093
  %11094 = icmp sgt i32 %b384, %a523
  %a522 = select i1 %11094, i32 %a523, i32 %b384
  %11095 = icmp sgt i32 %a522, 0
  %11096 = select i1 %11095, i32 %a522, i32 0
  %11097 = mul nsw i32 %11096, %203
  %t1635834 = sub nsw i32 %11097, %199
  %11098 = insertelement <32 x i32> undef, i32 %t1635834, i32 0
  %11099 = shufflevector <32 x i32> %11098, <32 x i32> undef, <32 x i32> zeroinitializer
  %11100 = add nuw nsw i64 %10598, %indvars.iv3236
  %11101 = mul nsw i64 %11100, %277
  %11102 = sub i64 %11101, %278
  br label %"for read_input.s0.x.x835"

"end for read_input.s0.y.rebased832":             ; preds = %"end for read_input.s0.x.x836", %"end for read_input.s0.y.rebased808"
  %11103 = load i64, i64* %.fca.1.gep2278, align 8, !tbaa !387
  %cmp.i2750 = icmp ult i64 %11103, %287
  %11104 = load i8*, i8** %.fca.0.gep2277, align 8, !tbaa !389
  br i1 %cmp.i2750, label %if.then.i2753, label %pseudostack_alloc.exit2766, !prof !390

if.then.i2753:                                    ; preds = %"end for read_input.s0.y.rebased832"
  %tobool1.not.i2752 = icmp ne i8* %11104, null
  %11105 = load i64, i64* %.fca.2.gep2279, align 8
  %cmp2.i2755 = icmp ugt i64 %11105, 16384
  %or.cond2797 = and i1 %tobool1.not.i2752, %cmp2.i2755
  br i1 %or.cond2797, label %if.then3.i2757, label %if.end.i2761

if.then3.i2757:                                   ; preds = %if.then.i2753
  call void @halide_free(i8* null, i8* nonnull %11104) #16
  %.pre3308 = load i64, i64* %.fca.2.gep2279, align 8, !tbaa !391
  br label %if.end.i2761

if.end.i2761:                                     ; preds = %if.then3.i2757, %if.then.i2753
  %11106 = phi i64 [ %.pre3308, %if.then3.i2757 ], [ %11105, %if.then.i2753 ]
  %add.i2759 = add i64 %11106, %287
  store i64 %add.i2759, i64* %.fca.2.gep2279, align 8, !tbaa !391
  %cmp7.i2760 = icmp ugt i64 %add.i2759, 16384
  br i1 %cmp7.i2760, label %if.then8.i2763, label %if.end11.i2765

if.then8.i2763:                                   ; preds = %if.end.i2761
  %call.i2762 = call i8* @halide_malloc(i8* null, i64 %287) #16
  br label %if.end11.i2765

if.end11.i2765:                                   ; preds = %if.then8.i2763, %if.end.i2761
  %storemerge.i2764 = phi i8* [ %call.i2762, %if.then8.i2763 ], [ null, %if.end.i2761 ]
  store i8* %storemerge.i2764, i8** %.fca.0.gep2277, align 8, !tbaa !389
  store i64 %287, i64* %.fca.1.gep2278, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2766

pseudostack_alloc.exit2766:                       ; preds = %"end for read_input.s0.y.rebased832", %if.end11.i2765
  %11107 = phi i8* [ %storemerge.i2764, %if.end11.i2765 ], [ %11104, %"end for read_input.s0.y.rebased832" ]
  %11108 = bitcast i8* %11107 to i16*
  %.not2433 = icmp eq i8* %11107, null
  br i1 %.not2433, label %then_bb840, label %"consume read_input842", !prof !392

"for read_input.s0.x.x835":                       ; preds = %"for read_input.s0.y.rebased831", %"for read_input.s0.x.x835"
  %read_input.s0.x.x837 = phi i32 [ %11307, %"for read_input.s0.x.x835" ], [ 0, %"for read_input.s0.y.rebased831" ]
  %11109 = shl nsw i32 %read_input.s0.x.x837, 5
  %a529 = add nsw i32 %266, %11109
  %11110 = icmp sgt i32 %b405, %a529
  %read_input.s0.x.v2.base.s838 = select i1 %11110, i32 %a529, i32 %b405
  %11111 = add nsw i32 %read_input.s0.x.v2.base.s838, -32
  %11112 = insertelement <32 x i32> undef, i32 %11111, i32 0
  %11113 = shufflevector <32 x i32> %11112, <32 x i32> undef, <32 x i32> zeroinitializer
  %a532 = add nsw <32 x i32> %11113, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11114 = shufflevector <32 x i32> %a532, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11115 = icmp sgt <8 x i32> %269, %11114
  %11116 = shufflevector <32 x i32> %a532, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11117 = icmp sgt <8 x i32> %269, %11116
  %11118 = shufflevector <32 x i32> %a532, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %11119 = icmp sgt <8 x i32> %269, %11118
  %11120 = shufflevector <32 x i32> %a532, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11121 = icmp sgt <8 x i32> %269, %11120
  %11122 = select <8 x i1> %11115, <8 x i32> %11114, <8 x i32> %269
  %11123 = select <8 x i1> %11117, <8 x i32> %11116, <8 x i32> %269
  %11124 = select <8 x i1> %11119, <8 x i32> %11118, <8 x i32> %269
  %11125 = select <8 x i1> %11121, <8 x i32> %11120, <8 x i32> %269
  %11126 = icmp sgt <8 x i32> %11122, %271
  %11127 = icmp sgt <8 x i32> %11123, %271
  %11128 = icmp sgt <8 x i32> %11124, %271
  %11129 = icmp sgt <8 x i32> %11125, %271
  %11130 = select <8 x i1> %11126, <8 x i32> %11122, <8 x i32> %271
  %11131 = select <8 x i1> %11127, <8 x i32> %11123, <8 x i32> %271
  %11132 = select <8 x i1> %11128, <8 x i32> %11124, <8 x i32> %271
  %11133 = select <8 x i1> %11129, <8 x i32> %11125, <8 x i32> %271
  %11134 = shufflevector <8 x i32> %11130, <8 x i32> %11131, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11135 = shufflevector <8 x i32> %11132, <8 x i32> %11133, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11136 = shufflevector <16 x i32> %11134, <16 x i32> %11135, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11137 = add nsw <32 x i32> %11136, %11099
  %11138 = extractelement <32 x i32> %11137, i32 0
  %11139 = sext i32 %11138 to i64
  %11140 = getelementptr inbounds i16, i16* %256, i64 %11139
  %11141 = load i16, i16* %11140, align 2, !tbaa !393
  %11142 = insertelement <32 x i16> undef, i16 %11141, i32 0
  %11143 = extractelement <32 x i32> %11137, i32 1
  %11144 = sext i32 %11143 to i64
  %11145 = getelementptr inbounds i16, i16* %256, i64 %11144
  %11146 = load i16, i16* %11145, align 2, !tbaa !393
  %11147 = insertelement <32 x i16> %11142, i16 %11146, i32 1
  %11148 = extractelement <32 x i32> %11137, i32 2
  %11149 = sext i32 %11148 to i64
  %11150 = getelementptr inbounds i16, i16* %256, i64 %11149
  %11151 = load i16, i16* %11150, align 2, !tbaa !393
  %11152 = insertelement <32 x i16> %11147, i16 %11151, i32 2
  %11153 = extractelement <32 x i32> %11137, i32 3
  %11154 = sext i32 %11153 to i64
  %11155 = getelementptr inbounds i16, i16* %256, i64 %11154
  %11156 = load i16, i16* %11155, align 2, !tbaa !393
  %11157 = insertelement <32 x i16> %11152, i16 %11156, i32 3
  %11158 = extractelement <32 x i32> %11137, i32 4
  %11159 = sext i32 %11158 to i64
  %11160 = getelementptr inbounds i16, i16* %256, i64 %11159
  %11161 = load i16, i16* %11160, align 2, !tbaa !393
  %11162 = insertelement <32 x i16> %11157, i16 %11161, i32 4
  %11163 = extractelement <32 x i32> %11137, i32 5
  %11164 = sext i32 %11163 to i64
  %11165 = getelementptr inbounds i16, i16* %256, i64 %11164
  %11166 = load i16, i16* %11165, align 2, !tbaa !393
  %11167 = insertelement <32 x i16> %11162, i16 %11166, i32 5
  %11168 = extractelement <32 x i32> %11137, i32 6
  %11169 = sext i32 %11168 to i64
  %11170 = getelementptr inbounds i16, i16* %256, i64 %11169
  %11171 = load i16, i16* %11170, align 2, !tbaa !393
  %11172 = insertelement <32 x i16> %11167, i16 %11171, i32 6
  %11173 = extractelement <32 x i32> %11137, i32 7
  %11174 = sext i32 %11173 to i64
  %11175 = getelementptr inbounds i16, i16* %256, i64 %11174
  %11176 = load i16, i16* %11175, align 2, !tbaa !393
  %11177 = insertelement <32 x i16> %11172, i16 %11176, i32 7
  %11178 = extractelement <32 x i32> %11137, i32 8
  %11179 = sext i32 %11178 to i64
  %11180 = getelementptr inbounds i16, i16* %256, i64 %11179
  %11181 = load i16, i16* %11180, align 2, !tbaa !393
  %11182 = insertelement <32 x i16> %11177, i16 %11181, i32 8
  %11183 = extractelement <32 x i32> %11137, i32 9
  %11184 = sext i32 %11183 to i64
  %11185 = getelementptr inbounds i16, i16* %256, i64 %11184
  %11186 = load i16, i16* %11185, align 2, !tbaa !393
  %11187 = insertelement <32 x i16> %11182, i16 %11186, i32 9
  %11188 = extractelement <32 x i32> %11137, i32 10
  %11189 = sext i32 %11188 to i64
  %11190 = getelementptr inbounds i16, i16* %256, i64 %11189
  %11191 = load i16, i16* %11190, align 2, !tbaa !393
  %11192 = insertelement <32 x i16> %11187, i16 %11191, i32 10
  %11193 = extractelement <32 x i32> %11137, i32 11
  %11194 = sext i32 %11193 to i64
  %11195 = getelementptr inbounds i16, i16* %256, i64 %11194
  %11196 = load i16, i16* %11195, align 2, !tbaa !393
  %11197 = insertelement <32 x i16> %11192, i16 %11196, i32 11
  %11198 = extractelement <32 x i32> %11137, i32 12
  %11199 = sext i32 %11198 to i64
  %11200 = getelementptr inbounds i16, i16* %256, i64 %11199
  %11201 = load i16, i16* %11200, align 2, !tbaa !393
  %11202 = insertelement <32 x i16> %11197, i16 %11201, i32 12
  %11203 = extractelement <32 x i32> %11137, i32 13
  %11204 = sext i32 %11203 to i64
  %11205 = getelementptr inbounds i16, i16* %256, i64 %11204
  %11206 = load i16, i16* %11205, align 2, !tbaa !393
  %11207 = insertelement <32 x i16> %11202, i16 %11206, i32 13
  %11208 = extractelement <32 x i32> %11137, i32 14
  %11209 = sext i32 %11208 to i64
  %11210 = getelementptr inbounds i16, i16* %256, i64 %11209
  %11211 = load i16, i16* %11210, align 2, !tbaa !393
  %11212 = insertelement <32 x i16> %11207, i16 %11211, i32 14
  %11213 = extractelement <32 x i32> %11137, i32 15
  %11214 = sext i32 %11213 to i64
  %11215 = getelementptr inbounds i16, i16* %256, i64 %11214
  %11216 = load i16, i16* %11215, align 2, !tbaa !393
  %11217 = insertelement <32 x i16> %11212, i16 %11216, i32 15
  %11218 = extractelement <32 x i32> %11137, i32 16
  %11219 = sext i32 %11218 to i64
  %11220 = getelementptr inbounds i16, i16* %256, i64 %11219
  %11221 = load i16, i16* %11220, align 2, !tbaa !393
  %11222 = insertelement <32 x i16> %11217, i16 %11221, i32 16
  %11223 = extractelement <32 x i32> %11137, i32 17
  %11224 = sext i32 %11223 to i64
  %11225 = getelementptr inbounds i16, i16* %256, i64 %11224
  %11226 = load i16, i16* %11225, align 2, !tbaa !393
  %11227 = insertelement <32 x i16> %11222, i16 %11226, i32 17
  %11228 = extractelement <32 x i32> %11137, i32 18
  %11229 = sext i32 %11228 to i64
  %11230 = getelementptr inbounds i16, i16* %256, i64 %11229
  %11231 = load i16, i16* %11230, align 2, !tbaa !393
  %11232 = insertelement <32 x i16> %11227, i16 %11231, i32 18
  %11233 = extractelement <32 x i32> %11137, i32 19
  %11234 = sext i32 %11233 to i64
  %11235 = getelementptr inbounds i16, i16* %256, i64 %11234
  %11236 = load i16, i16* %11235, align 2, !tbaa !393
  %11237 = insertelement <32 x i16> %11232, i16 %11236, i32 19
  %11238 = extractelement <32 x i32> %11137, i32 20
  %11239 = sext i32 %11238 to i64
  %11240 = getelementptr inbounds i16, i16* %256, i64 %11239
  %11241 = load i16, i16* %11240, align 2, !tbaa !393
  %11242 = insertelement <32 x i16> %11237, i16 %11241, i32 20
  %11243 = extractelement <32 x i32> %11137, i32 21
  %11244 = sext i32 %11243 to i64
  %11245 = getelementptr inbounds i16, i16* %256, i64 %11244
  %11246 = load i16, i16* %11245, align 2, !tbaa !393
  %11247 = insertelement <32 x i16> %11242, i16 %11246, i32 21
  %11248 = extractelement <32 x i32> %11137, i32 22
  %11249 = sext i32 %11248 to i64
  %11250 = getelementptr inbounds i16, i16* %256, i64 %11249
  %11251 = load i16, i16* %11250, align 2, !tbaa !393
  %11252 = insertelement <32 x i16> %11247, i16 %11251, i32 22
  %11253 = extractelement <32 x i32> %11137, i32 23
  %11254 = sext i32 %11253 to i64
  %11255 = getelementptr inbounds i16, i16* %256, i64 %11254
  %11256 = load i16, i16* %11255, align 2, !tbaa !393
  %11257 = insertelement <32 x i16> %11252, i16 %11256, i32 23
  %11258 = extractelement <32 x i32> %11137, i32 24
  %11259 = sext i32 %11258 to i64
  %11260 = getelementptr inbounds i16, i16* %256, i64 %11259
  %11261 = load i16, i16* %11260, align 2, !tbaa !393
  %11262 = insertelement <32 x i16> %11257, i16 %11261, i32 24
  %11263 = extractelement <32 x i32> %11137, i32 25
  %11264 = sext i32 %11263 to i64
  %11265 = getelementptr inbounds i16, i16* %256, i64 %11264
  %11266 = load i16, i16* %11265, align 2, !tbaa !393
  %11267 = insertelement <32 x i16> %11262, i16 %11266, i32 25
  %11268 = extractelement <32 x i32> %11137, i32 26
  %11269 = sext i32 %11268 to i64
  %11270 = getelementptr inbounds i16, i16* %256, i64 %11269
  %11271 = load i16, i16* %11270, align 2, !tbaa !393
  %11272 = insertelement <32 x i16> %11267, i16 %11271, i32 26
  %11273 = extractelement <32 x i32> %11137, i32 27
  %11274 = sext i32 %11273 to i64
  %11275 = getelementptr inbounds i16, i16* %256, i64 %11274
  %11276 = load i16, i16* %11275, align 2, !tbaa !393
  %11277 = insertelement <32 x i16> %11272, i16 %11276, i32 27
  %11278 = extractelement <32 x i32> %11137, i32 28
  %11279 = sext i32 %11278 to i64
  %11280 = getelementptr inbounds i16, i16* %256, i64 %11279
  %11281 = load i16, i16* %11280, align 2, !tbaa !393
  %11282 = insertelement <32 x i16> %11277, i16 %11281, i32 28
  %11283 = extractelement <32 x i32> %11137, i32 29
  %11284 = sext i32 %11283 to i64
  %11285 = getelementptr inbounds i16, i16* %256, i64 %11284
  %11286 = load i16, i16* %11285, align 2, !tbaa !393
  %11287 = insertelement <32 x i16> %11282, i16 %11286, i32 29
  %11288 = extractelement <32 x i32> %11137, i32 30
  %11289 = sext i32 %11288 to i64
  %11290 = getelementptr inbounds i16, i16* %256, i64 %11289
  %11291 = load i16, i16* %11290, align 2, !tbaa !393
  %11292 = insertelement <32 x i16> %11287, i16 %11291, i32 30
  %11293 = extractelement <32 x i32> %11137, i32 31
  %11294 = sext i32 %11293 to i64
  %11295 = getelementptr inbounds i16, i16* %256, i64 %11294
  %11296 = load i16, i16* %11295, align 2, !tbaa !393
  %11297 = insertelement <32 x i16> %11292, i16 %11296, i32 31
  %11298 = shufflevector <32 x i16> %11297, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11299 = sext i32 %read_input.s0.x.v2.base.s838 to i64
  %11300 = add nsw i64 %11102, %11299
  %11301 = getelementptr inbounds i16, i16* %read_input784, i64 %11300
  %11302 = getelementptr inbounds i16, i16* %11301, i64 -32
  %11303 = bitcast i16* %11302 to <16 x i16>*
  store <16 x i16> %11298, <16 x i16>* %11303, align 2, !tbaa !396
  %11304 = shufflevector <32 x i16> %11297, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11305 = getelementptr inbounds i16, i16* %11301, i64 -16
  %11306 = bitcast i16* %11305 to <16 x i16>*
  store <16 x i16> %11304, <16 x i16>* %11306, align 2, !tbaa !396
  %11307 = add nuw nsw i32 %read_input.s0.x.x837, 1
  %.not2570 = icmp eq i32 %11307, %211
  br i1 %.not2570, label %"end for read_input.s0.x.x836", label %"for read_input.s0.x.x835"

"end for read_input.s0.x.x836":                   ; preds = %"for read_input.s0.x.x835"
  %indvars.iv.next3237 = add nuw nsw i64 %indvars.iv3236, 1
  %.not2569 = icmp eq i64 %indvars.iv3236, %10599
  br i1 %.not2569, label %"end for read_input.s0.y.rebased832", label %"for read_input.s0.y.rebased831"

then_bb840:                                       ; preds = %pseudostack_alloc.exit2766
  %11308 = alloca i8*, i64 %287, align 32
  %11309 = bitcast i8** %11308 to i16*
  store i8** %11308, i8*** %288, align 8
  br label %"consume read_input842"

"consume read_input842":                          ; preds = %pseudostack_alloc.exit2766, %then_bb840
  %blur_x841 = phi i16* [ %11309, %then_bb840 ], [ %11108, %pseudostack_alloc.exit2766 ]
  br i1 %225, label %"produce blur_x846", label %"consume read_input842.after_bb843_crit_edge"

"consume read_input842.after_bb843_crit_edge":    ; preds = %"consume read_input842"
  %.pre3386 = and i32 %a365, 3
  br label %after_bb843

after_bb843:                                      ; preds = %"consume read_input842.after_bb843_crit_edge", %"produce blur_x846"
  %.pre-phi3387 = phi i32 [ %.pre3386, %"consume read_input842.after_bb843_crit_edge" ], [ %11338, %"produce blur_x846" ]
  %11310 = mul nsw i32 %.pre-phi3387, %a537
  %t1638848 = sub nsw i32 %11310, %t1601773
  br i1 %297, label %"for blur_y.s0.x.x.rebased851.preheader", label %"end for blur_y.s0.x.x.rebased852", !prof !386

"for blur_y.s0.x.x.rebased851.preheader":         ; preds = %after_bb843
  %11311 = sext i32 %t1638848 to i64
  br label %"for blur_y.s0.x.x.rebased851"

"produce blur_x846":                              ; preds = %"consume read_input842"
  %11312 = getelementptr inbounds i16, i16* %read_input784, i64 %291
  %11313 = getelementptr inbounds i16, i16* %11312, i64 -31
  %11314 = bitcast i16* %11313 to <16 x i16>*
  %11315 = load <16 x i16>, <16 x i16>* %11314, align 2, !tbaa !396
  %11316 = getelementptr inbounds i16, i16* %11312, i64 -15
  %11317 = bitcast i16* %11316 to <16 x i16>*
  %11318 = load <16 x i16>, <16 x i16>* %11317, align 2, !tbaa !396
  %11319 = getelementptr inbounds i16, i16* %11312, i64 -30
  %11320 = bitcast i16* %11319 to <16 x i16>*
  %11321 = load <16 x i16>, <16 x i16>* %11320, align 2, !tbaa !396
  %11322 = getelementptr inbounds i16, i16* %11312, i64 -14
  %11323 = bitcast i16* %11322 to <16 x i16>*
  %11324 = load <16 x i16>, <16 x i16>* %11323, align 2, !tbaa !396
  %11325 = getelementptr inbounds i16, i16* %11312, i64 -32
  %11326 = bitcast i16* %11325 to <16 x i16>*
  %11327 = load <16 x i16>, <16 x i16>* %11326, align 2, !tbaa !396
  %11328 = getelementptr inbounds i16, i16* %11312, i64 -16
  %11329 = bitcast i16* %11328 to <16 x i16>*
  %11330 = load <16 x i16>, <16 x i16>* %11329, align 2, !tbaa !396
  %11331 = add <16 x i16> %11321, %11315
  %11332 = add <16 x i16> %11331, %11327
  %11333 = add <16 x i16> %11324, %11318
  %11334 = add <16 x i16> %11333, %11330
  %11335 = shufflevector <16 x i16> %11332, <16 x i16> %11334, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11336 = udiv <32 x i16> %11335, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11337 = shufflevector <32 x i16> %11336, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11338 = and i32 %a365, 3
  %11339 = zext i32 %11338 to i64
  %11340 = mul nsw i64 %294, %11339
  %11341 = add nsw i64 %296, %11340
  %11342 = getelementptr inbounds i16, i16* %blur_x841, i64 %11341
  %11343 = getelementptr inbounds i16, i16* %11342, i64 -32
  %11344 = bitcast i16* %11343 to <16 x i16>*
  store <16 x i16> %11337, <16 x i16>* %11344, align 2, !tbaa !399
  %11345 = shufflevector <32 x i16> %11336, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11346 = getelementptr inbounds i16, i16* %11342, i64 -16
  %11347 = bitcast i16* %11346 to <16 x i16>*
  store <16 x i16> %11345, <16 x i16>* %11347, align 2, !tbaa !399
  br label %after_bb843

"for blur_y.s0.x.x.rebased851":                   ; preds = %"for blur_y.s0.x.x.rebased851.preheader", %after_bb854
  %indvars.iv3238 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased851.preheader" ], [ %indvars.iv.next3239, %after_bb854 ]
  %11348 = add nsw i64 %indvars.iv3238, %298
  %11349 = icmp slt i64 %11348, 1
  %11350 = trunc i64 %11348 to i32
  %11351 = shl nsw i32 %11350, 5
  %11352 = icmp sgt i32 %194, %11351
  %11353 = or i1 %11349, %11352
  br i1 %11353, label %"produce blur_x857", label %after_bb854

"end for blur_y.s0.x.x.rebased852":               ; preds = %after_bb854, %after_bb843
  br i1 %299, label %"for blur_y.s0.x.x.rebased862.preheader", label %"end for blur_y.s0.x.x.rebased863", !prof !386

"for blur_y.s0.x.x.rebased862.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased852"
  %11354 = sext i32 %t1638848 to i64
  br label %"for blur_y.s0.x.x.rebased862"

after_bb854:                                      ; preds = %"for blur_y.s0.x.x.rebased851", %"produce blur_x857"
  %indvars.iv.next3239 = add nuw nsw i64 %indvars.iv3238, 1
  %.not2567 = icmp eq i64 %indvars.iv.next3239, %515
  br i1 %.not2567, label %"end for blur_y.s0.x.x.rebased852", label %"for blur_y.s0.x.x.rebased851"

"produce blur_x857":                              ; preds = %"for blur_y.s0.x.x.rebased851"
  %t656858 = sub i32 %11351, %t1601773
  %11355 = sext i32 %t656858 to i64
  %11356 = getelementptr inbounds i16, i16* %read_input784, i64 %11355
  %11357 = getelementptr inbounds i16, i16* %11356, i64 1
  %11358 = bitcast i16* %11357 to <16 x i16>*
  %11359 = load <16 x i16>, <16 x i16>* %11358, align 2, !tbaa !396
  %11360 = getelementptr inbounds i16, i16* %11356, i64 17
  %11361 = bitcast i16* %11360 to <16 x i16>*
  %11362 = load <16 x i16>, <16 x i16>* %11361, align 2, !tbaa !396
  %11363 = getelementptr inbounds i16, i16* %11356, i64 2
  %11364 = bitcast i16* %11363 to <16 x i16>*
  %11365 = load <16 x i16>, <16 x i16>* %11364, align 2, !tbaa !396
  %11366 = getelementptr inbounds i16, i16* %11356, i64 18
  %11367 = bitcast i16* %11366 to <16 x i16>*
  %11368 = load <16 x i16>, <16 x i16>* %11367, align 2, !tbaa !396
  %11369 = bitcast i16* %11356 to <16 x i16>*
  %11370 = load <16 x i16>, <16 x i16>* %11369, align 2, !tbaa !396
  %11371 = getelementptr inbounds i16, i16* %11356, i64 16
  %11372 = bitcast i16* %11371 to <16 x i16>*
  %11373 = load <16 x i16>, <16 x i16>* %11372, align 2, !tbaa !396
  %11374 = add <16 x i16> %11365, %11359
  %11375 = add <16 x i16> %11374, %11370
  %11376 = add <16 x i16> %11368, %11362
  %11377 = add <16 x i16> %11376, %11373
  %11378 = shufflevector <16 x i16> %11375, <16 x i16> %11377, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11379 = udiv <32 x i16> %11378, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11380 = shufflevector <32 x i16> %11379, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11381 = shl nsw i64 %11348, 5
  %11382 = add nsw i64 %11381, %11311
  %11383 = getelementptr inbounds i16, i16* %blur_x841, i64 %11382
  %11384 = bitcast i16* %11383 to <16 x i16>*
  store <16 x i16> %11380, <16 x i16>* %11384, align 2, !tbaa !399
  %11385 = shufflevector <32 x i16> %11379, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11386 = getelementptr inbounds i16, i16* %11383, i64 16
  %11387 = bitcast i16* %11386 to <16 x i16>*
  store <16 x i16> %11385, <16 x i16>* %11387, align 2, !tbaa !399
  br label %after_bb854

"for blur_y.s0.x.x.rebased862":                   ; preds = %"for blur_y.s0.x.x.rebased862.preheader", %after_bb865
  %blur_y.s0.x.x.rebased864 = phi i32 [ %11393, %after_bb865 ], [ 0, %"for blur_y.s0.x.x.rebased862.preheader" ]
  %11388 = add nsw i32 %blur_y.s0.x.x.rebased864, %t1582776
  %11389 = icmp slt i32 %11388, 1
  %11390 = shl nsw i32 %11388, 5
  %11391 = icmp sgt i32 %194, %11390
  %11392 = or i1 %11389, %11391
  br i1 %11392, label %then_bb866, label %after_bb865

"end for blur_y.s0.x.x.rebased863":               ; preds = %after_bb865, %"end for blur_y.s0.x.x.rebased852"
  br i1 %225, label %"produce blur_x874", label %"end for blur_y.s0.x.x.rebased863.after_bb871_crit_edge"

"end for blur_y.s0.x.x.rebased863.after_bb871_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased863"
  %.pre3388 = add nsw i32 %a365, 1
  %.pre3390 = and i32 %.pre3388, 3
  br label %after_bb871

after_bb865:                                      ; preds = %"for blur_y.s0.x.x.rebased862", %then_bb866
  %11393 = add nuw nsw i32 %blur_y.s0.x.x.rebased864, 1
  %.not2566 = icmp eq i32 %11393, %t1639860
  br i1 %.not2566, label %"end for blur_y.s0.x.x.rebased863", label %"for blur_y.s0.x.x.rebased862"

then_bb866:                                       ; preds = %"for blur_y.s0.x.x.rebased862"
  %11394 = icmp sgt i32 %t1603, %11390
  %b584 = select i1 %11394, i32 %11390, i32 %t1603
  %11395 = icmp slt i32 %b584, %194
  %blur_x.s0.x.v1.base.s869 = select i1 %11395, i32 %b584, i32 %194
  %t658870 = sub i32 %blur_x.s0.x.v1.base.s869, %t1601773
  %11396 = sext i32 %t658870 to i64
  %11397 = getelementptr inbounds i16, i16* %read_input784, i64 %11396
  %11398 = getelementptr inbounds i16, i16* %11397, i64 1
  %11399 = bitcast i16* %11398 to <16 x i16>*
  %11400 = load <16 x i16>, <16 x i16>* %11399, align 2, !tbaa !396
  %11401 = getelementptr inbounds i16, i16* %11397, i64 17
  %11402 = bitcast i16* %11401 to <16 x i16>*
  %11403 = load <16 x i16>, <16 x i16>* %11402, align 2, !tbaa !396
  %11404 = getelementptr inbounds i16, i16* %11397, i64 2
  %11405 = bitcast i16* %11404 to <16 x i16>*
  %11406 = load <16 x i16>, <16 x i16>* %11405, align 2, !tbaa !396
  %11407 = getelementptr inbounds i16, i16* %11397, i64 18
  %11408 = bitcast i16* %11407 to <16 x i16>*
  %11409 = load <16 x i16>, <16 x i16>* %11408, align 2, !tbaa !396
  %11410 = bitcast i16* %11397 to <16 x i16>*
  %11411 = load <16 x i16>, <16 x i16>* %11410, align 2, !tbaa !396
  %11412 = getelementptr inbounds i16, i16* %11397, i64 16
  %11413 = bitcast i16* %11412 to <16 x i16>*
  %11414 = load <16 x i16>, <16 x i16>* %11413, align 2, !tbaa !396
  %11415 = add <16 x i16> %11406, %11400
  %11416 = add <16 x i16> %11415, %11411
  %11417 = add <16 x i16> %11409, %11403
  %11418 = add <16 x i16> %11417, %11414
  %11419 = shufflevector <16 x i16> %11416, <16 x i16> %11418, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11420 = udiv <32 x i16> %11419, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11421 = shufflevector <32 x i16> %11420, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11422 = sext i32 %blur_x.s0.x.v1.base.s869 to i64
  %11423 = add nsw i64 %11422, %11354
  %11424 = getelementptr inbounds i16, i16* %blur_x841, i64 %11423
  %11425 = bitcast i16* %11424 to <16 x i16>*
  store <16 x i16> %11421, <16 x i16>* %11425, align 2, !tbaa !399
  %11426 = shufflevector <32 x i16> %11420, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11427 = getelementptr inbounds i16, i16* %11424, i64 16
  %11428 = bitcast i16* %11427 to <16 x i16>*
  store <16 x i16> %11426, <16 x i16>* %11428, align 2, !tbaa !399
  br label %after_bb865

after_bb871:                                      ; preds = %"end for blur_y.s0.x.x.rebased863.after_bb871_crit_edge", %"produce blur_x874"
  %.pre-phi3391 = phi i32 [ %.pre3390, %"end for blur_y.s0.x.x.rebased863.after_bb871_crit_edge" ], [ %11458, %"produce blur_x874" ]
  %11429 = mul nsw i32 %.pre-phi3391, %a537
  %t1644876 = sub nsw i32 %11429, %t1601773
  br i1 %297, label %"for blur_y.s0.x.x.rebased879.preheader", label %"end for blur_y.s0.x.x.rebased880", !prof !386

"for blur_y.s0.x.x.rebased879.preheader":         ; preds = %after_bb871
  %11430 = sext i32 %t1644876 to i64
  br label %"for blur_y.s0.x.x.rebased879"

"produce blur_x874":                              ; preds = %"end for blur_y.s0.x.x.rebased863"
  %11431 = getelementptr inbounds i16, i16* %read_input784, i64 %311
  %11432 = getelementptr inbounds i16, i16* %11431, i64 -31
  %11433 = bitcast i16* %11432 to <16 x i16>*
  %11434 = load <16 x i16>, <16 x i16>* %11433, align 2, !tbaa !396
  %11435 = getelementptr inbounds i16, i16* %11431, i64 -15
  %11436 = bitcast i16* %11435 to <16 x i16>*
  %11437 = load <16 x i16>, <16 x i16>* %11436, align 2, !tbaa !396
  %11438 = getelementptr inbounds i16, i16* %11431, i64 -30
  %11439 = bitcast i16* %11438 to <16 x i16>*
  %11440 = load <16 x i16>, <16 x i16>* %11439, align 2, !tbaa !396
  %11441 = getelementptr inbounds i16, i16* %11431, i64 -14
  %11442 = bitcast i16* %11441 to <16 x i16>*
  %11443 = load <16 x i16>, <16 x i16>* %11442, align 2, !tbaa !396
  %11444 = getelementptr inbounds i16, i16* %11431, i64 -32
  %11445 = bitcast i16* %11444 to <16 x i16>*
  %11446 = load <16 x i16>, <16 x i16>* %11445, align 2, !tbaa !396
  %11447 = getelementptr inbounds i16, i16* %11431, i64 -16
  %11448 = bitcast i16* %11447 to <16 x i16>*
  %11449 = load <16 x i16>, <16 x i16>* %11448, align 2, !tbaa !396
  %11450 = add <16 x i16> %11440, %11434
  %11451 = add <16 x i16> %11450, %11446
  %11452 = add <16 x i16> %11443, %11437
  %11453 = add <16 x i16> %11452, %11449
  %11454 = shufflevector <16 x i16> %11451, <16 x i16> %11453, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11455 = udiv <32 x i16> %11454, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11456 = shufflevector <32 x i16> %11455, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11457 = add nsw i32 %a365, 1
  %11458 = and i32 %11457, 3
  %11459 = zext i32 %11458 to i64
  %11460 = mul nsw i64 %294, %11459
  %11461 = add nsw i64 %296, %11460
  %11462 = getelementptr inbounds i16, i16* %blur_x841, i64 %11461
  %11463 = getelementptr inbounds i16, i16* %11462, i64 -32
  %11464 = bitcast i16* %11463 to <16 x i16>*
  store <16 x i16> %11456, <16 x i16>* %11464, align 2, !tbaa !399
  %11465 = shufflevector <32 x i16> %11455, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11466 = getelementptr inbounds i16, i16* %11462, i64 -16
  %11467 = bitcast i16* %11466 to <16 x i16>*
  store <16 x i16> %11465, <16 x i16>* %11467, align 2, !tbaa !399
  br label %after_bb871

"for blur_y.s0.x.x.rebased879":                   ; preds = %"for blur_y.s0.x.x.rebased879.preheader", %after_bb882
  %indvars.iv3240 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased879.preheader" ], [ %indvars.iv.next3241, %after_bb882 ]
  %11468 = add nsw i64 %indvars.iv3240, %298
  %11469 = icmp slt i64 %11468, 1
  %11470 = trunc i64 %11468 to i32
  %11471 = shl nsw i32 %11470, 5
  %11472 = icmp sgt i32 %194, %11471
  %11473 = or i1 %11469, %11472
  br i1 %11473, label %"produce blur_x885", label %after_bb882

"end for blur_y.s0.x.x.rebased880":               ; preds = %after_bb882, %after_bb871
  br i1 %299, label %"for blur_y.s0.x.x.rebased890.preheader", label %"end for blur_y.s0.x.x.rebased891", !prof !386

"for blur_y.s0.x.x.rebased890.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased880"
  %11474 = sext i32 %t1644876 to i64
  br label %"for blur_y.s0.x.x.rebased890"

after_bb882:                                      ; preds = %"for blur_y.s0.x.x.rebased879", %"produce blur_x885"
  %indvars.iv.next3241 = add nuw nsw i64 %indvars.iv3240, 1
  %.not2563 = icmp eq i64 %indvars.iv.next3241, %515
  br i1 %.not2563, label %"end for blur_y.s0.x.x.rebased880", label %"for blur_y.s0.x.x.rebased879"

"produce blur_x885":                              ; preds = %"for blur_y.s0.x.x.rebased879"
  %t662886 = add nsw i32 %314, %11471
  %11475 = sext i32 %t662886 to i64
  %11476 = getelementptr inbounds i16, i16* %read_input784, i64 %11475
  %11477 = getelementptr inbounds i16, i16* %11476, i64 1
  %11478 = bitcast i16* %11477 to <16 x i16>*
  %11479 = load <16 x i16>, <16 x i16>* %11478, align 2, !tbaa !396
  %11480 = getelementptr inbounds i16, i16* %11476, i64 17
  %11481 = bitcast i16* %11480 to <16 x i16>*
  %11482 = load <16 x i16>, <16 x i16>* %11481, align 2, !tbaa !396
  %11483 = getelementptr inbounds i16, i16* %11476, i64 2
  %11484 = bitcast i16* %11483 to <16 x i16>*
  %11485 = load <16 x i16>, <16 x i16>* %11484, align 2, !tbaa !396
  %11486 = getelementptr inbounds i16, i16* %11476, i64 18
  %11487 = bitcast i16* %11486 to <16 x i16>*
  %11488 = load <16 x i16>, <16 x i16>* %11487, align 2, !tbaa !396
  %11489 = bitcast i16* %11476 to <16 x i16>*
  %11490 = load <16 x i16>, <16 x i16>* %11489, align 2, !tbaa !396
  %11491 = getelementptr inbounds i16, i16* %11476, i64 16
  %11492 = bitcast i16* %11491 to <16 x i16>*
  %11493 = load <16 x i16>, <16 x i16>* %11492, align 2, !tbaa !396
  %11494 = add <16 x i16> %11485, %11479
  %11495 = add <16 x i16> %11494, %11490
  %11496 = add <16 x i16> %11488, %11482
  %11497 = add <16 x i16> %11496, %11493
  %11498 = shufflevector <16 x i16> %11495, <16 x i16> %11497, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11499 = udiv <32 x i16> %11498, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11500 = shufflevector <32 x i16> %11499, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11501 = shl nsw i64 %11468, 5
  %11502 = add nsw i64 %11501, %11430
  %11503 = getelementptr inbounds i16, i16* %blur_x841, i64 %11502
  %11504 = bitcast i16* %11503 to <16 x i16>*
  store <16 x i16> %11500, <16 x i16>* %11504, align 2, !tbaa !399
  %11505 = shufflevector <32 x i16> %11499, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11506 = getelementptr inbounds i16, i16* %11503, i64 16
  %11507 = bitcast i16* %11506 to <16 x i16>*
  store <16 x i16> %11505, <16 x i16>* %11507, align 2, !tbaa !399
  br label %after_bb882

"for blur_y.s0.x.x.rebased890":                   ; preds = %"for blur_y.s0.x.x.rebased890.preheader", %after_bb893
  %blur_y.s0.x.x.rebased892 = phi i32 [ %11513, %after_bb893 ], [ 0, %"for blur_y.s0.x.x.rebased890.preheader" ]
  %11508 = add nsw i32 %blur_y.s0.x.x.rebased892, %t1582776
  %11509 = icmp slt i32 %11508, 1
  %11510 = shl nsw i32 %11508, 5
  %11511 = icmp sgt i32 %194, %11510
  %11512 = or i1 %11509, %11511
  br i1 %11512, label %then_bb894, label %after_bb893

"end for blur_y.s0.x.x.rebased891":               ; preds = %after_bb893, %"end for blur_y.s0.x.x.rebased880"
  br i1 %225, label %"produce blur_x904", label %"end for blur_y.s0.x.x.rebased891.after_bb901_crit_edge"

"end for blur_y.s0.x.x.rebased891.after_bb901_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased891"
  %.pre3392 = add nsw i32 %a365, 2
  %.pre3394 = and i32 %.pre3392, 3
  br label %after_bb901

after_bb893:                                      ; preds = %"for blur_y.s0.x.x.rebased890", %then_bb894
  %11513 = add nuw nsw i32 %blur_y.s0.x.x.rebased892, 1
  %.not2562 = icmp eq i32 %11513, %t1639860
  br i1 %.not2562, label %"end for blur_y.s0.x.x.rebased891", label %"for blur_y.s0.x.x.rebased890"

then_bb894:                                       ; preds = %"for blur_y.s0.x.x.rebased890"
  %11514 = icmp sgt i32 %t1603, %11510
  %b772 = select i1 %11514, i32 %11510, i32 %t1603
  %11515 = icmp slt i32 %b772, %194
  %blur_x.s0.x.v1.base.s899 = select i1 %11515, i32 %b772, i32 %194
  %t664900 = add nsw i32 %314, %blur_x.s0.x.v1.base.s899
  %11516 = sext i32 %t664900 to i64
  %11517 = getelementptr inbounds i16, i16* %read_input784, i64 %11516
  %11518 = getelementptr inbounds i16, i16* %11517, i64 1
  %11519 = bitcast i16* %11518 to <16 x i16>*
  %11520 = load <16 x i16>, <16 x i16>* %11519, align 2, !tbaa !396
  %11521 = getelementptr inbounds i16, i16* %11517, i64 17
  %11522 = bitcast i16* %11521 to <16 x i16>*
  %11523 = load <16 x i16>, <16 x i16>* %11522, align 2, !tbaa !396
  %11524 = getelementptr inbounds i16, i16* %11517, i64 2
  %11525 = bitcast i16* %11524 to <16 x i16>*
  %11526 = load <16 x i16>, <16 x i16>* %11525, align 2, !tbaa !396
  %11527 = getelementptr inbounds i16, i16* %11517, i64 18
  %11528 = bitcast i16* %11527 to <16 x i16>*
  %11529 = load <16 x i16>, <16 x i16>* %11528, align 2, !tbaa !396
  %11530 = bitcast i16* %11517 to <16 x i16>*
  %11531 = load <16 x i16>, <16 x i16>* %11530, align 2, !tbaa !396
  %11532 = getelementptr inbounds i16, i16* %11517, i64 16
  %11533 = bitcast i16* %11532 to <16 x i16>*
  %11534 = load <16 x i16>, <16 x i16>* %11533, align 2, !tbaa !396
  %11535 = add <16 x i16> %11526, %11520
  %11536 = add <16 x i16> %11535, %11531
  %11537 = add <16 x i16> %11529, %11523
  %11538 = add <16 x i16> %11537, %11534
  %11539 = shufflevector <16 x i16> %11536, <16 x i16> %11538, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11540 = udiv <32 x i16> %11539, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11541 = shufflevector <32 x i16> %11540, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11542 = sext i32 %blur_x.s0.x.v1.base.s899 to i64
  %11543 = add nsw i64 %11542, %11474
  %11544 = getelementptr inbounds i16, i16* %blur_x841, i64 %11543
  %11545 = bitcast i16* %11544 to <16 x i16>*
  store <16 x i16> %11541, <16 x i16>* %11545, align 2, !tbaa !399
  %11546 = shufflevector <32 x i16> %11540, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11547 = getelementptr inbounds i16, i16* %11544, i64 16
  %11548 = bitcast i16* %11547 to <16 x i16>*
  store <16 x i16> %11546, <16 x i16>* %11548, align 2, !tbaa !399
  br label %after_bb893

after_bb901:                                      ; preds = %"end for blur_y.s0.x.x.rebased891.after_bb901_crit_edge", %"produce blur_x904"
  %.pre-phi3395 = phi i32 [ %.pre3394, %"end for blur_y.s0.x.x.rebased891.after_bb901_crit_edge" ], [ %11590, %"produce blur_x904" ]
  %11549 = mul nsw i32 %.pre-phi3395, %a537
  %t1650912 = sub nsw i32 %11549, %t1601773
  br i1 %297, label %"for blur_y.s0.x.x.rebased916.preheader", label %"end for blur_y.s0.x.x.rebased917", !prof !386

"for blur_y.s0.x.x.rebased916.preheader":         ; preds = %after_bb901
  %11550 = sext i32 %t1650912 to i64
  %11551 = zext i32 %.pre-phi3391 to i64
  %11552 = mul nsw i64 %11551, %322
  %11553 = sub nsw i64 %11552, %293
  %11554 = zext i32 %.pre-phi3395 to i64
  %11555 = mul nsw i64 %11554, %322
  %11556 = sub nsw i64 %11555, %293
  %11557 = zext i32 %.pre-phi3387 to i64
  %11558 = mul nsw i64 %11557, %322
  %11559 = sub nsw i64 %11558, %293
  %11560 = sext i32 %a365 to i64
  %11561 = mul nsw i64 %11560, %319
  %11562 = add nsw i64 %11561, %323
  br label %"for blur_y.s0.x.x.rebased916"

"produce blur_x904":                              ; preds = %"end for blur_y.s0.x.x.rebased891"
  %11563 = getelementptr inbounds i16, i16* %read_input784, i64 %317
  %11564 = getelementptr inbounds i16, i16* %11563, i64 -31
  %11565 = bitcast i16* %11564 to <16 x i16>*
  %11566 = load <16 x i16>, <16 x i16>* %11565, align 2, !tbaa !396
  %11567 = getelementptr inbounds i16, i16* %11563, i64 -15
  %11568 = bitcast i16* %11567 to <16 x i16>*
  %11569 = load <16 x i16>, <16 x i16>* %11568, align 2, !tbaa !396
  %11570 = getelementptr inbounds i16, i16* %11563, i64 -30
  %11571 = bitcast i16* %11570 to <16 x i16>*
  %11572 = load <16 x i16>, <16 x i16>* %11571, align 2, !tbaa !396
  %11573 = getelementptr inbounds i16, i16* %11563, i64 -14
  %11574 = bitcast i16* %11573 to <16 x i16>*
  %11575 = load <16 x i16>, <16 x i16>* %11574, align 2, !tbaa !396
  %11576 = getelementptr inbounds i16, i16* %11563, i64 -32
  %11577 = bitcast i16* %11576 to <16 x i16>*
  %11578 = load <16 x i16>, <16 x i16>* %11577, align 2, !tbaa !396
  %11579 = getelementptr inbounds i16, i16* %11563, i64 -16
  %11580 = bitcast i16* %11579 to <16 x i16>*
  %11581 = load <16 x i16>, <16 x i16>* %11580, align 2, !tbaa !396
  %11582 = add <16 x i16> %11572, %11566
  %11583 = add <16 x i16> %11582, %11578
  %11584 = add <16 x i16> %11575, %11569
  %11585 = add <16 x i16> %11584, %11581
  %11586 = shufflevector <16 x i16> %11583, <16 x i16> %11585, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11587 = udiv <32 x i16> %11586, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11588 = shufflevector <32 x i16> %11587, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11589 = add nsw i32 %a365, 2
  %11590 = and i32 %11589, 3
  %11591 = zext i32 %11590 to i64
  %11592 = mul nsw i64 %294, %11591
  %11593 = add nsw i64 %296, %11592
  %11594 = getelementptr inbounds i16, i16* %blur_x841, i64 %11593
  %11595 = getelementptr inbounds i16, i16* %11594, i64 -32
  %11596 = bitcast i16* %11595 to <16 x i16>*
  store <16 x i16> %11588, <16 x i16>* %11596, align 2, !tbaa !399
  %11597 = shufflevector <32 x i16> %11587, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11598 = getelementptr inbounds i16, i16* %11594, i64 -16
  %11599 = bitcast i16* %11598 to <16 x i16>*
  store <16 x i16> %11597, <16 x i16>* %11599, align 2, !tbaa !399
  %11600 = zext i32 %.pre-phi3391 to i64
  %11601 = mul nsw i64 %11600, %318
  %11602 = add nsw i64 %11601, %291
  %11603 = getelementptr inbounds i16, i16* %blur_x841, i64 %11602
  %11604 = getelementptr inbounds i16, i16* %11603, i64 -32
  %11605 = bitcast i16* %11604 to <16 x i16>*
  %11606 = load <16 x i16>, <16 x i16>* %11605, align 2, !tbaa !399
  %11607 = getelementptr inbounds i16, i16* %11603, i64 -16
  %11608 = bitcast i16* %11607 to <16 x i16>*
  %11609 = load <16 x i16>, <16 x i16>* %11608, align 2, !tbaa !399
  %11610 = mul nsw i64 %11591, %318
  %11611 = add nsw i64 %11610, %291
  %11612 = getelementptr inbounds i16, i16* %blur_x841, i64 %11611
  %11613 = getelementptr inbounds i16, i16* %11612, i64 -32
  %11614 = bitcast i16* %11613 to <16 x i16>*
  %11615 = load <16 x i16>, <16 x i16>* %11614, align 2, !tbaa !399
  %11616 = getelementptr inbounds i16, i16* %11612, i64 -16
  %11617 = bitcast i16* %11616 to <16 x i16>*
  %11618 = load <16 x i16>, <16 x i16>* %11617, align 2, !tbaa !399
  %11619 = zext i32 %.pre-phi3387 to i64
  %11620 = mul nsw i64 %11619, %318
  %11621 = add nsw i64 %11620, %291
  %11622 = getelementptr inbounds i16, i16* %blur_x841, i64 %11621
  %11623 = getelementptr inbounds i16, i16* %11622, i64 -32
  %11624 = bitcast i16* %11623 to <16 x i16>*
  %11625 = load <16 x i16>, <16 x i16>* %11624, align 2, !tbaa !399
  %11626 = getelementptr inbounds i16, i16* %11622, i64 -16
  %11627 = bitcast i16* %11626 to <16 x i16>*
  %11628 = load <16 x i16>, <16 x i16>* %11627, align 2, !tbaa !399
  %11629 = add <16 x i16> %11615, %11606
  %11630 = add <16 x i16> %11629, %11625
  %11631 = add <16 x i16> %11618, %11609
  %11632 = add <16 x i16> %11631, %11628
  %11633 = shufflevector <16 x i16> %11630, <16 x i16> %11632, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11634 = udiv <32 x i16> %11633, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11635 = shufflevector <32 x i16> %11634, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11636 = sext i32 %a365 to i64
  %11637 = mul nsw i64 %11636, %319
  %11638 = add nsw i64 %321, %11637
  %11639 = getelementptr inbounds i16, i16* %258, i64 %11638
  %11640 = getelementptr inbounds i16, i16* %11639, i64 -32
  %11641 = bitcast i16* %11640 to <16 x i16>*
  store <16 x i16> %11635, <16 x i16>* %11641, align 2, !tbaa !401
  %11642 = shufflevector <32 x i16> %11634, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11643 = getelementptr inbounds i16, i16* %11639, i64 -16
  %11644 = bitcast i16* %11643 to <16 x i16>*
  store <16 x i16> %11642, <16 x i16>* %11644, align 2, !tbaa !401
  br label %after_bb901

"for blur_y.s0.x.x.rebased916":                   ; preds = %"for blur_y.s0.x.x.rebased916.preheader", %"consume blur_x924"
  %indvars.iv3242 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased916.preheader" ], [ %indvars.iv.next3243, %"consume blur_x924" ]
  %11645 = add nsw i64 %indvars.iv3242, %298
  %11646 = icmp slt i64 %11645, 1
  %11647 = trunc i64 %11645 to i32
  %11648 = shl nsw i32 %11647, 5
  %11649 = icmp sgt i32 %194, %11648
  %11650 = or i1 %11646, %11649
  br i1 %11650, label %"produce blur_x922", label %"for blur_y.s0.x.x.rebased916.consume blur_x924_crit_edge"

"for blur_y.s0.x.x.rebased916.consume blur_x924_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased916"
  %.pre3396 = shl nsw i64 %11645, 5
  br label %"consume blur_x924"

"end for blur_y.s0.x.x.rebased917":               ; preds = %"consume blur_x924", %after_bb901
  br i1 %299, label %"for blur_y.s0.x.x.rebased932.preheader", label %"end for blur_y.s0.x.x.rebased933", !prof !386

"for blur_y.s0.x.x.rebased932.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased917"
  %11651 = sext i32 %t1650912 to i64
  %11652 = zext i32 %.pre-phi3391 to i64
  %11653 = mul nsw i64 %11652, %322
  %11654 = sub nsw i64 %11653, %293
  %11655 = zext i32 %.pre-phi3395 to i64
  %11656 = mul nsw i64 %11655, %322
  %11657 = sub nsw i64 %11656, %293
  %11658 = zext i32 %.pre-phi3387 to i64
  %11659 = mul nsw i64 %11658, %322
  %11660 = sub nsw i64 %11659, %293
  %11661 = sext i32 %a365 to i64
  %11662 = mul nsw i64 %11661, %319
  %11663 = add nsw i64 %11662, %323
  br label %"for blur_y.s0.x.x.rebased932"

"produce blur_x922":                              ; preds = %"for blur_y.s0.x.x.rebased916"
  %t672923 = add nsw i32 %11648, %313
  %11664 = sext i32 %t672923 to i64
  %11665 = getelementptr inbounds i16, i16* %read_input784, i64 %11664
  %11666 = getelementptr inbounds i16, i16* %11665, i64 1
  %11667 = bitcast i16* %11666 to <16 x i16>*
  %11668 = load <16 x i16>, <16 x i16>* %11667, align 2, !tbaa !396
  %11669 = getelementptr inbounds i16, i16* %11665, i64 17
  %11670 = bitcast i16* %11669 to <16 x i16>*
  %11671 = load <16 x i16>, <16 x i16>* %11670, align 2, !tbaa !396
  %11672 = getelementptr inbounds i16, i16* %11665, i64 2
  %11673 = bitcast i16* %11672 to <16 x i16>*
  %11674 = load <16 x i16>, <16 x i16>* %11673, align 2, !tbaa !396
  %11675 = getelementptr inbounds i16, i16* %11665, i64 18
  %11676 = bitcast i16* %11675 to <16 x i16>*
  %11677 = load <16 x i16>, <16 x i16>* %11676, align 2, !tbaa !396
  %11678 = bitcast i16* %11665 to <16 x i16>*
  %11679 = load <16 x i16>, <16 x i16>* %11678, align 2, !tbaa !396
  %11680 = getelementptr inbounds i16, i16* %11665, i64 16
  %11681 = bitcast i16* %11680 to <16 x i16>*
  %11682 = load <16 x i16>, <16 x i16>* %11681, align 2, !tbaa !396
  %11683 = add <16 x i16> %11674, %11668
  %11684 = add <16 x i16> %11683, %11679
  %11685 = add <16 x i16> %11677, %11671
  %11686 = add <16 x i16> %11685, %11682
  %11687 = shufflevector <16 x i16> %11684, <16 x i16> %11686, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11688 = udiv <32 x i16> %11687, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11689 = shufflevector <32 x i16> %11688, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11690 = shl nsw i64 %11645, 5
  %11691 = add nsw i64 %11690, %11550
  %11692 = getelementptr inbounds i16, i16* %blur_x841, i64 %11691
  %11693 = bitcast i16* %11692 to <16 x i16>*
  store <16 x i16> %11689, <16 x i16>* %11693, align 2, !tbaa !399
  %11694 = shufflevector <32 x i16> %11688, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11695 = getelementptr inbounds i16, i16* %11692, i64 16
  %11696 = bitcast i16* %11695 to <16 x i16>*
  store <16 x i16> %11694, <16 x i16>* %11696, align 2, !tbaa !399
  br label %"consume blur_x924"

"consume blur_x924":                              ; preds = %"for blur_y.s0.x.x.rebased916.consume blur_x924_crit_edge", %"produce blur_x922"
  %.pre-phi3397 = phi i64 [ %.pre3396, %"for blur_y.s0.x.x.rebased916.consume blur_x924_crit_edge" ], [ %11690, %"produce blur_x922" ]
  %11697 = add nsw i64 %11553, %.pre-phi3397
  %11698 = getelementptr inbounds i16, i16* %blur_x841, i64 %11697
  %11699 = bitcast i16* %11698 to <16 x i16>*
  %11700 = load <16 x i16>, <16 x i16>* %11699, align 2, !tbaa !399
  %11701 = getelementptr inbounds i16, i16* %11698, i64 16
  %11702 = bitcast i16* %11701 to <16 x i16>*
  %11703 = load <16 x i16>, <16 x i16>* %11702, align 2, !tbaa !399
  %11704 = add nsw i64 %11556, %.pre-phi3397
  %11705 = getelementptr inbounds i16, i16* %blur_x841, i64 %11704
  %11706 = bitcast i16* %11705 to <16 x i16>*
  %11707 = load <16 x i16>, <16 x i16>* %11706, align 2, !tbaa !399
  %11708 = getelementptr inbounds i16, i16* %11705, i64 16
  %11709 = bitcast i16* %11708 to <16 x i16>*
  %11710 = load <16 x i16>, <16 x i16>* %11709, align 2, !tbaa !399
  %11711 = add nsw i64 %11559, %.pre-phi3397
  %11712 = getelementptr inbounds i16, i16* %blur_x841, i64 %11711
  %11713 = bitcast i16* %11712 to <16 x i16>*
  %11714 = load <16 x i16>, <16 x i16>* %11713, align 2, !tbaa !399
  %11715 = getelementptr inbounds i16, i16* %11712, i64 16
  %11716 = bitcast i16* %11715 to <16 x i16>*
  %11717 = load <16 x i16>, <16 x i16>* %11716, align 2, !tbaa !399
  %11718 = add <16 x i16> %11707, %11700
  %11719 = add <16 x i16> %11718, %11714
  %11720 = add <16 x i16> %11710, %11703
  %11721 = add <16 x i16> %11720, %11717
  %11722 = shufflevector <16 x i16> %11719, <16 x i16> %11721, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11723 = udiv <32 x i16> %11722, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11724 = shufflevector <32 x i16> %11723, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11725 = add nsw i64 %11562, %.pre-phi3397
  %11726 = getelementptr inbounds i16, i16* %258, i64 %11725
  %11727 = bitcast i16* %11726 to <16 x i16>*
  store <16 x i16> %11724, <16 x i16>* %11727, align 2, !tbaa !401
  %11728 = shufflevector <32 x i16> %11723, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11729 = getelementptr inbounds i16, i16* %11726, i64 16
  %11730 = bitcast i16* %11729 to <16 x i16>*
  store <16 x i16> %11728, <16 x i16>* %11730, align 2, !tbaa !401
  %indvars.iv.next3243 = add nuw nsw i64 %indvars.iv3242, 1
  %.not2559 = icmp eq i64 %indvars.iv.next3243, %515
  br i1 %.not2559, label %"end for blur_y.s0.x.x.rebased917", label %"for blur_y.s0.x.x.rebased916"

"for blur_y.s0.x.x.rebased932":                   ; preds = %"for blur_y.s0.x.x.rebased932.preheader", %"consume blur_x943"
  %blur_y.s0.x.x.rebased934 = phi i32 [ %11805, %"consume blur_x943" ], [ 0, %"for blur_y.s0.x.x.rebased932.preheader" ]
  %11731 = add nsw i32 %blur_y.s0.x.x.rebased934, %t1582776
  %a935 = shl nsw i32 %11731, 5
  %11732 = icmp sgt i32 %t1603, %a935
  %blur_y.s0.x.v0.base.s935 = select i1 %11732, i32 %a935, i32 %t1603
  %11733 = icmp slt i32 %11731, 1
  %11734 = icmp sgt i32 %194, %a935
  %11735 = or i1 %11733, %11734
  br i1 %11735, label %"produce blur_x940", label %"consume blur_x943"

"end for blur_y.s0.x.x.rebased933":               ; preds = %"consume blur_x943", %"end for blur_y.s0.x.x.rebased917"
  br i1 %225, label %"produce blur_x947", label %"end for blur_y.s0.x.x.rebased933.after_bb944_crit_edge"

"end for blur_y.s0.x.x.rebased933.after_bb944_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased933"
  %.pre3398 = add nsw i32 %a365, 3
  %.pre3400 = and i32 %.pre3398, 3
  br label %after_bb944

"produce blur_x940":                              ; preds = %"for blur_y.s0.x.x.rebased932"
  %11736 = icmp slt i32 %blur_y.s0.x.v0.base.s935, %194
  %blur_x.s0.x.v1.base.s941 = select i1 %11736, i32 %blur_y.s0.x.v0.base.s935, i32 %194
  %t677942 = add nsw i32 %blur_x.s0.x.v1.base.s941, %313
  %11737 = sext i32 %t677942 to i64
  %11738 = getelementptr inbounds i16, i16* %read_input784, i64 %11737
  %11739 = getelementptr inbounds i16, i16* %11738, i64 1
  %11740 = bitcast i16* %11739 to <16 x i16>*
  %11741 = load <16 x i16>, <16 x i16>* %11740, align 2, !tbaa !396
  %11742 = getelementptr inbounds i16, i16* %11738, i64 17
  %11743 = bitcast i16* %11742 to <16 x i16>*
  %11744 = load <16 x i16>, <16 x i16>* %11743, align 2, !tbaa !396
  %11745 = getelementptr inbounds i16, i16* %11738, i64 2
  %11746 = bitcast i16* %11745 to <16 x i16>*
  %11747 = load <16 x i16>, <16 x i16>* %11746, align 2, !tbaa !396
  %11748 = getelementptr inbounds i16, i16* %11738, i64 18
  %11749 = bitcast i16* %11748 to <16 x i16>*
  %11750 = load <16 x i16>, <16 x i16>* %11749, align 2, !tbaa !396
  %11751 = bitcast i16* %11738 to <16 x i16>*
  %11752 = load <16 x i16>, <16 x i16>* %11751, align 2, !tbaa !396
  %11753 = getelementptr inbounds i16, i16* %11738, i64 16
  %11754 = bitcast i16* %11753 to <16 x i16>*
  %11755 = load <16 x i16>, <16 x i16>* %11754, align 2, !tbaa !396
  %11756 = add <16 x i16> %11747, %11741
  %11757 = add <16 x i16> %11756, %11752
  %11758 = add <16 x i16> %11750, %11744
  %11759 = add <16 x i16> %11758, %11755
  %11760 = shufflevector <16 x i16> %11757, <16 x i16> %11759, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11761 = udiv <32 x i16> %11760, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11762 = shufflevector <32 x i16> %11761, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11763 = sext i32 %blur_x.s0.x.v1.base.s941 to i64
  %11764 = add nsw i64 %11763, %11651
  %11765 = getelementptr inbounds i16, i16* %blur_x841, i64 %11764
  %11766 = bitcast i16* %11765 to <16 x i16>*
  store <16 x i16> %11762, <16 x i16>* %11766, align 2, !tbaa !399
  %11767 = shufflevector <32 x i16> %11761, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11768 = getelementptr inbounds i16, i16* %11765, i64 16
  %11769 = bitcast i16* %11768 to <16 x i16>*
  store <16 x i16> %11767, <16 x i16>* %11769, align 2, !tbaa !399
  br label %"consume blur_x943"

"consume blur_x943":                              ; preds = %"for blur_y.s0.x.x.rebased932", %"produce blur_x940"
  %11770 = sext i32 %blur_y.s0.x.v0.base.s935 to i64
  %11771 = add nsw i64 %11654, %11770
  %11772 = getelementptr inbounds i16, i16* %blur_x841, i64 %11771
  %11773 = bitcast i16* %11772 to <16 x i16>*
  %11774 = load <16 x i16>, <16 x i16>* %11773, align 2, !tbaa !399
  %11775 = getelementptr inbounds i16, i16* %11772, i64 16
  %11776 = bitcast i16* %11775 to <16 x i16>*
  %11777 = load <16 x i16>, <16 x i16>* %11776, align 2, !tbaa !399
  %11778 = add nsw i64 %11657, %11770
  %11779 = getelementptr inbounds i16, i16* %blur_x841, i64 %11778
  %11780 = bitcast i16* %11779 to <16 x i16>*
  %11781 = load <16 x i16>, <16 x i16>* %11780, align 2, !tbaa !399
  %11782 = getelementptr inbounds i16, i16* %11779, i64 16
  %11783 = bitcast i16* %11782 to <16 x i16>*
  %11784 = load <16 x i16>, <16 x i16>* %11783, align 2, !tbaa !399
  %11785 = add nsw i64 %11660, %11770
  %11786 = getelementptr inbounds i16, i16* %blur_x841, i64 %11785
  %11787 = bitcast i16* %11786 to <16 x i16>*
  %11788 = load <16 x i16>, <16 x i16>* %11787, align 2, !tbaa !399
  %11789 = getelementptr inbounds i16, i16* %11786, i64 16
  %11790 = bitcast i16* %11789 to <16 x i16>*
  %11791 = load <16 x i16>, <16 x i16>* %11790, align 2, !tbaa !399
  %11792 = add <16 x i16> %11781, %11774
  %11793 = add <16 x i16> %11792, %11788
  %11794 = add <16 x i16> %11784, %11777
  %11795 = add <16 x i16> %11794, %11791
  %11796 = shufflevector <16 x i16> %11793, <16 x i16> %11795, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11797 = udiv <32 x i16> %11796, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11798 = shufflevector <32 x i16> %11797, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11799 = add nsw i64 %11663, %11770
  %11800 = getelementptr inbounds i16, i16* %258, i64 %11799
  %11801 = bitcast i16* %11800 to <16 x i16>*
  store <16 x i16> %11798, <16 x i16>* %11801, align 2, !tbaa !401
  %11802 = shufflevector <32 x i16> %11797, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11803 = getelementptr inbounds i16, i16* %11800, i64 16
  %11804 = bitcast i16* %11803 to <16 x i16>*
  store <16 x i16> %11802, <16 x i16>* %11804, align 2, !tbaa !401
  %11805 = add nuw nsw i32 %blur_y.s0.x.x.rebased934, 1
  %.not2558 = icmp eq i32 %11805, %t1639860
  br i1 %.not2558, label %"end for blur_y.s0.x.x.rebased933", label %"for blur_y.s0.x.x.rebased932"

after_bb944:                                      ; preds = %"end for blur_y.s0.x.x.rebased933.after_bb944_crit_edge", %"produce blur_x947"
  %.pre-phi3401 = phi i32 [ %.pre3400, %"end for blur_y.s0.x.x.rebased933.after_bb944_crit_edge" ], [ %11848, %"produce blur_x947" ]
  %11806 = mul nsw i32 %.pre-phi3401, %a537
  %t1666955 = sub nsw i32 %11806, %t1601773
  br i1 %297, label %"for blur_y.s0.x.x.rebased959.preheader", label %"end for blur_y.s0.x.x.rebased960", !prof !386

"for blur_y.s0.x.x.rebased959.preheader":         ; preds = %after_bb944
  %11807 = sext i32 %t1666955 to i64
  %11808 = zext i32 %.pre-phi3395 to i64
  %11809 = mul nsw i64 %11808, %322
  %11810 = sub nsw i64 %11809, %293
  %11811 = zext i32 %.pre-phi3401 to i64
  %11812 = mul nsw i64 %11811, %322
  %11813 = sub nsw i64 %11812, %293
  %11814 = zext i32 %.pre-phi3391 to i64
  %11815 = mul nsw i64 %11814, %322
  %11816 = sub nsw i64 %11815, %293
  %11817 = sext i32 %a365 to i64
  %11818 = add nsw i64 %11817, 1
  %11819 = mul nsw i64 %11818, %319
  %11820 = add nsw i64 %11819, %323
  br label %"for blur_y.s0.x.x.rebased959"

"produce blur_x947":                              ; preds = %"end for blur_y.s0.x.x.rebased933"
  %11821 = getelementptr inbounds i16, i16* %read_input784, i64 %327
  %11822 = getelementptr inbounds i16, i16* %11821, i64 -31
  %11823 = bitcast i16* %11822 to <16 x i16>*
  %11824 = load <16 x i16>, <16 x i16>* %11823, align 2, !tbaa !396
  %11825 = getelementptr inbounds i16, i16* %11821, i64 -15
  %11826 = bitcast i16* %11825 to <16 x i16>*
  %11827 = load <16 x i16>, <16 x i16>* %11826, align 2, !tbaa !396
  %11828 = getelementptr inbounds i16, i16* %11821, i64 -30
  %11829 = bitcast i16* %11828 to <16 x i16>*
  %11830 = load <16 x i16>, <16 x i16>* %11829, align 2, !tbaa !396
  %11831 = getelementptr inbounds i16, i16* %11821, i64 -14
  %11832 = bitcast i16* %11831 to <16 x i16>*
  %11833 = load <16 x i16>, <16 x i16>* %11832, align 2, !tbaa !396
  %11834 = getelementptr inbounds i16, i16* %11821, i64 -32
  %11835 = bitcast i16* %11834 to <16 x i16>*
  %11836 = load <16 x i16>, <16 x i16>* %11835, align 2, !tbaa !396
  %11837 = getelementptr inbounds i16, i16* %11821, i64 -16
  %11838 = bitcast i16* %11837 to <16 x i16>*
  %11839 = load <16 x i16>, <16 x i16>* %11838, align 2, !tbaa !396
  %11840 = add <16 x i16> %11830, %11824
  %11841 = add <16 x i16> %11840, %11836
  %11842 = add <16 x i16> %11833, %11827
  %11843 = add <16 x i16> %11842, %11839
  %11844 = shufflevector <16 x i16> %11841, <16 x i16> %11843, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11845 = udiv <32 x i16> %11844, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11846 = shufflevector <32 x i16> %11845, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11847 = add nsw i32 %a365, 3
  %11848 = and i32 %11847, 3
  %11849 = zext i32 %11848 to i64
  %11850 = mul nsw i64 %294, %11849
  %11851 = add nsw i64 %296, %11850
  %11852 = getelementptr inbounds i16, i16* %blur_x841, i64 %11851
  %11853 = getelementptr inbounds i16, i16* %11852, i64 -32
  %11854 = bitcast i16* %11853 to <16 x i16>*
  store <16 x i16> %11846, <16 x i16>* %11854, align 2, !tbaa !399
  %11855 = shufflevector <32 x i16> %11845, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11856 = getelementptr inbounds i16, i16* %11852, i64 -16
  %11857 = bitcast i16* %11856 to <16 x i16>*
  store <16 x i16> %11855, <16 x i16>* %11857, align 2, !tbaa !399
  %11858 = zext i32 %.pre-phi3395 to i64
  %11859 = mul nsw i64 %11858, %318
  %11860 = add nsw i64 %11859, %291
  %11861 = getelementptr inbounds i16, i16* %blur_x841, i64 %11860
  %11862 = getelementptr inbounds i16, i16* %11861, i64 -32
  %11863 = bitcast i16* %11862 to <16 x i16>*
  %11864 = load <16 x i16>, <16 x i16>* %11863, align 2, !tbaa !399
  %11865 = getelementptr inbounds i16, i16* %11861, i64 -16
  %11866 = bitcast i16* %11865 to <16 x i16>*
  %11867 = load <16 x i16>, <16 x i16>* %11866, align 2, !tbaa !399
  %11868 = mul nsw i64 %11849, %318
  %11869 = add nsw i64 %11868, %291
  %11870 = getelementptr inbounds i16, i16* %blur_x841, i64 %11869
  %11871 = getelementptr inbounds i16, i16* %11870, i64 -32
  %11872 = bitcast i16* %11871 to <16 x i16>*
  %11873 = load <16 x i16>, <16 x i16>* %11872, align 2, !tbaa !399
  %11874 = getelementptr inbounds i16, i16* %11870, i64 -16
  %11875 = bitcast i16* %11874 to <16 x i16>*
  %11876 = load <16 x i16>, <16 x i16>* %11875, align 2, !tbaa !399
  %11877 = zext i32 %.pre-phi3391 to i64
  %11878 = mul nsw i64 %11877, %318
  %11879 = add nsw i64 %11878, %291
  %11880 = getelementptr inbounds i16, i16* %blur_x841, i64 %11879
  %11881 = getelementptr inbounds i16, i16* %11880, i64 -32
  %11882 = bitcast i16* %11881 to <16 x i16>*
  %11883 = load <16 x i16>, <16 x i16>* %11882, align 2, !tbaa !399
  %11884 = getelementptr inbounds i16, i16* %11880, i64 -16
  %11885 = bitcast i16* %11884 to <16 x i16>*
  %11886 = load <16 x i16>, <16 x i16>* %11885, align 2, !tbaa !399
  %11887 = add <16 x i16> %11873, %11864
  %11888 = add <16 x i16> %11887, %11883
  %11889 = add <16 x i16> %11876, %11867
  %11890 = add <16 x i16> %11889, %11886
  %11891 = shufflevector <16 x i16> %11888, <16 x i16> %11890, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11892 = udiv <32 x i16> %11891, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11893 = shufflevector <32 x i16> %11892, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11894 = sext i32 %a365 to i64
  %11895 = add nsw i64 %11894, 1
  %11896 = mul nsw i64 %11895, %319
  %11897 = add nsw i64 %321, %11896
  %11898 = getelementptr inbounds i16, i16* %258, i64 %11897
  %11899 = getelementptr inbounds i16, i16* %11898, i64 -32
  %11900 = bitcast i16* %11899 to <16 x i16>*
  store <16 x i16> %11893, <16 x i16>* %11900, align 2, !tbaa !401
  %11901 = shufflevector <32 x i16> %11892, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11902 = getelementptr inbounds i16, i16* %11898, i64 -16
  %11903 = bitcast i16* %11902 to <16 x i16>*
  store <16 x i16> %11901, <16 x i16>* %11903, align 2, !tbaa !401
  br label %after_bb944

"for blur_y.s0.x.x.rebased959":                   ; preds = %"for blur_y.s0.x.x.rebased959.preheader", %"consume blur_x967"
  %indvars.iv3244 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased959.preheader" ], [ %indvars.iv.next3245, %"consume blur_x967" ]
  %11904 = add nsw i64 %indvars.iv3244, %298
  %11905 = icmp slt i64 %11904, 1
  %11906 = trunc i64 %11904 to i32
  %11907 = shl nsw i32 %11906, 5
  %11908 = icmp sgt i32 %194, %11907
  %11909 = or i1 %11905, %11908
  br i1 %11909, label %"produce blur_x965", label %"for blur_y.s0.x.x.rebased959.consume blur_x967_crit_edge"

"for blur_y.s0.x.x.rebased959.consume blur_x967_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased959"
  %.pre3402 = shl nsw i64 %11904, 5
  br label %"consume blur_x967"

"end for blur_y.s0.x.x.rebased960":               ; preds = %"consume blur_x967", %after_bb944
  br i1 %299, label %"for blur_y.s0.x.x.rebased975.preheader", label %"end for blur_y.s0.x.x.rebased976", !prof !386

"for blur_y.s0.x.x.rebased975.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased960"
  %11910 = sext i32 %t1666955 to i64
  %11911 = zext i32 %.pre-phi3395 to i64
  %11912 = mul nsw i64 %11911, %322
  %11913 = sub nsw i64 %11912, %293
  %11914 = zext i32 %.pre-phi3401 to i64
  %11915 = mul nsw i64 %11914, %322
  %11916 = sub nsw i64 %11915, %293
  %11917 = zext i32 %.pre-phi3391 to i64
  %11918 = mul nsw i64 %11917, %322
  %11919 = sub nsw i64 %11918, %293
  %11920 = sext i32 %a365 to i64
  %11921 = add nsw i64 %11920, 1
  %11922 = mul nsw i64 %11921, %319
  %11923 = add nsw i64 %11922, %323
  br label %"for blur_y.s0.x.x.rebased975"

"produce blur_x965":                              ; preds = %"for blur_y.s0.x.x.rebased959"
  %t688966 = add nsw i32 %328, %11907
  %11924 = sext i32 %t688966 to i64
  %11925 = getelementptr inbounds i16, i16* %read_input784, i64 %11924
  %11926 = getelementptr inbounds i16, i16* %11925, i64 1
  %11927 = bitcast i16* %11926 to <16 x i16>*
  %11928 = load <16 x i16>, <16 x i16>* %11927, align 2, !tbaa !396
  %11929 = getelementptr inbounds i16, i16* %11925, i64 17
  %11930 = bitcast i16* %11929 to <16 x i16>*
  %11931 = load <16 x i16>, <16 x i16>* %11930, align 2, !tbaa !396
  %11932 = getelementptr inbounds i16, i16* %11925, i64 2
  %11933 = bitcast i16* %11932 to <16 x i16>*
  %11934 = load <16 x i16>, <16 x i16>* %11933, align 2, !tbaa !396
  %11935 = getelementptr inbounds i16, i16* %11925, i64 18
  %11936 = bitcast i16* %11935 to <16 x i16>*
  %11937 = load <16 x i16>, <16 x i16>* %11936, align 2, !tbaa !396
  %11938 = bitcast i16* %11925 to <16 x i16>*
  %11939 = load <16 x i16>, <16 x i16>* %11938, align 2, !tbaa !396
  %11940 = getelementptr inbounds i16, i16* %11925, i64 16
  %11941 = bitcast i16* %11940 to <16 x i16>*
  %11942 = load <16 x i16>, <16 x i16>* %11941, align 2, !tbaa !396
  %11943 = add <16 x i16> %11934, %11928
  %11944 = add <16 x i16> %11943, %11939
  %11945 = add <16 x i16> %11937, %11931
  %11946 = add <16 x i16> %11945, %11942
  %11947 = shufflevector <16 x i16> %11944, <16 x i16> %11946, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11948 = udiv <32 x i16> %11947, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11949 = shufflevector <32 x i16> %11948, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11950 = shl nsw i64 %11904, 5
  %11951 = add nsw i64 %11950, %11807
  %11952 = getelementptr inbounds i16, i16* %blur_x841, i64 %11951
  %11953 = bitcast i16* %11952 to <16 x i16>*
  store <16 x i16> %11949, <16 x i16>* %11953, align 2, !tbaa !399
  %11954 = shufflevector <32 x i16> %11948, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11955 = getelementptr inbounds i16, i16* %11952, i64 16
  %11956 = bitcast i16* %11955 to <16 x i16>*
  store <16 x i16> %11954, <16 x i16>* %11956, align 2, !tbaa !399
  br label %"consume blur_x967"

"consume blur_x967":                              ; preds = %"for blur_y.s0.x.x.rebased959.consume blur_x967_crit_edge", %"produce blur_x965"
  %.pre-phi3403 = phi i64 [ %.pre3402, %"for blur_y.s0.x.x.rebased959.consume blur_x967_crit_edge" ], [ %11950, %"produce blur_x965" ]
  %11957 = add nsw i64 %11810, %.pre-phi3403
  %11958 = getelementptr inbounds i16, i16* %blur_x841, i64 %11957
  %11959 = bitcast i16* %11958 to <16 x i16>*
  %11960 = load <16 x i16>, <16 x i16>* %11959, align 2, !tbaa !399
  %11961 = getelementptr inbounds i16, i16* %11958, i64 16
  %11962 = bitcast i16* %11961 to <16 x i16>*
  %11963 = load <16 x i16>, <16 x i16>* %11962, align 2, !tbaa !399
  %11964 = add nsw i64 %11813, %.pre-phi3403
  %11965 = getelementptr inbounds i16, i16* %blur_x841, i64 %11964
  %11966 = bitcast i16* %11965 to <16 x i16>*
  %11967 = load <16 x i16>, <16 x i16>* %11966, align 2, !tbaa !399
  %11968 = getelementptr inbounds i16, i16* %11965, i64 16
  %11969 = bitcast i16* %11968 to <16 x i16>*
  %11970 = load <16 x i16>, <16 x i16>* %11969, align 2, !tbaa !399
  %11971 = add nsw i64 %11816, %.pre-phi3403
  %11972 = getelementptr inbounds i16, i16* %blur_x841, i64 %11971
  %11973 = bitcast i16* %11972 to <16 x i16>*
  %11974 = load <16 x i16>, <16 x i16>* %11973, align 2, !tbaa !399
  %11975 = getelementptr inbounds i16, i16* %11972, i64 16
  %11976 = bitcast i16* %11975 to <16 x i16>*
  %11977 = load <16 x i16>, <16 x i16>* %11976, align 2, !tbaa !399
  %11978 = add <16 x i16> %11967, %11960
  %11979 = add <16 x i16> %11978, %11974
  %11980 = add <16 x i16> %11970, %11963
  %11981 = add <16 x i16> %11980, %11977
  %11982 = shufflevector <16 x i16> %11979, <16 x i16> %11981, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11983 = udiv <32 x i16> %11982, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %11984 = shufflevector <32 x i16> %11983, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11985 = add nsw i64 %11820, %.pre-phi3403
  %11986 = getelementptr inbounds i16, i16* %258, i64 %11985
  %11987 = bitcast i16* %11986 to <16 x i16>*
  store <16 x i16> %11984, <16 x i16>* %11987, align 2, !tbaa !401
  %11988 = shufflevector <32 x i16> %11983, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11989 = getelementptr inbounds i16, i16* %11986, i64 16
  %11990 = bitcast i16* %11989 to <16 x i16>*
  store <16 x i16> %11988, <16 x i16>* %11990, align 2, !tbaa !401
  %indvars.iv.next3245 = add nuw nsw i64 %indvars.iv3244, 1
  %.not2555 = icmp eq i64 %indvars.iv.next3245, %515
  br i1 %.not2555, label %"end for blur_y.s0.x.x.rebased960", label %"for blur_y.s0.x.x.rebased959"

"for blur_y.s0.x.x.rebased975":                   ; preds = %"for blur_y.s0.x.x.rebased975.preheader", %"consume blur_x986"
  %blur_y.s0.x.x.rebased977 = phi i32 [ %12065, %"consume blur_x986" ], [ 0, %"for blur_y.s0.x.x.rebased975.preheader" ]
  %11991 = add nsw i32 %blur_y.s0.x.x.rebased977, %t1582776
  %a1156 = shl nsw i32 %11991, 5
  %11992 = icmp sgt i32 %t1603, %a1156
  %blur_y.s0.x.v0.base.s978 = select i1 %11992, i32 %a1156, i32 %t1603
  %11993 = icmp slt i32 %11991, 1
  %11994 = icmp sgt i32 %194, %a1156
  %11995 = or i1 %11993, %11994
  br i1 %11995, label %"produce blur_x983", label %"consume blur_x986"

"end for blur_y.s0.x.x.rebased976":               ; preds = %"consume blur_x986", %"end for blur_y.s0.x.x.rebased960"
  br i1 %225, label %"produce blur_x990", label %after_bb987

"produce blur_x983":                              ; preds = %"for blur_y.s0.x.x.rebased975"
  %11996 = icmp slt i32 %blur_y.s0.x.v0.base.s978, %194
  %blur_x.s0.x.v1.base.s984 = select i1 %11996, i32 %blur_y.s0.x.v0.base.s978, i32 %194
  %t693985 = add nsw i32 %328, %blur_x.s0.x.v1.base.s984
  %11997 = sext i32 %t693985 to i64
  %11998 = getelementptr inbounds i16, i16* %read_input784, i64 %11997
  %11999 = getelementptr inbounds i16, i16* %11998, i64 1
  %12000 = bitcast i16* %11999 to <16 x i16>*
  %12001 = load <16 x i16>, <16 x i16>* %12000, align 2, !tbaa !396
  %12002 = getelementptr inbounds i16, i16* %11998, i64 17
  %12003 = bitcast i16* %12002 to <16 x i16>*
  %12004 = load <16 x i16>, <16 x i16>* %12003, align 2, !tbaa !396
  %12005 = getelementptr inbounds i16, i16* %11998, i64 2
  %12006 = bitcast i16* %12005 to <16 x i16>*
  %12007 = load <16 x i16>, <16 x i16>* %12006, align 2, !tbaa !396
  %12008 = getelementptr inbounds i16, i16* %11998, i64 18
  %12009 = bitcast i16* %12008 to <16 x i16>*
  %12010 = load <16 x i16>, <16 x i16>* %12009, align 2, !tbaa !396
  %12011 = bitcast i16* %11998 to <16 x i16>*
  %12012 = load <16 x i16>, <16 x i16>* %12011, align 2, !tbaa !396
  %12013 = getelementptr inbounds i16, i16* %11998, i64 16
  %12014 = bitcast i16* %12013 to <16 x i16>*
  %12015 = load <16 x i16>, <16 x i16>* %12014, align 2, !tbaa !396
  %12016 = add <16 x i16> %12007, %12001
  %12017 = add <16 x i16> %12016, %12012
  %12018 = add <16 x i16> %12010, %12004
  %12019 = add <16 x i16> %12018, %12015
  %12020 = shufflevector <16 x i16> %12017, <16 x i16> %12019, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12021 = udiv <32 x i16> %12020, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12022 = shufflevector <32 x i16> %12021, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12023 = sext i32 %blur_x.s0.x.v1.base.s984 to i64
  %12024 = add nsw i64 %12023, %11910
  %12025 = getelementptr inbounds i16, i16* %blur_x841, i64 %12024
  %12026 = bitcast i16* %12025 to <16 x i16>*
  store <16 x i16> %12022, <16 x i16>* %12026, align 2, !tbaa !399
  %12027 = shufflevector <32 x i16> %12021, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12028 = getelementptr inbounds i16, i16* %12025, i64 16
  %12029 = bitcast i16* %12028 to <16 x i16>*
  store <16 x i16> %12027, <16 x i16>* %12029, align 2, !tbaa !399
  br label %"consume blur_x986"

"consume blur_x986":                              ; preds = %"for blur_y.s0.x.x.rebased975", %"produce blur_x983"
  %12030 = sext i32 %blur_y.s0.x.v0.base.s978 to i64
  %12031 = add nsw i64 %11913, %12030
  %12032 = getelementptr inbounds i16, i16* %blur_x841, i64 %12031
  %12033 = bitcast i16* %12032 to <16 x i16>*
  %12034 = load <16 x i16>, <16 x i16>* %12033, align 2, !tbaa !399
  %12035 = getelementptr inbounds i16, i16* %12032, i64 16
  %12036 = bitcast i16* %12035 to <16 x i16>*
  %12037 = load <16 x i16>, <16 x i16>* %12036, align 2, !tbaa !399
  %12038 = add nsw i64 %11916, %12030
  %12039 = getelementptr inbounds i16, i16* %blur_x841, i64 %12038
  %12040 = bitcast i16* %12039 to <16 x i16>*
  %12041 = load <16 x i16>, <16 x i16>* %12040, align 2, !tbaa !399
  %12042 = getelementptr inbounds i16, i16* %12039, i64 16
  %12043 = bitcast i16* %12042 to <16 x i16>*
  %12044 = load <16 x i16>, <16 x i16>* %12043, align 2, !tbaa !399
  %12045 = add nsw i64 %11919, %12030
  %12046 = getelementptr inbounds i16, i16* %blur_x841, i64 %12045
  %12047 = bitcast i16* %12046 to <16 x i16>*
  %12048 = load <16 x i16>, <16 x i16>* %12047, align 2, !tbaa !399
  %12049 = getelementptr inbounds i16, i16* %12046, i64 16
  %12050 = bitcast i16* %12049 to <16 x i16>*
  %12051 = load <16 x i16>, <16 x i16>* %12050, align 2, !tbaa !399
  %12052 = add <16 x i16> %12041, %12034
  %12053 = add <16 x i16> %12052, %12048
  %12054 = add <16 x i16> %12044, %12037
  %12055 = add <16 x i16> %12054, %12051
  %12056 = shufflevector <16 x i16> %12053, <16 x i16> %12055, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12057 = udiv <32 x i16> %12056, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12058 = shufflevector <32 x i16> %12057, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12059 = add nsw i64 %11923, %12030
  %12060 = getelementptr inbounds i16, i16* %258, i64 %12059
  %12061 = bitcast i16* %12060 to <16 x i16>*
  store <16 x i16> %12058, <16 x i16>* %12061, align 2, !tbaa !401
  %12062 = shufflevector <32 x i16> %12057, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12063 = getelementptr inbounds i16, i16* %12060, i64 16
  %12064 = bitcast i16* %12063 to <16 x i16>*
  store <16 x i16> %12062, <16 x i16>* %12064, align 2, !tbaa !401
  %12065 = add nuw nsw i32 %blur_y.s0.x.x.rebased977, 1
  %.not2554 = icmp eq i32 %12065, %t1639860
  br i1 %.not2554, label %"end for blur_y.s0.x.x.rebased976", label %"for blur_y.s0.x.x.rebased975"

after_bb987:                                      ; preds = %"end for blur_y.s0.x.x.rebased976", %"produce blur_x990"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1002.preheader", label %"end for blur_y.s0.x.x.rebased1003", !prof !386

"for blur_y.s0.x.x.rebased1002.preheader":        ; preds = %after_bb987
  %12066 = sext i32 %t1638848 to i64
  %12067 = zext i32 %.pre-phi3401 to i64
  %12068 = mul nsw i64 %12067, %322
  %12069 = sub nsw i64 %12068, %293
  %12070 = zext i32 %.pre-phi3387 to i64
  %12071 = mul nsw i64 %12070, %322
  %12072 = sub nsw i64 %12071, %293
  %12073 = zext i32 %.pre-phi3395 to i64
  %12074 = mul nsw i64 %12073, %322
  %12075 = sub nsw i64 %12074, %293
  %12076 = sext i32 %a365 to i64
  %12077 = add nsw i64 %12076, 2
  %12078 = mul nsw i64 %12077, %319
  %12079 = add nsw i64 %12078, %323
  br label %"for blur_y.s0.x.x.rebased1002"

"produce blur_x990":                              ; preds = %"end for blur_y.s0.x.x.rebased976"
  %12080 = getelementptr inbounds i16, i16* %read_input784, i64 %332
  %12081 = getelementptr inbounds i16, i16* %12080, i64 -31
  %12082 = bitcast i16* %12081 to <16 x i16>*
  %12083 = load <16 x i16>, <16 x i16>* %12082, align 2, !tbaa !396
  %12084 = getelementptr inbounds i16, i16* %12080, i64 -15
  %12085 = bitcast i16* %12084 to <16 x i16>*
  %12086 = load <16 x i16>, <16 x i16>* %12085, align 2, !tbaa !396
  %12087 = getelementptr inbounds i16, i16* %12080, i64 -30
  %12088 = bitcast i16* %12087 to <16 x i16>*
  %12089 = load <16 x i16>, <16 x i16>* %12088, align 2, !tbaa !396
  %12090 = getelementptr inbounds i16, i16* %12080, i64 -14
  %12091 = bitcast i16* %12090 to <16 x i16>*
  %12092 = load <16 x i16>, <16 x i16>* %12091, align 2, !tbaa !396
  %12093 = getelementptr inbounds i16, i16* %12080, i64 -32
  %12094 = bitcast i16* %12093 to <16 x i16>*
  %12095 = load <16 x i16>, <16 x i16>* %12094, align 2, !tbaa !396
  %12096 = getelementptr inbounds i16, i16* %12080, i64 -16
  %12097 = bitcast i16* %12096 to <16 x i16>*
  %12098 = load <16 x i16>, <16 x i16>* %12097, align 2, !tbaa !396
  %12099 = add <16 x i16> %12089, %12083
  %12100 = add <16 x i16> %12099, %12095
  %12101 = add <16 x i16> %12092, %12086
  %12102 = add <16 x i16> %12101, %12098
  %12103 = shufflevector <16 x i16> %12100, <16 x i16> %12102, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12104 = udiv <32 x i16> %12103, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12105 = shufflevector <32 x i16> %12104, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12106 = zext i32 %.pre-phi3387 to i64
  %12107 = mul nsw i64 %294, %12106
  %12108 = add nsw i64 %296, %12107
  %12109 = getelementptr inbounds i16, i16* %blur_x841, i64 %12108
  %12110 = getelementptr inbounds i16, i16* %12109, i64 -32
  %12111 = bitcast i16* %12110 to <16 x i16>*
  store <16 x i16> %12105, <16 x i16>* %12111, align 2, !tbaa !399
  %12112 = shufflevector <32 x i16> %12104, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12113 = getelementptr inbounds i16, i16* %12109, i64 -16
  %12114 = bitcast i16* %12113 to <16 x i16>*
  store <16 x i16> %12112, <16 x i16>* %12114, align 2, !tbaa !399
  %12115 = zext i32 %.pre-phi3401 to i64
  %12116 = mul nsw i64 %12115, %318
  %12117 = add nsw i64 %12116, %291
  %12118 = getelementptr inbounds i16, i16* %blur_x841, i64 %12117
  %12119 = getelementptr inbounds i16, i16* %12118, i64 -32
  %12120 = bitcast i16* %12119 to <16 x i16>*
  %12121 = load <16 x i16>, <16 x i16>* %12120, align 2, !tbaa !399
  %12122 = getelementptr inbounds i16, i16* %12118, i64 -16
  %12123 = bitcast i16* %12122 to <16 x i16>*
  %12124 = load <16 x i16>, <16 x i16>* %12123, align 2, !tbaa !399
  %12125 = mul nsw i64 %12106, %318
  %12126 = add nsw i64 %12125, %291
  %12127 = getelementptr inbounds i16, i16* %blur_x841, i64 %12126
  %12128 = getelementptr inbounds i16, i16* %12127, i64 -32
  %12129 = bitcast i16* %12128 to <16 x i16>*
  %12130 = load <16 x i16>, <16 x i16>* %12129, align 2, !tbaa !399
  %12131 = getelementptr inbounds i16, i16* %12127, i64 -16
  %12132 = bitcast i16* %12131 to <16 x i16>*
  %12133 = load <16 x i16>, <16 x i16>* %12132, align 2, !tbaa !399
  %12134 = zext i32 %.pre-phi3395 to i64
  %12135 = mul nsw i64 %12134, %318
  %12136 = add nsw i64 %12135, %291
  %12137 = getelementptr inbounds i16, i16* %blur_x841, i64 %12136
  %12138 = getelementptr inbounds i16, i16* %12137, i64 -32
  %12139 = bitcast i16* %12138 to <16 x i16>*
  %12140 = load <16 x i16>, <16 x i16>* %12139, align 2, !tbaa !399
  %12141 = getelementptr inbounds i16, i16* %12137, i64 -16
  %12142 = bitcast i16* %12141 to <16 x i16>*
  %12143 = load <16 x i16>, <16 x i16>* %12142, align 2, !tbaa !399
  %12144 = add <16 x i16> %12130, %12121
  %12145 = add <16 x i16> %12144, %12140
  %12146 = add <16 x i16> %12133, %12124
  %12147 = add <16 x i16> %12146, %12143
  %12148 = shufflevector <16 x i16> %12145, <16 x i16> %12147, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12149 = udiv <32 x i16> %12148, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12150 = shufflevector <32 x i16> %12149, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12151 = sext i32 %a365 to i64
  %12152 = add nsw i64 %12151, 2
  %12153 = mul nsw i64 %12152, %319
  %12154 = add nsw i64 %321, %12153
  %12155 = getelementptr inbounds i16, i16* %258, i64 %12154
  %12156 = getelementptr inbounds i16, i16* %12155, i64 -32
  %12157 = bitcast i16* %12156 to <16 x i16>*
  store <16 x i16> %12150, <16 x i16>* %12157, align 2, !tbaa !401
  %12158 = shufflevector <32 x i16> %12149, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12159 = getelementptr inbounds i16, i16* %12155, i64 -16
  %12160 = bitcast i16* %12159 to <16 x i16>*
  store <16 x i16> %12158, <16 x i16>* %12160, align 2, !tbaa !401
  br label %after_bb987

"for blur_y.s0.x.x.rebased1002":                  ; preds = %"for blur_y.s0.x.x.rebased1002.preheader", %"consume blur_x1010"
  %indvars.iv3246 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1002.preheader" ], [ %indvars.iv.next3247, %"consume blur_x1010" ]
  %12161 = add nsw i64 %indvars.iv3246, %298
  %12162 = icmp slt i64 %12161, 1
  %12163 = trunc i64 %12161 to i32
  %12164 = shl nsw i32 %12163, 5
  %12165 = icmp sgt i32 %194, %12164
  %12166 = or i1 %12162, %12165
  br i1 %12166, label %"produce blur_x1008", label %"for blur_y.s0.x.x.rebased1002.consume blur_x1010_crit_edge"

"for blur_y.s0.x.x.rebased1002.consume blur_x1010_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1002"
  %.pre3404 = shl nsw i64 %12161, 5
  br label %"consume blur_x1010"

"end for blur_y.s0.x.x.rebased1003":              ; preds = %"consume blur_x1010", %after_bb987
  br i1 %299, label %"for blur_y.s0.x.x.rebased1018.preheader", label %"end for blur_y.s0.x.x.rebased1019", !prof !386

"for blur_y.s0.x.x.rebased1018.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1003"
  %12167 = sext i32 %t1638848 to i64
  %12168 = zext i32 %.pre-phi3401 to i64
  %12169 = mul nsw i64 %12168, %322
  %12170 = sub nsw i64 %12169, %293
  %12171 = zext i32 %.pre-phi3387 to i64
  %12172 = mul nsw i64 %12171, %322
  %12173 = sub nsw i64 %12172, %293
  %12174 = zext i32 %.pre-phi3395 to i64
  %12175 = mul nsw i64 %12174, %322
  %12176 = sub nsw i64 %12175, %293
  %12177 = sext i32 %a365 to i64
  %12178 = add nsw i64 %12177, 2
  %12179 = mul nsw i64 %12178, %319
  %12180 = add nsw i64 %12179, %323
  br label %"for blur_y.s0.x.x.rebased1018"

"produce blur_x1008":                             ; preds = %"for blur_y.s0.x.x.rebased1002"
  %t7041009 = add nsw i32 %334, %12164
  %12181 = sext i32 %t7041009 to i64
  %12182 = getelementptr inbounds i16, i16* %read_input784, i64 %12181
  %12183 = getelementptr inbounds i16, i16* %12182, i64 1
  %12184 = bitcast i16* %12183 to <16 x i16>*
  %12185 = load <16 x i16>, <16 x i16>* %12184, align 2, !tbaa !396
  %12186 = getelementptr inbounds i16, i16* %12182, i64 17
  %12187 = bitcast i16* %12186 to <16 x i16>*
  %12188 = load <16 x i16>, <16 x i16>* %12187, align 2, !tbaa !396
  %12189 = getelementptr inbounds i16, i16* %12182, i64 2
  %12190 = bitcast i16* %12189 to <16 x i16>*
  %12191 = load <16 x i16>, <16 x i16>* %12190, align 2, !tbaa !396
  %12192 = getelementptr inbounds i16, i16* %12182, i64 18
  %12193 = bitcast i16* %12192 to <16 x i16>*
  %12194 = load <16 x i16>, <16 x i16>* %12193, align 2, !tbaa !396
  %12195 = bitcast i16* %12182 to <16 x i16>*
  %12196 = load <16 x i16>, <16 x i16>* %12195, align 2, !tbaa !396
  %12197 = getelementptr inbounds i16, i16* %12182, i64 16
  %12198 = bitcast i16* %12197 to <16 x i16>*
  %12199 = load <16 x i16>, <16 x i16>* %12198, align 2, !tbaa !396
  %12200 = add <16 x i16> %12191, %12185
  %12201 = add <16 x i16> %12200, %12196
  %12202 = add <16 x i16> %12194, %12188
  %12203 = add <16 x i16> %12202, %12199
  %12204 = shufflevector <16 x i16> %12201, <16 x i16> %12203, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12205 = udiv <32 x i16> %12204, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12206 = shufflevector <32 x i16> %12205, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12207 = shl nsw i64 %12161, 5
  %12208 = add nsw i64 %12207, %12066
  %12209 = getelementptr inbounds i16, i16* %blur_x841, i64 %12208
  %12210 = bitcast i16* %12209 to <16 x i16>*
  store <16 x i16> %12206, <16 x i16>* %12210, align 2, !tbaa !399
  %12211 = shufflevector <32 x i16> %12205, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12212 = getelementptr inbounds i16, i16* %12209, i64 16
  %12213 = bitcast i16* %12212 to <16 x i16>*
  store <16 x i16> %12211, <16 x i16>* %12213, align 2, !tbaa !399
  br label %"consume blur_x1010"

"consume blur_x1010":                             ; preds = %"for blur_y.s0.x.x.rebased1002.consume blur_x1010_crit_edge", %"produce blur_x1008"
  %.pre-phi3405 = phi i64 [ %.pre3404, %"for blur_y.s0.x.x.rebased1002.consume blur_x1010_crit_edge" ], [ %12207, %"produce blur_x1008" ]
  %12214 = add nsw i64 %12069, %.pre-phi3405
  %12215 = getelementptr inbounds i16, i16* %blur_x841, i64 %12214
  %12216 = bitcast i16* %12215 to <16 x i16>*
  %12217 = load <16 x i16>, <16 x i16>* %12216, align 2, !tbaa !399
  %12218 = getelementptr inbounds i16, i16* %12215, i64 16
  %12219 = bitcast i16* %12218 to <16 x i16>*
  %12220 = load <16 x i16>, <16 x i16>* %12219, align 2, !tbaa !399
  %12221 = add nsw i64 %12072, %.pre-phi3405
  %12222 = getelementptr inbounds i16, i16* %blur_x841, i64 %12221
  %12223 = bitcast i16* %12222 to <16 x i16>*
  %12224 = load <16 x i16>, <16 x i16>* %12223, align 2, !tbaa !399
  %12225 = getelementptr inbounds i16, i16* %12222, i64 16
  %12226 = bitcast i16* %12225 to <16 x i16>*
  %12227 = load <16 x i16>, <16 x i16>* %12226, align 2, !tbaa !399
  %12228 = add nsw i64 %12075, %.pre-phi3405
  %12229 = getelementptr inbounds i16, i16* %blur_x841, i64 %12228
  %12230 = bitcast i16* %12229 to <16 x i16>*
  %12231 = load <16 x i16>, <16 x i16>* %12230, align 2, !tbaa !399
  %12232 = getelementptr inbounds i16, i16* %12229, i64 16
  %12233 = bitcast i16* %12232 to <16 x i16>*
  %12234 = load <16 x i16>, <16 x i16>* %12233, align 2, !tbaa !399
  %12235 = add <16 x i16> %12224, %12217
  %12236 = add <16 x i16> %12235, %12231
  %12237 = add <16 x i16> %12227, %12220
  %12238 = add <16 x i16> %12237, %12234
  %12239 = shufflevector <16 x i16> %12236, <16 x i16> %12238, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12240 = udiv <32 x i16> %12239, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12241 = shufflevector <32 x i16> %12240, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12242 = add nsw i64 %12079, %.pre-phi3405
  %12243 = getelementptr inbounds i16, i16* %258, i64 %12242
  %12244 = bitcast i16* %12243 to <16 x i16>*
  store <16 x i16> %12241, <16 x i16>* %12244, align 2, !tbaa !401
  %12245 = shufflevector <32 x i16> %12240, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12246 = getelementptr inbounds i16, i16* %12243, i64 16
  %12247 = bitcast i16* %12246 to <16 x i16>*
  store <16 x i16> %12245, <16 x i16>* %12247, align 2, !tbaa !401
  %indvars.iv.next3247 = add nuw nsw i64 %indvars.iv3246, 1
  %.not2551 = icmp eq i64 %indvars.iv.next3247, %515
  br i1 %.not2551, label %"end for blur_y.s0.x.x.rebased1003", label %"for blur_y.s0.x.x.rebased1002"

"for blur_y.s0.x.x.rebased1018":                  ; preds = %"for blur_y.s0.x.x.rebased1018.preheader", %"consume blur_x1029"
  %blur_y.s0.x.x.rebased1020 = phi i32 [ %12322, %"consume blur_x1029" ], [ 0, %"for blur_y.s0.x.x.rebased1018.preheader" ]
  %12248 = add nsw i32 %blur_y.s0.x.x.rebased1020, %t1582776
  %a1329 = shl nsw i32 %12248, 5
  %12249 = icmp sgt i32 %t1603, %a1329
  %blur_y.s0.x.v0.base.s1021 = select i1 %12249, i32 %a1329, i32 %t1603
  %12250 = icmp slt i32 %12248, 1
  %12251 = icmp sgt i32 %194, %a1329
  %12252 = or i1 %12250, %12251
  br i1 %12252, label %"produce blur_x1026", label %"consume blur_x1029"

"end for blur_y.s0.x.x.rebased1019":              ; preds = %"consume blur_x1029", %"end for blur_y.s0.x.x.rebased1003"
  br i1 %225, label %"produce blur_x1033", label %after_bb1030

"produce blur_x1026":                             ; preds = %"for blur_y.s0.x.x.rebased1018"
  %12253 = icmp slt i32 %blur_y.s0.x.v0.base.s1021, %194
  %blur_x.s0.x.v1.base.s1027 = select i1 %12253, i32 %blur_y.s0.x.v0.base.s1021, i32 %194
  %t7091028 = add nsw i32 %334, %blur_x.s0.x.v1.base.s1027
  %12254 = sext i32 %t7091028 to i64
  %12255 = getelementptr inbounds i16, i16* %read_input784, i64 %12254
  %12256 = getelementptr inbounds i16, i16* %12255, i64 1
  %12257 = bitcast i16* %12256 to <16 x i16>*
  %12258 = load <16 x i16>, <16 x i16>* %12257, align 2, !tbaa !396
  %12259 = getelementptr inbounds i16, i16* %12255, i64 17
  %12260 = bitcast i16* %12259 to <16 x i16>*
  %12261 = load <16 x i16>, <16 x i16>* %12260, align 2, !tbaa !396
  %12262 = getelementptr inbounds i16, i16* %12255, i64 2
  %12263 = bitcast i16* %12262 to <16 x i16>*
  %12264 = load <16 x i16>, <16 x i16>* %12263, align 2, !tbaa !396
  %12265 = getelementptr inbounds i16, i16* %12255, i64 18
  %12266 = bitcast i16* %12265 to <16 x i16>*
  %12267 = load <16 x i16>, <16 x i16>* %12266, align 2, !tbaa !396
  %12268 = bitcast i16* %12255 to <16 x i16>*
  %12269 = load <16 x i16>, <16 x i16>* %12268, align 2, !tbaa !396
  %12270 = getelementptr inbounds i16, i16* %12255, i64 16
  %12271 = bitcast i16* %12270 to <16 x i16>*
  %12272 = load <16 x i16>, <16 x i16>* %12271, align 2, !tbaa !396
  %12273 = add <16 x i16> %12264, %12258
  %12274 = add <16 x i16> %12273, %12269
  %12275 = add <16 x i16> %12267, %12261
  %12276 = add <16 x i16> %12275, %12272
  %12277 = shufflevector <16 x i16> %12274, <16 x i16> %12276, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12278 = udiv <32 x i16> %12277, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12279 = shufflevector <32 x i16> %12278, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12280 = sext i32 %blur_x.s0.x.v1.base.s1027 to i64
  %12281 = add nsw i64 %12280, %12167
  %12282 = getelementptr inbounds i16, i16* %blur_x841, i64 %12281
  %12283 = bitcast i16* %12282 to <16 x i16>*
  store <16 x i16> %12279, <16 x i16>* %12283, align 2, !tbaa !399
  %12284 = shufflevector <32 x i16> %12278, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12285 = getelementptr inbounds i16, i16* %12282, i64 16
  %12286 = bitcast i16* %12285 to <16 x i16>*
  store <16 x i16> %12284, <16 x i16>* %12286, align 2, !tbaa !399
  br label %"consume blur_x1029"

"consume blur_x1029":                             ; preds = %"for blur_y.s0.x.x.rebased1018", %"produce blur_x1026"
  %12287 = sext i32 %blur_y.s0.x.v0.base.s1021 to i64
  %12288 = add nsw i64 %12170, %12287
  %12289 = getelementptr inbounds i16, i16* %blur_x841, i64 %12288
  %12290 = bitcast i16* %12289 to <16 x i16>*
  %12291 = load <16 x i16>, <16 x i16>* %12290, align 2, !tbaa !399
  %12292 = getelementptr inbounds i16, i16* %12289, i64 16
  %12293 = bitcast i16* %12292 to <16 x i16>*
  %12294 = load <16 x i16>, <16 x i16>* %12293, align 2, !tbaa !399
  %12295 = add nsw i64 %12173, %12287
  %12296 = getelementptr inbounds i16, i16* %blur_x841, i64 %12295
  %12297 = bitcast i16* %12296 to <16 x i16>*
  %12298 = load <16 x i16>, <16 x i16>* %12297, align 2, !tbaa !399
  %12299 = getelementptr inbounds i16, i16* %12296, i64 16
  %12300 = bitcast i16* %12299 to <16 x i16>*
  %12301 = load <16 x i16>, <16 x i16>* %12300, align 2, !tbaa !399
  %12302 = add nsw i64 %12176, %12287
  %12303 = getelementptr inbounds i16, i16* %blur_x841, i64 %12302
  %12304 = bitcast i16* %12303 to <16 x i16>*
  %12305 = load <16 x i16>, <16 x i16>* %12304, align 2, !tbaa !399
  %12306 = getelementptr inbounds i16, i16* %12303, i64 16
  %12307 = bitcast i16* %12306 to <16 x i16>*
  %12308 = load <16 x i16>, <16 x i16>* %12307, align 2, !tbaa !399
  %12309 = add <16 x i16> %12298, %12291
  %12310 = add <16 x i16> %12309, %12305
  %12311 = add <16 x i16> %12301, %12294
  %12312 = add <16 x i16> %12311, %12308
  %12313 = shufflevector <16 x i16> %12310, <16 x i16> %12312, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12314 = udiv <32 x i16> %12313, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12315 = shufflevector <32 x i16> %12314, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12316 = add nsw i64 %12180, %12287
  %12317 = getelementptr inbounds i16, i16* %258, i64 %12316
  %12318 = bitcast i16* %12317 to <16 x i16>*
  store <16 x i16> %12315, <16 x i16>* %12318, align 2, !tbaa !401
  %12319 = shufflevector <32 x i16> %12314, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12320 = getelementptr inbounds i16, i16* %12317, i64 16
  %12321 = bitcast i16* %12320 to <16 x i16>*
  store <16 x i16> %12319, <16 x i16>* %12321, align 2, !tbaa !401
  %12322 = add nuw nsw i32 %blur_y.s0.x.x.rebased1020, 1
  %.not2550 = icmp eq i32 %12322, %t1639860
  br i1 %.not2550, label %"end for blur_y.s0.x.x.rebased1019", label %"for blur_y.s0.x.x.rebased1018"

after_bb1030:                                     ; preds = %"end for blur_y.s0.x.x.rebased1019", %"produce blur_x1033"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1045.preheader", label %"end for blur_y.s0.x.x.rebased1046", !prof !386

"for blur_y.s0.x.x.rebased1045.preheader":        ; preds = %after_bb1030
  %12323 = sext i32 %t1644876 to i64
  %12324 = zext i32 %.pre-phi3387 to i64
  %12325 = mul nsw i64 %12324, %322
  %12326 = sub nsw i64 %12325, %293
  %12327 = zext i32 %.pre-phi3391 to i64
  %12328 = mul nsw i64 %12327, %322
  %12329 = sub nsw i64 %12328, %293
  %12330 = zext i32 %.pre-phi3401 to i64
  %12331 = mul nsw i64 %12330, %322
  %12332 = sub nsw i64 %12331, %293
  %12333 = sext i32 %a365 to i64
  %12334 = add nsw i64 %12333, 3
  %12335 = mul nsw i64 %12334, %319
  %12336 = add nsw i64 %12335, %323
  br label %"for blur_y.s0.x.x.rebased1045"

"produce blur_x1033":                             ; preds = %"end for blur_y.s0.x.x.rebased1019"
  %12337 = getelementptr inbounds i16, i16* %read_input784, i64 %338
  %12338 = getelementptr inbounds i16, i16* %12337, i64 -31
  %12339 = bitcast i16* %12338 to <16 x i16>*
  %12340 = load <16 x i16>, <16 x i16>* %12339, align 2, !tbaa !396
  %12341 = getelementptr inbounds i16, i16* %12337, i64 -15
  %12342 = bitcast i16* %12341 to <16 x i16>*
  %12343 = load <16 x i16>, <16 x i16>* %12342, align 2, !tbaa !396
  %12344 = getelementptr inbounds i16, i16* %12337, i64 -30
  %12345 = bitcast i16* %12344 to <16 x i16>*
  %12346 = load <16 x i16>, <16 x i16>* %12345, align 2, !tbaa !396
  %12347 = getelementptr inbounds i16, i16* %12337, i64 -14
  %12348 = bitcast i16* %12347 to <16 x i16>*
  %12349 = load <16 x i16>, <16 x i16>* %12348, align 2, !tbaa !396
  %12350 = getelementptr inbounds i16, i16* %12337, i64 -32
  %12351 = bitcast i16* %12350 to <16 x i16>*
  %12352 = load <16 x i16>, <16 x i16>* %12351, align 2, !tbaa !396
  %12353 = getelementptr inbounds i16, i16* %12337, i64 -16
  %12354 = bitcast i16* %12353 to <16 x i16>*
  %12355 = load <16 x i16>, <16 x i16>* %12354, align 2, !tbaa !396
  %12356 = add <16 x i16> %12346, %12340
  %12357 = add <16 x i16> %12356, %12352
  %12358 = add <16 x i16> %12349, %12343
  %12359 = add <16 x i16> %12358, %12355
  %12360 = shufflevector <16 x i16> %12357, <16 x i16> %12359, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12361 = udiv <32 x i16> %12360, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12362 = shufflevector <32 x i16> %12361, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12363 = zext i32 %.pre-phi3391 to i64
  %12364 = mul nsw i64 %294, %12363
  %12365 = add nsw i64 %296, %12364
  %12366 = getelementptr inbounds i16, i16* %blur_x841, i64 %12365
  %12367 = getelementptr inbounds i16, i16* %12366, i64 -32
  %12368 = bitcast i16* %12367 to <16 x i16>*
  store <16 x i16> %12362, <16 x i16>* %12368, align 2, !tbaa !399
  %12369 = shufflevector <32 x i16> %12361, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12370 = getelementptr inbounds i16, i16* %12366, i64 -16
  %12371 = bitcast i16* %12370 to <16 x i16>*
  store <16 x i16> %12369, <16 x i16>* %12371, align 2, !tbaa !399
  %12372 = zext i32 %.pre-phi3387 to i64
  %12373 = mul nsw i64 %12372, %318
  %12374 = add nsw i64 %12373, %291
  %12375 = getelementptr inbounds i16, i16* %blur_x841, i64 %12374
  %12376 = getelementptr inbounds i16, i16* %12375, i64 -32
  %12377 = bitcast i16* %12376 to <16 x i16>*
  %12378 = load <16 x i16>, <16 x i16>* %12377, align 2, !tbaa !399
  %12379 = getelementptr inbounds i16, i16* %12375, i64 -16
  %12380 = bitcast i16* %12379 to <16 x i16>*
  %12381 = load <16 x i16>, <16 x i16>* %12380, align 2, !tbaa !399
  %12382 = mul nsw i64 %12363, %318
  %12383 = add nsw i64 %12382, %291
  %12384 = getelementptr inbounds i16, i16* %blur_x841, i64 %12383
  %12385 = getelementptr inbounds i16, i16* %12384, i64 -32
  %12386 = bitcast i16* %12385 to <16 x i16>*
  %12387 = load <16 x i16>, <16 x i16>* %12386, align 2, !tbaa !399
  %12388 = getelementptr inbounds i16, i16* %12384, i64 -16
  %12389 = bitcast i16* %12388 to <16 x i16>*
  %12390 = load <16 x i16>, <16 x i16>* %12389, align 2, !tbaa !399
  %12391 = zext i32 %.pre-phi3401 to i64
  %12392 = mul nsw i64 %12391, %318
  %12393 = add nsw i64 %12392, %291
  %12394 = getelementptr inbounds i16, i16* %blur_x841, i64 %12393
  %12395 = getelementptr inbounds i16, i16* %12394, i64 -32
  %12396 = bitcast i16* %12395 to <16 x i16>*
  %12397 = load <16 x i16>, <16 x i16>* %12396, align 2, !tbaa !399
  %12398 = getelementptr inbounds i16, i16* %12394, i64 -16
  %12399 = bitcast i16* %12398 to <16 x i16>*
  %12400 = load <16 x i16>, <16 x i16>* %12399, align 2, !tbaa !399
  %12401 = add <16 x i16> %12387, %12378
  %12402 = add <16 x i16> %12401, %12397
  %12403 = add <16 x i16> %12390, %12381
  %12404 = add <16 x i16> %12403, %12400
  %12405 = shufflevector <16 x i16> %12402, <16 x i16> %12404, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12406 = udiv <32 x i16> %12405, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12407 = shufflevector <32 x i16> %12406, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12408 = sext i32 %a365 to i64
  %12409 = add nsw i64 %12408, 3
  %12410 = mul nsw i64 %12409, %319
  %12411 = add nsw i64 %321, %12410
  %12412 = getelementptr inbounds i16, i16* %258, i64 %12411
  %12413 = getelementptr inbounds i16, i16* %12412, i64 -32
  %12414 = bitcast i16* %12413 to <16 x i16>*
  store <16 x i16> %12407, <16 x i16>* %12414, align 2, !tbaa !401
  %12415 = shufflevector <32 x i16> %12406, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12416 = getelementptr inbounds i16, i16* %12412, i64 -16
  %12417 = bitcast i16* %12416 to <16 x i16>*
  store <16 x i16> %12415, <16 x i16>* %12417, align 2, !tbaa !401
  br label %after_bb1030

"for blur_y.s0.x.x.rebased1045":                  ; preds = %"for blur_y.s0.x.x.rebased1045.preheader", %"consume blur_x1053"
  %indvars.iv3248 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1045.preheader" ], [ %indvars.iv.next3249, %"consume blur_x1053" ]
  %12418 = add nsw i64 %indvars.iv3248, %298
  %12419 = icmp slt i64 %12418, 1
  %12420 = trunc i64 %12418 to i32
  %12421 = shl nsw i32 %12420, 5
  %12422 = icmp sgt i32 %194, %12421
  %12423 = or i1 %12419, %12422
  br i1 %12423, label %"produce blur_x1051", label %"for blur_y.s0.x.x.rebased1045.consume blur_x1053_crit_edge"

"for blur_y.s0.x.x.rebased1045.consume blur_x1053_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1045"
  %.pre3406 = shl nsw i64 %12418, 5
  br label %"consume blur_x1053"

"end for blur_y.s0.x.x.rebased1046":              ; preds = %"consume blur_x1053", %after_bb1030
  br i1 %299, label %"for blur_y.s0.x.x.rebased1061.preheader", label %"end for blur_y.s0.x.x.rebased1062", !prof !386

"for blur_y.s0.x.x.rebased1061.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1046"
  %12424 = sext i32 %t1644876 to i64
  %12425 = zext i32 %.pre-phi3387 to i64
  %12426 = mul nsw i64 %12425, %322
  %12427 = sub nsw i64 %12426, %293
  %12428 = zext i32 %.pre-phi3391 to i64
  %12429 = mul nsw i64 %12428, %322
  %12430 = sub nsw i64 %12429, %293
  %12431 = zext i32 %.pre-phi3401 to i64
  %12432 = mul nsw i64 %12431, %322
  %12433 = sub nsw i64 %12432, %293
  %12434 = sext i32 %a365 to i64
  %12435 = add nsw i64 %12434, 3
  %12436 = mul nsw i64 %12435, %319
  %12437 = add nsw i64 %12436, %323
  br label %"for blur_y.s0.x.x.rebased1061"

"produce blur_x1051":                             ; preds = %"for blur_y.s0.x.x.rebased1045"
  %t7201052 = add nsw i32 %340, %12421
  %12438 = sext i32 %t7201052 to i64
  %12439 = getelementptr inbounds i16, i16* %read_input784, i64 %12438
  %12440 = getelementptr inbounds i16, i16* %12439, i64 1
  %12441 = bitcast i16* %12440 to <16 x i16>*
  %12442 = load <16 x i16>, <16 x i16>* %12441, align 2, !tbaa !396
  %12443 = getelementptr inbounds i16, i16* %12439, i64 17
  %12444 = bitcast i16* %12443 to <16 x i16>*
  %12445 = load <16 x i16>, <16 x i16>* %12444, align 2, !tbaa !396
  %12446 = getelementptr inbounds i16, i16* %12439, i64 2
  %12447 = bitcast i16* %12446 to <16 x i16>*
  %12448 = load <16 x i16>, <16 x i16>* %12447, align 2, !tbaa !396
  %12449 = getelementptr inbounds i16, i16* %12439, i64 18
  %12450 = bitcast i16* %12449 to <16 x i16>*
  %12451 = load <16 x i16>, <16 x i16>* %12450, align 2, !tbaa !396
  %12452 = bitcast i16* %12439 to <16 x i16>*
  %12453 = load <16 x i16>, <16 x i16>* %12452, align 2, !tbaa !396
  %12454 = getelementptr inbounds i16, i16* %12439, i64 16
  %12455 = bitcast i16* %12454 to <16 x i16>*
  %12456 = load <16 x i16>, <16 x i16>* %12455, align 2, !tbaa !396
  %12457 = add <16 x i16> %12448, %12442
  %12458 = add <16 x i16> %12457, %12453
  %12459 = add <16 x i16> %12451, %12445
  %12460 = add <16 x i16> %12459, %12456
  %12461 = shufflevector <16 x i16> %12458, <16 x i16> %12460, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12462 = udiv <32 x i16> %12461, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12463 = shufflevector <32 x i16> %12462, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12464 = shl nsw i64 %12418, 5
  %12465 = add nsw i64 %12464, %12323
  %12466 = getelementptr inbounds i16, i16* %blur_x841, i64 %12465
  %12467 = bitcast i16* %12466 to <16 x i16>*
  store <16 x i16> %12463, <16 x i16>* %12467, align 2, !tbaa !399
  %12468 = shufflevector <32 x i16> %12462, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12469 = getelementptr inbounds i16, i16* %12466, i64 16
  %12470 = bitcast i16* %12469 to <16 x i16>*
  store <16 x i16> %12468, <16 x i16>* %12470, align 2, !tbaa !399
  br label %"consume blur_x1053"

"consume blur_x1053":                             ; preds = %"for blur_y.s0.x.x.rebased1045.consume blur_x1053_crit_edge", %"produce blur_x1051"
  %.pre-phi3407 = phi i64 [ %.pre3406, %"for blur_y.s0.x.x.rebased1045.consume blur_x1053_crit_edge" ], [ %12464, %"produce blur_x1051" ]
  %12471 = add nsw i64 %12326, %.pre-phi3407
  %12472 = getelementptr inbounds i16, i16* %blur_x841, i64 %12471
  %12473 = bitcast i16* %12472 to <16 x i16>*
  %12474 = load <16 x i16>, <16 x i16>* %12473, align 2, !tbaa !399
  %12475 = getelementptr inbounds i16, i16* %12472, i64 16
  %12476 = bitcast i16* %12475 to <16 x i16>*
  %12477 = load <16 x i16>, <16 x i16>* %12476, align 2, !tbaa !399
  %12478 = add nsw i64 %12329, %.pre-phi3407
  %12479 = getelementptr inbounds i16, i16* %blur_x841, i64 %12478
  %12480 = bitcast i16* %12479 to <16 x i16>*
  %12481 = load <16 x i16>, <16 x i16>* %12480, align 2, !tbaa !399
  %12482 = getelementptr inbounds i16, i16* %12479, i64 16
  %12483 = bitcast i16* %12482 to <16 x i16>*
  %12484 = load <16 x i16>, <16 x i16>* %12483, align 2, !tbaa !399
  %12485 = add nsw i64 %12332, %.pre-phi3407
  %12486 = getelementptr inbounds i16, i16* %blur_x841, i64 %12485
  %12487 = bitcast i16* %12486 to <16 x i16>*
  %12488 = load <16 x i16>, <16 x i16>* %12487, align 2, !tbaa !399
  %12489 = getelementptr inbounds i16, i16* %12486, i64 16
  %12490 = bitcast i16* %12489 to <16 x i16>*
  %12491 = load <16 x i16>, <16 x i16>* %12490, align 2, !tbaa !399
  %12492 = add <16 x i16> %12481, %12474
  %12493 = add <16 x i16> %12492, %12488
  %12494 = add <16 x i16> %12484, %12477
  %12495 = add <16 x i16> %12494, %12491
  %12496 = shufflevector <16 x i16> %12493, <16 x i16> %12495, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12497 = udiv <32 x i16> %12496, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12498 = shufflevector <32 x i16> %12497, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12499 = add nsw i64 %12336, %.pre-phi3407
  %12500 = getelementptr inbounds i16, i16* %258, i64 %12499
  %12501 = bitcast i16* %12500 to <16 x i16>*
  store <16 x i16> %12498, <16 x i16>* %12501, align 2, !tbaa !401
  %12502 = shufflevector <32 x i16> %12497, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12503 = getelementptr inbounds i16, i16* %12500, i64 16
  %12504 = bitcast i16* %12503 to <16 x i16>*
  store <16 x i16> %12502, <16 x i16>* %12504, align 2, !tbaa !401
  %indvars.iv.next3249 = add nuw nsw i64 %indvars.iv3248, 1
  %.not2547 = icmp eq i64 %indvars.iv.next3249, %515
  br i1 %.not2547, label %"end for blur_y.s0.x.x.rebased1046", label %"for blur_y.s0.x.x.rebased1045"

"for blur_y.s0.x.x.rebased1061":                  ; preds = %"for blur_y.s0.x.x.rebased1061.preheader", %"consume blur_x1072"
  %blur_y.s0.x.x.rebased1063 = phi i32 [ %12579, %"consume blur_x1072" ], [ 0, %"for blur_y.s0.x.x.rebased1061.preheader" ]
  %12505 = add nsw i32 %blur_y.s0.x.x.rebased1063, %t1582776
  %a1486 = shl nsw i32 %12505, 5
  %12506 = icmp sgt i32 %t1603, %a1486
  %blur_y.s0.x.v0.base.s1064 = select i1 %12506, i32 %a1486, i32 %t1603
  %12507 = icmp slt i32 %12505, 1
  %12508 = icmp sgt i32 %194, %a1486
  %12509 = or i1 %12507, %12508
  br i1 %12509, label %"produce blur_x1069", label %"consume blur_x1072"

"end for blur_y.s0.x.x.rebased1062":              ; preds = %"consume blur_x1072", %"end for blur_y.s0.x.x.rebased1046"
  br i1 %225, label %"produce blur_x1076", label %after_bb1073

"produce blur_x1069":                             ; preds = %"for blur_y.s0.x.x.rebased1061"
  %12510 = icmp slt i32 %blur_y.s0.x.v0.base.s1064, %194
  %blur_x.s0.x.v1.base.s1070 = select i1 %12510, i32 %blur_y.s0.x.v0.base.s1064, i32 %194
  %t7251071 = add nsw i32 %340, %blur_x.s0.x.v1.base.s1070
  %12511 = sext i32 %t7251071 to i64
  %12512 = getelementptr inbounds i16, i16* %read_input784, i64 %12511
  %12513 = getelementptr inbounds i16, i16* %12512, i64 1
  %12514 = bitcast i16* %12513 to <16 x i16>*
  %12515 = load <16 x i16>, <16 x i16>* %12514, align 2, !tbaa !396
  %12516 = getelementptr inbounds i16, i16* %12512, i64 17
  %12517 = bitcast i16* %12516 to <16 x i16>*
  %12518 = load <16 x i16>, <16 x i16>* %12517, align 2, !tbaa !396
  %12519 = getelementptr inbounds i16, i16* %12512, i64 2
  %12520 = bitcast i16* %12519 to <16 x i16>*
  %12521 = load <16 x i16>, <16 x i16>* %12520, align 2, !tbaa !396
  %12522 = getelementptr inbounds i16, i16* %12512, i64 18
  %12523 = bitcast i16* %12522 to <16 x i16>*
  %12524 = load <16 x i16>, <16 x i16>* %12523, align 2, !tbaa !396
  %12525 = bitcast i16* %12512 to <16 x i16>*
  %12526 = load <16 x i16>, <16 x i16>* %12525, align 2, !tbaa !396
  %12527 = getelementptr inbounds i16, i16* %12512, i64 16
  %12528 = bitcast i16* %12527 to <16 x i16>*
  %12529 = load <16 x i16>, <16 x i16>* %12528, align 2, !tbaa !396
  %12530 = add <16 x i16> %12521, %12515
  %12531 = add <16 x i16> %12530, %12526
  %12532 = add <16 x i16> %12524, %12518
  %12533 = add <16 x i16> %12532, %12529
  %12534 = shufflevector <16 x i16> %12531, <16 x i16> %12533, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12535 = udiv <32 x i16> %12534, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12536 = shufflevector <32 x i16> %12535, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12537 = sext i32 %blur_x.s0.x.v1.base.s1070 to i64
  %12538 = add nsw i64 %12537, %12424
  %12539 = getelementptr inbounds i16, i16* %blur_x841, i64 %12538
  %12540 = bitcast i16* %12539 to <16 x i16>*
  store <16 x i16> %12536, <16 x i16>* %12540, align 2, !tbaa !399
  %12541 = shufflevector <32 x i16> %12535, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12542 = getelementptr inbounds i16, i16* %12539, i64 16
  %12543 = bitcast i16* %12542 to <16 x i16>*
  store <16 x i16> %12541, <16 x i16>* %12543, align 2, !tbaa !399
  br label %"consume blur_x1072"

"consume blur_x1072":                             ; preds = %"for blur_y.s0.x.x.rebased1061", %"produce blur_x1069"
  %12544 = sext i32 %blur_y.s0.x.v0.base.s1064 to i64
  %12545 = add nsw i64 %12427, %12544
  %12546 = getelementptr inbounds i16, i16* %blur_x841, i64 %12545
  %12547 = bitcast i16* %12546 to <16 x i16>*
  %12548 = load <16 x i16>, <16 x i16>* %12547, align 2, !tbaa !399
  %12549 = getelementptr inbounds i16, i16* %12546, i64 16
  %12550 = bitcast i16* %12549 to <16 x i16>*
  %12551 = load <16 x i16>, <16 x i16>* %12550, align 2, !tbaa !399
  %12552 = add nsw i64 %12430, %12544
  %12553 = getelementptr inbounds i16, i16* %blur_x841, i64 %12552
  %12554 = bitcast i16* %12553 to <16 x i16>*
  %12555 = load <16 x i16>, <16 x i16>* %12554, align 2, !tbaa !399
  %12556 = getelementptr inbounds i16, i16* %12553, i64 16
  %12557 = bitcast i16* %12556 to <16 x i16>*
  %12558 = load <16 x i16>, <16 x i16>* %12557, align 2, !tbaa !399
  %12559 = add nsw i64 %12433, %12544
  %12560 = getelementptr inbounds i16, i16* %blur_x841, i64 %12559
  %12561 = bitcast i16* %12560 to <16 x i16>*
  %12562 = load <16 x i16>, <16 x i16>* %12561, align 2, !tbaa !399
  %12563 = getelementptr inbounds i16, i16* %12560, i64 16
  %12564 = bitcast i16* %12563 to <16 x i16>*
  %12565 = load <16 x i16>, <16 x i16>* %12564, align 2, !tbaa !399
  %12566 = add <16 x i16> %12555, %12548
  %12567 = add <16 x i16> %12566, %12562
  %12568 = add <16 x i16> %12558, %12551
  %12569 = add <16 x i16> %12568, %12565
  %12570 = shufflevector <16 x i16> %12567, <16 x i16> %12569, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12571 = udiv <32 x i16> %12570, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12572 = shufflevector <32 x i16> %12571, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12573 = add nsw i64 %12437, %12544
  %12574 = getelementptr inbounds i16, i16* %258, i64 %12573
  %12575 = bitcast i16* %12574 to <16 x i16>*
  store <16 x i16> %12572, <16 x i16>* %12575, align 2, !tbaa !401
  %12576 = shufflevector <32 x i16> %12571, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12577 = getelementptr inbounds i16, i16* %12574, i64 16
  %12578 = bitcast i16* %12577 to <16 x i16>*
  store <16 x i16> %12576, <16 x i16>* %12578, align 2, !tbaa !401
  %12579 = add nuw nsw i32 %blur_y.s0.x.x.rebased1063, 1
  %.not2546 = icmp eq i32 %12579, %t1639860
  br i1 %.not2546, label %"end for blur_y.s0.x.x.rebased1062", label %"for blur_y.s0.x.x.rebased1061"

after_bb1073:                                     ; preds = %"end for blur_y.s0.x.x.rebased1062", %"produce blur_x1076"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1088.preheader", label %"end for blur_y.s0.x.x.rebased1089", !prof !386

"for blur_y.s0.x.x.rebased1088.preheader":        ; preds = %after_bb1073
  %12580 = sext i32 %t1650912 to i64
  %12581 = zext i32 %.pre-phi3391 to i64
  %12582 = mul nsw i64 %12581, %322
  %12583 = sub nsw i64 %12582, %293
  %12584 = zext i32 %.pre-phi3395 to i64
  %12585 = mul nsw i64 %12584, %322
  %12586 = sub nsw i64 %12585, %293
  %12587 = zext i32 %.pre-phi3387 to i64
  %12588 = mul nsw i64 %12587, %322
  %12589 = sub nsw i64 %12588, %293
  %12590 = sext i32 %a365 to i64
  %12591 = add nsw i64 %12590, 4
  %12592 = mul nsw i64 %12591, %319
  %12593 = add nsw i64 %12592, %323
  br label %"for blur_y.s0.x.x.rebased1088"

"produce blur_x1076":                             ; preds = %"end for blur_y.s0.x.x.rebased1062"
  %12594 = getelementptr inbounds i16, i16* %read_input784, i64 %344
  %12595 = getelementptr inbounds i16, i16* %12594, i64 -31
  %12596 = bitcast i16* %12595 to <16 x i16>*
  %12597 = load <16 x i16>, <16 x i16>* %12596, align 2, !tbaa !396
  %12598 = getelementptr inbounds i16, i16* %12594, i64 -15
  %12599 = bitcast i16* %12598 to <16 x i16>*
  %12600 = load <16 x i16>, <16 x i16>* %12599, align 2, !tbaa !396
  %12601 = getelementptr inbounds i16, i16* %12594, i64 -30
  %12602 = bitcast i16* %12601 to <16 x i16>*
  %12603 = load <16 x i16>, <16 x i16>* %12602, align 2, !tbaa !396
  %12604 = getelementptr inbounds i16, i16* %12594, i64 -14
  %12605 = bitcast i16* %12604 to <16 x i16>*
  %12606 = load <16 x i16>, <16 x i16>* %12605, align 2, !tbaa !396
  %12607 = getelementptr inbounds i16, i16* %12594, i64 -32
  %12608 = bitcast i16* %12607 to <16 x i16>*
  %12609 = load <16 x i16>, <16 x i16>* %12608, align 2, !tbaa !396
  %12610 = getelementptr inbounds i16, i16* %12594, i64 -16
  %12611 = bitcast i16* %12610 to <16 x i16>*
  %12612 = load <16 x i16>, <16 x i16>* %12611, align 2, !tbaa !396
  %12613 = add <16 x i16> %12603, %12597
  %12614 = add <16 x i16> %12613, %12609
  %12615 = add <16 x i16> %12606, %12600
  %12616 = add <16 x i16> %12615, %12612
  %12617 = shufflevector <16 x i16> %12614, <16 x i16> %12616, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12618 = udiv <32 x i16> %12617, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12619 = shufflevector <32 x i16> %12618, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12620 = zext i32 %.pre-phi3395 to i64
  %12621 = mul nsw i64 %294, %12620
  %12622 = add nsw i64 %296, %12621
  %12623 = getelementptr inbounds i16, i16* %blur_x841, i64 %12622
  %12624 = getelementptr inbounds i16, i16* %12623, i64 -32
  %12625 = bitcast i16* %12624 to <16 x i16>*
  store <16 x i16> %12619, <16 x i16>* %12625, align 2, !tbaa !399
  %12626 = shufflevector <32 x i16> %12618, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12627 = getelementptr inbounds i16, i16* %12623, i64 -16
  %12628 = bitcast i16* %12627 to <16 x i16>*
  store <16 x i16> %12626, <16 x i16>* %12628, align 2, !tbaa !399
  %12629 = zext i32 %.pre-phi3391 to i64
  %12630 = mul nsw i64 %12629, %318
  %12631 = add nsw i64 %12630, %291
  %12632 = getelementptr inbounds i16, i16* %blur_x841, i64 %12631
  %12633 = getelementptr inbounds i16, i16* %12632, i64 -32
  %12634 = bitcast i16* %12633 to <16 x i16>*
  %12635 = load <16 x i16>, <16 x i16>* %12634, align 2, !tbaa !399
  %12636 = getelementptr inbounds i16, i16* %12632, i64 -16
  %12637 = bitcast i16* %12636 to <16 x i16>*
  %12638 = load <16 x i16>, <16 x i16>* %12637, align 2, !tbaa !399
  %12639 = mul nsw i64 %12620, %318
  %12640 = add nsw i64 %12639, %291
  %12641 = getelementptr inbounds i16, i16* %blur_x841, i64 %12640
  %12642 = getelementptr inbounds i16, i16* %12641, i64 -32
  %12643 = bitcast i16* %12642 to <16 x i16>*
  %12644 = load <16 x i16>, <16 x i16>* %12643, align 2, !tbaa !399
  %12645 = getelementptr inbounds i16, i16* %12641, i64 -16
  %12646 = bitcast i16* %12645 to <16 x i16>*
  %12647 = load <16 x i16>, <16 x i16>* %12646, align 2, !tbaa !399
  %12648 = zext i32 %.pre-phi3387 to i64
  %12649 = mul nsw i64 %12648, %318
  %12650 = add nsw i64 %12649, %291
  %12651 = getelementptr inbounds i16, i16* %blur_x841, i64 %12650
  %12652 = getelementptr inbounds i16, i16* %12651, i64 -32
  %12653 = bitcast i16* %12652 to <16 x i16>*
  %12654 = load <16 x i16>, <16 x i16>* %12653, align 2, !tbaa !399
  %12655 = getelementptr inbounds i16, i16* %12651, i64 -16
  %12656 = bitcast i16* %12655 to <16 x i16>*
  %12657 = load <16 x i16>, <16 x i16>* %12656, align 2, !tbaa !399
  %12658 = add <16 x i16> %12644, %12635
  %12659 = add <16 x i16> %12658, %12654
  %12660 = add <16 x i16> %12647, %12638
  %12661 = add <16 x i16> %12660, %12657
  %12662 = shufflevector <16 x i16> %12659, <16 x i16> %12661, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12663 = udiv <32 x i16> %12662, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12664 = shufflevector <32 x i16> %12663, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12665 = sext i32 %a365 to i64
  %12666 = add nsw i64 %12665, 4
  %12667 = mul nsw i64 %12666, %319
  %12668 = add nsw i64 %321, %12667
  %12669 = getelementptr inbounds i16, i16* %258, i64 %12668
  %12670 = getelementptr inbounds i16, i16* %12669, i64 -32
  %12671 = bitcast i16* %12670 to <16 x i16>*
  store <16 x i16> %12664, <16 x i16>* %12671, align 2, !tbaa !401
  %12672 = shufflevector <32 x i16> %12663, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12673 = getelementptr inbounds i16, i16* %12669, i64 -16
  %12674 = bitcast i16* %12673 to <16 x i16>*
  store <16 x i16> %12672, <16 x i16>* %12674, align 2, !tbaa !401
  br label %after_bb1073

"for blur_y.s0.x.x.rebased1088":                  ; preds = %"for blur_y.s0.x.x.rebased1088.preheader", %"consume blur_x1096"
  %indvars.iv3250 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1088.preheader" ], [ %indvars.iv.next3251, %"consume blur_x1096" ]
  %12675 = add nsw i64 %indvars.iv3250, %298
  %12676 = icmp slt i64 %12675, 1
  %12677 = trunc i64 %12675 to i32
  %12678 = shl nsw i32 %12677, 5
  %12679 = icmp sgt i32 %194, %12678
  %12680 = or i1 %12676, %12679
  br i1 %12680, label %"produce blur_x1094", label %"for blur_y.s0.x.x.rebased1088.consume blur_x1096_crit_edge"

"for blur_y.s0.x.x.rebased1088.consume blur_x1096_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1088"
  %.pre3408 = shl nsw i64 %12675, 5
  br label %"consume blur_x1096"

"end for blur_y.s0.x.x.rebased1089":              ; preds = %"consume blur_x1096", %after_bb1073
  br i1 %299, label %"for blur_y.s0.x.x.rebased1104.preheader", label %"end for blur_y.s0.x.x.rebased1105", !prof !386

"for blur_y.s0.x.x.rebased1104.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1089"
  %12681 = sext i32 %t1650912 to i64
  %12682 = zext i32 %.pre-phi3391 to i64
  %12683 = mul nsw i64 %12682, %322
  %12684 = sub nsw i64 %12683, %293
  %12685 = zext i32 %.pre-phi3395 to i64
  %12686 = mul nsw i64 %12685, %322
  %12687 = sub nsw i64 %12686, %293
  %12688 = zext i32 %.pre-phi3387 to i64
  %12689 = mul nsw i64 %12688, %322
  %12690 = sub nsw i64 %12689, %293
  %12691 = sext i32 %a365 to i64
  %12692 = add nsw i64 %12691, 4
  %12693 = mul nsw i64 %12692, %319
  %12694 = add nsw i64 %12693, %323
  br label %"for blur_y.s0.x.x.rebased1104"

"produce blur_x1094":                             ; preds = %"for blur_y.s0.x.x.rebased1088"
  %t7361095 = add nsw i32 %346, %12678
  %12695 = sext i32 %t7361095 to i64
  %12696 = getelementptr inbounds i16, i16* %read_input784, i64 %12695
  %12697 = getelementptr inbounds i16, i16* %12696, i64 1
  %12698 = bitcast i16* %12697 to <16 x i16>*
  %12699 = load <16 x i16>, <16 x i16>* %12698, align 2, !tbaa !396
  %12700 = getelementptr inbounds i16, i16* %12696, i64 17
  %12701 = bitcast i16* %12700 to <16 x i16>*
  %12702 = load <16 x i16>, <16 x i16>* %12701, align 2, !tbaa !396
  %12703 = getelementptr inbounds i16, i16* %12696, i64 2
  %12704 = bitcast i16* %12703 to <16 x i16>*
  %12705 = load <16 x i16>, <16 x i16>* %12704, align 2, !tbaa !396
  %12706 = getelementptr inbounds i16, i16* %12696, i64 18
  %12707 = bitcast i16* %12706 to <16 x i16>*
  %12708 = load <16 x i16>, <16 x i16>* %12707, align 2, !tbaa !396
  %12709 = bitcast i16* %12696 to <16 x i16>*
  %12710 = load <16 x i16>, <16 x i16>* %12709, align 2, !tbaa !396
  %12711 = getelementptr inbounds i16, i16* %12696, i64 16
  %12712 = bitcast i16* %12711 to <16 x i16>*
  %12713 = load <16 x i16>, <16 x i16>* %12712, align 2, !tbaa !396
  %12714 = add <16 x i16> %12705, %12699
  %12715 = add <16 x i16> %12714, %12710
  %12716 = add <16 x i16> %12708, %12702
  %12717 = add <16 x i16> %12716, %12713
  %12718 = shufflevector <16 x i16> %12715, <16 x i16> %12717, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12719 = udiv <32 x i16> %12718, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12720 = shufflevector <32 x i16> %12719, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12721 = shl nsw i64 %12675, 5
  %12722 = add nsw i64 %12721, %12580
  %12723 = getelementptr inbounds i16, i16* %blur_x841, i64 %12722
  %12724 = bitcast i16* %12723 to <16 x i16>*
  store <16 x i16> %12720, <16 x i16>* %12724, align 2, !tbaa !399
  %12725 = shufflevector <32 x i16> %12719, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12726 = getelementptr inbounds i16, i16* %12723, i64 16
  %12727 = bitcast i16* %12726 to <16 x i16>*
  store <16 x i16> %12725, <16 x i16>* %12727, align 2, !tbaa !399
  br label %"consume blur_x1096"

"consume blur_x1096":                             ; preds = %"for blur_y.s0.x.x.rebased1088.consume blur_x1096_crit_edge", %"produce blur_x1094"
  %.pre-phi3409 = phi i64 [ %.pre3408, %"for blur_y.s0.x.x.rebased1088.consume blur_x1096_crit_edge" ], [ %12721, %"produce blur_x1094" ]
  %12728 = add nsw i64 %12583, %.pre-phi3409
  %12729 = getelementptr inbounds i16, i16* %blur_x841, i64 %12728
  %12730 = bitcast i16* %12729 to <16 x i16>*
  %12731 = load <16 x i16>, <16 x i16>* %12730, align 2, !tbaa !399
  %12732 = getelementptr inbounds i16, i16* %12729, i64 16
  %12733 = bitcast i16* %12732 to <16 x i16>*
  %12734 = load <16 x i16>, <16 x i16>* %12733, align 2, !tbaa !399
  %12735 = add nsw i64 %12586, %.pre-phi3409
  %12736 = getelementptr inbounds i16, i16* %blur_x841, i64 %12735
  %12737 = bitcast i16* %12736 to <16 x i16>*
  %12738 = load <16 x i16>, <16 x i16>* %12737, align 2, !tbaa !399
  %12739 = getelementptr inbounds i16, i16* %12736, i64 16
  %12740 = bitcast i16* %12739 to <16 x i16>*
  %12741 = load <16 x i16>, <16 x i16>* %12740, align 2, !tbaa !399
  %12742 = add nsw i64 %12589, %.pre-phi3409
  %12743 = getelementptr inbounds i16, i16* %blur_x841, i64 %12742
  %12744 = bitcast i16* %12743 to <16 x i16>*
  %12745 = load <16 x i16>, <16 x i16>* %12744, align 2, !tbaa !399
  %12746 = getelementptr inbounds i16, i16* %12743, i64 16
  %12747 = bitcast i16* %12746 to <16 x i16>*
  %12748 = load <16 x i16>, <16 x i16>* %12747, align 2, !tbaa !399
  %12749 = add <16 x i16> %12738, %12731
  %12750 = add <16 x i16> %12749, %12745
  %12751 = add <16 x i16> %12741, %12734
  %12752 = add <16 x i16> %12751, %12748
  %12753 = shufflevector <16 x i16> %12750, <16 x i16> %12752, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12754 = udiv <32 x i16> %12753, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12755 = shufflevector <32 x i16> %12754, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12756 = add nsw i64 %12593, %.pre-phi3409
  %12757 = getelementptr inbounds i16, i16* %258, i64 %12756
  %12758 = bitcast i16* %12757 to <16 x i16>*
  store <16 x i16> %12755, <16 x i16>* %12758, align 2, !tbaa !401
  %12759 = shufflevector <32 x i16> %12754, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12760 = getelementptr inbounds i16, i16* %12757, i64 16
  %12761 = bitcast i16* %12760 to <16 x i16>*
  store <16 x i16> %12759, <16 x i16>* %12761, align 2, !tbaa !401
  %indvars.iv.next3251 = add nuw nsw i64 %indvars.iv3250, 1
  %.not2543 = icmp eq i64 %indvars.iv.next3251, %515
  br i1 %.not2543, label %"end for blur_y.s0.x.x.rebased1089", label %"for blur_y.s0.x.x.rebased1088"

"for blur_y.s0.x.x.rebased1104":                  ; preds = %"for blur_y.s0.x.x.rebased1104.preheader", %"consume blur_x1115"
  %blur_y.s0.x.x.rebased1106 = phi i32 [ %12836, %"consume blur_x1115" ], [ 0, %"for blur_y.s0.x.x.rebased1104.preheader" ]
  %12762 = add nsw i32 %blur_y.s0.x.x.rebased1106, %t1582776
  %a1643 = shl nsw i32 %12762, 5
  %12763 = icmp sgt i32 %t1603, %a1643
  %blur_y.s0.x.v0.base.s1107 = select i1 %12763, i32 %a1643, i32 %t1603
  %12764 = icmp slt i32 %12762, 1
  %12765 = icmp sgt i32 %194, %a1643
  %12766 = or i1 %12764, %12765
  br i1 %12766, label %"produce blur_x1112", label %"consume blur_x1115"

"end for blur_y.s0.x.x.rebased1105":              ; preds = %"consume blur_x1115", %"end for blur_y.s0.x.x.rebased1089"
  br i1 %225, label %"produce blur_x1119", label %after_bb1116

"produce blur_x1112":                             ; preds = %"for blur_y.s0.x.x.rebased1104"
  %12767 = icmp slt i32 %blur_y.s0.x.v0.base.s1107, %194
  %blur_x.s0.x.v1.base.s1113 = select i1 %12767, i32 %blur_y.s0.x.v0.base.s1107, i32 %194
  %t7411114 = add nsw i32 %346, %blur_x.s0.x.v1.base.s1113
  %12768 = sext i32 %t7411114 to i64
  %12769 = getelementptr inbounds i16, i16* %read_input784, i64 %12768
  %12770 = getelementptr inbounds i16, i16* %12769, i64 1
  %12771 = bitcast i16* %12770 to <16 x i16>*
  %12772 = load <16 x i16>, <16 x i16>* %12771, align 2, !tbaa !396
  %12773 = getelementptr inbounds i16, i16* %12769, i64 17
  %12774 = bitcast i16* %12773 to <16 x i16>*
  %12775 = load <16 x i16>, <16 x i16>* %12774, align 2, !tbaa !396
  %12776 = getelementptr inbounds i16, i16* %12769, i64 2
  %12777 = bitcast i16* %12776 to <16 x i16>*
  %12778 = load <16 x i16>, <16 x i16>* %12777, align 2, !tbaa !396
  %12779 = getelementptr inbounds i16, i16* %12769, i64 18
  %12780 = bitcast i16* %12779 to <16 x i16>*
  %12781 = load <16 x i16>, <16 x i16>* %12780, align 2, !tbaa !396
  %12782 = bitcast i16* %12769 to <16 x i16>*
  %12783 = load <16 x i16>, <16 x i16>* %12782, align 2, !tbaa !396
  %12784 = getelementptr inbounds i16, i16* %12769, i64 16
  %12785 = bitcast i16* %12784 to <16 x i16>*
  %12786 = load <16 x i16>, <16 x i16>* %12785, align 2, !tbaa !396
  %12787 = add <16 x i16> %12778, %12772
  %12788 = add <16 x i16> %12787, %12783
  %12789 = add <16 x i16> %12781, %12775
  %12790 = add <16 x i16> %12789, %12786
  %12791 = shufflevector <16 x i16> %12788, <16 x i16> %12790, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12792 = udiv <32 x i16> %12791, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12793 = shufflevector <32 x i16> %12792, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12794 = sext i32 %blur_x.s0.x.v1.base.s1113 to i64
  %12795 = add nsw i64 %12794, %12681
  %12796 = getelementptr inbounds i16, i16* %blur_x841, i64 %12795
  %12797 = bitcast i16* %12796 to <16 x i16>*
  store <16 x i16> %12793, <16 x i16>* %12797, align 2, !tbaa !399
  %12798 = shufflevector <32 x i16> %12792, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12799 = getelementptr inbounds i16, i16* %12796, i64 16
  %12800 = bitcast i16* %12799 to <16 x i16>*
  store <16 x i16> %12798, <16 x i16>* %12800, align 2, !tbaa !399
  br label %"consume blur_x1115"

"consume blur_x1115":                             ; preds = %"for blur_y.s0.x.x.rebased1104", %"produce blur_x1112"
  %12801 = sext i32 %blur_y.s0.x.v0.base.s1107 to i64
  %12802 = add nsw i64 %12684, %12801
  %12803 = getelementptr inbounds i16, i16* %blur_x841, i64 %12802
  %12804 = bitcast i16* %12803 to <16 x i16>*
  %12805 = load <16 x i16>, <16 x i16>* %12804, align 2, !tbaa !399
  %12806 = getelementptr inbounds i16, i16* %12803, i64 16
  %12807 = bitcast i16* %12806 to <16 x i16>*
  %12808 = load <16 x i16>, <16 x i16>* %12807, align 2, !tbaa !399
  %12809 = add nsw i64 %12687, %12801
  %12810 = getelementptr inbounds i16, i16* %blur_x841, i64 %12809
  %12811 = bitcast i16* %12810 to <16 x i16>*
  %12812 = load <16 x i16>, <16 x i16>* %12811, align 2, !tbaa !399
  %12813 = getelementptr inbounds i16, i16* %12810, i64 16
  %12814 = bitcast i16* %12813 to <16 x i16>*
  %12815 = load <16 x i16>, <16 x i16>* %12814, align 2, !tbaa !399
  %12816 = add nsw i64 %12690, %12801
  %12817 = getelementptr inbounds i16, i16* %blur_x841, i64 %12816
  %12818 = bitcast i16* %12817 to <16 x i16>*
  %12819 = load <16 x i16>, <16 x i16>* %12818, align 2, !tbaa !399
  %12820 = getelementptr inbounds i16, i16* %12817, i64 16
  %12821 = bitcast i16* %12820 to <16 x i16>*
  %12822 = load <16 x i16>, <16 x i16>* %12821, align 2, !tbaa !399
  %12823 = add <16 x i16> %12812, %12805
  %12824 = add <16 x i16> %12823, %12819
  %12825 = add <16 x i16> %12815, %12808
  %12826 = add <16 x i16> %12825, %12822
  %12827 = shufflevector <16 x i16> %12824, <16 x i16> %12826, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12828 = udiv <32 x i16> %12827, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12829 = shufflevector <32 x i16> %12828, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12830 = add nsw i64 %12694, %12801
  %12831 = getelementptr inbounds i16, i16* %258, i64 %12830
  %12832 = bitcast i16* %12831 to <16 x i16>*
  store <16 x i16> %12829, <16 x i16>* %12832, align 2, !tbaa !401
  %12833 = shufflevector <32 x i16> %12828, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12834 = getelementptr inbounds i16, i16* %12831, i64 16
  %12835 = bitcast i16* %12834 to <16 x i16>*
  store <16 x i16> %12833, <16 x i16>* %12835, align 2, !tbaa !401
  %12836 = add nuw nsw i32 %blur_y.s0.x.x.rebased1106, 1
  %.not2542 = icmp eq i32 %12836, %t1639860
  br i1 %.not2542, label %"end for blur_y.s0.x.x.rebased1105", label %"for blur_y.s0.x.x.rebased1104"

after_bb1116:                                     ; preds = %"end for blur_y.s0.x.x.rebased1105", %"produce blur_x1119"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1131.preheader", label %"end for blur_y.s0.x.x.rebased1132", !prof !386

"for blur_y.s0.x.x.rebased1131.preheader":        ; preds = %after_bb1116
  %12837 = sext i32 %t1666955 to i64
  %12838 = zext i32 %.pre-phi3395 to i64
  %12839 = mul nsw i64 %12838, %322
  %12840 = sub nsw i64 %12839, %293
  %12841 = zext i32 %.pre-phi3401 to i64
  %12842 = mul nsw i64 %12841, %322
  %12843 = sub nsw i64 %12842, %293
  %12844 = zext i32 %.pre-phi3391 to i64
  %12845 = mul nsw i64 %12844, %322
  %12846 = sub nsw i64 %12845, %293
  %12847 = sext i32 %a365 to i64
  %12848 = add nsw i64 %12847, 5
  %12849 = mul nsw i64 %12848, %319
  %12850 = add nsw i64 %12849, %323
  br label %"for blur_y.s0.x.x.rebased1131"

"produce blur_x1119":                             ; preds = %"end for blur_y.s0.x.x.rebased1105"
  %12851 = getelementptr inbounds i16, i16* %read_input784, i64 %350
  %12852 = getelementptr inbounds i16, i16* %12851, i64 -31
  %12853 = bitcast i16* %12852 to <16 x i16>*
  %12854 = load <16 x i16>, <16 x i16>* %12853, align 2, !tbaa !396
  %12855 = getelementptr inbounds i16, i16* %12851, i64 -15
  %12856 = bitcast i16* %12855 to <16 x i16>*
  %12857 = load <16 x i16>, <16 x i16>* %12856, align 2, !tbaa !396
  %12858 = getelementptr inbounds i16, i16* %12851, i64 -30
  %12859 = bitcast i16* %12858 to <16 x i16>*
  %12860 = load <16 x i16>, <16 x i16>* %12859, align 2, !tbaa !396
  %12861 = getelementptr inbounds i16, i16* %12851, i64 -14
  %12862 = bitcast i16* %12861 to <16 x i16>*
  %12863 = load <16 x i16>, <16 x i16>* %12862, align 2, !tbaa !396
  %12864 = getelementptr inbounds i16, i16* %12851, i64 -32
  %12865 = bitcast i16* %12864 to <16 x i16>*
  %12866 = load <16 x i16>, <16 x i16>* %12865, align 2, !tbaa !396
  %12867 = getelementptr inbounds i16, i16* %12851, i64 -16
  %12868 = bitcast i16* %12867 to <16 x i16>*
  %12869 = load <16 x i16>, <16 x i16>* %12868, align 2, !tbaa !396
  %12870 = add <16 x i16> %12860, %12854
  %12871 = add <16 x i16> %12870, %12866
  %12872 = add <16 x i16> %12863, %12857
  %12873 = add <16 x i16> %12872, %12869
  %12874 = shufflevector <16 x i16> %12871, <16 x i16> %12873, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12875 = udiv <32 x i16> %12874, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12876 = shufflevector <32 x i16> %12875, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12877 = zext i32 %.pre-phi3401 to i64
  %12878 = mul nsw i64 %294, %12877
  %12879 = add nsw i64 %296, %12878
  %12880 = getelementptr inbounds i16, i16* %blur_x841, i64 %12879
  %12881 = getelementptr inbounds i16, i16* %12880, i64 -32
  %12882 = bitcast i16* %12881 to <16 x i16>*
  store <16 x i16> %12876, <16 x i16>* %12882, align 2, !tbaa !399
  %12883 = shufflevector <32 x i16> %12875, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12884 = getelementptr inbounds i16, i16* %12880, i64 -16
  %12885 = bitcast i16* %12884 to <16 x i16>*
  store <16 x i16> %12883, <16 x i16>* %12885, align 2, !tbaa !399
  %12886 = zext i32 %.pre-phi3395 to i64
  %12887 = mul nsw i64 %12886, %318
  %12888 = add nsw i64 %12887, %291
  %12889 = getelementptr inbounds i16, i16* %blur_x841, i64 %12888
  %12890 = getelementptr inbounds i16, i16* %12889, i64 -32
  %12891 = bitcast i16* %12890 to <16 x i16>*
  %12892 = load <16 x i16>, <16 x i16>* %12891, align 2, !tbaa !399
  %12893 = getelementptr inbounds i16, i16* %12889, i64 -16
  %12894 = bitcast i16* %12893 to <16 x i16>*
  %12895 = load <16 x i16>, <16 x i16>* %12894, align 2, !tbaa !399
  %12896 = mul nsw i64 %12877, %318
  %12897 = add nsw i64 %12896, %291
  %12898 = getelementptr inbounds i16, i16* %blur_x841, i64 %12897
  %12899 = getelementptr inbounds i16, i16* %12898, i64 -32
  %12900 = bitcast i16* %12899 to <16 x i16>*
  %12901 = load <16 x i16>, <16 x i16>* %12900, align 2, !tbaa !399
  %12902 = getelementptr inbounds i16, i16* %12898, i64 -16
  %12903 = bitcast i16* %12902 to <16 x i16>*
  %12904 = load <16 x i16>, <16 x i16>* %12903, align 2, !tbaa !399
  %12905 = zext i32 %.pre-phi3391 to i64
  %12906 = mul nsw i64 %12905, %318
  %12907 = add nsw i64 %12906, %291
  %12908 = getelementptr inbounds i16, i16* %blur_x841, i64 %12907
  %12909 = getelementptr inbounds i16, i16* %12908, i64 -32
  %12910 = bitcast i16* %12909 to <16 x i16>*
  %12911 = load <16 x i16>, <16 x i16>* %12910, align 2, !tbaa !399
  %12912 = getelementptr inbounds i16, i16* %12908, i64 -16
  %12913 = bitcast i16* %12912 to <16 x i16>*
  %12914 = load <16 x i16>, <16 x i16>* %12913, align 2, !tbaa !399
  %12915 = add <16 x i16> %12901, %12892
  %12916 = add <16 x i16> %12915, %12911
  %12917 = add <16 x i16> %12904, %12895
  %12918 = add <16 x i16> %12917, %12914
  %12919 = shufflevector <16 x i16> %12916, <16 x i16> %12918, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12920 = udiv <32 x i16> %12919, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12921 = shufflevector <32 x i16> %12920, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12922 = sext i32 %a365 to i64
  %12923 = add nsw i64 %12922, 5
  %12924 = mul nsw i64 %12923, %319
  %12925 = add nsw i64 %321, %12924
  %12926 = getelementptr inbounds i16, i16* %258, i64 %12925
  %12927 = getelementptr inbounds i16, i16* %12926, i64 -32
  %12928 = bitcast i16* %12927 to <16 x i16>*
  store <16 x i16> %12921, <16 x i16>* %12928, align 2, !tbaa !401
  %12929 = shufflevector <32 x i16> %12920, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12930 = getelementptr inbounds i16, i16* %12926, i64 -16
  %12931 = bitcast i16* %12930 to <16 x i16>*
  store <16 x i16> %12929, <16 x i16>* %12931, align 2, !tbaa !401
  br label %after_bb1116

"for blur_y.s0.x.x.rebased1131":                  ; preds = %"for blur_y.s0.x.x.rebased1131.preheader", %"consume blur_x1139"
  %indvars.iv3252 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1131.preheader" ], [ %indvars.iv.next3253, %"consume blur_x1139" ]
  %12932 = add nsw i64 %indvars.iv3252, %298
  %12933 = icmp slt i64 %12932, 1
  %12934 = trunc i64 %12932 to i32
  %12935 = shl nsw i32 %12934, 5
  %12936 = icmp sgt i32 %194, %12935
  %12937 = or i1 %12933, %12936
  br i1 %12937, label %"produce blur_x1137", label %"for blur_y.s0.x.x.rebased1131.consume blur_x1139_crit_edge"

"for blur_y.s0.x.x.rebased1131.consume blur_x1139_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1131"
  %.pre3410 = shl nsw i64 %12932, 5
  br label %"consume blur_x1139"

"end for blur_y.s0.x.x.rebased1132":              ; preds = %"consume blur_x1139", %after_bb1116
  br i1 %299, label %"for blur_y.s0.x.x.rebased1147.preheader", label %"end for blur_y.s0.x.x.rebased1148", !prof !386

"for blur_y.s0.x.x.rebased1147.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1132"
  %12938 = sext i32 %t1666955 to i64
  %12939 = zext i32 %.pre-phi3395 to i64
  %12940 = mul nsw i64 %12939, %322
  %12941 = sub nsw i64 %12940, %293
  %12942 = zext i32 %.pre-phi3401 to i64
  %12943 = mul nsw i64 %12942, %322
  %12944 = sub nsw i64 %12943, %293
  %12945 = zext i32 %.pre-phi3391 to i64
  %12946 = mul nsw i64 %12945, %322
  %12947 = sub nsw i64 %12946, %293
  %12948 = sext i32 %a365 to i64
  %12949 = add nsw i64 %12948, 5
  %12950 = mul nsw i64 %12949, %319
  %12951 = add nsw i64 %12950, %323
  br label %"for blur_y.s0.x.x.rebased1147"

"produce blur_x1137":                             ; preds = %"for blur_y.s0.x.x.rebased1131"
  %t7521138 = add nsw i32 %352, %12935
  %12952 = sext i32 %t7521138 to i64
  %12953 = getelementptr inbounds i16, i16* %read_input784, i64 %12952
  %12954 = getelementptr inbounds i16, i16* %12953, i64 1
  %12955 = bitcast i16* %12954 to <16 x i16>*
  %12956 = load <16 x i16>, <16 x i16>* %12955, align 2, !tbaa !396
  %12957 = getelementptr inbounds i16, i16* %12953, i64 17
  %12958 = bitcast i16* %12957 to <16 x i16>*
  %12959 = load <16 x i16>, <16 x i16>* %12958, align 2, !tbaa !396
  %12960 = getelementptr inbounds i16, i16* %12953, i64 2
  %12961 = bitcast i16* %12960 to <16 x i16>*
  %12962 = load <16 x i16>, <16 x i16>* %12961, align 2, !tbaa !396
  %12963 = getelementptr inbounds i16, i16* %12953, i64 18
  %12964 = bitcast i16* %12963 to <16 x i16>*
  %12965 = load <16 x i16>, <16 x i16>* %12964, align 2, !tbaa !396
  %12966 = bitcast i16* %12953 to <16 x i16>*
  %12967 = load <16 x i16>, <16 x i16>* %12966, align 2, !tbaa !396
  %12968 = getelementptr inbounds i16, i16* %12953, i64 16
  %12969 = bitcast i16* %12968 to <16 x i16>*
  %12970 = load <16 x i16>, <16 x i16>* %12969, align 2, !tbaa !396
  %12971 = add <16 x i16> %12962, %12956
  %12972 = add <16 x i16> %12971, %12967
  %12973 = add <16 x i16> %12965, %12959
  %12974 = add <16 x i16> %12973, %12970
  %12975 = shufflevector <16 x i16> %12972, <16 x i16> %12974, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12976 = udiv <32 x i16> %12975, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %12977 = shufflevector <32 x i16> %12976, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12978 = shl nsw i64 %12932, 5
  %12979 = add nsw i64 %12978, %12837
  %12980 = getelementptr inbounds i16, i16* %blur_x841, i64 %12979
  %12981 = bitcast i16* %12980 to <16 x i16>*
  store <16 x i16> %12977, <16 x i16>* %12981, align 2, !tbaa !399
  %12982 = shufflevector <32 x i16> %12976, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12983 = getelementptr inbounds i16, i16* %12980, i64 16
  %12984 = bitcast i16* %12983 to <16 x i16>*
  store <16 x i16> %12982, <16 x i16>* %12984, align 2, !tbaa !399
  br label %"consume blur_x1139"

"consume blur_x1139":                             ; preds = %"for blur_y.s0.x.x.rebased1131.consume blur_x1139_crit_edge", %"produce blur_x1137"
  %.pre-phi3411 = phi i64 [ %.pre3410, %"for blur_y.s0.x.x.rebased1131.consume blur_x1139_crit_edge" ], [ %12978, %"produce blur_x1137" ]
  %12985 = add nsw i64 %12840, %.pre-phi3411
  %12986 = getelementptr inbounds i16, i16* %blur_x841, i64 %12985
  %12987 = bitcast i16* %12986 to <16 x i16>*
  %12988 = load <16 x i16>, <16 x i16>* %12987, align 2, !tbaa !399
  %12989 = getelementptr inbounds i16, i16* %12986, i64 16
  %12990 = bitcast i16* %12989 to <16 x i16>*
  %12991 = load <16 x i16>, <16 x i16>* %12990, align 2, !tbaa !399
  %12992 = add nsw i64 %12843, %.pre-phi3411
  %12993 = getelementptr inbounds i16, i16* %blur_x841, i64 %12992
  %12994 = bitcast i16* %12993 to <16 x i16>*
  %12995 = load <16 x i16>, <16 x i16>* %12994, align 2, !tbaa !399
  %12996 = getelementptr inbounds i16, i16* %12993, i64 16
  %12997 = bitcast i16* %12996 to <16 x i16>*
  %12998 = load <16 x i16>, <16 x i16>* %12997, align 2, !tbaa !399
  %12999 = add nsw i64 %12846, %.pre-phi3411
  %13000 = getelementptr inbounds i16, i16* %blur_x841, i64 %12999
  %13001 = bitcast i16* %13000 to <16 x i16>*
  %13002 = load <16 x i16>, <16 x i16>* %13001, align 2, !tbaa !399
  %13003 = getelementptr inbounds i16, i16* %13000, i64 16
  %13004 = bitcast i16* %13003 to <16 x i16>*
  %13005 = load <16 x i16>, <16 x i16>* %13004, align 2, !tbaa !399
  %13006 = add <16 x i16> %12995, %12988
  %13007 = add <16 x i16> %13006, %13002
  %13008 = add <16 x i16> %12998, %12991
  %13009 = add <16 x i16> %13008, %13005
  %13010 = shufflevector <16 x i16> %13007, <16 x i16> %13009, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13011 = udiv <32 x i16> %13010, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13012 = shufflevector <32 x i16> %13011, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13013 = add nsw i64 %12850, %.pre-phi3411
  %13014 = getelementptr inbounds i16, i16* %258, i64 %13013
  %13015 = bitcast i16* %13014 to <16 x i16>*
  store <16 x i16> %13012, <16 x i16>* %13015, align 2, !tbaa !401
  %13016 = shufflevector <32 x i16> %13011, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13017 = getelementptr inbounds i16, i16* %13014, i64 16
  %13018 = bitcast i16* %13017 to <16 x i16>*
  store <16 x i16> %13016, <16 x i16>* %13018, align 2, !tbaa !401
  %indvars.iv.next3253 = add nuw nsw i64 %indvars.iv3252, 1
  %.not2539 = icmp eq i64 %indvars.iv.next3253, %515
  br i1 %.not2539, label %"end for blur_y.s0.x.x.rebased1132", label %"for blur_y.s0.x.x.rebased1131"

"for blur_y.s0.x.x.rebased1147":                  ; preds = %"for blur_y.s0.x.x.rebased1147.preheader", %"consume blur_x1158"
  %blur_y.s0.x.x.rebased1149 = phi i32 [ %13093, %"consume blur_x1158" ], [ 0, %"for blur_y.s0.x.x.rebased1147.preheader" ]
  %13019 = add nsw i32 %blur_y.s0.x.x.rebased1149, %t1582776
  %a1800 = shl nsw i32 %13019, 5
  %13020 = icmp sgt i32 %t1603, %a1800
  %blur_y.s0.x.v0.base.s1150 = select i1 %13020, i32 %a1800, i32 %t1603
  %13021 = icmp slt i32 %13019, 1
  %13022 = icmp sgt i32 %194, %a1800
  %13023 = or i1 %13021, %13022
  br i1 %13023, label %"produce blur_x1155", label %"consume blur_x1158"

"end for blur_y.s0.x.x.rebased1148":              ; preds = %"consume blur_x1158", %"end for blur_y.s0.x.x.rebased1132"
  br i1 %225, label %"produce blur_x1162", label %after_bb1159

"produce blur_x1155":                             ; preds = %"for blur_y.s0.x.x.rebased1147"
  %13024 = icmp slt i32 %blur_y.s0.x.v0.base.s1150, %194
  %blur_x.s0.x.v1.base.s1156 = select i1 %13024, i32 %blur_y.s0.x.v0.base.s1150, i32 %194
  %t7571157 = add nsw i32 %352, %blur_x.s0.x.v1.base.s1156
  %13025 = sext i32 %t7571157 to i64
  %13026 = getelementptr inbounds i16, i16* %read_input784, i64 %13025
  %13027 = getelementptr inbounds i16, i16* %13026, i64 1
  %13028 = bitcast i16* %13027 to <16 x i16>*
  %13029 = load <16 x i16>, <16 x i16>* %13028, align 2, !tbaa !396
  %13030 = getelementptr inbounds i16, i16* %13026, i64 17
  %13031 = bitcast i16* %13030 to <16 x i16>*
  %13032 = load <16 x i16>, <16 x i16>* %13031, align 2, !tbaa !396
  %13033 = getelementptr inbounds i16, i16* %13026, i64 2
  %13034 = bitcast i16* %13033 to <16 x i16>*
  %13035 = load <16 x i16>, <16 x i16>* %13034, align 2, !tbaa !396
  %13036 = getelementptr inbounds i16, i16* %13026, i64 18
  %13037 = bitcast i16* %13036 to <16 x i16>*
  %13038 = load <16 x i16>, <16 x i16>* %13037, align 2, !tbaa !396
  %13039 = bitcast i16* %13026 to <16 x i16>*
  %13040 = load <16 x i16>, <16 x i16>* %13039, align 2, !tbaa !396
  %13041 = getelementptr inbounds i16, i16* %13026, i64 16
  %13042 = bitcast i16* %13041 to <16 x i16>*
  %13043 = load <16 x i16>, <16 x i16>* %13042, align 2, !tbaa !396
  %13044 = add <16 x i16> %13035, %13029
  %13045 = add <16 x i16> %13044, %13040
  %13046 = add <16 x i16> %13038, %13032
  %13047 = add <16 x i16> %13046, %13043
  %13048 = shufflevector <16 x i16> %13045, <16 x i16> %13047, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13049 = udiv <32 x i16> %13048, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13050 = shufflevector <32 x i16> %13049, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13051 = sext i32 %blur_x.s0.x.v1.base.s1156 to i64
  %13052 = add nsw i64 %13051, %12938
  %13053 = getelementptr inbounds i16, i16* %blur_x841, i64 %13052
  %13054 = bitcast i16* %13053 to <16 x i16>*
  store <16 x i16> %13050, <16 x i16>* %13054, align 2, !tbaa !399
  %13055 = shufflevector <32 x i16> %13049, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13056 = getelementptr inbounds i16, i16* %13053, i64 16
  %13057 = bitcast i16* %13056 to <16 x i16>*
  store <16 x i16> %13055, <16 x i16>* %13057, align 2, !tbaa !399
  br label %"consume blur_x1158"

"consume blur_x1158":                             ; preds = %"for blur_y.s0.x.x.rebased1147", %"produce blur_x1155"
  %13058 = sext i32 %blur_y.s0.x.v0.base.s1150 to i64
  %13059 = add nsw i64 %12941, %13058
  %13060 = getelementptr inbounds i16, i16* %blur_x841, i64 %13059
  %13061 = bitcast i16* %13060 to <16 x i16>*
  %13062 = load <16 x i16>, <16 x i16>* %13061, align 2, !tbaa !399
  %13063 = getelementptr inbounds i16, i16* %13060, i64 16
  %13064 = bitcast i16* %13063 to <16 x i16>*
  %13065 = load <16 x i16>, <16 x i16>* %13064, align 2, !tbaa !399
  %13066 = add nsw i64 %12944, %13058
  %13067 = getelementptr inbounds i16, i16* %blur_x841, i64 %13066
  %13068 = bitcast i16* %13067 to <16 x i16>*
  %13069 = load <16 x i16>, <16 x i16>* %13068, align 2, !tbaa !399
  %13070 = getelementptr inbounds i16, i16* %13067, i64 16
  %13071 = bitcast i16* %13070 to <16 x i16>*
  %13072 = load <16 x i16>, <16 x i16>* %13071, align 2, !tbaa !399
  %13073 = add nsw i64 %12947, %13058
  %13074 = getelementptr inbounds i16, i16* %blur_x841, i64 %13073
  %13075 = bitcast i16* %13074 to <16 x i16>*
  %13076 = load <16 x i16>, <16 x i16>* %13075, align 2, !tbaa !399
  %13077 = getelementptr inbounds i16, i16* %13074, i64 16
  %13078 = bitcast i16* %13077 to <16 x i16>*
  %13079 = load <16 x i16>, <16 x i16>* %13078, align 2, !tbaa !399
  %13080 = add <16 x i16> %13069, %13062
  %13081 = add <16 x i16> %13080, %13076
  %13082 = add <16 x i16> %13072, %13065
  %13083 = add <16 x i16> %13082, %13079
  %13084 = shufflevector <16 x i16> %13081, <16 x i16> %13083, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13085 = udiv <32 x i16> %13084, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13086 = shufflevector <32 x i16> %13085, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13087 = add nsw i64 %12951, %13058
  %13088 = getelementptr inbounds i16, i16* %258, i64 %13087
  %13089 = bitcast i16* %13088 to <16 x i16>*
  store <16 x i16> %13086, <16 x i16>* %13089, align 2, !tbaa !401
  %13090 = shufflevector <32 x i16> %13085, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13091 = getelementptr inbounds i16, i16* %13088, i64 16
  %13092 = bitcast i16* %13091 to <16 x i16>*
  store <16 x i16> %13090, <16 x i16>* %13092, align 2, !tbaa !401
  %13093 = add nuw nsw i32 %blur_y.s0.x.x.rebased1149, 1
  %.not2538 = icmp eq i32 %13093, %t1639860
  br i1 %.not2538, label %"end for blur_y.s0.x.x.rebased1148", label %"for blur_y.s0.x.x.rebased1147"

after_bb1159:                                     ; preds = %"end for blur_y.s0.x.x.rebased1148", %"produce blur_x1162"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1174.preheader", label %"end for blur_y.s0.x.x.rebased1175", !prof !386

"for blur_y.s0.x.x.rebased1174.preheader":        ; preds = %after_bb1159
  %13094 = sext i32 %t1638848 to i64
  %13095 = zext i32 %.pre-phi3401 to i64
  %13096 = mul nsw i64 %13095, %322
  %13097 = sub nsw i64 %13096, %293
  %13098 = zext i32 %.pre-phi3387 to i64
  %13099 = mul nsw i64 %13098, %322
  %13100 = sub nsw i64 %13099, %293
  %13101 = zext i32 %.pre-phi3395 to i64
  %13102 = mul nsw i64 %13101, %322
  %13103 = sub nsw i64 %13102, %293
  %13104 = sext i32 %a365 to i64
  %13105 = add nsw i64 %13104, 6
  %13106 = mul nsw i64 %13105, %319
  %13107 = add nsw i64 %13106, %323
  br label %"for blur_y.s0.x.x.rebased1174"

"produce blur_x1162":                             ; preds = %"end for blur_y.s0.x.x.rebased1148"
  %13108 = getelementptr inbounds i16, i16* %read_input784, i64 %356
  %13109 = getelementptr inbounds i16, i16* %13108, i64 -31
  %13110 = bitcast i16* %13109 to <16 x i16>*
  %13111 = load <16 x i16>, <16 x i16>* %13110, align 2, !tbaa !396
  %13112 = getelementptr inbounds i16, i16* %13108, i64 -15
  %13113 = bitcast i16* %13112 to <16 x i16>*
  %13114 = load <16 x i16>, <16 x i16>* %13113, align 2, !tbaa !396
  %13115 = getelementptr inbounds i16, i16* %13108, i64 -30
  %13116 = bitcast i16* %13115 to <16 x i16>*
  %13117 = load <16 x i16>, <16 x i16>* %13116, align 2, !tbaa !396
  %13118 = getelementptr inbounds i16, i16* %13108, i64 -14
  %13119 = bitcast i16* %13118 to <16 x i16>*
  %13120 = load <16 x i16>, <16 x i16>* %13119, align 2, !tbaa !396
  %13121 = getelementptr inbounds i16, i16* %13108, i64 -32
  %13122 = bitcast i16* %13121 to <16 x i16>*
  %13123 = load <16 x i16>, <16 x i16>* %13122, align 2, !tbaa !396
  %13124 = getelementptr inbounds i16, i16* %13108, i64 -16
  %13125 = bitcast i16* %13124 to <16 x i16>*
  %13126 = load <16 x i16>, <16 x i16>* %13125, align 2, !tbaa !396
  %13127 = add <16 x i16> %13117, %13111
  %13128 = add <16 x i16> %13127, %13123
  %13129 = add <16 x i16> %13120, %13114
  %13130 = add <16 x i16> %13129, %13126
  %13131 = shufflevector <16 x i16> %13128, <16 x i16> %13130, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13132 = udiv <32 x i16> %13131, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13133 = shufflevector <32 x i16> %13132, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13134 = zext i32 %.pre-phi3387 to i64
  %13135 = mul nsw i64 %294, %13134
  %13136 = add nsw i64 %296, %13135
  %13137 = getelementptr inbounds i16, i16* %blur_x841, i64 %13136
  %13138 = getelementptr inbounds i16, i16* %13137, i64 -32
  %13139 = bitcast i16* %13138 to <16 x i16>*
  store <16 x i16> %13133, <16 x i16>* %13139, align 2, !tbaa !399
  %13140 = shufflevector <32 x i16> %13132, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13141 = getelementptr inbounds i16, i16* %13137, i64 -16
  %13142 = bitcast i16* %13141 to <16 x i16>*
  store <16 x i16> %13140, <16 x i16>* %13142, align 2, !tbaa !399
  %13143 = zext i32 %.pre-phi3401 to i64
  %13144 = mul nsw i64 %13143, %318
  %13145 = add nsw i64 %13144, %291
  %13146 = getelementptr inbounds i16, i16* %blur_x841, i64 %13145
  %13147 = getelementptr inbounds i16, i16* %13146, i64 -32
  %13148 = bitcast i16* %13147 to <16 x i16>*
  %13149 = load <16 x i16>, <16 x i16>* %13148, align 2, !tbaa !399
  %13150 = getelementptr inbounds i16, i16* %13146, i64 -16
  %13151 = bitcast i16* %13150 to <16 x i16>*
  %13152 = load <16 x i16>, <16 x i16>* %13151, align 2, !tbaa !399
  %13153 = mul nsw i64 %13134, %318
  %13154 = add nsw i64 %13153, %291
  %13155 = getelementptr inbounds i16, i16* %blur_x841, i64 %13154
  %13156 = getelementptr inbounds i16, i16* %13155, i64 -32
  %13157 = bitcast i16* %13156 to <16 x i16>*
  %13158 = load <16 x i16>, <16 x i16>* %13157, align 2, !tbaa !399
  %13159 = getelementptr inbounds i16, i16* %13155, i64 -16
  %13160 = bitcast i16* %13159 to <16 x i16>*
  %13161 = load <16 x i16>, <16 x i16>* %13160, align 2, !tbaa !399
  %13162 = zext i32 %.pre-phi3395 to i64
  %13163 = mul nsw i64 %13162, %318
  %13164 = add nsw i64 %13163, %291
  %13165 = getelementptr inbounds i16, i16* %blur_x841, i64 %13164
  %13166 = getelementptr inbounds i16, i16* %13165, i64 -32
  %13167 = bitcast i16* %13166 to <16 x i16>*
  %13168 = load <16 x i16>, <16 x i16>* %13167, align 2, !tbaa !399
  %13169 = getelementptr inbounds i16, i16* %13165, i64 -16
  %13170 = bitcast i16* %13169 to <16 x i16>*
  %13171 = load <16 x i16>, <16 x i16>* %13170, align 2, !tbaa !399
  %13172 = add <16 x i16> %13158, %13149
  %13173 = add <16 x i16> %13172, %13168
  %13174 = add <16 x i16> %13161, %13152
  %13175 = add <16 x i16> %13174, %13171
  %13176 = shufflevector <16 x i16> %13173, <16 x i16> %13175, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13177 = udiv <32 x i16> %13176, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13178 = shufflevector <32 x i16> %13177, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13179 = sext i32 %a365 to i64
  %13180 = add nsw i64 %13179, 6
  %13181 = mul nsw i64 %13180, %319
  %13182 = add nsw i64 %321, %13181
  %13183 = getelementptr inbounds i16, i16* %258, i64 %13182
  %13184 = getelementptr inbounds i16, i16* %13183, i64 -32
  %13185 = bitcast i16* %13184 to <16 x i16>*
  store <16 x i16> %13178, <16 x i16>* %13185, align 2, !tbaa !401
  %13186 = shufflevector <32 x i16> %13177, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13187 = getelementptr inbounds i16, i16* %13183, i64 -16
  %13188 = bitcast i16* %13187 to <16 x i16>*
  store <16 x i16> %13186, <16 x i16>* %13188, align 2, !tbaa !401
  br label %after_bb1159

"for blur_y.s0.x.x.rebased1174":                  ; preds = %"for blur_y.s0.x.x.rebased1174.preheader", %"consume blur_x1182"
  %indvars.iv3254 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1174.preheader" ], [ %indvars.iv.next3255, %"consume blur_x1182" ]
  %13189 = add nsw i64 %indvars.iv3254, %298
  %13190 = icmp slt i64 %13189, 1
  %13191 = trunc i64 %13189 to i32
  %13192 = shl nsw i32 %13191, 5
  %13193 = icmp sgt i32 %194, %13192
  %13194 = or i1 %13190, %13193
  br i1 %13194, label %"produce blur_x1180", label %"for blur_y.s0.x.x.rebased1174.consume blur_x1182_crit_edge"

"for blur_y.s0.x.x.rebased1174.consume blur_x1182_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1174"
  %.pre3412 = shl nsw i64 %13189, 5
  br label %"consume blur_x1182"

"end for blur_y.s0.x.x.rebased1175":              ; preds = %"consume blur_x1182", %after_bb1159
  br i1 %299, label %"for blur_y.s0.x.x.rebased1190.preheader", label %"end for blur_y.s0.x.x.rebased1191", !prof !386

"for blur_y.s0.x.x.rebased1190.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1175"
  %13195 = sext i32 %t1638848 to i64
  %13196 = zext i32 %.pre-phi3401 to i64
  %13197 = mul nsw i64 %13196, %322
  %13198 = sub nsw i64 %13197, %293
  %13199 = zext i32 %.pre-phi3387 to i64
  %13200 = mul nsw i64 %13199, %322
  %13201 = sub nsw i64 %13200, %293
  %13202 = zext i32 %.pre-phi3395 to i64
  %13203 = mul nsw i64 %13202, %322
  %13204 = sub nsw i64 %13203, %293
  %13205 = sext i32 %a365 to i64
  %13206 = add nsw i64 %13205, 6
  %13207 = mul nsw i64 %13206, %319
  %13208 = add nsw i64 %13207, %323
  br label %"for blur_y.s0.x.x.rebased1190"

"produce blur_x1180":                             ; preds = %"for blur_y.s0.x.x.rebased1174"
  %t7681181 = add nsw i32 %358, %13192
  %13209 = sext i32 %t7681181 to i64
  %13210 = getelementptr inbounds i16, i16* %read_input784, i64 %13209
  %13211 = getelementptr inbounds i16, i16* %13210, i64 1
  %13212 = bitcast i16* %13211 to <16 x i16>*
  %13213 = load <16 x i16>, <16 x i16>* %13212, align 2, !tbaa !396
  %13214 = getelementptr inbounds i16, i16* %13210, i64 17
  %13215 = bitcast i16* %13214 to <16 x i16>*
  %13216 = load <16 x i16>, <16 x i16>* %13215, align 2, !tbaa !396
  %13217 = getelementptr inbounds i16, i16* %13210, i64 2
  %13218 = bitcast i16* %13217 to <16 x i16>*
  %13219 = load <16 x i16>, <16 x i16>* %13218, align 2, !tbaa !396
  %13220 = getelementptr inbounds i16, i16* %13210, i64 18
  %13221 = bitcast i16* %13220 to <16 x i16>*
  %13222 = load <16 x i16>, <16 x i16>* %13221, align 2, !tbaa !396
  %13223 = bitcast i16* %13210 to <16 x i16>*
  %13224 = load <16 x i16>, <16 x i16>* %13223, align 2, !tbaa !396
  %13225 = getelementptr inbounds i16, i16* %13210, i64 16
  %13226 = bitcast i16* %13225 to <16 x i16>*
  %13227 = load <16 x i16>, <16 x i16>* %13226, align 2, !tbaa !396
  %13228 = add <16 x i16> %13219, %13213
  %13229 = add <16 x i16> %13228, %13224
  %13230 = add <16 x i16> %13222, %13216
  %13231 = add <16 x i16> %13230, %13227
  %13232 = shufflevector <16 x i16> %13229, <16 x i16> %13231, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13233 = udiv <32 x i16> %13232, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13234 = shufflevector <32 x i16> %13233, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13235 = shl nsw i64 %13189, 5
  %13236 = add nsw i64 %13235, %13094
  %13237 = getelementptr inbounds i16, i16* %blur_x841, i64 %13236
  %13238 = bitcast i16* %13237 to <16 x i16>*
  store <16 x i16> %13234, <16 x i16>* %13238, align 2, !tbaa !399
  %13239 = shufflevector <32 x i16> %13233, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13240 = getelementptr inbounds i16, i16* %13237, i64 16
  %13241 = bitcast i16* %13240 to <16 x i16>*
  store <16 x i16> %13239, <16 x i16>* %13241, align 2, !tbaa !399
  br label %"consume blur_x1182"

"consume blur_x1182":                             ; preds = %"for blur_y.s0.x.x.rebased1174.consume blur_x1182_crit_edge", %"produce blur_x1180"
  %.pre-phi3413 = phi i64 [ %.pre3412, %"for blur_y.s0.x.x.rebased1174.consume blur_x1182_crit_edge" ], [ %13235, %"produce blur_x1180" ]
  %13242 = add nsw i64 %13097, %.pre-phi3413
  %13243 = getelementptr inbounds i16, i16* %blur_x841, i64 %13242
  %13244 = bitcast i16* %13243 to <16 x i16>*
  %13245 = load <16 x i16>, <16 x i16>* %13244, align 2, !tbaa !399
  %13246 = getelementptr inbounds i16, i16* %13243, i64 16
  %13247 = bitcast i16* %13246 to <16 x i16>*
  %13248 = load <16 x i16>, <16 x i16>* %13247, align 2, !tbaa !399
  %13249 = add nsw i64 %13100, %.pre-phi3413
  %13250 = getelementptr inbounds i16, i16* %blur_x841, i64 %13249
  %13251 = bitcast i16* %13250 to <16 x i16>*
  %13252 = load <16 x i16>, <16 x i16>* %13251, align 2, !tbaa !399
  %13253 = getelementptr inbounds i16, i16* %13250, i64 16
  %13254 = bitcast i16* %13253 to <16 x i16>*
  %13255 = load <16 x i16>, <16 x i16>* %13254, align 2, !tbaa !399
  %13256 = add nsw i64 %13103, %.pre-phi3413
  %13257 = getelementptr inbounds i16, i16* %blur_x841, i64 %13256
  %13258 = bitcast i16* %13257 to <16 x i16>*
  %13259 = load <16 x i16>, <16 x i16>* %13258, align 2, !tbaa !399
  %13260 = getelementptr inbounds i16, i16* %13257, i64 16
  %13261 = bitcast i16* %13260 to <16 x i16>*
  %13262 = load <16 x i16>, <16 x i16>* %13261, align 2, !tbaa !399
  %13263 = add <16 x i16> %13252, %13245
  %13264 = add <16 x i16> %13263, %13259
  %13265 = add <16 x i16> %13255, %13248
  %13266 = add <16 x i16> %13265, %13262
  %13267 = shufflevector <16 x i16> %13264, <16 x i16> %13266, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13268 = udiv <32 x i16> %13267, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13269 = shufflevector <32 x i16> %13268, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13270 = add nsw i64 %13107, %.pre-phi3413
  %13271 = getelementptr inbounds i16, i16* %258, i64 %13270
  %13272 = bitcast i16* %13271 to <16 x i16>*
  store <16 x i16> %13269, <16 x i16>* %13272, align 2, !tbaa !401
  %13273 = shufflevector <32 x i16> %13268, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13274 = getelementptr inbounds i16, i16* %13271, i64 16
  %13275 = bitcast i16* %13274 to <16 x i16>*
  store <16 x i16> %13273, <16 x i16>* %13275, align 2, !tbaa !401
  %indvars.iv.next3255 = add nuw nsw i64 %indvars.iv3254, 1
  %.not2535 = icmp eq i64 %indvars.iv.next3255, %515
  br i1 %.not2535, label %"end for blur_y.s0.x.x.rebased1175", label %"for blur_y.s0.x.x.rebased1174"

"for blur_y.s0.x.x.rebased1190":                  ; preds = %"for blur_y.s0.x.x.rebased1190.preheader", %"consume blur_x1201"
  %blur_y.s0.x.x.rebased1192 = phi i32 [ %13350, %"consume blur_x1201" ], [ 0, %"for blur_y.s0.x.x.rebased1190.preheader" ]
  %13276 = add nsw i32 %blur_y.s0.x.x.rebased1192, %t1582776
  %a1957 = shl nsw i32 %13276, 5
  %13277 = icmp sgt i32 %t1603, %a1957
  %blur_y.s0.x.v0.base.s1193 = select i1 %13277, i32 %a1957, i32 %t1603
  %13278 = icmp slt i32 %13276, 1
  %13279 = icmp sgt i32 %194, %a1957
  %13280 = or i1 %13278, %13279
  br i1 %13280, label %"produce blur_x1198", label %"consume blur_x1201"

"end for blur_y.s0.x.x.rebased1191":              ; preds = %"consume blur_x1201", %"end for blur_y.s0.x.x.rebased1175"
  br i1 %225, label %"produce blur_x1205", label %after_bb1202

"produce blur_x1198":                             ; preds = %"for blur_y.s0.x.x.rebased1190"
  %13281 = icmp slt i32 %blur_y.s0.x.v0.base.s1193, %194
  %blur_x.s0.x.v1.base.s1199 = select i1 %13281, i32 %blur_y.s0.x.v0.base.s1193, i32 %194
  %t7731200 = add nsw i32 %358, %blur_x.s0.x.v1.base.s1199
  %13282 = sext i32 %t7731200 to i64
  %13283 = getelementptr inbounds i16, i16* %read_input784, i64 %13282
  %13284 = getelementptr inbounds i16, i16* %13283, i64 1
  %13285 = bitcast i16* %13284 to <16 x i16>*
  %13286 = load <16 x i16>, <16 x i16>* %13285, align 2, !tbaa !396
  %13287 = getelementptr inbounds i16, i16* %13283, i64 17
  %13288 = bitcast i16* %13287 to <16 x i16>*
  %13289 = load <16 x i16>, <16 x i16>* %13288, align 2, !tbaa !396
  %13290 = getelementptr inbounds i16, i16* %13283, i64 2
  %13291 = bitcast i16* %13290 to <16 x i16>*
  %13292 = load <16 x i16>, <16 x i16>* %13291, align 2, !tbaa !396
  %13293 = getelementptr inbounds i16, i16* %13283, i64 18
  %13294 = bitcast i16* %13293 to <16 x i16>*
  %13295 = load <16 x i16>, <16 x i16>* %13294, align 2, !tbaa !396
  %13296 = bitcast i16* %13283 to <16 x i16>*
  %13297 = load <16 x i16>, <16 x i16>* %13296, align 2, !tbaa !396
  %13298 = getelementptr inbounds i16, i16* %13283, i64 16
  %13299 = bitcast i16* %13298 to <16 x i16>*
  %13300 = load <16 x i16>, <16 x i16>* %13299, align 2, !tbaa !396
  %13301 = add <16 x i16> %13292, %13286
  %13302 = add <16 x i16> %13301, %13297
  %13303 = add <16 x i16> %13295, %13289
  %13304 = add <16 x i16> %13303, %13300
  %13305 = shufflevector <16 x i16> %13302, <16 x i16> %13304, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13306 = udiv <32 x i16> %13305, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13307 = shufflevector <32 x i16> %13306, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13308 = sext i32 %blur_x.s0.x.v1.base.s1199 to i64
  %13309 = add nsw i64 %13308, %13195
  %13310 = getelementptr inbounds i16, i16* %blur_x841, i64 %13309
  %13311 = bitcast i16* %13310 to <16 x i16>*
  store <16 x i16> %13307, <16 x i16>* %13311, align 2, !tbaa !399
  %13312 = shufflevector <32 x i16> %13306, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13313 = getelementptr inbounds i16, i16* %13310, i64 16
  %13314 = bitcast i16* %13313 to <16 x i16>*
  store <16 x i16> %13312, <16 x i16>* %13314, align 2, !tbaa !399
  br label %"consume blur_x1201"

"consume blur_x1201":                             ; preds = %"for blur_y.s0.x.x.rebased1190", %"produce blur_x1198"
  %13315 = sext i32 %blur_y.s0.x.v0.base.s1193 to i64
  %13316 = add nsw i64 %13198, %13315
  %13317 = getelementptr inbounds i16, i16* %blur_x841, i64 %13316
  %13318 = bitcast i16* %13317 to <16 x i16>*
  %13319 = load <16 x i16>, <16 x i16>* %13318, align 2, !tbaa !399
  %13320 = getelementptr inbounds i16, i16* %13317, i64 16
  %13321 = bitcast i16* %13320 to <16 x i16>*
  %13322 = load <16 x i16>, <16 x i16>* %13321, align 2, !tbaa !399
  %13323 = add nsw i64 %13201, %13315
  %13324 = getelementptr inbounds i16, i16* %blur_x841, i64 %13323
  %13325 = bitcast i16* %13324 to <16 x i16>*
  %13326 = load <16 x i16>, <16 x i16>* %13325, align 2, !tbaa !399
  %13327 = getelementptr inbounds i16, i16* %13324, i64 16
  %13328 = bitcast i16* %13327 to <16 x i16>*
  %13329 = load <16 x i16>, <16 x i16>* %13328, align 2, !tbaa !399
  %13330 = add nsw i64 %13204, %13315
  %13331 = getelementptr inbounds i16, i16* %blur_x841, i64 %13330
  %13332 = bitcast i16* %13331 to <16 x i16>*
  %13333 = load <16 x i16>, <16 x i16>* %13332, align 2, !tbaa !399
  %13334 = getelementptr inbounds i16, i16* %13331, i64 16
  %13335 = bitcast i16* %13334 to <16 x i16>*
  %13336 = load <16 x i16>, <16 x i16>* %13335, align 2, !tbaa !399
  %13337 = add <16 x i16> %13326, %13319
  %13338 = add <16 x i16> %13337, %13333
  %13339 = add <16 x i16> %13329, %13322
  %13340 = add <16 x i16> %13339, %13336
  %13341 = shufflevector <16 x i16> %13338, <16 x i16> %13340, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13342 = udiv <32 x i16> %13341, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13343 = shufflevector <32 x i16> %13342, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13344 = add nsw i64 %13208, %13315
  %13345 = getelementptr inbounds i16, i16* %258, i64 %13344
  %13346 = bitcast i16* %13345 to <16 x i16>*
  store <16 x i16> %13343, <16 x i16>* %13346, align 2, !tbaa !401
  %13347 = shufflevector <32 x i16> %13342, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13348 = getelementptr inbounds i16, i16* %13345, i64 16
  %13349 = bitcast i16* %13348 to <16 x i16>*
  store <16 x i16> %13347, <16 x i16>* %13349, align 2, !tbaa !401
  %13350 = add nuw nsw i32 %blur_y.s0.x.x.rebased1192, 1
  %.not2534 = icmp eq i32 %13350, %t1639860
  br i1 %.not2534, label %"end for blur_y.s0.x.x.rebased1191", label %"for blur_y.s0.x.x.rebased1190"

after_bb1202:                                     ; preds = %"end for blur_y.s0.x.x.rebased1191", %"produce blur_x1205"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1217.preheader", label %"end for blur_y.s0.x.x.rebased1218", !prof !386

"for blur_y.s0.x.x.rebased1217.preheader":        ; preds = %after_bb1202
  %13351 = sext i32 %t1644876 to i64
  %13352 = zext i32 %.pre-phi3387 to i64
  %13353 = mul nsw i64 %13352, %322
  %13354 = sub nsw i64 %13353, %293
  %13355 = zext i32 %.pre-phi3391 to i64
  %13356 = mul nsw i64 %13355, %322
  %13357 = sub nsw i64 %13356, %293
  %13358 = zext i32 %.pre-phi3401 to i64
  %13359 = mul nsw i64 %13358, %322
  %13360 = sub nsw i64 %13359, %293
  %13361 = sext i32 %a365 to i64
  %13362 = add nsw i64 %13361, 7
  %13363 = mul nsw i64 %13362, %319
  %13364 = add nsw i64 %13363, %323
  br label %"for blur_y.s0.x.x.rebased1217"

"produce blur_x1205":                             ; preds = %"end for blur_y.s0.x.x.rebased1191"
  %13365 = getelementptr inbounds i16, i16* %read_input784, i64 %362
  %13366 = getelementptr inbounds i16, i16* %13365, i64 -31
  %13367 = bitcast i16* %13366 to <16 x i16>*
  %13368 = load <16 x i16>, <16 x i16>* %13367, align 2, !tbaa !396
  %13369 = getelementptr inbounds i16, i16* %13365, i64 -15
  %13370 = bitcast i16* %13369 to <16 x i16>*
  %13371 = load <16 x i16>, <16 x i16>* %13370, align 2, !tbaa !396
  %13372 = getelementptr inbounds i16, i16* %13365, i64 -30
  %13373 = bitcast i16* %13372 to <16 x i16>*
  %13374 = load <16 x i16>, <16 x i16>* %13373, align 2, !tbaa !396
  %13375 = getelementptr inbounds i16, i16* %13365, i64 -14
  %13376 = bitcast i16* %13375 to <16 x i16>*
  %13377 = load <16 x i16>, <16 x i16>* %13376, align 2, !tbaa !396
  %13378 = getelementptr inbounds i16, i16* %13365, i64 -32
  %13379 = bitcast i16* %13378 to <16 x i16>*
  %13380 = load <16 x i16>, <16 x i16>* %13379, align 2, !tbaa !396
  %13381 = getelementptr inbounds i16, i16* %13365, i64 -16
  %13382 = bitcast i16* %13381 to <16 x i16>*
  %13383 = load <16 x i16>, <16 x i16>* %13382, align 2, !tbaa !396
  %13384 = add <16 x i16> %13374, %13368
  %13385 = add <16 x i16> %13384, %13380
  %13386 = add <16 x i16> %13377, %13371
  %13387 = add <16 x i16> %13386, %13383
  %13388 = shufflevector <16 x i16> %13385, <16 x i16> %13387, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13389 = udiv <32 x i16> %13388, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13390 = shufflevector <32 x i16> %13389, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13391 = zext i32 %.pre-phi3391 to i64
  %13392 = mul nsw i64 %294, %13391
  %13393 = add nsw i64 %296, %13392
  %13394 = getelementptr inbounds i16, i16* %blur_x841, i64 %13393
  %13395 = getelementptr inbounds i16, i16* %13394, i64 -32
  %13396 = bitcast i16* %13395 to <16 x i16>*
  store <16 x i16> %13390, <16 x i16>* %13396, align 2, !tbaa !399
  %13397 = shufflevector <32 x i16> %13389, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13398 = getelementptr inbounds i16, i16* %13394, i64 -16
  %13399 = bitcast i16* %13398 to <16 x i16>*
  store <16 x i16> %13397, <16 x i16>* %13399, align 2, !tbaa !399
  %13400 = zext i32 %.pre-phi3387 to i64
  %13401 = mul nsw i64 %13400, %318
  %13402 = add nsw i64 %13401, %291
  %13403 = getelementptr inbounds i16, i16* %blur_x841, i64 %13402
  %13404 = getelementptr inbounds i16, i16* %13403, i64 -32
  %13405 = bitcast i16* %13404 to <16 x i16>*
  %13406 = load <16 x i16>, <16 x i16>* %13405, align 2, !tbaa !399
  %13407 = getelementptr inbounds i16, i16* %13403, i64 -16
  %13408 = bitcast i16* %13407 to <16 x i16>*
  %13409 = load <16 x i16>, <16 x i16>* %13408, align 2, !tbaa !399
  %13410 = mul nsw i64 %13391, %318
  %13411 = add nsw i64 %13410, %291
  %13412 = getelementptr inbounds i16, i16* %blur_x841, i64 %13411
  %13413 = getelementptr inbounds i16, i16* %13412, i64 -32
  %13414 = bitcast i16* %13413 to <16 x i16>*
  %13415 = load <16 x i16>, <16 x i16>* %13414, align 2, !tbaa !399
  %13416 = getelementptr inbounds i16, i16* %13412, i64 -16
  %13417 = bitcast i16* %13416 to <16 x i16>*
  %13418 = load <16 x i16>, <16 x i16>* %13417, align 2, !tbaa !399
  %13419 = zext i32 %.pre-phi3401 to i64
  %13420 = mul nsw i64 %13419, %318
  %13421 = add nsw i64 %13420, %291
  %13422 = getelementptr inbounds i16, i16* %blur_x841, i64 %13421
  %13423 = getelementptr inbounds i16, i16* %13422, i64 -32
  %13424 = bitcast i16* %13423 to <16 x i16>*
  %13425 = load <16 x i16>, <16 x i16>* %13424, align 2, !tbaa !399
  %13426 = getelementptr inbounds i16, i16* %13422, i64 -16
  %13427 = bitcast i16* %13426 to <16 x i16>*
  %13428 = load <16 x i16>, <16 x i16>* %13427, align 2, !tbaa !399
  %13429 = add <16 x i16> %13415, %13406
  %13430 = add <16 x i16> %13429, %13425
  %13431 = add <16 x i16> %13418, %13409
  %13432 = add <16 x i16> %13431, %13428
  %13433 = shufflevector <16 x i16> %13430, <16 x i16> %13432, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13434 = udiv <32 x i16> %13433, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13435 = shufflevector <32 x i16> %13434, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13436 = sext i32 %a365 to i64
  %13437 = add nsw i64 %13436, 7
  %13438 = mul nsw i64 %13437, %319
  %13439 = add nsw i64 %321, %13438
  %13440 = getelementptr inbounds i16, i16* %258, i64 %13439
  %13441 = getelementptr inbounds i16, i16* %13440, i64 -32
  %13442 = bitcast i16* %13441 to <16 x i16>*
  store <16 x i16> %13435, <16 x i16>* %13442, align 2, !tbaa !401
  %13443 = shufflevector <32 x i16> %13434, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13444 = getelementptr inbounds i16, i16* %13440, i64 -16
  %13445 = bitcast i16* %13444 to <16 x i16>*
  store <16 x i16> %13443, <16 x i16>* %13445, align 2, !tbaa !401
  br label %after_bb1202

"for blur_y.s0.x.x.rebased1217":                  ; preds = %"for blur_y.s0.x.x.rebased1217.preheader", %"consume blur_x1225"
  %indvars.iv3256 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1217.preheader" ], [ %indvars.iv.next3257, %"consume blur_x1225" ]
  %13446 = add nsw i64 %indvars.iv3256, %298
  %13447 = icmp slt i64 %13446, 1
  %13448 = trunc i64 %13446 to i32
  %13449 = shl nsw i32 %13448, 5
  %13450 = icmp sgt i32 %194, %13449
  %13451 = or i1 %13447, %13450
  br i1 %13451, label %"produce blur_x1223", label %"for blur_y.s0.x.x.rebased1217.consume blur_x1225_crit_edge"

"for blur_y.s0.x.x.rebased1217.consume blur_x1225_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1217"
  %.pre3414 = shl nsw i64 %13446, 5
  br label %"consume blur_x1225"

"end for blur_y.s0.x.x.rebased1218":              ; preds = %"consume blur_x1225", %after_bb1202
  br i1 %299, label %"for blur_y.s0.x.x.rebased1233.preheader", label %"end for blur_y.s0.x.x.rebased1234", !prof !386

"for blur_y.s0.x.x.rebased1233.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1218"
  %13452 = sext i32 %t1644876 to i64
  %13453 = zext i32 %.pre-phi3387 to i64
  %13454 = mul nsw i64 %13453, %322
  %13455 = sub nsw i64 %13454, %293
  %13456 = zext i32 %.pre-phi3391 to i64
  %13457 = mul nsw i64 %13456, %322
  %13458 = sub nsw i64 %13457, %293
  %13459 = zext i32 %.pre-phi3401 to i64
  %13460 = mul nsw i64 %13459, %322
  %13461 = sub nsw i64 %13460, %293
  %13462 = sext i32 %a365 to i64
  %13463 = add nsw i64 %13462, 7
  %13464 = mul nsw i64 %13463, %319
  %13465 = add nsw i64 %13464, %323
  br label %"for blur_y.s0.x.x.rebased1233"

"produce blur_x1223":                             ; preds = %"for blur_y.s0.x.x.rebased1217"
  %t7841224 = add nsw i32 %364, %13449
  %13466 = sext i32 %t7841224 to i64
  %13467 = getelementptr inbounds i16, i16* %read_input784, i64 %13466
  %13468 = getelementptr inbounds i16, i16* %13467, i64 1
  %13469 = bitcast i16* %13468 to <16 x i16>*
  %13470 = load <16 x i16>, <16 x i16>* %13469, align 2, !tbaa !396
  %13471 = getelementptr inbounds i16, i16* %13467, i64 17
  %13472 = bitcast i16* %13471 to <16 x i16>*
  %13473 = load <16 x i16>, <16 x i16>* %13472, align 2, !tbaa !396
  %13474 = getelementptr inbounds i16, i16* %13467, i64 2
  %13475 = bitcast i16* %13474 to <16 x i16>*
  %13476 = load <16 x i16>, <16 x i16>* %13475, align 2, !tbaa !396
  %13477 = getelementptr inbounds i16, i16* %13467, i64 18
  %13478 = bitcast i16* %13477 to <16 x i16>*
  %13479 = load <16 x i16>, <16 x i16>* %13478, align 2, !tbaa !396
  %13480 = bitcast i16* %13467 to <16 x i16>*
  %13481 = load <16 x i16>, <16 x i16>* %13480, align 2, !tbaa !396
  %13482 = getelementptr inbounds i16, i16* %13467, i64 16
  %13483 = bitcast i16* %13482 to <16 x i16>*
  %13484 = load <16 x i16>, <16 x i16>* %13483, align 2, !tbaa !396
  %13485 = add <16 x i16> %13476, %13470
  %13486 = add <16 x i16> %13485, %13481
  %13487 = add <16 x i16> %13479, %13473
  %13488 = add <16 x i16> %13487, %13484
  %13489 = shufflevector <16 x i16> %13486, <16 x i16> %13488, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13490 = udiv <32 x i16> %13489, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13491 = shufflevector <32 x i16> %13490, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13492 = shl nsw i64 %13446, 5
  %13493 = add nsw i64 %13492, %13351
  %13494 = getelementptr inbounds i16, i16* %blur_x841, i64 %13493
  %13495 = bitcast i16* %13494 to <16 x i16>*
  store <16 x i16> %13491, <16 x i16>* %13495, align 2, !tbaa !399
  %13496 = shufflevector <32 x i16> %13490, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13497 = getelementptr inbounds i16, i16* %13494, i64 16
  %13498 = bitcast i16* %13497 to <16 x i16>*
  store <16 x i16> %13496, <16 x i16>* %13498, align 2, !tbaa !399
  br label %"consume blur_x1225"

"consume blur_x1225":                             ; preds = %"for blur_y.s0.x.x.rebased1217.consume blur_x1225_crit_edge", %"produce blur_x1223"
  %.pre-phi3415 = phi i64 [ %.pre3414, %"for blur_y.s0.x.x.rebased1217.consume blur_x1225_crit_edge" ], [ %13492, %"produce blur_x1223" ]
  %13499 = add nsw i64 %13354, %.pre-phi3415
  %13500 = getelementptr inbounds i16, i16* %blur_x841, i64 %13499
  %13501 = bitcast i16* %13500 to <16 x i16>*
  %13502 = load <16 x i16>, <16 x i16>* %13501, align 2, !tbaa !399
  %13503 = getelementptr inbounds i16, i16* %13500, i64 16
  %13504 = bitcast i16* %13503 to <16 x i16>*
  %13505 = load <16 x i16>, <16 x i16>* %13504, align 2, !tbaa !399
  %13506 = add nsw i64 %13357, %.pre-phi3415
  %13507 = getelementptr inbounds i16, i16* %blur_x841, i64 %13506
  %13508 = bitcast i16* %13507 to <16 x i16>*
  %13509 = load <16 x i16>, <16 x i16>* %13508, align 2, !tbaa !399
  %13510 = getelementptr inbounds i16, i16* %13507, i64 16
  %13511 = bitcast i16* %13510 to <16 x i16>*
  %13512 = load <16 x i16>, <16 x i16>* %13511, align 2, !tbaa !399
  %13513 = add nsw i64 %13360, %.pre-phi3415
  %13514 = getelementptr inbounds i16, i16* %blur_x841, i64 %13513
  %13515 = bitcast i16* %13514 to <16 x i16>*
  %13516 = load <16 x i16>, <16 x i16>* %13515, align 2, !tbaa !399
  %13517 = getelementptr inbounds i16, i16* %13514, i64 16
  %13518 = bitcast i16* %13517 to <16 x i16>*
  %13519 = load <16 x i16>, <16 x i16>* %13518, align 2, !tbaa !399
  %13520 = add <16 x i16> %13509, %13502
  %13521 = add <16 x i16> %13520, %13516
  %13522 = add <16 x i16> %13512, %13505
  %13523 = add <16 x i16> %13522, %13519
  %13524 = shufflevector <16 x i16> %13521, <16 x i16> %13523, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13525 = udiv <32 x i16> %13524, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13526 = shufflevector <32 x i16> %13525, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13527 = add nsw i64 %13364, %.pre-phi3415
  %13528 = getelementptr inbounds i16, i16* %258, i64 %13527
  %13529 = bitcast i16* %13528 to <16 x i16>*
  store <16 x i16> %13526, <16 x i16>* %13529, align 2, !tbaa !401
  %13530 = shufflevector <32 x i16> %13525, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13531 = getelementptr inbounds i16, i16* %13528, i64 16
  %13532 = bitcast i16* %13531 to <16 x i16>*
  store <16 x i16> %13530, <16 x i16>* %13532, align 2, !tbaa !401
  %indvars.iv.next3257 = add nuw nsw i64 %indvars.iv3256, 1
  %.not2531 = icmp eq i64 %indvars.iv.next3257, %515
  br i1 %.not2531, label %"end for blur_y.s0.x.x.rebased1218", label %"for blur_y.s0.x.x.rebased1217"

"for blur_y.s0.x.x.rebased1233":                  ; preds = %"for blur_y.s0.x.x.rebased1233.preheader", %"consume blur_x1244"
  %blur_y.s0.x.x.rebased1235 = phi i32 [ %13607, %"consume blur_x1244" ], [ 0, %"for blur_y.s0.x.x.rebased1233.preheader" ]
  %13533 = add nsw i32 %blur_y.s0.x.x.rebased1235, %t1582776
  %a2114 = shl nsw i32 %13533, 5
  %13534 = icmp sgt i32 %t1603, %a2114
  %blur_y.s0.x.v0.base.s1236 = select i1 %13534, i32 %a2114, i32 %t1603
  %13535 = icmp slt i32 %13533, 1
  %13536 = icmp sgt i32 %194, %a2114
  %13537 = or i1 %13535, %13536
  br i1 %13537, label %"produce blur_x1241", label %"consume blur_x1244"

"end for blur_y.s0.x.x.rebased1234":              ; preds = %"consume blur_x1244", %"end for blur_y.s0.x.x.rebased1218"
  br i1 %225, label %"produce blur_x1248", label %after_bb1245

"produce blur_x1241":                             ; preds = %"for blur_y.s0.x.x.rebased1233"
  %13538 = icmp slt i32 %blur_y.s0.x.v0.base.s1236, %194
  %blur_x.s0.x.v1.base.s1242 = select i1 %13538, i32 %blur_y.s0.x.v0.base.s1236, i32 %194
  %t7891243 = add nsw i32 %364, %blur_x.s0.x.v1.base.s1242
  %13539 = sext i32 %t7891243 to i64
  %13540 = getelementptr inbounds i16, i16* %read_input784, i64 %13539
  %13541 = getelementptr inbounds i16, i16* %13540, i64 1
  %13542 = bitcast i16* %13541 to <16 x i16>*
  %13543 = load <16 x i16>, <16 x i16>* %13542, align 2, !tbaa !396
  %13544 = getelementptr inbounds i16, i16* %13540, i64 17
  %13545 = bitcast i16* %13544 to <16 x i16>*
  %13546 = load <16 x i16>, <16 x i16>* %13545, align 2, !tbaa !396
  %13547 = getelementptr inbounds i16, i16* %13540, i64 2
  %13548 = bitcast i16* %13547 to <16 x i16>*
  %13549 = load <16 x i16>, <16 x i16>* %13548, align 2, !tbaa !396
  %13550 = getelementptr inbounds i16, i16* %13540, i64 18
  %13551 = bitcast i16* %13550 to <16 x i16>*
  %13552 = load <16 x i16>, <16 x i16>* %13551, align 2, !tbaa !396
  %13553 = bitcast i16* %13540 to <16 x i16>*
  %13554 = load <16 x i16>, <16 x i16>* %13553, align 2, !tbaa !396
  %13555 = getelementptr inbounds i16, i16* %13540, i64 16
  %13556 = bitcast i16* %13555 to <16 x i16>*
  %13557 = load <16 x i16>, <16 x i16>* %13556, align 2, !tbaa !396
  %13558 = add <16 x i16> %13549, %13543
  %13559 = add <16 x i16> %13558, %13554
  %13560 = add <16 x i16> %13552, %13546
  %13561 = add <16 x i16> %13560, %13557
  %13562 = shufflevector <16 x i16> %13559, <16 x i16> %13561, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13563 = udiv <32 x i16> %13562, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13564 = shufflevector <32 x i16> %13563, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13565 = sext i32 %blur_x.s0.x.v1.base.s1242 to i64
  %13566 = add nsw i64 %13565, %13452
  %13567 = getelementptr inbounds i16, i16* %blur_x841, i64 %13566
  %13568 = bitcast i16* %13567 to <16 x i16>*
  store <16 x i16> %13564, <16 x i16>* %13568, align 2, !tbaa !399
  %13569 = shufflevector <32 x i16> %13563, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13570 = getelementptr inbounds i16, i16* %13567, i64 16
  %13571 = bitcast i16* %13570 to <16 x i16>*
  store <16 x i16> %13569, <16 x i16>* %13571, align 2, !tbaa !399
  br label %"consume blur_x1244"

"consume blur_x1244":                             ; preds = %"for blur_y.s0.x.x.rebased1233", %"produce blur_x1241"
  %13572 = sext i32 %blur_y.s0.x.v0.base.s1236 to i64
  %13573 = add nsw i64 %13455, %13572
  %13574 = getelementptr inbounds i16, i16* %blur_x841, i64 %13573
  %13575 = bitcast i16* %13574 to <16 x i16>*
  %13576 = load <16 x i16>, <16 x i16>* %13575, align 2, !tbaa !399
  %13577 = getelementptr inbounds i16, i16* %13574, i64 16
  %13578 = bitcast i16* %13577 to <16 x i16>*
  %13579 = load <16 x i16>, <16 x i16>* %13578, align 2, !tbaa !399
  %13580 = add nsw i64 %13458, %13572
  %13581 = getelementptr inbounds i16, i16* %blur_x841, i64 %13580
  %13582 = bitcast i16* %13581 to <16 x i16>*
  %13583 = load <16 x i16>, <16 x i16>* %13582, align 2, !tbaa !399
  %13584 = getelementptr inbounds i16, i16* %13581, i64 16
  %13585 = bitcast i16* %13584 to <16 x i16>*
  %13586 = load <16 x i16>, <16 x i16>* %13585, align 2, !tbaa !399
  %13587 = add nsw i64 %13461, %13572
  %13588 = getelementptr inbounds i16, i16* %blur_x841, i64 %13587
  %13589 = bitcast i16* %13588 to <16 x i16>*
  %13590 = load <16 x i16>, <16 x i16>* %13589, align 2, !tbaa !399
  %13591 = getelementptr inbounds i16, i16* %13588, i64 16
  %13592 = bitcast i16* %13591 to <16 x i16>*
  %13593 = load <16 x i16>, <16 x i16>* %13592, align 2, !tbaa !399
  %13594 = add <16 x i16> %13583, %13576
  %13595 = add <16 x i16> %13594, %13590
  %13596 = add <16 x i16> %13586, %13579
  %13597 = add <16 x i16> %13596, %13593
  %13598 = shufflevector <16 x i16> %13595, <16 x i16> %13597, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13599 = udiv <32 x i16> %13598, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13600 = shufflevector <32 x i16> %13599, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13601 = add nsw i64 %13465, %13572
  %13602 = getelementptr inbounds i16, i16* %258, i64 %13601
  %13603 = bitcast i16* %13602 to <16 x i16>*
  store <16 x i16> %13600, <16 x i16>* %13603, align 2, !tbaa !401
  %13604 = shufflevector <32 x i16> %13599, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13605 = getelementptr inbounds i16, i16* %13602, i64 16
  %13606 = bitcast i16* %13605 to <16 x i16>*
  store <16 x i16> %13604, <16 x i16>* %13606, align 2, !tbaa !401
  %13607 = add nuw nsw i32 %blur_y.s0.x.x.rebased1235, 1
  %.not2530 = icmp eq i32 %13607, %t1639860
  br i1 %.not2530, label %"end for blur_y.s0.x.x.rebased1234", label %"for blur_y.s0.x.x.rebased1233"

after_bb1245:                                     ; preds = %"end for blur_y.s0.x.x.rebased1234", %"produce blur_x1248"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1260.preheader", label %"end for blur_y.s0.x.x.rebased1261", !prof !386

"for blur_y.s0.x.x.rebased1260.preheader":        ; preds = %after_bb1245
  %13608 = sext i32 %t1650912 to i64
  %13609 = zext i32 %.pre-phi3391 to i64
  %13610 = mul nsw i64 %13609, %322
  %13611 = sub nsw i64 %13610, %293
  %13612 = zext i32 %.pre-phi3395 to i64
  %13613 = mul nsw i64 %13612, %322
  %13614 = sub nsw i64 %13613, %293
  %13615 = zext i32 %.pre-phi3387 to i64
  %13616 = mul nsw i64 %13615, %322
  %13617 = sub nsw i64 %13616, %293
  %13618 = sext i32 %a365 to i64
  %13619 = add nsw i64 %13618, 8
  %13620 = mul nsw i64 %13619, %319
  %13621 = add nsw i64 %13620, %323
  br label %"for blur_y.s0.x.x.rebased1260"

"produce blur_x1248":                             ; preds = %"end for blur_y.s0.x.x.rebased1234"
  %13622 = getelementptr inbounds i16, i16* %read_input784, i64 %368
  %13623 = getelementptr inbounds i16, i16* %13622, i64 -31
  %13624 = bitcast i16* %13623 to <16 x i16>*
  %13625 = load <16 x i16>, <16 x i16>* %13624, align 2, !tbaa !396
  %13626 = getelementptr inbounds i16, i16* %13622, i64 -15
  %13627 = bitcast i16* %13626 to <16 x i16>*
  %13628 = load <16 x i16>, <16 x i16>* %13627, align 2, !tbaa !396
  %13629 = getelementptr inbounds i16, i16* %13622, i64 -30
  %13630 = bitcast i16* %13629 to <16 x i16>*
  %13631 = load <16 x i16>, <16 x i16>* %13630, align 2, !tbaa !396
  %13632 = getelementptr inbounds i16, i16* %13622, i64 -14
  %13633 = bitcast i16* %13632 to <16 x i16>*
  %13634 = load <16 x i16>, <16 x i16>* %13633, align 2, !tbaa !396
  %13635 = getelementptr inbounds i16, i16* %13622, i64 -32
  %13636 = bitcast i16* %13635 to <16 x i16>*
  %13637 = load <16 x i16>, <16 x i16>* %13636, align 2, !tbaa !396
  %13638 = getelementptr inbounds i16, i16* %13622, i64 -16
  %13639 = bitcast i16* %13638 to <16 x i16>*
  %13640 = load <16 x i16>, <16 x i16>* %13639, align 2, !tbaa !396
  %13641 = add <16 x i16> %13631, %13625
  %13642 = add <16 x i16> %13641, %13637
  %13643 = add <16 x i16> %13634, %13628
  %13644 = add <16 x i16> %13643, %13640
  %13645 = shufflevector <16 x i16> %13642, <16 x i16> %13644, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13646 = udiv <32 x i16> %13645, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13647 = shufflevector <32 x i16> %13646, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13648 = zext i32 %.pre-phi3395 to i64
  %13649 = mul nsw i64 %294, %13648
  %13650 = add nsw i64 %296, %13649
  %13651 = getelementptr inbounds i16, i16* %blur_x841, i64 %13650
  %13652 = getelementptr inbounds i16, i16* %13651, i64 -32
  %13653 = bitcast i16* %13652 to <16 x i16>*
  store <16 x i16> %13647, <16 x i16>* %13653, align 2, !tbaa !399
  %13654 = shufflevector <32 x i16> %13646, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13655 = getelementptr inbounds i16, i16* %13651, i64 -16
  %13656 = bitcast i16* %13655 to <16 x i16>*
  store <16 x i16> %13654, <16 x i16>* %13656, align 2, !tbaa !399
  %13657 = zext i32 %.pre-phi3391 to i64
  %13658 = mul nsw i64 %13657, %318
  %13659 = add nsw i64 %13658, %291
  %13660 = getelementptr inbounds i16, i16* %blur_x841, i64 %13659
  %13661 = getelementptr inbounds i16, i16* %13660, i64 -32
  %13662 = bitcast i16* %13661 to <16 x i16>*
  %13663 = load <16 x i16>, <16 x i16>* %13662, align 2, !tbaa !399
  %13664 = getelementptr inbounds i16, i16* %13660, i64 -16
  %13665 = bitcast i16* %13664 to <16 x i16>*
  %13666 = load <16 x i16>, <16 x i16>* %13665, align 2, !tbaa !399
  %13667 = mul nsw i64 %13648, %318
  %13668 = add nsw i64 %13667, %291
  %13669 = getelementptr inbounds i16, i16* %blur_x841, i64 %13668
  %13670 = getelementptr inbounds i16, i16* %13669, i64 -32
  %13671 = bitcast i16* %13670 to <16 x i16>*
  %13672 = load <16 x i16>, <16 x i16>* %13671, align 2, !tbaa !399
  %13673 = getelementptr inbounds i16, i16* %13669, i64 -16
  %13674 = bitcast i16* %13673 to <16 x i16>*
  %13675 = load <16 x i16>, <16 x i16>* %13674, align 2, !tbaa !399
  %13676 = zext i32 %.pre-phi3387 to i64
  %13677 = mul nsw i64 %13676, %318
  %13678 = add nsw i64 %13677, %291
  %13679 = getelementptr inbounds i16, i16* %blur_x841, i64 %13678
  %13680 = getelementptr inbounds i16, i16* %13679, i64 -32
  %13681 = bitcast i16* %13680 to <16 x i16>*
  %13682 = load <16 x i16>, <16 x i16>* %13681, align 2, !tbaa !399
  %13683 = getelementptr inbounds i16, i16* %13679, i64 -16
  %13684 = bitcast i16* %13683 to <16 x i16>*
  %13685 = load <16 x i16>, <16 x i16>* %13684, align 2, !tbaa !399
  %13686 = add <16 x i16> %13672, %13663
  %13687 = add <16 x i16> %13686, %13682
  %13688 = add <16 x i16> %13675, %13666
  %13689 = add <16 x i16> %13688, %13685
  %13690 = shufflevector <16 x i16> %13687, <16 x i16> %13689, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13691 = udiv <32 x i16> %13690, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13692 = shufflevector <32 x i16> %13691, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13693 = sext i32 %a365 to i64
  %13694 = add nsw i64 %13693, 8
  %13695 = mul nsw i64 %13694, %319
  %13696 = add nsw i64 %321, %13695
  %13697 = getelementptr inbounds i16, i16* %258, i64 %13696
  %13698 = getelementptr inbounds i16, i16* %13697, i64 -32
  %13699 = bitcast i16* %13698 to <16 x i16>*
  store <16 x i16> %13692, <16 x i16>* %13699, align 2, !tbaa !401
  %13700 = shufflevector <32 x i16> %13691, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13701 = getelementptr inbounds i16, i16* %13697, i64 -16
  %13702 = bitcast i16* %13701 to <16 x i16>*
  store <16 x i16> %13700, <16 x i16>* %13702, align 2, !tbaa !401
  br label %after_bb1245

"for blur_y.s0.x.x.rebased1260":                  ; preds = %"for blur_y.s0.x.x.rebased1260.preheader", %"consume blur_x1268"
  %indvars.iv3258 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1260.preheader" ], [ %indvars.iv.next3259, %"consume blur_x1268" ]
  %13703 = add nsw i64 %indvars.iv3258, %298
  %13704 = icmp slt i64 %13703, 1
  %13705 = trunc i64 %13703 to i32
  %13706 = shl nsw i32 %13705, 5
  %13707 = icmp sgt i32 %194, %13706
  %13708 = or i1 %13704, %13707
  br i1 %13708, label %"produce blur_x1266", label %"for blur_y.s0.x.x.rebased1260.consume blur_x1268_crit_edge"

"for blur_y.s0.x.x.rebased1260.consume blur_x1268_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1260"
  %.pre3416 = shl nsw i64 %13703, 5
  br label %"consume blur_x1268"

"end for blur_y.s0.x.x.rebased1261":              ; preds = %"consume blur_x1268", %after_bb1245
  br i1 %299, label %"for blur_y.s0.x.x.rebased1276.preheader", label %"end for blur_y.s0.x.x.rebased1277", !prof !386

"for blur_y.s0.x.x.rebased1276.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1261"
  %13709 = sext i32 %t1650912 to i64
  %13710 = zext i32 %.pre-phi3391 to i64
  %13711 = mul nsw i64 %13710, %322
  %13712 = sub nsw i64 %13711, %293
  %13713 = zext i32 %.pre-phi3395 to i64
  %13714 = mul nsw i64 %13713, %322
  %13715 = sub nsw i64 %13714, %293
  %13716 = zext i32 %.pre-phi3387 to i64
  %13717 = mul nsw i64 %13716, %322
  %13718 = sub nsw i64 %13717, %293
  %13719 = sext i32 %a365 to i64
  %13720 = add nsw i64 %13719, 8
  %13721 = mul nsw i64 %13720, %319
  %13722 = add nsw i64 %13721, %323
  br label %"for blur_y.s0.x.x.rebased1276"

"produce blur_x1266":                             ; preds = %"for blur_y.s0.x.x.rebased1260"
  %t8001267 = add nsw i32 %370, %13706
  %13723 = sext i32 %t8001267 to i64
  %13724 = getelementptr inbounds i16, i16* %read_input784, i64 %13723
  %13725 = getelementptr inbounds i16, i16* %13724, i64 1
  %13726 = bitcast i16* %13725 to <16 x i16>*
  %13727 = load <16 x i16>, <16 x i16>* %13726, align 2, !tbaa !396
  %13728 = getelementptr inbounds i16, i16* %13724, i64 17
  %13729 = bitcast i16* %13728 to <16 x i16>*
  %13730 = load <16 x i16>, <16 x i16>* %13729, align 2, !tbaa !396
  %13731 = getelementptr inbounds i16, i16* %13724, i64 2
  %13732 = bitcast i16* %13731 to <16 x i16>*
  %13733 = load <16 x i16>, <16 x i16>* %13732, align 2, !tbaa !396
  %13734 = getelementptr inbounds i16, i16* %13724, i64 18
  %13735 = bitcast i16* %13734 to <16 x i16>*
  %13736 = load <16 x i16>, <16 x i16>* %13735, align 2, !tbaa !396
  %13737 = bitcast i16* %13724 to <16 x i16>*
  %13738 = load <16 x i16>, <16 x i16>* %13737, align 2, !tbaa !396
  %13739 = getelementptr inbounds i16, i16* %13724, i64 16
  %13740 = bitcast i16* %13739 to <16 x i16>*
  %13741 = load <16 x i16>, <16 x i16>* %13740, align 2, !tbaa !396
  %13742 = add <16 x i16> %13733, %13727
  %13743 = add <16 x i16> %13742, %13738
  %13744 = add <16 x i16> %13736, %13730
  %13745 = add <16 x i16> %13744, %13741
  %13746 = shufflevector <16 x i16> %13743, <16 x i16> %13745, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13747 = udiv <32 x i16> %13746, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13748 = shufflevector <32 x i16> %13747, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13749 = shl nsw i64 %13703, 5
  %13750 = add nsw i64 %13749, %13608
  %13751 = getelementptr inbounds i16, i16* %blur_x841, i64 %13750
  %13752 = bitcast i16* %13751 to <16 x i16>*
  store <16 x i16> %13748, <16 x i16>* %13752, align 2, !tbaa !399
  %13753 = shufflevector <32 x i16> %13747, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13754 = getelementptr inbounds i16, i16* %13751, i64 16
  %13755 = bitcast i16* %13754 to <16 x i16>*
  store <16 x i16> %13753, <16 x i16>* %13755, align 2, !tbaa !399
  br label %"consume blur_x1268"

"consume blur_x1268":                             ; preds = %"for blur_y.s0.x.x.rebased1260.consume blur_x1268_crit_edge", %"produce blur_x1266"
  %.pre-phi3417 = phi i64 [ %.pre3416, %"for blur_y.s0.x.x.rebased1260.consume blur_x1268_crit_edge" ], [ %13749, %"produce blur_x1266" ]
  %13756 = add nsw i64 %13611, %.pre-phi3417
  %13757 = getelementptr inbounds i16, i16* %blur_x841, i64 %13756
  %13758 = bitcast i16* %13757 to <16 x i16>*
  %13759 = load <16 x i16>, <16 x i16>* %13758, align 2, !tbaa !399
  %13760 = getelementptr inbounds i16, i16* %13757, i64 16
  %13761 = bitcast i16* %13760 to <16 x i16>*
  %13762 = load <16 x i16>, <16 x i16>* %13761, align 2, !tbaa !399
  %13763 = add nsw i64 %13614, %.pre-phi3417
  %13764 = getelementptr inbounds i16, i16* %blur_x841, i64 %13763
  %13765 = bitcast i16* %13764 to <16 x i16>*
  %13766 = load <16 x i16>, <16 x i16>* %13765, align 2, !tbaa !399
  %13767 = getelementptr inbounds i16, i16* %13764, i64 16
  %13768 = bitcast i16* %13767 to <16 x i16>*
  %13769 = load <16 x i16>, <16 x i16>* %13768, align 2, !tbaa !399
  %13770 = add nsw i64 %13617, %.pre-phi3417
  %13771 = getelementptr inbounds i16, i16* %blur_x841, i64 %13770
  %13772 = bitcast i16* %13771 to <16 x i16>*
  %13773 = load <16 x i16>, <16 x i16>* %13772, align 2, !tbaa !399
  %13774 = getelementptr inbounds i16, i16* %13771, i64 16
  %13775 = bitcast i16* %13774 to <16 x i16>*
  %13776 = load <16 x i16>, <16 x i16>* %13775, align 2, !tbaa !399
  %13777 = add <16 x i16> %13766, %13759
  %13778 = add <16 x i16> %13777, %13773
  %13779 = add <16 x i16> %13769, %13762
  %13780 = add <16 x i16> %13779, %13776
  %13781 = shufflevector <16 x i16> %13778, <16 x i16> %13780, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13782 = udiv <32 x i16> %13781, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13783 = shufflevector <32 x i16> %13782, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13784 = add nsw i64 %13621, %.pre-phi3417
  %13785 = getelementptr inbounds i16, i16* %258, i64 %13784
  %13786 = bitcast i16* %13785 to <16 x i16>*
  store <16 x i16> %13783, <16 x i16>* %13786, align 2, !tbaa !401
  %13787 = shufflevector <32 x i16> %13782, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13788 = getelementptr inbounds i16, i16* %13785, i64 16
  %13789 = bitcast i16* %13788 to <16 x i16>*
  store <16 x i16> %13787, <16 x i16>* %13789, align 2, !tbaa !401
  %indvars.iv.next3259 = add nuw nsw i64 %indvars.iv3258, 1
  %.not2527 = icmp eq i64 %indvars.iv.next3259, %515
  br i1 %.not2527, label %"end for blur_y.s0.x.x.rebased1261", label %"for blur_y.s0.x.x.rebased1260"

"for blur_y.s0.x.x.rebased1276":                  ; preds = %"for blur_y.s0.x.x.rebased1276.preheader", %"consume blur_x1287"
  %blur_y.s0.x.x.rebased1278 = phi i32 [ %13864, %"consume blur_x1287" ], [ 0, %"for blur_y.s0.x.x.rebased1276.preheader" ]
  %13790 = add nsw i32 %blur_y.s0.x.x.rebased1278, %t1582776
  %a2271 = shl nsw i32 %13790, 5
  %13791 = icmp sgt i32 %t1603, %a2271
  %blur_y.s0.x.v0.base.s1279 = select i1 %13791, i32 %a2271, i32 %t1603
  %13792 = icmp slt i32 %13790, 1
  %13793 = icmp sgt i32 %194, %a2271
  %13794 = or i1 %13792, %13793
  br i1 %13794, label %"produce blur_x1284", label %"consume blur_x1287"

"end for blur_y.s0.x.x.rebased1277":              ; preds = %"consume blur_x1287", %"end for blur_y.s0.x.x.rebased1261"
  br i1 %225, label %"produce blur_x1291", label %after_bb1288

"produce blur_x1284":                             ; preds = %"for blur_y.s0.x.x.rebased1276"
  %13795 = icmp slt i32 %blur_y.s0.x.v0.base.s1279, %194
  %blur_x.s0.x.v1.base.s1285 = select i1 %13795, i32 %blur_y.s0.x.v0.base.s1279, i32 %194
  %t8051286 = add nsw i32 %370, %blur_x.s0.x.v1.base.s1285
  %13796 = sext i32 %t8051286 to i64
  %13797 = getelementptr inbounds i16, i16* %read_input784, i64 %13796
  %13798 = getelementptr inbounds i16, i16* %13797, i64 1
  %13799 = bitcast i16* %13798 to <16 x i16>*
  %13800 = load <16 x i16>, <16 x i16>* %13799, align 2, !tbaa !396
  %13801 = getelementptr inbounds i16, i16* %13797, i64 17
  %13802 = bitcast i16* %13801 to <16 x i16>*
  %13803 = load <16 x i16>, <16 x i16>* %13802, align 2, !tbaa !396
  %13804 = getelementptr inbounds i16, i16* %13797, i64 2
  %13805 = bitcast i16* %13804 to <16 x i16>*
  %13806 = load <16 x i16>, <16 x i16>* %13805, align 2, !tbaa !396
  %13807 = getelementptr inbounds i16, i16* %13797, i64 18
  %13808 = bitcast i16* %13807 to <16 x i16>*
  %13809 = load <16 x i16>, <16 x i16>* %13808, align 2, !tbaa !396
  %13810 = bitcast i16* %13797 to <16 x i16>*
  %13811 = load <16 x i16>, <16 x i16>* %13810, align 2, !tbaa !396
  %13812 = getelementptr inbounds i16, i16* %13797, i64 16
  %13813 = bitcast i16* %13812 to <16 x i16>*
  %13814 = load <16 x i16>, <16 x i16>* %13813, align 2, !tbaa !396
  %13815 = add <16 x i16> %13806, %13800
  %13816 = add <16 x i16> %13815, %13811
  %13817 = add <16 x i16> %13809, %13803
  %13818 = add <16 x i16> %13817, %13814
  %13819 = shufflevector <16 x i16> %13816, <16 x i16> %13818, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13820 = udiv <32 x i16> %13819, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13821 = shufflevector <32 x i16> %13820, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13822 = sext i32 %blur_x.s0.x.v1.base.s1285 to i64
  %13823 = add nsw i64 %13822, %13709
  %13824 = getelementptr inbounds i16, i16* %blur_x841, i64 %13823
  %13825 = bitcast i16* %13824 to <16 x i16>*
  store <16 x i16> %13821, <16 x i16>* %13825, align 2, !tbaa !399
  %13826 = shufflevector <32 x i16> %13820, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13827 = getelementptr inbounds i16, i16* %13824, i64 16
  %13828 = bitcast i16* %13827 to <16 x i16>*
  store <16 x i16> %13826, <16 x i16>* %13828, align 2, !tbaa !399
  br label %"consume blur_x1287"

"consume blur_x1287":                             ; preds = %"for blur_y.s0.x.x.rebased1276", %"produce blur_x1284"
  %13829 = sext i32 %blur_y.s0.x.v0.base.s1279 to i64
  %13830 = add nsw i64 %13712, %13829
  %13831 = getelementptr inbounds i16, i16* %blur_x841, i64 %13830
  %13832 = bitcast i16* %13831 to <16 x i16>*
  %13833 = load <16 x i16>, <16 x i16>* %13832, align 2, !tbaa !399
  %13834 = getelementptr inbounds i16, i16* %13831, i64 16
  %13835 = bitcast i16* %13834 to <16 x i16>*
  %13836 = load <16 x i16>, <16 x i16>* %13835, align 2, !tbaa !399
  %13837 = add nsw i64 %13715, %13829
  %13838 = getelementptr inbounds i16, i16* %blur_x841, i64 %13837
  %13839 = bitcast i16* %13838 to <16 x i16>*
  %13840 = load <16 x i16>, <16 x i16>* %13839, align 2, !tbaa !399
  %13841 = getelementptr inbounds i16, i16* %13838, i64 16
  %13842 = bitcast i16* %13841 to <16 x i16>*
  %13843 = load <16 x i16>, <16 x i16>* %13842, align 2, !tbaa !399
  %13844 = add nsw i64 %13718, %13829
  %13845 = getelementptr inbounds i16, i16* %blur_x841, i64 %13844
  %13846 = bitcast i16* %13845 to <16 x i16>*
  %13847 = load <16 x i16>, <16 x i16>* %13846, align 2, !tbaa !399
  %13848 = getelementptr inbounds i16, i16* %13845, i64 16
  %13849 = bitcast i16* %13848 to <16 x i16>*
  %13850 = load <16 x i16>, <16 x i16>* %13849, align 2, !tbaa !399
  %13851 = add <16 x i16> %13840, %13833
  %13852 = add <16 x i16> %13851, %13847
  %13853 = add <16 x i16> %13843, %13836
  %13854 = add <16 x i16> %13853, %13850
  %13855 = shufflevector <16 x i16> %13852, <16 x i16> %13854, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13856 = udiv <32 x i16> %13855, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13857 = shufflevector <32 x i16> %13856, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13858 = add nsw i64 %13722, %13829
  %13859 = getelementptr inbounds i16, i16* %258, i64 %13858
  %13860 = bitcast i16* %13859 to <16 x i16>*
  store <16 x i16> %13857, <16 x i16>* %13860, align 2, !tbaa !401
  %13861 = shufflevector <32 x i16> %13856, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13862 = getelementptr inbounds i16, i16* %13859, i64 16
  %13863 = bitcast i16* %13862 to <16 x i16>*
  store <16 x i16> %13861, <16 x i16>* %13863, align 2, !tbaa !401
  %13864 = add nuw nsw i32 %blur_y.s0.x.x.rebased1278, 1
  %.not2526 = icmp eq i32 %13864, %t1639860
  br i1 %.not2526, label %"end for blur_y.s0.x.x.rebased1277", label %"for blur_y.s0.x.x.rebased1276"

after_bb1288:                                     ; preds = %"end for blur_y.s0.x.x.rebased1277", %"produce blur_x1291"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1303.preheader", label %"end for blur_y.s0.x.x.rebased1304", !prof !386

"for blur_y.s0.x.x.rebased1303.preheader":        ; preds = %after_bb1288
  %13865 = sext i32 %t1666955 to i64
  %13866 = zext i32 %.pre-phi3395 to i64
  %13867 = mul nsw i64 %13866, %322
  %13868 = sub nsw i64 %13867, %293
  %13869 = zext i32 %.pre-phi3401 to i64
  %13870 = mul nsw i64 %13869, %322
  %13871 = sub nsw i64 %13870, %293
  %13872 = zext i32 %.pre-phi3391 to i64
  %13873 = mul nsw i64 %13872, %322
  %13874 = sub nsw i64 %13873, %293
  %13875 = sext i32 %a365 to i64
  %13876 = add nsw i64 %13875, 9
  %13877 = mul nsw i64 %13876, %319
  %13878 = add nsw i64 %13877, %323
  br label %"for blur_y.s0.x.x.rebased1303"

"produce blur_x1291":                             ; preds = %"end for blur_y.s0.x.x.rebased1277"
  %13879 = getelementptr inbounds i16, i16* %read_input784, i64 %374
  %13880 = getelementptr inbounds i16, i16* %13879, i64 -31
  %13881 = bitcast i16* %13880 to <16 x i16>*
  %13882 = load <16 x i16>, <16 x i16>* %13881, align 2, !tbaa !396
  %13883 = getelementptr inbounds i16, i16* %13879, i64 -15
  %13884 = bitcast i16* %13883 to <16 x i16>*
  %13885 = load <16 x i16>, <16 x i16>* %13884, align 2, !tbaa !396
  %13886 = getelementptr inbounds i16, i16* %13879, i64 -30
  %13887 = bitcast i16* %13886 to <16 x i16>*
  %13888 = load <16 x i16>, <16 x i16>* %13887, align 2, !tbaa !396
  %13889 = getelementptr inbounds i16, i16* %13879, i64 -14
  %13890 = bitcast i16* %13889 to <16 x i16>*
  %13891 = load <16 x i16>, <16 x i16>* %13890, align 2, !tbaa !396
  %13892 = getelementptr inbounds i16, i16* %13879, i64 -32
  %13893 = bitcast i16* %13892 to <16 x i16>*
  %13894 = load <16 x i16>, <16 x i16>* %13893, align 2, !tbaa !396
  %13895 = getelementptr inbounds i16, i16* %13879, i64 -16
  %13896 = bitcast i16* %13895 to <16 x i16>*
  %13897 = load <16 x i16>, <16 x i16>* %13896, align 2, !tbaa !396
  %13898 = add <16 x i16> %13888, %13882
  %13899 = add <16 x i16> %13898, %13894
  %13900 = add <16 x i16> %13891, %13885
  %13901 = add <16 x i16> %13900, %13897
  %13902 = shufflevector <16 x i16> %13899, <16 x i16> %13901, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13903 = udiv <32 x i16> %13902, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13904 = shufflevector <32 x i16> %13903, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13905 = zext i32 %.pre-phi3401 to i64
  %13906 = mul nsw i64 %294, %13905
  %13907 = add nsw i64 %296, %13906
  %13908 = getelementptr inbounds i16, i16* %blur_x841, i64 %13907
  %13909 = getelementptr inbounds i16, i16* %13908, i64 -32
  %13910 = bitcast i16* %13909 to <16 x i16>*
  store <16 x i16> %13904, <16 x i16>* %13910, align 2, !tbaa !399
  %13911 = shufflevector <32 x i16> %13903, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13912 = getelementptr inbounds i16, i16* %13908, i64 -16
  %13913 = bitcast i16* %13912 to <16 x i16>*
  store <16 x i16> %13911, <16 x i16>* %13913, align 2, !tbaa !399
  %13914 = zext i32 %.pre-phi3395 to i64
  %13915 = mul nsw i64 %13914, %318
  %13916 = add nsw i64 %13915, %291
  %13917 = getelementptr inbounds i16, i16* %blur_x841, i64 %13916
  %13918 = getelementptr inbounds i16, i16* %13917, i64 -32
  %13919 = bitcast i16* %13918 to <16 x i16>*
  %13920 = load <16 x i16>, <16 x i16>* %13919, align 2, !tbaa !399
  %13921 = getelementptr inbounds i16, i16* %13917, i64 -16
  %13922 = bitcast i16* %13921 to <16 x i16>*
  %13923 = load <16 x i16>, <16 x i16>* %13922, align 2, !tbaa !399
  %13924 = mul nsw i64 %13905, %318
  %13925 = add nsw i64 %13924, %291
  %13926 = getelementptr inbounds i16, i16* %blur_x841, i64 %13925
  %13927 = getelementptr inbounds i16, i16* %13926, i64 -32
  %13928 = bitcast i16* %13927 to <16 x i16>*
  %13929 = load <16 x i16>, <16 x i16>* %13928, align 2, !tbaa !399
  %13930 = getelementptr inbounds i16, i16* %13926, i64 -16
  %13931 = bitcast i16* %13930 to <16 x i16>*
  %13932 = load <16 x i16>, <16 x i16>* %13931, align 2, !tbaa !399
  %13933 = zext i32 %.pre-phi3391 to i64
  %13934 = mul nsw i64 %13933, %318
  %13935 = add nsw i64 %13934, %291
  %13936 = getelementptr inbounds i16, i16* %blur_x841, i64 %13935
  %13937 = getelementptr inbounds i16, i16* %13936, i64 -32
  %13938 = bitcast i16* %13937 to <16 x i16>*
  %13939 = load <16 x i16>, <16 x i16>* %13938, align 2, !tbaa !399
  %13940 = getelementptr inbounds i16, i16* %13936, i64 -16
  %13941 = bitcast i16* %13940 to <16 x i16>*
  %13942 = load <16 x i16>, <16 x i16>* %13941, align 2, !tbaa !399
  %13943 = add <16 x i16> %13929, %13920
  %13944 = add <16 x i16> %13943, %13939
  %13945 = add <16 x i16> %13932, %13923
  %13946 = add <16 x i16> %13945, %13942
  %13947 = shufflevector <16 x i16> %13944, <16 x i16> %13946, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13948 = udiv <32 x i16> %13947, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %13949 = shufflevector <32 x i16> %13948, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13950 = sext i32 %a365 to i64
  %13951 = add nsw i64 %13950, 9
  %13952 = mul nsw i64 %13951, %319
  %13953 = add nsw i64 %321, %13952
  %13954 = getelementptr inbounds i16, i16* %258, i64 %13953
  %13955 = getelementptr inbounds i16, i16* %13954, i64 -32
  %13956 = bitcast i16* %13955 to <16 x i16>*
  store <16 x i16> %13949, <16 x i16>* %13956, align 2, !tbaa !401
  %13957 = shufflevector <32 x i16> %13948, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13958 = getelementptr inbounds i16, i16* %13954, i64 -16
  %13959 = bitcast i16* %13958 to <16 x i16>*
  store <16 x i16> %13957, <16 x i16>* %13959, align 2, !tbaa !401
  br label %after_bb1288

"for blur_y.s0.x.x.rebased1303":                  ; preds = %"for blur_y.s0.x.x.rebased1303.preheader", %"consume blur_x1311"
  %indvars.iv3260 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1303.preheader" ], [ %indvars.iv.next3261, %"consume blur_x1311" ]
  %13960 = add nsw i64 %indvars.iv3260, %298
  %13961 = icmp slt i64 %13960, 1
  %13962 = trunc i64 %13960 to i32
  %13963 = shl nsw i32 %13962, 5
  %13964 = icmp sgt i32 %194, %13963
  %13965 = or i1 %13961, %13964
  br i1 %13965, label %"produce blur_x1309", label %"for blur_y.s0.x.x.rebased1303.consume blur_x1311_crit_edge"

"for blur_y.s0.x.x.rebased1303.consume blur_x1311_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1303"
  %.pre3418 = shl nsw i64 %13960, 5
  br label %"consume blur_x1311"

"end for blur_y.s0.x.x.rebased1304":              ; preds = %"consume blur_x1311", %after_bb1288
  br i1 %299, label %"for blur_y.s0.x.x.rebased1319.preheader", label %"end for blur_y.s0.x.x.rebased1320", !prof !386

"for blur_y.s0.x.x.rebased1319.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1304"
  %13966 = sext i32 %t1666955 to i64
  %13967 = zext i32 %.pre-phi3395 to i64
  %13968 = mul nsw i64 %13967, %322
  %13969 = sub nsw i64 %13968, %293
  %13970 = zext i32 %.pre-phi3401 to i64
  %13971 = mul nsw i64 %13970, %322
  %13972 = sub nsw i64 %13971, %293
  %13973 = zext i32 %.pre-phi3391 to i64
  %13974 = mul nsw i64 %13973, %322
  %13975 = sub nsw i64 %13974, %293
  %13976 = sext i32 %a365 to i64
  %13977 = add nsw i64 %13976, 9
  %13978 = mul nsw i64 %13977, %319
  %13979 = add nsw i64 %13978, %323
  br label %"for blur_y.s0.x.x.rebased1319"

"produce blur_x1309":                             ; preds = %"for blur_y.s0.x.x.rebased1303"
  %t8161310 = add nsw i32 %376, %13963
  %13980 = sext i32 %t8161310 to i64
  %13981 = getelementptr inbounds i16, i16* %read_input784, i64 %13980
  %13982 = getelementptr inbounds i16, i16* %13981, i64 1
  %13983 = bitcast i16* %13982 to <16 x i16>*
  %13984 = load <16 x i16>, <16 x i16>* %13983, align 2, !tbaa !396
  %13985 = getelementptr inbounds i16, i16* %13981, i64 17
  %13986 = bitcast i16* %13985 to <16 x i16>*
  %13987 = load <16 x i16>, <16 x i16>* %13986, align 2, !tbaa !396
  %13988 = getelementptr inbounds i16, i16* %13981, i64 2
  %13989 = bitcast i16* %13988 to <16 x i16>*
  %13990 = load <16 x i16>, <16 x i16>* %13989, align 2, !tbaa !396
  %13991 = getelementptr inbounds i16, i16* %13981, i64 18
  %13992 = bitcast i16* %13991 to <16 x i16>*
  %13993 = load <16 x i16>, <16 x i16>* %13992, align 2, !tbaa !396
  %13994 = bitcast i16* %13981 to <16 x i16>*
  %13995 = load <16 x i16>, <16 x i16>* %13994, align 2, !tbaa !396
  %13996 = getelementptr inbounds i16, i16* %13981, i64 16
  %13997 = bitcast i16* %13996 to <16 x i16>*
  %13998 = load <16 x i16>, <16 x i16>* %13997, align 2, !tbaa !396
  %13999 = add <16 x i16> %13990, %13984
  %14000 = add <16 x i16> %13999, %13995
  %14001 = add <16 x i16> %13993, %13987
  %14002 = add <16 x i16> %14001, %13998
  %14003 = shufflevector <16 x i16> %14000, <16 x i16> %14002, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14004 = udiv <32 x i16> %14003, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14005 = shufflevector <32 x i16> %14004, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14006 = shl nsw i64 %13960, 5
  %14007 = add nsw i64 %14006, %13865
  %14008 = getelementptr inbounds i16, i16* %blur_x841, i64 %14007
  %14009 = bitcast i16* %14008 to <16 x i16>*
  store <16 x i16> %14005, <16 x i16>* %14009, align 2, !tbaa !399
  %14010 = shufflevector <32 x i16> %14004, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14011 = getelementptr inbounds i16, i16* %14008, i64 16
  %14012 = bitcast i16* %14011 to <16 x i16>*
  store <16 x i16> %14010, <16 x i16>* %14012, align 2, !tbaa !399
  br label %"consume blur_x1311"

"consume blur_x1311":                             ; preds = %"for blur_y.s0.x.x.rebased1303.consume blur_x1311_crit_edge", %"produce blur_x1309"
  %.pre-phi3419 = phi i64 [ %.pre3418, %"for blur_y.s0.x.x.rebased1303.consume blur_x1311_crit_edge" ], [ %14006, %"produce blur_x1309" ]
  %14013 = add nsw i64 %13868, %.pre-phi3419
  %14014 = getelementptr inbounds i16, i16* %blur_x841, i64 %14013
  %14015 = bitcast i16* %14014 to <16 x i16>*
  %14016 = load <16 x i16>, <16 x i16>* %14015, align 2, !tbaa !399
  %14017 = getelementptr inbounds i16, i16* %14014, i64 16
  %14018 = bitcast i16* %14017 to <16 x i16>*
  %14019 = load <16 x i16>, <16 x i16>* %14018, align 2, !tbaa !399
  %14020 = add nsw i64 %13871, %.pre-phi3419
  %14021 = getelementptr inbounds i16, i16* %blur_x841, i64 %14020
  %14022 = bitcast i16* %14021 to <16 x i16>*
  %14023 = load <16 x i16>, <16 x i16>* %14022, align 2, !tbaa !399
  %14024 = getelementptr inbounds i16, i16* %14021, i64 16
  %14025 = bitcast i16* %14024 to <16 x i16>*
  %14026 = load <16 x i16>, <16 x i16>* %14025, align 2, !tbaa !399
  %14027 = add nsw i64 %13874, %.pre-phi3419
  %14028 = getelementptr inbounds i16, i16* %blur_x841, i64 %14027
  %14029 = bitcast i16* %14028 to <16 x i16>*
  %14030 = load <16 x i16>, <16 x i16>* %14029, align 2, !tbaa !399
  %14031 = getelementptr inbounds i16, i16* %14028, i64 16
  %14032 = bitcast i16* %14031 to <16 x i16>*
  %14033 = load <16 x i16>, <16 x i16>* %14032, align 2, !tbaa !399
  %14034 = add <16 x i16> %14023, %14016
  %14035 = add <16 x i16> %14034, %14030
  %14036 = add <16 x i16> %14026, %14019
  %14037 = add <16 x i16> %14036, %14033
  %14038 = shufflevector <16 x i16> %14035, <16 x i16> %14037, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14039 = udiv <32 x i16> %14038, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14040 = shufflevector <32 x i16> %14039, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14041 = add nsw i64 %13878, %.pre-phi3419
  %14042 = getelementptr inbounds i16, i16* %258, i64 %14041
  %14043 = bitcast i16* %14042 to <16 x i16>*
  store <16 x i16> %14040, <16 x i16>* %14043, align 2, !tbaa !401
  %14044 = shufflevector <32 x i16> %14039, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14045 = getelementptr inbounds i16, i16* %14042, i64 16
  %14046 = bitcast i16* %14045 to <16 x i16>*
  store <16 x i16> %14044, <16 x i16>* %14046, align 2, !tbaa !401
  %indvars.iv.next3261 = add nuw nsw i64 %indvars.iv3260, 1
  %.not2523 = icmp eq i64 %indvars.iv.next3261, %515
  br i1 %.not2523, label %"end for blur_y.s0.x.x.rebased1304", label %"for blur_y.s0.x.x.rebased1303"

"for blur_y.s0.x.x.rebased1319":                  ; preds = %"for blur_y.s0.x.x.rebased1319.preheader", %"consume blur_x1330"
  %blur_y.s0.x.x.rebased1321 = phi i32 [ %14121, %"consume blur_x1330" ], [ 0, %"for blur_y.s0.x.x.rebased1319.preheader" ]
  %14047 = add nsw i32 %blur_y.s0.x.x.rebased1321, %t1582776
  %a2428 = shl nsw i32 %14047, 5
  %14048 = icmp sgt i32 %t1603, %a2428
  %blur_y.s0.x.v0.base.s1322 = select i1 %14048, i32 %a2428, i32 %t1603
  %14049 = icmp slt i32 %14047, 1
  %14050 = icmp sgt i32 %194, %a2428
  %14051 = or i1 %14049, %14050
  br i1 %14051, label %"produce blur_x1327", label %"consume blur_x1330"

"end for blur_y.s0.x.x.rebased1320":              ; preds = %"consume blur_x1330", %"end for blur_y.s0.x.x.rebased1304"
  br i1 %225, label %"produce blur_x1334", label %after_bb1331

"produce blur_x1327":                             ; preds = %"for blur_y.s0.x.x.rebased1319"
  %14052 = icmp slt i32 %blur_y.s0.x.v0.base.s1322, %194
  %blur_x.s0.x.v1.base.s1328 = select i1 %14052, i32 %blur_y.s0.x.v0.base.s1322, i32 %194
  %t8211329 = add nsw i32 %376, %blur_x.s0.x.v1.base.s1328
  %14053 = sext i32 %t8211329 to i64
  %14054 = getelementptr inbounds i16, i16* %read_input784, i64 %14053
  %14055 = getelementptr inbounds i16, i16* %14054, i64 1
  %14056 = bitcast i16* %14055 to <16 x i16>*
  %14057 = load <16 x i16>, <16 x i16>* %14056, align 2, !tbaa !396
  %14058 = getelementptr inbounds i16, i16* %14054, i64 17
  %14059 = bitcast i16* %14058 to <16 x i16>*
  %14060 = load <16 x i16>, <16 x i16>* %14059, align 2, !tbaa !396
  %14061 = getelementptr inbounds i16, i16* %14054, i64 2
  %14062 = bitcast i16* %14061 to <16 x i16>*
  %14063 = load <16 x i16>, <16 x i16>* %14062, align 2, !tbaa !396
  %14064 = getelementptr inbounds i16, i16* %14054, i64 18
  %14065 = bitcast i16* %14064 to <16 x i16>*
  %14066 = load <16 x i16>, <16 x i16>* %14065, align 2, !tbaa !396
  %14067 = bitcast i16* %14054 to <16 x i16>*
  %14068 = load <16 x i16>, <16 x i16>* %14067, align 2, !tbaa !396
  %14069 = getelementptr inbounds i16, i16* %14054, i64 16
  %14070 = bitcast i16* %14069 to <16 x i16>*
  %14071 = load <16 x i16>, <16 x i16>* %14070, align 2, !tbaa !396
  %14072 = add <16 x i16> %14063, %14057
  %14073 = add <16 x i16> %14072, %14068
  %14074 = add <16 x i16> %14066, %14060
  %14075 = add <16 x i16> %14074, %14071
  %14076 = shufflevector <16 x i16> %14073, <16 x i16> %14075, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14077 = udiv <32 x i16> %14076, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14078 = shufflevector <32 x i16> %14077, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14079 = sext i32 %blur_x.s0.x.v1.base.s1328 to i64
  %14080 = add nsw i64 %14079, %13966
  %14081 = getelementptr inbounds i16, i16* %blur_x841, i64 %14080
  %14082 = bitcast i16* %14081 to <16 x i16>*
  store <16 x i16> %14078, <16 x i16>* %14082, align 2, !tbaa !399
  %14083 = shufflevector <32 x i16> %14077, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14084 = getelementptr inbounds i16, i16* %14081, i64 16
  %14085 = bitcast i16* %14084 to <16 x i16>*
  store <16 x i16> %14083, <16 x i16>* %14085, align 2, !tbaa !399
  br label %"consume blur_x1330"

"consume blur_x1330":                             ; preds = %"for blur_y.s0.x.x.rebased1319", %"produce blur_x1327"
  %14086 = sext i32 %blur_y.s0.x.v0.base.s1322 to i64
  %14087 = add nsw i64 %13969, %14086
  %14088 = getelementptr inbounds i16, i16* %blur_x841, i64 %14087
  %14089 = bitcast i16* %14088 to <16 x i16>*
  %14090 = load <16 x i16>, <16 x i16>* %14089, align 2, !tbaa !399
  %14091 = getelementptr inbounds i16, i16* %14088, i64 16
  %14092 = bitcast i16* %14091 to <16 x i16>*
  %14093 = load <16 x i16>, <16 x i16>* %14092, align 2, !tbaa !399
  %14094 = add nsw i64 %13972, %14086
  %14095 = getelementptr inbounds i16, i16* %blur_x841, i64 %14094
  %14096 = bitcast i16* %14095 to <16 x i16>*
  %14097 = load <16 x i16>, <16 x i16>* %14096, align 2, !tbaa !399
  %14098 = getelementptr inbounds i16, i16* %14095, i64 16
  %14099 = bitcast i16* %14098 to <16 x i16>*
  %14100 = load <16 x i16>, <16 x i16>* %14099, align 2, !tbaa !399
  %14101 = add nsw i64 %13975, %14086
  %14102 = getelementptr inbounds i16, i16* %blur_x841, i64 %14101
  %14103 = bitcast i16* %14102 to <16 x i16>*
  %14104 = load <16 x i16>, <16 x i16>* %14103, align 2, !tbaa !399
  %14105 = getelementptr inbounds i16, i16* %14102, i64 16
  %14106 = bitcast i16* %14105 to <16 x i16>*
  %14107 = load <16 x i16>, <16 x i16>* %14106, align 2, !tbaa !399
  %14108 = add <16 x i16> %14097, %14090
  %14109 = add <16 x i16> %14108, %14104
  %14110 = add <16 x i16> %14100, %14093
  %14111 = add <16 x i16> %14110, %14107
  %14112 = shufflevector <16 x i16> %14109, <16 x i16> %14111, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14113 = udiv <32 x i16> %14112, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14114 = shufflevector <32 x i16> %14113, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14115 = add nsw i64 %13979, %14086
  %14116 = getelementptr inbounds i16, i16* %258, i64 %14115
  %14117 = bitcast i16* %14116 to <16 x i16>*
  store <16 x i16> %14114, <16 x i16>* %14117, align 2, !tbaa !401
  %14118 = shufflevector <32 x i16> %14113, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14119 = getelementptr inbounds i16, i16* %14116, i64 16
  %14120 = bitcast i16* %14119 to <16 x i16>*
  store <16 x i16> %14118, <16 x i16>* %14120, align 2, !tbaa !401
  %14121 = add nuw nsw i32 %blur_y.s0.x.x.rebased1321, 1
  %.not2522 = icmp eq i32 %14121, %t1639860
  br i1 %.not2522, label %"end for blur_y.s0.x.x.rebased1320", label %"for blur_y.s0.x.x.rebased1319"

after_bb1331:                                     ; preds = %"end for blur_y.s0.x.x.rebased1320", %"produce blur_x1334"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1346.preheader", label %"end for blur_y.s0.x.x.rebased1347", !prof !386

"for blur_y.s0.x.x.rebased1346.preheader":        ; preds = %after_bb1331
  %14122 = sext i32 %t1638848 to i64
  %14123 = zext i32 %.pre-phi3401 to i64
  %14124 = mul nsw i64 %14123, %322
  %14125 = sub nsw i64 %14124, %293
  %14126 = zext i32 %.pre-phi3387 to i64
  %14127 = mul nsw i64 %14126, %322
  %14128 = sub nsw i64 %14127, %293
  %14129 = zext i32 %.pre-phi3395 to i64
  %14130 = mul nsw i64 %14129, %322
  %14131 = sub nsw i64 %14130, %293
  %14132 = sext i32 %a365 to i64
  %14133 = add nsw i64 %14132, 10
  %14134 = mul nsw i64 %14133, %319
  %14135 = add nsw i64 %14134, %323
  br label %"for blur_y.s0.x.x.rebased1346"

"produce blur_x1334":                             ; preds = %"end for blur_y.s0.x.x.rebased1320"
  %14136 = getelementptr inbounds i16, i16* %read_input784, i64 %380
  %14137 = getelementptr inbounds i16, i16* %14136, i64 -31
  %14138 = bitcast i16* %14137 to <16 x i16>*
  %14139 = load <16 x i16>, <16 x i16>* %14138, align 2, !tbaa !396
  %14140 = getelementptr inbounds i16, i16* %14136, i64 -15
  %14141 = bitcast i16* %14140 to <16 x i16>*
  %14142 = load <16 x i16>, <16 x i16>* %14141, align 2, !tbaa !396
  %14143 = getelementptr inbounds i16, i16* %14136, i64 -30
  %14144 = bitcast i16* %14143 to <16 x i16>*
  %14145 = load <16 x i16>, <16 x i16>* %14144, align 2, !tbaa !396
  %14146 = getelementptr inbounds i16, i16* %14136, i64 -14
  %14147 = bitcast i16* %14146 to <16 x i16>*
  %14148 = load <16 x i16>, <16 x i16>* %14147, align 2, !tbaa !396
  %14149 = getelementptr inbounds i16, i16* %14136, i64 -32
  %14150 = bitcast i16* %14149 to <16 x i16>*
  %14151 = load <16 x i16>, <16 x i16>* %14150, align 2, !tbaa !396
  %14152 = getelementptr inbounds i16, i16* %14136, i64 -16
  %14153 = bitcast i16* %14152 to <16 x i16>*
  %14154 = load <16 x i16>, <16 x i16>* %14153, align 2, !tbaa !396
  %14155 = add <16 x i16> %14145, %14139
  %14156 = add <16 x i16> %14155, %14151
  %14157 = add <16 x i16> %14148, %14142
  %14158 = add <16 x i16> %14157, %14154
  %14159 = shufflevector <16 x i16> %14156, <16 x i16> %14158, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14160 = udiv <32 x i16> %14159, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14161 = shufflevector <32 x i16> %14160, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14162 = zext i32 %.pre-phi3387 to i64
  %14163 = mul nsw i64 %294, %14162
  %14164 = add nsw i64 %296, %14163
  %14165 = getelementptr inbounds i16, i16* %blur_x841, i64 %14164
  %14166 = getelementptr inbounds i16, i16* %14165, i64 -32
  %14167 = bitcast i16* %14166 to <16 x i16>*
  store <16 x i16> %14161, <16 x i16>* %14167, align 2, !tbaa !399
  %14168 = shufflevector <32 x i16> %14160, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14169 = getelementptr inbounds i16, i16* %14165, i64 -16
  %14170 = bitcast i16* %14169 to <16 x i16>*
  store <16 x i16> %14168, <16 x i16>* %14170, align 2, !tbaa !399
  %14171 = zext i32 %.pre-phi3401 to i64
  %14172 = mul nsw i64 %14171, %318
  %14173 = add nsw i64 %14172, %291
  %14174 = getelementptr inbounds i16, i16* %blur_x841, i64 %14173
  %14175 = getelementptr inbounds i16, i16* %14174, i64 -32
  %14176 = bitcast i16* %14175 to <16 x i16>*
  %14177 = load <16 x i16>, <16 x i16>* %14176, align 2, !tbaa !399
  %14178 = getelementptr inbounds i16, i16* %14174, i64 -16
  %14179 = bitcast i16* %14178 to <16 x i16>*
  %14180 = load <16 x i16>, <16 x i16>* %14179, align 2, !tbaa !399
  %14181 = mul nsw i64 %14162, %318
  %14182 = add nsw i64 %14181, %291
  %14183 = getelementptr inbounds i16, i16* %blur_x841, i64 %14182
  %14184 = getelementptr inbounds i16, i16* %14183, i64 -32
  %14185 = bitcast i16* %14184 to <16 x i16>*
  %14186 = load <16 x i16>, <16 x i16>* %14185, align 2, !tbaa !399
  %14187 = getelementptr inbounds i16, i16* %14183, i64 -16
  %14188 = bitcast i16* %14187 to <16 x i16>*
  %14189 = load <16 x i16>, <16 x i16>* %14188, align 2, !tbaa !399
  %14190 = zext i32 %.pre-phi3395 to i64
  %14191 = mul nsw i64 %14190, %318
  %14192 = add nsw i64 %14191, %291
  %14193 = getelementptr inbounds i16, i16* %blur_x841, i64 %14192
  %14194 = getelementptr inbounds i16, i16* %14193, i64 -32
  %14195 = bitcast i16* %14194 to <16 x i16>*
  %14196 = load <16 x i16>, <16 x i16>* %14195, align 2, !tbaa !399
  %14197 = getelementptr inbounds i16, i16* %14193, i64 -16
  %14198 = bitcast i16* %14197 to <16 x i16>*
  %14199 = load <16 x i16>, <16 x i16>* %14198, align 2, !tbaa !399
  %14200 = add <16 x i16> %14186, %14177
  %14201 = add <16 x i16> %14200, %14196
  %14202 = add <16 x i16> %14189, %14180
  %14203 = add <16 x i16> %14202, %14199
  %14204 = shufflevector <16 x i16> %14201, <16 x i16> %14203, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14205 = udiv <32 x i16> %14204, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14206 = shufflevector <32 x i16> %14205, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14207 = sext i32 %a365 to i64
  %14208 = add nsw i64 %14207, 10
  %14209 = mul nsw i64 %14208, %319
  %14210 = add nsw i64 %321, %14209
  %14211 = getelementptr inbounds i16, i16* %258, i64 %14210
  %14212 = getelementptr inbounds i16, i16* %14211, i64 -32
  %14213 = bitcast i16* %14212 to <16 x i16>*
  store <16 x i16> %14206, <16 x i16>* %14213, align 2, !tbaa !401
  %14214 = shufflevector <32 x i16> %14205, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14215 = getelementptr inbounds i16, i16* %14211, i64 -16
  %14216 = bitcast i16* %14215 to <16 x i16>*
  store <16 x i16> %14214, <16 x i16>* %14216, align 2, !tbaa !401
  br label %after_bb1331

"for blur_y.s0.x.x.rebased1346":                  ; preds = %"for blur_y.s0.x.x.rebased1346.preheader", %"consume blur_x1354"
  %indvars.iv3262 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1346.preheader" ], [ %indvars.iv.next3263, %"consume blur_x1354" ]
  %14217 = add nsw i64 %indvars.iv3262, %298
  %14218 = icmp slt i64 %14217, 1
  %14219 = trunc i64 %14217 to i32
  %14220 = shl nsw i32 %14219, 5
  %14221 = icmp sgt i32 %194, %14220
  %14222 = or i1 %14218, %14221
  br i1 %14222, label %"produce blur_x1352", label %"for blur_y.s0.x.x.rebased1346.consume blur_x1354_crit_edge"

"for blur_y.s0.x.x.rebased1346.consume blur_x1354_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1346"
  %.pre3420 = shl nsw i64 %14217, 5
  br label %"consume blur_x1354"

"end for blur_y.s0.x.x.rebased1347":              ; preds = %"consume blur_x1354", %after_bb1331
  br i1 %299, label %"for blur_y.s0.x.x.rebased1362.preheader", label %"end for blur_y.s0.x.x.rebased1363", !prof !386

"for blur_y.s0.x.x.rebased1362.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1347"
  %14223 = sext i32 %t1638848 to i64
  %14224 = zext i32 %.pre-phi3401 to i64
  %14225 = mul nsw i64 %14224, %322
  %14226 = sub nsw i64 %14225, %293
  %14227 = zext i32 %.pre-phi3387 to i64
  %14228 = mul nsw i64 %14227, %322
  %14229 = sub nsw i64 %14228, %293
  %14230 = zext i32 %.pre-phi3395 to i64
  %14231 = mul nsw i64 %14230, %322
  %14232 = sub nsw i64 %14231, %293
  %14233 = sext i32 %a365 to i64
  %14234 = add nsw i64 %14233, 10
  %14235 = mul nsw i64 %14234, %319
  %14236 = add nsw i64 %14235, %323
  br label %"for blur_y.s0.x.x.rebased1362"

"produce blur_x1352":                             ; preds = %"for blur_y.s0.x.x.rebased1346"
  %t8321353 = add nsw i32 %382, %14220
  %14237 = sext i32 %t8321353 to i64
  %14238 = getelementptr inbounds i16, i16* %read_input784, i64 %14237
  %14239 = getelementptr inbounds i16, i16* %14238, i64 1
  %14240 = bitcast i16* %14239 to <16 x i16>*
  %14241 = load <16 x i16>, <16 x i16>* %14240, align 2, !tbaa !396
  %14242 = getelementptr inbounds i16, i16* %14238, i64 17
  %14243 = bitcast i16* %14242 to <16 x i16>*
  %14244 = load <16 x i16>, <16 x i16>* %14243, align 2, !tbaa !396
  %14245 = getelementptr inbounds i16, i16* %14238, i64 2
  %14246 = bitcast i16* %14245 to <16 x i16>*
  %14247 = load <16 x i16>, <16 x i16>* %14246, align 2, !tbaa !396
  %14248 = getelementptr inbounds i16, i16* %14238, i64 18
  %14249 = bitcast i16* %14248 to <16 x i16>*
  %14250 = load <16 x i16>, <16 x i16>* %14249, align 2, !tbaa !396
  %14251 = bitcast i16* %14238 to <16 x i16>*
  %14252 = load <16 x i16>, <16 x i16>* %14251, align 2, !tbaa !396
  %14253 = getelementptr inbounds i16, i16* %14238, i64 16
  %14254 = bitcast i16* %14253 to <16 x i16>*
  %14255 = load <16 x i16>, <16 x i16>* %14254, align 2, !tbaa !396
  %14256 = add <16 x i16> %14247, %14241
  %14257 = add <16 x i16> %14256, %14252
  %14258 = add <16 x i16> %14250, %14244
  %14259 = add <16 x i16> %14258, %14255
  %14260 = shufflevector <16 x i16> %14257, <16 x i16> %14259, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14261 = udiv <32 x i16> %14260, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14262 = shufflevector <32 x i16> %14261, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14263 = shl nsw i64 %14217, 5
  %14264 = add nsw i64 %14263, %14122
  %14265 = getelementptr inbounds i16, i16* %blur_x841, i64 %14264
  %14266 = bitcast i16* %14265 to <16 x i16>*
  store <16 x i16> %14262, <16 x i16>* %14266, align 2, !tbaa !399
  %14267 = shufflevector <32 x i16> %14261, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14268 = getelementptr inbounds i16, i16* %14265, i64 16
  %14269 = bitcast i16* %14268 to <16 x i16>*
  store <16 x i16> %14267, <16 x i16>* %14269, align 2, !tbaa !399
  br label %"consume blur_x1354"

"consume blur_x1354":                             ; preds = %"for blur_y.s0.x.x.rebased1346.consume blur_x1354_crit_edge", %"produce blur_x1352"
  %.pre-phi3421 = phi i64 [ %.pre3420, %"for blur_y.s0.x.x.rebased1346.consume blur_x1354_crit_edge" ], [ %14263, %"produce blur_x1352" ]
  %14270 = add nsw i64 %14125, %.pre-phi3421
  %14271 = getelementptr inbounds i16, i16* %blur_x841, i64 %14270
  %14272 = bitcast i16* %14271 to <16 x i16>*
  %14273 = load <16 x i16>, <16 x i16>* %14272, align 2, !tbaa !399
  %14274 = getelementptr inbounds i16, i16* %14271, i64 16
  %14275 = bitcast i16* %14274 to <16 x i16>*
  %14276 = load <16 x i16>, <16 x i16>* %14275, align 2, !tbaa !399
  %14277 = add nsw i64 %14128, %.pre-phi3421
  %14278 = getelementptr inbounds i16, i16* %blur_x841, i64 %14277
  %14279 = bitcast i16* %14278 to <16 x i16>*
  %14280 = load <16 x i16>, <16 x i16>* %14279, align 2, !tbaa !399
  %14281 = getelementptr inbounds i16, i16* %14278, i64 16
  %14282 = bitcast i16* %14281 to <16 x i16>*
  %14283 = load <16 x i16>, <16 x i16>* %14282, align 2, !tbaa !399
  %14284 = add nsw i64 %14131, %.pre-phi3421
  %14285 = getelementptr inbounds i16, i16* %blur_x841, i64 %14284
  %14286 = bitcast i16* %14285 to <16 x i16>*
  %14287 = load <16 x i16>, <16 x i16>* %14286, align 2, !tbaa !399
  %14288 = getelementptr inbounds i16, i16* %14285, i64 16
  %14289 = bitcast i16* %14288 to <16 x i16>*
  %14290 = load <16 x i16>, <16 x i16>* %14289, align 2, !tbaa !399
  %14291 = add <16 x i16> %14280, %14273
  %14292 = add <16 x i16> %14291, %14287
  %14293 = add <16 x i16> %14283, %14276
  %14294 = add <16 x i16> %14293, %14290
  %14295 = shufflevector <16 x i16> %14292, <16 x i16> %14294, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14296 = udiv <32 x i16> %14295, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14297 = shufflevector <32 x i16> %14296, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14298 = add nsw i64 %14135, %.pre-phi3421
  %14299 = getelementptr inbounds i16, i16* %258, i64 %14298
  %14300 = bitcast i16* %14299 to <16 x i16>*
  store <16 x i16> %14297, <16 x i16>* %14300, align 2, !tbaa !401
  %14301 = shufflevector <32 x i16> %14296, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14302 = getelementptr inbounds i16, i16* %14299, i64 16
  %14303 = bitcast i16* %14302 to <16 x i16>*
  store <16 x i16> %14301, <16 x i16>* %14303, align 2, !tbaa !401
  %indvars.iv.next3263 = add nuw nsw i64 %indvars.iv3262, 1
  %.not2519 = icmp eq i64 %indvars.iv.next3263, %515
  br i1 %.not2519, label %"end for blur_y.s0.x.x.rebased1347", label %"for blur_y.s0.x.x.rebased1346"

"for blur_y.s0.x.x.rebased1362":                  ; preds = %"for blur_y.s0.x.x.rebased1362.preheader", %"consume blur_x1373"
  %blur_y.s0.x.x.rebased1364 = phi i32 [ %14378, %"consume blur_x1373" ], [ 0, %"for blur_y.s0.x.x.rebased1362.preheader" ]
  %14304 = add nsw i32 %blur_y.s0.x.x.rebased1364, %t1582776
  %a2585 = shl nsw i32 %14304, 5
  %14305 = icmp sgt i32 %t1603, %a2585
  %blur_y.s0.x.v0.base.s1365 = select i1 %14305, i32 %a2585, i32 %t1603
  %14306 = icmp slt i32 %14304, 1
  %14307 = icmp sgt i32 %194, %a2585
  %14308 = or i1 %14306, %14307
  br i1 %14308, label %"produce blur_x1370", label %"consume blur_x1373"

"end for blur_y.s0.x.x.rebased1363":              ; preds = %"consume blur_x1373", %"end for blur_y.s0.x.x.rebased1347"
  br i1 %225, label %"produce blur_x1377", label %after_bb1374

"produce blur_x1370":                             ; preds = %"for blur_y.s0.x.x.rebased1362"
  %14309 = icmp slt i32 %blur_y.s0.x.v0.base.s1365, %194
  %blur_x.s0.x.v1.base.s1371 = select i1 %14309, i32 %blur_y.s0.x.v0.base.s1365, i32 %194
  %t8371372 = add nsw i32 %382, %blur_x.s0.x.v1.base.s1371
  %14310 = sext i32 %t8371372 to i64
  %14311 = getelementptr inbounds i16, i16* %read_input784, i64 %14310
  %14312 = getelementptr inbounds i16, i16* %14311, i64 1
  %14313 = bitcast i16* %14312 to <16 x i16>*
  %14314 = load <16 x i16>, <16 x i16>* %14313, align 2, !tbaa !396
  %14315 = getelementptr inbounds i16, i16* %14311, i64 17
  %14316 = bitcast i16* %14315 to <16 x i16>*
  %14317 = load <16 x i16>, <16 x i16>* %14316, align 2, !tbaa !396
  %14318 = getelementptr inbounds i16, i16* %14311, i64 2
  %14319 = bitcast i16* %14318 to <16 x i16>*
  %14320 = load <16 x i16>, <16 x i16>* %14319, align 2, !tbaa !396
  %14321 = getelementptr inbounds i16, i16* %14311, i64 18
  %14322 = bitcast i16* %14321 to <16 x i16>*
  %14323 = load <16 x i16>, <16 x i16>* %14322, align 2, !tbaa !396
  %14324 = bitcast i16* %14311 to <16 x i16>*
  %14325 = load <16 x i16>, <16 x i16>* %14324, align 2, !tbaa !396
  %14326 = getelementptr inbounds i16, i16* %14311, i64 16
  %14327 = bitcast i16* %14326 to <16 x i16>*
  %14328 = load <16 x i16>, <16 x i16>* %14327, align 2, !tbaa !396
  %14329 = add <16 x i16> %14320, %14314
  %14330 = add <16 x i16> %14329, %14325
  %14331 = add <16 x i16> %14323, %14317
  %14332 = add <16 x i16> %14331, %14328
  %14333 = shufflevector <16 x i16> %14330, <16 x i16> %14332, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14334 = udiv <32 x i16> %14333, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14335 = shufflevector <32 x i16> %14334, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14336 = sext i32 %blur_x.s0.x.v1.base.s1371 to i64
  %14337 = add nsw i64 %14336, %14223
  %14338 = getelementptr inbounds i16, i16* %blur_x841, i64 %14337
  %14339 = bitcast i16* %14338 to <16 x i16>*
  store <16 x i16> %14335, <16 x i16>* %14339, align 2, !tbaa !399
  %14340 = shufflevector <32 x i16> %14334, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14341 = getelementptr inbounds i16, i16* %14338, i64 16
  %14342 = bitcast i16* %14341 to <16 x i16>*
  store <16 x i16> %14340, <16 x i16>* %14342, align 2, !tbaa !399
  br label %"consume blur_x1373"

"consume blur_x1373":                             ; preds = %"for blur_y.s0.x.x.rebased1362", %"produce blur_x1370"
  %14343 = sext i32 %blur_y.s0.x.v0.base.s1365 to i64
  %14344 = add nsw i64 %14226, %14343
  %14345 = getelementptr inbounds i16, i16* %blur_x841, i64 %14344
  %14346 = bitcast i16* %14345 to <16 x i16>*
  %14347 = load <16 x i16>, <16 x i16>* %14346, align 2, !tbaa !399
  %14348 = getelementptr inbounds i16, i16* %14345, i64 16
  %14349 = bitcast i16* %14348 to <16 x i16>*
  %14350 = load <16 x i16>, <16 x i16>* %14349, align 2, !tbaa !399
  %14351 = add nsw i64 %14229, %14343
  %14352 = getelementptr inbounds i16, i16* %blur_x841, i64 %14351
  %14353 = bitcast i16* %14352 to <16 x i16>*
  %14354 = load <16 x i16>, <16 x i16>* %14353, align 2, !tbaa !399
  %14355 = getelementptr inbounds i16, i16* %14352, i64 16
  %14356 = bitcast i16* %14355 to <16 x i16>*
  %14357 = load <16 x i16>, <16 x i16>* %14356, align 2, !tbaa !399
  %14358 = add nsw i64 %14232, %14343
  %14359 = getelementptr inbounds i16, i16* %blur_x841, i64 %14358
  %14360 = bitcast i16* %14359 to <16 x i16>*
  %14361 = load <16 x i16>, <16 x i16>* %14360, align 2, !tbaa !399
  %14362 = getelementptr inbounds i16, i16* %14359, i64 16
  %14363 = bitcast i16* %14362 to <16 x i16>*
  %14364 = load <16 x i16>, <16 x i16>* %14363, align 2, !tbaa !399
  %14365 = add <16 x i16> %14354, %14347
  %14366 = add <16 x i16> %14365, %14361
  %14367 = add <16 x i16> %14357, %14350
  %14368 = add <16 x i16> %14367, %14364
  %14369 = shufflevector <16 x i16> %14366, <16 x i16> %14368, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14370 = udiv <32 x i16> %14369, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14371 = shufflevector <32 x i16> %14370, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14372 = add nsw i64 %14236, %14343
  %14373 = getelementptr inbounds i16, i16* %258, i64 %14372
  %14374 = bitcast i16* %14373 to <16 x i16>*
  store <16 x i16> %14371, <16 x i16>* %14374, align 2, !tbaa !401
  %14375 = shufflevector <32 x i16> %14370, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14376 = getelementptr inbounds i16, i16* %14373, i64 16
  %14377 = bitcast i16* %14376 to <16 x i16>*
  store <16 x i16> %14375, <16 x i16>* %14377, align 2, !tbaa !401
  %14378 = add nuw nsw i32 %blur_y.s0.x.x.rebased1364, 1
  %.not2518 = icmp eq i32 %14378, %t1639860
  br i1 %.not2518, label %"end for blur_y.s0.x.x.rebased1363", label %"for blur_y.s0.x.x.rebased1362"

after_bb1374:                                     ; preds = %"end for blur_y.s0.x.x.rebased1363", %"produce blur_x1377"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1389.preheader", label %"end for blur_y.s0.x.x.rebased1390", !prof !386

"for blur_y.s0.x.x.rebased1389.preheader":        ; preds = %after_bb1374
  %14379 = sext i32 %t1644876 to i64
  %14380 = zext i32 %.pre-phi3387 to i64
  %14381 = mul nsw i64 %14380, %322
  %14382 = sub nsw i64 %14381, %293
  %14383 = zext i32 %.pre-phi3391 to i64
  %14384 = mul nsw i64 %14383, %322
  %14385 = sub nsw i64 %14384, %293
  %14386 = zext i32 %.pre-phi3401 to i64
  %14387 = mul nsw i64 %14386, %322
  %14388 = sub nsw i64 %14387, %293
  %14389 = sext i32 %a365 to i64
  %14390 = add nsw i64 %14389, 11
  %14391 = mul nsw i64 %14390, %319
  %14392 = add nsw i64 %14391, %323
  br label %"for blur_y.s0.x.x.rebased1389"

"produce blur_x1377":                             ; preds = %"end for blur_y.s0.x.x.rebased1363"
  %14393 = getelementptr inbounds i16, i16* %read_input784, i64 %386
  %14394 = getelementptr inbounds i16, i16* %14393, i64 -31
  %14395 = bitcast i16* %14394 to <16 x i16>*
  %14396 = load <16 x i16>, <16 x i16>* %14395, align 2, !tbaa !396
  %14397 = getelementptr inbounds i16, i16* %14393, i64 -15
  %14398 = bitcast i16* %14397 to <16 x i16>*
  %14399 = load <16 x i16>, <16 x i16>* %14398, align 2, !tbaa !396
  %14400 = getelementptr inbounds i16, i16* %14393, i64 -30
  %14401 = bitcast i16* %14400 to <16 x i16>*
  %14402 = load <16 x i16>, <16 x i16>* %14401, align 2, !tbaa !396
  %14403 = getelementptr inbounds i16, i16* %14393, i64 -14
  %14404 = bitcast i16* %14403 to <16 x i16>*
  %14405 = load <16 x i16>, <16 x i16>* %14404, align 2, !tbaa !396
  %14406 = getelementptr inbounds i16, i16* %14393, i64 -32
  %14407 = bitcast i16* %14406 to <16 x i16>*
  %14408 = load <16 x i16>, <16 x i16>* %14407, align 2, !tbaa !396
  %14409 = getelementptr inbounds i16, i16* %14393, i64 -16
  %14410 = bitcast i16* %14409 to <16 x i16>*
  %14411 = load <16 x i16>, <16 x i16>* %14410, align 2, !tbaa !396
  %14412 = add <16 x i16> %14402, %14396
  %14413 = add <16 x i16> %14412, %14408
  %14414 = add <16 x i16> %14405, %14399
  %14415 = add <16 x i16> %14414, %14411
  %14416 = shufflevector <16 x i16> %14413, <16 x i16> %14415, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14417 = udiv <32 x i16> %14416, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14418 = shufflevector <32 x i16> %14417, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14419 = zext i32 %.pre-phi3391 to i64
  %14420 = mul nsw i64 %294, %14419
  %14421 = add nsw i64 %296, %14420
  %14422 = getelementptr inbounds i16, i16* %blur_x841, i64 %14421
  %14423 = getelementptr inbounds i16, i16* %14422, i64 -32
  %14424 = bitcast i16* %14423 to <16 x i16>*
  store <16 x i16> %14418, <16 x i16>* %14424, align 2, !tbaa !399
  %14425 = shufflevector <32 x i16> %14417, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14426 = getelementptr inbounds i16, i16* %14422, i64 -16
  %14427 = bitcast i16* %14426 to <16 x i16>*
  store <16 x i16> %14425, <16 x i16>* %14427, align 2, !tbaa !399
  %14428 = zext i32 %.pre-phi3387 to i64
  %14429 = mul nsw i64 %14428, %318
  %14430 = add nsw i64 %14429, %291
  %14431 = getelementptr inbounds i16, i16* %blur_x841, i64 %14430
  %14432 = getelementptr inbounds i16, i16* %14431, i64 -32
  %14433 = bitcast i16* %14432 to <16 x i16>*
  %14434 = load <16 x i16>, <16 x i16>* %14433, align 2, !tbaa !399
  %14435 = getelementptr inbounds i16, i16* %14431, i64 -16
  %14436 = bitcast i16* %14435 to <16 x i16>*
  %14437 = load <16 x i16>, <16 x i16>* %14436, align 2, !tbaa !399
  %14438 = mul nsw i64 %14419, %318
  %14439 = add nsw i64 %14438, %291
  %14440 = getelementptr inbounds i16, i16* %blur_x841, i64 %14439
  %14441 = getelementptr inbounds i16, i16* %14440, i64 -32
  %14442 = bitcast i16* %14441 to <16 x i16>*
  %14443 = load <16 x i16>, <16 x i16>* %14442, align 2, !tbaa !399
  %14444 = getelementptr inbounds i16, i16* %14440, i64 -16
  %14445 = bitcast i16* %14444 to <16 x i16>*
  %14446 = load <16 x i16>, <16 x i16>* %14445, align 2, !tbaa !399
  %14447 = zext i32 %.pre-phi3401 to i64
  %14448 = mul nsw i64 %14447, %318
  %14449 = add nsw i64 %14448, %291
  %14450 = getelementptr inbounds i16, i16* %blur_x841, i64 %14449
  %14451 = getelementptr inbounds i16, i16* %14450, i64 -32
  %14452 = bitcast i16* %14451 to <16 x i16>*
  %14453 = load <16 x i16>, <16 x i16>* %14452, align 2, !tbaa !399
  %14454 = getelementptr inbounds i16, i16* %14450, i64 -16
  %14455 = bitcast i16* %14454 to <16 x i16>*
  %14456 = load <16 x i16>, <16 x i16>* %14455, align 2, !tbaa !399
  %14457 = add <16 x i16> %14443, %14434
  %14458 = add <16 x i16> %14457, %14453
  %14459 = add <16 x i16> %14446, %14437
  %14460 = add <16 x i16> %14459, %14456
  %14461 = shufflevector <16 x i16> %14458, <16 x i16> %14460, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14462 = udiv <32 x i16> %14461, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14463 = shufflevector <32 x i16> %14462, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14464 = sext i32 %a365 to i64
  %14465 = add nsw i64 %14464, 11
  %14466 = mul nsw i64 %14465, %319
  %14467 = add nsw i64 %321, %14466
  %14468 = getelementptr inbounds i16, i16* %258, i64 %14467
  %14469 = getelementptr inbounds i16, i16* %14468, i64 -32
  %14470 = bitcast i16* %14469 to <16 x i16>*
  store <16 x i16> %14463, <16 x i16>* %14470, align 2, !tbaa !401
  %14471 = shufflevector <32 x i16> %14462, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14472 = getelementptr inbounds i16, i16* %14468, i64 -16
  %14473 = bitcast i16* %14472 to <16 x i16>*
  store <16 x i16> %14471, <16 x i16>* %14473, align 2, !tbaa !401
  br label %after_bb1374

"for blur_y.s0.x.x.rebased1389":                  ; preds = %"for blur_y.s0.x.x.rebased1389.preheader", %"consume blur_x1397"
  %indvars.iv3264 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1389.preheader" ], [ %indvars.iv.next3265, %"consume blur_x1397" ]
  %14474 = add nsw i64 %indvars.iv3264, %298
  %14475 = icmp slt i64 %14474, 1
  %14476 = trunc i64 %14474 to i32
  %14477 = shl nsw i32 %14476, 5
  %14478 = icmp sgt i32 %194, %14477
  %14479 = or i1 %14475, %14478
  br i1 %14479, label %"produce blur_x1395", label %"for blur_y.s0.x.x.rebased1389.consume blur_x1397_crit_edge"

"for blur_y.s0.x.x.rebased1389.consume blur_x1397_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1389"
  %.pre3422 = shl nsw i64 %14474, 5
  br label %"consume blur_x1397"

"end for blur_y.s0.x.x.rebased1390":              ; preds = %"consume blur_x1397", %after_bb1374
  br i1 %299, label %"for blur_y.s0.x.x.rebased1405.preheader", label %"end for blur_y.s0.x.x.rebased1406", !prof !386

"for blur_y.s0.x.x.rebased1405.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1390"
  %14480 = sext i32 %t1644876 to i64
  %14481 = zext i32 %.pre-phi3387 to i64
  %14482 = mul nsw i64 %14481, %322
  %14483 = sub nsw i64 %14482, %293
  %14484 = zext i32 %.pre-phi3391 to i64
  %14485 = mul nsw i64 %14484, %322
  %14486 = sub nsw i64 %14485, %293
  %14487 = zext i32 %.pre-phi3401 to i64
  %14488 = mul nsw i64 %14487, %322
  %14489 = sub nsw i64 %14488, %293
  %14490 = sext i32 %a365 to i64
  %14491 = add nsw i64 %14490, 11
  %14492 = mul nsw i64 %14491, %319
  %14493 = add nsw i64 %14492, %323
  br label %"for blur_y.s0.x.x.rebased1405"

"produce blur_x1395":                             ; preds = %"for blur_y.s0.x.x.rebased1389"
  %t8481396 = add nsw i32 %388, %14477
  %14494 = sext i32 %t8481396 to i64
  %14495 = getelementptr inbounds i16, i16* %read_input784, i64 %14494
  %14496 = getelementptr inbounds i16, i16* %14495, i64 1
  %14497 = bitcast i16* %14496 to <16 x i16>*
  %14498 = load <16 x i16>, <16 x i16>* %14497, align 2, !tbaa !396
  %14499 = getelementptr inbounds i16, i16* %14495, i64 17
  %14500 = bitcast i16* %14499 to <16 x i16>*
  %14501 = load <16 x i16>, <16 x i16>* %14500, align 2, !tbaa !396
  %14502 = getelementptr inbounds i16, i16* %14495, i64 2
  %14503 = bitcast i16* %14502 to <16 x i16>*
  %14504 = load <16 x i16>, <16 x i16>* %14503, align 2, !tbaa !396
  %14505 = getelementptr inbounds i16, i16* %14495, i64 18
  %14506 = bitcast i16* %14505 to <16 x i16>*
  %14507 = load <16 x i16>, <16 x i16>* %14506, align 2, !tbaa !396
  %14508 = bitcast i16* %14495 to <16 x i16>*
  %14509 = load <16 x i16>, <16 x i16>* %14508, align 2, !tbaa !396
  %14510 = getelementptr inbounds i16, i16* %14495, i64 16
  %14511 = bitcast i16* %14510 to <16 x i16>*
  %14512 = load <16 x i16>, <16 x i16>* %14511, align 2, !tbaa !396
  %14513 = add <16 x i16> %14504, %14498
  %14514 = add <16 x i16> %14513, %14509
  %14515 = add <16 x i16> %14507, %14501
  %14516 = add <16 x i16> %14515, %14512
  %14517 = shufflevector <16 x i16> %14514, <16 x i16> %14516, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14518 = udiv <32 x i16> %14517, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14519 = shufflevector <32 x i16> %14518, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14520 = shl nsw i64 %14474, 5
  %14521 = add nsw i64 %14520, %14379
  %14522 = getelementptr inbounds i16, i16* %blur_x841, i64 %14521
  %14523 = bitcast i16* %14522 to <16 x i16>*
  store <16 x i16> %14519, <16 x i16>* %14523, align 2, !tbaa !399
  %14524 = shufflevector <32 x i16> %14518, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14525 = getelementptr inbounds i16, i16* %14522, i64 16
  %14526 = bitcast i16* %14525 to <16 x i16>*
  store <16 x i16> %14524, <16 x i16>* %14526, align 2, !tbaa !399
  br label %"consume blur_x1397"

"consume blur_x1397":                             ; preds = %"for blur_y.s0.x.x.rebased1389.consume blur_x1397_crit_edge", %"produce blur_x1395"
  %.pre-phi3423 = phi i64 [ %.pre3422, %"for blur_y.s0.x.x.rebased1389.consume blur_x1397_crit_edge" ], [ %14520, %"produce blur_x1395" ]
  %14527 = add nsw i64 %14382, %.pre-phi3423
  %14528 = getelementptr inbounds i16, i16* %blur_x841, i64 %14527
  %14529 = bitcast i16* %14528 to <16 x i16>*
  %14530 = load <16 x i16>, <16 x i16>* %14529, align 2, !tbaa !399
  %14531 = getelementptr inbounds i16, i16* %14528, i64 16
  %14532 = bitcast i16* %14531 to <16 x i16>*
  %14533 = load <16 x i16>, <16 x i16>* %14532, align 2, !tbaa !399
  %14534 = add nsw i64 %14385, %.pre-phi3423
  %14535 = getelementptr inbounds i16, i16* %blur_x841, i64 %14534
  %14536 = bitcast i16* %14535 to <16 x i16>*
  %14537 = load <16 x i16>, <16 x i16>* %14536, align 2, !tbaa !399
  %14538 = getelementptr inbounds i16, i16* %14535, i64 16
  %14539 = bitcast i16* %14538 to <16 x i16>*
  %14540 = load <16 x i16>, <16 x i16>* %14539, align 2, !tbaa !399
  %14541 = add nsw i64 %14388, %.pre-phi3423
  %14542 = getelementptr inbounds i16, i16* %blur_x841, i64 %14541
  %14543 = bitcast i16* %14542 to <16 x i16>*
  %14544 = load <16 x i16>, <16 x i16>* %14543, align 2, !tbaa !399
  %14545 = getelementptr inbounds i16, i16* %14542, i64 16
  %14546 = bitcast i16* %14545 to <16 x i16>*
  %14547 = load <16 x i16>, <16 x i16>* %14546, align 2, !tbaa !399
  %14548 = add <16 x i16> %14537, %14530
  %14549 = add <16 x i16> %14548, %14544
  %14550 = add <16 x i16> %14540, %14533
  %14551 = add <16 x i16> %14550, %14547
  %14552 = shufflevector <16 x i16> %14549, <16 x i16> %14551, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14553 = udiv <32 x i16> %14552, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14554 = shufflevector <32 x i16> %14553, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14555 = add nsw i64 %14392, %.pre-phi3423
  %14556 = getelementptr inbounds i16, i16* %258, i64 %14555
  %14557 = bitcast i16* %14556 to <16 x i16>*
  store <16 x i16> %14554, <16 x i16>* %14557, align 2, !tbaa !401
  %14558 = shufflevector <32 x i16> %14553, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14559 = getelementptr inbounds i16, i16* %14556, i64 16
  %14560 = bitcast i16* %14559 to <16 x i16>*
  store <16 x i16> %14558, <16 x i16>* %14560, align 2, !tbaa !401
  %indvars.iv.next3265 = add nuw nsw i64 %indvars.iv3264, 1
  %.not2515 = icmp eq i64 %indvars.iv.next3265, %515
  br i1 %.not2515, label %"end for blur_y.s0.x.x.rebased1390", label %"for blur_y.s0.x.x.rebased1389"

"for blur_y.s0.x.x.rebased1405":                  ; preds = %"for blur_y.s0.x.x.rebased1405.preheader", %"consume blur_x1416"
  %blur_y.s0.x.x.rebased1407 = phi i32 [ %14635, %"consume blur_x1416" ], [ 0, %"for blur_y.s0.x.x.rebased1405.preheader" ]
  %14561 = add nsw i32 %blur_y.s0.x.x.rebased1407, %t1582776
  %a2742 = shl nsw i32 %14561, 5
  %14562 = icmp sgt i32 %t1603, %a2742
  %blur_y.s0.x.v0.base.s1408 = select i1 %14562, i32 %a2742, i32 %t1603
  %14563 = icmp slt i32 %14561, 1
  %14564 = icmp sgt i32 %194, %a2742
  %14565 = or i1 %14563, %14564
  br i1 %14565, label %"produce blur_x1413", label %"consume blur_x1416"

"end for blur_y.s0.x.x.rebased1406":              ; preds = %"consume blur_x1416", %"end for blur_y.s0.x.x.rebased1390"
  br i1 %225, label %"produce blur_x1420", label %after_bb1417

"produce blur_x1413":                             ; preds = %"for blur_y.s0.x.x.rebased1405"
  %14566 = icmp slt i32 %blur_y.s0.x.v0.base.s1408, %194
  %blur_x.s0.x.v1.base.s1414 = select i1 %14566, i32 %blur_y.s0.x.v0.base.s1408, i32 %194
  %t8531415 = add nsw i32 %388, %blur_x.s0.x.v1.base.s1414
  %14567 = sext i32 %t8531415 to i64
  %14568 = getelementptr inbounds i16, i16* %read_input784, i64 %14567
  %14569 = getelementptr inbounds i16, i16* %14568, i64 1
  %14570 = bitcast i16* %14569 to <16 x i16>*
  %14571 = load <16 x i16>, <16 x i16>* %14570, align 2, !tbaa !396
  %14572 = getelementptr inbounds i16, i16* %14568, i64 17
  %14573 = bitcast i16* %14572 to <16 x i16>*
  %14574 = load <16 x i16>, <16 x i16>* %14573, align 2, !tbaa !396
  %14575 = getelementptr inbounds i16, i16* %14568, i64 2
  %14576 = bitcast i16* %14575 to <16 x i16>*
  %14577 = load <16 x i16>, <16 x i16>* %14576, align 2, !tbaa !396
  %14578 = getelementptr inbounds i16, i16* %14568, i64 18
  %14579 = bitcast i16* %14578 to <16 x i16>*
  %14580 = load <16 x i16>, <16 x i16>* %14579, align 2, !tbaa !396
  %14581 = bitcast i16* %14568 to <16 x i16>*
  %14582 = load <16 x i16>, <16 x i16>* %14581, align 2, !tbaa !396
  %14583 = getelementptr inbounds i16, i16* %14568, i64 16
  %14584 = bitcast i16* %14583 to <16 x i16>*
  %14585 = load <16 x i16>, <16 x i16>* %14584, align 2, !tbaa !396
  %14586 = add <16 x i16> %14577, %14571
  %14587 = add <16 x i16> %14586, %14582
  %14588 = add <16 x i16> %14580, %14574
  %14589 = add <16 x i16> %14588, %14585
  %14590 = shufflevector <16 x i16> %14587, <16 x i16> %14589, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14591 = udiv <32 x i16> %14590, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14592 = shufflevector <32 x i16> %14591, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14593 = sext i32 %blur_x.s0.x.v1.base.s1414 to i64
  %14594 = add nsw i64 %14593, %14480
  %14595 = getelementptr inbounds i16, i16* %blur_x841, i64 %14594
  %14596 = bitcast i16* %14595 to <16 x i16>*
  store <16 x i16> %14592, <16 x i16>* %14596, align 2, !tbaa !399
  %14597 = shufflevector <32 x i16> %14591, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14598 = getelementptr inbounds i16, i16* %14595, i64 16
  %14599 = bitcast i16* %14598 to <16 x i16>*
  store <16 x i16> %14597, <16 x i16>* %14599, align 2, !tbaa !399
  br label %"consume blur_x1416"

"consume blur_x1416":                             ; preds = %"for blur_y.s0.x.x.rebased1405", %"produce blur_x1413"
  %14600 = sext i32 %blur_y.s0.x.v0.base.s1408 to i64
  %14601 = add nsw i64 %14483, %14600
  %14602 = getelementptr inbounds i16, i16* %blur_x841, i64 %14601
  %14603 = bitcast i16* %14602 to <16 x i16>*
  %14604 = load <16 x i16>, <16 x i16>* %14603, align 2, !tbaa !399
  %14605 = getelementptr inbounds i16, i16* %14602, i64 16
  %14606 = bitcast i16* %14605 to <16 x i16>*
  %14607 = load <16 x i16>, <16 x i16>* %14606, align 2, !tbaa !399
  %14608 = add nsw i64 %14486, %14600
  %14609 = getelementptr inbounds i16, i16* %blur_x841, i64 %14608
  %14610 = bitcast i16* %14609 to <16 x i16>*
  %14611 = load <16 x i16>, <16 x i16>* %14610, align 2, !tbaa !399
  %14612 = getelementptr inbounds i16, i16* %14609, i64 16
  %14613 = bitcast i16* %14612 to <16 x i16>*
  %14614 = load <16 x i16>, <16 x i16>* %14613, align 2, !tbaa !399
  %14615 = add nsw i64 %14489, %14600
  %14616 = getelementptr inbounds i16, i16* %blur_x841, i64 %14615
  %14617 = bitcast i16* %14616 to <16 x i16>*
  %14618 = load <16 x i16>, <16 x i16>* %14617, align 2, !tbaa !399
  %14619 = getelementptr inbounds i16, i16* %14616, i64 16
  %14620 = bitcast i16* %14619 to <16 x i16>*
  %14621 = load <16 x i16>, <16 x i16>* %14620, align 2, !tbaa !399
  %14622 = add <16 x i16> %14611, %14604
  %14623 = add <16 x i16> %14622, %14618
  %14624 = add <16 x i16> %14614, %14607
  %14625 = add <16 x i16> %14624, %14621
  %14626 = shufflevector <16 x i16> %14623, <16 x i16> %14625, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14627 = udiv <32 x i16> %14626, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14628 = shufflevector <32 x i16> %14627, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14629 = add nsw i64 %14493, %14600
  %14630 = getelementptr inbounds i16, i16* %258, i64 %14629
  %14631 = bitcast i16* %14630 to <16 x i16>*
  store <16 x i16> %14628, <16 x i16>* %14631, align 2, !tbaa !401
  %14632 = shufflevector <32 x i16> %14627, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14633 = getelementptr inbounds i16, i16* %14630, i64 16
  %14634 = bitcast i16* %14633 to <16 x i16>*
  store <16 x i16> %14632, <16 x i16>* %14634, align 2, !tbaa !401
  %14635 = add nuw nsw i32 %blur_y.s0.x.x.rebased1407, 1
  %.not2514 = icmp eq i32 %14635, %t1639860
  br i1 %.not2514, label %"end for blur_y.s0.x.x.rebased1406", label %"for blur_y.s0.x.x.rebased1405"

after_bb1417:                                     ; preds = %"end for blur_y.s0.x.x.rebased1406", %"produce blur_x1420"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1432.preheader", label %"end for blur_y.s0.x.x.rebased1433", !prof !386

"for blur_y.s0.x.x.rebased1432.preheader":        ; preds = %after_bb1417
  %14636 = sext i32 %t1650912 to i64
  %14637 = zext i32 %.pre-phi3391 to i64
  %14638 = mul nsw i64 %14637, %322
  %14639 = sub nsw i64 %14638, %293
  %14640 = zext i32 %.pre-phi3395 to i64
  %14641 = mul nsw i64 %14640, %322
  %14642 = sub nsw i64 %14641, %293
  %14643 = zext i32 %.pre-phi3387 to i64
  %14644 = mul nsw i64 %14643, %322
  %14645 = sub nsw i64 %14644, %293
  %14646 = sext i32 %a365 to i64
  %14647 = add nsw i64 %14646, 12
  %14648 = mul nsw i64 %14647, %319
  %14649 = add nsw i64 %14648, %323
  br label %"for blur_y.s0.x.x.rebased1432"

"produce blur_x1420":                             ; preds = %"end for blur_y.s0.x.x.rebased1406"
  %14650 = getelementptr inbounds i16, i16* %read_input784, i64 %392
  %14651 = getelementptr inbounds i16, i16* %14650, i64 -31
  %14652 = bitcast i16* %14651 to <16 x i16>*
  %14653 = load <16 x i16>, <16 x i16>* %14652, align 2, !tbaa !396
  %14654 = getelementptr inbounds i16, i16* %14650, i64 -15
  %14655 = bitcast i16* %14654 to <16 x i16>*
  %14656 = load <16 x i16>, <16 x i16>* %14655, align 2, !tbaa !396
  %14657 = getelementptr inbounds i16, i16* %14650, i64 -30
  %14658 = bitcast i16* %14657 to <16 x i16>*
  %14659 = load <16 x i16>, <16 x i16>* %14658, align 2, !tbaa !396
  %14660 = getelementptr inbounds i16, i16* %14650, i64 -14
  %14661 = bitcast i16* %14660 to <16 x i16>*
  %14662 = load <16 x i16>, <16 x i16>* %14661, align 2, !tbaa !396
  %14663 = getelementptr inbounds i16, i16* %14650, i64 -32
  %14664 = bitcast i16* %14663 to <16 x i16>*
  %14665 = load <16 x i16>, <16 x i16>* %14664, align 2, !tbaa !396
  %14666 = getelementptr inbounds i16, i16* %14650, i64 -16
  %14667 = bitcast i16* %14666 to <16 x i16>*
  %14668 = load <16 x i16>, <16 x i16>* %14667, align 2, !tbaa !396
  %14669 = add <16 x i16> %14659, %14653
  %14670 = add <16 x i16> %14669, %14665
  %14671 = add <16 x i16> %14662, %14656
  %14672 = add <16 x i16> %14671, %14668
  %14673 = shufflevector <16 x i16> %14670, <16 x i16> %14672, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14674 = udiv <32 x i16> %14673, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14675 = shufflevector <32 x i16> %14674, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14676 = zext i32 %.pre-phi3395 to i64
  %14677 = mul nsw i64 %294, %14676
  %14678 = add nsw i64 %296, %14677
  %14679 = getelementptr inbounds i16, i16* %blur_x841, i64 %14678
  %14680 = getelementptr inbounds i16, i16* %14679, i64 -32
  %14681 = bitcast i16* %14680 to <16 x i16>*
  store <16 x i16> %14675, <16 x i16>* %14681, align 2, !tbaa !399
  %14682 = shufflevector <32 x i16> %14674, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14683 = getelementptr inbounds i16, i16* %14679, i64 -16
  %14684 = bitcast i16* %14683 to <16 x i16>*
  store <16 x i16> %14682, <16 x i16>* %14684, align 2, !tbaa !399
  %14685 = zext i32 %.pre-phi3391 to i64
  %14686 = mul nsw i64 %14685, %318
  %14687 = add nsw i64 %14686, %291
  %14688 = getelementptr inbounds i16, i16* %blur_x841, i64 %14687
  %14689 = getelementptr inbounds i16, i16* %14688, i64 -32
  %14690 = bitcast i16* %14689 to <16 x i16>*
  %14691 = load <16 x i16>, <16 x i16>* %14690, align 2, !tbaa !399
  %14692 = getelementptr inbounds i16, i16* %14688, i64 -16
  %14693 = bitcast i16* %14692 to <16 x i16>*
  %14694 = load <16 x i16>, <16 x i16>* %14693, align 2, !tbaa !399
  %14695 = mul nsw i64 %14676, %318
  %14696 = add nsw i64 %14695, %291
  %14697 = getelementptr inbounds i16, i16* %blur_x841, i64 %14696
  %14698 = getelementptr inbounds i16, i16* %14697, i64 -32
  %14699 = bitcast i16* %14698 to <16 x i16>*
  %14700 = load <16 x i16>, <16 x i16>* %14699, align 2, !tbaa !399
  %14701 = getelementptr inbounds i16, i16* %14697, i64 -16
  %14702 = bitcast i16* %14701 to <16 x i16>*
  %14703 = load <16 x i16>, <16 x i16>* %14702, align 2, !tbaa !399
  %14704 = zext i32 %.pre-phi3387 to i64
  %14705 = mul nsw i64 %14704, %318
  %14706 = add nsw i64 %14705, %291
  %14707 = getelementptr inbounds i16, i16* %blur_x841, i64 %14706
  %14708 = getelementptr inbounds i16, i16* %14707, i64 -32
  %14709 = bitcast i16* %14708 to <16 x i16>*
  %14710 = load <16 x i16>, <16 x i16>* %14709, align 2, !tbaa !399
  %14711 = getelementptr inbounds i16, i16* %14707, i64 -16
  %14712 = bitcast i16* %14711 to <16 x i16>*
  %14713 = load <16 x i16>, <16 x i16>* %14712, align 2, !tbaa !399
  %14714 = add <16 x i16> %14700, %14691
  %14715 = add <16 x i16> %14714, %14710
  %14716 = add <16 x i16> %14703, %14694
  %14717 = add <16 x i16> %14716, %14713
  %14718 = shufflevector <16 x i16> %14715, <16 x i16> %14717, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14719 = udiv <32 x i16> %14718, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14720 = shufflevector <32 x i16> %14719, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14721 = sext i32 %a365 to i64
  %14722 = add nsw i64 %14721, 12
  %14723 = mul nsw i64 %14722, %319
  %14724 = add nsw i64 %321, %14723
  %14725 = getelementptr inbounds i16, i16* %258, i64 %14724
  %14726 = getelementptr inbounds i16, i16* %14725, i64 -32
  %14727 = bitcast i16* %14726 to <16 x i16>*
  store <16 x i16> %14720, <16 x i16>* %14727, align 2, !tbaa !401
  %14728 = shufflevector <32 x i16> %14719, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14729 = getelementptr inbounds i16, i16* %14725, i64 -16
  %14730 = bitcast i16* %14729 to <16 x i16>*
  store <16 x i16> %14728, <16 x i16>* %14730, align 2, !tbaa !401
  br label %after_bb1417

"for blur_y.s0.x.x.rebased1432":                  ; preds = %"for blur_y.s0.x.x.rebased1432.preheader", %"consume blur_x1440"
  %indvars.iv3266 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1432.preheader" ], [ %indvars.iv.next3267, %"consume blur_x1440" ]
  %14731 = add nsw i64 %indvars.iv3266, %298
  %14732 = icmp slt i64 %14731, 1
  %14733 = trunc i64 %14731 to i32
  %14734 = shl nsw i32 %14733, 5
  %14735 = icmp sgt i32 %194, %14734
  %14736 = or i1 %14732, %14735
  br i1 %14736, label %"produce blur_x1438", label %"for blur_y.s0.x.x.rebased1432.consume blur_x1440_crit_edge"

"for blur_y.s0.x.x.rebased1432.consume blur_x1440_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1432"
  %.pre3424 = shl nsw i64 %14731, 5
  br label %"consume blur_x1440"

"end for blur_y.s0.x.x.rebased1433":              ; preds = %"consume blur_x1440", %after_bb1417
  br i1 %299, label %"for blur_y.s0.x.x.rebased1448.preheader", label %"end for blur_y.s0.x.x.rebased1449", !prof !386

"for blur_y.s0.x.x.rebased1448.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1433"
  %14737 = sext i32 %t1650912 to i64
  %14738 = zext i32 %.pre-phi3391 to i64
  %14739 = mul nsw i64 %14738, %322
  %14740 = sub nsw i64 %14739, %293
  %14741 = zext i32 %.pre-phi3395 to i64
  %14742 = mul nsw i64 %14741, %322
  %14743 = sub nsw i64 %14742, %293
  %14744 = zext i32 %.pre-phi3387 to i64
  %14745 = mul nsw i64 %14744, %322
  %14746 = sub nsw i64 %14745, %293
  %14747 = sext i32 %a365 to i64
  %14748 = add nsw i64 %14747, 12
  %14749 = mul nsw i64 %14748, %319
  %14750 = add nsw i64 %14749, %323
  br label %"for blur_y.s0.x.x.rebased1448"

"produce blur_x1438":                             ; preds = %"for blur_y.s0.x.x.rebased1432"
  %t8641439 = add nsw i32 %394, %14734
  %14751 = sext i32 %t8641439 to i64
  %14752 = getelementptr inbounds i16, i16* %read_input784, i64 %14751
  %14753 = getelementptr inbounds i16, i16* %14752, i64 1
  %14754 = bitcast i16* %14753 to <16 x i16>*
  %14755 = load <16 x i16>, <16 x i16>* %14754, align 2, !tbaa !396
  %14756 = getelementptr inbounds i16, i16* %14752, i64 17
  %14757 = bitcast i16* %14756 to <16 x i16>*
  %14758 = load <16 x i16>, <16 x i16>* %14757, align 2, !tbaa !396
  %14759 = getelementptr inbounds i16, i16* %14752, i64 2
  %14760 = bitcast i16* %14759 to <16 x i16>*
  %14761 = load <16 x i16>, <16 x i16>* %14760, align 2, !tbaa !396
  %14762 = getelementptr inbounds i16, i16* %14752, i64 18
  %14763 = bitcast i16* %14762 to <16 x i16>*
  %14764 = load <16 x i16>, <16 x i16>* %14763, align 2, !tbaa !396
  %14765 = bitcast i16* %14752 to <16 x i16>*
  %14766 = load <16 x i16>, <16 x i16>* %14765, align 2, !tbaa !396
  %14767 = getelementptr inbounds i16, i16* %14752, i64 16
  %14768 = bitcast i16* %14767 to <16 x i16>*
  %14769 = load <16 x i16>, <16 x i16>* %14768, align 2, !tbaa !396
  %14770 = add <16 x i16> %14761, %14755
  %14771 = add <16 x i16> %14770, %14766
  %14772 = add <16 x i16> %14764, %14758
  %14773 = add <16 x i16> %14772, %14769
  %14774 = shufflevector <16 x i16> %14771, <16 x i16> %14773, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14775 = udiv <32 x i16> %14774, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14776 = shufflevector <32 x i16> %14775, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14777 = shl nsw i64 %14731, 5
  %14778 = add nsw i64 %14777, %14636
  %14779 = getelementptr inbounds i16, i16* %blur_x841, i64 %14778
  %14780 = bitcast i16* %14779 to <16 x i16>*
  store <16 x i16> %14776, <16 x i16>* %14780, align 2, !tbaa !399
  %14781 = shufflevector <32 x i16> %14775, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14782 = getelementptr inbounds i16, i16* %14779, i64 16
  %14783 = bitcast i16* %14782 to <16 x i16>*
  store <16 x i16> %14781, <16 x i16>* %14783, align 2, !tbaa !399
  br label %"consume blur_x1440"

"consume blur_x1440":                             ; preds = %"for blur_y.s0.x.x.rebased1432.consume blur_x1440_crit_edge", %"produce blur_x1438"
  %.pre-phi3425 = phi i64 [ %.pre3424, %"for blur_y.s0.x.x.rebased1432.consume blur_x1440_crit_edge" ], [ %14777, %"produce blur_x1438" ]
  %14784 = add nsw i64 %14639, %.pre-phi3425
  %14785 = getelementptr inbounds i16, i16* %blur_x841, i64 %14784
  %14786 = bitcast i16* %14785 to <16 x i16>*
  %14787 = load <16 x i16>, <16 x i16>* %14786, align 2, !tbaa !399
  %14788 = getelementptr inbounds i16, i16* %14785, i64 16
  %14789 = bitcast i16* %14788 to <16 x i16>*
  %14790 = load <16 x i16>, <16 x i16>* %14789, align 2, !tbaa !399
  %14791 = add nsw i64 %14642, %.pre-phi3425
  %14792 = getelementptr inbounds i16, i16* %blur_x841, i64 %14791
  %14793 = bitcast i16* %14792 to <16 x i16>*
  %14794 = load <16 x i16>, <16 x i16>* %14793, align 2, !tbaa !399
  %14795 = getelementptr inbounds i16, i16* %14792, i64 16
  %14796 = bitcast i16* %14795 to <16 x i16>*
  %14797 = load <16 x i16>, <16 x i16>* %14796, align 2, !tbaa !399
  %14798 = add nsw i64 %14645, %.pre-phi3425
  %14799 = getelementptr inbounds i16, i16* %blur_x841, i64 %14798
  %14800 = bitcast i16* %14799 to <16 x i16>*
  %14801 = load <16 x i16>, <16 x i16>* %14800, align 2, !tbaa !399
  %14802 = getelementptr inbounds i16, i16* %14799, i64 16
  %14803 = bitcast i16* %14802 to <16 x i16>*
  %14804 = load <16 x i16>, <16 x i16>* %14803, align 2, !tbaa !399
  %14805 = add <16 x i16> %14794, %14787
  %14806 = add <16 x i16> %14805, %14801
  %14807 = add <16 x i16> %14797, %14790
  %14808 = add <16 x i16> %14807, %14804
  %14809 = shufflevector <16 x i16> %14806, <16 x i16> %14808, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14810 = udiv <32 x i16> %14809, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14811 = shufflevector <32 x i16> %14810, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14812 = add nsw i64 %14649, %.pre-phi3425
  %14813 = getelementptr inbounds i16, i16* %258, i64 %14812
  %14814 = bitcast i16* %14813 to <16 x i16>*
  store <16 x i16> %14811, <16 x i16>* %14814, align 2, !tbaa !401
  %14815 = shufflevector <32 x i16> %14810, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14816 = getelementptr inbounds i16, i16* %14813, i64 16
  %14817 = bitcast i16* %14816 to <16 x i16>*
  store <16 x i16> %14815, <16 x i16>* %14817, align 2, !tbaa !401
  %indvars.iv.next3267 = add nuw nsw i64 %indvars.iv3266, 1
  %.not2511 = icmp eq i64 %indvars.iv.next3267, %515
  br i1 %.not2511, label %"end for blur_y.s0.x.x.rebased1433", label %"for blur_y.s0.x.x.rebased1432"

"for blur_y.s0.x.x.rebased1448":                  ; preds = %"for blur_y.s0.x.x.rebased1448.preheader", %"consume blur_x1459"
  %blur_y.s0.x.x.rebased1450 = phi i32 [ %14892, %"consume blur_x1459" ], [ 0, %"for blur_y.s0.x.x.rebased1448.preheader" ]
  %14818 = add nsw i32 %blur_y.s0.x.x.rebased1450, %t1582776
  %a2899 = shl nsw i32 %14818, 5
  %14819 = icmp sgt i32 %t1603, %a2899
  %blur_y.s0.x.v0.base.s1451 = select i1 %14819, i32 %a2899, i32 %t1603
  %14820 = icmp slt i32 %14818, 1
  %14821 = icmp sgt i32 %194, %a2899
  %14822 = or i1 %14820, %14821
  br i1 %14822, label %"produce blur_x1456", label %"consume blur_x1459"

"end for blur_y.s0.x.x.rebased1449":              ; preds = %"consume blur_x1459", %"end for blur_y.s0.x.x.rebased1433"
  br i1 %225, label %"produce blur_x1463", label %after_bb1460

"produce blur_x1456":                             ; preds = %"for blur_y.s0.x.x.rebased1448"
  %14823 = icmp slt i32 %blur_y.s0.x.v0.base.s1451, %194
  %blur_x.s0.x.v1.base.s1457 = select i1 %14823, i32 %blur_y.s0.x.v0.base.s1451, i32 %194
  %t8691458 = add nsw i32 %394, %blur_x.s0.x.v1.base.s1457
  %14824 = sext i32 %t8691458 to i64
  %14825 = getelementptr inbounds i16, i16* %read_input784, i64 %14824
  %14826 = getelementptr inbounds i16, i16* %14825, i64 1
  %14827 = bitcast i16* %14826 to <16 x i16>*
  %14828 = load <16 x i16>, <16 x i16>* %14827, align 2, !tbaa !396
  %14829 = getelementptr inbounds i16, i16* %14825, i64 17
  %14830 = bitcast i16* %14829 to <16 x i16>*
  %14831 = load <16 x i16>, <16 x i16>* %14830, align 2, !tbaa !396
  %14832 = getelementptr inbounds i16, i16* %14825, i64 2
  %14833 = bitcast i16* %14832 to <16 x i16>*
  %14834 = load <16 x i16>, <16 x i16>* %14833, align 2, !tbaa !396
  %14835 = getelementptr inbounds i16, i16* %14825, i64 18
  %14836 = bitcast i16* %14835 to <16 x i16>*
  %14837 = load <16 x i16>, <16 x i16>* %14836, align 2, !tbaa !396
  %14838 = bitcast i16* %14825 to <16 x i16>*
  %14839 = load <16 x i16>, <16 x i16>* %14838, align 2, !tbaa !396
  %14840 = getelementptr inbounds i16, i16* %14825, i64 16
  %14841 = bitcast i16* %14840 to <16 x i16>*
  %14842 = load <16 x i16>, <16 x i16>* %14841, align 2, !tbaa !396
  %14843 = add <16 x i16> %14834, %14828
  %14844 = add <16 x i16> %14843, %14839
  %14845 = add <16 x i16> %14837, %14831
  %14846 = add <16 x i16> %14845, %14842
  %14847 = shufflevector <16 x i16> %14844, <16 x i16> %14846, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14848 = udiv <32 x i16> %14847, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14849 = shufflevector <32 x i16> %14848, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14850 = sext i32 %blur_x.s0.x.v1.base.s1457 to i64
  %14851 = add nsw i64 %14850, %14737
  %14852 = getelementptr inbounds i16, i16* %blur_x841, i64 %14851
  %14853 = bitcast i16* %14852 to <16 x i16>*
  store <16 x i16> %14849, <16 x i16>* %14853, align 2, !tbaa !399
  %14854 = shufflevector <32 x i16> %14848, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14855 = getelementptr inbounds i16, i16* %14852, i64 16
  %14856 = bitcast i16* %14855 to <16 x i16>*
  store <16 x i16> %14854, <16 x i16>* %14856, align 2, !tbaa !399
  br label %"consume blur_x1459"

"consume blur_x1459":                             ; preds = %"for blur_y.s0.x.x.rebased1448", %"produce blur_x1456"
  %14857 = sext i32 %blur_y.s0.x.v0.base.s1451 to i64
  %14858 = add nsw i64 %14740, %14857
  %14859 = getelementptr inbounds i16, i16* %blur_x841, i64 %14858
  %14860 = bitcast i16* %14859 to <16 x i16>*
  %14861 = load <16 x i16>, <16 x i16>* %14860, align 2, !tbaa !399
  %14862 = getelementptr inbounds i16, i16* %14859, i64 16
  %14863 = bitcast i16* %14862 to <16 x i16>*
  %14864 = load <16 x i16>, <16 x i16>* %14863, align 2, !tbaa !399
  %14865 = add nsw i64 %14743, %14857
  %14866 = getelementptr inbounds i16, i16* %blur_x841, i64 %14865
  %14867 = bitcast i16* %14866 to <16 x i16>*
  %14868 = load <16 x i16>, <16 x i16>* %14867, align 2, !tbaa !399
  %14869 = getelementptr inbounds i16, i16* %14866, i64 16
  %14870 = bitcast i16* %14869 to <16 x i16>*
  %14871 = load <16 x i16>, <16 x i16>* %14870, align 2, !tbaa !399
  %14872 = add nsw i64 %14746, %14857
  %14873 = getelementptr inbounds i16, i16* %blur_x841, i64 %14872
  %14874 = bitcast i16* %14873 to <16 x i16>*
  %14875 = load <16 x i16>, <16 x i16>* %14874, align 2, !tbaa !399
  %14876 = getelementptr inbounds i16, i16* %14873, i64 16
  %14877 = bitcast i16* %14876 to <16 x i16>*
  %14878 = load <16 x i16>, <16 x i16>* %14877, align 2, !tbaa !399
  %14879 = add <16 x i16> %14868, %14861
  %14880 = add <16 x i16> %14879, %14875
  %14881 = add <16 x i16> %14871, %14864
  %14882 = add <16 x i16> %14881, %14878
  %14883 = shufflevector <16 x i16> %14880, <16 x i16> %14882, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14884 = udiv <32 x i16> %14883, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14885 = shufflevector <32 x i16> %14884, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14886 = add nsw i64 %14750, %14857
  %14887 = getelementptr inbounds i16, i16* %258, i64 %14886
  %14888 = bitcast i16* %14887 to <16 x i16>*
  store <16 x i16> %14885, <16 x i16>* %14888, align 2, !tbaa !401
  %14889 = shufflevector <32 x i16> %14884, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14890 = getelementptr inbounds i16, i16* %14887, i64 16
  %14891 = bitcast i16* %14890 to <16 x i16>*
  store <16 x i16> %14889, <16 x i16>* %14891, align 2, !tbaa !401
  %14892 = add nuw nsw i32 %blur_y.s0.x.x.rebased1450, 1
  %.not2510 = icmp eq i32 %14892, %t1639860
  br i1 %.not2510, label %"end for blur_y.s0.x.x.rebased1449", label %"for blur_y.s0.x.x.rebased1448"

after_bb1460:                                     ; preds = %"end for blur_y.s0.x.x.rebased1449", %"produce blur_x1463"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1475.preheader", label %"end for blur_y.s0.x.x.rebased1476", !prof !386

"for blur_y.s0.x.x.rebased1475.preheader":        ; preds = %after_bb1460
  %14893 = sext i32 %t1666955 to i64
  %14894 = zext i32 %.pre-phi3395 to i64
  %14895 = mul nsw i64 %14894, %322
  %14896 = sub nsw i64 %14895, %293
  %14897 = zext i32 %.pre-phi3401 to i64
  %14898 = mul nsw i64 %14897, %322
  %14899 = sub nsw i64 %14898, %293
  %14900 = zext i32 %.pre-phi3391 to i64
  %14901 = mul nsw i64 %14900, %322
  %14902 = sub nsw i64 %14901, %293
  %14903 = sext i32 %a365 to i64
  %14904 = add nsw i64 %14903, 13
  %14905 = mul nsw i64 %14904, %319
  %14906 = add nsw i64 %14905, %323
  br label %"for blur_y.s0.x.x.rebased1475"

"produce blur_x1463":                             ; preds = %"end for blur_y.s0.x.x.rebased1449"
  %14907 = getelementptr inbounds i16, i16* %read_input784, i64 %398
  %14908 = getelementptr inbounds i16, i16* %14907, i64 -31
  %14909 = bitcast i16* %14908 to <16 x i16>*
  %14910 = load <16 x i16>, <16 x i16>* %14909, align 2, !tbaa !396
  %14911 = getelementptr inbounds i16, i16* %14907, i64 -15
  %14912 = bitcast i16* %14911 to <16 x i16>*
  %14913 = load <16 x i16>, <16 x i16>* %14912, align 2, !tbaa !396
  %14914 = getelementptr inbounds i16, i16* %14907, i64 -30
  %14915 = bitcast i16* %14914 to <16 x i16>*
  %14916 = load <16 x i16>, <16 x i16>* %14915, align 2, !tbaa !396
  %14917 = getelementptr inbounds i16, i16* %14907, i64 -14
  %14918 = bitcast i16* %14917 to <16 x i16>*
  %14919 = load <16 x i16>, <16 x i16>* %14918, align 2, !tbaa !396
  %14920 = getelementptr inbounds i16, i16* %14907, i64 -32
  %14921 = bitcast i16* %14920 to <16 x i16>*
  %14922 = load <16 x i16>, <16 x i16>* %14921, align 2, !tbaa !396
  %14923 = getelementptr inbounds i16, i16* %14907, i64 -16
  %14924 = bitcast i16* %14923 to <16 x i16>*
  %14925 = load <16 x i16>, <16 x i16>* %14924, align 2, !tbaa !396
  %14926 = add <16 x i16> %14916, %14910
  %14927 = add <16 x i16> %14926, %14922
  %14928 = add <16 x i16> %14919, %14913
  %14929 = add <16 x i16> %14928, %14925
  %14930 = shufflevector <16 x i16> %14927, <16 x i16> %14929, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14931 = udiv <32 x i16> %14930, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14932 = shufflevector <32 x i16> %14931, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14933 = zext i32 %.pre-phi3401 to i64
  %14934 = mul nsw i64 %294, %14933
  %14935 = add nsw i64 %296, %14934
  %14936 = getelementptr inbounds i16, i16* %blur_x841, i64 %14935
  %14937 = getelementptr inbounds i16, i16* %14936, i64 -32
  %14938 = bitcast i16* %14937 to <16 x i16>*
  store <16 x i16> %14932, <16 x i16>* %14938, align 2, !tbaa !399
  %14939 = shufflevector <32 x i16> %14931, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14940 = getelementptr inbounds i16, i16* %14936, i64 -16
  %14941 = bitcast i16* %14940 to <16 x i16>*
  store <16 x i16> %14939, <16 x i16>* %14941, align 2, !tbaa !399
  %14942 = zext i32 %.pre-phi3395 to i64
  %14943 = mul nsw i64 %14942, %318
  %14944 = add nsw i64 %14943, %291
  %14945 = getelementptr inbounds i16, i16* %blur_x841, i64 %14944
  %14946 = getelementptr inbounds i16, i16* %14945, i64 -32
  %14947 = bitcast i16* %14946 to <16 x i16>*
  %14948 = load <16 x i16>, <16 x i16>* %14947, align 2, !tbaa !399
  %14949 = getelementptr inbounds i16, i16* %14945, i64 -16
  %14950 = bitcast i16* %14949 to <16 x i16>*
  %14951 = load <16 x i16>, <16 x i16>* %14950, align 2, !tbaa !399
  %14952 = mul nsw i64 %14933, %318
  %14953 = add nsw i64 %14952, %291
  %14954 = getelementptr inbounds i16, i16* %blur_x841, i64 %14953
  %14955 = getelementptr inbounds i16, i16* %14954, i64 -32
  %14956 = bitcast i16* %14955 to <16 x i16>*
  %14957 = load <16 x i16>, <16 x i16>* %14956, align 2, !tbaa !399
  %14958 = getelementptr inbounds i16, i16* %14954, i64 -16
  %14959 = bitcast i16* %14958 to <16 x i16>*
  %14960 = load <16 x i16>, <16 x i16>* %14959, align 2, !tbaa !399
  %14961 = zext i32 %.pre-phi3391 to i64
  %14962 = mul nsw i64 %14961, %318
  %14963 = add nsw i64 %14962, %291
  %14964 = getelementptr inbounds i16, i16* %blur_x841, i64 %14963
  %14965 = getelementptr inbounds i16, i16* %14964, i64 -32
  %14966 = bitcast i16* %14965 to <16 x i16>*
  %14967 = load <16 x i16>, <16 x i16>* %14966, align 2, !tbaa !399
  %14968 = getelementptr inbounds i16, i16* %14964, i64 -16
  %14969 = bitcast i16* %14968 to <16 x i16>*
  %14970 = load <16 x i16>, <16 x i16>* %14969, align 2, !tbaa !399
  %14971 = add <16 x i16> %14957, %14948
  %14972 = add <16 x i16> %14971, %14967
  %14973 = add <16 x i16> %14960, %14951
  %14974 = add <16 x i16> %14973, %14970
  %14975 = shufflevector <16 x i16> %14972, <16 x i16> %14974, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14976 = udiv <32 x i16> %14975, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %14977 = shufflevector <32 x i16> %14976, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14978 = sext i32 %a365 to i64
  %14979 = add nsw i64 %14978, 13
  %14980 = mul nsw i64 %14979, %319
  %14981 = add nsw i64 %321, %14980
  %14982 = getelementptr inbounds i16, i16* %258, i64 %14981
  %14983 = getelementptr inbounds i16, i16* %14982, i64 -32
  %14984 = bitcast i16* %14983 to <16 x i16>*
  store <16 x i16> %14977, <16 x i16>* %14984, align 2, !tbaa !401
  %14985 = shufflevector <32 x i16> %14976, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14986 = getelementptr inbounds i16, i16* %14982, i64 -16
  %14987 = bitcast i16* %14986 to <16 x i16>*
  store <16 x i16> %14985, <16 x i16>* %14987, align 2, !tbaa !401
  br label %after_bb1460

"for blur_y.s0.x.x.rebased1475":                  ; preds = %"for blur_y.s0.x.x.rebased1475.preheader", %"consume blur_x1483"
  %indvars.iv3268 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1475.preheader" ], [ %indvars.iv.next3269, %"consume blur_x1483" ]
  %14988 = add nsw i64 %indvars.iv3268, %298
  %14989 = icmp slt i64 %14988, 1
  %14990 = trunc i64 %14988 to i32
  %14991 = shl nsw i32 %14990, 5
  %14992 = icmp sgt i32 %194, %14991
  %14993 = or i1 %14989, %14992
  br i1 %14993, label %"produce blur_x1481", label %"for blur_y.s0.x.x.rebased1475.consume blur_x1483_crit_edge"

"for blur_y.s0.x.x.rebased1475.consume blur_x1483_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1475"
  %.pre3426 = shl nsw i64 %14988, 5
  br label %"consume blur_x1483"

"end for blur_y.s0.x.x.rebased1476":              ; preds = %"consume blur_x1483", %after_bb1460
  br i1 %299, label %"for blur_y.s0.x.x.rebased1491.preheader", label %"end for blur_y.s0.x.x.rebased1492", !prof !386

"for blur_y.s0.x.x.rebased1491.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1476"
  %14994 = sext i32 %t1666955 to i64
  %14995 = zext i32 %.pre-phi3395 to i64
  %14996 = mul nsw i64 %14995, %322
  %14997 = sub nsw i64 %14996, %293
  %14998 = zext i32 %.pre-phi3401 to i64
  %14999 = mul nsw i64 %14998, %322
  %15000 = sub nsw i64 %14999, %293
  %15001 = zext i32 %.pre-phi3391 to i64
  %15002 = mul nsw i64 %15001, %322
  %15003 = sub nsw i64 %15002, %293
  %15004 = sext i32 %a365 to i64
  %15005 = add nsw i64 %15004, 13
  %15006 = mul nsw i64 %15005, %319
  %15007 = add nsw i64 %15006, %323
  br label %"for blur_y.s0.x.x.rebased1491"

"produce blur_x1481":                             ; preds = %"for blur_y.s0.x.x.rebased1475"
  %t8801482 = add nsw i32 %400, %14991
  %15008 = sext i32 %t8801482 to i64
  %15009 = getelementptr inbounds i16, i16* %read_input784, i64 %15008
  %15010 = getelementptr inbounds i16, i16* %15009, i64 1
  %15011 = bitcast i16* %15010 to <16 x i16>*
  %15012 = load <16 x i16>, <16 x i16>* %15011, align 2, !tbaa !396
  %15013 = getelementptr inbounds i16, i16* %15009, i64 17
  %15014 = bitcast i16* %15013 to <16 x i16>*
  %15015 = load <16 x i16>, <16 x i16>* %15014, align 2, !tbaa !396
  %15016 = getelementptr inbounds i16, i16* %15009, i64 2
  %15017 = bitcast i16* %15016 to <16 x i16>*
  %15018 = load <16 x i16>, <16 x i16>* %15017, align 2, !tbaa !396
  %15019 = getelementptr inbounds i16, i16* %15009, i64 18
  %15020 = bitcast i16* %15019 to <16 x i16>*
  %15021 = load <16 x i16>, <16 x i16>* %15020, align 2, !tbaa !396
  %15022 = bitcast i16* %15009 to <16 x i16>*
  %15023 = load <16 x i16>, <16 x i16>* %15022, align 2, !tbaa !396
  %15024 = getelementptr inbounds i16, i16* %15009, i64 16
  %15025 = bitcast i16* %15024 to <16 x i16>*
  %15026 = load <16 x i16>, <16 x i16>* %15025, align 2, !tbaa !396
  %15027 = add <16 x i16> %15018, %15012
  %15028 = add <16 x i16> %15027, %15023
  %15029 = add <16 x i16> %15021, %15015
  %15030 = add <16 x i16> %15029, %15026
  %15031 = shufflevector <16 x i16> %15028, <16 x i16> %15030, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15032 = udiv <32 x i16> %15031, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15033 = shufflevector <32 x i16> %15032, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15034 = shl nsw i64 %14988, 5
  %15035 = add nsw i64 %15034, %14893
  %15036 = getelementptr inbounds i16, i16* %blur_x841, i64 %15035
  %15037 = bitcast i16* %15036 to <16 x i16>*
  store <16 x i16> %15033, <16 x i16>* %15037, align 2, !tbaa !399
  %15038 = shufflevector <32 x i16> %15032, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15039 = getelementptr inbounds i16, i16* %15036, i64 16
  %15040 = bitcast i16* %15039 to <16 x i16>*
  store <16 x i16> %15038, <16 x i16>* %15040, align 2, !tbaa !399
  br label %"consume blur_x1483"

"consume blur_x1483":                             ; preds = %"for blur_y.s0.x.x.rebased1475.consume blur_x1483_crit_edge", %"produce blur_x1481"
  %.pre-phi3427 = phi i64 [ %.pre3426, %"for blur_y.s0.x.x.rebased1475.consume blur_x1483_crit_edge" ], [ %15034, %"produce blur_x1481" ]
  %15041 = add nsw i64 %14896, %.pre-phi3427
  %15042 = getelementptr inbounds i16, i16* %blur_x841, i64 %15041
  %15043 = bitcast i16* %15042 to <16 x i16>*
  %15044 = load <16 x i16>, <16 x i16>* %15043, align 2, !tbaa !399
  %15045 = getelementptr inbounds i16, i16* %15042, i64 16
  %15046 = bitcast i16* %15045 to <16 x i16>*
  %15047 = load <16 x i16>, <16 x i16>* %15046, align 2, !tbaa !399
  %15048 = add nsw i64 %14899, %.pre-phi3427
  %15049 = getelementptr inbounds i16, i16* %blur_x841, i64 %15048
  %15050 = bitcast i16* %15049 to <16 x i16>*
  %15051 = load <16 x i16>, <16 x i16>* %15050, align 2, !tbaa !399
  %15052 = getelementptr inbounds i16, i16* %15049, i64 16
  %15053 = bitcast i16* %15052 to <16 x i16>*
  %15054 = load <16 x i16>, <16 x i16>* %15053, align 2, !tbaa !399
  %15055 = add nsw i64 %14902, %.pre-phi3427
  %15056 = getelementptr inbounds i16, i16* %blur_x841, i64 %15055
  %15057 = bitcast i16* %15056 to <16 x i16>*
  %15058 = load <16 x i16>, <16 x i16>* %15057, align 2, !tbaa !399
  %15059 = getelementptr inbounds i16, i16* %15056, i64 16
  %15060 = bitcast i16* %15059 to <16 x i16>*
  %15061 = load <16 x i16>, <16 x i16>* %15060, align 2, !tbaa !399
  %15062 = add <16 x i16> %15051, %15044
  %15063 = add <16 x i16> %15062, %15058
  %15064 = add <16 x i16> %15054, %15047
  %15065 = add <16 x i16> %15064, %15061
  %15066 = shufflevector <16 x i16> %15063, <16 x i16> %15065, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15067 = udiv <32 x i16> %15066, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15068 = shufflevector <32 x i16> %15067, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15069 = add nsw i64 %14906, %.pre-phi3427
  %15070 = getelementptr inbounds i16, i16* %258, i64 %15069
  %15071 = bitcast i16* %15070 to <16 x i16>*
  store <16 x i16> %15068, <16 x i16>* %15071, align 2, !tbaa !401
  %15072 = shufflevector <32 x i16> %15067, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15073 = getelementptr inbounds i16, i16* %15070, i64 16
  %15074 = bitcast i16* %15073 to <16 x i16>*
  store <16 x i16> %15072, <16 x i16>* %15074, align 2, !tbaa !401
  %indvars.iv.next3269 = add nuw nsw i64 %indvars.iv3268, 1
  %.not2507 = icmp eq i64 %indvars.iv.next3269, %515
  br i1 %.not2507, label %"end for blur_y.s0.x.x.rebased1476", label %"for blur_y.s0.x.x.rebased1475"

"for blur_y.s0.x.x.rebased1491":                  ; preds = %"for blur_y.s0.x.x.rebased1491.preheader", %"consume blur_x1502"
  %blur_y.s0.x.x.rebased1493 = phi i32 [ %15149, %"consume blur_x1502" ], [ 0, %"for blur_y.s0.x.x.rebased1491.preheader" ]
  %15075 = add nsw i32 %blur_y.s0.x.x.rebased1493, %t1582776
  %a3056 = shl nsw i32 %15075, 5
  %15076 = icmp sgt i32 %t1603, %a3056
  %blur_y.s0.x.v0.base.s1494 = select i1 %15076, i32 %a3056, i32 %t1603
  %15077 = icmp slt i32 %15075, 1
  %15078 = icmp sgt i32 %194, %a3056
  %15079 = or i1 %15077, %15078
  br i1 %15079, label %"produce blur_x1499", label %"consume blur_x1502"

"end for blur_y.s0.x.x.rebased1492":              ; preds = %"consume blur_x1502", %"end for blur_y.s0.x.x.rebased1476"
  br i1 %225, label %"produce blur_x1506", label %after_bb1503

"produce blur_x1499":                             ; preds = %"for blur_y.s0.x.x.rebased1491"
  %15080 = icmp slt i32 %blur_y.s0.x.v0.base.s1494, %194
  %blur_x.s0.x.v1.base.s1500 = select i1 %15080, i32 %blur_y.s0.x.v0.base.s1494, i32 %194
  %t8851501 = add nsw i32 %400, %blur_x.s0.x.v1.base.s1500
  %15081 = sext i32 %t8851501 to i64
  %15082 = getelementptr inbounds i16, i16* %read_input784, i64 %15081
  %15083 = getelementptr inbounds i16, i16* %15082, i64 1
  %15084 = bitcast i16* %15083 to <16 x i16>*
  %15085 = load <16 x i16>, <16 x i16>* %15084, align 2, !tbaa !396
  %15086 = getelementptr inbounds i16, i16* %15082, i64 17
  %15087 = bitcast i16* %15086 to <16 x i16>*
  %15088 = load <16 x i16>, <16 x i16>* %15087, align 2, !tbaa !396
  %15089 = getelementptr inbounds i16, i16* %15082, i64 2
  %15090 = bitcast i16* %15089 to <16 x i16>*
  %15091 = load <16 x i16>, <16 x i16>* %15090, align 2, !tbaa !396
  %15092 = getelementptr inbounds i16, i16* %15082, i64 18
  %15093 = bitcast i16* %15092 to <16 x i16>*
  %15094 = load <16 x i16>, <16 x i16>* %15093, align 2, !tbaa !396
  %15095 = bitcast i16* %15082 to <16 x i16>*
  %15096 = load <16 x i16>, <16 x i16>* %15095, align 2, !tbaa !396
  %15097 = getelementptr inbounds i16, i16* %15082, i64 16
  %15098 = bitcast i16* %15097 to <16 x i16>*
  %15099 = load <16 x i16>, <16 x i16>* %15098, align 2, !tbaa !396
  %15100 = add <16 x i16> %15091, %15085
  %15101 = add <16 x i16> %15100, %15096
  %15102 = add <16 x i16> %15094, %15088
  %15103 = add <16 x i16> %15102, %15099
  %15104 = shufflevector <16 x i16> %15101, <16 x i16> %15103, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15105 = udiv <32 x i16> %15104, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15106 = shufflevector <32 x i16> %15105, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15107 = sext i32 %blur_x.s0.x.v1.base.s1500 to i64
  %15108 = add nsw i64 %15107, %14994
  %15109 = getelementptr inbounds i16, i16* %blur_x841, i64 %15108
  %15110 = bitcast i16* %15109 to <16 x i16>*
  store <16 x i16> %15106, <16 x i16>* %15110, align 2, !tbaa !399
  %15111 = shufflevector <32 x i16> %15105, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15112 = getelementptr inbounds i16, i16* %15109, i64 16
  %15113 = bitcast i16* %15112 to <16 x i16>*
  store <16 x i16> %15111, <16 x i16>* %15113, align 2, !tbaa !399
  br label %"consume blur_x1502"

"consume blur_x1502":                             ; preds = %"for blur_y.s0.x.x.rebased1491", %"produce blur_x1499"
  %15114 = sext i32 %blur_y.s0.x.v0.base.s1494 to i64
  %15115 = add nsw i64 %14997, %15114
  %15116 = getelementptr inbounds i16, i16* %blur_x841, i64 %15115
  %15117 = bitcast i16* %15116 to <16 x i16>*
  %15118 = load <16 x i16>, <16 x i16>* %15117, align 2, !tbaa !399
  %15119 = getelementptr inbounds i16, i16* %15116, i64 16
  %15120 = bitcast i16* %15119 to <16 x i16>*
  %15121 = load <16 x i16>, <16 x i16>* %15120, align 2, !tbaa !399
  %15122 = add nsw i64 %15000, %15114
  %15123 = getelementptr inbounds i16, i16* %blur_x841, i64 %15122
  %15124 = bitcast i16* %15123 to <16 x i16>*
  %15125 = load <16 x i16>, <16 x i16>* %15124, align 2, !tbaa !399
  %15126 = getelementptr inbounds i16, i16* %15123, i64 16
  %15127 = bitcast i16* %15126 to <16 x i16>*
  %15128 = load <16 x i16>, <16 x i16>* %15127, align 2, !tbaa !399
  %15129 = add nsw i64 %15003, %15114
  %15130 = getelementptr inbounds i16, i16* %blur_x841, i64 %15129
  %15131 = bitcast i16* %15130 to <16 x i16>*
  %15132 = load <16 x i16>, <16 x i16>* %15131, align 2, !tbaa !399
  %15133 = getelementptr inbounds i16, i16* %15130, i64 16
  %15134 = bitcast i16* %15133 to <16 x i16>*
  %15135 = load <16 x i16>, <16 x i16>* %15134, align 2, !tbaa !399
  %15136 = add <16 x i16> %15125, %15118
  %15137 = add <16 x i16> %15136, %15132
  %15138 = add <16 x i16> %15128, %15121
  %15139 = add <16 x i16> %15138, %15135
  %15140 = shufflevector <16 x i16> %15137, <16 x i16> %15139, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15141 = udiv <32 x i16> %15140, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15142 = shufflevector <32 x i16> %15141, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15143 = add nsw i64 %15007, %15114
  %15144 = getelementptr inbounds i16, i16* %258, i64 %15143
  %15145 = bitcast i16* %15144 to <16 x i16>*
  store <16 x i16> %15142, <16 x i16>* %15145, align 2, !tbaa !401
  %15146 = shufflevector <32 x i16> %15141, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15147 = getelementptr inbounds i16, i16* %15144, i64 16
  %15148 = bitcast i16* %15147 to <16 x i16>*
  store <16 x i16> %15146, <16 x i16>* %15148, align 2, !tbaa !401
  %15149 = add nuw nsw i32 %blur_y.s0.x.x.rebased1493, 1
  %.not2506 = icmp eq i32 %15149, %t1639860
  br i1 %.not2506, label %"end for blur_y.s0.x.x.rebased1492", label %"for blur_y.s0.x.x.rebased1491"

after_bb1503:                                     ; preds = %"end for blur_y.s0.x.x.rebased1492", %"produce blur_x1506"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1518.preheader", label %"end for blur_y.s0.x.x.rebased1519", !prof !386

"for blur_y.s0.x.x.rebased1518.preheader":        ; preds = %after_bb1503
  %15150 = sext i32 %t1638848 to i64
  %15151 = zext i32 %.pre-phi3401 to i64
  %15152 = mul nsw i64 %15151, %322
  %15153 = sub nsw i64 %15152, %293
  %15154 = zext i32 %.pre-phi3387 to i64
  %15155 = mul nsw i64 %15154, %322
  %15156 = sub nsw i64 %15155, %293
  %15157 = zext i32 %.pre-phi3395 to i64
  %15158 = mul nsw i64 %15157, %322
  %15159 = sub nsw i64 %15158, %293
  %15160 = sext i32 %a365 to i64
  %15161 = add nsw i64 %15160, 14
  %15162 = mul nsw i64 %15161, %319
  %15163 = add nsw i64 %15162, %323
  br label %"for blur_y.s0.x.x.rebased1518"

"produce blur_x1506":                             ; preds = %"end for blur_y.s0.x.x.rebased1492"
  %15164 = getelementptr inbounds i16, i16* %read_input784, i64 %404
  %15165 = getelementptr inbounds i16, i16* %15164, i64 -31
  %15166 = bitcast i16* %15165 to <16 x i16>*
  %15167 = load <16 x i16>, <16 x i16>* %15166, align 2, !tbaa !396
  %15168 = getelementptr inbounds i16, i16* %15164, i64 -15
  %15169 = bitcast i16* %15168 to <16 x i16>*
  %15170 = load <16 x i16>, <16 x i16>* %15169, align 2, !tbaa !396
  %15171 = getelementptr inbounds i16, i16* %15164, i64 -30
  %15172 = bitcast i16* %15171 to <16 x i16>*
  %15173 = load <16 x i16>, <16 x i16>* %15172, align 2, !tbaa !396
  %15174 = getelementptr inbounds i16, i16* %15164, i64 -14
  %15175 = bitcast i16* %15174 to <16 x i16>*
  %15176 = load <16 x i16>, <16 x i16>* %15175, align 2, !tbaa !396
  %15177 = getelementptr inbounds i16, i16* %15164, i64 -32
  %15178 = bitcast i16* %15177 to <16 x i16>*
  %15179 = load <16 x i16>, <16 x i16>* %15178, align 2, !tbaa !396
  %15180 = getelementptr inbounds i16, i16* %15164, i64 -16
  %15181 = bitcast i16* %15180 to <16 x i16>*
  %15182 = load <16 x i16>, <16 x i16>* %15181, align 2, !tbaa !396
  %15183 = add <16 x i16> %15173, %15167
  %15184 = add <16 x i16> %15183, %15179
  %15185 = add <16 x i16> %15176, %15170
  %15186 = add <16 x i16> %15185, %15182
  %15187 = shufflevector <16 x i16> %15184, <16 x i16> %15186, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15188 = udiv <32 x i16> %15187, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15189 = shufflevector <32 x i16> %15188, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15190 = zext i32 %.pre-phi3387 to i64
  %15191 = mul nsw i64 %294, %15190
  %15192 = add nsw i64 %296, %15191
  %15193 = getelementptr inbounds i16, i16* %blur_x841, i64 %15192
  %15194 = getelementptr inbounds i16, i16* %15193, i64 -32
  %15195 = bitcast i16* %15194 to <16 x i16>*
  store <16 x i16> %15189, <16 x i16>* %15195, align 2, !tbaa !399
  %15196 = shufflevector <32 x i16> %15188, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15197 = getelementptr inbounds i16, i16* %15193, i64 -16
  %15198 = bitcast i16* %15197 to <16 x i16>*
  store <16 x i16> %15196, <16 x i16>* %15198, align 2, !tbaa !399
  %15199 = zext i32 %.pre-phi3401 to i64
  %15200 = mul nsw i64 %15199, %318
  %15201 = add nsw i64 %15200, %291
  %15202 = getelementptr inbounds i16, i16* %blur_x841, i64 %15201
  %15203 = getelementptr inbounds i16, i16* %15202, i64 -32
  %15204 = bitcast i16* %15203 to <16 x i16>*
  %15205 = load <16 x i16>, <16 x i16>* %15204, align 2, !tbaa !399
  %15206 = getelementptr inbounds i16, i16* %15202, i64 -16
  %15207 = bitcast i16* %15206 to <16 x i16>*
  %15208 = load <16 x i16>, <16 x i16>* %15207, align 2, !tbaa !399
  %15209 = mul nsw i64 %15190, %318
  %15210 = add nsw i64 %15209, %291
  %15211 = getelementptr inbounds i16, i16* %blur_x841, i64 %15210
  %15212 = getelementptr inbounds i16, i16* %15211, i64 -32
  %15213 = bitcast i16* %15212 to <16 x i16>*
  %15214 = load <16 x i16>, <16 x i16>* %15213, align 2, !tbaa !399
  %15215 = getelementptr inbounds i16, i16* %15211, i64 -16
  %15216 = bitcast i16* %15215 to <16 x i16>*
  %15217 = load <16 x i16>, <16 x i16>* %15216, align 2, !tbaa !399
  %15218 = zext i32 %.pre-phi3395 to i64
  %15219 = mul nsw i64 %15218, %318
  %15220 = add nsw i64 %15219, %291
  %15221 = getelementptr inbounds i16, i16* %blur_x841, i64 %15220
  %15222 = getelementptr inbounds i16, i16* %15221, i64 -32
  %15223 = bitcast i16* %15222 to <16 x i16>*
  %15224 = load <16 x i16>, <16 x i16>* %15223, align 2, !tbaa !399
  %15225 = getelementptr inbounds i16, i16* %15221, i64 -16
  %15226 = bitcast i16* %15225 to <16 x i16>*
  %15227 = load <16 x i16>, <16 x i16>* %15226, align 2, !tbaa !399
  %15228 = add <16 x i16> %15214, %15205
  %15229 = add <16 x i16> %15228, %15224
  %15230 = add <16 x i16> %15217, %15208
  %15231 = add <16 x i16> %15230, %15227
  %15232 = shufflevector <16 x i16> %15229, <16 x i16> %15231, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15233 = udiv <32 x i16> %15232, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15234 = shufflevector <32 x i16> %15233, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15235 = sext i32 %a365 to i64
  %15236 = add nsw i64 %15235, 14
  %15237 = mul nsw i64 %15236, %319
  %15238 = add nsw i64 %321, %15237
  %15239 = getelementptr inbounds i16, i16* %258, i64 %15238
  %15240 = getelementptr inbounds i16, i16* %15239, i64 -32
  %15241 = bitcast i16* %15240 to <16 x i16>*
  store <16 x i16> %15234, <16 x i16>* %15241, align 2, !tbaa !401
  %15242 = shufflevector <32 x i16> %15233, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15243 = getelementptr inbounds i16, i16* %15239, i64 -16
  %15244 = bitcast i16* %15243 to <16 x i16>*
  store <16 x i16> %15242, <16 x i16>* %15244, align 2, !tbaa !401
  br label %after_bb1503

"for blur_y.s0.x.x.rebased1518":                  ; preds = %"for blur_y.s0.x.x.rebased1518.preheader", %"consume blur_x1526"
  %indvars.iv3270 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1518.preheader" ], [ %indvars.iv.next3271, %"consume blur_x1526" ]
  %15245 = add nsw i64 %indvars.iv3270, %298
  %15246 = icmp slt i64 %15245, 1
  %15247 = trunc i64 %15245 to i32
  %15248 = shl nsw i32 %15247, 5
  %15249 = icmp sgt i32 %194, %15248
  %15250 = or i1 %15246, %15249
  br i1 %15250, label %"produce blur_x1524", label %"for blur_y.s0.x.x.rebased1518.consume blur_x1526_crit_edge"

"for blur_y.s0.x.x.rebased1518.consume blur_x1526_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1518"
  %.pre3428 = shl nsw i64 %15245, 5
  br label %"consume blur_x1526"

"end for blur_y.s0.x.x.rebased1519":              ; preds = %"consume blur_x1526", %after_bb1503
  br i1 %299, label %"for blur_y.s0.x.x.rebased1534.preheader", label %"end for blur_y.s0.x.x.rebased1535", !prof !386

"for blur_y.s0.x.x.rebased1534.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1519"
  %15251 = sext i32 %t1638848 to i64
  %15252 = zext i32 %.pre-phi3401 to i64
  %15253 = mul nsw i64 %15252, %322
  %15254 = sub nsw i64 %15253, %293
  %15255 = zext i32 %.pre-phi3387 to i64
  %15256 = mul nsw i64 %15255, %322
  %15257 = sub nsw i64 %15256, %293
  %15258 = zext i32 %.pre-phi3395 to i64
  %15259 = mul nsw i64 %15258, %322
  %15260 = sub nsw i64 %15259, %293
  %15261 = sext i32 %a365 to i64
  %15262 = add nsw i64 %15261, 14
  %15263 = mul nsw i64 %15262, %319
  %15264 = add nsw i64 %15263, %323
  br label %"for blur_y.s0.x.x.rebased1534"

"produce blur_x1524":                             ; preds = %"for blur_y.s0.x.x.rebased1518"
  %t8961525 = add nsw i32 %406, %15248
  %15265 = sext i32 %t8961525 to i64
  %15266 = getelementptr inbounds i16, i16* %read_input784, i64 %15265
  %15267 = getelementptr inbounds i16, i16* %15266, i64 1
  %15268 = bitcast i16* %15267 to <16 x i16>*
  %15269 = load <16 x i16>, <16 x i16>* %15268, align 2, !tbaa !396
  %15270 = getelementptr inbounds i16, i16* %15266, i64 17
  %15271 = bitcast i16* %15270 to <16 x i16>*
  %15272 = load <16 x i16>, <16 x i16>* %15271, align 2, !tbaa !396
  %15273 = getelementptr inbounds i16, i16* %15266, i64 2
  %15274 = bitcast i16* %15273 to <16 x i16>*
  %15275 = load <16 x i16>, <16 x i16>* %15274, align 2, !tbaa !396
  %15276 = getelementptr inbounds i16, i16* %15266, i64 18
  %15277 = bitcast i16* %15276 to <16 x i16>*
  %15278 = load <16 x i16>, <16 x i16>* %15277, align 2, !tbaa !396
  %15279 = bitcast i16* %15266 to <16 x i16>*
  %15280 = load <16 x i16>, <16 x i16>* %15279, align 2, !tbaa !396
  %15281 = getelementptr inbounds i16, i16* %15266, i64 16
  %15282 = bitcast i16* %15281 to <16 x i16>*
  %15283 = load <16 x i16>, <16 x i16>* %15282, align 2, !tbaa !396
  %15284 = add <16 x i16> %15275, %15269
  %15285 = add <16 x i16> %15284, %15280
  %15286 = add <16 x i16> %15278, %15272
  %15287 = add <16 x i16> %15286, %15283
  %15288 = shufflevector <16 x i16> %15285, <16 x i16> %15287, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15289 = udiv <32 x i16> %15288, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15290 = shufflevector <32 x i16> %15289, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15291 = shl nsw i64 %15245, 5
  %15292 = add nsw i64 %15291, %15150
  %15293 = getelementptr inbounds i16, i16* %blur_x841, i64 %15292
  %15294 = bitcast i16* %15293 to <16 x i16>*
  store <16 x i16> %15290, <16 x i16>* %15294, align 2, !tbaa !399
  %15295 = shufflevector <32 x i16> %15289, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15296 = getelementptr inbounds i16, i16* %15293, i64 16
  %15297 = bitcast i16* %15296 to <16 x i16>*
  store <16 x i16> %15295, <16 x i16>* %15297, align 2, !tbaa !399
  br label %"consume blur_x1526"

"consume blur_x1526":                             ; preds = %"for blur_y.s0.x.x.rebased1518.consume blur_x1526_crit_edge", %"produce blur_x1524"
  %.pre-phi3429 = phi i64 [ %.pre3428, %"for blur_y.s0.x.x.rebased1518.consume blur_x1526_crit_edge" ], [ %15291, %"produce blur_x1524" ]
  %15298 = add nsw i64 %15153, %.pre-phi3429
  %15299 = getelementptr inbounds i16, i16* %blur_x841, i64 %15298
  %15300 = bitcast i16* %15299 to <16 x i16>*
  %15301 = load <16 x i16>, <16 x i16>* %15300, align 2, !tbaa !399
  %15302 = getelementptr inbounds i16, i16* %15299, i64 16
  %15303 = bitcast i16* %15302 to <16 x i16>*
  %15304 = load <16 x i16>, <16 x i16>* %15303, align 2, !tbaa !399
  %15305 = add nsw i64 %15156, %.pre-phi3429
  %15306 = getelementptr inbounds i16, i16* %blur_x841, i64 %15305
  %15307 = bitcast i16* %15306 to <16 x i16>*
  %15308 = load <16 x i16>, <16 x i16>* %15307, align 2, !tbaa !399
  %15309 = getelementptr inbounds i16, i16* %15306, i64 16
  %15310 = bitcast i16* %15309 to <16 x i16>*
  %15311 = load <16 x i16>, <16 x i16>* %15310, align 2, !tbaa !399
  %15312 = add nsw i64 %15159, %.pre-phi3429
  %15313 = getelementptr inbounds i16, i16* %blur_x841, i64 %15312
  %15314 = bitcast i16* %15313 to <16 x i16>*
  %15315 = load <16 x i16>, <16 x i16>* %15314, align 2, !tbaa !399
  %15316 = getelementptr inbounds i16, i16* %15313, i64 16
  %15317 = bitcast i16* %15316 to <16 x i16>*
  %15318 = load <16 x i16>, <16 x i16>* %15317, align 2, !tbaa !399
  %15319 = add <16 x i16> %15308, %15301
  %15320 = add <16 x i16> %15319, %15315
  %15321 = add <16 x i16> %15311, %15304
  %15322 = add <16 x i16> %15321, %15318
  %15323 = shufflevector <16 x i16> %15320, <16 x i16> %15322, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15324 = udiv <32 x i16> %15323, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15325 = shufflevector <32 x i16> %15324, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15326 = add nsw i64 %15163, %.pre-phi3429
  %15327 = getelementptr inbounds i16, i16* %258, i64 %15326
  %15328 = bitcast i16* %15327 to <16 x i16>*
  store <16 x i16> %15325, <16 x i16>* %15328, align 2, !tbaa !401
  %15329 = shufflevector <32 x i16> %15324, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15330 = getelementptr inbounds i16, i16* %15327, i64 16
  %15331 = bitcast i16* %15330 to <16 x i16>*
  store <16 x i16> %15329, <16 x i16>* %15331, align 2, !tbaa !401
  %indvars.iv.next3271 = add nuw nsw i64 %indvars.iv3270, 1
  %.not2503 = icmp eq i64 %indvars.iv.next3271, %515
  br i1 %.not2503, label %"end for blur_y.s0.x.x.rebased1519", label %"for blur_y.s0.x.x.rebased1518"

"for blur_y.s0.x.x.rebased1534":                  ; preds = %"for blur_y.s0.x.x.rebased1534.preheader", %"consume blur_x1545"
  %blur_y.s0.x.x.rebased1536 = phi i32 [ %15406, %"consume blur_x1545" ], [ 0, %"for blur_y.s0.x.x.rebased1534.preheader" ]
  %15332 = add nsw i32 %blur_y.s0.x.x.rebased1536, %t1582776
  %a3213 = shl nsw i32 %15332, 5
  %15333 = icmp sgt i32 %t1603, %a3213
  %blur_y.s0.x.v0.base.s1537 = select i1 %15333, i32 %a3213, i32 %t1603
  %15334 = icmp slt i32 %15332, 1
  %15335 = icmp sgt i32 %194, %a3213
  %15336 = or i1 %15334, %15335
  br i1 %15336, label %"produce blur_x1542", label %"consume blur_x1545"

"end for blur_y.s0.x.x.rebased1535":              ; preds = %"consume blur_x1545", %"end for blur_y.s0.x.x.rebased1519"
  br i1 %225, label %"produce blur_x1549", label %after_bb1546

"produce blur_x1542":                             ; preds = %"for blur_y.s0.x.x.rebased1534"
  %15337 = icmp slt i32 %blur_y.s0.x.v0.base.s1537, %194
  %blur_x.s0.x.v1.base.s1543 = select i1 %15337, i32 %blur_y.s0.x.v0.base.s1537, i32 %194
  %t9011544 = add nsw i32 %406, %blur_x.s0.x.v1.base.s1543
  %15338 = sext i32 %t9011544 to i64
  %15339 = getelementptr inbounds i16, i16* %read_input784, i64 %15338
  %15340 = getelementptr inbounds i16, i16* %15339, i64 1
  %15341 = bitcast i16* %15340 to <16 x i16>*
  %15342 = load <16 x i16>, <16 x i16>* %15341, align 2, !tbaa !396
  %15343 = getelementptr inbounds i16, i16* %15339, i64 17
  %15344 = bitcast i16* %15343 to <16 x i16>*
  %15345 = load <16 x i16>, <16 x i16>* %15344, align 2, !tbaa !396
  %15346 = getelementptr inbounds i16, i16* %15339, i64 2
  %15347 = bitcast i16* %15346 to <16 x i16>*
  %15348 = load <16 x i16>, <16 x i16>* %15347, align 2, !tbaa !396
  %15349 = getelementptr inbounds i16, i16* %15339, i64 18
  %15350 = bitcast i16* %15349 to <16 x i16>*
  %15351 = load <16 x i16>, <16 x i16>* %15350, align 2, !tbaa !396
  %15352 = bitcast i16* %15339 to <16 x i16>*
  %15353 = load <16 x i16>, <16 x i16>* %15352, align 2, !tbaa !396
  %15354 = getelementptr inbounds i16, i16* %15339, i64 16
  %15355 = bitcast i16* %15354 to <16 x i16>*
  %15356 = load <16 x i16>, <16 x i16>* %15355, align 2, !tbaa !396
  %15357 = add <16 x i16> %15348, %15342
  %15358 = add <16 x i16> %15357, %15353
  %15359 = add <16 x i16> %15351, %15345
  %15360 = add <16 x i16> %15359, %15356
  %15361 = shufflevector <16 x i16> %15358, <16 x i16> %15360, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15362 = udiv <32 x i16> %15361, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15363 = shufflevector <32 x i16> %15362, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15364 = sext i32 %blur_x.s0.x.v1.base.s1543 to i64
  %15365 = add nsw i64 %15364, %15251
  %15366 = getelementptr inbounds i16, i16* %blur_x841, i64 %15365
  %15367 = bitcast i16* %15366 to <16 x i16>*
  store <16 x i16> %15363, <16 x i16>* %15367, align 2, !tbaa !399
  %15368 = shufflevector <32 x i16> %15362, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15369 = getelementptr inbounds i16, i16* %15366, i64 16
  %15370 = bitcast i16* %15369 to <16 x i16>*
  store <16 x i16> %15368, <16 x i16>* %15370, align 2, !tbaa !399
  br label %"consume blur_x1545"

"consume blur_x1545":                             ; preds = %"for blur_y.s0.x.x.rebased1534", %"produce blur_x1542"
  %15371 = sext i32 %blur_y.s0.x.v0.base.s1537 to i64
  %15372 = add nsw i64 %15254, %15371
  %15373 = getelementptr inbounds i16, i16* %blur_x841, i64 %15372
  %15374 = bitcast i16* %15373 to <16 x i16>*
  %15375 = load <16 x i16>, <16 x i16>* %15374, align 2, !tbaa !399
  %15376 = getelementptr inbounds i16, i16* %15373, i64 16
  %15377 = bitcast i16* %15376 to <16 x i16>*
  %15378 = load <16 x i16>, <16 x i16>* %15377, align 2, !tbaa !399
  %15379 = add nsw i64 %15257, %15371
  %15380 = getelementptr inbounds i16, i16* %blur_x841, i64 %15379
  %15381 = bitcast i16* %15380 to <16 x i16>*
  %15382 = load <16 x i16>, <16 x i16>* %15381, align 2, !tbaa !399
  %15383 = getelementptr inbounds i16, i16* %15380, i64 16
  %15384 = bitcast i16* %15383 to <16 x i16>*
  %15385 = load <16 x i16>, <16 x i16>* %15384, align 2, !tbaa !399
  %15386 = add nsw i64 %15260, %15371
  %15387 = getelementptr inbounds i16, i16* %blur_x841, i64 %15386
  %15388 = bitcast i16* %15387 to <16 x i16>*
  %15389 = load <16 x i16>, <16 x i16>* %15388, align 2, !tbaa !399
  %15390 = getelementptr inbounds i16, i16* %15387, i64 16
  %15391 = bitcast i16* %15390 to <16 x i16>*
  %15392 = load <16 x i16>, <16 x i16>* %15391, align 2, !tbaa !399
  %15393 = add <16 x i16> %15382, %15375
  %15394 = add <16 x i16> %15393, %15389
  %15395 = add <16 x i16> %15385, %15378
  %15396 = add <16 x i16> %15395, %15392
  %15397 = shufflevector <16 x i16> %15394, <16 x i16> %15396, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15398 = udiv <32 x i16> %15397, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15399 = shufflevector <32 x i16> %15398, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15400 = add nsw i64 %15264, %15371
  %15401 = getelementptr inbounds i16, i16* %258, i64 %15400
  %15402 = bitcast i16* %15401 to <16 x i16>*
  store <16 x i16> %15399, <16 x i16>* %15402, align 2, !tbaa !401
  %15403 = shufflevector <32 x i16> %15398, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15404 = getelementptr inbounds i16, i16* %15401, i64 16
  %15405 = bitcast i16* %15404 to <16 x i16>*
  store <16 x i16> %15403, <16 x i16>* %15405, align 2, !tbaa !401
  %15406 = add nuw nsw i32 %blur_y.s0.x.x.rebased1536, 1
  %.not2502 = icmp eq i32 %15406, %t1639860
  br i1 %.not2502, label %"end for blur_y.s0.x.x.rebased1535", label %"for blur_y.s0.x.x.rebased1534"

after_bb1546:                                     ; preds = %"end for blur_y.s0.x.x.rebased1535", %"produce blur_x1549"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1561.preheader", label %"end for blur_y.s0.x.x.rebased1562", !prof !386

"for blur_y.s0.x.x.rebased1561.preheader":        ; preds = %after_bb1546
  %15407 = sext i32 %t1644876 to i64
  %15408 = zext i32 %.pre-phi3387 to i64
  %15409 = mul nsw i64 %15408, %322
  %15410 = sub nsw i64 %15409, %293
  %15411 = zext i32 %.pre-phi3391 to i64
  %15412 = mul nsw i64 %15411, %322
  %15413 = sub nsw i64 %15412, %293
  %15414 = zext i32 %.pre-phi3401 to i64
  %15415 = mul nsw i64 %15414, %322
  %15416 = sub nsw i64 %15415, %293
  %15417 = sext i32 %a365 to i64
  %15418 = add nsw i64 %15417, 15
  %15419 = mul nsw i64 %15418, %319
  %15420 = add nsw i64 %15419, %323
  br label %"for blur_y.s0.x.x.rebased1561"

"produce blur_x1549":                             ; preds = %"end for blur_y.s0.x.x.rebased1535"
  %15421 = getelementptr inbounds i16, i16* %read_input784, i64 %410
  %15422 = getelementptr inbounds i16, i16* %15421, i64 -31
  %15423 = bitcast i16* %15422 to <16 x i16>*
  %15424 = load <16 x i16>, <16 x i16>* %15423, align 2, !tbaa !396
  %15425 = getelementptr inbounds i16, i16* %15421, i64 -15
  %15426 = bitcast i16* %15425 to <16 x i16>*
  %15427 = load <16 x i16>, <16 x i16>* %15426, align 2, !tbaa !396
  %15428 = getelementptr inbounds i16, i16* %15421, i64 -30
  %15429 = bitcast i16* %15428 to <16 x i16>*
  %15430 = load <16 x i16>, <16 x i16>* %15429, align 2, !tbaa !396
  %15431 = getelementptr inbounds i16, i16* %15421, i64 -14
  %15432 = bitcast i16* %15431 to <16 x i16>*
  %15433 = load <16 x i16>, <16 x i16>* %15432, align 2, !tbaa !396
  %15434 = getelementptr inbounds i16, i16* %15421, i64 -32
  %15435 = bitcast i16* %15434 to <16 x i16>*
  %15436 = load <16 x i16>, <16 x i16>* %15435, align 2, !tbaa !396
  %15437 = getelementptr inbounds i16, i16* %15421, i64 -16
  %15438 = bitcast i16* %15437 to <16 x i16>*
  %15439 = load <16 x i16>, <16 x i16>* %15438, align 2, !tbaa !396
  %15440 = add <16 x i16> %15430, %15424
  %15441 = add <16 x i16> %15440, %15436
  %15442 = add <16 x i16> %15433, %15427
  %15443 = add <16 x i16> %15442, %15439
  %15444 = shufflevector <16 x i16> %15441, <16 x i16> %15443, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15445 = udiv <32 x i16> %15444, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15446 = shufflevector <32 x i16> %15445, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15447 = zext i32 %.pre-phi3391 to i64
  %15448 = mul nsw i64 %294, %15447
  %15449 = add nsw i64 %296, %15448
  %15450 = getelementptr inbounds i16, i16* %blur_x841, i64 %15449
  %15451 = getelementptr inbounds i16, i16* %15450, i64 -32
  %15452 = bitcast i16* %15451 to <16 x i16>*
  store <16 x i16> %15446, <16 x i16>* %15452, align 2, !tbaa !399
  %15453 = shufflevector <32 x i16> %15445, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15454 = getelementptr inbounds i16, i16* %15450, i64 -16
  %15455 = bitcast i16* %15454 to <16 x i16>*
  store <16 x i16> %15453, <16 x i16>* %15455, align 2, !tbaa !399
  %15456 = zext i32 %.pre-phi3387 to i64
  %15457 = mul nsw i64 %15456, %318
  %15458 = add nsw i64 %15457, %291
  %15459 = getelementptr inbounds i16, i16* %blur_x841, i64 %15458
  %15460 = getelementptr inbounds i16, i16* %15459, i64 -32
  %15461 = bitcast i16* %15460 to <16 x i16>*
  %15462 = load <16 x i16>, <16 x i16>* %15461, align 2, !tbaa !399
  %15463 = getelementptr inbounds i16, i16* %15459, i64 -16
  %15464 = bitcast i16* %15463 to <16 x i16>*
  %15465 = load <16 x i16>, <16 x i16>* %15464, align 2, !tbaa !399
  %15466 = mul nsw i64 %15447, %318
  %15467 = add nsw i64 %15466, %291
  %15468 = getelementptr inbounds i16, i16* %blur_x841, i64 %15467
  %15469 = getelementptr inbounds i16, i16* %15468, i64 -32
  %15470 = bitcast i16* %15469 to <16 x i16>*
  %15471 = load <16 x i16>, <16 x i16>* %15470, align 2, !tbaa !399
  %15472 = getelementptr inbounds i16, i16* %15468, i64 -16
  %15473 = bitcast i16* %15472 to <16 x i16>*
  %15474 = load <16 x i16>, <16 x i16>* %15473, align 2, !tbaa !399
  %15475 = zext i32 %.pre-phi3401 to i64
  %15476 = mul nsw i64 %15475, %318
  %15477 = add nsw i64 %15476, %291
  %15478 = getelementptr inbounds i16, i16* %blur_x841, i64 %15477
  %15479 = getelementptr inbounds i16, i16* %15478, i64 -32
  %15480 = bitcast i16* %15479 to <16 x i16>*
  %15481 = load <16 x i16>, <16 x i16>* %15480, align 2, !tbaa !399
  %15482 = getelementptr inbounds i16, i16* %15478, i64 -16
  %15483 = bitcast i16* %15482 to <16 x i16>*
  %15484 = load <16 x i16>, <16 x i16>* %15483, align 2, !tbaa !399
  %15485 = add <16 x i16> %15471, %15462
  %15486 = add <16 x i16> %15485, %15481
  %15487 = add <16 x i16> %15474, %15465
  %15488 = add <16 x i16> %15487, %15484
  %15489 = shufflevector <16 x i16> %15486, <16 x i16> %15488, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15490 = udiv <32 x i16> %15489, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15491 = shufflevector <32 x i16> %15490, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15492 = sext i32 %a365 to i64
  %15493 = add nsw i64 %15492, 15
  %15494 = mul nsw i64 %15493, %319
  %15495 = add nsw i64 %321, %15494
  %15496 = getelementptr inbounds i16, i16* %258, i64 %15495
  %15497 = getelementptr inbounds i16, i16* %15496, i64 -32
  %15498 = bitcast i16* %15497 to <16 x i16>*
  store <16 x i16> %15491, <16 x i16>* %15498, align 2, !tbaa !401
  %15499 = shufflevector <32 x i16> %15490, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15500 = getelementptr inbounds i16, i16* %15496, i64 -16
  %15501 = bitcast i16* %15500 to <16 x i16>*
  store <16 x i16> %15499, <16 x i16>* %15501, align 2, !tbaa !401
  br label %after_bb1546

"for blur_y.s0.x.x.rebased1561":                  ; preds = %"for blur_y.s0.x.x.rebased1561.preheader", %"consume blur_x1569"
  %indvars.iv3272 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1561.preheader" ], [ %indvars.iv.next3273, %"consume blur_x1569" ]
  %15502 = add nsw i64 %indvars.iv3272, %298
  %15503 = icmp slt i64 %15502, 1
  %15504 = trunc i64 %15502 to i32
  %15505 = shl nsw i32 %15504, 5
  %15506 = icmp sgt i32 %194, %15505
  %15507 = or i1 %15503, %15506
  br i1 %15507, label %"produce blur_x1567", label %"for blur_y.s0.x.x.rebased1561.consume blur_x1569_crit_edge"

"for blur_y.s0.x.x.rebased1561.consume blur_x1569_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1561"
  %.pre3430 = shl nsw i64 %15502, 5
  br label %"consume blur_x1569"

"end for blur_y.s0.x.x.rebased1562":              ; preds = %"consume blur_x1569", %after_bb1546
  br i1 %299, label %"for blur_y.s0.x.x.rebased1577.preheader", label %"end for blur_y.s0.x.x.rebased1578", !prof !386

"for blur_y.s0.x.x.rebased1577.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1562"
  %15508 = sext i32 %t1644876 to i64
  %15509 = zext i32 %.pre-phi3387 to i64
  %15510 = mul nsw i64 %15509, %322
  %15511 = sub nsw i64 %15510, %293
  %15512 = zext i32 %.pre-phi3391 to i64
  %15513 = mul nsw i64 %15512, %322
  %15514 = sub nsw i64 %15513, %293
  %15515 = zext i32 %.pre-phi3401 to i64
  %15516 = mul nsw i64 %15515, %322
  %15517 = sub nsw i64 %15516, %293
  %15518 = sext i32 %a365 to i64
  %15519 = add nsw i64 %15518, 15
  %15520 = mul nsw i64 %15519, %319
  %15521 = add nsw i64 %15520, %323
  br label %"for blur_y.s0.x.x.rebased1577"

"produce blur_x1567":                             ; preds = %"for blur_y.s0.x.x.rebased1561"
  %t9121568 = add nsw i32 %412, %15505
  %15522 = sext i32 %t9121568 to i64
  %15523 = getelementptr inbounds i16, i16* %read_input784, i64 %15522
  %15524 = getelementptr inbounds i16, i16* %15523, i64 1
  %15525 = bitcast i16* %15524 to <16 x i16>*
  %15526 = load <16 x i16>, <16 x i16>* %15525, align 2, !tbaa !396
  %15527 = getelementptr inbounds i16, i16* %15523, i64 17
  %15528 = bitcast i16* %15527 to <16 x i16>*
  %15529 = load <16 x i16>, <16 x i16>* %15528, align 2, !tbaa !396
  %15530 = getelementptr inbounds i16, i16* %15523, i64 2
  %15531 = bitcast i16* %15530 to <16 x i16>*
  %15532 = load <16 x i16>, <16 x i16>* %15531, align 2, !tbaa !396
  %15533 = getelementptr inbounds i16, i16* %15523, i64 18
  %15534 = bitcast i16* %15533 to <16 x i16>*
  %15535 = load <16 x i16>, <16 x i16>* %15534, align 2, !tbaa !396
  %15536 = bitcast i16* %15523 to <16 x i16>*
  %15537 = load <16 x i16>, <16 x i16>* %15536, align 2, !tbaa !396
  %15538 = getelementptr inbounds i16, i16* %15523, i64 16
  %15539 = bitcast i16* %15538 to <16 x i16>*
  %15540 = load <16 x i16>, <16 x i16>* %15539, align 2, !tbaa !396
  %15541 = add <16 x i16> %15532, %15526
  %15542 = add <16 x i16> %15541, %15537
  %15543 = add <16 x i16> %15535, %15529
  %15544 = add <16 x i16> %15543, %15540
  %15545 = shufflevector <16 x i16> %15542, <16 x i16> %15544, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15546 = udiv <32 x i16> %15545, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15547 = shufflevector <32 x i16> %15546, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15548 = shl nsw i64 %15502, 5
  %15549 = add nsw i64 %15548, %15407
  %15550 = getelementptr inbounds i16, i16* %blur_x841, i64 %15549
  %15551 = bitcast i16* %15550 to <16 x i16>*
  store <16 x i16> %15547, <16 x i16>* %15551, align 2, !tbaa !399
  %15552 = shufflevector <32 x i16> %15546, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15553 = getelementptr inbounds i16, i16* %15550, i64 16
  %15554 = bitcast i16* %15553 to <16 x i16>*
  store <16 x i16> %15552, <16 x i16>* %15554, align 2, !tbaa !399
  br label %"consume blur_x1569"

"consume blur_x1569":                             ; preds = %"for blur_y.s0.x.x.rebased1561.consume blur_x1569_crit_edge", %"produce blur_x1567"
  %.pre-phi3431 = phi i64 [ %.pre3430, %"for blur_y.s0.x.x.rebased1561.consume blur_x1569_crit_edge" ], [ %15548, %"produce blur_x1567" ]
  %15555 = add nsw i64 %15410, %.pre-phi3431
  %15556 = getelementptr inbounds i16, i16* %blur_x841, i64 %15555
  %15557 = bitcast i16* %15556 to <16 x i16>*
  %15558 = load <16 x i16>, <16 x i16>* %15557, align 2, !tbaa !399
  %15559 = getelementptr inbounds i16, i16* %15556, i64 16
  %15560 = bitcast i16* %15559 to <16 x i16>*
  %15561 = load <16 x i16>, <16 x i16>* %15560, align 2, !tbaa !399
  %15562 = add nsw i64 %15413, %.pre-phi3431
  %15563 = getelementptr inbounds i16, i16* %blur_x841, i64 %15562
  %15564 = bitcast i16* %15563 to <16 x i16>*
  %15565 = load <16 x i16>, <16 x i16>* %15564, align 2, !tbaa !399
  %15566 = getelementptr inbounds i16, i16* %15563, i64 16
  %15567 = bitcast i16* %15566 to <16 x i16>*
  %15568 = load <16 x i16>, <16 x i16>* %15567, align 2, !tbaa !399
  %15569 = add nsw i64 %15416, %.pre-phi3431
  %15570 = getelementptr inbounds i16, i16* %blur_x841, i64 %15569
  %15571 = bitcast i16* %15570 to <16 x i16>*
  %15572 = load <16 x i16>, <16 x i16>* %15571, align 2, !tbaa !399
  %15573 = getelementptr inbounds i16, i16* %15570, i64 16
  %15574 = bitcast i16* %15573 to <16 x i16>*
  %15575 = load <16 x i16>, <16 x i16>* %15574, align 2, !tbaa !399
  %15576 = add <16 x i16> %15565, %15558
  %15577 = add <16 x i16> %15576, %15572
  %15578 = add <16 x i16> %15568, %15561
  %15579 = add <16 x i16> %15578, %15575
  %15580 = shufflevector <16 x i16> %15577, <16 x i16> %15579, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15581 = udiv <32 x i16> %15580, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15582 = shufflevector <32 x i16> %15581, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15583 = add nsw i64 %15420, %.pre-phi3431
  %15584 = getelementptr inbounds i16, i16* %258, i64 %15583
  %15585 = bitcast i16* %15584 to <16 x i16>*
  store <16 x i16> %15582, <16 x i16>* %15585, align 2, !tbaa !401
  %15586 = shufflevector <32 x i16> %15581, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15587 = getelementptr inbounds i16, i16* %15584, i64 16
  %15588 = bitcast i16* %15587 to <16 x i16>*
  store <16 x i16> %15586, <16 x i16>* %15588, align 2, !tbaa !401
  %indvars.iv.next3273 = add nuw nsw i64 %indvars.iv3272, 1
  %.not2499 = icmp eq i64 %indvars.iv.next3273, %515
  br i1 %.not2499, label %"end for blur_y.s0.x.x.rebased1562", label %"for blur_y.s0.x.x.rebased1561"

"for blur_y.s0.x.x.rebased1577":                  ; preds = %"for blur_y.s0.x.x.rebased1577.preheader", %"consume blur_x1588"
  %blur_y.s0.x.x.rebased1579 = phi i32 [ %15663, %"consume blur_x1588" ], [ 0, %"for blur_y.s0.x.x.rebased1577.preheader" ]
  %15589 = add nsw i32 %blur_y.s0.x.x.rebased1579, %t1582776
  %a3370 = shl nsw i32 %15589, 5
  %15590 = icmp sgt i32 %t1603, %a3370
  %blur_y.s0.x.v0.base.s1580 = select i1 %15590, i32 %a3370, i32 %t1603
  %15591 = icmp slt i32 %15589, 1
  %15592 = icmp sgt i32 %194, %a3370
  %15593 = or i1 %15591, %15592
  br i1 %15593, label %"produce blur_x1585", label %"consume blur_x1588"

"end for blur_y.s0.x.x.rebased1578":              ; preds = %"consume blur_x1588", %"end for blur_y.s0.x.x.rebased1562"
  br i1 %225, label %"produce blur_x1592", label %after_bb1589

"produce blur_x1585":                             ; preds = %"for blur_y.s0.x.x.rebased1577"
  %15594 = icmp slt i32 %blur_y.s0.x.v0.base.s1580, %194
  %blur_x.s0.x.v1.base.s1586 = select i1 %15594, i32 %blur_y.s0.x.v0.base.s1580, i32 %194
  %t9171587 = add nsw i32 %412, %blur_x.s0.x.v1.base.s1586
  %15595 = sext i32 %t9171587 to i64
  %15596 = getelementptr inbounds i16, i16* %read_input784, i64 %15595
  %15597 = getelementptr inbounds i16, i16* %15596, i64 1
  %15598 = bitcast i16* %15597 to <16 x i16>*
  %15599 = load <16 x i16>, <16 x i16>* %15598, align 2, !tbaa !396
  %15600 = getelementptr inbounds i16, i16* %15596, i64 17
  %15601 = bitcast i16* %15600 to <16 x i16>*
  %15602 = load <16 x i16>, <16 x i16>* %15601, align 2, !tbaa !396
  %15603 = getelementptr inbounds i16, i16* %15596, i64 2
  %15604 = bitcast i16* %15603 to <16 x i16>*
  %15605 = load <16 x i16>, <16 x i16>* %15604, align 2, !tbaa !396
  %15606 = getelementptr inbounds i16, i16* %15596, i64 18
  %15607 = bitcast i16* %15606 to <16 x i16>*
  %15608 = load <16 x i16>, <16 x i16>* %15607, align 2, !tbaa !396
  %15609 = bitcast i16* %15596 to <16 x i16>*
  %15610 = load <16 x i16>, <16 x i16>* %15609, align 2, !tbaa !396
  %15611 = getelementptr inbounds i16, i16* %15596, i64 16
  %15612 = bitcast i16* %15611 to <16 x i16>*
  %15613 = load <16 x i16>, <16 x i16>* %15612, align 2, !tbaa !396
  %15614 = add <16 x i16> %15605, %15599
  %15615 = add <16 x i16> %15614, %15610
  %15616 = add <16 x i16> %15608, %15602
  %15617 = add <16 x i16> %15616, %15613
  %15618 = shufflevector <16 x i16> %15615, <16 x i16> %15617, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15619 = udiv <32 x i16> %15618, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15620 = shufflevector <32 x i16> %15619, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15621 = sext i32 %blur_x.s0.x.v1.base.s1586 to i64
  %15622 = add nsw i64 %15621, %15508
  %15623 = getelementptr inbounds i16, i16* %blur_x841, i64 %15622
  %15624 = bitcast i16* %15623 to <16 x i16>*
  store <16 x i16> %15620, <16 x i16>* %15624, align 2, !tbaa !399
  %15625 = shufflevector <32 x i16> %15619, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15626 = getelementptr inbounds i16, i16* %15623, i64 16
  %15627 = bitcast i16* %15626 to <16 x i16>*
  store <16 x i16> %15625, <16 x i16>* %15627, align 2, !tbaa !399
  br label %"consume blur_x1588"

"consume blur_x1588":                             ; preds = %"for blur_y.s0.x.x.rebased1577", %"produce blur_x1585"
  %15628 = sext i32 %blur_y.s0.x.v0.base.s1580 to i64
  %15629 = add nsw i64 %15511, %15628
  %15630 = getelementptr inbounds i16, i16* %blur_x841, i64 %15629
  %15631 = bitcast i16* %15630 to <16 x i16>*
  %15632 = load <16 x i16>, <16 x i16>* %15631, align 2, !tbaa !399
  %15633 = getelementptr inbounds i16, i16* %15630, i64 16
  %15634 = bitcast i16* %15633 to <16 x i16>*
  %15635 = load <16 x i16>, <16 x i16>* %15634, align 2, !tbaa !399
  %15636 = add nsw i64 %15514, %15628
  %15637 = getelementptr inbounds i16, i16* %blur_x841, i64 %15636
  %15638 = bitcast i16* %15637 to <16 x i16>*
  %15639 = load <16 x i16>, <16 x i16>* %15638, align 2, !tbaa !399
  %15640 = getelementptr inbounds i16, i16* %15637, i64 16
  %15641 = bitcast i16* %15640 to <16 x i16>*
  %15642 = load <16 x i16>, <16 x i16>* %15641, align 2, !tbaa !399
  %15643 = add nsw i64 %15517, %15628
  %15644 = getelementptr inbounds i16, i16* %blur_x841, i64 %15643
  %15645 = bitcast i16* %15644 to <16 x i16>*
  %15646 = load <16 x i16>, <16 x i16>* %15645, align 2, !tbaa !399
  %15647 = getelementptr inbounds i16, i16* %15644, i64 16
  %15648 = bitcast i16* %15647 to <16 x i16>*
  %15649 = load <16 x i16>, <16 x i16>* %15648, align 2, !tbaa !399
  %15650 = add <16 x i16> %15639, %15632
  %15651 = add <16 x i16> %15650, %15646
  %15652 = add <16 x i16> %15642, %15635
  %15653 = add <16 x i16> %15652, %15649
  %15654 = shufflevector <16 x i16> %15651, <16 x i16> %15653, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15655 = udiv <32 x i16> %15654, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15656 = shufflevector <32 x i16> %15655, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15657 = add nsw i64 %15521, %15628
  %15658 = getelementptr inbounds i16, i16* %258, i64 %15657
  %15659 = bitcast i16* %15658 to <16 x i16>*
  store <16 x i16> %15656, <16 x i16>* %15659, align 2, !tbaa !401
  %15660 = shufflevector <32 x i16> %15655, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15661 = getelementptr inbounds i16, i16* %15658, i64 16
  %15662 = bitcast i16* %15661 to <16 x i16>*
  store <16 x i16> %15660, <16 x i16>* %15662, align 2, !tbaa !401
  %15663 = add nuw nsw i32 %blur_y.s0.x.x.rebased1579, 1
  %.not2498 = icmp eq i32 %15663, %t1639860
  br i1 %.not2498, label %"end for blur_y.s0.x.x.rebased1578", label %"for blur_y.s0.x.x.rebased1577"

after_bb1589:                                     ; preds = %"end for blur_y.s0.x.x.rebased1578", %"produce blur_x1592"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1604.preheader", label %"end for blur_y.s0.x.x.rebased1605", !prof !386

"for blur_y.s0.x.x.rebased1604.preheader":        ; preds = %after_bb1589
  %15664 = sext i32 %t1650912 to i64
  %15665 = zext i32 %.pre-phi3391 to i64
  %15666 = mul nsw i64 %15665, %322
  %15667 = sub nsw i64 %15666, %293
  %15668 = zext i32 %.pre-phi3395 to i64
  %15669 = mul nsw i64 %15668, %322
  %15670 = sub nsw i64 %15669, %293
  %15671 = zext i32 %.pre-phi3387 to i64
  %15672 = mul nsw i64 %15671, %322
  %15673 = sub nsw i64 %15672, %293
  %15674 = sext i32 %a365 to i64
  %15675 = add nsw i64 %15674, 16
  %15676 = mul nsw i64 %15675, %319
  %15677 = add nsw i64 %15676, %323
  br label %"for blur_y.s0.x.x.rebased1604"

"produce blur_x1592":                             ; preds = %"end for blur_y.s0.x.x.rebased1578"
  %15678 = getelementptr inbounds i16, i16* %read_input784, i64 %416
  %15679 = getelementptr inbounds i16, i16* %15678, i64 -31
  %15680 = bitcast i16* %15679 to <16 x i16>*
  %15681 = load <16 x i16>, <16 x i16>* %15680, align 2, !tbaa !396
  %15682 = getelementptr inbounds i16, i16* %15678, i64 -15
  %15683 = bitcast i16* %15682 to <16 x i16>*
  %15684 = load <16 x i16>, <16 x i16>* %15683, align 2, !tbaa !396
  %15685 = getelementptr inbounds i16, i16* %15678, i64 -30
  %15686 = bitcast i16* %15685 to <16 x i16>*
  %15687 = load <16 x i16>, <16 x i16>* %15686, align 2, !tbaa !396
  %15688 = getelementptr inbounds i16, i16* %15678, i64 -14
  %15689 = bitcast i16* %15688 to <16 x i16>*
  %15690 = load <16 x i16>, <16 x i16>* %15689, align 2, !tbaa !396
  %15691 = getelementptr inbounds i16, i16* %15678, i64 -32
  %15692 = bitcast i16* %15691 to <16 x i16>*
  %15693 = load <16 x i16>, <16 x i16>* %15692, align 2, !tbaa !396
  %15694 = getelementptr inbounds i16, i16* %15678, i64 -16
  %15695 = bitcast i16* %15694 to <16 x i16>*
  %15696 = load <16 x i16>, <16 x i16>* %15695, align 2, !tbaa !396
  %15697 = add <16 x i16> %15687, %15681
  %15698 = add <16 x i16> %15697, %15693
  %15699 = add <16 x i16> %15690, %15684
  %15700 = add <16 x i16> %15699, %15696
  %15701 = shufflevector <16 x i16> %15698, <16 x i16> %15700, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15702 = udiv <32 x i16> %15701, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15703 = shufflevector <32 x i16> %15702, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15704 = zext i32 %.pre-phi3395 to i64
  %15705 = mul nsw i64 %294, %15704
  %15706 = add nsw i64 %296, %15705
  %15707 = getelementptr inbounds i16, i16* %blur_x841, i64 %15706
  %15708 = getelementptr inbounds i16, i16* %15707, i64 -32
  %15709 = bitcast i16* %15708 to <16 x i16>*
  store <16 x i16> %15703, <16 x i16>* %15709, align 2, !tbaa !399
  %15710 = shufflevector <32 x i16> %15702, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15711 = getelementptr inbounds i16, i16* %15707, i64 -16
  %15712 = bitcast i16* %15711 to <16 x i16>*
  store <16 x i16> %15710, <16 x i16>* %15712, align 2, !tbaa !399
  %15713 = zext i32 %.pre-phi3391 to i64
  %15714 = mul nsw i64 %15713, %318
  %15715 = add nsw i64 %15714, %291
  %15716 = getelementptr inbounds i16, i16* %blur_x841, i64 %15715
  %15717 = getelementptr inbounds i16, i16* %15716, i64 -32
  %15718 = bitcast i16* %15717 to <16 x i16>*
  %15719 = load <16 x i16>, <16 x i16>* %15718, align 2, !tbaa !399
  %15720 = getelementptr inbounds i16, i16* %15716, i64 -16
  %15721 = bitcast i16* %15720 to <16 x i16>*
  %15722 = load <16 x i16>, <16 x i16>* %15721, align 2, !tbaa !399
  %15723 = mul nsw i64 %15704, %318
  %15724 = add nsw i64 %15723, %291
  %15725 = getelementptr inbounds i16, i16* %blur_x841, i64 %15724
  %15726 = getelementptr inbounds i16, i16* %15725, i64 -32
  %15727 = bitcast i16* %15726 to <16 x i16>*
  %15728 = load <16 x i16>, <16 x i16>* %15727, align 2, !tbaa !399
  %15729 = getelementptr inbounds i16, i16* %15725, i64 -16
  %15730 = bitcast i16* %15729 to <16 x i16>*
  %15731 = load <16 x i16>, <16 x i16>* %15730, align 2, !tbaa !399
  %15732 = zext i32 %.pre-phi3387 to i64
  %15733 = mul nsw i64 %15732, %318
  %15734 = add nsw i64 %15733, %291
  %15735 = getelementptr inbounds i16, i16* %blur_x841, i64 %15734
  %15736 = getelementptr inbounds i16, i16* %15735, i64 -32
  %15737 = bitcast i16* %15736 to <16 x i16>*
  %15738 = load <16 x i16>, <16 x i16>* %15737, align 2, !tbaa !399
  %15739 = getelementptr inbounds i16, i16* %15735, i64 -16
  %15740 = bitcast i16* %15739 to <16 x i16>*
  %15741 = load <16 x i16>, <16 x i16>* %15740, align 2, !tbaa !399
  %15742 = add <16 x i16> %15728, %15719
  %15743 = add <16 x i16> %15742, %15738
  %15744 = add <16 x i16> %15731, %15722
  %15745 = add <16 x i16> %15744, %15741
  %15746 = shufflevector <16 x i16> %15743, <16 x i16> %15745, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15747 = udiv <32 x i16> %15746, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15748 = shufflevector <32 x i16> %15747, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15749 = sext i32 %a365 to i64
  %15750 = add nsw i64 %15749, 16
  %15751 = mul nsw i64 %15750, %319
  %15752 = add nsw i64 %321, %15751
  %15753 = getelementptr inbounds i16, i16* %258, i64 %15752
  %15754 = getelementptr inbounds i16, i16* %15753, i64 -32
  %15755 = bitcast i16* %15754 to <16 x i16>*
  store <16 x i16> %15748, <16 x i16>* %15755, align 2, !tbaa !401
  %15756 = shufflevector <32 x i16> %15747, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15757 = getelementptr inbounds i16, i16* %15753, i64 -16
  %15758 = bitcast i16* %15757 to <16 x i16>*
  store <16 x i16> %15756, <16 x i16>* %15758, align 2, !tbaa !401
  br label %after_bb1589

"for blur_y.s0.x.x.rebased1604":                  ; preds = %"for blur_y.s0.x.x.rebased1604.preheader", %"consume blur_x1612"
  %indvars.iv3274 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1604.preheader" ], [ %indvars.iv.next3275, %"consume blur_x1612" ]
  %15759 = add nsw i64 %indvars.iv3274, %298
  %15760 = icmp slt i64 %15759, 1
  %15761 = trunc i64 %15759 to i32
  %15762 = shl nsw i32 %15761, 5
  %15763 = icmp sgt i32 %194, %15762
  %15764 = or i1 %15760, %15763
  br i1 %15764, label %"produce blur_x1610", label %"for blur_y.s0.x.x.rebased1604.consume blur_x1612_crit_edge"

"for blur_y.s0.x.x.rebased1604.consume blur_x1612_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1604"
  %.pre3432 = shl nsw i64 %15759, 5
  br label %"consume blur_x1612"

"end for blur_y.s0.x.x.rebased1605":              ; preds = %"consume blur_x1612", %after_bb1589
  br i1 %299, label %"for blur_y.s0.x.x.rebased1620.preheader", label %"end for blur_y.s0.x.x.rebased1621", !prof !386

"for blur_y.s0.x.x.rebased1620.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1605"
  %15765 = sext i32 %t1650912 to i64
  %15766 = zext i32 %.pre-phi3391 to i64
  %15767 = mul nsw i64 %15766, %322
  %15768 = sub nsw i64 %15767, %293
  %15769 = zext i32 %.pre-phi3395 to i64
  %15770 = mul nsw i64 %15769, %322
  %15771 = sub nsw i64 %15770, %293
  %15772 = zext i32 %.pre-phi3387 to i64
  %15773 = mul nsw i64 %15772, %322
  %15774 = sub nsw i64 %15773, %293
  %15775 = sext i32 %a365 to i64
  %15776 = add nsw i64 %15775, 16
  %15777 = mul nsw i64 %15776, %319
  %15778 = add nsw i64 %15777, %323
  br label %"for blur_y.s0.x.x.rebased1620"

"produce blur_x1610":                             ; preds = %"for blur_y.s0.x.x.rebased1604"
  %t9281611 = add nsw i32 %418, %15762
  %15779 = sext i32 %t9281611 to i64
  %15780 = getelementptr inbounds i16, i16* %read_input784, i64 %15779
  %15781 = getelementptr inbounds i16, i16* %15780, i64 1
  %15782 = bitcast i16* %15781 to <16 x i16>*
  %15783 = load <16 x i16>, <16 x i16>* %15782, align 2, !tbaa !396
  %15784 = getelementptr inbounds i16, i16* %15780, i64 17
  %15785 = bitcast i16* %15784 to <16 x i16>*
  %15786 = load <16 x i16>, <16 x i16>* %15785, align 2, !tbaa !396
  %15787 = getelementptr inbounds i16, i16* %15780, i64 2
  %15788 = bitcast i16* %15787 to <16 x i16>*
  %15789 = load <16 x i16>, <16 x i16>* %15788, align 2, !tbaa !396
  %15790 = getelementptr inbounds i16, i16* %15780, i64 18
  %15791 = bitcast i16* %15790 to <16 x i16>*
  %15792 = load <16 x i16>, <16 x i16>* %15791, align 2, !tbaa !396
  %15793 = bitcast i16* %15780 to <16 x i16>*
  %15794 = load <16 x i16>, <16 x i16>* %15793, align 2, !tbaa !396
  %15795 = getelementptr inbounds i16, i16* %15780, i64 16
  %15796 = bitcast i16* %15795 to <16 x i16>*
  %15797 = load <16 x i16>, <16 x i16>* %15796, align 2, !tbaa !396
  %15798 = add <16 x i16> %15789, %15783
  %15799 = add <16 x i16> %15798, %15794
  %15800 = add <16 x i16> %15792, %15786
  %15801 = add <16 x i16> %15800, %15797
  %15802 = shufflevector <16 x i16> %15799, <16 x i16> %15801, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15803 = udiv <32 x i16> %15802, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15804 = shufflevector <32 x i16> %15803, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15805 = shl nsw i64 %15759, 5
  %15806 = add nsw i64 %15805, %15664
  %15807 = getelementptr inbounds i16, i16* %blur_x841, i64 %15806
  %15808 = bitcast i16* %15807 to <16 x i16>*
  store <16 x i16> %15804, <16 x i16>* %15808, align 2, !tbaa !399
  %15809 = shufflevector <32 x i16> %15803, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15810 = getelementptr inbounds i16, i16* %15807, i64 16
  %15811 = bitcast i16* %15810 to <16 x i16>*
  store <16 x i16> %15809, <16 x i16>* %15811, align 2, !tbaa !399
  br label %"consume blur_x1612"

"consume blur_x1612":                             ; preds = %"for blur_y.s0.x.x.rebased1604.consume blur_x1612_crit_edge", %"produce blur_x1610"
  %.pre-phi3433 = phi i64 [ %.pre3432, %"for blur_y.s0.x.x.rebased1604.consume blur_x1612_crit_edge" ], [ %15805, %"produce blur_x1610" ]
  %15812 = add nsw i64 %15667, %.pre-phi3433
  %15813 = getelementptr inbounds i16, i16* %blur_x841, i64 %15812
  %15814 = bitcast i16* %15813 to <16 x i16>*
  %15815 = load <16 x i16>, <16 x i16>* %15814, align 2, !tbaa !399
  %15816 = getelementptr inbounds i16, i16* %15813, i64 16
  %15817 = bitcast i16* %15816 to <16 x i16>*
  %15818 = load <16 x i16>, <16 x i16>* %15817, align 2, !tbaa !399
  %15819 = add nsw i64 %15670, %.pre-phi3433
  %15820 = getelementptr inbounds i16, i16* %blur_x841, i64 %15819
  %15821 = bitcast i16* %15820 to <16 x i16>*
  %15822 = load <16 x i16>, <16 x i16>* %15821, align 2, !tbaa !399
  %15823 = getelementptr inbounds i16, i16* %15820, i64 16
  %15824 = bitcast i16* %15823 to <16 x i16>*
  %15825 = load <16 x i16>, <16 x i16>* %15824, align 2, !tbaa !399
  %15826 = add nsw i64 %15673, %.pre-phi3433
  %15827 = getelementptr inbounds i16, i16* %blur_x841, i64 %15826
  %15828 = bitcast i16* %15827 to <16 x i16>*
  %15829 = load <16 x i16>, <16 x i16>* %15828, align 2, !tbaa !399
  %15830 = getelementptr inbounds i16, i16* %15827, i64 16
  %15831 = bitcast i16* %15830 to <16 x i16>*
  %15832 = load <16 x i16>, <16 x i16>* %15831, align 2, !tbaa !399
  %15833 = add <16 x i16> %15822, %15815
  %15834 = add <16 x i16> %15833, %15829
  %15835 = add <16 x i16> %15825, %15818
  %15836 = add <16 x i16> %15835, %15832
  %15837 = shufflevector <16 x i16> %15834, <16 x i16> %15836, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15838 = udiv <32 x i16> %15837, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15839 = shufflevector <32 x i16> %15838, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15840 = add nsw i64 %15677, %.pre-phi3433
  %15841 = getelementptr inbounds i16, i16* %258, i64 %15840
  %15842 = bitcast i16* %15841 to <16 x i16>*
  store <16 x i16> %15839, <16 x i16>* %15842, align 2, !tbaa !401
  %15843 = shufflevector <32 x i16> %15838, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15844 = getelementptr inbounds i16, i16* %15841, i64 16
  %15845 = bitcast i16* %15844 to <16 x i16>*
  store <16 x i16> %15843, <16 x i16>* %15845, align 2, !tbaa !401
  %indvars.iv.next3275 = add nuw nsw i64 %indvars.iv3274, 1
  %.not2495 = icmp eq i64 %indvars.iv.next3275, %515
  br i1 %.not2495, label %"end for blur_y.s0.x.x.rebased1605", label %"for blur_y.s0.x.x.rebased1604"

"for blur_y.s0.x.x.rebased1620":                  ; preds = %"for blur_y.s0.x.x.rebased1620.preheader", %"consume blur_x1631"
  %blur_y.s0.x.x.rebased1622 = phi i32 [ %15920, %"consume blur_x1631" ], [ 0, %"for blur_y.s0.x.x.rebased1620.preheader" ]
  %15846 = add nsw i32 %blur_y.s0.x.x.rebased1622, %t1582776
  %a3527 = shl nsw i32 %15846, 5
  %15847 = icmp sgt i32 %t1603, %a3527
  %blur_y.s0.x.v0.base.s1623 = select i1 %15847, i32 %a3527, i32 %t1603
  %15848 = icmp slt i32 %15846, 1
  %15849 = icmp sgt i32 %194, %a3527
  %15850 = or i1 %15848, %15849
  br i1 %15850, label %"produce blur_x1628", label %"consume blur_x1631"

"end for blur_y.s0.x.x.rebased1621":              ; preds = %"consume blur_x1631", %"end for blur_y.s0.x.x.rebased1605"
  br i1 %225, label %"produce blur_x1635", label %after_bb1632

"produce blur_x1628":                             ; preds = %"for blur_y.s0.x.x.rebased1620"
  %15851 = icmp slt i32 %blur_y.s0.x.v0.base.s1623, %194
  %blur_x.s0.x.v1.base.s1629 = select i1 %15851, i32 %blur_y.s0.x.v0.base.s1623, i32 %194
  %t9331630 = add nsw i32 %418, %blur_x.s0.x.v1.base.s1629
  %15852 = sext i32 %t9331630 to i64
  %15853 = getelementptr inbounds i16, i16* %read_input784, i64 %15852
  %15854 = getelementptr inbounds i16, i16* %15853, i64 1
  %15855 = bitcast i16* %15854 to <16 x i16>*
  %15856 = load <16 x i16>, <16 x i16>* %15855, align 2, !tbaa !396
  %15857 = getelementptr inbounds i16, i16* %15853, i64 17
  %15858 = bitcast i16* %15857 to <16 x i16>*
  %15859 = load <16 x i16>, <16 x i16>* %15858, align 2, !tbaa !396
  %15860 = getelementptr inbounds i16, i16* %15853, i64 2
  %15861 = bitcast i16* %15860 to <16 x i16>*
  %15862 = load <16 x i16>, <16 x i16>* %15861, align 2, !tbaa !396
  %15863 = getelementptr inbounds i16, i16* %15853, i64 18
  %15864 = bitcast i16* %15863 to <16 x i16>*
  %15865 = load <16 x i16>, <16 x i16>* %15864, align 2, !tbaa !396
  %15866 = bitcast i16* %15853 to <16 x i16>*
  %15867 = load <16 x i16>, <16 x i16>* %15866, align 2, !tbaa !396
  %15868 = getelementptr inbounds i16, i16* %15853, i64 16
  %15869 = bitcast i16* %15868 to <16 x i16>*
  %15870 = load <16 x i16>, <16 x i16>* %15869, align 2, !tbaa !396
  %15871 = add <16 x i16> %15862, %15856
  %15872 = add <16 x i16> %15871, %15867
  %15873 = add <16 x i16> %15865, %15859
  %15874 = add <16 x i16> %15873, %15870
  %15875 = shufflevector <16 x i16> %15872, <16 x i16> %15874, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15876 = udiv <32 x i16> %15875, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15877 = shufflevector <32 x i16> %15876, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15878 = sext i32 %blur_x.s0.x.v1.base.s1629 to i64
  %15879 = add nsw i64 %15878, %15765
  %15880 = getelementptr inbounds i16, i16* %blur_x841, i64 %15879
  %15881 = bitcast i16* %15880 to <16 x i16>*
  store <16 x i16> %15877, <16 x i16>* %15881, align 2, !tbaa !399
  %15882 = shufflevector <32 x i16> %15876, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15883 = getelementptr inbounds i16, i16* %15880, i64 16
  %15884 = bitcast i16* %15883 to <16 x i16>*
  store <16 x i16> %15882, <16 x i16>* %15884, align 2, !tbaa !399
  br label %"consume blur_x1631"

"consume blur_x1631":                             ; preds = %"for blur_y.s0.x.x.rebased1620", %"produce blur_x1628"
  %15885 = sext i32 %blur_y.s0.x.v0.base.s1623 to i64
  %15886 = add nsw i64 %15768, %15885
  %15887 = getelementptr inbounds i16, i16* %blur_x841, i64 %15886
  %15888 = bitcast i16* %15887 to <16 x i16>*
  %15889 = load <16 x i16>, <16 x i16>* %15888, align 2, !tbaa !399
  %15890 = getelementptr inbounds i16, i16* %15887, i64 16
  %15891 = bitcast i16* %15890 to <16 x i16>*
  %15892 = load <16 x i16>, <16 x i16>* %15891, align 2, !tbaa !399
  %15893 = add nsw i64 %15771, %15885
  %15894 = getelementptr inbounds i16, i16* %blur_x841, i64 %15893
  %15895 = bitcast i16* %15894 to <16 x i16>*
  %15896 = load <16 x i16>, <16 x i16>* %15895, align 2, !tbaa !399
  %15897 = getelementptr inbounds i16, i16* %15894, i64 16
  %15898 = bitcast i16* %15897 to <16 x i16>*
  %15899 = load <16 x i16>, <16 x i16>* %15898, align 2, !tbaa !399
  %15900 = add nsw i64 %15774, %15885
  %15901 = getelementptr inbounds i16, i16* %blur_x841, i64 %15900
  %15902 = bitcast i16* %15901 to <16 x i16>*
  %15903 = load <16 x i16>, <16 x i16>* %15902, align 2, !tbaa !399
  %15904 = getelementptr inbounds i16, i16* %15901, i64 16
  %15905 = bitcast i16* %15904 to <16 x i16>*
  %15906 = load <16 x i16>, <16 x i16>* %15905, align 2, !tbaa !399
  %15907 = add <16 x i16> %15896, %15889
  %15908 = add <16 x i16> %15907, %15903
  %15909 = add <16 x i16> %15899, %15892
  %15910 = add <16 x i16> %15909, %15906
  %15911 = shufflevector <16 x i16> %15908, <16 x i16> %15910, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15912 = udiv <32 x i16> %15911, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15913 = shufflevector <32 x i16> %15912, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15914 = add nsw i64 %15778, %15885
  %15915 = getelementptr inbounds i16, i16* %258, i64 %15914
  %15916 = bitcast i16* %15915 to <16 x i16>*
  store <16 x i16> %15913, <16 x i16>* %15916, align 2, !tbaa !401
  %15917 = shufflevector <32 x i16> %15912, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15918 = getelementptr inbounds i16, i16* %15915, i64 16
  %15919 = bitcast i16* %15918 to <16 x i16>*
  store <16 x i16> %15917, <16 x i16>* %15919, align 2, !tbaa !401
  %15920 = add nuw nsw i32 %blur_y.s0.x.x.rebased1622, 1
  %.not2494 = icmp eq i32 %15920, %t1639860
  br i1 %.not2494, label %"end for blur_y.s0.x.x.rebased1621", label %"for blur_y.s0.x.x.rebased1620"

after_bb1632:                                     ; preds = %"end for blur_y.s0.x.x.rebased1621", %"produce blur_x1635"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1647.preheader", label %"end for blur_y.s0.x.x.rebased1648", !prof !386

"for blur_y.s0.x.x.rebased1647.preheader":        ; preds = %after_bb1632
  %15921 = sext i32 %t1666955 to i64
  %15922 = zext i32 %.pre-phi3395 to i64
  %15923 = mul nsw i64 %15922, %322
  %15924 = sub nsw i64 %15923, %293
  %15925 = zext i32 %.pre-phi3401 to i64
  %15926 = mul nsw i64 %15925, %322
  %15927 = sub nsw i64 %15926, %293
  %15928 = zext i32 %.pre-phi3391 to i64
  %15929 = mul nsw i64 %15928, %322
  %15930 = sub nsw i64 %15929, %293
  %15931 = sext i32 %a365 to i64
  %15932 = add nsw i64 %15931, 17
  %15933 = mul nsw i64 %15932, %319
  %15934 = add nsw i64 %15933, %323
  br label %"for blur_y.s0.x.x.rebased1647"

"produce blur_x1635":                             ; preds = %"end for blur_y.s0.x.x.rebased1621"
  %15935 = getelementptr inbounds i16, i16* %read_input784, i64 %422
  %15936 = getelementptr inbounds i16, i16* %15935, i64 -31
  %15937 = bitcast i16* %15936 to <16 x i16>*
  %15938 = load <16 x i16>, <16 x i16>* %15937, align 2, !tbaa !396
  %15939 = getelementptr inbounds i16, i16* %15935, i64 -15
  %15940 = bitcast i16* %15939 to <16 x i16>*
  %15941 = load <16 x i16>, <16 x i16>* %15940, align 2, !tbaa !396
  %15942 = getelementptr inbounds i16, i16* %15935, i64 -30
  %15943 = bitcast i16* %15942 to <16 x i16>*
  %15944 = load <16 x i16>, <16 x i16>* %15943, align 2, !tbaa !396
  %15945 = getelementptr inbounds i16, i16* %15935, i64 -14
  %15946 = bitcast i16* %15945 to <16 x i16>*
  %15947 = load <16 x i16>, <16 x i16>* %15946, align 2, !tbaa !396
  %15948 = getelementptr inbounds i16, i16* %15935, i64 -32
  %15949 = bitcast i16* %15948 to <16 x i16>*
  %15950 = load <16 x i16>, <16 x i16>* %15949, align 2, !tbaa !396
  %15951 = getelementptr inbounds i16, i16* %15935, i64 -16
  %15952 = bitcast i16* %15951 to <16 x i16>*
  %15953 = load <16 x i16>, <16 x i16>* %15952, align 2, !tbaa !396
  %15954 = add <16 x i16> %15944, %15938
  %15955 = add <16 x i16> %15954, %15950
  %15956 = add <16 x i16> %15947, %15941
  %15957 = add <16 x i16> %15956, %15953
  %15958 = shufflevector <16 x i16> %15955, <16 x i16> %15957, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15959 = udiv <32 x i16> %15958, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %15960 = shufflevector <32 x i16> %15959, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15961 = zext i32 %.pre-phi3401 to i64
  %15962 = mul nsw i64 %294, %15961
  %15963 = add nsw i64 %296, %15962
  %15964 = getelementptr inbounds i16, i16* %blur_x841, i64 %15963
  %15965 = getelementptr inbounds i16, i16* %15964, i64 -32
  %15966 = bitcast i16* %15965 to <16 x i16>*
  store <16 x i16> %15960, <16 x i16>* %15966, align 2, !tbaa !399
  %15967 = shufflevector <32 x i16> %15959, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15968 = getelementptr inbounds i16, i16* %15964, i64 -16
  %15969 = bitcast i16* %15968 to <16 x i16>*
  store <16 x i16> %15967, <16 x i16>* %15969, align 2, !tbaa !399
  %15970 = zext i32 %.pre-phi3395 to i64
  %15971 = mul nsw i64 %15970, %318
  %15972 = add nsw i64 %15971, %291
  %15973 = getelementptr inbounds i16, i16* %blur_x841, i64 %15972
  %15974 = getelementptr inbounds i16, i16* %15973, i64 -32
  %15975 = bitcast i16* %15974 to <16 x i16>*
  %15976 = load <16 x i16>, <16 x i16>* %15975, align 2, !tbaa !399
  %15977 = getelementptr inbounds i16, i16* %15973, i64 -16
  %15978 = bitcast i16* %15977 to <16 x i16>*
  %15979 = load <16 x i16>, <16 x i16>* %15978, align 2, !tbaa !399
  %15980 = mul nsw i64 %15961, %318
  %15981 = add nsw i64 %15980, %291
  %15982 = getelementptr inbounds i16, i16* %blur_x841, i64 %15981
  %15983 = getelementptr inbounds i16, i16* %15982, i64 -32
  %15984 = bitcast i16* %15983 to <16 x i16>*
  %15985 = load <16 x i16>, <16 x i16>* %15984, align 2, !tbaa !399
  %15986 = getelementptr inbounds i16, i16* %15982, i64 -16
  %15987 = bitcast i16* %15986 to <16 x i16>*
  %15988 = load <16 x i16>, <16 x i16>* %15987, align 2, !tbaa !399
  %15989 = zext i32 %.pre-phi3391 to i64
  %15990 = mul nsw i64 %15989, %318
  %15991 = add nsw i64 %15990, %291
  %15992 = getelementptr inbounds i16, i16* %blur_x841, i64 %15991
  %15993 = getelementptr inbounds i16, i16* %15992, i64 -32
  %15994 = bitcast i16* %15993 to <16 x i16>*
  %15995 = load <16 x i16>, <16 x i16>* %15994, align 2, !tbaa !399
  %15996 = getelementptr inbounds i16, i16* %15992, i64 -16
  %15997 = bitcast i16* %15996 to <16 x i16>*
  %15998 = load <16 x i16>, <16 x i16>* %15997, align 2, !tbaa !399
  %15999 = add <16 x i16> %15985, %15976
  %16000 = add <16 x i16> %15999, %15995
  %16001 = add <16 x i16> %15988, %15979
  %16002 = add <16 x i16> %16001, %15998
  %16003 = shufflevector <16 x i16> %16000, <16 x i16> %16002, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16004 = udiv <32 x i16> %16003, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16005 = shufflevector <32 x i16> %16004, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16006 = sext i32 %a365 to i64
  %16007 = add nsw i64 %16006, 17
  %16008 = mul nsw i64 %16007, %319
  %16009 = add nsw i64 %321, %16008
  %16010 = getelementptr inbounds i16, i16* %258, i64 %16009
  %16011 = getelementptr inbounds i16, i16* %16010, i64 -32
  %16012 = bitcast i16* %16011 to <16 x i16>*
  store <16 x i16> %16005, <16 x i16>* %16012, align 2, !tbaa !401
  %16013 = shufflevector <32 x i16> %16004, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16014 = getelementptr inbounds i16, i16* %16010, i64 -16
  %16015 = bitcast i16* %16014 to <16 x i16>*
  store <16 x i16> %16013, <16 x i16>* %16015, align 2, !tbaa !401
  br label %after_bb1632

"for blur_y.s0.x.x.rebased1647":                  ; preds = %"for blur_y.s0.x.x.rebased1647.preheader", %"consume blur_x1655"
  %indvars.iv3276 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1647.preheader" ], [ %indvars.iv.next3277, %"consume blur_x1655" ]
  %16016 = add nsw i64 %indvars.iv3276, %298
  %16017 = icmp slt i64 %16016, 1
  %16018 = trunc i64 %16016 to i32
  %16019 = shl nsw i32 %16018, 5
  %16020 = icmp sgt i32 %194, %16019
  %16021 = or i1 %16017, %16020
  br i1 %16021, label %"produce blur_x1653", label %"for blur_y.s0.x.x.rebased1647.consume blur_x1655_crit_edge"

"for blur_y.s0.x.x.rebased1647.consume blur_x1655_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1647"
  %.pre3434 = shl nsw i64 %16016, 5
  br label %"consume blur_x1655"

"end for blur_y.s0.x.x.rebased1648":              ; preds = %"consume blur_x1655", %after_bb1632
  br i1 %299, label %"for blur_y.s0.x.x.rebased1663.preheader", label %"end for blur_y.s0.x.x.rebased1664", !prof !386

"for blur_y.s0.x.x.rebased1663.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1648"
  %16022 = sext i32 %t1666955 to i64
  %16023 = zext i32 %.pre-phi3395 to i64
  %16024 = mul nsw i64 %16023, %322
  %16025 = sub nsw i64 %16024, %293
  %16026 = zext i32 %.pre-phi3401 to i64
  %16027 = mul nsw i64 %16026, %322
  %16028 = sub nsw i64 %16027, %293
  %16029 = zext i32 %.pre-phi3391 to i64
  %16030 = mul nsw i64 %16029, %322
  %16031 = sub nsw i64 %16030, %293
  %16032 = sext i32 %a365 to i64
  %16033 = add nsw i64 %16032, 17
  %16034 = mul nsw i64 %16033, %319
  %16035 = add nsw i64 %16034, %323
  br label %"for blur_y.s0.x.x.rebased1663"

"produce blur_x1653":                             ; preds = %"for blur_y.s0.x.x.rebased1647"
  %t9441654 = add nsw i32 %424, %16019
  %16036 = sext i32 %t9441654 to i64
  %16037 = getelementptr inbounds i16, i16* %read_input784, i64 %16036
  %16038 = getelementptr inbounds i16, i16* %16037, i64 1
  %16039 = bitcast i16* %16038 to <16 x i16>*
  %16040 = load <16 x i16>, <16 x i16>* %16039, align 2, !tbaa !396
  %16041 = getelementptr inbounds i16, i16* %16037, i64 17
  %16042 = bitcast i16* %16041 to <16 x i16>*
  %16043 = load <16 x i16>, <16 x i16>* %16042, align 2, !tbaa !396
  %16044 = getelementptr inbounds i16, i16* %16037, i64 2
  %16045 = bitcast i16* %16044 to <16 x i16>*
  %16046 = load <16 x i16>, <16 x i16>* %16045, align 2, !tbaa !396
  %16047 = getelementptr inbounds i16, i16* %16037, i64 18
  %16048 = bitcast i16* %16047 to <16 x i16>*
  %16049 = load <16 x i16>, <16 x i16>* %16048, align 2, !tbaa !396
  %16050 = bitcast i16* %16037 to <16 x i16>*
  %16051 = load <16 x i16>, <16 x i16>* %16050, align 2, !tbaa !396
  %16052 = getelementptr inbounds i16, i16* %16037, i64 16
  %16053 = bitcast i16* %16052 to <16 x i16>*
  %16054 = load <16 x i16>, <16 x i16>* %16053, align 2, !tbaa !396
  %16055 = add <16 x i16> %16046, %16040
  %16056 = add <16 x i16> %16055, %16051
  %16057 = add <16 x i16> %16049, %16043
  %16058 = add <16 x i16> %16057, %16054
  %16059 = shufflevector <16 x i16> %16056, <16 x i16> %16058, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16060 = udiv <32 x i16> %16059, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16061 = shufflevector <32 x i16> %16060, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16062 = shl nsw i64 %16016, 5
  %16063 = add nsw i64 %16062, %15921
  %16064 = getelementptr inbounds i16, i16* %blur_x841, i64 %16063
  %16065 = bitcast i16* %16064 to <16 x i16>*
  store <16 x i16> %16061, <16 x i16>* %16065, align 2, !tbaa !399
  %16066 = shufflevector <32 x i16> %16060, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16067 = getelementptr inbounds i16, i16* %16064, i64 16
  %16068 = bitcast i16* %16067 to <16 x i16>*
  store <16 x i16> %16066, <16 x i16>* %16068, align 2, !tbaa !399
  br label %"consume blur_x1655"

"consume blur_x1655":                             ; preds = %"for blur_y.s0.x.x.rebased1647.consume blur_x1655_crit_edge", %"produce blur_x1653"
  %.pre-phi3435 = phi i64 [ %.pre3434, %"for blur_y.s0.x.x.rebased1647.consume blur_x1655_crit_edge" ], [ %16062, %"produce blur_x1653" ]
  %16069 = add nsw i64 %15924, %.pre-phi3435
  %16070 = getelementptr inbounds i16, i16* %blur_x841, i64 %16069
  %16071 = bitcast i16* %16070 to <16 x i16>*
  %16072 = load <16 x i16>, <16 x i16>* %16071, align 2, !tbaa !399
  %16073 = getelementptr inbounds i16, i16* %16070, i64 16
  %16074 = bitcast i16* %16073 to <16 x i16>*
  %16075 = load <16 x i16>, <16 x i16>* %16074, align 2, !tbaa !399
  %16076 = add nsw i64 %15927, %.pre-phi3435
  %16077 = getelementptr inbounds i16, i16* %blur_x841, i64 %16076
  %16078 = bitcast i16* %16077 to <16 x i16>*
  %16079 = load <16 x i16>, <16 x i16>* %16078, align 2, !tbaa !399
  %16080 = getelementptr inbounds i16, i16* %16077, i64 16
  %16081 = bitcast i16* %16080 to <16 x i16>*
  %16082 = load <16 x i16>, <16 x i16>* %16081, align 2, !tbaa !399
  %16083 = add nsw i64 %15930, %.pre-phi3435
  %16084 = getelementptr inbounds i16, i16* %blur_x841, i64 %16083
  %16085 = bitcast i16* %16084 to <16 x i16>*
  %16086 = load <16 x i16>, <16 x i16>* %16085, align 2, !tbaa !399
  %16087 = getelementptr inbounds i16, i16* %16084, i64 16
  %16088 = bitcast i16* %16087 to <16 x i16>*
  %16089 = load <16 x i16>, <16 x i16>* %16088, align 2, !tbaa !399
  %16090 = add <16 x i16> %16079, %16072
  %16091 = add <16 x i16> %16090, %16086
  %16092 = add <16 x i16> %16082, %16075
  %16093 = add <16 x i16> %16092, %16089
  %16094 = shufflevector <16 x i16> %16091, <16 x i16> %16093, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16095 = udiv <32 x i16> %16094, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16096 = shufflevector <32 x i16> %16095, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16097 = add nsw i64 %15934, %.pre-phi3435
  %16098 = getelementptr inbounds i16, i16* %258, i64 %16097
  %16099 = bitcast i16* %16098 to <16 x i16>*
  store <16 x i16> %16096, <16 x i16>* %16099, align 2, !tbaa !401
  %16100 = shufflevector <32 x i16> %16095, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16101 = getelementptr inbounds i16, i16* %16098, i64 16
  %16102 = bitcast i16* %16101 to <16 x i16>*
  store <16 x i16> %16100, <16 x i16>* %16102, align 2, !tbaa !401
  %indvars.iv.next3277 = add nuw nsw i64 %indvars.iv3276, 1
  %.not2491 = icmp eq i64 %indvars.iv.next3277, %515
  br i1 %.not2491, label %"end for blur_y.s0.x.x.rebased1648", label %"for blur_y.s0.x.x.rebased1647"

"for blur_y.s0.x.x.rebased1663":                  ; preds = %"for blur_y.s0.x.x.rebased1663.preheader", %"consume blur_x1674"
  %blur_y.s0.x.x.rebased1665 = phi i32 [ %16177, %"consume blur_x1674" ], [ 0, %"for blur_y.s0.x.x.rebased1663.preheader" ]
  %16103 = add nsw i32 %blur_y.s0.x.x.rebased1665, %t1582776
  %a3684 = shl nsw i32 %16103, 5
  %16104 = icmp sgt i32 %t1603, %a3684
  %blur_y.s0.x.v0.base.s1666 = select i1 %16104, i32 %a3684, i32 %t1603
  %16105 = icmp slt i32 %16103, 1
  %16106 = icmp sgt i32 %194, %a3684
  %16107 = or i1 %16105, %16106
  br i1 %16107, label %"produce blur_x1671", label %"consume blur_x1674"

"end for blur_y.s0.x.x.rebased1664":              ; preds = %"consume blur_x1674", %"end for blur_y.s0.x.x.rebased1648"
  br i1 %225, label %"produce blur_x1678", label %after_bb1675

"produce blur_x1671":                             ; preds = %"for blur_y.s0.x.x.rebased1663"
  %16108 = icmp slt i32 %blur_y.s0.x.v0.base.s1666, %194
  %blur_x.s0.x.v1.base.s1672 = select i1 %16108, i32 %blur_y.s0.x.v0.base.s1666, i32 %194
  %t9491673 = add nsw i32 %424, %blur_x.s0.x.v1.base.s1672
  %16109 = sext i32 %t9491673 to i64
  %16110 = getelementptr inbounds i16, i16* %read_input784, i64 %16109
  %16111 = getelementptr inbounds i16, i16* %16110, i64 1
  %16112 = bitcast i16* %16111 to <16 x i16>*
  %16113 = load <16 x i16>, <16 x i16>* %16112, align 2, !tbaa !396
  %16114 = getelementptr inbounds i16, i16* %16110, i64 17
  %16115 = bitcast i16* %16114 to <16 x i16>*
  %16116 = load <16 x i16>, <16 x i16>* %16115, align 2, !tbaa !396
  %16117 = getelementptr inbounds i16, i16* %16110, i64 2
  %16118 = bitcast i16* %16117 to <16 x i16>*
  %16119 = load <16 x i16>, <16 x i16>* %16118, align 2, !tbaa !396
  %16120 = getelementptr inbounds i16, i16* %16110, i64 18
  %16121 = bitcast i16* %16120 to <16 x i16>*
  %16122 = load <16 x i16>, <16 x i16>* %16121, align 2, !tbaa !396
  %16123 = bitcast i16* %16110 to <16 x i16>*
  %16124 = load <16 x i16>, <16 x i16>* %16123, align 2, !tbaa !396
  %16125 = getelementptr inbounds i16, i16* %16110, i64 16
  %16126 = bitcast i16* %16125 to <16 x i16>*
  %16127 = load <16 x i16>, <16 x i16>* %16126, align 2, !tbaa !396
  %16128 = add <16 x i16> %16119, %16113
  %16129 = add <16 x i16> %16128, %16124
  %16130 = add <16 x i16> %16122, %16116
  %16131 = add <16 x i16> %16130, %16127
  %16132 = shufflevector <16 x i16> %16129, <16 x i16> %16131, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16133 = udiv <32 x i16> %16132, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16134 = shufflevector <32 x i16> %16133, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16135 = sext i32 %blur_x.s0.x.v1.base.s1672 to i64
  %16136 = add nsw i64 %16135, %16022
  %16137 = getelementptr inbounds i16, i16* %blur_x841, i64 %16136
  %16138 = bitcast i16* %16137 to <16 x i16>*
  store <16 x i16> %16134, <16 x i16>* %16138, align 2, !tbaa !399
  %16139 = shufflevector <32 x i16> %16133, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16140 = getelementptr inbounds i16, i16* %16137, i64 16
  %16141 = bitcast i16* %16140 to <16 x i16>*
  store <16 x i16> %16139, <16 x i16>* %16141, align 2, !tbaa !399
  br label %"consume blur_x1674"

"consume blur_x1674":                             ; preds = %"for blur_y.s0.x.x.rebased1663", %"produce blur_x1671"
  %16142 = sext i32 %blur_y.s0.x.v0.base.s1666 to i64
  %16143 = add nsw i64 %16025, %16142
  %16144 = getelementptr inbounds i16, i16* %blur_x841, i64 %16143
  %16145 = bitcast i16* %16144 to <16 x i16>*
  %16146 = load <16 x i16>, <16 x i16>* %16145, align 2, !tbaa !399
  %16147 = getelementptr inbounds i16, i16* %16144, i64 16
  %16148 = bitcast i16* %16147 to <16 x i16>*
  %16149 = load <16 x i16>, <16 x i16>* %16148, align 2, !tbaa !399
  %16150 = add nsw i64 %16028, %16142
  %16151 = getelementptr inbounds i16, i16* %blur_x841, i64 %16150
  %16152 = bitcast i16* %16151 to <16 x i16>*
  %16153 = load <16 x i16>, <16 x i16>* %16152, align 2, !tbaa !399
  %16154 = getelementptr inbounds i16, i16* %16151, i64 16
  %16155 = bitcast i16* %16154 to <16 x i16>*
  %16156 = load <16 x i16>, <16 x i16>* %16155, align 2, !tbaa !399
  %16157 = add nsw i64 %16031, %16142
  %16158 = getelementptr inbounds i16, i16* %blur_x841, i64 %16157
  %16159 = bitcast i16* %16158 to <16 x i16>*
  %16160 = load <16 x i16>, <16 x i16>* %16159, align 2, !tbaa !399
  %16161 = getelementptr inbounds i16, i16* %16158, i64 16
  %16162 = bitcast i16* %16161 to <16 x i16>*
  %16163 = load <16 x i16>, <16 x i16>* %16162, align 2, !tbaa !399
  %16164 = add <16 x i16> %16153, %16146
  %16165 = add <16 x i16> %16164, %16160
  %16166 = add <16 x i16> %16156, %16149
  %16167 = add <16 x i16> %16166, %16163
  %16168 = shufflevector <16 x i16> %16165, <16 x i16> %16167, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16169 = udiv <32 x i16> %16168, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16170 = shufflevector <32 x i16> %16169, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16171 = add nsw i64 %16035, %16142
  %16172 = getelementptr inbounds i16, i16* %258, i64 %16171
  %16173 = bitcast i16* %16172 to <16 x i16>*
  store <16 x i16> %16170, <16 x i16>* %16173, align 2, !tbaa !401
  %16174 = shufflevector <32 x i16> %16169, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16175 = getelementptr inbounds i16, i16* %16172, i64 16
  %16176 = bitcast i16* %16175 to <16 x i16>*
  store <16 x i16> %16174, <16 x i16>* %16176, align 2, !tbaa !401
  %16177 = add nuw nsw i32 %blur_y.s0.x.x.rebased1665, 1
  %.not2490 = icmp eq i32 %16177, %t1639860
  br i1 %.not2490, label %"end for blur_y.s0.x.x.rebased1664", label %"for blur_y.s0.x.x.rebased1663"

after_bb1675:                                     ; preds = %"end for blur_y.s0.x.x.rebased1664", %"produce blur_x1678"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1690.preheader", label %"end for blur_y.s0.x.x.rebased1691", !prof !386

"for blur_y.s0.x.x.rebased1690.preheader":        ; preds = %after_bb1675
  %16178 = sext i32 %t1638848 to i64
  %16179 = zext i32 %.pre-phi3401 to i64
  %16180 = mul nsw i64 %16179, %322
  %16181 = sub nsw i64 %16180, %293
  %16182 = zext i32 %.pre-phi3387 to i64
  %16183 = mul nsw i64 %16182, %322
  %16184 = sub nsw i64 %16183, %293
  %16185 = zext i32 %.pre-phi3395 to i64
  %16186 = mul nsw i64 %16185, %322
  %16187 = sub nsw i64 %16186, %293
  %16188 = sext i32 %a365 to i64
  %16189 = add nsw i64 %16188, 18
  %16190 = mul nsw i64 %16189, %319
  %16191 = add nsw i64 %16190, %323
  br label %"for blur_y.s0.x.x.rebased1690"

"produce blur_x1678":                             ; preds = %"end for blur_y.s0.x.x.rebased1664"
  %16192 = getelementptr inbounds i16, i16* %read_input784, i64 %428
  %16193 = getelementptr inbounds i16, i16* %16192, i64 -31
  %16194 = bitcast i16* %16193 to <16 x i16>*
  %16195 = load <16 x i16>, <16 x i16>* %16194, align 2, !tbaa !396
  %16196 = getelementptr inbounds i16, i16* %16192, i64 -15
  %16197 = bitcast i16* %16196 to <16 x i16>*
  %16198 = load <16 x i16>, <16 x i16>* %16197, align 2, !tbaa !396
  %16199 = getelementptr inbounds i16, i16* %16192, i64 -30
  %16200 = bitcast i16* %16199 to <16 x i16>*
  %16201 = load <16 x i16>, <16 x i16>* %16200, align 2, !tbaa !396
  %16202 = getelementptr inbounds i16, i16* %16192, i64 -14
  %16203 = bitcast i16* %16202 to <16 x i16>*
  %16204 = load <16 x i16>, <16 x i16>* %16203, align 2, !tbaa !396
  %16205 = getelementptr inbounds i16, i16* %16192, i64 -32
  %16206 = bitcast i16* %16205 to <16 x i16>*
  %16207 = load <16 x i16>, <16 x i16>* %16206, align 2, !tbaa !396
  %16208 = getelementptr inbounds i16, i16* %16192, i64 -16
  %16209 = bitcast i16* %16208 to <16 x i16>*
  %16210 = load <16 x i16>, <16 x i16>* %16209, align 2, !tbaa !396
  %16211 = add <16 x i16> %16201, %16195
  %16212 = add <16 x i16> %16211, %16207
  %16213 = add <16 x i16> %16204, %16198
  %16214 = add <16 x i16> %16213, %16210
  %16215 = shufflevector <16 x i16> %16212, <16 x i16> %16214, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16216 = udiv <32 x i16> %16215, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16217 = shufflevector <32 x i16> %16216, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16218 = zext i32 %.pre-phi3387 to i64
  %16219 = mul nsw i64 %294, %16218
  %16220 = add nsw i64 %296, %16219
  %16221 = getelementptr inbounds i16, i16* %blur_x841, i64 %16220
  %16222 = getelementptr inbounds i16, i16* %16221, i64 -32
  %16223 = bitcast i16* %16222 to <16 x i16>*
  store <16 x i16> %16217, <16 x i16>* %16223, align 2, !tbaa !399
  %16224 = shufflevector <32 x i16> %16216, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16225 = getelementptr inbounds i16, i16* %16221, i64 -16
  %16226 = bitcast i16* %16225 to <16 x i16>*
  store <16 x i16> %16224, <16 x i16>* %16226, align 2, !tbaa !399
  %16227 = zext i32 %.pre-phi3401 to i64
  %16228 = mul nsw i64 %16227, %318
  %16229 = add nsw i64 %16228, %291
  %16230 = getelementptr inbounds i16, i16* %blur_x841, i64 %16229
  %16231 = getelementptr inbounds i16, i16* %16230, i64 -32
  %16232 = bitcast i16* %16231 to <16 x i16>*
  %16233 = load <16 x i16>, <16 x i16>* %16232, align 2, !tbaa !399
  %16234 = getelementptr inbounds i16, i16* %16230, i64 -16
  %16235 = bitcast i16* %16234 to <16 x i16>*
  %16236 = load <16 x i16>, <16 x i16>* %16235, align 2, !tbaa !399
  %16237 = mul nsw i64 %16218, %318
  %16238 = add nsw i64 %16237, %291
  %16239 = getelementptr inbounds i16, i16* %blur_x841, i64 %16238
  %16240 = getelementptr inbounds i16, i16* %16239, i64 -32
  %16241 = bitcast i16* %16240 to <16 x i16>*
  %16242 = load <16 x i16>, <16 x i16>* %16241, align 2, !tbaa !399
  %16243 = getelementptr inbounds i16, i16* %16239, i64 -16
  %16244 = bitcast i16* %16243 to <16 x i16>*
  %16245 = load <16 x i16>, <16 x i16>* %16244, align 2, !tbaa !399
  %16246 = zext i32 %.pre-phi3395 to i64
  %16247 = mul nsw i64 %16246, %318
  %16248 = add nsw i64 %16247, %291
  %16249 = getelementptr inbounds i16, i16* %blur_x841, i64 %16248
  %16250 = getelementptr inbounds i16, i16* %16249, i64 -32
  %16251 = bitcast i16* %16250 to <16 x i16>*
  %16252 = load <16 x i16>, <16 x i16>* %16251, align 2, !tbaa !399
  %16253 = getelementptr inbounds i16, i16* %16249, i64 -16
  %16254 = bitcast i16* %16253 to <16 x i16>*
  %16255 = load <16 x i16>, <16 x i16>* %16254, align 2, !tbaa !399
  %16256 = add <16 x i16> %16242, %16233
  %16257 = add <16 x i16> %16256, %16252
  %16258 = add <16 x i16> %16245, %16236
  %16259 = add <16 x i16> %16258, %16255
  %16260 = shufflevector <16 x i16> %16257, <16 x i16> %16259, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16261 = udiv <32 x i16> %16260, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16262 = shufflevector <32 x i16> %16261, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16263 = sext i32 %a365 to i64
  %16264 = add nsw i64 %16263, 18
  %16265 = mul nsw i64 %16264, %319
  %16266 = add nsw i64 %321, %16265
  %16267 = getelementptr inbounds i16, i16* %258, i64 %16266
  %16268 = getelementptr inbounds i16, i16* %16267, i64 -32
  %16269 = bitcast i16* %16268 to <16 x i16>*
  store <16 x i16> %16262, <16 x i16>* %16269, align 2, !tbaa !401
  %16270 = shufflevector <32 x i16> %16261, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16271 = getelementptr inbounds i16, i16* %16267, i64 -16
  %16272 = bitcast i16* %16271 to <16 x i16>*
  store <16 x i16> %16270, <16 x i16>* %16272, align 2, !tbaa !401
  br label %after_bb1675

"for blur_y.s0.x.x.rebased1690":                  ; preds = %"for blur_y.s0.x.x.rebased1690.preheader", %"consume blur_x1698"
  %indvars.iv3278 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1690.preheader" ], [ %indvars.iv.next3279, %"consume blur_x1698" ]
  %16273 = add nsw i64 %indvars.iv3278, %298
  %16274 = icmp slt i64 %16273, 1
  %16275 = trunc i64 %16273 to i32
  %16276 = shl nsw i32 %16275, 5
  %16277 = icmp sgt i32 %194, %16276
  %16278 = or i1 %16274, %16277
  br i1 %16278, label %"produce blur_x1696", label %"for blur_y.s0.x.x.rebased1690.consume blur_x1698_crit_edge"

"for blur_y.s0.x.x.rebased1690.consume blur_x1698_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1690"
  %.pre3436 = shl nsw i64 %16273, 5
  br label %"consume blur_x1698"

"end for blur_y.s0.x.x.rebased1691":              ; preds = %"consume blur_x1698", %after_bb1675
  br i1 %299, label %"for blur_y.s0.x.x.rebased1706.preheader", label %"end for blur_y.s0.x.x.rebased1707", !prof !386

"for blur_y.s0.x.x.rebased1706.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1691"
  %16279 = sext i32 %t1638848 to i64
  %16280 = zext i32 %.pre-phi3401 to i64
  %16281 = mul nsw i64 %16280, %322
  %16282 = sub nsw i64 %16281, %293
  %16283 = zext i32 %.pre-phi3387 to i64
  %16284 = mul nsw i64 %16283, %322
  %16285 = sub nsw i64 %16284, %293
  %16286 = zext i32 %.pre-phi3395 to i64
  %16287 = mul nsw i64 %16286, %322
  %16288 = sub nsw i64 %16287, %293
  %16289 = sext i32 %a365 to i64
  %16290 = add nsw i64 %16289, 18
  %16291 = mul nsw i64 %16290, %319
  %16292 = add nsw i64 %16291, %323
  br label %"for blur_y.s0.x.x.rebased1706"

"produce blur_x1696":                             ; preds = %"for blur_y.s0.x.x.rebased1690"
  %t9601697 = add nsw i32 %430, %16276
  %16293 = sext i32 %t9601697 to i64
  %16294 = getelementptr inbounds i16, i16* %read_input784, i64 %16293
  %16295 = getelementptr inbounds i16, i16* %16294, i64 1
  %16296 = bitcast i16* %16295 to <16 x i16>*
  %16297 = load <16 x i16>, <16 x i16>* %16296, align 2, !tbaa !396
  %16298 = getelementptr inbounds i16, i16* %16294, i64 17
  %16299 = bitcast i16* %16298 to <16 x i16>*
  %16300 = load <16 x i16>, <16 x i16>* %16299, align 2, !tbaa !396
  %16301 = getelementptr inbounds i16, i16* %16294, i64 2
  %16302 = bitcast i16* %16301 to <16 x i16>*
  %16303 = load <16 x i16>, <16 x i16>* %16302, align 2, !tbaa !396
  %16304 = getelementptr inbounds i16, i16* %16294, i64 18
  %16305 = bitcast i16* %16304 to <16 x i16>*
  %16306 = load <16 x i16>, <16 x i16>* %16305, align 2, !tbaa !396
  %16307 = bitcast i16* %16294 to <16 x i16>*
  %16308 = load <16 x i16>, <16 x i16>* %16307, align 2, !tbaa !396
  %16309 = getelementptr inbounds i16, i16* %16294, i64 16
  %16310 = bitcast i16* %16309 to <16 x i16>*
  %16311 = load <16 x i16>, <16 x i16>* %16310, align 2, !tbaa !396
  %16312 = add <16 x i16> %16303, %16297
  %16313 = add <16 x i16> %16312, %16308
  %16314 = add <16 x i16> %16306, %16300
  %16315 = add <16 x i16> %16314, %16311
  %16316 = shufflevector <16 x i16> %16313, <16 x i16> %16315, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16317 = udiv <32 x i16> %16316, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16318 = shufflevector <32 x i16> %16317, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16319 = shl nsw i64 %16273, 5
  %16320 = add nsw i64 %16319, %16178
  %16321 = getelementptr inbounds i16, i16* %blur_x841, i64 %16320
  %16322 = bitcast i16* %16321 to <16 x i16>*
  store <16 x i16> %16318, <16 x i16>* %16322, align 2, !tbaa !399
  %16323 = shufflevector <32 x i16> %16317, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16324 = getelementptr inbounds i16, i16* %16321, i64 16
  %16325 = bitcast i16* %16324 to <16 x i16>*
  store <16 x i16> %16323, <16 x i16>* %16325, align 2, !tbaa !399
  br label %"consume blur_x1698"

"consume blur_x1698":                             ; preds = %"for blur_y.s0.x.x.rebased1690.consume blur_x1698_crit_edge", %"produce blur_x1696"
  %.pre-phi3437 = phi i64 [ %.pre3436, %"for blur_y.s0.x.x.rebased1690.consume blur_x1698_crit_edge" ], [ %16319, %"produce blur_x1696" ]
  %16326 = add nsw i64 %16181, %.pre-phi3437
  %16327 = getelementptr inbounds i16, i16* %blur_x841, i64 %16326
  %16328 = bitcast i16* %16327 to <16 x i16>*
  %16329 = load <16 x i16>, <16 x i16>* %16328, align 2, !tbaa !399
  %16330 = getelementptr inbounds i16, i16* %16327, i64 16
  %16331 = bitcast i16* %16330 to <16 x i16>*
  %16332 = load <16 x i16>, <16 x i16>* %16331, align 2, !tbaa !399
  %16333 = add nsw i64 %16184, %.pre-phi3437
  %16334 = getelementptr inbounds i16, i16* %blur_x841, i64 %16333
  %16335 = bitcast i16* %16334 to <16 x i16>*
  %16336 = load <16 x i16>, <16 x i16>* %16335, align 2, !tbaa !399
  %16337 = getelementptr inbounds i16, i16* %16334, i64 16
  %16338 = bitcast i16* %16337 to <16 x i16>*
  %16339 = load <16 x i16>, <16 x i16>* %16338, align 2, !tbaa !399
  %16340 = add nsw i64 %16187, %.pre-phi3437
  %16341 = getelementptr inbounds i16, i16* %blur_x841, i64 %16340
  %16342 = bitcast i16* %16341 to <16 x i16>*
  %16343 = load <16 x i16>, <16 x i16>* %16342, align 2, !tbaa !399
  %16344 = getelementptr inbounds i16, i16* %16341, i64 16
  %16345 = bitcast i16* %16344 to <16 x i16>*
  %16346 = load <16 x i16>, <16 x i16>* %16345, align 2, !tbaa !399
  %16347 = add <16 x i16> %16336, %16329
  %16348 = add <16 x i16> %16347, %16343
  %16349 = add <16 x i16> %16339, %16332
  %16350 = add <16 x i16> %16349, %16346
  %16351 = shufflevector <16 x i16> %16348, <16 x i16> %16350, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16352 = udiv <32 x i16> %16351, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16353 = shufflevector <32 x i16> %16352, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16354 = add nsw i64 %16191, %.pre-phi3437
  %16355 = getelementptr inbounds i16, i16* %258, i64 %16354
  %16356 = bitcast i16* %16355 to <16 x i16>*
  store <16 x i16> %16353, <16 x i16>* %16356, align 2, !tbaa !401
  %16357 = shufflevector <32 x i16> %16352, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16358 = getelementptr inbounds i16, i16* %16355, i64 16
  %16359 = bitcast i16* %16358 to <16 x i16>*
  store <16 x i16> %16357, <16 x i16>* %16359, align 2, !tbaa !401
  %indvars.iv.next3279 = add nuw nsw i64 %indvars.iv3278, 1
  %.not2487 = icmp eq i64 %indvars.iv.next3279, %515
  br i1 %.not2487, label %"end for blur_y.s0.x.x.rebased1691", label %"for blur_y.s0.x.x.rebased1690"

"for blur_y.s0.x.x.rebased1706":                  ; preds = %"for blur_y.s0.x.x.rebased1706.preheader", %"consume blur_x1717"
  %blur_y.s0.x.x.rebased1708 = phi i32 [ %16434, %"consume blur_x1717" ], [ 0, %"for blur_y.s0.x.x.rebased1706.preheader" ]
  %16360 = add nsw i32 %blur_y.s0.x.x.rebased1708, %t1582776
  %a3841 = shl nsw i32 %16360, 5
  %16361 = icmp sgt i32 %t1603, %a3841
  %blur_y.s0.x.v0.base.s1709 = select i1 %16361, i32 %a3841, i32 %t1603
  %16362 = icmp slt i32 %16360, 1
  %16363 = icmp sgt i32 %194, %a3841
  %16364 = or i1 %16362, %16363
  br i1 %16364, label %"produce blur_x1714", label %"consume blur_x1717"

"end for blur_y.s0.x.x.rebased1707":              ; preds = %"consume blur_x1717", %"end for blur_y.s0.x.x.rebased1691"
  br i1 %225, label %"produce blur_x1721", label %after_bb1718

"produce blur_x1714":                             ; preds = %"for blur_y.s0.x.x.rebased1706"
  %16365 = icmp slt i32 %blur_y.s0.x.v0.base.s1709, %194
  %blur_x.s0.x.v1.base.s1715 = select i1 %16365, i32 %blur_y.s0.x.v0.base.s1709, i32 %194
  %t9651716 = add nsw i32 %430, %blur_x.s0.x.v1.base.s1715
  %16366 = sext i32 %t9651716 to i64
  %16367 = getelementptr inbounds i16, i16* %read_input784, i64 %16366
  %16368 = getelementptr inbounds i16, i16* %16367, i64 1
  %16369 = bitcast i16* %16368 to <16 x i16>*
  %16370 = load <16 x i16>, <16 x i16>* %16369, align 2, !tbaa !396
  %16371 = getelementptr inbounds i16, i16* %16367, i64 17
  %16372 = bitcast i16* %16371 to <16 x i16>*
  %16373 = load <16 x i16>, <16 x i16>* %16372, align 2, !tbaa !396
  %16374 = getelementptr inbounds i16, i16* %16367, i64 2
  %16375 = bitcast i16* %16374 to <16 x i16>*
  %16376 = load <16 x i16>, <16 x i16>* %16375, align 2, !tbaa !396
  %16377 = getelementptr inbounds i16, i16* %16367, i64 18
  %16378 = bitcast i16* %16377 to <16 x i16>*
  %16379 = load <16 x i16>, <16 x i16>* %16378, align 2, !tbaa !396
  %16380 = bitcast i16* %16367 to <16 x i16>*
  %16381 = load <16 x i16>, <16 x i16>* %16380, align 2, !tbaa !396
  %16382 = getelementptr inbounds i16, i16* %16367, i64 16
  %16383 = bitcast i16* %16382 to <16 x i16>*
  %16384 = load <16 x i16>, <16 x i16>* %16383, align 2, !tbaa !396
  %16385 = add <16 x i16> %16376, %16370
  %16386 = add <16 x i16> %16385, %16381
  %16387 = add <16 x i16> %16379, %16373
  %16388 = add <16 x i16> %16387, %16384
  %16389 = shufflevector <16 x i16> %16386, <16 x i16> %16388, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16390 = udiv <32 x i16> %16389, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16391 = shufflevector <32 x i16> %16390, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16392 = sext i32 %blur_x.s0.x.v1.base.s1715 to i64
  %16393 = add nsw i64 %16392, %16279
  %16394 = getelementptr inbounds i16, i16* %blur_x841, i64 %16393
  %16395 = bitcast i16* %16394 to <16 x i16>*
  store <16 x i16> %16391, <16 x i16>* %16395, align 2, !tbaa !399
  %16396 = shufflevector <32 x i16> %16390, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16397 = getelementptr inbounds i16, i16* %16394, i64 16
  %16398 = bitcast i16* %16397 to <16 x i16>*
  store <16 x i16> %16396, <16 x i16>* %16398, align 2, !tbaa !399
  br label %"consume blur_x1717"

"consume blur_x1717":                             ; preds = %"for blur_y.s0.x.x.rebased1706", %"produce blur_x1714"
  %16399 = sext i32 %blur_y.s0.x.v0.base.s1709 to i64
  %16400 = add nsw i64 %16282, %16399
  %16401 = getelementptr inbounds i16, i16* %blur_x841, i64 %16400
  %16402 = bitcast i16* %16401 to <16 x i16>*
  %16403 = load <16 x i16>, <16 x i16>* %16402, align 2, !tbaa !399
  %16404 = getelementptr inbounds i16, i16* %16401, i64 16
  %16405 = bitcast i16* %16404 to <16 x i16>*
  %16406 = load <16 x i16>, <16 x i16>* %16405, align 2, !tbaa !399
  %16407 = add nsw i64 %16285, %16399
  %16408 = getelementptr inbounds i16, i16* %blur_x841, i64 %16407
  %16409 = bitcast i16* %16408 to <16 x i16>*
  %16410 = load <16 x i16>, <16 x i16>* %16409, align 2, !tbaa !399
  %16411 = getelementptr inbounds i16, i16* %16408, i64 16
  %16412 = bitcast i16* %16411 to <16 x i16>*
  %16413 = load <16 x i16>, <16 x i16>* %16412, align 2, !tbaa !399
  %16414 = add nsw i64 %16288, %16399
  %16415 = getelementptr inbounds i16, i16* %blur_x841, i64 %16414
  %16416 = bitcast i16* %16415 to <16 x i16>*
  %16417 = load <16 x i16>, <16 x i16>* %16416, align 2, !tbaa !399
  %16418 = getelementptr inbounds i16, i16* %16415, i64 16
  %16419 = bitcast i16* %16418 to <16 x i16>*
  %16420 = load <16 x i16>, <16 x i16>* %16419, align 2, !tbaa !399
  %16421 = add <16 x i16> %16410, %16403
  %16422 = add <16 x i16> %16421, %16417
  %16423 = add <16 x i16> %16413, %16406
  %16424 = add <16 x i16> %16423, %16420
  %16425 = shufflevector <16 x i16> %16422, <16 x i16> %16424, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16426 = udiv <32 x i16> %16425, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16427 = shufflevector <32 x i16> %16426, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16428 = add nsw i64 %16292, %16399
  %16429 = getelementptr inbounds i16, i16* %258, i64 %16428
  %16430 = bitcast i16* %16429 to <16 x i16>*
  store <16 x i16> %16427, <16 x i16>* %16430, align 2, !tbaa !401
  %16431 = shufflevector <32 x i16> %16426, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16432 = getelementptr inbounds i16, i16* %16429, i64 16
  %16433 = bitcast i16* %16432 to <16 x i16>*
  store <16 x i16> %16431, <16 x i16>* %16433, align 2, !tbaa !401
  %16434 = add nuw nsw i32 %blur_y.s0.x.x.rebased1708, 1
  %.not2486 = icmp eq i32 %16434, %t1639860
  br i1 %.not2486, label %"end for blur_y.s0.x.x.rebased1707", label %"for blur_y.s0.x.x.rebased1706"

after_bb1718:                                     ; preds = %"end for blur_y.s0.x.x.rebased1707", %"produce blur_x1721"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1733.preheader", label %"end for blur_y.s0.x.x.rebased1734", !prof !386

"for blur_y.s0.x.x.rebased1733.preheader":        ; preds = %after_bb1718
  %16435 = sext i32 %t1644876 to i64
  %16436 = zext i32 %.pre-phi3387 to i64
  %16437 = mul nsw i64 %16436, %322
  %16438 = sub nsw i64 %16437, %293
  %16439 = zext i32 %.pre-phi3391 to i64
  %16440 = mul nsw i64 %16439, %322
  %16441 = sub nsw i64 %16440, %293
  %16442 = zext i32 %.pre-phi3401 to i64
  %16443 = mul nsw i64 %16442, %322
  %16444 = sub nsw i64 %16443, %293
  %16445 = sext i32 %a365 to i64
  %16446 = add nsw i64 %16445, 19
  %16447 = mul nsw i64 %16446, %319
  %16448 = add nsw i64 %16447, %323
  br label %"for blur_y.s0.x.x.rebased1733"

"produce blur_x1721":                             ; preds = %"end for blur_y.s0.x.x.rebased1707"
  %16449 = getelementptr inbounds i16, i16* %read_input784, i64 %434
  %16450 = getelementptr inbounds i16, i16* %16449, i64 -31
  %16451 = bitcast i16* %16450 to <16 x i16>*
  %16452 = load <16 x i16>, <16 x i16>* %16451, align 2, !tbaa !396
  %16453 = getelementptr inbounds i16, i16* %16449, i64 -15
  %16454 = bitcast i16* %16453 to <16 x i16>*
  %16455 = load <16 x i16>, <16 x i16>* %16454, align 2, !tbaa !396
  %16456 = getelementptr inbounds i16, i16* %16449, i64 -30
  %16457 = bitcast i16* %16456 to <16 x i16>*
  %16458 = load <16 x i16>, <16 x i16>* %16457, align 2, !tbaa !396
  %16459 = getelementptr inbounds i16, i16* %16449, i64 -14
  %16460 = bitcast i16* %16459 to <16 x i16>*
  %16461 = load <16 x i16>, <16 x i16>* %16460, align 2, !tbaa !396
  %16462 = getelementptr inbounds i16, i16* %16449, i64 -32
  %16463 = bitcast i16* %16462 to <16 x i16>*
  %16464 = load <16 x i16>, <16 x i16>* %16463, align 2, !tbaa !396
  %16465 = getelementptr inbounds i16, i16* %16449, i64 -16
  %16466 = bitcast i16* %16465 to <16 x i16>*
  %16467 = load <16 x i16>, <16 x i16>* %16466, align 2, !tbaa !396
  %16468 = add <16 x i16> %16458, %16452
  %16469 = add <16 x i16> %16468, %16464
  %16470 = add <16 x i16> %16461, %16455
  %16471 = add <16 x i16> %16470, %16467
  %16472 = shufflevector <16 x i16> %16469, <16 x i16> %16471, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16473 = udiv <32 x i16> %16472, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16474 = shufflevector <32 x i16> %16473, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16475 = zext i32 %.pre-phi3391 to i64
  %16476 = mul nsw i64 %294, %16475
  %16477 = add nsw i64 %296, %16476
  %16478 = getelementptr inbounds i16, i16* %blur_x841, i64 %16477
  %16479 = getelementptr inbounds i16, i16* %16478, i64 -32
  %16480 = bitcast i16* %16479 to <16 x i16>*
  store <16 x i16> %16474, <16 x i16>* %16480, align 2, !tbaa !399
  %16481 = shufflevector <32 x i16> %16473, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16482 = getelementptr inbounds i16, i16* %16478, i64 -16
  %16483 = bitcast i16* %16482 to <16 x i16>*
  store <16 x i16> %16481, <16 x i16>* %16483, align 2, !tbaa !399
  %16484 = zext i32 %.pre-phi3387 to i64
  %16485 = mul nsw i64 %16484, %318
  %16486 = add nsw i64 %16485, %291
  %16487 = getelementptr inbounds i16, i16* %blur_x841, i64 %16486
  %16488 = getelementptr inbounds i16, i16* %16487, i64 -32
  %16489 = bitcast i16* %16488 to <16 x i16>*
  %16490 = load <16 x i16>, <16 x i16>* %16489, align 2, !tbaa !399
  %16491 = getelementptr inbounds i16, i16* %16487, i64 -16
  %16492 = bitcast i16* %16491 to <16 x i16>*
  %16493 = load <16 x i16>, <16 x i16>* %16492, align 2, !tbaa !399
  %16494 = mul nsw i64 %16475, %318
  %16495 = add nsw i64 %16494, %291
  %16496 = getelementptr inbounds i16, i16* %blur_x841, i64 %16495
  %16497 = getelementptr inbounds i16, i16* %16496, i64 -32
  %16498 = bitcast i16* %16497 to <16 x i16>*
  %16499 = load <16 x i16>, <16 x i16>* %16498, align 2, !tbaa !399
  %16500 = getelementptr inbounds i16, i16* %16496, i64 -16
  %16501 = bitcast i16* %16500 to <16 x i16>*
  %16502 = load <16 x i16>, <16 x i16>* %16501, align 2, !tbaa !399
  %16503 = zext i32 %.pre-phi3401 to i64
  %16504 = mul nsw i64 %16503, %318
  %16505 = add nsw i64 %16504, %291
  %16506 = getelementptr inbounds i16, i16* %blur_x841, i64 %16505
  %16507 = getelementptr inbounds i16, i16* %16506, i64 -32
  %16508 = bitcast i16* %16507 to <16 x i16>*
  %16509 = load <16 x i16>, <16 x i16>* %16508, align 2, !tbaa !399
  %16510 = getelementptr inbounds i16, i16* %16506, i64 -16
  %16511 = bitcast i16* %16510 to <16 x i16>*
  %16512 = load <16 x i16>, <16 x i16>* %16511, align 2, !tbaa !399
  %16513 = add <16 x i16> %16499, %16490
  %16514 = add <16 x i16> %16513, %16509
  %16515 = add <16 x i16> %16502, %16493
  %16516 = add <16 x i16> %16515, %16512
  %16517 = shufflevector <16 x i16> %16514, <16 x i16> %16516, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16518 = udiv <32 x i16> %16517, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16519 = shufflevector <32 x i16> %16518, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16520 = sext i32 %a365 to i64
  %16521 = add nsw i64 %16520, 19
  %16522 = mul nsw i64 %16521, %319
  %16523 = add nsw i64 %321, %16522
  %16524 = getelementptr inbounds i16, i16* %258, i64 %16523
  %16525 = getelementptr inbounds i16, i16* %16524, i64 -32
  %16526 = bitcast i16* %16525 to <16 x i16>*
  store <16 x i16> %16519, <16 x i16>* %16526, align 2, !tbaa !401
  %16527 = shufflevector <32 x i16> %16518, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16528 = getelementptr inbounds i16, i16* %16524, i64 -16
  %16529 = bitcast i16* %16528 to <16 x i16>*
  store <16 x i16> %16527, <16 x i16>* %16529, align 2, !tbaa !401
  br label %after_bb1718

"for blur_y.s0.x.x.rebased1733":                  ; preds = %"for blur_y.s0.x.x.rebased1733.preheader", %"consume blur_x1741"
  %indvars.iv3280 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1733.preheader" ], [ %indvars.iv.next3281, %"consume blur_x1741" ]
  %16530 = add nsw i64 %indvars.iv3280, %298
  %16531 = icmp slt i64 %16530, 1
  %16532 = trunc i64 %16530 to i32
  %16533 = shl nsw i32 %16532, 5
  %16534 = icmp sgt i32 %194, %16533
  %16535 = or i1 %16531, %16534
  br i1 %16535, label %"produce blur_x1739", label %"for blur_y.s0.x.x.rebased1733.consume blur_x1741_crit_edge"

"for blur_y.s0.x.x.rebased1733.consume blur_x1741_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1733"
  %.pre3438 = shl nsw i64 %16530, 5
  br label %"consume blur_x1741"

"end for blur_y.s0.x.x.rebased1734":              ; preds = %"consume blur_x1741", %after_bb1718
  br i1 %299, label %"for blur_y.s0.x.x.rebased1749.preheader", label %"end for blur_y.s0.x.x.rebased1750", !prof !386

"for blur_y.s0.x.x.rebased1749.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1734"
  %16536 = sext i32 %t1644876 to i64
  %16537 = zext i32 %.pre-phi3387 to i64
  %16538 = mul nsw i64 %16537, %322
  %16539 = sub nsw i64 %16538, %293
  %16540 = zext i32 %.pre-phi3391 to i64
  %16541 = mul nsw i64 %16540, %322
  %16542 = sub nsw i64 %16541, %293
  %16543 = zext i32 %.pre-phi3401 to i64
  %16544 = mul nsw i64 %16543, %322
  %16545 = sub nsw i64 %16544, %293
  %16546 = sext i32 %a365 to i64
  %16547 = add nsw i64 %16546, 19
  %16548 = mul nsw i64 %16547, %319
  %16549 = add nsw i64 %16548, %323
  br label %"for blur_y.s0.x.x.rebased1749"

"produce blur_x1739":                             ; preds = %"for blur_y.s0.x.x.rebased1733"
  %t9761740 = add nsw i32 %436, %16533
  %16550 = sext i32 %t9761740 to i64
  %16551 = getelementptr inbounds i16, i16* %read_input784, i64 %16550
  %16552 = getelementptr inbounds i16, i16* %16551, i64 1
  %16553 = bitcast i16* %16552 to <16 x i16>*
  %16554 = load <16 x i16>, <16 x i16>* %16553, align 2, !tbaa !396
  %16555 = getelementptr inbounds i16, i16* %16551, i64 17
  %16556 = bitcast i16* %16555 to <16 x i16>*
  %16557 = load <16 x i16>, <16 x i16>* %16556, align 2, !tbaa !396
  %16558 = getelementptr inbounds i16, i16* %16551, i64 2
  %16559 = bitcast i16* %16558 to <16 x i16>*
  %16560 = load <16 x i16>, <16 x i16>* %16559, align 2, !tbaa !396
  %16561 = getelementptr inbounds i16, i16* %16551, i64 18
  %16562 = bitcast i16* %16561 to <16 x i16>*
  %16563 = load <16 x i16>, <16 x i16>* %16562, align 2, !tbaa !396
  %16564 = bitcast i16* %16551 to <16 x i16>*
  %16565 = load <16 x i16>, <16 x i16>* %16564, align 2, !tbaa !396
  %16566 = getelementptr inbounds i16, i16* %16551, i64 16
  %16567 = bitcast i16* %16566 to <16 x i16>*
  %16568 = load <16 x i16>, <16 x i16>* %16567, align 2, !tbaa !396
  %16569 = add <16 x i16> %16560, %16554
  %16570 = add <16 x i16> %16569, %16565
  %16571 = add <16 x i16> %16563, %16557
  %16572 = add <16 x i16> %16571, %16568
  %16573 = shufflevector <16 x i16> %16570, <16 x i16> %16572, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16574 = udiv <32 x i16> %16573, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16575 = shufflevector <32 x i16> %16574, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16576 = shl nsw i64 %16530, 5
  %16577 = add nsw i64 %16576, %16435
  %16578 = getelementptr inbounds i16, i16* %blur_x841, i64 %16577
  %16579 = bitcast i16* %16578 to <16 x i16>*
  store <16 x i16> %16575, <16 x i16>* %16579, align 2, !tbaa !399
  %16580 = shufflevector <32 x i16> %16574, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16581 = getelementptr inbounds i16, i16* %16578, i64 16
  %16582 = bitcast i16* %16581 to <16 x i16>*
  store <16 x i16> %16580, <16 x i16>* %16582, align 2, !tbaa !399
  br label %"consume blur_x1741"

"consume blur_x1741":                             ; preds = %"for blur_y.s0.x.x.rebased1733.consume blur_x1741_crit_edge", %"produce blur_x1739"
  %.pre-phi3439 = phi i64 [ %.pre3438, %"for blur_y.s0.x.x.rebased1733.consume blur_x1741_crit_edge" ], [ %16576, %"produce blur_x1739" ]
  %16583 = add nsw i64 %16438, %.pre-phi3439
  %16584 = getelementptr inbounds i16, i16* %blur_x841, i64 %16583
  %16585 = bitcast i16* %16584 to <16 x i16>*
  %16586 = load <16 x i16>, <16 x i16>* %16585, align 2, !tbaa !399
  %16587 = getelementptr inbounds i16, i16* %16584, i64 16
  %16588 = bitcast i16* %16587 to <16 x i16>*
  %16589 = load <16 x i16>, <16 x i16>* %16588, align 2, !tbaa !399
  %16590 = add nsw i64 %16441, %.pre-phi3439
  %16591 = getelementptr inbounds i16, i16* %blur_x841, i64 %16590
  %16592 = bitcast i16* %16591 to <16 x i16>*
  %16593 = load <16 x i16>, <16 x i16>* %16592, align 2, !tbaa !399
  %16594 = getelementptr inbounds i16, i16* %16591, i64 16
  %16595 = bitcast i16* %16594 to <16 x i16>*
  %16596 = load <16 x i16>, <16 x i16>* %16595, align 2, !tbaa !399
  %16597 = add nsw i64 %16444, %.pre-phi3439
  %16598 = getelementptr inbounds i16, i16* %blur_x841, i64 %16597
  %16599 = bitcast i16* %16598 to <16 x i16>*
  %16600 = load <16 x i16>, <16 x i16>* %16599, align 2, !tbaa !399
  %16601 = getelementptr inbounds i16, i16* %16598, i64 16
  %16602 = bitcast i16* %16601 to <16 x i16>*
  %16603 = load <16 x i16>, <16 x i16>* %16602, align 2, !tbaa !399
  %16604 = add <16 x i16> %16593, %16586
  %16605 = add <16 x i16> %16604, %16600
  %16606 = add <16 x i16> %16596, %16589
  %16607 = add <16 x i16> %16606, %16603
  %16608 = shufflevector <16 x i16> %16605, <16 x i16> %16607, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16609 = udiv <32 x i16> %16608, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16610 = shufflevector <32 x i16> %16609, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16611 = add nsw i64 %16448, %.pre-phi3439
  %16612 = getelementptr inbounds i16, i16* %258, i64 %16611
  %16613 = bitcast i16* %16612 to <16 x i16>*
  store <16 x i16> %16610, <16 x i16>* %16613, align 2, !tbaa !401
  %16614 = shufflevector <32 x i16> %16609, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16615 = getelementptr inbounds i16, i16* %16612, i64 16
  %16616 = bitcast i16* %16615 to <16 x i16>*
  store <16 x i16> %16614, <16 x i16>* %16616, align 2, !tbaa !401
  %indvars.iv.next3281 = add nuw nsw i64 %indvars.iv3280, 1
  %.not2483 = icmp eq i64 %indvars.iv.next3281, %515
  br i1 %.not2483, label %"end for blur_y.s0.x.x.rebased1734", label %"for blur_y.s0.x.x.rebased1733"

"for blur_y.s0.x.x.rebased1749":                  ; preds = %"for blur_y.s0.x.x.rebased1749.preheader", %"consume blur_x1760"
  %blur_y.s0.x.x.rebased1751 = phi i32 [ %16691, %"consume blur_x1760" ], [ 0, %"for blur_y.s0.x.x.rebased1749.preheader" ]
  %16617 = add nsw i32 %blur_y.s0.x.x.rebased1751, %t1582776
  %a3998 = shl nsw i32 %16617, 5
  %16618 = icmp sgt i32 %t1603, %a3998
  %blur_y.s0.x.v0.base.s1752 = select i1 %16618, i32 %a3998, i32 %t1603
  %16619 = icmp slt i32 %16617, 1
  %16620 = icmp sgt i32 %194, %a3998
  %16621 = or i1 %16619, %16620
  br i1 %16621, label %"produce blur_x1757", label %"consume blur_x1760"

"end for blur_y.s0.x.x.rebased1750":              ; preds = %"consume blur_x1760", %"end for blur_y.s0.x.x.rebased1734"
  br i1 %225, label %"produce blur_x1764", label %after_bb1761

"produce blur_x1757":                             ; preds = %"for blur_y.s0.x.x.rebased1749"
  %16622 = icmp slt i32 %blur_y.s0.x.v0.base.s1752, %194
  %blur_x.s0.x.v1.base.s1758 = select i1 %16622, i32 %blur_y.s0.x.v0.base.s1752, i32 %194
  %t9811759 = add nsw i32 %436, %blur_x.s0.x.v1.base.s1758
  %16623 = sext i32 %t9811759 to i64
  %16624 = getelementptr inbounds i16, i16* %read_input784, i64 %16623
  %16625 = getelementptr inbounds i16, i16* %16624, i64 1
  %16626 = bitcast i16* %16625 to <16 x i16>*
  %16627 = load <16 x i16>, <16 x i16>* %16626, align 2, !tbaa !396
  %16628 = getelementptr inbounds i16, i16* %16624, i64 17
  %16629 = bitcast i16* %16628 to <16 x i16>*
  %16630 = load <16 x i16>, <16 x i16>* %16629, align 2, !tbaa !396
  %16631 = getelementptr inbounds i16, i16* %16624, i64 2
  %16632 = bitcast i16* %16631 to <16 x i16>*
  %16633 = load <16 x i16>, <16 x i16>* %16632, align 2, !tbaa !396
  %16634 = getelementptr inbounds i16, i16* %16624, i64 18
  %16635 = bitcast i16* %16634 to <16 x i16>*
  %16636 = load <16 x i16>, <16 x i16>* %16635, align 2, !tbaa !396
  %16637 = bitcast i16* %16624 to <16 x i16>*
  %16638 = load <16 x i16>, <16 x i16>* %16637, align 2, !tbaa !396
  %16639 = getelementptr inbounds i16, i16* %16624, i64 16
  %16640 = bitcast i16* %16639 to <16 x i16>*
  %16641 = load <16 x i16>, <16 x i16>* %16640, align 2, !tbaa !396
  %16642 = add <16 x i16> %16633, %16627
  %16643 = add <16 x i16> %16642, %16638
  %16644 = add <16 x i16> %16636, %16630
  %16645 = add <16 x i16> %16644, %16641
  %16646 = shufflevector <16 x i16> %16643, <16 x i16> %16645, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16647 = udiv <32 x i16> %16646, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16648 = shufflevector <32 x i16> %16647, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16649 = sext i32 %blur_x.s0.x.v1.base.s1758 to i64
  %16650 = add nsw i64 %16649, %16536
  %16651 = getelementptr inbounds i16, i16* %blur_x841, i64 %16650
  %16652 = bitcast i16* %16651 to <16 x i16>*
  store <16 x i16> %16648, <16 x i16>* %16652, align 2, !tbaa !399
  %16653 = shufflevector <32 x i16> %16647, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16654 = getelementptr inbounds i16, i16* %16651, i64 16
  %16655 = bitcast i16* %16654 to <16 x i16>*
  store <16 x i16> %16653, <16 x i16>* %16655, align 2, !tbaa !399
  br label %"consume blur_x1760"

"consume blur_x1760":                             ; preds = %"for blur_y.s0.x.x.rebased1749", %"produce blur_x1757"
  %16656 = sext i32 %blur_y.s0.x.v0.base.s1752 to i64
  %16657 = add nsw i64 %16539, %16656
  %16658 = getelementptr inbounds i16, i16* %blur_x841, i64 %16657
  %16659 = bitcast i16* %16658 to <16 x i16>*
  %16660 = load <16 x i16>, <16 x i16>* %16659, align 2, !tbaa !399
  %16661 = getelementptr inbounds i16, i16* %16658, i64 16
  %16662 = bitcast i16* %16661 to <16 x i16>*
  %16663 = load <16 x i16>, <16 x i16>* %16662, align 2, !tbaa !399
  %16664 = add nsw i64 %16542, %16656
  %16665 = getelementptr inbounds i16, i16* %blur_x841, i64 %16664
  %16666 = bitcast i16* %16665 to <16 x i16>*
  %16667 = load <16 x i16>, <16 x i16>* %16666, align 2, !tbaa !399
  %16668 = getelementptr inbounds i16, i16* %16665, i64 16
  %16669 = bitcast i16* %16668 to <16 x i16>*
  %16670 = load <16 x i16>, <16 x i16>* %16669, align 2, !tbaa !399
  %16671 = add nsw i64 %16545, %16656
  %16672 = getelementptr inbounds i16, i16* %blur_x841, i64 %16671
  %16673 = bitcast i16* %16672 to <16 x i16>*
  %16674 = load <16 x i16>, <16 x i16>* %16673, align 2, !tbaa !399
  %16675 = getelementptr inbounds i16, i16* %16672, i64 16
  %16676 = bitcast i16* %16675 to <16 x i16>*
  %16677 = load <16 x i16>, <16 x i16>* %16676, align 2, !tbaa !399
  %16678 = add <16 x i16> %16667, %16660
  %16679 = add <16 x i16> %16678, %16674
  %16680 = add <16 x i16> %16670, %16663
  %16681 = add <16 x i16> %16680, %16677
  %16682 = shufflevector <16 x i16> %16679, <16 x i16> %16681, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16683 = udiv <32 x i16> %16682, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16684 = shufflevector <32 x i16> %16683, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16685 = add nsw i64 %16549, %16656
  %16686 = getelementptr inbounds i16, i16* %258, i64 %16685
  %16687 = bitcast i16* %16686 to <16 x i16>*
  store <16 x i16> %16684, <16 x i16>* %16687, align 2, !tbaa !401
  %16688 = shufflevector <32 x i16> %16683, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16689 = getelementptr inbounds i16, i16* %16686, i64 16
  %16690 = bitcast i16* %16689 to <16 x i16>*
  store <16 x i16> %16688, <16 x i16>* %16690, align 2, !tbaa !401
  %16691 = add nuw nsw i32 %blur_y.s0.x.x.rebased1751, 1
  %.not2482 = icmp eq i32 %16691, %t1639860
  br i1 %.not2482, label %"end for blur_y.s0.x.x.rebased1750", label %"for blur_y.s0.x.x.rebased1749"

after_bb1761:                                     ; preds = %"end for blur_y.s0.x.x.rebased1750", %"produce blur_x1764"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1776.preheader", label %"end for blur_y.s0.x.x.rebased1777", !prof !386

"for blur_y.s0.x.x.rebased1776.preheader":        ; preds = %after_bb1761
  %16692 = sext i32 %t1650912 to i64
  %16693 = zext i32 %.pre-phi3391 to i64
  %16694 = mul nsw i64 %16693, %322
  %16695 = sub nsw i64 %16694, %293
  %16696 = zext i32 %.pre-phi3395 to i64
  %16697 = mul nsw i64 %16696, %322
  %16698 = sub nsw i64 %16697, %293
  %16699 = zext i32 %.pre-phi3387 to i64
  %16700 = mul nsw i64 %16699, %322
  %16701 = sub nsw i64 %16700, %293
  %16702 = sext i32 %a365 to i64
  %16703 = add nsw i64 %16702, 20
  %16704 = mul nsw i64 %16703, %319
  %16705 = add nsw i64 %16704, %323
  br label %"for blur_y.s0.x.x.rebased1776"

"produce blur_x1764":                             ; preds = %"end for blur_y.s0.x.x.rebased1750"
  %16706 = getelementptr inbounds i16, i16* %read_input784, i64 %440
  %16707 = getelementptr inbounds i16, i16* %16706, i64 -31
  %16708 = bitcast i16* %16707 to <16 x i16>*
  %16709 = load <16 x i16>, <16 x i16>* %16708, align 2, !tbaa !396
  %16710 = getelementptr inbounds i16, i16* %16706, i64 -15
  %16711 = bitcast i16* %16710 to <16 x i16>*
  %16712 = load <16 x i16>, <16 x i16>* %16711, align 2, !tbaa !396
  %16713 = getelementptr inbounds i16, i16* %16706, i64 -30
  %16714 = bitcast i16* %16713 to <16 x i16>*
  %16715 = load <16 x i16>, <16 x i16>* %16714, align 2, !tbaa !396
  %16716 = getelementptr inbounds i16, i16* %16706, i64 -14
  %16717 = bitcast i16* %16716 to <16 x i16>*
  %16718 = load <16 x i16>, <16 x i16>* %16717, align 2, !tbaa !396
  %16719 = getelementptr inbounds i16, i16* %16706, i64 -32
  %16720 = bitcast i16* %16719 to <16 x i16>*
  %16721 = load <16 x i16>, <16 x i16>* %16720, align 2, !tbaa !396
  %16722 = getelementptr inbounds i16, i16* %16706, i64 -16
  %16723 = bitcast i16* %16722 to <16 x i16>*
  %16724 = load <16 x i16>, <16 x i16>* %16723, align 2, !tbaa !396
  %16725 = add <16 x i16> %16715, %16709
  %16726 = add <16 x i16> %16725, %16721
  %16727 = add <16 x i16> %16718, %16712
  %16728 = add <16 x i16> %16727, %16724
  %16729 = shufflevector <16 x i16> %16726, <16 x i16> %16728, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16730 = udiv <32 x i16> %16729, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16731 = shufflevector <32 x i16> %16730, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16732 = zext i32 %.pre-phi3395 to i64
  %16733 = mul nsw i64 %294, %16732
  %16734 = add nsw i64 %296, %16733
  %16735 = getelementptr inbounds i16, i16* %blur_x841, i64 %16734
  %16736 = getelementptr inbounds i16, i16* %16735, i64 -32
  %16737 = bitcast i16* %16736 to <16 x i16>*
  store <16 x i16> %16731, <16 x i16>* %16737, align 2, !tbaa !399
  %16738 = shufflevector <32 x i16> %16730, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16739 = getelementptr inbounds i16, i16* %16735, i64 -16
  %16740 = bitcast i16* %16739 to <16 x i16>*
  store <16 x i16> %16738, <16 x i16>* %16740, align 2, !tbaa !399
  %16741 = zext i32 %.pre-phi3391 to i64
  %16742 = mul nsw i64 %16741, %318
  %16743 = add nsw i64 %16742, %291
  %16744 = getelementptr inbounds i16, i16* %blur_x841, i64 %16743
  %16745 = getelementptr inbounds i16, i16* %16744, i64 -32
  %16746 = bitcast i16* %16745 to <16 x i16>*
  %16747 = load <16 x i16>, <16 x i16>* %16746, align 2, !tbaa !399
  %16748 = getelementptr inbounds i16, i16* %16744, i64 -16
  %16749 = bitcast i16* %16748 to <16 x i16>*
  %16750 = load <16 x i16>, <16 x i16>* %16749, align 2, !tbaa !399
  %16751 = mul nsw i64 %16732, %318
  %16752 = add nsw i64 %16751, %291
  %16753 = getelementptr inbounds i16, i16* %blur_x841, i64 %16752
  %16754 = getelementptr inbounds i16, i16* %16753, i64 -32
  %16755 = bitcast i16* %16754 to <16 x i16>*
  %16756 = load <16 x i16>, <16 x i16>* %16755, align 2, !tbaa !399
  %16757 = getelementptr inbounds i16, i16* %16753, i64 -16
  %16758 = bitcast i16* %16757 to <16 x i16>*
  %16759 = load <16 x i16>, <16 x i16>* %16758, align 2, !tbaa !399
  %16760 = zext i32 %.pre-phi3387 to i64
  %16761 = mul nsw i64 %16760, %318
  %16762 = add nsw i64 %16761, %291
  %16763 = getelementptr inbounds i16, i16* %blur_x841, i64 %16762
  %16764 = getelementptr inbounds i16, i16* %16763, i64 -32
  %16765 = bitcast i16* %16764 to <16 x i16>*
  %16766 = load <16 x i16>, <16 x i16>* %16765, align 2, !tbaa !399
  %16767 = getelementptr inbounds i16, i16* %16763, i64 -16
  %16768 = bitcast i16* %16767 to <16 x i16>*
  %16769 = load <16 x i16>, <16 x i16>* %16768, align 2, !tbaa !399
  %16770 = add <16 x i16> %16756, %16747
  %16771 = add <16 x i16> %16770, %16766
  %16772 = add <16 x i16> %16759, %16750
  %16773 = add <16 x i16> %16772, %16769
  %16774 = shufflevector <16 x i16> %16771, <16 x i16> %16773, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16775 = udiv <32 x i16> %16774, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16776 = shufflevector <32 x i16> %16775, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16777 = sext i32 %a365 to i64
  %16778 = add nsw i64 %16777, 20
  %16779 = mul nsw i64 %16778, %319
  %16780 = add nsw i64 %321, %16779
  %16781 = getelementptr inbounds i16, i16* %258, i64 %16780
  %16782 = getelementptr inbounds i16, i16* %16781, i64 -32
  %16783 = bitcast i16* %16782 to <16 x i16>*
  store <16 x i16> %16776, <16 x i16>* %16783, align 2, !tbaa !401
  %16784 = shufflevector <32 x i16> %16775, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16785 = getelementptr inbounds i16, i16* %16781, i64 -16
  %16786 = bitcast i16* %16785 to <16 x i16>*
  store <16 x i16> %16784, <16 x i16>* %16786, align 2, !tbaa !401
  br label %after_bb1761

"for blur_y.s0.x.x.rebased1776":                  ; preds = %"for blur_y.s0.x.x.rebased1776.preheader", %"consume blur_x1784"
  %indvars.iv3282 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1776.preheader" ], [ %indvars.iv.next3283, %"consume blur_x1784" ]
  %16787 = add nsw i64 %indvars.iv3282, %298
  %16788 = icmp slt i64 %16787, 1
  %16789 = trunc i64 %16787 to i32
  %16790 = shl nsw i32 %16789, 5
  %16791 = icmp sgt i32 %194, %16790
  %16792 = or i1 %16788, %16791
  br i1 %16792, label %"produce blur_x1782", label %"for blur_y.s0.x.x.rebased1776.consume blur_x1784_crit_edge"

"for blur_y.s0.x.x.rebased1776.consume blur_x1784_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1776"
  %.pre3440 = shl nsw i64 %16787, 5
  br label %"consume blur_x1784"

"end for blur_y.s0.x.x.rebased1777":              ; preds = %"consume blur_x1784", %after_bb1761
  br i1 %299, label %"for blur_y.s0.x.x.rebased1792.preheader", label %"end for blur_y.s0.x.x.rebased1793", !prof !386

"for blur_y.s0.x.x.rebased1792.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1777"
  %16793 = sext i32 %t1650912 to i64
  %16794 = zext i32 %.pre-phi3391 to i64
  %16795 = mul nsw i64 %16794, %322
  %16796 = sub nsw i64 %16795, %293
  %16797 = zext i32 %.pre-phi3395 to i64
  %16798 = mul nsw i64 %16797, %322
  %16799 = sub nsw i64 %16798, %293
  %16800 = zext i32 %.pre-phi3387 to i64
  %16801 = mul nsw i64 %16800, %322
  %16802 = sub nsw i64 %16801, %293
  %16803 = sext i32 %a365 to i64
  %16804 = add nsw i64 %16803, 20
  %16805 = mul nsw i64 %16804, %319
  %16806 = add nsw i64 %16805, %323
  br label %"for blur_y.s0.x.x.rebased1792"

"produce blur_x1782":                             ; preds = %"for blur_y.s0.x.x.rebased1776"
  %t9921783 = add nsw i32 %442, %16790
  %16807 = sext i32 %t9921783 to i64
  %16808 = getelementptr inbounds i16, i16* %read_input784, i64 %16807
  %16809 = getelementptr inbounds i16, i16* %16808, i64 1
  %16810 = bitcast i16* %16809 to <16 x i16>*
  %16811 = load <16 x i16>, <16 x i16>* %16810, align 2, !tbaa !396
  %16812 = getelementptr inbounds i16, i16* %16808, i64 17
  %16813 = bitcast i16* %16812 to <16 x i16>*
  %16814 = load <16 x i16>, <16 x i16>* %16813, align 2, !tbaa !396
  %16815 = getelementptr inbounds i16, i16* %16808, i64 2
  %16816 = bitcast i16* %16815 to <16 x i16>*
  %16817 = load <16 x i16>, <16 x i16>* %16816, align 2, !tbaa !396
  %16818 = getelementptr inbounds i16, i16* %16808, i64 18
  %16819 = bitcast i16* %16818 to <16 x i16>*
  %16820 = load <16 x i16>, <16 x i16>* %16819, align 2, !tbaa !396
  %16821 = bitcast i16* %16808 to <16 x i16>*
  %16822 = load <16 x i16>, <16 x i16>* %16821, align 2, !tbaa !396
  %16823 = getelementptr inbounds i16, i16* %16808, i64 16
  %16824 = bitcast i16* %16823 to <16 x i16>*
  %16825 = load <16 x i16>, <16 x i16>* %16824, align 2, !tbaa !396
  %16826 = add <16 x i16> %16817, %16811
  %16827 = add <16 x i16> %16826, %16822
  %16828 = add <16 x i16> %16820, %16814
  %16829 = add <16 x i16> %16828, %16825
  %16830 = shufflevector <16 x i16> %16827, <16 x i16> %16829, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16831 = udiv <32 x i16> %16830, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16832 = shufflevector <32 x i16> %16831, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16833 = shl nsw i64 %16787, 5
  %16834 = add nsw i64 %16833, %16692
  %16835 = getelementptr inbounds i16, i16* %blur_x841, i64 %16834
  %16836 = bitcast i16* %16835 to <16 x i16>*
  store <16 x i16> %16832, <16 x i16>* %16836, align 2, !tbaa !399
  %16837 = shufflevector <32 x i16> %16831, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16838 = getelementptr inbounds i16, i16* %16835, i64 16
  %16839 = bitcast i16* %16838 to <16 x i16>*
  store <16 x i16> %16837, <16 x i16>* %16839, align 2, !tbaa !399
  br label %"consume blur_x1784"

"consume blur_x1784":                             ; preds = %"for blur_y.s0.x.x.rebased1776.consume blur_x1784_crit_edge", %"produce blur_x1782"
  %.pre-phi3441 = phi i64 [ %.pre3440, %"for blur_y.s0.x.x.rebased1776.consume blur_x1784_crit_edge" ], [ %16833, %"produce blur_x1782" ]
  %16840 = add nsw i64 %16695, %.pre-phi3441
  %16841 = getelementptr inbounds i16, i16* %blur_x841, i64 %16840
  %16842 = bitcast i16* %16841 to <16 x i16>*
  %16843 = load <16 x i16>, <16 x i16>* %16842, align 2, !tbaa !399
  %16844 = getelementptr inbounds i16, i16* %16841, i64 16
  %16845 = bitcast i16* %16844 to <16 x i16>*
  %16846 = load <16 x i16>, <16 x i16>* %16845, align 2, !tbaa !399
  %16847 = add nsw i64 %16698, %.pre-phi3441
  %16848 = getelementptr inbounds i16, i16* %blur_x841, i64 %16847
  %16849 = bitcast i16* %16848 to <16 x i16>*
  %16850 = load <16 x i16>, <16 x i16>* %16849, align 2, !tbaa !399
  %16851 = getelementptr inbounds i16, i16* %16848, i64 16
  %16852 = bitcast i16* %16851 to <16 x i16>*
  %16853 = load <16 x i16>, <16 x i16>* %16852, align 2, !tbaa !399
  %16854 = add nsw i64 %16701, %.pre-phi3441
  %16855 = getelementptr inbounds i16, i16* %blur_x841, i64 %16854
  %16856 = bitcast i16* %16855 to <16 x i16>*
  %16857 = load <16 x i16>, <16 x i16>* %16856, align 2, !tbaa !399
  %16858 = getelementptr inbounds i16, i16* %16855, i64 16
  %16859 = bitcast i16* %16858 to <16 x i16>*
  %16860 = load <16 x i16>, <16 x i16>* %16859, align 2, !tbaa !399
  %16861 = add <16 x i16> %16850, %16843
  %16862 = add <16 x i16> %16861, %16857
  %16863 = add <16 x i16> %16853, %16846
  %16864 = add <16 x i16> %16863, %16860
  %16865 = shufflevector <16 x i16> %16862, <16 x i16> %16864, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16866 = udiv <32 x i16> %16865, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16867 = shufflevector <32 x i16> %16866, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16868 = add nsw i64 %16705, %.pre-phi3441
  %16869 = getelementptr inbounds i16, i16* %258, i64 %16868
  %16870 = bitcast i16* %16869 to <16 x i16>*
  store <16 x i16> %16867, <16 x i16>* %16870, align 2, !tbaa !401
  %16871 = shufflevector <32 x i16> %16866, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16872 = getelementptr inbounds i16, i16* %16869, i64 16
  %16873 = bitcast i16* %16872 to <16 x i16>*
  store <16 x i16> %16871, <16 x i16>* %16873, align 2, !tbaa !401
  %indvars.iv.next3283 = add nuw nsw i64 %indvars.iv3282, 1
  %.not2479 = icmp eq i64 %indvars.iv.next3283, %515
  br i1 %.not2479, label %"end for blur_y.s0.x.x.rebased1777", label %"for blur_y.s0.x.x.rebased1776"

"for blur_y.s0.x.x.rebased1792":                  ; preds = %"for blur_y.s0.x.x.rebased1792.preheader", %"consume blur_x1803"
  %blur_y.s0.x.x.rebased1794 = phi i32 [ %16948, %"consume blur_x1803" ], [ 0, %"for blur_y.s0.x.x.rebased1792.preheader" ]
  %16874 = add nsw i32 %blur_y.s0.x.x.rebased1794, %t1582776
  %a4155 = shl nsw i32 %16874, 5
  %16875 = icmp sgt i32 %t1603, %a4155
  %blur_y.s0.x.v0.base.s1795 = select i1 %16875, i32 %a4155, i32 %t1603
  %16876 = icmp slt i32 %16874, 1
  %16877 = icmp sgt i32 %194, %a4155
  %16878 = or i1 %16876, %16877
  br i1 %16878, label %"produce blur_x1800", label %"consume blur_x1803"

"end for blur_y.s0.x.x.rebased1793":              ; preds = %"consume blur_x1803", %"end for blur_y.s0.x.x.rebased1777"
  br i1 %225, label %"produce blur_x1807", label %after_bb1804

"produce blur_x1800":                             ; preds = %"for blur_y.s0.x.x.rebased1792"
  %16879 = icmp slt i32 %blur_y.s0.x.v0.base.s1795, %194
  %blur_x.s0.x.v1.base.s1801 = select i1 %16879, i32 %blur_y.s0.x.v0.base.s1795, i32 %194
  %t9971802 = add nsw i32 %442, %blur_x.s0.x.v1.base.s1801
  %16880 = sext i32 %t9971802 to i64
  %16881 = getelementptr inbounds i16, i16* %read_input784, i64 %16880
  %16882 = getelementptr inbounds i16, i16* %16881, i64 1
  %16883 = bitcast i16* %16882 to <16 x i16>*
  %16884 = load <16 x i16>, <16 x i16>* %16883, align 2, !tbaa !396
  %16885 = getelementptr inbounds i16, i16* %16881, i64 17
  %16886 = bitcast i16* %16885 to <16 x i16>*
  %16887 = load <16 x i16>, <16 x i16>* %16886, align 2, !tbaa !396
  %16888 = getelementptr inbounds i16, i16* %16881, i64 2
  %16889 = bitcast i16* %16888 to <16 x i16>*
  %16890 = load <16 x i16>, <16 x i16>* %16889, align 2, !tbaa !396
  %16891 = getelementptr inbounds i16, i16* %16881, i64 18
  %16892 = bitcast i16* %16891 to <16 x i16>*
  %16893 = load <16 x i16>, <16 x i16>* %16892, align 2, !tbaa !396
  %16894 = bitcast i16* %16881 to <16 x i16>*
  %16895 = load <16 x i16>, <16 x i16>* %16894, align 2, !tbaa !396
  %16896 = getelementptr inbounds i16, i16* %16881, i64 16
  %16897 = bitcast i16* %16896 to <16 x i16>*
  %16898 = load <16 x i16>, <16 x i16>* %16897, align 2, !tbaa !396
  %16899 = add <16 x i16> %16890, %16884
  %16900 = add <16 x i16> %16899, %16895
  %16901 = add <16 x i16> %16893, %16887
  %16902 = add <16 x i16> %16901, %16898
  %16903 = shufflevector <16 x i16> %16900, <16 x i16> %16902, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16904 = udiv <32 x i16> %16903, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16905 = shufflevector <32 x i16> %16904, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16906 = sext i32 %blur_x.s0.x.v1.base.s1801 to i64
  %16907 = add nsw i64 %16906, %16793
  %16908 = getelementptr inbounds i16, i16* %blur_x841, i64 %16907
  %16909 = bitcast i16* %16908 to <16 x i16>*
  store <16 x i16> %16905, <16 x i16>* %16909, align 2, !tbaa !399
  %16910 = shufflevector <32 x i16> %16904, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16911 = getelementptr inbounds i16, i16* %16908, i64 16
  %16912 = bitcast i16* %16911 to <16 x i16>*
  store <16 x i16> %16910, <16 x i16>* %16912, align 2, !tbaa !399
  br label %"consume blur_x1803"

"consume blur_x1803":                             ; preds = %"for blur_y.s0.x.x.rebased1792", %"produce blur_x1800"
  %16913 = sext i32 %blur_y.s0.x.v0.base.s1795 to i64
  %16914 = add nsw i64 %16796, %16913
  %16915 = getelementptr inbounds i16, i16* %blur_x841, i64 %16914
  %16916 = bitcast i16* %16915 to <16 x i16>*
  %16917 = load <16 x i16>, <16 x i16>* %16916, align 2, !tbaa !399
  %16918 = getelementptr inbounds i16, i16* %16915, i64 16
  %16919 = bitcast i16* %16918 to <16 x i16>*
  %16920 = load <16 x i16>, <16 x i16>* %16919, align 2, !tbaa !399
  %16921 = add nsw i64 %16799, %16913
  %16922 = getelementptr inbounds i16, i16* %blur_x841, i64 %16921
  %16923 = bitcast i16* %16922 to <16 x i16>*
  %16924 = load <16 x i16>, <16 x i16>* %16923, align 2, !tbaa !399
  %16925 = getelementptr inbounds i16, i16* %16922, i64 16
  %16926 = bitcast i16* %16925 to <16 x i16>*
  %16927 = load <16 x i16>, <16 x i16>* %16926, align 2, !tbaa !399
  %16928 = add nsw i64 %16802, %16913
  %16929 = getelementptr inbounds i16, i16* %blur_x841, i64 %16928
  %16930 = bitcast i16* %16929 to <16 x i16>*
  %16931 = load <16 x i16>, <16 x i16>* %16930, align 2, !tbaa !399
  %16932 = getelementptr inbounds i16, i16* %16929, i64 16
  %16933 = bitcast i16* %16932 to <16 x i16>*
  %16934 = load <16 x i16>, <16 x i16>* %16933, align 2, !tbaa !399
  %16935 = add <16 x i16> %16924, %16917
  %16936 = add <16 x i16> %16935, %16931
  %16937 = add <16 x i16> %16927, %16920
  %16938 = add <16 x i16> %16937, %16934
  %16939 = shufflevector <16 x i16> %16936, <16 x i16> %16938, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16940 = udiv <32 x i16> %16939, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16941 = shufflevector <32 x i16> %16940, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16942 = add nsw i64 %16806, %16913
  %16943 = getelementptr inbounds i16, i16* %258, i64 %16942
  %16944 = bitcast i16* %16943 to <16 x i16>*
  store <16 x i16> %16941, <16 x i16>* %16944, align 2, !tbaa !401
  %16945 = shufflevector <32 x i16> %16940, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16946 = getelementptr inbounds i16, i16* %16943, i64 16
  %16947 = bitcast i16* %16946 to <16 x i16>*
  store <16 x i16> %16945, <16 x i16>* %16947, align 2, !tbaa !401
  %16948 = add nuw nsw i32 %blur_y.s0.x.x.rebased1794, 1
  %.not2478 = icmp eq i32 %16948, %t1639860
  br i1 %.not2478, label %"end for blur_y.s0.x.x.rebased1793", label %"for blur_y.s0.x.x.rebased1792"

after_bb1804:                                     ; preds = %"end for blur_y.s0.x.x.rebased1793", %"produce blur_x1807"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1819.preheader", label %"end for blur_y.s0.x.x.rebased1820", !prof !386

"for blur_y.s0.x.x.rebased1819.preheader":        ; preds = %after_bb1804
  %16949 = sext i32 %t1666955 to i64
  %16950 = zext i32 %.pre-phi3395 to i64
  %16951 = mul nsw i64 %16950, %322
  %16952 = sub nsw i64 %16951, %293
  %16953 = zext i32 %.pre-phi3401 to i64
  %16954 = mul nsw i64 %16953, %322
  %16955 = sub nsw i64 %16954, %293
  %16956 = zext i32 %.pre-phi3391 to i64
  %16957 = mul nsw i64 %16956, %322
  %16958 = sub nsw i64 %16957, %293
  %16959 = sext i32 %a365 to i64
  %16960 = add nsw i64 %16959, 21
  %16961 = mul nsw i64 %16960, %319
  %16962 = add nsw i64 %16961, %323
  br label %"for blur_y.s0.x.x.rebased1819"

"produce blur_x1807":                             ; preds = %"end for blur_y.s0.x.x.rebased1793"
  %16963 = getelementptr inbounds i16, i16* %read_input784, i64 %446
  %16964 = getelementptr inbounds i16, i16* %16963, i64 -31
  %16965 = bitcast i16* %16964 to <16 x i16>*
  %16966 = load <16 x i16>, <16 x i16>* %16965, align 2, !tbaa !396
  %16967 = getelementptr inbounds i16, i16* %16963, i64 -15
  %16968 = bitcast i16* %16967 to <16 x i16>*
  %16969 = load <16 x i16>, <16 x i16>* %16968, align 2, !tbaa !396
  %16970 = getelementptr inbounds i16, i16* %16963, i64 -30
  %16971 = bitcast i16* %16970 to <16 x i16>*
  %16972 = load <16 x i16>, <16 x i16>* %16971, align 2, !tbaa !396
  %16973 = getelementptr inbounds i16, i16* %16963, i64 -14
  %16974 = bitcast i16* %16973 to <16 x i16>*
  %16975 = load <16 x i16>, <16 x i16>* %16974, align 2, !tbaa !396
  %16976 = getelementptr inbounds i16, i16* %16963, i64 -32
  %16977 = bitcast i16* %16976 to <16 x i16>*
  %16978 = load <16 x i16>, <16 x i16>* %16977, align 2, !tbaa !396
  %16979 = getelementptr inbounds i16, i16* %16963, i64 -16
  %16980 = bitcast i16* %16979 to <16 x i16>*
  %16981 = load <16 x i16>, <16 x i16>* %16980, align 2, !tbaa !396
  %16982 = add <16 x i16> %16972, %16966
  %16983 = add <16 x i16> %16982, %16978
  %16984 = add <16 x i16> %16975, %16969
  %16985 = add <16 x i16> %16984, %16981
  %16986 = shufflevector <16 x i16> %16983, <16 x i16> %16985, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16987 = udiv <32 x i16> %16986, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %16988 = shufflevector <32 x i16> %16987, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16989 = zext i32 %.pre-phi3401 to i64
  %16990 = mul nsw i64 %294, %16989
  %16991 = add nsw i64 %296, %16990
  %16992 = getelementptr inbounds i16, i16* %blur_x841, i64 %16991
  %16993 = getelementptr inbounds i16, i16* %16992, i64 -32
  %16994 = bitcast i16* %16993 to <16 x i16>*
  store <16 x i16> %16988, <16 x i16>* %16994, align 2, !tbaa !399
  %16995 = shufflevector <32 x i16> %16987, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16996 = getelementptr inbounds i16, i16* %16992, i64 -16
  %16997 = bitcast i16* %16996 to <16 x i16>*
  store <16 x i16> %16995, <16 x i16>* %16997, align 2, !tbaa !399
  %16998 = zext i32 %.pre-phi3395 to i64
  %16999 = mul nsw i64 %16998, %318
  %17000 = add nsw i64 %16999, %291
  %17001 = getelementptr inbounds i16, i16* %blur_x841, i64 %17000
  %17002 = getelementptr inbounds i16, i16* %17001, i64 -32
  %17003 = bitcast i16* %17002 to <16 x i16>*
  %17004 = load <16 x i16>, <16 x i16>* %17003, align 2, !tbaa !399
  %17005 = getelementptr inbounds i16, i16* %17001, i64 -16
  %17006 = bitcast i16* %17005 to <16 x i16>*
  %17007 = load <16 x i16>, <16 x i16>* %17006, align 2, !tbaa !399
  %17008 = mul nsw i64 %16989, %318
  %17009 = add nsw i64 %17008, %291
  %17010 = getelementptr inbounds i16, i16* %blur_x841, i64 %17009
  %17011 = getelementptr inbounds i16, i16* %17010, i64 -32
  %17012 = bitcast i16* %17011 to <16 x i16>*
  %17013 = load <16 x i16>, <16 x i16>* %17012, align 2, !tbaa !399
  %17014 = getelementptr inbounds i16, i16* %17010, i64 -16
  %17015 = bitcast i16* %17014 to <16 x i16>*
  %17016 = load <16 x i16>, <16 x i16>* %17015, align 2, !tbaa !399
  %17017 = zext i32 %.pre-phi3391 to i64
  %17018 = mul nsw i64 %17017, %318
  %17019 = add nsw i64 %17018, %291
  %17020 = getelementptr inbounds i16, i16* %blur_x841, i64 %17019
  %17021 = getelementptr inbounds i16, i16* %17020, i64 -32
  %17022 = bitcast i16* %17021 to <16 x i16>*
  %17023 = load <16 x i16>, <16 x i16>* %17022, align 2, !tbaa !399
  %17024 = getelementptr inbounds i16, i16* %17020, i64 -16
  %17025 = bitcast i16* %17024 to <16 x i16>*
  %17026 = load <16 x i16>, <16 x i16>* %17025, align 2, !tbaa !399
  %17027 = add <16 x i16> %17013, %17004
  %17028 = add <16 x i16> %17027, %17023
  %17029 = add <16 x i16> %17016, %17007
  %17030 = add <16 x i16> %17029, %17026
  %17031 = shufflevector <16 x i16> %17028, <16 x i16> %17030, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17032 = udiv <32 x i16> %17031, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17033 = shufflevector <32 x i16> %17032, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17034 = sext i32 %a365 to i64
  %17035 = add nsw i64 %17034, 21
  %17036 = mul nsw i64 %17035, %319
  %17037 = add nsw i64 %321, %17036
  %17038 = getelementptr inbounds i16, i16* %258, i64 %17037
  %17039 = getelementptr inbounds i16, i16* %17038, i64 -32
  %17040 = bitcast i16* %17039 to <16 x i16>*
  store <16 x i16> %17033, <16 x i16>* %17040, align 2, !tbaa !401
  %17041 = shufflevector <32 x i16> %17032, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17042 = getelementptr inbounds i16, i16* %17038, i64 -16
  %17043 = bitcast i16* %17042 to <16 x i16>*
  store <16 x i16> %17041, <16 x i16>* %17043, align 2, !tbaa !401
  br label %after_bb1804

"for blur_y.s0.x.x.rebased1819":                  ; preds = %"for blur_y.s0.x.x.rebased1819.preheader", %"consume blur_x1827"
  %indvars.iv3284 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1819.preheader" ], [ %indvars.iv.next3285, %"consume blur_x1827" ]
  %17044 = add nsw i64 %indvars.iv3284, %298
  %17045 = icmp slt i64 %17044, 1
  %17046 = trunc i64 %17044 to i32
  %17047 = shl nsw i32 %17046, 5
  %17048 = icmp sgt i32 %194, %17047
  %17049 = or i1 %17045, %17048
  br i1 %17049, label %"produce blur_x1825", label %"for blur_y.s0.x.x.rebased1819.consume blur_x1827_crit_edge"

"for blur_y.s0.x.x.rebased1819.consume blur_x1827_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1819"
  %.pre3442 = shl nsw i64 %17044, 5
  br label %"consume blur_x1827"

"end for blur_y.s0.x.x.rebased1820":              ; preds = %"consume blur_x1827", %after_bb1804
  br i1 %299, label %"for blur_y.s0.x.x.rebased1835.preheader", label %"end for blur_y.s0.x.x.rebased1836", !prof !386

"for blur_y.s0.x.x.rebased1835.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1820"
  %17050 = sext i32 %t1666955 to i64
  %17051 = zext i32 %.pre-phi3395 to i64
  %17052 = mul nsw i64 %17051, %322
  %17053 = sub nsw i64 %17052, %293
  %17054 = zext i32 %.pre-phi3401 to i64
  %17055 = mul nsw i64 %17054, %322
  %17056 = sub nsw i64 %17055, %293
  %17057 = zext i32 %.pre-phi3391 to i64
  %17058 = mul nsw i64 %17057, %322
  %17059 = sub nsw i64 %17058, %293
  %17060 = sext i32 %a365 to i64
  %17061 = add nsw i64 %17060, 21
  %17062 = mul nsw i64 %17061, %319
  %17063 = add nsw i64 %17062, %323
  br label %"for blur_y.s0.x.x.rebased1835"

"produce blur_x1825":                             ; preds = %"for blur_y.s0.x.x.rebased1819"
  %t10081826 = add nsw i32 %448, %17047
  %17064 = sext i32 %t10081826 to i64
  %17065 = getelementptr inbounds i16, i16* %read_input784, i64 %17064
  %17066 = getelementptr inbounds i16, i16* %17065, i64 1
  %17067 = bitcast i16* %17066 to <16 x i16>*
  %17068 = load <16 x i16>, <16 x i16>* %17067, align 2, !tbaa !396
  %17069 = getelementptr inbounds i16, i16* %17065, i64 17
  %17070 = bitcast i16* %17069 to <16 x i16>*
  %17071 = load <16 x i16>, <16 x i16>* %17070, align 2, !tbaa !396
  %17072 = getelementptr inbounds i16, i16* %17065, i64 2
  %17073 = bitcast i16* %17072 to <16 x i16>*
  %17074 = load <16 x i16>, <16 x i16>* %17073, align 2, !tbaa !396
  %17075 = getelementptr inbounds i16, i16* %17065, i64 18
  %17076 = bitcast i16* %17075 to <16 x i16>*
  %17077 = load <16 x i16>, <16 x i16>* %17076, align 2, !tbaa !396
  %17078 = bitcast i16* %17065 to <16 x i16>*
  %17079 = load <16 x i16>, <16 x i16>* %17078, align 2, !tbaa !396
  %17080 = getelementptr inbounds i16, i16* %17065, i64 16
  %17081 = bitcast i16* %17080 to <16 x i16>*
  %17082 = load <16 x i16>, <16 x i16>* %17081, align 2, !tbaa !396
  %17083 = add <16 x i16> %17074, %17068
  %17084 = add <16 x i16> %17083, %17079
  %17085 = add <16 x i16> %17077, %17071
  %17086 = add <16 x i16> %17085, %17082
  %17087 = shufflevector <16 x i16> %17084, <16 x i16> %17086, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17088 = udiv <32 x i16> %17087, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17089 = shufflevector <32 x i16> %17088, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17090 = shl nsw i64 %17044, 5
  %17091 = add nsw i64 %17090, %16949
  %17092 = getelementptr inbounds i16, i16* %blur_x841, i64 %17091
  %17093 = bitcast i16* %17092 to <16 x i16>*
  store <16 x i16> %17089, <16 x i16>* %17093, align 2, !tbaa !399
  %17094 = shufflevector <32 x i16> %17088, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17095 = getelementptr inbounds i16, i16* %17092, i64 16
  %17096 = bitcast i16* %17095 to <16 x i16>*
  store <16 x i16> %17094, <16 x i16>* %17096, align 2, !tbaa !399
  br label %"consume blur_x1827"

"consume blur_x1827":                             ; preds = %"for blur_y.s0.x.x.rebased1819.consume blur_x1827_crit_edge", %"produce blur_x1825"
  %.pre-phi3443 = phi i64 [ %.pre3442, %"for blur_y.s0.x.x.rebased1819.consume blur_x1827_crit_edge" ], [ %17090, %"produce blur_x1825" ]
  %17097 = add nsw i64 %16952, %.pre-phi3443
  %17098 = getelementptr inbounds i16, i16* %blur_x841, i64 %17097
  %17099 = bitcast i16* %17098 to <16 x i16>*
  %17100 = load <16 x i16>, <16 x i16>* %17099, align 2, !tbaa !399
  %17101 = getelementptr inbounds i16, i16* %17098, i64 16
  %17102 = bitcast i16* %17101 to <16 x i16>*
  %17103 = load <16 x i16>, <16 x i16>* %17102, align 2, !tbaa !399
  %17104 = add nsw i64 %16955, %.pre-phi3443
  %17105 = getelementptr inbounds i16, i16* %blur_x841, i64 %17104
  %17106 = bitcast i16* %17105 to <16 x i16>*
  %17107 = load <16 x i16>, <16 x i16>* %17106, align 2, !tbaa !399
  %17108 = getelementptr inbounds i16, i16* %17105, i64 16
  %17109 = bitcast i16* %17108 to <16 x i16>*
  %17110 = load <16 x i16>, <16 x i16>* %17109, align 2, !tbaa !399
  %17111 = add nsw i64 %16958, %.pre-phi3443
  %17112 = getelementptr inbounds i16, i16* %blur_x841, i64 %17111
  %17113 = bitcast i16* %17112 to <16 x i16>*
  %17114 = load <16 x i16>, <16 x i16>* %17113, align 2, !tbaa !399
  %17115 = getelementptr inbounds i16, i16* %17112, i64 16
  %17116 = bitcast i16* %17115 to <16 x i16>*
  %17117 = load <16 x i16>, <16 x i16>* %17116, align 2, !tbaa !399
  %17118 = add <16 x i16> %17107, %17100
  %17119 = add <16 x i16> %17118, %17114
  %17120 = add <16 x i16> %17110, %17103
  %17121 = add <16 x i16> %17120, %17117
  %17122 = shufflevector <16 x i16> %17119, <16 x i16> %17121, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17123 = udiv <32 x i16> %17122, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17124 = shufflevector <32 x i16> %17123, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17125 = add nsw i64 %16962, %.pre-phi3443
  %17126 = getelementptr inbounds i16, i16* %258, i64 %17125
  %17127 = bitcast i16* %17126 to <16 x i16>*
  store <16 x i16> %17124, <16 x i16>* %17127, align 2, !tbaa !401
  %17128 = shufflevector <32 x i16> %17123, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17129 = getelementptr inbounds i16, i16* %17126, i64 16
  %17130 = bitcast i16* %17129 to <16 x i16>*
  store <16 x i16> %17128, <16 x i16>* %17130, align 2, !tbaa !401
  %indvars.iv.next3285 = add nuw nsw i64 %indvars.iv3284, 1
  %.not2475 = icmp eq i64 %indvars.iv.next3285, %515
  br i1 %.not2475, label %"end for blur_y.s0.x.x.rebased1820", label %"for blur_y.s0.x.x.rebased1819"

"for blur_y.s0.x.x.rebased1835":                  ; preds = %"for blur_y.s0.x.x.rebased1835.preheader", %"consume blur_x1846"
  %blur_y.s0.x.x.rebased1837 = phi i32 [ %17205, %"consume blur_x1846" ], [ 0, %"for blur_y.s0.x.x.rebased1835.preheader" ]
  %17131 = add nsw i32 %blur_y.s0.x.x.rebased1837, %t1582776
  %a4312 = shl nsw i32 %17131, 5
  %17132 = icmp sgt i32 %t1603, %a4312
  %blur_y.s0.x.v0.base.s1838 = select i1 %17132, i32 %a4312, i32 %t1603
  %17133 = icmp slt i32 %17131, 1
  %17134 = icmp sgt i32 %194, %a4312
  %17135 = or i1 %17133, %17134
  br i1 %17135, label %"produce blur_x1843", label %"consume blur_x1846"

"end for blur_y.s0.x.x.rebased1836":              ; preds = %"consume blur_x1846", %"end for blur_y.s0.x.x.rebased1820"
  br i1 %225, label %"produce blur_x1850", label %after_bb1847

"produce blur_x1843":                             ; preds = %"for blur_y.s0.x.x.rebased1835"
  %17136 = icmp slt i32 %blur_y.s0.x.v0.base.s1838, %194
  %blur_x.s0.x.v1.base.s1844 = select i1 %17136, i32 %blur_y.s0.x.v0.base.s1838, i32 %194
  %t10131845 = add nsw i32 %448, %blur_x.s0.x.v1.base.s1844
  %17137 = sext i32 %t10131845 to i64
  %17138 = getelementptr inbounds i16, i16* %read_input784, i64 %17137
  %17139 = getelementptr inbounds i16, i16* %17138, i64 1
  %17140 = bitcast i16* %17139 to <16 x i16>*
  %17141 = load <16 x i16>, <16 x i16>* %17140, align 2, !tbaa !396
  %17142 = getelementptr inbounds i16, i16* %17138, i64 17
  %17143 = bitcast i16* %17142 to <16 x i16>*
  %17144 = load <16 x i16>, <16 x i16>* %17143, align 2, !tbaa !396
  %17145 = getelementptr inbounds i16, i16* %17138, i64 2
  %17146 = bitcast i16* %17145 to <16 x i16>*
  %17147 = load <16 x i16>, <16 x i16>* %17146, align 2, !tbaa !396
  %17148 = getelementptr inbounds i16, i16* %17138, i64 18
  %17149 = bitcast i16* %17148 to <16 x i16>*
  %17150 = load <16 x i16>, <16 x i16>* %17149, align 2, !tbaa !396
  %17151 = bitcast i16* %17138 to <16 x i16>*
  %17152 = load <16 x i16>, <16 x i16>* %17151, align 2, !tbaa !396
  %17153 = getelementptr inbounds i16, i16* %17138, i64 16
  %17154 = bitcast i16* %17153 to <16 x i16>*
  %17155 = load <16 x i16>, <16 x i16>* %17154, align 2, !tbaa !396
  %17156 = add <16 x i16> %17147, %17141
  %17157 = add <16 x i16> %17156, %17152
  %17158 = add <16 x i16> %17150, %17144
  %17159 = add <16 x i16> %17158, %17155
  %17160 = shufflevector <16 x i16> %17157, <16 x i16> %17159, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17161 = udiv <32 x i16> %17160, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17162 = shufflevector <32 x i16> %17161, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17163 = sext i32 %blur_x.s0.x.v1.base.s1844 to i64
  %17164 = add nsw i64 %17163, %17050
  %17165 = getelementptr inbounds i16, i16* %blur_x841, i64 %17164
  %17166 = bitcast i16* %17165 to <16 x i16>*
  store <16 x i16> %17162, <16 x i16>* %17166, align 2, !tbaa !399
  %17167 = shufflevector <32 x i16> %17161, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17168 = getelementptr inbounds i16, i16* %17165, i64 16
  %17169 = bitcast i16* %17168 to <16 x i16>*
  store <16 x i16> %17167, <16 x i16>* %17169, align 2, !tbaa !399
  br label %"consume blur_x1846"

"consume blur_x1846":                             ; preds = %"for blur_y.s0.x.x.rebased1835", %"produce blur_x1843"
  %17170 = sext i32 %blur_y.s0.x.v0.base.s1838 to i64
  %17171 = add nsw i64 %17053, %17170
  %17172 = getelementptr inbounds i16, i16* %blur_x841, i64 %17171
  %17173 = bitcast i16* %17172 to <16 x i16>*
  %17174 = load <16 x i16>, <16 x i16>* %17173, align 2, !tbaa !399
  %17175 = getelementptr inbounds i16, i16* %17172, i64 16
  %17176 = bitcast i16* %17175 to <16 x i16>*
  %17177 = load <16 x i16>, <16 x i16>* %17176, align 2, !tbaa !399
  %17178 = add nsw i64 %17056, %17170
  %17179 = getelementptr inbounds i16, i16* %blur_x841, i64 %17178
  %17180 = bitcast i16* %17179 to <16 x i16>*
  %17181 = load <16 x i16>, <16 x i16>* %17180, align 2, !tbaa !399
  %17182 = getelementptr inbounds i16, i16* %17179, i64 16
  %17183 = bitcast i16* %17182 to <16 x i16>*
  %17184 = load <16 x i16>, <16 x i16>* %17183, align 2, !tbaa !399
  %17185 = add nsw i64 %17059, %17170
  %17186 = getelementptr inbounds i16, i16* %blur_x841, i64 %17185
  %17187 = bitcast i16* %17186 to <16 x i16>*
  %17188 = load <16 x i16>, <16 x i16>* %17187, align 2, !tbaa !399
  %17189 = getelementptr inbounds i16, i16* %17186, i64 16
  %17190 = bitcast i16* %17189 to <16 x i16>*
  %17191 = load <16 x i16>, <16 x i16>* %17190, align 2, !tbaa !399
  %17192 = add <16 x i16> %17181, %17174
  %17193 = add <16 x i16> %17192, %17188
  %17194 = add <16 x i16> %17184, %17177
  %17195 = add <16 x i16> %17194, %17191
  %17196 = shufflevector <16 x i16> %17193, <16 x i16> %17195, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17197 = udiv <32 x i16> %17196, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17198 = shufflevector <32 x i16> %17197, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17199 = add nsw i64 %17063, %17170
  %17200 = getelementptr inbounds i16, i16* %258, i64 %17199
  %17201 = bitcast i16* %17200 to <16 x i16>*
  store <16 x i16> %17198, <16 x i16>* %17201, align 2, !tbaa !401
  %17202 = shufflevector <32 x i16> %17197, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17203 = getelementptr inbounds i16, i16* %17200, i64 16
  %17204 = bitcast i16* %17203 to <16 x i16>*
  store <16 x i16> %17202, <16 x i16>* %17204, align 2, !tbaa !401
  %17205 = add nuw nsw i32 %blur_y.s0.x.x.rebased1837, 1
  %.not2474 = icmp eq i32 %17205, %t1639860
  br i1 %.not2474, label %"end for blur_y.s0.x.x.rebased1836", label %"for blur_y.s0.x.x.rebased1835"

after_bb1847:                                     ; preds = %"end for blur_y.s0.x.x.rebased1836", %"produce blur_x1850"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1862.preheader", label %"end for blur_y.s0.x.x.rebased1863", !prof !386

"for blur_y.s0.x.x.rebased1862.preheader":        ; preds = %after_bb1847
  %17206 = sext i32 %t1638848 to i64
  %17207 = zext i32 %.pre-phi3401 to i64
  %17208 = mul nsw i64 %17207, %322
  %17209 = sub nsw i64 %17208, %293
  %17210 = zext i32 %.pre-phi3387 to i64
  %17211 = mul nsw i64 %17210, %322
  %17212 = sub nsw i64 %17211, %293
  %17213 = zext i32 %.pre-phi3395 to i64
  %17214 = mul nsw i64 %17213, %322
  %17215 = sub nsw i64 %17214, %293
  %17216 = sext i32 %a365 to i64
  %17217 = add nsw i64 %17216, 22
  %17218 = mul nsw i64 %17217, %319
  %17219 = add nsw i64 %17218, %323
  br label %"for blur_y.s0.x.x.rebased1862"

"produce blur_x1850":                             ; preds = %"end for blur_y.s0.x.x.rebased1836"
  %17220 = getelementptr inbounds i16, i16* %read_input784, i64 %452
  %17221 = getelementptr inbounds i16, i16* %17220, i64 -31
  %17222 = bitcast i16* %17221 to <16 x i16>*
  %17223 = load <16 x i16>, <16 x i16>* %17222, align 2, !tbaa !396
  %17224 = getelementptr inbounds i16, i16* %17220, i64 -15
  %17225 = bitcast i16* %17224 to <16 x i16>*
  %17226 = load <16 x i16>, <16 x i16>* %17225, align 2, !tbaa !396
  %17227 = getelementptr inbounds i16, i16* %17220, i64 -30
  %17228 = bitcast i16* %17227 to <16 x i16>*
  %17229 = load <16 x i16>, <16 x i16>* %17228, align 2, !tbaa !396
  %17230 = getelementptr inbounds i16, i16* %17220, i64 -14
  %17231 = bitcast i16* %17230 to <16 x i16>*
  %17232 = load <16 x i16>, <16 x i16>* %17231, align 2, !tbaa !396
  %17233 = getelementptr inbounds i16, i16* %17220, i64 -32
  %17234 = bitcast i16* %17233 to <16 x i16>*
  %17235 = load <16 x i16>, <16 x i16>* %17234, align 2, !tbaa !396
  %17236 = getelementptr inbounds i16, i16* %17220, i64 -16
  %17237 = bitcast i16* %17236 to <16 x i16>*
  %17238 = load <16 x i16>, <16 x i16>* %17237, align 2, !tbaa !396
  %17239 = add <16 x i16> %17229, %17223
  %17240 = add <16 x i16> %17239, %17235
  %17241 = add <16 x i16> %17232, %17226
  %17242 = add <16 x i16> %17241, %17238
  %17243 = shufflevector <16 x i16> %17240, <16 x i16> %17242, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17244 = udiv <32 x i16> %17243, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17245 = shufflevector <32 x i16> %17244, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17246 = zext i32 %.pre-phi3387 to i64
  %17247 = mul nsw i64 %294, %17246
  %17248 = add nsw i64 %296, %17247
  %17249 = getelementptr inbounds i16, i16* %blur_x841, i64 %17248
  %17250 = getelementptr inbounds i16, i16* %17249, i64 -32
  %17251 = bitcast i16* %17250 to <16 x i16>*
  store <16 x i16> %17245, <16 x i16>* %17251, align 2, !tbaa !399
  %17252 = shufflevector <32 x i16> %17244, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17253 = getelementptr inbounds i16, i16* %17249, i64 -16
  %17254 = bitcast i16* %17253 to <16 x i16>*
  store <16 x i16> %17252, <16 x i16>* %17254, align 2, !tbaa !399
  %17255 = zext i32 %.pre-phi3401 to i64
  %17256 = mul nsw i64 %17255, %318
  %17257 = add nsw i64 %17256, %291
  %17258 = getelementptr inbounds i16, i16* %blur_x841, i64 %17257
  %17259 = getelementptr inbounds i16, i16* %17258, i64 -32
  %17260 = bitcast i16* %17259 to <16 x i16>*
  %17261 = load <16 x i16>, <16 x i16>* %17260, align 2, !tbaa !399
  %17262 = getelementptr inbounds i16, i16* %17258, i64 -16
  %17263 = bitcast i16* %17262 to <16 x i16>*
  %17264 = load <16 x i16>, <16 x i16>* %17263, align 2, !tbaa !399
  %17265 = mul nsw i64 %17246, %318
  %17266 = add nsw i64 %17265, %291
  %17267 = getelementptr inbounds i16, i16* %blur_x841, i64 %17266
  %17268 = getelementptr inbounds i16, i16* %17267, i64 -32
  %17269 = bitcast i16* %17268 to <16 x i16>*
  %17270 = load <16 x i16>, <16 x i16>* %17269, align 2, !tbaa !399
  %17271 = getelementptr inbounds i16, i16* %17267, i64 -16
  %17272 = bitcast i16* %17271 to <16 x i16>*
  %17273 = load <16 x i16>, <16 x i16>* %17272, align 2, !tbaa !399
  %17274 = zext i32 %.pre-phi3395 to i64
  %17275 = mul nsw i64 %17274, %318
  %17276 = add nsw i64 %17275, %291
  %17277 = getelementptr inbounds i16, i16* %blur_x841, i64 %17276
  %17278 = getelementptr inbounds i16, i16* %17277, i64 -32
  %17279 = bitcast i16* %17278 to <16 x i16>*
  %17280 = load <16 x i16>, <16 x i16>* %17279, align 2, !tbaa !399
  %17281 = getelementptr inbounds i16, i16* %17277, i64 -16
  %17282 = bitcast i16* %17281 to <16 x i16>*
  %17283 = load <16 x i16>, <16 x i16>* %17282, align 2, !tbaa !399
  %17284 = add <16 x i16> %17270, %17261
  %17285 = add <16 x i16> %17284, %17280
  %17286 = add <16 x i16> %17273, %17264
  %17287 = add <16 x i16> %17286, %17283
  %17288 = shufflevector <16 x i16> %17285, <16 x i16> %17287, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17289 = udiv <32 x i16> %17288, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17290 = shufflevector <32 x i16> %17289, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17291 = sext i32 %a365 to i64
  %17292 = add nsw i64 %17291, 22
  %17293 = mul nsw i64 %17292, %319
  %17294 = add nsw i64 %321, %17293
  %17295 = getelementptr inbounds i16, i16* %258, i64 %17294
  %17296 = getelementptr inbounds i16, i16* %17295, i64 -32
  %17297 = bitcast i16* %17296 to <16 x i16>*
  store <16 x i16> %17290, <16 x i16>* %17297, align 2, !tbaa !401
  %17298 = shufflevector <32 x i16> %17289, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17299 = getelementptr inbounds i16, i16* %17295, i64 -16
  %17300 = bitcast i16* %17299 to <16 x i16>*
  store <16 x i16> %17298, <16 x i16>* %17300, align 2, !tbaa !401
  br label %after_bb1847

"for blur_y.s0.x.x.rebased1862":                  ; preds = %"for blur_y.s0.x.x.rebased1862.preheader", %"consume blur_x1870"
  %indvars.iv3286 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1862.preheader" ], [ %indvars.iv.next3287, %"consume blur_x1870" ]
  %17301 = add nsw i64 %indvars.iv3286, %298
  %17302 = icmp slt i64 %17301, 1
  %17303 = trunc i64 %17301 to i32
  %17304 = shl nsw i32 %17303, 5
  %17305 = icmp sgt i32 %194, %17304
  %17306 = or i1 %17302, %17305
  br i1 %17306, label %"produce blur_x1868", label %"for blur_y.s0.x.x.rebased1862.consume blur_x1870_crit_edge"

"for blur_y.s0.x.x.rebased1862.consume blur_x1870_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1862"
  %.pre3444 = shl nsw i64 %17301, 5
  br label %"consume blur_x1870"

"end for blur_y.s0.x.x.rebased1863":              ; preds = %"consume blur_x1870", %after_bb1847
  br i1 %299, label %"for blur_y.s0.x.x.rebased1878.preheader", label %"end for blur_y.s0.x.x.rebased1879", !prof !386

"for blur_y.s0.x.x.rebased1878.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1863"
  %17307 = sext i32 %t1638848 to i64
  %17308 = zext i32 %.pre-phi3401 to i64
  %17309 = mul nsw i64 %17308, %322
  %17310 = sub nsw i64 %17309, %293
  %17311 = zext i32 %.pre-phi3387 to i64
  %17312 = mul nsw i64 %17311, %322
  %17313 = sub nsw i64 %17312, %293
  %17314 = zext i32 %.pre-phi3395 to i64
  %17315 = mul nsw i64 %17314, %322
  %17316 = sub nsw i64 %17315, %293
  %17317 = sext i32 %a365 to i64
  %17318 = add nsw i64 %17317, 22
  %17319 = mul nsw i64 %17318, %319
  %17320 = add nsw i64 %17319, %323
  br label %"for blur_y.s0.x.x.rebased1878"

"produce blur_x1868":                             ; preds = %"for blur_y.s0.x.x.rebased1862"
  %t10241869 = add nsw i32 %454, %17304
  %17321 = sext i32 %t10241869 to i64
  %17322 = getelementptr inbounds i16, i16* %read_input784, i64 %17321
  %17323 = getelementptr inbounds i16, i16* %17322, i64 1
  %17324 = bitcast i16* %17323 to <16 x i16>*
  %17325 = load <16 x i16>, <16 x i16>* %17324, align 2, !tbaa !396
  %17326 = getelementptr inbounds i16, i16* %17322, i64 17
  %17327 = bitcast i16* %17326 to <16 x i16>*
  %17328 = load <16 x i16>, <16 x i16>* %17327, align 2, !tbaa !396
  %17329 = getelementptr inbounds i16, i16* %17322, i64 2
  %17330 = bitcast i16* %17329 to <16 x i16>*
  %17331 = load <16 x i16>, <16 x i16>* %17330, align 2, !tbaa !396
  %17332 = getelementptr inbounds i16, i16* %17322, i64 18
  %17333 = bitcast i16* %17332 to <16 x i16>*
  %17334 = load <16 x i16>, <16 x i16>* %17333, align 2, !tbaa !396
  %17335 = bitcast i16* %17322 to <16 x i16>*
  %17336 = load <16 x i16>, <16 x i16>* %17335, align 2, !tbaa !396
  %17337 = getelementptr inbounds i16, i16* %17322, i64 16
  %17338 = bitcast i16* %17337 to <16 x i16>*
  %17339 = load <16 x i16>, <16 x i16>* %17338, align 2, !tbaa !396
  %17340 = add <16 x i16> %17331, %17325
  %17341 = add <16 x i16> %17340, %17336
  %17342 = add <16 x i16> %17334, %17328
  %17343 = add <16 x i16> %17342, %17339
  %17344 = shufflevector <16 x i16> %17341, <16 x i16> %17343, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17345 = udiv <32 x i16> %17344, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17346 = shufflevector <32 x i16> %17345, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17347 = shl nsw i64 %17301, 5
  %17348 = add nsw i64 %17347, %17206
  %17349 = getelementptr inbounds i16, i16* %blur_x841, i64 %17348
  %17350 = bitcast i16* %17349 to <16 x i16>*
  store <16 x i16> %17346, <16 x i16>* %17350, align 2, !tbaa !399
  %17351 = shufflevector <32 x i16> %17345, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17352 = getelementptr inbounds i16, i16* %17349, i64 16
  %17353 = bitcast i16* %17352 to <16 x i16>*
  store <16 x i16> %17351, <16 x i16>* %17353, align 2, !tbaa !399
  br label %"consume blur_x1870"

"consume blur_x1870":                             ; preds = %"for blur_y.s0.x.x.rebased1862.consume blur_x1870_crit_edge", %"produce blur_x1868"
  %.pre-phi3445 = phi i64 [ %.pre3444, %"for blur_y.s0.x.x.rebased1862.consume blur_x1870_crit_edge" ], [ %17347, %"produce blur_x1868" ]
  %17354 = add nsw i64 %17209, %.pre-phi3445
  %17355 = getelementptr inbounds i16, i16* %blur_x841, i64 %17354
  %17356 = bitcast i16* %17355 to <16 x i16>*
  %17357 = load <16 x i16>, <16 x i16>* %17356, align 2, !tbaa !399
  %17358 = getelementptr inbounds i16, i16* %17355, i64 16
  %17359 = bitcast i16* %17358 to <16 x i16>*
  %17360 = load <16 x i16>, <16 x i16>* %17359, align 2, !tbaa !399
  %17361 = add nsw i64 %17212, %.pre-phi3445
  %17362 = getelementptr inbounds i16, i16* %blur_x841, i64 %17361
  %17363 = bitcast i16* %17362 to <16 x i16>*
  %17364 = load <16 x i16>, <16 x i16>* %17363, align 2, !tbaa !399
  %17365 = getelementptr inbounds i16, i16* %17362, i64 16
  %17366 = bitcast i16* %17365 to <16 x i16>*
  %17367 = load <16 x i16>, <16 x i16>* %17366, align 2, !tbaa !399
  %17368 = add nsw i64 %17215, %.pre-phi3445
  %17369 = getelementptr inbounds i16, i16* %blur_x841, i64 %17368
  %17370 = bitcast i16* %17369 to <16 x i16>*
  %17371 = load <16 x i16>, <16 x i16>* %17370, align 2, !tbaa !399
  %17372 = getelementptr inbounds i16, i16* %17369, i64 16
  %17373 = bitcast i16* %17372 to <16 x i16>*
  %17374 = load <16 x i16>, <16 x i16>* %17373, align 2, !tbaa !399
  %17375 = add <16 x i16> %17364, %17357
  %17376 = add <16 x i16> %17375, %17371
  %17377 = add <16 x i16> %17367, %17360
  %17378 = add <16 x i16> %17377, %17374
  %17379 = shufflevector <16 x i16> %17376, <16 x i16> %17378, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17380 = udiv <32 x i16> %17379, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17381 = shufflevector <32 x i16> %17380, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17382 = add nsw i64 %17219, %.pre-phi3445
  %17383 = getelementptr inbounds i16, i16* %258, i64 %17382
  %17384 = bitcast i16* %17383 to <16 x i16>*
  store <16 x i16> %17381, <16 x i16>* %17384, align 2, !tbaa !401
  %17385 = shufflevector <32 x i16> %17380, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17386 = getelementptr inbounds i16, i16* %17383, i64 16
  %17387 = bitcast i16* %17386 to <16 x i16>*
  store <16 x i16> %17385, <16 x i16>* %17387, align 2, !tbaa !401
  %indvars.iv.next3287 = add nuw nsw i64 %indvars.iv3286, 1
  %.not2471 = icmp eq i64 %indvars.iv.next3287, %515
  br i1 %.not2471, label %"end for blur_y.s0.x.x.rebased1863", label %"for blur_y.s0.x.x.rebased1862"

"for blur_y.s0.x.x.rebased1878":                  ; preds = %"for blur_y.s0.x.x.rebased1878.preheader", %"consume blur_x1889"
  %blur_y.s0.x.x.rebased1880 = phi i32 [ %17462, %"consume blur_x1889" ], [ 0, %"for blur_y.s0.x.x.rebased1878.preheader" ]
  %17388 = add nsw i32 %blur_y.s0.x.x.rebased1880, %t1582776
  %a4469 = shl nsw i32 %17388, 5
  %17389 = icmp sgt i32 %t1603, %a4469
  %blur_y.s0.x.v0.base.s1881 = select i1 %17389, i32 %a4469, i32 %t1603
  %17390 = icmp slt i32 %17388, 1
  %17391 = icmp sgt i32 %194, %a4469
  %17392 = or i1 %17390, %17391
  br i1 %17392, label %"produce blur_x1886", label %"consume blur_x1889"

"end for blur_y.s0.x.x.rebased1879":              ; preds = %"consume blur_x1889", %"end for blur_y.s0.x.x.rebased1863"
  br i1 %225, label %"produce blur_x1893", label %after_bb1890

"produce blur_x1886":                             ; preds = %"for blur_y.s0.x.x.rebased1878"
  %17393 = icmp slt i32 %blur_y.s0.x.v0.base.s1881, %194
  %blur_x.s0.x.v1.base.s1887 = select i1 %17393, i32 %blur_y.s0.x.v0.base.s1881, i32 %194
  %t10291888 = add nsw i32 %454, %blur_x.s0.x.v1.base.s1887
  %17394 = sext i32 %t10291888 to i64
  %17395 = getelementptr inbounds i16, i16* %read_input784, i64 %17394
  %17396 = getelementptr inbounds i16, i16* %17395, i64 1
  %17397 = bitcast i16* %17396 to <16 x i16>*
  %17398 = load <16 x i16>, <16 x i16>* %17397, align 2, !tbaa !396
  %17399 = getelementptr inbounds i16, i16* %17395, i64 17
  %17400 = bitcast i16* %17399 to <16 x i16>*
  %17401 = load <16 x i16>, <16 x i16>* %17400, align 2, !tbaa !396
  %17402 = getelementptr inbounds i16, i16* %17395, i64 2
  %17403 = bitcast i16* %17402 to <16 x i16>*
  %17404 = load <16 x i16>, <16 x i16>* %17403, align 2, !tbaa !396
  %17405 = getelementptr inbounds i16, i16* %17395, i64 18
  %17406 = bitcast i16* %17405 to <16 x i16>*
  %17407 = load <16 x i16>, <16 x i16>* %17406, align 2, !tbaa !396
  %17408 = bitcast i16* %17395 to <16 x i16>*
  %17409 = load <16 x i16>, <16 x i16>* %17408, align 2, !tbaa !396
  %17410 = getelementptr inbounds i16, i16* %17395, i64 16
  %17411 = bitcast i16* %17410 to <16 x i16>*
  %17412 = load <16 x i16>, <16 x i16>* %17411, align 2, !tbaa !396
  %17413 = add <16 x i16> %17404, %17398
  %17414 = add <16 x i16> %17413, %17409
  %17415 = add <16 x i16> %17407, %17401
  %17416 = add <16 x i16> %17415, %17412
  %17417 = shufflevector <16 x i16> %17414, <16 x i16> %17416, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17418 = udiv <32 x i16> %17417, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17419 = shufflevector <32 x i16> %17418, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17420 = sext i32 %blur_x.s0.x.v1.base.s1887 to i64
  %17421 = add nsw i64 %17420, %17307
  %17422 = getelementptr inbounds i16, i16* %blur_x841, i64 %17421
  %17423 = bitcast i16* %17422 to <16 x i16>*
  store <16 x i16> %17419, <16 x i16>* %17423, align 2, !tbaa !399
  %17424 = shufflevector <32 x i16> %17418, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17425 = getelementptr inbounds i16, i16* %17422, i64 16
  %17426 = bitcast i16* %17425 to <16 x i16>*
  store <16 x i16> %17424, <16 x i16>* %17426, align 2, !tbaa !399
  br label %"consume blur_x1889"

"consume blur_x1889":                             ; preds = %"for blur_y.s0.x.x.rebased1878", %"produce blur_x1886"
  %17427 = sext i32 %blur_y.s0.x.v0.base.s1881 to i64
  %17428 = add nsw i64 %17310, %17427
  %17429 = getelementptr inbounds i16, i16* %blur_x841, i64 %17428
  %17430 = bitcast i16* %17429 to <16 x i16>*
  %17431 = load <16 x i16>, <16 x i16>* %17430, align 2, !tbaa !399
  %17432 = getelementptr inbounds i16, i16* %17429, i64 16
  %17433 = bitcast i16* %17432 to <16 x i16>*
  %17434 = load <16 x i16>, <16 x i16>* %17433, align 2, !tbaa !399
  %17435 = add nsw i64 %17313, %17427
  %17436 = getelementptr inbounds i16, i16* %blur_x841, i64 %17435
  %17437 = bitcast i16* %17436 to <16 x i16>*
  %17438 = load <16 x i16>, <16 x i16>* %17437, align 2, !tbaa !399
  %17439 = getelementptr inbounds i16, i16* %17436, i64 16
  %17440 = bitcast i16* %17439 to <16 x i16>*
  %17441 = load <16 x i16>, <16 x i16>* %17440, align 2, !tbaa !399
  %17442 = add nsw i64 %17316, %17427
  %17443 = getelementptr inbounds i16, i16* %blur_x841, i64 %17442
  %17444 = bitcast i16* %17443 to <16 x i16>*
  %17445 = load <16 x i16>, <16 x i16>* %17444, align 2, !tbaa !399
  %17446 = getelementptr inbounds i16, i16* %17443, i64 16
  %17447 = bitcast i16* %17446 to <16 x i16>*
  %17448 = load <16 x i16>, <16 x i16>* %17447, align 2, !tbaa !399
  %17449 = add <16 x i16> %17438, %17431
  %17450 = add <16 x i16> %17449, %17445
  %17451 = add <16 x i16> %17441, %17434
  %17452 = add <16 x i16> %17451, %17448
  %17453 = shufflevector <16 x i16> %17450, <16 x i16> %17452, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17454 = udiv <32 x i16> %17453, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17455 = shufflevector <32 x i16> %17454, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17456 = add nsw i64 %17320, %17427
  %17457 = getelementptr inbounds i16, i16* %258, i64 %17456
  %17458 = bitcast i16* %17457 to <16 x i16>*
  store <16 x i16> %17455, <16 x i16>* %17458, align 2, !tbaa !401
  %17459 = shufflevector <32 x i16> %17454, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17460 = getelementptr inbounds i16, i16* %17457, i64 16
  %17461 = bitcast i16* %17460 to <16 x i16>*
  store <16 x i16> %17459, <16 x i16>* %17461, align 2, !tbaa !401
  %17462 = add nuw nsw i32 %blur_y.s0.x.x.rebased1880, 1
  %.not2470 = icmp eq i32 %17462, %t1639860
  br i1 %.not2470, label %"end for blur_y.s0.x.x.rebased1879", label %"for blur_y.s0.x.x.rebased1878"

after_bb1890:                                     ; preds = %"end for blur_y.s0.x.x.rebased1879", %"produce blur_x1893"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1905.preheader", label %"end for blur_y.s0.x.x.rebased1906", !prof !386

"for blur_y.s0.x.x.rebased1905.preheader":        ; preds = %after_bb1890
  %17463 = sext i32 %t1644876 to i64
  %17464 = zext i32 %.pre-phi3387 to i64
  %17465 = mul nsw i64 %17464, %322
  %17466 = sub nsw i64 %17465, %293
  %17467 = zext i32 %.pre-phi3391 to i64
  %17468 = mul nsw i64 %17467, %322
  %17469 = sub nsw i64 %17468, %293
  %17470 = zext i32 %.pre-phi3401 to i64
  %17471 = mul nsw i64 %17470, %322
  %17472 = sub nsw i64 %17471, %293
  %17473 = sext i32 %a365 to i64
  %17474 = add nsw i64 %17473, 23
  %17475 = mul nsw i64 %17474, %319
  %17476 = add nsw i64 %17475, %323
  br label %"for blur_y.s0.x.x.rebased1905"

"produce blur_x1893":                             ; preds = %"end for blur_y.s0.x.x.rebased1879"
  %17477 = getelementptr inbounds i16, i16* %read_input784, i64 %458
  %17478 = getelementptr inbounds i16, i16* %17477, i64 -31
  %17479 = bitcast i16* %17478 to <16 x i16>*
  %17480 = load <16 x i16>, <16 x i16>* %17479, align 2, !tbaa !396
  %17481 = getelementptr inbounds i16, i16* %17477, i64 -15
  %17482 = bitcast i16* %17481 to <16 x i16>*
  %17483 = load <16 x i16>, <16 x i16>* %17482, align 2, !tbaa !396
  %17484 = getelementptr inbounds i16, i16* %17477, i64 -30
  %17485 = bitcast i16* %17484 to <16 x i16>*
  %17486 = load <16 x i16>, <16 x i16>* %17485, align 2, !tbaa !396
  %17487 = getelementptr inbounds i16, i16* %17477, i64 -14
  %17488 = bitcast i16* %17487 to <16 x i16>*
  %17489 = load <16 x i16>, <16 x i16>* %17488, align 2, !tbaa !396
  %17490 = getelementptr inbounds i16, i16* %17477, i64 -32
  %17491 = bitcast i16* %17490 to <16 x i16>*
  %17492 = load <16 x i16>, <16 x i16>* %17491, align 2, !tbaa !396
  %17493 = getelementptr inbounds i16, i16* %17477, i64 -16
  %17494 = bitcast i16* %17493 to <16 x i16>*
  %17495 = load <16 x i16>, <16 x i16>* %17494, align 2, !tbaa !396
  %17496 = add <16 x i16> %17486, %17480
  %17497 = add <16 x i16> %17496, %17492
  %17498 = add <16 x i16> %17489, %17483
  %17499 = add <16 x i16> %17498, %17495
  %17500 = shufflevector <16 x i16> %17497, <16 x i16> %17499, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17501 = udiv <32 x i16> %17500, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17502 = shufflevector <32 x i16> %17501, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17503 = zext i32 %.pre-phi3391 to i64
  %17504 = mul nsw i64 %294, %17503
  %17505 = add nsw i64 %296, %17504
  %17506 = getelementptr inbounds i16, i16* %blur_x841, i64 %17505
  %17507 = getelementptr inbounds i16, i16* %17506, i64 -32
  %17508 = bitcast i16* %17507 to <16 x i16>*
  store <16 x i16> %17502, <16 x i16>* %17508, align 2, !tbaa !399
  %17509 = shufflevector <32 x i16> %17501, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17510 = getelementptr inbounds i16, i16* %17506, i64 -16
  %17511 = bitcast i16* %17510 to <16 x i16>*
  store <16 x i16> %17509, <16 x i16>* %17511, align 2, !tbaa !399
  %17512 = zext i32 %.pre-phi3387 to i64
  %17513 = mul nsw i64 %17512, %318
  %17514 = add nsw i64 %17513, %291
  %17515 = getelementptr inbounds i16, i16* %blur_x841, i64 %17514
  %17516 = getelementptr inbounds i16, i16* %17515, i64 -32
  %17517 = bitcast i16* %17516 to <16 x i16>*
  %17518 = load <16 x i16>, <16 x i16>* %17517, align 2, !tbaa !399
  %17519 = getelementptr inbounds i16, i16* %17515, i64 -16
  %17520 = bitcast i16* %17519 to <16 x i16>*
  %17521 = load <16 x i16>, <16 x i16>* %17520, align 2, !tbaa !399
  %17522 = mul nsw i64 %17503, %318
  %17523 = add nsw i64 %17522, %291
  %17524 = getelementptr inbounds i16, i16* %blur_x841, i64 %17523
  %17525 = getelementptr inbounds i16, i16* %17524, i64 -32
  %17526 = bitcast i16* %17525 to <16 x i16>*
  %17527 = load <16 x i16>, <16 x i16>* %17526, align 2, !tbaa !399
  %17528 = getelementptr inbounds i16, i16* %17524, i64 -16
  %17529 = bitcast i16* %17528 to <16 x i16>*
  %17530 = load <16 x i16>, <16 x i16>* %17529, align 2, !tbaa !399
  %17531 = zext i32 %.pre-phi3401 to i64
  %17532 = mul nsw i64 %17531, %318
  %17533 = add nsw i64 %17532, %291
  %17534 = getelementptr inbounds i16, i16* %blur_x841, i64 %17533
  %17535 = getelementptr inbounds i16, i16* %17534, i64 -32
  %17536 = bitcast i16* %17535 to <16 x i16>*
  %17537 = load <16 x i16>, <16 x i16>* %17536, align 2, !tbaa !399
  %17538 = getelementptr inbounds i16, i16* %17534, i64 -16
  %17539 = bitcast i16* %17538 to <16 x i16>*
  %17540 = load <16 x i16>, <16 x i16>* %17539, align 2, !tbaa !399
  %17541 = add <16 x i16> %17527, %17518
  %17542 = add <16 x i16> %17541, %17537
  %17543 = add <16 x i16> %17530, %17521
  %17544 = add <16 x i16> %17543, %17540
  %17545 = shufflevector <16 x i16> %17542, <16 x i16> %17544, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17546 = udiv <32 x i16> %17545, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17547 = shufflevector <32 x i16> %17546, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17548 = sext i32 %a365 to i64
  %17549 = add nsw i64 %17548, 23
  %17550 = mul nsw i64 %17549, %319
  %17551 = add nsw i64 %321, %17550
  %17552 = getelementptr inbounds i16, i16* %258, i64 %17551
  %17553 = getelementptr inbounds i16, i16* %17552, i64 -32
  %17554 = bitcast i16* %17553 to <16 x i16>*
  store <16 x i16> %17547, <16 x i16>* %17554, align 2, !tbaa !401
  %17555 = shufflevector <32 x i16> %17546, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17556 = getelementptr inbounds i16, i16* %17552, i64 -16
  %17557 = bitcast i16* %17556 to <16 x i16>*
  store <16 x i16> %17555, <16 x i16>* %17557, align 2, !tbaa !401
  br label %after_bb1890

"for blur_y.s0.x.x.rebased1905":                  ; preds = %"for blur_y.s0.x.x.rebased1905.preheader", %"consume blur_x1913"
  %indvars.iv3288 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1905.preheader" ], [ %indvars.iv.next3289, %"consume blur_x1913" ]
  %17558 = add nsw i64 %indvars.iv3288, %298
  %17559 = icmp slt i64 %17558, 1
  %17560 = trunc i64 %17558 to i32
  %17561 = shl nsw i32 %17560, 5
  %17562 = icmp sgt i32 %194, %17561
  %17563 = or i1 %17559, %17562
  br i1 %17563, label %"produce blur_x1911", label %"for blur_y.s0.x.x.rebased1905.consume blur_x1913_crit_edge"

"for blur_y.s0.x.x.rebased1905.consume blur_x1913_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1905"
  %.pre3446 = shl nsw i64 %17558, 5
  br label %"consume blur_x1913"

"end for blur_y.s0.x.x.rebased1906":              ; preds = %"consume blur_x1913", %after_bb1890
  br i1 %299, label %"for blur_y.s0.x.x.rebased1921.preheader", label %"end for blur_y.s0.x.x.rebased1922", !prof !386

"for blur_y.s0.x.x.rebased1921.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1906"
  %17564 = sext i32 %t1644876 to i64
  %17565 = zext i32 %.pre-phi3387 to i64
  %17566 = mul nsw i64 %17565, %322
  %17567 = sub nsw i64 %17566, %293
  %17568 = zext i32 %.pre-phi3391 to i64
  %17569 = mul nsw i64 %17568, %322
  %17570 = sub nsw i64 %17569, %293
  %17571 = zext i32 %.pre-phi3401 to i64
  %17572 = mul nsw i64 %17571, %322
  %17573 = sub nsw i64 %17572, %293
  %17574 = sext i32 %a365 to i64
  %17575 = add nsw i64 %17574, 23
  %17576 = mul nsw i64 %17575, %319
  %17577 = add nsw i64 %17576, %323
  br label %"for blur_y.s0.x.x.rebased1921"

"produce blur_x1911":                             ; preds = %"for blur_y.s0.x.x.rebased1905"
  %t10401912 = add nsw i32 %460, %17561
  %17578 = sext i32 %t10401912 to i64
  %17579 = getelementptr inbounds i16, i16* %read_input784, i64 %17578
  %17580 = getelementptr inbounds i16, i16* %17579, i64 1
  %17581 = bitcast i16* %17580 to <16 x i16>*
  %17582 = load <16 x i16>, <16 x i16>* %17581, align 2, !tbaa !396
  %17583 = getelementptr inbounds i16, i16* %17579, i64 17
  %17584 = bitcast i16* %17583 to <16 x i16>*
  %17585 = load <16 x i16>, <16 x i16>* %17584, align 2, !tbaa !396
  %17586 = getelementptr inbounds i16, i16* %17579, i64 2
  %17587 = bitcast i16* %17586 to <16 x i16>*
  %17588 = load <16 x i16>, <16 x i16>* %17587, align 2, !tbaa !396
  %17589 = getelementptr inbounds i16, i16* %17579, i64 18
  %17590 = bitcast i16* %17589 to <16 x i16>*
  %17591 = load <16 x i16>, <16 x i16>* %17590, align 2, !tbaa !396
  %17592 = bitcast i16* %17579 to <16 x i16>*
  %17593 = load <16 x i16>, <16 x i16>* %17592, align 2, !tbaa !396
  %17594 = getelementptr inbounds i16, i16* %17579, i64 16
  %17595 = bitcast i16* %17594 to <16 x i16>*
  %17596 = load <16 x i16>, <16 x i16>* %17595, align 2, !tbaa !396
  %17597 = add <16 x i16> %17588, %17582
  %17598 = add <16 x i16> %17597, %17593
  %17599 = add <16 x i16> %17591, %17585
  %17600 = add <16 x i16> %17599, %17596
  %17601 = shufflevector <16 x i16> %17598, <16 x i16> %17600, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17602 = udiv <32 x i16> %17601, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17603 = shufflevector <32 x i16> %17602, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17604 = shl nsw i64 %17558, 5
  %17605 = add nsw i64 %17604, %17463
  %17606 = getelementptr inbounds i16, i16* %blur_x841, i64 %17605
  %17607 = bitcast i16* %17606 to <16 x i16>*
  store <16 x i16> %17603, <16 x i16>* %17607, align 2, !tbaa !399
  %17608 = shufflevector <32 x i16> %17602, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17609 = getelementptr inbounds i16, i16* %17606, i64 16
  %17610 = bitcast i16* %17609 to <16 x i16>*
  store <16 x i16> %17608, <16 x i16>* %17610, align 2, !tbaa !399
  br label %"consume blur_x1913"

"consume blur_x1913":                             ; preds = %"for blur_y.s0.x.x.rebased1905.consume blur_x1913_crit_edge", %"produce blur_x1911"
  %.pre-phi3447 = phi i64 [ %.pre3446, %"for blur_y.s0.x.x.rebased1905.consume blur_x1913_crit_edge" ], [ %17604, %"produce blur_x1911" ]
  %17611 = add nsw i64 %17466, %.pre-phi3447
  %17612 = getelementptr inbounds i16, i16* %blur_x841, i64 %17611
  %17613 = bitcast i16* %17612 to <16 x i16>*
  %17614 = load <16 x i16>, <16 x i16>* %17613, align 2, !tbaa !399
  %17615 = getelementptr inbounds i16, i16* %17612, i64 16
  %17616 = bitcast i16* %17615 to <16 x i16>*
  %17617 = load <16 x i16>, <16 x i16>* %17616, align 2, !tbaa !399
  %17618 = add nsw i64 %17469, %.pre-phi3447
  %17619 = getelementptr inbounds i16, i16* %blur_x841, i64 %17618
  %17620 = bitcast i16* %17619 to <16 x i16>*
  %17621 = load <16 x i16>, <16 x i16>* %17620, align 2, !tbaa !399
  %17622 = getelementptr inbounds i16, i16* %17619, i64 16
  %17623 = bitcast i16* %17622 to <16 x i16>*
  %17624 = load <16 x i16>, <16 x i16>* %17623, align 2, !tbaa !399
  %17625 = add nsw i64 %17472, %.pre-phi3447
  %17626 = getelementptr inbounds i16, i16* %blur_x841, i64 %17625
  %17627 = bitcast i16* %17626 to <16 x i16>*
  %17628 = load <16 x i16>, <16 x i16>* %17627, align 2, !tbaa !399
  %17629 = getelementptr inbounds i16, i16* %17626, i64 16
  %17630 = bitcast i16* %17629 to <16 x i16>*
  %17631 = load <16 x i16>, <16 x i16>* %17630, align 2, !tbaa !399
  %17632 = add <16 x i16> %17621, %17614
  %17633 = add <16 x i16> %17632, %17628
  %17634 = add <16 x i16> %17624, %17617
  %17635 = add <16 x i16> %17634, %17631
  %17636 = shufflevector <16 x i16> %17633, <16 x i16> %17635, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17637 = udiv <32 x i16> %17636, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17638 = shufflevector <32 x i16> %17637, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17639 = add nsw i64 %17476, %.pre-phi3447
  %17640 = getelementptr inbounds i16, i16* %258, i64 %17639
  %17641 = bitcast i16* %17640 to <16 x i16>*
  store <16 x i16> %17638, <16 x i16>* %17641, align 2, !tbaa !401
  %17642 = shufflevector <32 x i16> %17637, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17643 = getelementptr inbounds i16, i16* %17640, i64 16
  %17644 = bitcast i16* %17643 to <16 x i16>*
  store <16 x i16> %17642, <16 x i16>* %17644, align 2, !tbaa !401
  %indvars.iv.next3289 = add nuw nsw i64 %indvars.iv3288, 1
  %.not2467 = icmp eq i64 %indvars.iv.next3289, %515
  br i1 %.not2467, label %"end for blur_y.s0.x.x.rebased1906", label %"for blur_y.s0.x.x.rebased1905"

"for blur_y.s0.x.x.rebased1921":                  ; preds = %"for blur_y.s0.x.x.rebased1921.preheader", %"consume blur_x1932"
  %blur_y.s0.x.x.rebased1923 = phi i32 [ %17719, %"consume blur_x1932" ], [ 0, %"for blur_y.s0.x.x.rebased1921.preheader" ]
  %17645 = add nsw i32 %blur_y.s0.x.x.rebased1923, %t1582776
  %a4626 = shl nsw i32 %17645, 5
  %17646 = icmp sgt i32 %t1603, %a4626
  %blur_y.s0.x.v0.base.s1924 = select i1 %17646, i32 %a4626, i32 %t1603
  %17647 = icmp slt i32 %17645, 1
  %17648 = icmp sgt i32 %194, %a4626
  %17649 = or i1 %17647, %17648
  br i1 %17649, label %"produce blur_x1929", label %"consume blur_x1932"

"end for blur_y.s0.x.x.rebased1922":              ; preds = %"consume blur_x1932", %"end for blur_y.s0.x.x.rebased1906"
  br i1 %225, label %"produce blur_x1936", label %after_bb1933

"produce blur_x1929":                             ; preds = %"for blur_y.s0.x.x.rebased1921"
  %17650 = icmp slt i32 %blur_y.s0.x.v0.base.s1924, %194
  %blur_x.s0.x.v1.base.s1930 = select i1 %17650, i32 %blur_y.s0.x.v0.base.s1924, i32 %194
  %t10451931 = add nsw i32 %460, %blur_x.s0.x.v1.base.s1930
  %17651 = sext i32 %t10451931 to i64
  %17652 = getelementptr inbounds i16, i16* %read_input784, i64 %17651
  %17653 = getelementptr inbounds i16, i16* %17652, i64 1
  %17654 = bitcast i16* %17653 to <16 x i16>*
  %17655 = load <16 x i16>, <16 x i16>* %17654, align 2, !tbaa !396
  %17656 = getelementptr inbounds i16, i16* %17652, i64 17
  %17657 = bitcast i16* %17656 to <16 x i16>*
  %17658 = load <16 x i16>, <16 x i16>* %17657, align 2, !tbaa !396
  %17659 = getelementptr inbounds i16, i16* %17652, i64 2
  %17660 = bitcast i16* %17659 to <16 x i16>*
  %17661 = load <16 x i16>, <16 x i16>* %17660, align 2, !tbaa !396
  %17662 = getelementptr inbounds i16, i16* %17652, i64 18
  %17663 = bitcast i16* %17662 to <16 x i16>*
  %17664 = load <16 x i16>, <16 x i16>* %17663, align 2, !tbaa !396
  %17665 = bitcast i16* %17652 to <16 x i16>*
  %17666 = load <16 x i16>, <16 x i16>* %17665, align 2, !tbaa !396
  %17667 = getelementptr inbounds i16, i16* %17652, i64 16
  %17668 = bitcast i16* %17667 to <16 x i16>*
  %17669 = load <16 x i16>, <16 x i16>* %17668, align 2, !tbaa !396
  %17670 = add <16 x i16> %17661, %17655
  %17671 = add <16 x i16> %17670, %17666
  %17672 = add <16 x i16> %17664, %17658
  %17673 = add <16 x i16> %17672, %17669
  %17674 = shufflevector <16 x i16> %17671, <16 x i16> %17673, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17675 = udiv <32 x i16> %17674, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17676 = shufflevector <32 x i16> %17675, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17677 = sext i32 %blur_x.s0.x.v1.base.s1930 to i64
  %17678 = add nsw i64 %17677, %17564
  %17679 = getelementptr inbounds i16, i16* %blur_x841, i64 %17678
  %17680 = bitcast i16* %17679 to <16 x i16>*
  store <16 x i16> %17676, <16 x i16>* %17680, align 2, !tbaa !399
  %17681 = shufflevector <32 x i16> %17675, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17682 = getelementptr inbounds i16, i16* %17679, i64 16
  %17683 = bitcast i16* %17682 to <16 x i16>*
  store <16 x i16> %17681, <16 x i16>* %17683, align 2, !tbaa !399
  br label %"consume blur_x1932"

"consume blur_x1932":                             ; preds = %"for blur_y.s0.x.x.rebased1921", %"produce blur_x1929"
  %17684 = sext i32 %blur_y.s0.x.v0.base.s1924 to i64
  %17685 = add nsw i64 %17567, %17684
  %17686 = getelementptr inbounds i16, i16* %blur_x841, i64 %17685
  %17687 = bitcast i16* %17686 to <16 x i16>*
  %17688 = load <16 x i16>, <16 x i16>* %17687, align 2, !tbaa !399
  %17689 = getelementptr inbounds i16, i16* %17686, i64 16
  %17690 = bitcast i16* %17689 to <16 x i16>*
  %17691 = load <16 x i16>, <16 x i16>* %17690, align 2, !tbaa !399
  %17692 = add nsw i64 %17570, %17684
  %17693 = getelementptr inbounds i16, i16* %blur_x841, i64 %17692
  %17694 = bitcast i16* %17693 to <16 x i16>*
  %17695 = load <16 x i16>, <16 x i16>* %17694, align 2, !tbaa !399
  %17696 = getelementptr inbounds i16, i16* %17693, i64 16
  %17697 = bitcast i16* %17696 to <16 x i16>*
  %17698 = load <16 x i16>, <16 x i16>* %17697, align 2, !tbaa !399
  %17699 = add nsw i64 %17573, %17684
  %17700 = getelementptr inbounds i16, i16* %blur_x841, i64 %17699
  %17701 = bitcast i16* %17700 to <16 x i16>*
  %17702 = load <16 x i16>, <16 x i16>* %17701, align 2, !tbaa !399
  %17703 = getelementptr inbounds i16, i16* %17700, i64 16
  %17704 = bitcast i16* %17703 to <16 x i16>*
  %17705 = load <16 x i16>, <16 x i16>* %17704, align 2, !tbaa !399
  %17706 = add <16 x i16> %17695, %17688
  %17707 = add <16 x i16> %17706, %17702
  %17708 = add <16 x i16> %17698, %17691
  %17709 = add <16 x i16> %17708, %17705
  %17710 = shufflevector <16 x i16> %17707, <16 x i16> %17709, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17711 = udiv <32 x i16> %17710, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17712 = shufflevector <32 x i16> %17711, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17713 = add nsw i64 %17577, %17684
  %17714 = getelementptr inbounds i16, i16* %258, i64 %17713
  %17715 = bitcast i16* %17714 to <16 x i16>*
  store <16 x i16> %17712, <16 x i16>* %17715, align 2, !tbaa !401
  %17716 = shufflevector <32 x i16> %17711, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17717 = getelementptr inbounds i16, i16* %17714, i64 16
  %17718 = bitcast i16* %17717 to <16 x i16>*
  store <16 x i16> %17716, <16 x i16>* %17718, align 2, !tbaa !401
  %17719 = add nuw nsw i32 %blur_y.s0.x.x.rebased1923, 1
  %.not2466 = icmp eq i32 %17719, %t1639860
  br i1 %.not2466, label %"end for blur_y.s0.x.x.rebased1922", label %"for blur_y.s0.x.x.rebased1921"

after_bb1933:                                     ; preds = %"end for blur_y.s0.x.x.rebased1922", %"produce blur_x1936"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1948.preheader", label %"end for blur_y.s0.x.x.rebased1949", !prof !386

"for blur_y.s0.x.x.rebased1948.preheader":        ; preds = %after_bb1933
  %17720 = sext i32 %t1650912 to i64
  %17721 = zext i32 %.pre-phi3391 to i64
  %17722 = mul nsw i64 %17721, %322
  %17723 = sub nsw i64 %17722, %293
  %17724 = zext i32 %.pre-phi3395 to i64
  %17725 = mul nsw i64 %17724, %322
  %17726 = sub nsw i64 %17725, %293
  %17727 = zext i32 %.pre-phi3387 to i64
  %17728 = mul nsw i64 %17727, %322
  %17729 = sub nsw i64 %17728, %293
  %17730 = sext i32 %a365 to i64
  %17731 = add nsw i64 %17730, 24
  %17732 = mul nsw i64 %17731, %319
  %17733 = add nsw i64 %17732, %323
  br label %"for blur_y.s0.x.x.rebased1948"

"produce blur_x1936":                             ; preds = %"end for blur_y.s0.x.x.rebased1922"
  %17734 = getelementptr inbounds i16, i16* %read_input784, i64 %464
  %17735 = getelementptr inbounds i16, i16* %17734, i64 -31
  %17736 = bitcast i16* %17735 to <16 x i16>*
  %17737 = load <16 x i16>, <16 x i16>* %17736, align 2, !tbaa !396
  %17738 = getelementptr inbounds i16, i16* %17734, i64 -15
  %17739 = bitcast i16* %17738 to <16 x i16>*
  %17740 = load <16 x i16>, <16 x i16>* %17739, align 2, !tbaa !396
  %17741 = getelementptr inbounds i16, i16* %17734, i64 -30
  %17742 = bitcast i16* %17741 to <16 x i16>*
  %17743 = load <16 x i16>, <16 x i16>* %17742, align 2, !tbaa !396
  %17744 = getelementptr inbounds i16, i16* %17734, i64 -14
  %17745 = bitcast i16* %17744 to <16 x i16>*
  %17746 = load <16 x i16>, <16 x i16>* %17745, align 2, !tbaa !396
  %17747 = getelementptr inbounds i16, i16* %17734, i64 -32
  %17748 = bitcast i16* %17747 to <16 x i16>*
  %17749 = load <16 x i16>, <16 x i16>* %17748, align 2, !tbaa !396
  %17750 = getelementptr inbounds i16, i16* %17734, i64 -16
  %17751 = bitcast i16* %17750 to <16 x i16>*
  %17752 = load <16 x i16>, <16 x i16>* %17751, align 2, !tbaa !396
  %17753 = add <16 x i16> %17743, %17737
  %17754 = add <16 x i16> %17753, %17749
  %17755 = add <16 x i16> %17746, %17740
  %17756 = add <16 x i16> %17755, %17752
  %17757 = shufflevector <16 x i16> %17754, <16 x i16> %17756, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17758 = udiv <32 x i16> %17757, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17759 = shufflevector <32 x i16> %17758, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17760 = zext i32 %.pre-phi3395 to i64
  %17761 = mul nsw i64 %294, %17760
  %17762 = add nsw i64 %296, %17761
  %17763 = getelementptr inbounds i16, i16* %blur_x841, i64 %17762
  %17764 = getelementptr inbounds i16, i16* %17763, i64 -32
  %17765 = bitcast i16* %17764 to <16 x i16>*
  store <16 x i16> %17759, <16 x i16>* %17765, align 2, !tbaa !399
  %17766 = shufflevector <32 x i16> %17758, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17767 = getelementptr inbounds i16, i16* %17763, i64 -16
  %17768 = bitcast i16* %17767 to <16 x i16>*
  store <16 x i16> %17766, <16 x i16>* %17768, align 2, !tbaa !399
  %17769 = zext i32 %.pre-phi3391 to i64
  %17770 = mul nsw i64 %17769, %318
  %17771 = add nsw i64 %17770, %291
  %17772 = getelementptr inbounds i16, i16* %blur_x841, i64 %17771
  %17773 = getelementptr inbounds i16, i16* %17772, i64 -32
  %17774 = bitcast i16* %17773 to <16 x i16>*
  %17775 = load <16 x i16>, <16 x i16>* %17774, align 2, !tbaa !399
  %17776 = getelementptr inbounds i16, i16* %17772, i64 -16
  %17777 = bitcast i16* %17776 to <16 x i16>*
  %17778 = load <16 x i16>, <16 x i16>* %17777, align 2, !tbaa !399
  %17779 = mul nsw i64 %17760, %318
  %17780 = add nsw i64 %17779, %291
  %17781 = getelementptr inbounds i16, i16* %blur_x841, i64 %17780
  %17782 = getelementptr inbounds i16, i16* %17781, i64 -32
  %17783 = bitcast i16* %17782 to <16 x i16>*
  %17784 = load <16 x i16>, <16 x i16>* %17783, align 2, !tbaa !399
  %17785 = getelementptr inbounds i16, i16* %17781, i64 -16
  %17786 = bitcast i16* %17785 to <16 x i16>*
  %17787 = load <16 x i16>, <16 x i16>* %17786, align 2, !tbaa !399
  %17788 = zext i32 %.pre-phi3387 to i64
  %17789 = mul nsw i64 %17788, %318
  %17790 = add nsw i64 %17789, %291
  %17791 = getelementptr inbounds i16, i16* %blur_x841, i64 %17790
  %17792 = getelementptr inbounds i16, i16* %17791, i64 -32
  %17793 = bitcast i16* %17792 to <16 x i16>*
  %17794 = load <16 x i16>, <16 x i16>* %17793, align 2, !tbaa !399
  %17795 = getelementptr inbounds i16, i16* %17791, i64 -16
  %17796 = bitcast i16* %17795 to <16 x i16>*
  %17797 = load <16 x i16>, <16 x i16>* %17796, align 2, !tbaa !399
  %17798 = add <16 x i16> %17784, %17775
  %17799 = add <16 x i16> %17798, %17794
  %17800 = add <16 x i16> %17787, %17778
  %17801 = add <16 x i16> %17800, %17797
  %17802 = shufflevector <16 x i16> %17799, <16 x i16> %17801, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17803 = udiv <32 x i16> %17802, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17804 = shufflevector <32 x i16> %17803, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17805 = sext i32 %a365 to i64
  %17806 = add nsw i64 %17805, 24
  %17807 = mul nsw i64 %17806, %319
  %17808 = add nsw i64 %321, %17807
  %17809 = getelementptr inbounds i16, i16* %258, i64 %17808
  %17810 = getelementptr inbounds i16, i16* %17809, i64 -32
  %17811 = bitcast i16* %17810 to <16 x i16>*
  store <16 x i16> %17804, <16 x i16>* %17811, align 2, !tbaa !401
  %17812 = shufflevector <32 x i16> %17803, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17813 = getelementptr inbounds i16, i16* %17809, i64 -16
  %17814 = bitcast i16* %17813 to <16 x i16>*
  store <16 x i16> %17812, <16 x i16>* %17814, align 2, !tbaa !401
  br label %after_bb1933

"for blur_y.s0.x.x.rebased1948":                  ; preds = %"for blur_y.s0.x.x.rebased1948.preheader", %"consume blur_x1956"
  %indvars.iv3290 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1948.preheader" ], [ %indvars.iv.next3291, %"consume blur_x1956" ]
  %17815 = add nsw i64 %indvars.iv3290, %298
  %17816 = icmp slt i64 %17815, 1
  %17817 = trunc i64 %17815 to i32
  %17818 = shl nsw i32 %17817, 5
  %17819 = icmp sgt i32 %194, %17818
  %17820 = or i1 %17816, %17819
  br i1 %17820, label %"produce blur_x1954", label %"for blur_y.s0.x.x.rebased1948.consume blur_x1956_crit_edge"

"for blur_y.s0.x.x.rebased1948.consume blur_x1956_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1948"
  %.pre3448 = shl nsw i64 %17815, 5
  br label %"consume blur_x1956"

"end for blur_y.s0.x.x.rebased1949":              ; preds = %"consume blur_x1956", %after_bb1933
  br i1 %299, label %"for blur_y.s0.x.x.rebased1964.preheader", label %"end for blur_y.s0.x.x.rebased1965", !prof !386

"for blur_y.s0.x.x.rebased1964.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1949"
  %17821 = sext i32 %t1650912 to i64
  %17822 = zext i32 %.pre-phi3391 to i64
  %17823 = mul nsw i64 %17822, %322
  %17824 = sub nsw i64 %17823, %293
  %17825 = zext i32 %.pre-phi3395 to i64
  %17826 = mul nsw i64 %17825, %322
  %17827 = sub nsw i64 %17826, %293
  %17828 = zext i32 %.pre-phi3387 to i64
  %17829 = mul nsw i64 %17828, %322
  %17830 = sub nsw i64 %17829, %293
  %17831 = sext i32 %a365 to i64
  %17832 = add nsw i64 %17831, 24
  %17833 = mul nsw i64 %17832, %319
  %17834 = add nsw i64 %17833, %323
  br label %"for blur_y.s0.x.x.rebased1964"

"produce blur_x1954":                             ; preds = %"for blur_y.s0.x.x.rebased1948"
  %t10561955 = add nsw i32 %466, %17818
  %17835 = sext i32 %t10561955 to i64
  %17836 = getelementptr inbounds i16, i16* %read_input784, i64 %17835
  %17837 = getelementptr inbounds i16, i16* %17836, i64 1
  %17838 = bitcast i16* %17837 to <16 x i16>*
  %17839 = load <16 x i16>, <16 x i16>* %17838, align 2, !tbaa !396
  %17840 = getelementptr inbounds i16, i16* %17836, i64 17
  %17841 = bitcast i16* %17840 to <16 x i16>*
  %17842 = load <16 x i16>, <16 x i16>* %17841, align 2, !tbaa !396
  %17843 = getelementptr inbounds i16, i16* %17836, i64 2
  %17844 = bitcast i16* %17843 to <16 x i16>*
  %17845 = load <16 x i16>, <16 x i16>* %17844, align 2, !tbaa !396
  %17846 = getelementptr inbounds i16, i16* %17836, i64 18
  %17847 = bitcast i16* %17846 to <16 x i16>*
  %17848 = load <16 x i16>, <16 x i16>* %17847, align 2, !tbaa !396
  %17849 = bitcast i16* %17836 to <16 x i16>*
  %17850 = load <16 x i16>, <16 x i16>* %17849, align 2, !tbaa !396
  %17851 = getelementptr inbounds i16, i16* %17836, i64 16
  %17852 = bitcast i16* %17851 to <16 x i16>*
  %17853 = load <16 x i16>, <16 x i16>* %17852, align 2, !tbaa !396
  %17854 = add <16 x i16> %17845, %17839
  %17855 = add <16 x i16> %17854, %17850
  %17856 = add <16 x i16> %17848, %17842
  %17857 = add <16 x i16> %17856, %17853
  %17858 = shufflevector <16 x i16> %17855, <16 x i16> %17857, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17859 = udiv <32 x i16> %17858, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17860 = shufflevector <32 x i16> %17859, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17861 = shl nsw i64 %17815, 5
  %17862 = add nsw i64 %17861, %17720
  %17863 = getelementptr inbounds i16, i16* %blur_x841, i64 %17862
  %17864 = bitcast i16* %17863 to <16 x i16>*
  store <16 x i16> %17860, <16 x i16>* %17864, align 2, !tbaa !399
  %17865 = shufflevector <32 x i16> %17859, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17866 = getelementptr inbounds i16, i16* %17863, i64 16
  %17867 = bitcast i16* %17866 to <16 x i16>*
  store <16 x i16> %17865, <16 x i16>* %17867, align 2, !tbaa !399
  br label %"consume blur_x1956"

"consume blur_x1956":                             ; preds = %"for blur_y.s0.x.x.rebased1948.consume blur_x1956_crit_edge", %"produce blur_x1954"
  %.pre-phi3449 = phi i64 [ %.pre3448, %"for blur_y.s0.x.x.rebased1948.consume blur_x1956_crit_edge" ], [ %17861, %"produce blur_x1954" ]
  %17868 = add nsw i64 %17723, %.pre-phi3449
  %17869 = getelementptr inbounds i16, i16* %blur_x841, i64 %17868
  %17870 = bitcast i16* %17869 to <16 x i16>*
  %17871 = load <16 x i16>, <16 x i16>* %17870, align 2, !tbaa !399
  %17872 = getelementptr inbounds i16, i16* %17869, i64 16
  %17873 = bitcast i16* %17872 to <16 x i16>*
  %17874 = load <16 x i16>, <16 x i16>* %17873, align 2, !tbaa !399
  %17875 = add nsw i64 %17726, %.pre-phi3449
  %17876 = getelementptr inbounds i16, i16* %blur_x841, i64 %17875
  %17877 = bitcast i16* %17876 to <16 x i16>*
  %17878 = load <16 x i16>, <16 x i16>* %17877, align 2, !tbaa !399
  %17879 = getelementptr inbounds i16, i16* %17876, i64 16
  %17880 = bitcast i16* %17879 to <16 x i16>*
  %17881 = load <16 x i16>, <16 x i16>* %17880, align 2, !tbaa !399
  %17882 = add nsw i64 %17729, %.pre-phi3449
  %17883 = getelementptr inbounds i16, i16* %blur_x841, i64 %17882
  %17884 = bitcast i16* %17883 to <16 x i16>*
  %17885 = load <16 x i16>, <16 x i16>* %17884, align 2, !tbaa !399
  %17886 = getelementptr inbounds i16, i16* %17883, i64 16
  %17887 = bitcast i16* %17886 to <16 x i16>*
  %17888 = load <16 x i16>, <16 x i16>* %17887, align 2, !tbaa !399
  %17889 = add <16 x i16> %17878, %17871
  %17890 = add <16 x i16> %17889, %17885
  %17891 = add <16 x i16> %17881, %17874
  %17892 = add <16 x i16> %17891, %17888
  %17893 = shufflevector <16 x i16> %17890, <16 x i16> %17892, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17894 = udiv <32 x i16> %17893, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17895 = shufflevector <32 x i16> %17894, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17896 = add nsw i64 %17733, %.pre-phi3449
  %17897 = getelementptr inbounds i16, i16* %258, i64 %17896
  %17898 = bitcast i16* %17897 to <16 x i16>*
  store <16 x i16> %17895, <16 x i16>* %17898, align 2, !tbaa !401
  %17899 = shufflevector <32 x i16> %17894, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17900 = getelementptr inbounds i16, i16* %17897, i64 16
  %17901 = bitcast i16* %17900 to <16 x i16>*
  store <16 x i16> %17899, <16 x i16>* %17901, align 2, !tbaa !401
  %indvars.iv.next3291 = add nuw nsw i64 %indvars.iv3290, 1
  %.not2463 = icmp eq i64 %indvars.iv.next3291, %515
  br i1 %.not2463, label %"end for blur_y.s0.x.x.rebased1949", label %"for blur_y.s0.x.x.rebased1948"

"for blur_y.s0.x.x.rebased1964":                  ; preds = %"for blur_y.s0.x.x.rebased1964.preheader", %"consume blur_x1975"
  %blur_y.s0.x.x.rebased1966 = phi i32 [ %17976, %"consume blur_x1975" ], [ 0, %"for blur_y.s0.x.x.rebased1964.preheader" ]
  %17902 = add nsw i32 %blur_y.s0.x.x.rebased1966, %t1582776
  %a4783 = shl nsw i32 %17902, 5
  %17903 = icmp sgt i32 %t1603, %a4783
  %blur_y.s0.x.v0.base.s1967 = select i1 %17903, i32 %a4783, i32 %t1603
  %17904 = icmp slt i32 %17902, 1
  %17905 = icmp sgt i32 %194, %a4783
  %17906 = or i1 %17904, %17905
  br i1 %17906, label %"produce blur_x1972", label %"consume blur_x1975"

"end for blur_y.s0.x.x.rebased1965":              ; preds = %"consume blur_x1975", %"end for blur_y.s0.x.x.rebased1949"
  br i1 %225, label %"produce blur_x1979", label %after_bb1976

"produce blur_x1972":                             ; preds = %"for blur_y.s0.x.x.rebased1964"
  %17907 = icmp slt i32 %blur_y.s0.x.v0.base.s1967, %194
  %blur_x.s0.x.v1.base.s1973 = select i1 %17907, i32 %blur_y.s0.x.v0.base.s1967, i32 %194
  %t10611974 = add nsw i32 %466, %blur_x.s0.x.v1.base.s1973
  %17908 = sext i32 %t10611974 to i64
  %17909 = getelementptr inbounds i16, i16* %read_input784, i64 %17908
  %17910 = getelementptr inbounds i16, i16* %17909, i64 1
  %17911 = bitcast i16* %17910 to <16 x i16>*
  %17912 = load <16 x i16>, <16 x i16>* %17911, align 2, !tbaa !396
  %17913 = getelementptr inbounds i16, i16* %17909, i64 17
  %17914 = bitcast i16* %17913 to <16 x i16>*
  %17915 = load <16 x i16>, <16 x i16>* %17914, align 2, !tbaa !396
  %17916 = getelementptr inbounds i16, i16* %17909, i64 2
  %17917 = bitcast i16* %17916 to <16 x i16>*
  %17918 = load <16 x i16>, <16 x i16>* %17917, align 2, !tbaa !396
  %17919 = getelementptr inbounds i16, i16* %17909, i64 18
  %17920 = bitcast i16* %17919 to <16 x i16>*
  %17921 = load <16 x i16>, <16 x i16>* %17920, align 2, !tbaa !396
  %17922 = bitcast i16* %17909 to <16 x i16>*
  %17923 = load <16 x i16>, <16 x i16>* %17922, align 2, !tbaa !396
  %17924 = getelementptr inbounds i16, i16* %17909, i64 16
  %17925 = bitcast i16* %17924 to <16 x i16>*
  %17926 = load <16 x i16>, <16 x i16>* %17925, align 2, !tbaa !396
  %17927 = add <16 x i16> %17918, %17912
  %17928 = add <16 x i16> %17927, %17923
  %17929 = add <16 x i16> %17921, %17915
  %17930 = add <16 x i16> %17929, %17926
  %17931 = shufflevector <16 x i16> %17928, <16 x i16> %17930, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17932 = udiv <32 x i16> %17931, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17933 = shufflevector <32 x i16> %17932, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17934 = sext i32 %blur_x.s0.x.v1.base.s1973 to i64
  %17935 = add nsw i64 %17934, %17821
  %17936 = getelementptr inbounds i16, i16* %blur_x841, i64 %17935
  %17937 = bitcast i16* %17936 to <16 x i16>*
  store <16 x i16> %17933, <16 x i16>* %17937, align 2, !tbaa !399
  %17938 = shufflevector <32 x i16> %17932, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17939 = getelementptr inbounds i16, i16* %17936, i64 16
  %17940 = bitcast i16* %17939 to <16 x i16>*
  store <16 x i16> %17938, <16 x i16>* %17940, align 2, !tbaa !399
  br label %"consume blur_x1975"

"consume blur_x1975":                             ; preds = %"for blur_y.s0.x.x.rebased1964", %"produce blur_x1972"
  %17941 = sext i32 %blur_y.s0.x.v0.base.s1967 to i64
  %17942 = add nsw i64 %17824, %17941
  %17943 = getelementptr inbounds i16, i16* %blur_x841, i64 %17942
  %17944 = bitcast i16* %17943 to <16 x i16>*
  %17945 = load <16 x i16>, <16 x i16>* %17944, align 2, !tbaa !399
  %17946 = getelementptr inbounds i16, i16* %17943, i64 16
  %17947 = bitcast i16* %17946 to <16 x i16>*
  %17948 = load <16 x i16>, <16 x i16>* %17947, align 2, !tbaa !399
  %17949 = add nsw i64 %17827, %17941
  %17950 = getelementptr inbounds i16, i16* %blur_x841, i64 %17949
  %17951 = bitcast i16* %17950 to <16 x i16>*
  %17952 = load <16 x i16>, <16 x i16>* %17951, align 2, !tbaa !399
  %17953 = getelementptr inbounds i16, i16* %17950, i64 16
  %17954 = bitcast i16* %17953 to <16 x i16>*
  %17955 = load <16 x i16>, <16 x i16>* %17954, align 2, !tbaa !399
  %17956 = add nsw i64 %17830, %17941
  %17957 = getelementptr inbounds i16, i16* %blur_x841, i64 %17956
  %17958 = bitcast i16* %17957 to <16 x i16>*
  %17959 = load <16 x i16>, <16 x i16>* %17958, align 2, !tbaa !399
  %17960 = getelementptr inbounds i16, i16* %17957, i64 16
  %17961 = bitcast i16* %17960 to <16 x i16>*
  %17962 = load <16 x i16>, <16 x i16>* %17961, align 2, !tbaa !399
  %17963 = add <16 x i16> %17952, %17945
  %17964 = add <16 x i16> %17963, %17959
  %17965 = add <16 x i16> %17955, %17948
  %17966 = add <16 x i16> %17965, %17962
  %17967 = shufflevector <16 x i16> %17964, <16 x i16> %17966, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17968 = udiv <32 x i16> %17967, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %17969 = shufflevector <32 x i16> %17968, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17970 = add nsw i64 %17834, %17941
  %17971 = getelementptr inbounds i16, i16* %258, i64 %17970
  %17972 = bitcast i16* %17971 to <16 x i16>*
  store <16 x i16> %17969, <16 x i16>* %17972, align 2, !tbaa !401
  %17973 = shufflevector <32 x i16> %17968, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17974 = getelementptr inbounds i16, i16* %17971, i64 16
  %17975 = bitcast i16* %17974 to <16 x i16>*
  store <16 x i16> %17973, <16 x i16>* %17975, align 2, !tbaa !401
  %17976 = add nuw nsw i32 %blur_y.s0.x.x.rebased1966, 1
  %.not2462 = icmp eq i32 %17976, %t1639860
  br i1 %.not2462, label %"end for blur_y.s0.x.x.rebased1965", label %"for blur_y.s0.x.x.rebased1964"

after_bb1976:                                     ; preds = %"end for blur_y.s0.x.x.rebased1965", %"produce blur_x1979"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1991.preheader", label %"end for blur_y.s0.x.x.rebased1992", !prof !386

"for blur_y.s0.x.x.rebased1991.preheader":        ; preds = %after_bb1976
  %17977 = sext i32 %t1666955 to i64
  %17978 = zext i32 %.pre-phi3395 to i64
  %17979 = mul nsw i64 %17978, %322
  %17980 = sub nsw i64 %17979, %293
  %17981 = zext i32 %.pre-phi3401 to i64
  %17982 = mul nsw i64 %17981, %322
  %17983 = sub nsw i64 %17982, %293
  %17984 = zext i32 %.pre-phi3391 to i64
  %17985 = mul nsw i64 %17984, %322
  %17986 = sub nsw i64 %17985, %293
  %17987 = sext i32 %a365 to i64
  %17988 = add nsw i64 %17987, 25
  %17989 = mul nsw i64 %17988, %319
  %17990 = add nsw i64 %17989, %323
  br label %"for blur_y.s0.x.x.rebased1991"

"produce blur_x1979":                             ; preds = %"end for blur_y.s0.x.x.rebased1965"
  %17991 = getelementptr inbounds i16, i16* %read_input784, i64 %470
  %17992 = getelementptr inbounds i16, i16* %17991, i64 -31
  %17993 = bitcast i16* %17992 to <16 x i16>*
  %17994 = load <16 x i16>, <16 x i16>* %17993, align 2, !tbaa !396
  %17995 = getelementptr inbounds i16, i16* %17991, i64 -15
  %17996 = bitcast i16* %17995 to <16 x i16>*
  %17997 = load <16 x i16>, <16 x i16>* %17996, align 2, !tbaa !396
  %17998 = getelementptr inbounds i16, i16* %17991, i64 -30
  %17999 = bitcast i16* %17998 to <16 x i16>*
  %18000 = load <16 x i16>, <16 x i16>* %17999, align 2, !tbaa !396
  %18001 = getelementptr inbounds i16, i16* %17991, i64 -14
  %18002 = bitcast i16* %18001 to <16 x i16>*
  %18003 = load <16 x i16>, <16 x i16>* %18002, align 2, !tbaa !396
  %18004 = getelementptr inbounds i16, i16* %17991, i64 -32
  %18005 = bitcast i16* %18004 to <16 x i16>*
  %18006 = load <16 x i16>, <16 x i16>* %18005, align 2, !tbaa !396
  %18007 = getelementptr inbounds i16, i16* %17991, i64 -16
  %18008 = bitcast i16* %18007 to <16 x i16>*
  %18009 = load <16 x i16>, <16 x i16>* %18008, align 2, !tbaa !396
  %18010 = add <16 x i16> %18000, %17994
  %18011 = add <16 x i16> %18010, %18006
  %18012 = add <16 x i16> %18003, %17997
  %18013 = add <16 x i16> %18012, %18009
  %18014 = shufflevector <16 x i16> %18011, <16 x i16> %18013, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18015 = udiv <32 x i16> %18014, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18016 = shufflevector <32 x i16> %18015, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18017 = zext i32 %.pre-phi3401 to i64
  %18018 = mul nsw i64 %294, %18017
  %18019 = add nsw i64 %296, %18018
  %18020 = getelementptr inbounds i16, i16* %blur_x841, i64 %18019
  %18021 = getelementptr inbounds i16, i16* %18020, i64 -32
  %18022 = bitcast i16* %18021 to <16 x i16>*
  store <16 x i16> %18016, <16 x i16>* %18022, align 2, !tbaa !399
  %18023 = shufflevector <32 x i16> %18015, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18024 = getelementptr inbounds i16, i16* %18020, i64 -16
  %18025 = bitcast i16* %18024 to <16 x i16>*
  store <16 x i16> %18023, <16 x i16>* %18025, align 2, !tbaa !399
  %18026 = zext i32 %.pre-phi3395 to i64
  %18027 = mul nsw i64 %18026, %318
  %18028 = add nsw i64 %18027, %291
  %18029 = getelementptr inbounds i16, i16* %blur_x841, i64 %18028
  %18030 = getelementptr inbounds i16, i16* %18029, i64 -32
  %18031 = bitcast i16* %18030 to <16 x i16>*
  %18032 = load <16 x i16>, <16 x i16>* %18031, align 2, !tbaa !399
  %18033 = getelementptr inbounds i16, i16* %18029, i64 -16
  %18034 = bitcast i16* %18033 to <16 x i16>*
  %18035 = load <16 x i16>, <16 x i16>* %18034, align 2, !tbaa !399
  %18036 = mul nsw i64 %18017, %318
  %18037 = add nsw i64 %18036, %291
  %18038 = getelementptr inbounds i16, i16* %blur_x841, i64 %18037
  %18039 = getelementptr inbounds i16, i16* %18038, i64 -32
  %18040 = bitcast i16* %18039 to <16 x i16>*
  %18041 = load <16 x i16>, <16 x i16>* %18040, align 2, !tbaa !399
  %18042 = getelementptr inbounds i16, i16* %18038, i64 -16
  %18043 = bitcast i16* %18042 to <16 x i16>*
  %18044 = load <16 x i16>, <16 x i16>* %18043, align 2, !tbaa !399
  %18045 = zext i32 %.pre-phi3391 to i64
  %18046 = mul nsw i64 %18045, %318
  %18047 = add nsw i64 %18046, %291
  %18048 = getelementptr inbounds i16, i16* %blur_x841, i64 %18047
  %18049 = getelementptr inbounds i16, i16* %18048, i64 -32
  %18050 = bitcast i16* %18049 to <16 x i16>*
  %18051 = load <16 x i16>, <16 x i16>* %18050, align 2, !tbaa !399
  %18052 = getelementptr inbounds i16, i16* %18048, i64 -16
  %18053 = bitcast i16* %18052 to <16 x i16>*
  %18054 = load <16 x i16>, <16 x i16>* %18053, align 2, !tbaa !399
  %18055 = add <16 x i16> %18041, %18032
  %18056 = add <16 x i16> %18055, %18051
  %18057 = add <16 x i16> %18044, %18035
  %18058 = add <16 x i16> %18057, %18054
  %18059 = shufflevector <16 x i16> %18056, <16 x i16> %18058, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18060 = udiv <32 x i16> %18059, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18061 = shufflevector <32 x i16> %18060, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18062 = sext i32 %a365 to i64
  %18063 = add nsw i64 %18062, 25
  %18064 = mul nsw i64 %18063, %319
  %18065 = add nsw i64 %321, %18064
  %18066 = getelementptr inbounds i16, i16* %258, i64 %18065
  %18067 = getelementptr inbounds i16, i16* %18066, i64 -32
  %18068 = bitcast i16* %18067 to <16 x i16>*
  store <16 x i16> %18061, <16 x i16>* %18068, align 2, !tbaa !401
  %18069 = shufflevector <32 x i16> %18060, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18070 = getelementptr inbounds i16, i16* %18066, i64 -16
  %18071 = bitcast i16* %18070 to <16 x i16>*
  store <16 x i16> %18069, <16 x i16>* %18071, align 2, !tbaa !401
  br label %after_bb1976

"for blur_y.s0.x.x.rebased1991":                  ; preds = %"for blur_y.s0.x.x.rebased1991.preheader", %"consume blur_x1999"
  %indvars.iv3292 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1991.preheader" ], [ %indvars.iv.next3293, %"consume blur_x1999" ]
  %18072 = add nsw i64 %indvars.iv3292, %298
  %18073 = icmp slt i64 %18072, 1
  %18074 = trunc i64 %18072 to i32
  %18075 = shl nsw i32 %18074, 5
  %18076 = icmp sgt i32 %194, %18075
  %18077 = or i1 %18073, %18076
  br i1 %18077, label %"produce blur_x1997", label %"for blur_y.s0.x.x.rebased1991.consume blur_x1999_crit_edge"

"for blur_y.s0.x.x.rebased1991.consume blur_x1999_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1991"
  %.pre3450 = shl nsw i64 %18072, 5
  br label %"consume blur_x1999"

"end for blur_y.s0.x.x.rebased1992":              ; preds = %"consume blur_x1999", %after_bb1976
  br i1 %299, label %"for blur_y.s0.x.x.rebased2007.preheader", label %"end for blur_y.s0.x.x.rebased2008", !prof !386

"for blur_y.s0.x.x.rebased2007.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1992"
  %18078 = sext i32 %t1666955 to i64
  %18079 = zext i32 %.pre-phi3395 to i64
  %18080 = mul nsw i64 %18079, %322
  %18081 = sub nsw i64 %18080, %293
  %18082 = zext i32 %.pre-phi3401 to i64
  %18083 = mul nsw i64 %18082, %322
  %18084 = sub nsw i64 %18083, %293
  %18085 = zext i32 %.pre-phi3391 to i64
  %18086 = mul nsw i64 %18085, %322
  %18087 = sub nsw i64 %18086, %293
  %18088 = sext i32 %a365 to i64
  %18089 = add nsw i64 %18088, 25
  %18090 = mul nsw i64 %18089, %319
  %18091 = add nsw i64 %18090, %323
  br label %"for blur_y.s0.x.x.rebased2007"

"produce blur_x1997":                             ; preds = %"for blur_y.s0.x.x.rebased1991"
  %t10721998 = add nsw i32 %472, %18075
  %18092 = sext i32 %t10721998 to i64
  %18093 = getelementptr inbounds i16, i16* %read_input784, i64 %18092
  %18094 = getelementptr inbounds i16, i16* %18093, i64 1
  %18095 = bitcast i16* %18094 to <16 x i16>*
  %18096 = load <16 x i16>, <16 x i16>* %18095, align 2, !tbaa !396
  %18097 = getelementptr inbounds i16, i16* %18093, i64 17
  %18098 = bitcast i16* %18097 to <16 x i16>*
  %18099 = load <16 x i16>, <16 x i16>* %18098, align 2, !tbaa !396
  %18100 = getelementptr inbounds i16, i16* %18093, i64 2
  %18101 = bitcast i16* %18100 to <16 x i16>*
  %18102 = load <16 x i16>, <16 x i16>* %18101, align 2, !tbaa !396
  %18103 = getelementptr inbounds i16, i16* %18093, i64 18
  %18104 = bitcast i16* %18103 to <16 x i16>*
  %18105 = load <16 x i16>, <16 x i16>* %18104, align 2, !tbaa !396
  %18106 = bitcast i16* %18093 to <16 x i16>*
  %18107 = load <16 x i16>, <16 x i16>* %18106, align 2, !tbaa !396
  %18108 = getelementptr inbounds i16, i16* %18093, i64 16
  %18109 = bitcast i16* %18108 to <16 x i16>*
  %18110 = load <16 x i16>, <16 x i16>* %18109, align 2, !tbaa !396
  %18111 = add <16 x i16> %18102, %18096
  %18112 = add <16 x i16> %18111, %18107
  %18113 = add <16 x i16> %18105, %18099
  %18114 = add <16 x i16> %18113, %18110
  %18115 = shufflevector <16 x i16> %18112, <16 x i16> %18114, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18116 = udiv <32 x i16> %18115, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18117 = shufflevector <32 x i16> %18116, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18118 = shl nsw i64 %18072, 5
  %18119 = add nsw i64 %18118, %17977
  %18120 = getelementptr inbounds i16, i16* %blur_x841, i64 %18119
  %18121 = bitcast i16* %18120 to <16 x i16>*
  store <16 x i16> %18117, <16 x i16>* %18121, align 2, !tbaa !399
  %18122 = shufflevector <32 x i16> %18116, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18123 = getelementptr inbounds i16, i16* %18120, i64 16
  %18124 = bitcast i16* %18123 to <16 x i16>*
  store <16 x i16> %18122, <16 x i16>* %18124, align 2, !tbaa !399
  br label %"consume blur_x1999"

"consume blur_x1999":                             ; preds = %"for blur_y.s0.x.x.rebased1991.consume blur_x1999_crit_edge", %"produce blur_x1997"
  %.pre-phi3451 = phi i64 [ %.pre3450, %"for blur_y.s0.x.x.rebased1991.consume blur_x1999_crit_edge" ], [ %18118, %"produce blur_x1997" ]
  %18125 = add nsw i64 %17980, %.pre-phi3451
  %18126 = getelementptr inbounds i16, i16* %blur_x841, i64 %18125
  %18127 = bitcast i16* %18126 to <16 x i16>*
  %18128 = load <16 x i16>, <16 x i16>* %18127, align 2, !tbaa !399
  %18129 = getelementptr inbounds i16, i16* %18126, i64 16
  %18130 = bitcast i16* %18129 to <16 x i16>*
  %18131 = load <16 x i16>, <16 x i16>* %18130, align 2, !tbaa !399
  %18132 = add nsw i64 %17983, %.pre-phi3451
  %18133 = getelementptr inbounds i16, i16* %blur_x841, i64 %18132
  %18134 = bitcast i16* %18133 to <16 x i16>*
  %18135 = load <16 x i16>, <16 x i16>* %18134, align 2, !tbaa !399
  %18136 = getelementptr inbounds i16, i16* %18133, i64 16
  %18137 = bitcast i16* %18136 to <16 x i16>*
  %18138 = load <16 x i16>, <16 x i16>* %18137, align 2, !tbaa !399
  %18139 = add nsw i64 %17986, %.pre-phi3451
  %18140 = getelementptr inbounds i16, i16* %blur_x841, i64 %18139
  %18141 = bitcast i16* %18140 to <16 x i16>*
  %18142 = load <16 x i16>, <16 x i16>* %18141, align 2, !tbaa !399
  %18143 = getelementptr inbounds i16, i16* %18140, i64 16
  %18144 = bitcast i16* %18143 to <16 x i16>*
  %18145 = load <16 x i16>, <16 x i16>* %18144, align 2, !tbaa !399
  %18146 = add <16 x i16> %18135, %18128
  %18147 = add <16 x i16> %18146, %18142
  %18148 = add <16 x i16> %18138, %18131
  %18149 = add <16 x i16> %18148, %18145
  %18150 = shufflevector <16 x i16> %18147, <16 x i16> %18149, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18151 = udiv <32 x i16> %18150, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18152 = shufflevector <32 x i16> %18151, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18153 = add nsw i64 %17990, %.pre-phi3451
  %18154 = getelementptr inbounds i16, i16* %258, i64 %18153
  %18155 = bitcast i16* %18154 to <16 x i16>*
  store <16 x i16> %18152, <16 x i16>* %18155, align 2, !tbaa !401
  %18156 = shufflevector <32 x i16> %18151, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18157 = getelementptr inbounds i16, i16* %18154, i64 16
  %18158 = bitcast i16* %18157 to <16 x i16>*
  store <16 x i16> %18156, <16 x i16>* %18158, align 2, !tbaa !401
  %indvars.iv.next3293 = add nuw nsw i64 %indvars.iv3292, 1
  %.not2459 = icmp eq i64 %indvars.iv.next3293, %515
  br i1 %.not2459, label %"end for blur_y.s0.x.x.rebased1992", label %"for blur_y.s0.x.x.rebased1991"

"for blur_y.s0.x.x.rebased2007":                  ; preds = %"for blur_y.s0.x.x.rebased2007.preheader", %"consume blur_x2018"
  %blur_y.s0.x.x.rebased2009 = phi i32 [ %18233, %"consume blur_x2018" ], [ 0, %"for blur_y.s0.x.x.rebased2007.preheader" ]
  %18159 = add nsw i32 %blur_y.s0.x.x.rebased2009, %t1582776
  %a4940 = shl nsw i32 %18159, 5
  %18160 = icmp sgt i32 %t1603, %a4940
  %blur_y.s0.x.v0.base.s2010 = select i1 %18160, i32 %a4940, i32 %t1603
  %18161 = icmp slt i32 %18159, 1
  %18162 = icmp sgt i32 %194, %a4940
  %18163 = or i1 %18161, %18162
  br i1 %18163, label %"produce blur_x2015", label %"consume blur_x2018"

"end for blur_y.s0.x.x.rebased2008":              ; preds = %"consume blur_x2018", %"end for blur_y.s0.x.x.rebased1992"
  br i1 %225, label %"produce blur_x2022", label %after_bb2019

"produce blur_x2015":                             ; preds = %"for blur_y.s0.x.x.rebased2007"
  %18164 = icmp slt i32 %blur_y.s0.x.v0.base.s2010, %194
  %blur_x.s0.x.v1.base.s2016 = select i1 %18164, i32 %blur_y.s0.x.v0.base.s2010, i32 %194
  %t10772017 = add nsw i32 %472, %blur_x.s0.x.v1.base.s2016
  %18165 = sext i32 %t10772017 to i64
  %18166 = getelementptr inbounds i16, i16* %read_input784, i64 %18165
  %18167 = getelementptr inbounds i16, i16* %18166, i64 1
  %18168 = bitcast i16* %18167 to <16 x i16>*
  %18169 = load <16 x i16>, <16 x i16>* %18168, align 2, !tbaa !396
  %18170 = getelementptr inbounds i16, i16* %18166, i64 17
  %18171 = bitcast i16* %18170 to <16 x i16>*
  %18172 = load <16 x i16>, <16 x i16>* %18171, align 2, !tbaa !396
  %18173 = getelementptr inbounds i16, i16* %18166, i64 2
  %18174 = bitcast i16* %18173 to <16 x i16>*
  %18175 = load <16 x i16>, <16 x i16>* %18174, align 2, !tbaa !396
  %18176 = getelementptr inbounds i16, i16* %18166, i64 18
  %18177 = bitcast i16* %18176 to <16 x i16>*
  %18178 = load <16 x i16>, <16 x i16>* %18177, align 2, !tbaa !396
  %18179 = bitcast i16* %18166 to <16 x i16>*
  %18180 = load <16 x i16>, <16 x i16>* %18179, align 2, !tbaa !396
  %18181 = getelementptr inbounds i16, i16* %18166, i64 16
  %18182 = bitcast i16* %18181 to <16 x i16>*
  %18183 = load <16 x i16>, <16 x i16>* %18182, align 2, !tbaa !396
  %18184 = add <16 x i16> %18175, %18169
  %18185 = add <16 x i16> %18184, %18180
  %18186 = add <16 x i16> %18178, %18172
  %18187 = add <16 x i16> %18186, %18183
  %18188 = shufflevector <16 x i16> %18185, <16 x i16> %18187, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18189 = udiv <32 x i16> %18188, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18190 = shufflevector <32 x i16> %18189, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18191 = sext i32 %blur_x.s0.x.v1.base.s2016 to i64
  %18192 = add nsw i64 %18191, %18078
  %18193 = getelementptr inbounds i16, i16* %blur_x841, i64 %18192
  %18194 = bitcast i16* %18193 to <16 x i16>*
  store <16 x i16> %18190, <16 x i16>* %18194, align 2, !tbaa !399
  %18195 = shufflevector <32 x i16> %18189, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18196 = getelementptr inbounds i16, i16* %18193, i64 16
  %18197 = bitcast i16* %18196 to <16 x i16>*
  store <16 x i16> %18195, <16 x i16>* %18197, align 2, !tbaa !399
  br label %"consume blur_x2018"

"consume blur_x2018":                             ; preds = %"for blur_y.s0.x.x.rebased2007", %"produce blur_x2015"
  %18198 = sext i32 %blur_y.s0.x.v0.base.s2010 to i64
  %18199 = add nsw i64 %18081, %18198
  %18200 = getelementptr inbounds i16, i16* %blur_x841, i64 %18199
  %18201 = bitcast i16* %18200 to <16 x i16>*
  %18202 = load <16 x i16>, <16 x i16>* %18201, align 2, !tbaa !399
  %18203 = getelementptr inbounds i16, i16* %18200, i64 16
  %18204 = bitcast i16* %18203 to <16 x i16>*
  %18205 = load <16 x i16>, <16 x i16>* %18204, align 2, !tbaa !399
  %18206 = add nsw i64 %18084, %18198
  %18207 = getelementptr inbounds i16, i16* %blur_x841, i64 %18206
  %18208 = bitcast i16* %18207 to <16 x i16>*
  %18209 = load <16 x i16>, <16 x i16>* %18208, align 2, !tbaa !399
  %18210 = getelementptr inbounds i16, i16* %18207, i64 16
  %18211 = bitcast i16* %18210 to <16 x i16>*
  %18212 = load <16 x i16>, <16 x i16>* %18211, align 2, !tbaa !399
  %18213 = add nsw i64 %18087, %18198
  %18214 = getelementptr inbounds i16, i16* %blur_x841, i64 %18213
  %18215 = bitcast i16* %18214 to <16 x i16>*
  %18216 = load <16 x i16>, <16 x i16>* %18215, align 2, !tbaa !399
  %18217 = getelementptr inbounds i16, i16* %18214, i64 16
  %18218 = bitcast i16* %18217 to <16 x i16>*
  %18219 = load <16 x i16>, <16 x i16>* %18218, align 2, !tbaa !399
  %18220 = add <16 x i16> %18209, %18202
  %18221 = add <16 x i16> %18220, %18216
  %18222 = add <16 x i16> %18212, %18205
  %18223 = add <16 x i16> %18222, %18219
  %18224 = shufflevector <16 x i16> %18221, <16 x i16> %18223, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18225 = udiv <32 x i16> %18224, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18226 = shufflevector <32 x i16> %18225, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18227 = add nsw i64 %18091, %18198
  %18228 = getelementptr inbounds i16, i16* %258, i64 %18227
  %18229 = bitcast i16* %18228 to <16 x i16>*
  store <16 x i16> %18226, <16 x i16>* %18229, align 2, !tbaa !401
  %18230 = shufflevector <32 x i16> %18225, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18231 = getelementptr inbounds i16, i16* %18228, i64 16
  %18232 = bitcast i16* %18231 to <16 x i16>*
  store <16 x i16> %18230, <16 x i16>* %18232, align 2, !tbaa !401
  %18233 = add nuw nsw i32 %blur_y.s0.x.x.rebased2009, 1
  %.not2458 = icmp eq i32 %18233, %t1639860
  br i1 %.not2458, label %"end for blur_y.s0.x.x.rebased2008", label %"for blur_y.s0.x.x.rebased2007"

after_bb2019:                                     ; preds = %"end for blur_y.s0.x.x.rebased2008", %"produce blur_x2022"
  br i1 %297, label %"for blur_y.s0.x.x.rebased2034.preheader", label %"end for blur_y.s0.x.x.rebased2035", !prof !386

"for blur_y.s0.x.x.rebased2034.preheader":        ; preds = %after_bb2019
  %18234 = sext i32 %t1638848 to i64
  %18235 = zext i32 %.pre-phi3401 to i64
  %18236 = mul nsw i64 %18235, %322
  %18237 = sub nsw i64 %18236, %293
  %18238 = zext i32 %.pre-phi3387 to i64
  %18239 = mul nsw i64 %18238, %322
  %18240 = sub nsw i64 %18239, %293
  %18241 = zext i32 %.pre-phi3395 to i64
  %18242 = mul nsw i64 %18241, %322
  %18243 = sub nsw i64 %18242, %293
  %18244 = sext i32 %a365 to i64
  %18245 = add nsw i64 %18244, 26
  %18246 = mul nsw i64 %18245, %319
  %18247 = add nsw i64 %18246, %323
  br label %"for blur_y.s0.x.x.rebased2034"

"produce blur_x2022":                             ; preds = %"end for blur_y.s0.x.x.rebased2008"
  %18248 = getelementptr inbounds i16, i16* %read_input784, i64 %476
  %18249 = getelementptr inbounds i16, i16* %18248, i64 -31
  %18250 = bitcast i16* %18249 to <16 x i16>*
  %18251 = load <16 x i16>, <16 x i16>* %18250, align 2, !tbaa !396
  %18252 = getelementptr inbounds i16, i16* %18248, i64 -15
  %18253 = bitcast i16* %18252 to <16 x i16>*
  %18254 = load <16 x i16>, <16 x i16>* %18253, align 2, !tbaa !396
  %18255 = getelementptr inbounds i16, i16* %18248, i64 -30
  %18256 = bitcast i16* %18255 to <16 x i16>*
  %18257 = load <16 x i16>, <16 x i16>* %18256, align 2, !tbaa !396
  %18258 = getelementptr inbounds i16, i16* %18248, i64 -14
  %18259 = bitcast i16* %18258 to <16 x i16>*
  %18260 = load <16 x i16>, <16 x i16>* %18259, align 2, !tbaa !396
  %18261 = getelementptr inbounds i16, i16* %18248, i64 -32
  %18262 = bitcast i16* %18261 to <16 x i16>*
  %18263 = load <16 x i16>, <16 x i16>* %18262, align 2, !tbaa !396
  %18264 = getelementptr inbounds i16, i16* %18248, i64 -16
  %18265 = bitcast i16* %18264 to <16 x i16>*
  %18266 = load <16 x i16>, <16 x i16>* %18265, align 2, !tbaa !396
  %18267 = add <16 x i16> %18257, %18251
  %18268 = add <16 x i16> %18267, %18263
  %18269 = add <16 x i16> %18260, %18254
  %18270 = add <16 x i16> %18269, %18266
  %18271 = shufflevector <16 x i16> %18268, <16 x i16> %18270, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18272 = udiv <32 x i16> %18271, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18273 = shufflevector <32 x i16> %18272, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18274 = zext i32 %.pre-phi3387 to i64
  %18275 = mul nsw i64 %294, %18274
  %18276 = add nsw i64 %296, %18275
  %18277 = getelementptr inbounds i16, i16* %blur_x841, i64 %18276
  %18278 = getelementptr inbounds i16, i16* %18277, i64 -32
  %18279 = bitcast i16* %18278 to <16 x i16>*
  store <16 x i16> %18273, <16 x i16>* %18279, align 2, !tbaa !399
  %18280 = shufflevector <32 x i16> %18272, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18281 = getelementptr inbounds i16, i16* %18277, i64 -16
  %18282 = bitcast i16* %18281 to <16 x i16>*
  store <16 x i16> %18280, <16 x i16>* %18282, align 2, !tbaa !399
  %18283 = zext i32 %.pre-phi3401 to i64
  %18284 = mul nsw i64 %18283, %318
  %18285 = add nsw i64 %18284, %291
  %18286 = getelementptr inbounds i16, i16* %blur_x841, i64 %18285
  %18287 = getelementptr inbounds i16, i16* %18286, i64 -32
  %18288 = bitcast i16* %18287 to <16 x i16>*
  %18289 = load <16 x i16>, <16 x i16>* %18288, align 2, !tbaa !399
  %18290 = getelementptr inbounds i16, i16* %18286, i64 -16
  %18291 = bitcast i16* %18290 to <16 x i16>*
  %18292 = load <16 x i16>, <16 x i16>* %18291, align 2, !tbaa !399
  %18293 = mul nsw i64 %18274, %318
  %18294 = add nsw i64 %18293, %291
  %18295 = getelementptr inbounds i16, i16* %blur_x841, i64 %18294
  %18296 = getelementptr inbounds i16, i16* %18295, i64 -32
  %18297 = bitcast i16* %18296 to <16 x i16>*
  %18298 = load <16 x i16>, <16 x i16>* %18297, align 2, !tbaa !399
  %18299 = getelementptr inbounds i16, i16* %18295, i64 -16
  %18300 = bitcast i16* %18299 to <16 x i16>*
  %18301 = load <16 x i16>, <16 x i16>* %18300, align 2, !tbaa !399
  %18302 = zext i32 %.pre-phi3395 to i64
  %18303 = mul nsw i64 %18302, %318
  %18304 = add nsw i64 %18303, %291
  %18305 = getelementptr inbounds i16, i16* %blur_x841, i64 %18304
  %18306 = getelementptr inbounds i16, i16* %18305, i64 -32
  %18307 = bitcast i16* %18306 to <16 x i16>*
  %18308 = load <16 x i16>, <16 x i16>* %18307, align 2, !tbaa !399
  %18309 = getelementptr inbounds i16, i16* %18305, i64 -16
  %18310 = bitcast i16* %18309 to <16 x i16>*
  %18311 = load <16 x i16>, <16 x i16>* %18310, align 2, !tbaa !399
  %18312 = add <16 x i16> %18298, %18289
  %18313 = add <16 x i16> %18312, %18308
  %18314 = add <16 x i16> %18301, %18292
  %18315 = add <16 x i16> %18314, %18311
  %18316 = shufflevector <16 x i16> %18313, <16 x i16> %18315, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18317 = udiv <32 x i16> %18316, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18318 = shufflevector <32 x i16> %18317, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18319 = sext i32 %a365 to i64
  %18320 = add nsw i64 %18319, 26
  %18321 = mul nsw i64 %18320, %319
  %18322 = add nsw i64 %321, %18321
  %18323 = getelementptr inbounds i16, i16* %258, i64 %18322
  %18324 = getelementptr inbounds i16, i16* %18323, i64 -32
  %18325 = bitcast i16* %18324 to <16 x i16>*
  store <16 x i16> %18318, <16 x i16>* %18325, align 2, !tbaa !401
  %18326 = shufflevector <32 x i16> %18317, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18327 = getelementptr inbounds i16, i16* %18323, i64 -16
  %18328 = bitcast i16* %18327 to <16 x i16>*
  store <16 x i16> %18326, <16 x i16>* %18328, align 2, !tbaa !401
  br label %after_bb2019

"for blur_y.s0.x.x.rebased2034":                  ; preds = %"for blur_y.s0.x.x.rebased2034.preheader", %"consume blur_x2042"
  %indvars.iv3294 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2034.preheader" ], [ %indvars.iv.next3295, %"consume blur_x2042" ]
  %18329 = add nsw i64 %indvars.iv3294, %298
  %18330 = icmp slt i64 %18329, 1
  %18331 = trunc i64 %18329 to i32
  %18332 = shl nsw i32 %18331, 5
  %18333 = icmp sgt i32 %194, %18332
  %18334 = or i1 %18330, %18333
  br i1 %18334, label %"produce blur_x2040", label %"for blur_y.s0.x.x.rebased2034.consume blur_x2042_crit_edge"

"for blur_y.s0.x.x.rebased2034.consume blur_x2042_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2034"
  %.pre3452 = shl nsw i64 %18329, 5
  br label %"consume blur_x2042"

"end for blur_y.s0.x.x.rebased2035":              ; preds = %"consume blur_x2042", %after_bb2019
  br i1 %299, label %"for blur_y.s0.x.x.rebased2050.preheader", label %"end for blur_y.s0.x.x.rebased2051", !prof !386

"for blur_y.s0.x.x.rebased2050.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2035"
  %18335 = sext i32 %t1638848 to i64
  %18336 = zext i32 %.pre-phi3401 to i64
  %18337 = mul nsw i64 %18336, %322
  %18338 = sub nsw i64 %18337, %293
  %18339 = zext i32 %.pre-phi3387 to i64
  %18340 = mul nsw i64 %18339, %322
  %18341 = sub nsw i64 %18340, %293
  %18342 = zext i32 %.pre-phi3395 to i64
  %18343 = mul nsw i64 %18342, %322
  %18344 = sub nsw i64 %18343, %293
  %18345 = sext i32 %a365 to i64
  %18346 = add nsw i64 %18345, 26
  %18347 = mul nsw i64 %18346, %319
  %18348 = add nsw i64 %18347, %323
  br label %"for blur_y.s0.x.x.rebased2050"

"produce blur_x2040":                             ; preds = %"for blur_y.s0.x.x.rebased2034"
  %t10882041 = add nsw i32 %478, %18332
  %18349 = sext i32 %t10882041 to i64
  %18350 = getelementptr inbounds i16, i16* %read_input784, i64 %18349
  %18351 = getelementptr inbounds i16, i16* %18350, i64 1
  %18352 = bitcast i16* %18351 to <16 x i16>*
  %18353 = load <16 x i16>, <16 x i16>* %18352, align 2, !tbaa !396
  %18354 = getelementptr inbounds i16, i16* %18350, i64 17
  %18355 = bitcast i16* %18354 to <16 x i16>*
  %18356 = load <16 x i16>, <16 x i16>* %18355, align 2, !tbaa !396
  %18357 = getelementptr inbounds i16, i16* %18350, i64 2
  %18358 = bitcast i16* %18357 to <16 x i16>*
  %18359 = load <16 x i16>, <16 x i16>* %18358, align 2, !tbaa !396
  %18360 = getelementptr inbounds i16, i16* %18350, i64 18
  %18361 = bitcast i16* %18360 to <16 x i16>*
  %18362 = load <16 x i16>, <16 x i16>* %18361, align 2, !tbaa !396
  %18363 = bitcast i16* %18350 to <16 x i16>*
  %18364 = load <16 x i16>, <16 x i16>* %18363, align 2, !tbaa !396
  %18365 = getelementptr inbounds i16, i16* %18350, i64 16
  %18366 = bitcast i16* %18365 to <16 x i16>*
  %18367 = load <16 x i16>, <16 x i16>* %18366, align 2, !tbaa !396
  %18368 = add <16 x i16> %18359, %18353
  %18369 = add <16 x i16> %18368, %18364
  %18370 = add <16 x i16> %18362, %18356
  %18371 = add <16 x i16> %18370, %18367
  %18372 = shufflevector <16 x i16> %18369, <16 x i16> %18371, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18373 = udiv <32 x i16> %18372, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18374 = shufflevector <32 x i16> %18373, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18375 = shl nsw i64 %18329, 5
  %18376 = add nsw i64 %18375, %18234
  %18377 = getelementptr inbounds i16, i16* %blur_x841, i64 %18376
  %18378 = bitcast i16* %18377 to <16 x i16>*
  store <16 x i16> %18374, <16 x i16>* %18378, align 2, !tbaa !399
  %18379 = shufflevector <32 x i16> %18373, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18380 = getelementptr inbounds i16, i16* %18377, i64 16
  %18381 = bitcast i16* %18380 to <16 x i16>*
  store <16 x i16> %18379, <16 x i16>* %18381, align 2, !tbaa !399
  br label %"consume blur_x2042"

"consume blur_x2042":                             ; preds = %"for blur_y.s0.x.x.rebased2034.consume blur_x2042_crit_edge", %"produce blur_x2040"
  %.pre-phi3453 = phi i64 [ %.pre3452, %"for blur_y.s0.x.x.rebased2034.consume blur_x2042_crit_edge" ], [ %18375, %"produce blur_x2040" ]
  %18382 = add nsw i64 %18237, %.pre-phi3453
  %18383 = getelementptr inbounds i16, i16* %blur_x841, i64 %18382
  %18384 = bitcast i16* %18383 to <16 x i16>*
  %18385 = load <16 x i16>, <16 x i16>* %18384, align 2, !tbaa !399
  %18386 = getelementptr inbounds i16, i16* %18383, i64 16
  %18387 = bitcast i16* %18386 to <16 x i16>*
  %18388 = load <16 x i16>, <16 x i16>* %18387, align 2, !tbaa !399
  %18389 = add nsw i64 %18240, %.pre-phi3453
  %18390 = getelementptr inbounds i16, i16* %blur_x841, i64 %18389
  %18391 = bitcast i16* %18390 to <16 x i16>*
  %18392 = load <16 x i16>, <16 x i16>* %18391, align 2, !tbaa !399
  %18393 = getelementptr inbounds i16, i16* %18390, i64 16
  %18394 = bitcast i16* %18393 to <16 x i16>*
  %18395 = load <16 x i16>, <16 x i16>* %18394, align 2, !tbaa !399
  %18396 = add nsw i64 %18243, %.pre-phi3453
  %18397 = getelementptr inbounds i16, i16* %blur_x841, i64 %18396
  %18398 = bitcast i16* %18397 to <16 x i16>*
  %18399 = load <16 x i16>, <16 x i16>* %18398, align 2, !tbaa !399
  %18400 = getelementptr inbounds i16, i16* %18397, i64 16
  %18401 = bitcast i16* %18400 to <16 x i16>*
  %18402 = load <16 x i16>, <16 x i16>* %18401, align 2, !tbaa !399
  %18403 = add <16 x i16> %18392, %18385
  %18404 = add <16 x i16> %18403, %18399
  %18405 = add <16 x i16> %18395, %18388
  %18406 = add <16 x i16> %18405, %18402
  %18407 = shufflevector <16 x i16> %18404, <16 x i16> %18406, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18408 = udiv <32 x i16> %18407, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18409 = shufflevector <32 x i16> %18408, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18410 = add nsw i64 %18247, %.pre-phi3453
  %18411 = getelementptr inbounds i16, i16* %258, i64 %18410
  %18412 = bitcast i16* %18411 to <16 x i16>*
  store <16 x i16> %18409, <16 x i16>* %18412, align 2, !tbaa !401
  %18413 = shufflevector <32 x i16> %18408, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18414 = getelementptr inbounds i16, i16* %18411, i64 16
  %18415 = bitcast i16* %18414 to <16 x i16>*
  store <16 x i16> %18413, <16 x i16>* %18415, align 2, !tbaa !401
  %indvars.iv.next3295 = add nuw nsw i64 %indvars.iv3294, 1
  %.not2455 = icmp eq i64 %indvars.iv.next3295, %515
  br i1 %.not2455, label %"end for blur_y.s0.x.x.rebased2035", label %"for blur_y.s0.x.x.rebased2034"

"for blur_y.s0.x.x.rebased2050":                  ; preds = %"for blur_y.s0.x.x.rebased2050.preheader", %"consume blur_x2061"
  %blur_y.s0.x.x.rebased2052 = phi i32 [ %18490, %"consume blur_x2061" ], [ 0, %"for blur_y.s0.x.x.rebased2050.preheader" ]
  %18416 = add nsw i32 %blur_y.s0.x.x.rebased2052, %t1582776
  %a5097 = shl nsw i32 %18416, 5
  %18417 = icmp sgt i32 %t1603, %a5097
  %blur_y.s0.x.v0.base.s2053 = select i1 %18417, i32 %a5097, i32 %t1603
  %18418 = icmp slt i32 %18416, 1
  %18419 = icmp sgt i32 %194, %a5097
  %18420 = or i1 %18418, %18419
  br i1 %18420, label %"produce blur_x2058", label %"consume blur_x2061"

"end for blur_y.s0.x.x.rebased2051":              ; preds = %"consume blur_x2061", %"end for blur_y.s0.x.x.rebased2035"
  br i1 %225, label %"produce blur_x2065", label %after_bb2062

"produce blur_x2058":                             ; preds = %"for blur_y.s0.x.x.rebased2050"
  %18421 = icmp slt i32 %blur_y.s0.x.v0.base.s2053, %194
  %blur_x.s0.x.v1.base.s2059 = select i1 %18421, i32 %blur_y.s0.x.v0.base.s2053, i32 %194
  %t10932060 = add nsw i32 %478, %blur_x.s0.x.v1.base.s2059
  %18422 = sext i32 %t10932060 to i64
  %18423 = getelementptr inbounds i16, i16* %read_input784, i64 %18422
  %18424 = getelementptr inbounds i16, i16* %18423, i64 1
  %18425 = bitcast i16* %18424 to <16 x i16>*
  %18426 = load <16 x i16>, <16 x i16>* %18425, align 2, !tbaa !396
  %18427 = getelementptr inbounds i16, i16* %18423, i64 17
  %18428 = bitcast i16* %18427 to <16 x i16>*
  %18429 = load <16 x i16>, <16 x i16>* %18428, align 2, !tbaa !396
  %18430 = getelementptr inbounds i16, i16* %18423, i64 2
  %18431 = bitcast i16* %18430 to <16 x i16>*
  %18432 = load <16 x i16>, <16 x i16>* %18431, align 2, !tbaa !396
  %18433 = getelementptr inbounds i16, i16* %18423, i64 18
  %18434 = bitcast i16* %18433 to <16 x i16>*
  %18435 = load <16 x i16>, <16 x i16>* %18434, align 2, !tbaa !396
  %18436 = bitcast i16* %18423 to <16 x i16>*
  %18437 = load <16 x i16>, <16 x i16>* %18436, align 2, !tbaa !396
  %18438 = getelementptr inbounds i16, i16* %18423, i64 16
  %18439 = bitcast i16* %18438 to <16 x i16>*
  %18440 = load <16 x i16>, <16 x i16>* %18439, align 2, !tbaa !396
  %18441 = add <16 x i16> %18432, %18426
  %18442 = add <16 x i16> %18441, %18437
  %18443 = add <16 x i16> %18435, %18429
  %18444 = add <16 x i16> %18443, %18440
  %18445 = shufflevector <16 x i16> %18442, <16 x i16> %18444, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18446 = udiv <32 x i16> %18445, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18447 = shufflevector <32 x i16> %18446, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18448 = sext i32 %blur_x.s0.x.v1.base.s2059 to i64
  %18449 = add nsw i64 %18448, %18335
  %18450 = getelementptr inbounds i16, i16* %blur_x841, i64 %18449
  %18451 = bitcast i16* %18450 to <16 x i16>*
  store <16 x i16> %18447, <16 x i16>* %18451, align 2, !tbaa !399
  %18452 = shufflevector <32 x i16> %18446, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18453 = getelementptr inbounds i16, i16* %18450, i64 16
  %18454 = bitcast i16* %18453 to <16 x i16>*
  store <16 x i16> %18452, <16 x i16>* %18454, align 2, !tbaa !399
  br label %"consume blur_x2061"

"consume blur_x2061":                             ; preds = %"for blur_y.s0.x.x.rebased2050", %"produce blur_x2058"
  %18455 = sext i32 %blur_y.s0.x.v0.base.s2053 to i64
  %18456 = add nsw i64 %18338, %18455
  %18457 = getelementptr inbounds i16, i16* %blur_x841, i64 %18456
  %18458 = bitcast i16* %18457 to <16 x i16>*
  %18459 = load <16 x i16>, <16 x i16>* %18458, align 2, !tbaa !399
  %18460 = getelementptr inbounds i16, i16* %18457, i64 16
  %18461 = bitcast i16* %18460 to <16 x i16>*
  %18462 = load <16 x i16>, <16 x i16>* %18461, align 2, !tbaa !399
  %18463 = add nsw i64 %18341, %18455
  %18464 = getelementptr inbounds i16, i16* %blur_x841, i64 %18463
  %18465 = bitcast i16* %18464 to <16 x i16>*
  %18466 = load <16 x i16>, <16 x i16>* %18465, align 2, !tbaa !399
  %18467 = getelementptr inbounds i16, i16* %18464, i64 16
  %18468 = bitcast i16* %18467 to <16 x i16>*
  %18469 = load <16 x i16>, <16 x i16>* %18468, align 2, !tbaa !399
  %18470 = add nsw i64 %18344, %18455
  %18471 = getelementptr inbounds i16, i16* %blur_x841, i64 %18470
  %18472 = bitcast i16* %18471 to <16 x i16>*
  %18473 = load <16 x i16>, <16 x i16>* %18472, align 2, !tbaa !399
  %18474 = getelementptr inbounds i16, i16* %18471, i64 16
  %18475 = bitcast i16* %18474 to <16 x i16>*
  %18476 = load <16 x i16>, <16 x i16>* %18475, align 2, !tbaa !399
  %18477 = add <16 x i16> %18466, %18459
  %18478 = add <16 x i16> %18477, %18473
  %18479 = add <16 x i16> %18469, %18462
  %18480 = add <16 x i16> %18479, %18476
  %18481 = shufflevector <16 x i16> %18478, <16 x i16> %18480, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18482 = udiv <32 x i16> %18481, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18483 = shufflevector <32 x i16> %18482, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18484 = add nsw i64 %18348, %18455
  %18485 = getelementptr inbounds i16, i16* %258, i64 %18484
  %18486 = bitcast i16* %18485 to <16 x i16>*
  store <16 x i16> %18483, <16 x i16>* %18486, align 2, !tbaa !401
  %18487 = shufflevector <32 x i16> %18482, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18488 = getelementptr inbounds i16, i16* %18485, i64 16
  %18489 = bitcast i16* %18488 to <16 x i16>*
  store <16 x i16> %18487, <16 x i16>* %18489, align 2, !tbaa !401
  %18490 = add nuw nsw i32 %blur_y.s0.x.x.rebased2052, 1
  %.not2454 = icmp eq i32 %18490, %t1639860
  br i1 %.not2454, label %"end for blur_y.s0.x.x.rebased2051", label %"for blur_y.s0.x.x.rebased2050"

after_bb2062:                                     ; preds = %"end for blur_y.s0.x.x.rebased2051", %"produce blur_x2065"
  br i1 %297, label %"for blur_y.s0.x.x.rebased2077.preheader", label %"end for blur_y.s0.x.x.rebased2078", !prof !386

"for blur_y.s0.x.x.rebased2077.preheader":        ; preds = %after_bb2062
  %18491 = sext i32 %t1644876 to i64
  %18492 = zext i32 %.pre-phi3387 to i64
  %18493 = mul nsw i64 %18492, %322
  %18494 = sub nsw i64 %18493, %293
  %18495 = zext i32 %.pre-phi3391 to i64
  %18496 = mul nsw i64 %18495, %322
  %18497 = sub nsw i64 %18496, %293
  %18498 = zext i32 %.pre-phi3401 to i64
  %18499 = mul nsw i64 %18498, %322
  %18500 = sub nsw i64 %18499, %293
  %18501 = sext i32 %a365 to i64
  %18502 = add nsw i64 %18501, 27
  %18503 = mul nsw i64 %18502, %319
  %18504 = add nsw i64 %18503, %323
  br label %"for blur_y.s0.x.x.rebased2077"

"produce blur_x2065":                             ; preds = %"end for blur_y.s0.x.x.rebased2051"
  %18505 = getelementptr inbounds i16, i16* %read_input784, i64 %482
  %18506 = getelementptr inbounds i16, i16* %18505, i64 -31
  %18507 = bitcast i16* %18506 to <16 x i16>*
  %18508 = load <16 x i16>, <16 x i16>* %18507, align 2, !tbaa !396
  %18509 = getelementptr inbounds i16, i16* %18505, i64 -15
  %18510 = bitcast i16* %18509 to <16 x i16>*
  %18511 = load <16 x i16>, <16 x i16>* %18510, align 2, !tbaa !396
  %18512 = getelementptr inbounds i16, i16* %18505, i64 -30
  %18513 = bitcast i16* %18512 to <16 x i16>*
  %18514 = load <16 x i16>, <16 x i16>* %18513, align 2, !tbaa !396
  %18515 = getelementptr inbounds i16, i16* %18505, i64 -14
  %18516 = bitcast i16* %18515 to <16 x i16>*
  %18517 = load <16 x i16>, <16 x i16>* %18516, align 2, !tbaa !396
  %18518 = getelementptr inbounds i16, i16* %18505, i64 -32
  %18519 = bitcast i16* %18518 to <16 x i16>*
  %18520 = load <16 x i16>, <16 x i16>* %18519, align 2, !tbaa !396
  %18521 = getelementptr inbounds i16, i16* %18505, i64 -16
  %18522 = bitcast i16* %18521 to <16 x i16>*
  %18523 = load <16 x i16>, <16 x i16>* %18522, align 2, !tbaa !396
  %18524 = add <16 x i16> %18514, %18508
  %18525 = add <16 x i16> %18524, %18520
  %18526 = add <16 x i16> %18517, %18511
  %18527 = add <16 x i16> %18526, %18523
  %18528 = shufflevector <16 x i16> %18525, <16 x i16> %18527, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18529 = udiv <32 x i16> %18528, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18530 = shufflevector <32 x i16> %18529, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18531 = zext i32 %.pre-phi3391 to i64
  %18532 = mul nsw i64 %294, %18531
  %18533 = add nsw i64 %296, %18532
  %18534 = getelementptr inbounds i16, i16* %blur_x841, i64 %18533
  %18535 = getelementptr inbounds i16, i16* %18534, i64 -32
  %18536 = bitcast i16* %18535 to <16 x i16>*
  store <16 x i16> %18530, <16 x i16>* %18536, align 2, !tbaa !399
  %18537 = shufflevector <32 x i16> %18529, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18538 = getelementptr inbounds i16, i16* %18534, i64 -16
  %18539 = bitcast i16* %18538 to <16 x i16>*
  store <16 x i16> %18537, <16 x i16>* %18539, align 2, !tbaa !399
  %18540 = zext i32 %.pre-phi3387 to i64
  %18541 = mul nsw i64 %18540, %318
  %18542 = add nsw i64 %18541, %291
  %18543 = getelementptr inbounds i16, i16* %blur_x841, i64 %18542
  %18544 = getelementptr inbounds i16, i16* %18543, i64 -32
  %18545 = bitcast i16* %18544 to <16 x i16>*
  %18546 = load <16 x i16>, <16 x i16>* %18545, align 2, !tbaa !399
  %18547 = getelementptr inbounds i16, i16* %18543, i64 -16
  %18548 = bitcast i16* %18547 to <16 x i16>*
  %18549 = load <16 x i16>, <16 x i16>* %18548, align 2, !tbaa !399
  %18550 = mul nsw i64 %18531, %318
  %18551 = add nsw i64 %18550, %291
  %18552 = getelementptr inbounds i16, i16* %blur_x841, i64 %18551
  %18553 = getelementptr inbounds i16, i16* %18552, i64 -32
  %18554 = bitcast i16* %18553 to <16 x i16>*
  %18555 = load <16 x i16>, <16 x i16>* %18554, align 2, !tbaa !399
  %18556 = getelementptr inbounds i16, i16* %18552, i64 -16
  %18557 = bitcast i16* %18556 to <16 x i16>*
  %18558 = load <16 x i16>, <16 x i16>* %18557, align 2, !tbaa !399
  %18559 = zext i32 %.pre-phi3401 to i64
  %18560 = mul nsw i64 %18559, %318
  %18561 = add nsw i64 %18560, %291
  %18562 = getelementptr inbounds i16, i16* %blur_x841, i64 %18561
  %18563 = getelementptr inbounds i16, i16* %18562, i64 -32
  %18564 = bitcast i16* %18563 to <16 x i16>*
  %18565 = load <16 x i16>, <16 x i16>* %18564, align 2, !tbaa !399
  %18566 = getelementptr inbounds i16, i16* %18562, i64 -16
  %18567 = bitcast i16* %18566 to <16 x i16>*
  %18568 = load <16 x i16>, <16 x i16>* %18567, align 2, !tbaa !399
  %18569 = add <16 x i16> %18555, %18546
  %18570 = add <16 x i16> %18569, %18565
  %18571 = add <16 x i16> %18558, %18549
  %18572 = add <16 x i16> %18571, %18568
  %18573 = shufflevector <16 x i16> %18570, <16 x i16> %18572, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18574 = udiv <32 x i16> %18573, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18575 = shufflevector <32 x i16> %18574, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18576 = sext i32 %a365 to i64
  %18577 = add nsw i64 %18576, 27
  %18578 = mul nsw i64 %18577, %319
  %18579 = add nsw i64 %321, %18578
  %18580 = getelementptr inbounds i16, i16* %258, i64 %18579
  %18581 = getelementptr inbounds i16, i16* %18580, i64 -32
  %18582 = bitcast i16* %18581 to <16 x i16>*
  store <16 x i16> %18575, <16 x i16>* %18582, align 2, !tbaa !401
  %18583 = shufflevector <32 x i16> %18574, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18584 = getelementptr inbounds i16, i16* %18580, i64 -16
  %18585 = bitcast i16* %18584 to <16 x i16>*
  store <16 x i16> %18583, <16 x i16>* %18585, align 2, !tbaa !401
  br label %after_bb2062

"for blur_y.s0.x.x.rebased2077":                  ; preds = %"for blur_y.s0.x.x.rebased2077.preheader", %"consume blur_x2085"
  %indvars.iv3296 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2077.preheader" ], [ %indvars.iv.next3297, %"consume blur_x2085" ]
  %18586 = add nsw i64 %indvars.iv3296, %298
  %18587 = icmp slt i64 %18586, 1
  %18588 = trunc i64 %18586 to i32
  %18589 = shl nsw i32 %18588, 5
  %18590 = icmp sgt i32 %194, %18589
  %18591 = or i1 %18587, %18590
  br i1 %18591, label %"produce blur_x2083", label %"for blur_y.s0.x.x.rebased2077.consume blur_x2085_crit_edge"

"for blur_y.s0.x.x.rebased2077.consume blur_x2085_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2077"
  %.pre3454 = shl nsw i64 %18586, 5
  br label %"consume blur_x2085"

"end for blur_y.s0.x.x.rebased2078":              ; preds = %"consume blur_x2085", %after_bb2062
  br i1 %299, label %"for blur_y.s0.x.x.rebased2093.preheader", label %"end for blur_y.s0.x.x.rebased2094", !prof !386

"for blur_y.s0.x.x.rebased2093.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2078"
  %18592 = sext i32 %t1644876 to i64
  %18593 = zext i32 %.pre-phi3387 to i64
  %18594 = mul nsw i64 %18593, %322
  %18595 = sub nsw i64 %18594, %293
  %18596 = zext i32 %.pre-phi3391 to i64
  %18597 = mul nsw i64 %18596, %322
  %18598 = sub nsw i64 %18597, %293
  %18599 = zext i32 %.pre-phi3401 to i64
  %18600 = mul nsw i64 %18599, %322
  %18601 = sub nsw i64 %18600, %293
  %18602 = sext i32 %a365 to i64
  %18603 = add nsw i64 %18602, 27
  %18604 = mul nsw i64 %18603, %319
  %18605 = add nsw i64 %18604, %323
  br label %"for blur_y.s0.x.x.rebased2093"

"produce blur_x2083":                             ; preds = %"for blur_y.s0.x.x.rebased2077"
  %t11042084 = add nsw i32 %484, %18589
  %18606 = sext i32 %t11042084 to i64
  %18607 = getelementptr inbounds i16, i16* %read_input784, i64 %18606
  %18608 = getelementptr inbounds i16, i16* %18607, i64 1
  %18609 = bitcast i16* %18608 to <16 x i16>*
  %18610 = load <16 x i16>, <16 x i16>* %18609, align 2, !tbaa !396
  %18611 = getelementptr inbounds i16, i16* %18607, i64 17
  %18612 = bitcast i16* %18611 to <16 x i16>*
  %18613 = load <16 x i16>, <16 x i16>* %18612, align 2, !tbaa !396
  %18614 = getelementptr inbounds i16, i16* %18607, i64 2
  %18615 = bitcast i16* %18614 to <16 x i16>*
  %18616 = load <16 x i16>, <16 x i16>* %18615, align 2, !tbaa !396
  %18617 = getelementptr inbounds i16, i16* %18607, i64 18
  %18618 = bitcast i16* %18617 to <16 x i16>*
  %18619 = load <16 x i16>, <16 x i16>* %18618, align 2, !tbaa !396
  %18620 = bitcast i16* %18607 to <16 x i16>*
  %18621 = load <16 x i16>, <16 x i16>* %18620, align 2, !tbaa !396
  %18622 = getelementptr inbounds i16, i16* %18607, i64 16
  %18623 = bitcast i16* %18622 to <16 x i16>*
  %18624 = load <16 x i16>, <16 x i16>* %18623, align 2, !tbaa !396
  %18625 = add <16 x i16> %18616, %18610
  %18626 = add <16 x i16> %18625, %18621
  %18627 = add <16 x i16> %18619, %18613
  %18628 = add <16 x i16> %18627, %18624
  %18629 = shufflevector <16 x i16> %18626, <16 x i16> %18628, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18630 = udiv <32 x i16> %18629, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18631 = shufflevector <32 x i16> %18630, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18632 = shl nsw i64 %18586, 5
  %18633 = add nsw i64 %18632, %18491
  %18634 = getelementptr inbounds i16, i16* %blur_x841, i64 %18633
  %18635 = bitcast i16* %18634 to <16 x i16>*
  store <16 x i16> %18631, <16 x i16>* %18635, align 2, !tbaa !399
  %18636 = shufflevector <32 x i16> %18630, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18637 = getelementptr inbounds i16, i16* %18634, i64 16
  %18638 = bitcast i16* %18637 to <16 x i16>*
  store <16 x i16> %18636, <16 x i16>* %18638, align 2, !tbaa !399
  br label %"consume blur_x2085"

"consume blur_x2085":                             ; preds = %"for blur_y.s0.x.x.rebased2077.consume blur_x2085_crit_edge", %"produce blur_x2083"
  %.pre-phi3455 = phi i64 [ %.pre3454, %"for blur_y.s0.x.x.rebased2077.consume blur_x2085_crit_edge" ], [ %18632, %"produce blur_x2083" ]
  %18639 = add nsw i64 %18494, %.pre-phi3455
  %18640 = getelementptr inbounds i16, i16* %blur_x841, i64 %18639
  %18641 = bitcast i16* %18640 to <16 x i16>*
  %18642 = load <16 x i16>, <16 x i16>* %18641, align 2, !tbaa !399
  %18643 = getelementptr inbounds i16, i16* %18640, i64 16
  %18644 = bitcast i16* %18643 to <16 x i16>*
  %18645 = load <16 x i16>, <16 x i16>* %18644, align 2, !tbaa !399
  %18646 = add nsw i64 %18497, %.pre-phi3455
  %18647 = getelementptr inbounds i16, i16* %blur_x841, i64 %18646
  %18648 = bitcast i16* %18647 to <16 x i16>*
  %18649 = load <16 x i16>, <16 x i16>* %18648, align 2, !tbaa !399
  %18650 = getelementptr inbounds i16, i16* %18647, i64 16
  %18651 = bitcast i16* %18650 to <16 x i16>*
  %18652 = load <16 x i16>, <16 x i16>* %18651, align 2, !tbaa !399
  %18653 = add nsw i64 %18500, %.pre-phi3455
  %18654 = getelementptr inbounds i16, i16* %blur_x841, i64 %18653
  %18655 = bitcast i16* %18654 to <16 x i16>*
  %18656 = load <16 x i16>, <16 x i16>* %18655, align 2, !tbaa !399
  %18657 = getelementptr inbounds i16, i16* %18654, i64 16
  %18658 = bitcast i16* %18657 to <16 x i16>*
  %18659 = load <16 x i16>, <16 x i16>* %18658, align 2, !tbaa !399
  %18660 = add <16 x i16> %18649, %18642
  %18661 = add <16 x i16> %18660, %18656
  %18662 = add <16 x i16> %18652, %18645
  %18663 = add <16 x i16> %18662, %18659
  %18664 = shufflevector <16 x i16> %18661, <16 x i16> %18663, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18665 = udiv <32 x i16> %18664, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18666 = shufflevector <32 x i16> %18665, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18667 = add nsw i64 %18504, %.pre-phi3455
  %18668 = getelementptr inbounds i16, i16* %258, i64 %18667
  %18669 = bitcast i16* %18668 to <16 x i16>*
  store <16 x i16> %18666, <16 x i16>* %18669, align 2, !tbaa !401
  %18670 = shufflevector <32 x i16> %18665, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18671 = getelementptr inbounds i16, i16* %18668, i64 16
  %18672 = bitcast i16* %18671 to <16 x i16>*
  store <16 x i16> %18670, <16 x i16>* %18672, align 2, !tbaa !401
  %indvars.iv.next3297 = add nuw nsw i64 %indvars.iv3296, 1
  %.not2451 = icmp eq i64 %indvars.iv.next3297, %515
  br i1 %.not2451, label %"end for blur_y.s0.x.x.rebased2078", label %"for blur_y.s0.x.x.rebased2077"

"for blur_y.s0.x.x.rebased2093":                  ; preds = %"for blur_y.s0.x.x.rebased2093.preheader", %"consume blur_x2104"
  %blur_y.s0.x.x.rebased2095 = phi i32 [ %18747, %"consume blur_x2104" ], [ 0, %"for blur_y.s0.x.x.rebased2093.preheader" ]
  %18673 = add nsw i32 %blur_y.s0.x.x.rebased2095, %t1582776
  %a5254 = shl nsw i32 %18673, 5
  %18674 = icmp sgt i32 %t1603, %a5254
  %blur_y.s0.x.v0.base.s2096 = select i1 %18674, i32 %a5254, i32 %t1603
  %18675 = icmp slt i32 %18673, 1
  %18676 = icmp sgt i32 %194, %a5254
  %18677 = or i1 %18675, %18676
  br i1 %18677, label %"produce blur_x2101", label %"consume blur_x2104"

"end for blur_y.s0.x.x.rebased2094":              ; preds = %"consume blur_x2104", %"end for blur_y.s0.x.x.rebased2078"
  br i1 %225, label %"produce blur_x2108", label %after_bb2105

"produce blur_x2101":                             ; preds = %"for blur_y.s0.x.x.rebased2093"
  %18678 = icmp slt i32 %blur_y.s0.x.v0.base.s2096, %194
  %blur_x.s0.x.v1.base.s2102 = select i1 %18678, i32 %blur_y.s0.x.v0.base.s2096, i32 %194
  %t11092103 = add nsw i32 %484, %blur_x.s0.x.v1.base.s2102
  %18679 = sext i32 %t11092103 to i64
  %18680 = getelementptr inbounds i16, i16* %read_input784, i64 %18679
  %18681 = getelementptr inbounds i16, i16* %18680, i64 1
  %18682 = bitcast i16* %18681 to <16 x i16>*
  %18683 = load <16 x i16>, <16 x i16>* %18682, align 2, !tbaa !396
  %18684 = getelementptr inbounds i16, i16* %18680, i64 17
  %18685 = bitcast i16* %18684 to <16 x i16>*
  %18686 = load <16 x i16>, <16 x i16>* %18685, align 2, !tbaa !396
  %18687 = getelementptr inbounds i16, i16* %18680, i64 2
  %18688 = bitcast i16* %18687 to <16 x i16>*
  %18689 = load <16 x i16>, <16 x i16>* %18688, align 2, !tbaa !396
  %18690 = getelementptr inbounds i16, i16* %18680, i64 18
  %18691 = bitcast i16* %18690 to <16 x i16>*
  %18692 = load <16 x i16>, <16 x i16>* %18691, align 2, !tbaa !396
  %18693 = bitcast i16* %18680 to <16 x i16>*
  %18694 = load <16 x i16>, <16 x i16>* %18693, align 2, !tbaa !396
  %18695 = getelementptr inbounds i16, i16* %18680, i64 16
  %18696 = bitcast i16* %18695 to <16 x i16>*
  %18697 = load <16 x i16>, <16 x i16>* %18696, align 2, !tbaa !396
  %18698 = add <16 x i16> %18689, %18683
  %18699 = add <16 x i16> %18698, %18694
  %18700 = add <16 x i16> %18692, %18686
  %18701 = add <16 x i16> %18700, %18697
  %18702 = shufflevector <16 x i16> %18699, <16 x i16> %18701, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18703 = udiv <32 x i16> %18702, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18704 = shufflevector <32 x i16> %18703, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18705 = sext i32 %blur_x.s0.x.v1.base.s2102 to i64
  %18706 = add nsw i64 %18705, %18592
  %18707 = getelementptr inbounds i16, i16* %blur_x841, i64 %18706
  %18708 = bitcast i16* %18707 to <16 x i16>*
  store <16 x i16> %18704, <16 x i16>* %18708, align 2, !tbaa !399
  %18709 = shufflevector <32 x i16> %18703, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18710 = getelementptr inbounds i16, i16* %18707, i64 16
  %18711 = bitcast i16* %18710 to <16 x i16>*
  store <16 x i16> %18709, <16 x i16>* %18711, align 2, !tbaa !399
  br label %"consume blur_x2104"

"consume blur_x2104":                             ; preds = %"for blur_y.s0.x.x.rebased2093", %"produce blur_x2101"
  %18712 = sext i32 %blur_y.s0.x.v0.base.s2096 to i64
  %18713 = add nsw i64 %18595, %18712
  %18714 = getelementptr inbounds i16, i16* %blur_x841, i64 %18713
  %18715 = bitcast i16* %18714 to <16 x i16>*
  %18716 = load <16 x i16>, <16 x i16>* %18715, align 2, !tbaa !399
  %18717 = getelementptr inbounds i16, i16* %18714, i64 16
  %18718 = bitcast i16* %18717 to <16 x i16>*
  %18719 = load <16 x i16>, <16 x i16>* %18718, align 2, !tbaa !399
  %18720 = add nsw i64 %18598, %18712
  %18721 = getelementptr inbounds i16, i16* %blur_x841, i64 %18720
  %18722 = bitcast i16* %18721 to <16 x i16>*
  %18723 = load <16 x i16>, <16 x i16>* %18722, align 2, !tbaa !399
  %18724 = getelementptr inbounds i16, i16* %18721, i64 16
  %18725 = bitcast i16* %18724 to <16 x i16>*
  %18726 = load <16 x i16>, <16 x i16>* %18725, align 2, !tbaa !399
  %18727 = add nsw i64 %18601, %18712
  %18728 = getelementptr inbounds i16, i16* %blur_x841, i64 %18727
  %18729 = bitcast i16* %18728 to <16 x i16>*
  %18730 = load <16 x i16>, <16 x i16>* %18729, align 2, !tbaa !399
  %18731 = getelementptr inbounds i16, i16* %18728, i64 16
  %18732 = bitcast i16* %18731 to <16 x i16>*
  %18733 = load <16 x i16>, <16 x i16>* %18732, align 2, !tbaa !399
  %18734 = add <16 x i16> %18723, %18716
  %18735 = add <16 x i16> %18734, %18730
  %18736 = add <16 x i16> %18726, %18719
  %18737 = add <16 x i16> %18736, %18733
  %18738 = shufflevector <16 x i16> %18735, <16 x i16> %18737, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18739 = udiv <32 x i16> %18738, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18740 = shufflevector <32 x i16> %18739, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18741 = add nsw i64 %18605, %18712
  %18742 = getelementptr inbounds i16, i16* %258, i64 %18741
  %18743 = bitcast i16* %18742 to <16 x i16>*
  store <16 x i16> %18740, <16 x i16>* %18743, align 2, !tbaa !401
  %18744 = shufflevector <32 x i16> %18739, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18745 = getelementptr inbounds i16, i16* %18742, i64 16
  %18746 = bitcast i16* %18745 to <16 x i16>*
  store <16 x i16> %18744, <16 x i16>* %18746, align 2, !tbaa !401
  %18747 = add nuw nsw i32 %blur_y.s0.x.x.rebased2095, 1
  %.not2450 = icmp eq i32 %18747, %t1639860
  br i1 %.not2450, label %"end for blur_y.s0.x.x.rebased2094", label %"for blur_y.s0.x.x.rebased2093"

after_bb2105:                                     ; preds = %"end for blur_y.s0.x.x.rebased2094", %"produce blur_x2108"
  br i1 %297, label %"for blur_y.s0.x.x.rebased2120.preheader", label %"end for blur_y.s0.x.x.rebased2121", !prof !386

"for blur_y.s0.x.x.rebased2120.preheader":        ; preds = %after_bb2105
  %18748 = sext i32 %t1650912 to i64
  %18749 = zext i32 %.pre-phi3391 to i64
  %18750 = mul nsw i64 %18749, %322
  %18751 = sub nsw i64 %18750, %293
  %18752 = zext i32 %.pre-phi3395 to i64
  %18753 = mul nsw i64 %18752, %322
  %18754 = sub nsw i64 %18753, %293
  %18755 = zext i32 %.pre-phi3387 to i64
  %18756 = mul nsw i64 %18755, %322
  %18757 = sub nsw i64 %18756, %293
  %18758 = sext i32 %a365 to i64
  %18759 = add nsw i64 %18758, 28
  %18760 = mul nsw i64 %18759, %319
  %18761 = add nsw i64 %18760, %323
  br label %"for blur_y.s0.x.x.rebased2120"

"produce blur_x2108":                             ; preds = %"end for blur_y.s0.x.x.rebased2094"
  %18762 = getelementptr inbounds i16, i16* %read_input784, i64 %488
  %18763 = getelementptr inbounds i16, i16* %18762, i64 -31
  %18764 = bitcast i16* %18763 to <16 x i16>*
  %18765 = load <16 x i16>, <16 x i16>* %18764, align 2, !tbaa !396
  %18766 = getelementptr inbounds i16, i16* %18762, i64 -15
  %18767 = bitcast i16* %18766 to <16 x i16>*
  %18768 = load <16 x i16>, <16 x i16>* %18767, align 2, !tbaa !396
  %18769 = getelementptr inbounds i16, i16* %18762, i64 -30
  %18770 = bitcast i16* %18769 to <16 x i16>*
  %18771 = load <16 x i16>, <16 x i16>* %18770, align 2, !tbaa !396
  %18772 = getelementptr inbounds i16, i16* %18762, i64 -14
  %18773 = bitcast i16* %18772 to <16 x i16>*
  %18774 = load <16 x i16>, <16 x i16>* %18773, align 2, !tbaa !396
  %18775 = getelementptr inbounds i16, i16* %18762, i64 -32
  %18776 = bitcast i16* %18775 to <16 x i16>*
  %18777 = load <16 x i16>, <16 x i16>* %18776, align 2, !tbaa !396
  %18778 = getelementptr inbounds i16, i16* %18762, i64 -16
  %18779 = bitcast i16* %18778 to <16 x i16>*
  %18780 = load <16 x i16>, <16 x i16>* %18779, align 2, !tbaa !396
  %18781 = add <16 x i16> %18771, %18765
  %18782 = add <16 x i16> %18781, %18777
  %18783 = add <16 x i16> %18774, %18768
  %18784 = add <16 x i16> %18783, %18780
  %18785 = shufflevector <16 x i16> %18782, <16 x i16> %18784, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18786 = udiv <32 x i16> %18785, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18787 = shufflevector <32 x i16> %18786, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18788 = zext i32 %.pre-phi3395 to i64
  %18789 = mul nsw i64 %294, %18788
  %18790 = add nsw i64 %296, %18789
  %18791 = getelementptr inbounds i16, i16* %blur_x841, i64 %18790
  %18792 = getelementptr inbounds i16, i16* %18791, i64 -32
  %18793 = bitcast i16* %18792 to <16 x i16>*
  store <16 x i16> %18787, <16 x i16>* %18793, align 2, !tbaa !399
  %18794 = shufflevector <32 x i16> %18786, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18795 = getelementptr inbounds i16, i16* %18791, i64 -16
  %18796 = bitcast i16* %18795 to <16 x i16>*
  store <16 x i16> %18794, <16 x i16>* %18796, align 2, !tbaa !399
  %18797 = zext i32 %.pre-phi3391 to i64
  %18798 = mul nsw i64 %18797, %318
  %18799 = add nsw i64 %18798, %291
  %18800 = getelementptr inbounds i16, i16* %blur_x841, i64 %18799
  %18801 = getelementptr inbounds i16, i16* %18800, i64 -32
  %18802 = bitcast i16* %18801 to <16 x i16>*
  %18803 = load <16 x i16>, <16 x i16>* %18802, align 2, !tbaa !399
  %18804 = getelementptr inbounds i16, i16* %18800, i64 -16
  %18805 = bitcast i16* %18804 to <16 x i16>*
  %18806 = load <16 x i16>, <16 x i16>* %18805, align 2, !tbaa !399
  %18807 = mul nsw i64 %18788, %318
  %18808 = add nsw i64 %18807, %291
  %18809 = getelementptr inbounds i16, i16* %blur_x841, i64 %18808
  %18810 = getelementptr inbounds i16, i16* %18809, i64 -32
  %18811 = bitcast i16* %18810 to <16 x i16>*
  %18812 = load <16 x i16>, <16 x i16>* %18811, align 2, !tbaa !399
  %18813 = getelementptr inbounds i16, i16* %18809, i64 -16
  %18814 = bitcast i16* %18813 to <16 x i16>*
  %18815 = load <16 x i16>, <16 x i16>* %18814, align 2, !tbaa !399
  %18816 = zext i32 %.pre-phi3387 to i64
  %18817 = mul nsw i64 %18816, %318
  %18818 = add nsw i64 %18817, %291
  %18819 = getelementptr inbounds i16, i16* %blur_x841, i64 %18818
  %18820 = getelementptr inbounds i16, i16* %18819, i64 -32
  %18821 = bitcast i16* %18820 to <16 x i16>*
  %18822 = load <16 x i16>, <16 x i16>* %18821, align 2, !tbaa !399
  %18823 = getelementptr inbounds i16, i16* %18819, i64 -16
  %18824 = bitcast i16* %18823 to <16 x i16>*
  %18825 = load <16 x i16>, <16 x i16>* %18824, align 2, !tbaa !399
  %18826 = add <16 x i16> %18812, %18803
  %18827 = add <16 x i16> %18826, %18822
  %18828 = add <16 x i16> %18815, %18806
  %18829 = add <16 x i16> %18828, %18825
  %18830 = shufflevector <16 x i16> %18827, <16 x i16> %18829, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18831 = udiv <32 x i16> %18830, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18832 = shufflevector <32 x i16> %18831, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18833 = sext i32 %a365 to i64
  %18834 = add nsw i64 %18833, 28
  %18835 = mul nsw i64 %18834, %319
  %18836 = add nsw i64 %321, %18835
  %18837 = getelementptr inbounds i16, i16* %258, i64 %18836
  %18838 = getelementptr inbounds i16, i16* %18837, i64 -32
  %18839 = bitcast i16* %18838 to <16 x i16>*
  store <16 x i16> %18832, <16 x i16>* %18839, align 2, !tbaa !401
  %18840 = shufflevector <32 x i16> %18831, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18841 = getelementptr inbounds i16, i16* %18837, i64 -16
  %18842 = bitcast i16* %18841 to <16 x i16>*
  store <16 x i16> %18840, <16 x i16>* %18842, align 2, !tbaa !401
  br label %after_bb2105

"for blur_y.s0.x.x.rebased2120":                  ; preds = %"for blur_y.s0.x.x.rebased2120.preheader", %"consume blur_x2128"
  %indvars.iv3298 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2120.preheader" ], [ %indvars.iv.next3299, %"consume blur_x2128" ]
  %18843 = add nsw i64 %indvars.iv3298, %298
  %18844 = icmp slt i64 %18843, 1
  %18845 = trunc i64 %18843 to i32
  %18846 = shl nsw i32 %18845, 5
  %18847 = icmp sgt i32 %194, %18846
  %18848 = or i1 %18844, %18847
  br i1 %18848, label %"produce blur_x2126", label %"for blur_y.s0.x.x.rebased2120.consume blur_x2128_crit_edge"

"for blur_y.s0.x.x.rebased2120.consume blur_x2128_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2120"
  %.pre3456 = shl nsw i64 %18843, 5
  br label %"consume blur_x2128"

"end for blur_y.s0.x.x.rebased2121":              ; preds = %"consume blur_x2128", %after_bb2105
  br i1 %299, label %"for blur_y.s0.x.x.rebased2136.preheader", label %"end for blur_y.s0.x.x.rebased2137", !prof !386

"for blur_y.s0.x.x.rebased2136.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2121"
  %18849 = sext i32 %t1650912 to i64
  %18850 = zext i32 %.pre-phi3391 to i64
  %18851 = mul nsw i64 %18850, %322
  %18852 = sub nsw i64 %18851, %293
  %18853 = zext i32 %.pre-phi3395 to i64
  %18854 = mul nsw i64 %18853, %322
  %18855 = sub nsw i64 %18854, %293
  %18856 = zext i32 %.pre-phi3387 to i64
  %18857 = mul nsw i64 %18856, %322
  %18858 = sub nsw i64 %18857, %293
  %18859 = sext i32 %a365 to i64
  %18860 = add nsw i64 %18859, 28
  %18861 = mul nsw i64 %18860, %319
  %18862 = add nsw i64 %18861, %323
  br label %"for blur_y.s0.x.x.rebased2136"

"produce blur_x2126":                             ; preds = %"for blur_y.s0.x.x.rebased2120"
  %t11202127 = add nsw i32 %490, %18846
  %18863 = sext i32 %t11202127 to i64
  %18864 = getelementptr inbounds i16, i16* %read_input784, i64 %18863
  %18865 = getelementptr inbounds i16, i16* %18864, i64 1
  %18866 = bitcast i16* %18865 to <16 x i16>*
  %18867 = load <16 x i16>, <16 x i16>* %18866, align 2, !tbaa !396
  %18868 = getelementptr inbounds i16, i16* %18864, i64 17
  %18869 = bitcast i16* %18868 to <16 x i16>*
  %18870 = load <16 x i16>, <16 x i16>* %18869, align 2, !tbaa !396
  %18871 = getelementptr inbounds i16, i16* %18864, i64 2
  %18872 = bitcast i16* %18871 to <16 x i16>*
  %18873 = load <16 x i16>, <16 x i16>* %18872, align 2, !tbaa !396
  %18874 = getelementptr inbounds i16, i16* %18864, i64 18
  %18875 = bitcast i16* %18874 to <16 x i16>*
  %18876 = load <16 x i16>, <16 x i16>* %18875, align 2, !tbaa !396
  %18877 = bitcast i16* %18864 to <16 x i16>*
  %18878 = load <16 x i16>, <16 x i16>* %18877, align 2, !tbaa !396
  %18879 = getelementptr inbounds i16, i16* %18864, i64 16
  %18880 = bitcast i16* %18879 to <16 x i16>*
  %18881 = load <16 x i16>, <16 x i16>* %18880, align 2, !tbaa !396
  %18882 = add <16 x i16> %18873, %18867
  %18883 = add <16 x i16> %18882, %18878
  %18884 = add <16 x i16> %18876, %18870
  %18885 = add <16 x i16> %18884, %18881
  %18886 = shufflevector <16 x i16> %18883, <16 x i16> %18885, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18887 = udiv <32 x i16> %18886, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18888 = shufflevector <32 x i16> %18887, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18889 = shl nsw i64 %18843, 5
  %18890 = add nsw i64 %18889, %18748
  %18891 = getelementptr inbounds i16, i16* %blur_x841, i64 %18890
  %18892 = bitcast i16* %18891 to <16 x i16>*
  store <16 x i16> %18888, <16 x i16>* %18892, align 2, !tbaa !399
  %18893 = shufflevector <32 x i16> %18887, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18894 = getelementptr inbounds i16, i16* %18891, i64 16
  %18895 = bitcast i16* %18894 to <16 x i16>*
  store <16 x i16> %18893, <16 x i16>* %18895, align 2, !tbaa !399
  br label %"consume blur_x2128"

"consume blur_x2128":                             ; preds = %"for blur_y.s0.x.x.rebased2120.consume blur_x2128_crit_edge", %"produce blur_x2126"
  %.pre-phi3457 = phi i64 [ %.pre3456, %"for blur_y.s0.x.x.rebased2120.consume blur_x2128_crit_edge" ], [ %18889, %"produce blur_x2126" ]
  %18896 = add nsw i64 %18751, %.pre-phi3457
  %18897 = getelementptr inbounds i16, i16* %blur_x841, i64 %18896
  %18898 = bitcast i16* %18897 to <16 x i16>*
  %18899 = load <16 x i16>, <16 x i16>* %18898, align 2, !tbaa !399
  %18900 = getelementptr inbounds i16, i16* %18897, i64 16
  %18901 = bitcast i16* %18900 to <16 x i16>*
  %18902 = load <16 x i16>, <16 x i16>* %18901, align 2, !tbaa !399
  %18903 = add nsw i64 %18754, %.pre-phi3457
  %18904 = getelementptr inbounds i16, i16* %blur_x841, i64 %18903
  %18905 = bitcast i16* %18904 to <16 x i16>*
  %18906 = load <16 x i16>, <16 x i16>* %18905, align 2, !tbaa !399
  %18907 = getelementptr inbounds i16, i16* %18904, i64 16
  %18908 = bitcast i16* %18907 to <16 x i16>*
  %18909 = load <16 x i16>, <16 x i16>* %18908, align 2, !tbaa !399
  %18910 = add nsw i64 %18757, %.pre-phi3457
  %18911 = getelementptr inbounds i16, i16* %blur_x841, i64 %18910
  %18912 = bitcast i16* %18911 to <16 x i16>*
  %18913 = load <16 x i16>, <16 x i16>* %18912, align 2, !tbaa !399
  %18914 = getelementptr inbounds i16, i16* %18911, i64 16
  %18915 = bitcast i16* %18914 to <16 x i16>*
  %18916 = load <16 x i16>, <16 x i16>* %18915, align 2, !tbaa !399
  %18917 = add <16 x i16> %18906, %18899
  %18918 = add <16 x i16> %18917, %18913
  %18919 = add <16 x i16> %18909, %18902
  %18920 = add <16 x i16> %18919, %18916
  %18921 = shufflevector <16 x i16> %18918, <16 x i16> %18920, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18922 = udiv <32 x i16> %18921, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18923 = shufflevector <32 x i16> %18922, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18924 = add nsw i64 %18761, %.pre-phi3457
  %18925 = getelementptr inbounds i16, i16* %258, i64 %18924
  %18926 = bitcast i16* %18925 to <16 x i16>*
  store <16 x i16> %18923, <16 x i16>* %18926, align 2, !tbaa !401
  %18927 = shufflevector <32 x i16> %18922, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18928 = getelementptr inbounds i16, i16* %18925, i64 16
  %18929 = bitcast i16* %18928 to <16 x i16>*
  store <16 x i16> %18927, <16 x i16>* %18929, align 2, !tbaa !401
  %indvars.iv.next3299 = add nuw nsw i64 %indvars.iv3298, 1
  %.not2447 = icmp eq i64 %indvars.iv.next3299, %515
  br i1 %.not2447, label %"end for blur_y.s0.x.x.rebased2121", label %"for blur_y.s0.x.x.rebased2120"

"for blur_y.s0.x.x.rebased2136":                  ; preds = %"for blur_y.s0.x.x.rebased2136.preheader", %"consume blur_x2147"
  %blur_y.s0.x.x.rebased2138 = phi i32 [ %19004, %"consume blur_x2147" ], [ 0, %"for blur_y.s0.x.x.rebased2136.preheader" ]
  %18930 = add nsw i32 %blur_y.s0.x.x.rebased2138, %t1582776
  %a5411 = shl nsw i32 %18930, 5
  %18931 = icmp sgt i32 %t1603, %a5411
  %blur_y.s0.x.v0.base.s2139 = select i1 %18931, i32 %a5411, i32 %t1603
  %18932 = icmp slt i32 %18930, 1
  %18933 = icmp sgt i32 %194, %a5411
  %18934 = or i1 %18932, %18933
  br i1 %18934, label %"produce blur_x2144", label %"consume blur_x2147"

"end for blur_y.s0.x.x.rebased2137":              ; preds = %"consume blur_x2147", %"end for blur_y.s0.x.x.rebased2121"
  br i1 %225, label %"produce blur_x2151", label %after_bb2148

"produce blur_x2144":                             ; preds = %"for blur_y.s0.x.x.rebased2136"
  %18935 = icmp slt i32 %blur_y.s0.x.v0.base.s2139, %194
  %blur_x.s0.x.v1.base.s2145 = select i1 %18935, i32 %blur_y.s0.x.v0.base.s2139, i32 %194
  %t11252146 = add nsw i32 %490, %blur_x.s0.x.v1.base.s2145
  %18936 = sext i32 %t11252146 to i64
  %18937 = getelementptr inbounds i16, i16* %read_input784, i64 %18936
  %18938 = getelementptr inbounds i16, i16* %18937, i64 1
  %18939 = bitcast i16* %18938 to <16 x i16>*
  %18940 = load <16 x i16>, <16 x i16>* %18939, align 2, !tbaa !396
  %18941 = getelementptr inbounds i16, i16* %18937, i64 17
  %18942 = bitcast i16* %18941 to <16 x i16>*
  %18943 = load <16 x i16>, <16 x i16>* %18942, align 2, !tbaa !396
  %18944 = getelementptr inbounds i16, i16* %18937, i64 2
  %18945 = bitcast i16* %18944 to <16 x i16>*
  %18946 = load <16 x i16>, <16 x i16>* %18945, align 2, !tbaa !396
  %18947 = getelementptr inbounds i16, i16* %18937, i64 18
  %18948 = bitcast i16* %18947 to <16 x i16>*
  %18949 = load <16 x i16>, <16 x i16>* %18948, align 2, !tbaa !396
  %18950 = bitcast i16* %18937 to <16 x i16>*
  %18951 = load <16 x i16>, <16 x i16>* %18950, align 2, !tbaa !396
  %18952 = getelementptr inbounds i16, i16* %18937, i64 16
  %18953 = bitcast i16* %18952 to <16 x i16>*
  %18954 = load <16 x i16>, <16 x i16>* %18953, align 2, !tbaa !396
  %18955 = add <16 x i16> %18946, %18940
  %18956 = add <16 x i16> %18955, %18951
  %18957 = add <16 x i16> %18949, %18943
  %18958 = add <16 x i16> %18957, %18954
  %18959 = shufflevector <16 x i16> %18956, <16 x i16> %18958, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18960 = udiv <32 x i16> %18959, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18961 = shufflevector <32 x i16> %18960, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18962 = sext i32 %blur_x.s0.x.v1.base.s2145 to i64
  %18963 = add nsw i64 %18962, %18849
  %18964 = getelementptr inbounds i16, i16* %blur_x841, i64 %18963
  %18965 = bitcast i16* %18964 to <16 x i16>*
  store <16 x i16> %18961, <16 x i16>* %18965, align 2, !tbaa !399
  %18966 = shufflevector <32 x i16> %18960, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18967 = getelementptr inbounds i16, i16* %18964, i64 16
  %18968 = bitcast i16* %18967 to <16 x i16>*
  store <16 x i16> %18966, <16 x i16>* %18968, align 2, !tbaa !399
  br label %"consume blur_x2147"

"consume blur_x2147":                             ; preds = %"for blur_y.s0.x.x.rebased2136", %"produce blur_x2144"
  %18969 = sext i32 %blur_y.s0.x.v0.base.s2139 to i64
  %18970 = add nsw i64 %18852, %18969
  %18971 = getelementptr inbounds i16, i16* %blur_x841, i64 %18970
  %18972 = bitcast i16* %18971 to <16 x i16>*
  %18973 = load <16 x i16>, <16 x i16>* %18972, align 2, !tbaa !399
  %18974 = getelementptr inbounds i16, i16* %18971, i64 16
  %18975 = bitcast i16* %18974 to <16 x i16>*
  %18976 = load <16 x i16>, <16 x i16>* %18975, align 2, !tbaa !399
  %18977 = add nsw i64 %18855, %18969
  %18978 = getelementptr inbounds i16, i16* %blur_x841, i64 %18977
  %18979 = bitcast i16* %18978 to <16 x i16>*
  %18980 = load <16 x i16>, <16 x i16>* %18979, align 2, !tbaa !399
  %18981 = getelementptr inbounds i16, i16* %18978, i64 16
  %18982 = bitcast i16* %18981 to <16 x i16>*
  %18983 = load <16 x i16>, <16 x i16>* %18982, align 2, !tbaa !399
  %18984 = add nsw i64 %18858, %18969
  %18985 = getelementptr inbounds i16, i16* %blur_x841, i64 %18984
  %18986 = bitcast i16* %18985 to <16 x i16>*
  %18987 = load <16 x i16>, <16 x i16>* %18986, align 2, !tbaa !399
  %18988 = getelementptr inbounds i16, i16* %18985, i64 16
  %18989 = bitcast i16* %18988 to <16 x i16>*
  %18990 = load <16 x i16>, <16 x i16>* %18989, align 2, !tbaa !399
  %18991 = add <16 x i16> %18980, %18973
  %18992 = add <16 x i16> %18991, %18987
  %18993 = add <16 x i16> %18983, %18976
  %18994 = add <16 x i16> %18993, %18990
  %18995 = shufflevector <16 x i16> %18992, <16 x i16> %18994, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18996 = udiv <32 x i16> %18995, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %18997 = shufflevector <32 x i16> %18996, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18998 = add nsw i64 %18862, %18969
  %18999 = getelementptr inbounds i16, i16* %258, i64 %18998
  %19000 = bitcast i16* %18999 to <16 x i16>*
  store <16 x i16> %18997, <16 x i16>* %19000, align 2, !tbaa !401
  %19001 = shufflevector <32 x i16> %18996, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19002 = getelementptr inbounds i16, i16* %18999, i64 16
  %19003 = bitcast i16* %19002 to <16 x i16>*
  store <16 x i16> %19001, <16 x i16>* %19003, align 2, !tbaa !401
  %19004 = add nuw nsw i32 %blur_y.s0.x.x.rebased2138, 1
  %.not2446 = icmp eq i32 %19004, %t1639860
  br i1 %.not2446, label %"end for blur_y.s0.x.x.rebased2137", label %"for blur_y.s0.x.x.rebased2136"

after_bb2148:                                     ; preds = %"end for blur_y.s0.x.x.rebased2137", %"produce blur_x2151"
  br i1 %297, label %"for blur_y.s0.x.x.rebased2163.preheader", label %"end for blur_y.s0.x.x.rebased2164", !prof !386

"for blur_y.s0.x.x.rebased2163.preheader":        ; preds = %after_bb2148
  %19005 = sext i32 %t1666955 to i64
  %19006 = zext i32 %.pre-phi3395 to i64
  %19007 = mul nsw i64 %19006, %322
  %19008 = sub nsw i64 %19007, %293
  %19009 = zext i32 %.pre-phi3401 to i64
  %19010 = mul nsw i64 %19009, %322
  %19011 = sub nsw i64 %19010, %293
  %19012 = zext i32 %.pre-phi3391 to i64
  %19013 = mul nsw i64 %19012, %322
  %19014 = sub nsw i64 %19013, %293
  %19015 = sext i32 %a365 to i64
  %19016 = add nsw i64 %19015, 29
  %19017 = mul nsw i64 %19016, %319
  %19018 = add nsw i64 %19017, %323
  br label %"for blur_y.s0.x.x.rebased2163"

"produce blur_x2151":                             ; preds = %"end for blur_y.s0.x.x.rebased2137"
  %19019 = getelementptr inbounds i16, i16* %read_input784, i64 %494
  %19020 = getelementptr inbounds i16, i16* %19019, i64 -31
  %19021 = bitcast i16* %19020 to <16 x i16>*
  %19022 = load <16 x i16>, <16 x i16>* %19021, align 2, !tbaa !396
  %19023 = getelementptr inbounds i16, i16* %19019, i64 -15
  %19024 = bitcast i16* %19023 to <16 x i16>*
  %19025 = load <16 x i16>, <16 x i16>* %19024, align 2, !tbaa !396
  %19026 = getelementptr inbounds i16, i16* %19019, i64 -30
  %19027 = bitcast i16* %19026 to <16 x i16>*
  %19028 = load <16 x i16>, <16 x i16>* %19027, align 2, !tbaa !396
  %19029 = getelementptr inbounds i16, i16* %19019, i64 -14
  %19030 = bitcast i16* %19029 to <16 x i16>*
  %19031 = load <16 x i16>, <16 x i16>* %19030, align 2, !tbaa !396
  %19032 = getelementptr inbounds i16, i16* %19019, i64 -32
  %19033 = bitcast i16* %19032 to <16 x i16>*
  %19034 = load <16 x i16>, <16 x i16>* %19033, align 2, !tbaa !396
  %19035 = getelementptr inbounds i16, i16* %19019, i64 -16
  %19036 = bitcast i16* %19035 to <16 x i16>*
  %19037 = load <16 x i16>, <16 x i16>* %19036, align 2, !tbaa !396
  %19038 = add <16 x i16> %19028, %19022
  %19039 = add <16 x i16> %19038, %19034
  %19040 = add <16 x i16> %19031, %19025
  %19041 = add <16 x i16> %19040, %19037
  %19042 = shufflevector <16 x i16> %19039, <16 x i16> %19041, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19043 = udiv <32 x i16> %19042, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19044 = shufflevector <32 x i16> %19043, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19045 = zext i32 %.pre-phi3401 to i64
  %19046 = mul nsw i64 %294, %19045
  %19047 = add nsw i64 %296, %19046
  %19048 = getelementptr inbounds i16, i16* %blur_x841, i64 %19047
  %19049 = getelementptr inbounds i16, i16* %19048, i64 -32
  %19050 = bitcast i16* %19049 to <16 x i16>*
  store <16 x i16> %19044, <16 x i16>* %19050, align 2, !tbaa !399
  %19051 = shufflevector <32 x i16> %19043, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19052 = getelementptr inbounds i16, i16* %19048, i64 -16
  %19053 = bitcast i16* %19052 to <16 x i16>*
  store <16 x i16> %19051, <16 x i16>* %19053, align 2, !tbaa !399
  %19054 = zext i32 %.pre-phi3395 to i64
  %19055 = mul nsw i64 %19054, %318
  %19056 = add nsw i64 %19055, %291
  %19057 = getelementptr inbounds i16, i16* %blur_x841, i64 %19056
  %19058 = getelementptr inbounds i16, i16* %19057, i64 -32
  %19059 = bitcast i16* %19058 to <16 x i16>*
  %19060 = load <16 x i16>, <16 x i16>* %19059, align 2, !tbaa !399
  %19061 = getelementptr inbounds i16, i16* %19057, i64 -16
  %19062 = bitcast i16* %19061 to <16 x i16>*
  %19063 = load <16 x i16>, <16 x i16>* %19062, align 2, !tbaa !399
  %19064 = mul nsw i64 %19045, %318
  %19065 = add nsw i64 %19064, %291
  %19066 = getelementptr inbounds i16, i16* %blur_x841, i64 %19065
  %19067 = getelementptr inbounds i16, i16* %19066, i64 -32
  %19068 = bitcast i16* %19067 to <16 x i16>*
  %19069 = load <16 x i16>, <16 x i16>* %19068, align 2, !tbaa !399
  %19070 = getelementptr inbounds i16, i16* %19066, i64 -16
  %19071 = bitcast i16* %19070 to <16 x i16>*
  %19072 = load <16 x i16>, <16 x i16>* %19071, align 2, !tbaa !399
  %19073 = zext i32 %.pre-phi3391 to i64
  %19074 = mul nsw i64 %19073, %318
  %19075 = add nsw i64 %19074, %291
  %19076 = getelementptr inbounds i16, i16* %blur_x841, i64 %19075
  %19077 = getelementptr inbounds i16, i16* %19076, i64 -32
  %19078 = bitcast i16* %19077 to <16 x i16>*
  %19079 = load <16 x i16>, <16 x i16>* %19078, align 2, !tbaa !399
  %19080 = getelementptr inbounds i16, i16* %19076, i64 -16
  %19081 = bitcast i16* %19080 to <16 x i16>*
  %19082 = load <16 x i16>, <16 x i16>* %19081, align 2, !tbaa !399
  %19083 = add <16 x i16> %19069, %19060
  %19084 = add <16 x i16> %19083, %19079
  %19085 = add <16 x i16> %19072, %19063
  %19086 = add <16 x i16> %19085, %19082
  %19087 = shufflevector <16 x i16> %19084, <16 x i16> %19086, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19088 = udiv <32 x i16> %19087, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19089 = shufflevector <32 x i16> %19088, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19090 = sext i32 %a365 to i64
  %19091 = add nsw i64 %19090, 29
  %19092 = mul nsw i64 %19091, %319
  %19093 = add nsw i64 %321, %19092
  %19094 = getelementptr inbounds i16, i16* %258, i64 %19093
  %19095 = getelementptr inbounds i16, i16* %19094, i64 -32
  %19096 = bitcast i16* %19095 to <16 x i16>*
  store <16 x i16> %19089, <16 x i16>* %19096, align 2, !tbaa !401
  %19097 = shufflevector <32 x i16> %19088, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19098 = getelementptr inbounds i16, i16* %19094, i64 -16
  %19099 = bitcast i16* %19098 to <16 x i16>*
  store <16 x i16> %19097, <16 x i16>* %19099, align 2, !tbaa !401
  br label %after_bb2148

"for blur_y.s0.x.x.rebased2163":                  ; preds = %"for blur_y.s0.x.x.rebased2163.preheader", %"consume blur_x2171"
  %indvars.iv3300 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2163.preheader" ], [ %indvars.iv.next3301, %"consume blur_x2171" ]
  %19100 = add nsw i64 %indvars.iv3300, %298
  %19101 = icmp slt i64 %19100, 1
  %19102 = trunc i64 %19100 to i32
  %19103 = shl nsw i32 %19102, 5
  %19104 = icmp sgt i32 %194, %19103
  %19105 = or i1 %19101, %19104
  br i1 %19105, label %"produce blur_x2169", label %"for blur_y.s0.x.x.rebased2163.consume blur_x2171_crit_edge"

"for blur_y.s0.x.x.rebased2163.consume blur_x2171_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2163"
  %.pre3458 = shl nsw i64 %19100, 5
  br label %"consume blur_x2171"

"end for blur_y.s0.x.x.rebased2164":              ; preds = %"consume blur_x2171", %after_bb2148
  br i1 %299, label %"for blur_y.s0.x.x.rebased2179.preheader", label %"end for blur_y.s0.x.x.rebased2180", !prof !386

"for blur_y.s0.x.x.rebased2179.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2164"
  %19106 = sext i32 %t1666955 to i64
  %19107 = zext i32 %.pre-phi3395 to i64
  %19108 = mul nsw i64 %19107, %322
  %19109 = sub nsw i64 %19108, %293
  %19110 = zext i32 %.pre-phi3401 to i64
  %19111 = mul nsw i64 %19110, %322
  %19112 = sub nsw i64 %19111, %293
  %19113 = zext i32 %.pre-phi3391 to i64
  %19114 = mul nsw i64 %19113, %322
  %19115 = sub nsw i64 %19114, %293
  %19116 = sext i32 %a365 to i64
  %19117 = add nsw i64 %19116, 29
  %19118 = mul nsw i64 %19117, %319
  %19119 = add nsw i64 %19118, %323
  br label %"for blur_y.s0.x.x.rebased2179"

"produce blur_x2169":                             ; preds = %"for blur_y.s0.x.x.rebased2163"
  %t11362170 = add nsw i32 %496, %19103
  %19120 = sext i32 %t11362170 to i64
  %19121 = getelementptr inbounds i16, i16* %read_input784, i64 %19120
  %19122 = getelementptr inbounds i16, i16* %19121, i64 1
  %19123 = bitcast i16* %19122 to <16 x i16>*
  %19124 = load <16 x i16>, <16 x i16>* %19123, align 2, !tbaa !396
  %19125 = getelementptr inbounds i16, i16* %19121, i64 17
  %19126 = bitcast i16* %19125 to <16 x i16>*
  %19127 = load <16 x i16>, <16 x i16>* %19126, align 2, !tbaa !396
  %19128 = getelementptr inbounds i16, i16* %19121, i64 2
  %19129 = bitcast i16* %19128 to <16 x i16>*
  %19130 = load <16 x i16>, <16 x i16>* %19129, align 2, !tbaa !396
  %19131 = getelementptr inbounds i16, i16* %19121, i64 18
  %19132 = bitcast i16* %19131 to <16 x i16>*
  %19133 = load <16 x i16>, <16 x i16>* %19132, align 2, !tbaa !396
  %19134 = bitcast i16* %19121 to <16 x i16>*
  %19135 = load <16 x i16>, <16 x i16>* %19134, align 2, !tbaa !396
  %19136 = getelementptr inbounds i16, i16* %19121, i64 16
  %19137 = bitcast i16* %19136 to <16 x i16>*
  %19138 = load <16 x i16>, <16 x i16>* %19137, align 2, !tbaa !396
  %19139 = add <16 x i16> %19130, %19124
  %19140 = add <16 x i16> %19139, %19135
  %19141 = add <16 x i16> %19133, %19127
  %19142 = add <16 x i16> %19141, %19138
  %19143 = shufflevector <16 x i16> %19140, <16 x i16> %19142, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19144 = udiv <32 x i16> %19143, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19145 = shufflevector <32 x i16> %19144, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19146 = shl nsw i64 %19100, 5
  %19147 = add nsw i64 %19146, %19005
  %19148 = getelementptr inbounds i16, i16* %blur_x841, i64 %19147
  %19149 = bitcast i16* %19148 to <16 x i16>*
  store <16 x i16> %19145, <16 x i16>* %19149, align 2, !tbaa !399
  %19150 = shufflevector <32 x i16> %19144, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19151 = getelementptr inbounds i16, i16* %19148, i64 16
  %19152 = bitcast i16* %19151 to <16 x i16>*
  store <16 x i16> %19150, <16 x i16>* %19152, align 2, !tbaa !399
  br label %"consume blur_x2171"

"consume blur_x2171":                             ; preds = %"for blur_y.s0.x.x.rebased2163.consume blur_x2171_crit_edge", %"produce blur_x2169"
  %.pre-phi3459 = phi i64 [ %.pre3458, %"for blur_y.s0.x.x.rebased2163.consume blur_x2171_crit_edge" ], [ %19146, %"produce blur_x2169" ]
  %19153 = add nsw i64 %19008, %.pre-phi3459
  %19154 = getelementptr inbounds i16, i16* %blur_x841, i64 %19153
  %19155 = bitcast i16* %19154 to <16 x i16>*
  %19156 = load <16 x i16>, <16 x i16>* %19155, align 2, !tbaa !399
  %19157 = getelementptr inbounds i16, i16* %19154, i64 16
  %19158 = bitcast i16* %19157 to <16 x i16>*
  %19159 = load <16 x i16>, <16 x i16>* %19158, align 2, !tbaa !399
  %19160 = add nsw i64 %19011, %.pre-phi3459
  %19161 = getelementptr inbounds i16, i16* %blur_x841, i64 %19160
  %19162 = bitcast i16* %19161 to <16 x i16>*
  %19163 = load <16 x i16>, <16 x i16>* %19162, align 2, !tbaa !399
  %19164 = getelementptr inbounds i16, i16* %19161, i64 16
  %19165 = bitcast i16* %19164 to <16 x i16>*
  %19166 = load <16 x i16>, <16 x i16>* %19165, align 2, !tbaa !399
  %19167 = add nsw i64 %19014, %.pre-phi3459
  %19168 = getelementptr inbounds i16, i16* %blur_x841, i64 %19167
  %19169 = bitcast i16* %19168 to <16 x i16>*
  %19170 = load <16 x i16>, <16 x i16>* %19169, align 2, !tbaa !399
  %19171 = getelementptr inbounds i16, i16* %19168, i64 16
  %19172 = bitcast i16* %19171 to <16 x i16>*
  %19173 = load <16 x i16>, <16 x i16>* %19172, align 2, !tbaa !399
  %19174 = add <16 x i16> %19163, %19156
  %19175 = add <16 x i16> %19174, %19170
  %19176 = add <16 x i16> %19166, %19159
  %19177 = add <16 x i16> %19176, %19173
  %19178 = shufflevector <16 x i16> %19175, <16 x i16> %19177, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19179 = udiv <32 x i16> %19178, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19180 = shufflevector <32 x i16> %19179, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19181 = add nsw i64 %19018, %.pre-phi3459
  %19182 = getelementptr inbounds i16, i16* %258, i64 %19181
  %19183 = bitcast i16* %19182 to <16 x i16>*
  store <16 x i16> %19180, <16 x i16>* %19183, align 2, !tbaa !401
  %19184 = shufflevector <32 x i16> %19179, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19185 = getelementptr inbounds i16, i16* %19182, i64 16
  %19186 = bitcast i16* %19185 to <16 x i16>*
  store <16 x i16> %19184, <16 x i16>* %19186, align 2, !tbaa !401
  %indvars.iv.next3301 = add nuw nsw i64 %indvars.iv3300, 1
  %.not2443 = icmp eq i64 %indvars.iv.next3301, %515
  br i1 %.not2443, label %"end for blur_y.s0.x.x.rebased2164", label %"for blur_y.s0.x.x.rebased2163"

"for blur_y.s0.x.x.rebased2179":                  ; preds = %"for blur_y.s0.x.x.rebased2179.preheader", %"consume blur_x2190"
  %blur_y.s0.x.x.rebased2181 = phi i32 [ %19261, %"consume blur_x2190" ], [ 0, %"for blur_y.s0.x.x.rebased2179.preheader" ]
  %19187 = add nsw i32 %blur_y.s0.x.x.rebased2181, %t1582776
  %a5568 = shl nsw i32 %19187, 5
  %19188 = icmp sgt i32 %t1603, %a5568
  %blur_y.s0.x.v0.base.s2182 = select i1 %19188, i32 %a5568, i32 %t1603
  %19189 = icmp slt i32 %19187, 1
  %19190 = icmp sgt i32 %194, %a5568
  %19191 = or i1 %19189, %19190
  br i1 %19191, label %"produce blur_x2187", label %"consume blur_x2190"

"end for blur_y.s0.x.x.rebased2180":              ; preds = %"consume blur_x2190", %"end for blur_y.s0.x.x.rebased2164"
  br i1 %225, label %"produce blur_x2194", label %after_bb2191

"produce blur_x2187":                             ; preds = %"for blur_y.s0.x.x.rebased2179"
  %19192 = icmp slt i32 %blur_y.s0.x.v0.base.s2182, %194
  %blur_x.s0.x.v1.base.s2188 = select i1 %19192, i32 %blur_y.s0.x.v0.base.s2182, i32 %194
  %t11412189 = add nsw i32 %496, %blur_x.s0.x.v1.base.s2188
  %19193 = sext i32 %t11412189 to i64
  %19194 = getelementptr inbounds i16, i16* %read_input784, i64 %19193
  %19195 = getelementptr inbounds i16, i16* %19194, i64 1
  %19196 = bitcast i16* %19195 to <16 x i16>*
  %19197 = load <16 x i16>, <16 x i16>* %19196, align 2, !tbaa !396
  %19198 = getelementptr inbounds i16, i16* %19194, i64 17
  %19199 = bitcast i16* %19198 to <16 x i16>*
  %19200 = load <16 x i16>, <16 x i16>* %19199, align 2, !tbaa !396
  %19201 = getelementptr inbounds i16, i16* %19194, i64 2
  %19202 = bitcast i16* %19201 to <16 x i16>*
  %19203 = load <16 x i16>, <16 x i16>* %19202, align 2, !tbaa !396
  %19204 = getelementptr inbounds i16, i16* %19194, i64 18
  %19205 = bitcast i16* %19204 to <16 x i16>*
  %19206 = load <16 x i16>, <16 x i16>* %19205, align 2, !tbaa !396
  %19207 = bitcast i16* %19194 to <16 x i16>*
  %19208 = load <16 x i16>, <16 x i16>* %19207, align 2, !tbaa !396
  %19209 = getelementptr inbounds i16, i16* %19194, i64 16
  %19210 = bitcast i16* %19209 to <16 x i16>*
  %19211 = load <16 x i16>, <16 x i16>* %19210, align 2, !tbaa !396
  %19212 = add <16 x i16> %19203, %19197
  %19213 = add <16 x i16> %19212, %19208
  %19214 = add <16 x i16> %19206, %19200
  %19215 = add <16 x i16> %19214, %19211
  %19216 = shufflevector <16 x i16> %19213, <16 x i16> %19215, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19217 = udiv <32 x i16> %19216, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19218 = shufflevector <32 x i16> %19217, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19219 = sext i32 %blur_x.s0.x.v1.base.s2188 to i64
  %19220 = add nsw i64 %19219, %19106
  %19221 = getelementptr inbounds i16, i16* %blur_x841, i64 %19220
  %19222 = bitcast i16* %19221 to <16 x i16>*
  store <16 x i16> %19218, <16 x i16>* %19222, align 2, !tbaa !399
  %19223 = shufflevector <32 x i16> %19217, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19224 = getelementptr inbounds i16, i16* %19221, i64 16
  %19225 = bitcast i16* %19224 to <16 x i16>*
  store <16 x i16> %19223, <16 x i16>* %19225, align 2, !tbaa !399
  br label %"consume blur_x2190"

"consume blur_x2190":                             ; preds = %"for blur_y.s0.x.x.rebased2179", %"produce blur_x2187"
  %19226 = sext i32 %blur_y.s0.x.v0.base.s2182 to i64
  %19227 = add nsw i64 %19109, %19226
  %19228 = getelementptr inbounds i16, i16* %blur_x841, i64 %19227
  %19229 = bitcast i16* %19228 to <16 x i16>*
  %19230 = load <16 x i16>, <16 x i16>* %19229, align 2, !tbaa !399
  %19231 = getelementptr inbounds i16, i16* %19228, i64 16
  %19232 = bitcast i16* %19231 to <16 x i16>*
  %19233 = load <16 x i16>, <16 x i16>* %19232, align 2, !tbaa !399
  %19234 = add nsw i64 %19112, %19226
  %19235 = getelementptr inbounds i16, i16* %blur_x841, i64 %19234
  %19236 = bitcast i16* %19235 to <16 x i16>*
  %19237 = load <16 x i16>, <16 x i16>* %19236, align 2, !tbaa !399
  %19238 = getelementptr inbounds i16, i16* %19235, i64 16
  %19239 = bitcast i16* %19238 to <16 x i16>*
  %19240 = load <16 x i16>, <16 x i16>* %19239, align 2, !tbaa !399
  %19241 = add nsw i64 %19115, %19226
  %19242 = getelementptr inbounds i16, i16* %blur_x841, i64 %19241
  %19243 = bitcast i16* %19242 to <16 x i16>*
  %19244 = load <16 x i16>, <16 x i16>* %19243, align 2, !tbaa !399
  %19245 = getelementptr inbounds i16, i16* %19242, i64 16
  %19246 = bitcast i16* %19245 to <16 x i16>*
  %19247 = load <16 x i16>, <16 x i16>* %19246, align 2, !tbaa !399
  %19248 = add <16 x i16> %19237, %19230
  %19249 = add <16 x i16> %19248, %19244
  %19250 = add <16 x i16> %19240, %19233
  %19251 = add <16 x i16> %19250, %19247
  %19252 = shufflevector <16 x i16> %19249, <16 x i16> %19251, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19253 = udiv <32 x i16> %19252, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19254 = shufflevector <32 x i16> %19253, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19255 = add nsw i64 %19119, %19226
  %19256 = getelementptr inbounds i16, i16* %258, i64 %19255
  %19257 = bitcast i16* %19256 to <16 x i16>*
  store <16 x i16> %19254, <16 x i16>* %19257, align 2, !tbaa !401
  %19258 = shufflevector <32 x i16> %19253, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19259 = getelementptr inbounds i16, i16* %19256, i64 16
  %19260 = bitcast i16* %19259 to <16 x i16>*
  store <16 x i16> %19258, <16 x i16>* %19260, align 2, !tbaa !401
  %19261 = add nuw nsw i32 %blur_y.s0.x.x.rebased2181, 1
  %.not2442 = icmp eq i32 %19261, %t1639860
  br i1 %.not2442, label %"end for blur_y.s0.x.x.rebased2180", label %"for blur_y.s0.x.x.rebased2179"

after_bb2191:                                     ; preds = %"end for blur_y.s0.x.x.rebased2180", %"produce blur_x2194"
  br i1 %297, label %"for blur_y.s0.x.x.rebased2206.preheader", label %"end for blur_y.s0.x.x.rebased2207", !prof !386

"for blur_y.s0.x.x.rebased2206.preheader":        ; preds = %after_bb2191
  %19262 = sext i32 %t1638848 to i64
  %19263 = zext i32 %.pre-phi3401 to i64
  %19264 = mul nsw i64 %19263, %322
  %19265 = sub nsw i64 %19264, %293
  %19266 = zext i32 %.pre-phi3387 to i64
  %19267 = mul nsw i64 %19266, %322
  %19268 = sub nsw i64 %19267, %293
  %19269 = zext i32 %.pre-phi3395 to i64
  %19270 = mul nsw i64 %19269, %322
  %19271 = sub nsw i64 %19270, %293
  %19272 = sext i32 %a365 to i64
  %19273 = add nsw i64 %19272, 30
  %19274 = mul nsw i64 %19273, %319
  %19275 = add nsw i64 %19274, %323
  br label %"for blur_y.s0.x.x.rebased2206"

"produce blur_x2194":                             ; preds = %"end for blur_y.s0.x.x.rebased2180"
  %19276 = getelementptr inbounds i16, i16* %read_input784, i64 %500
  %19277 = getelementptr inbounds i16, i16* %19276, i64 -31
  %19278 = bitcast i16* %19277 to <16 x i16>*
  %19279 = load <16 x i16>, <16 x i16>* %19278, align 2, !tbaa !396
  %19280 = getelementptr inbounds i16, i16* %19276, i64 -15
  %19281 = bitcast i16* %19280 to <16 x i16>*
  %19282 = load <16 x i16>, <16 x i16>* %19281, align 2, !tbaa !396
  %19283 = getelementptr inbounds i16, i16* %19276, i64 -30
  %19284 = bitcast i16* %19283 to <16 x i16>*
  %19285 = load <16 x i16>, <16 x i16>* %19284, align 2, !tbaa !396
  %19286 = getelementptr inbounds i16, i16* %19276, i64 -14
  %19287 = bitcast i16* %19286 to <16 x i16>*
  %19288 = load <16 x i16>, <16 x i16>* %19287, align 2, !tbaa !396
  %19289 = getelementptr inbounds i16, i16* %19276, i64 -32
  %19290 = bitcast i16* %19289 to <16 x i16>*
  %19291 = load <16 x i16>, <16 x i16>* %19290, align 2, !tbaa !396
  %19292 = getelementptr inbounds i16, i16* %19276, i64 -16
  %19293 = bitcast i16* %19292 to <16 x i16>*
  %19294 = load <16 x i16>, <16 x i16>* %19293, align 2, !tbaa !396
  %19295 = add <16 x i16> %19285, %19279
  %19296 = add <16 x i16> %19295, %19291
  %19297 = add <16 x i16> %19288, %19282
  %19298 = add <16 x i16> %19297, %19294
  %19299 = shufflevector <16 x i16> %19296, <16 x i16> %19298, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19300 = udiv <32 x i16> %19299, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19301 = shufflevector <32 x i16> %19300, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19302 = zext i32 %.pre-phi3387 to i64
  %19303 = mul nsw i64 %294, %19302
  %19304 = add nsw i64 %296, %19303
  %19305 = getelementptr inbounds i16, i16* %blur_x841, i64 %19304
  %19306 = getelementptr inbounds i16, i16* %19305, i64 -32
  %19307 = bitcast i16* %19306 to <16 x i16>*
  store <16 x i16> %19301, <16 x i16>* %19307, align 2, !tbaa !399
  %19308 = shufflevector <32 x i16> %19300, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19309 = getelementptr inbounds i16, i16* %19305, i64 -16
  %19310 = bitcast i16* %19309 to <16 x i16>*
  store <16 x i16> %19308, <16 x i16>* %19310, align 2, !tbaa !399
  %19311 = zext i32 %.pre-phi3401 to i64
  %19312 = mul nsw i64 %19311, %318
  %19313 = add nsw i64 %19312, %291
  %19314 = getelementptr inbounds i16, i16* %blur_x841, i64 %19313
  %19315 = getelementptr inbounds i16, i16* %19314, i64 -32
  %19316 = bitcast i16* %19315 to <16 x i16>*
  %19317 = load <16 x i16>, <16 x i16>* %19316, align 2, !tbaa !399
  %19318 = getelementptr inbounds i16, i16* %19314, i64 -16
  %19319 = bitcast i16* %19318 to <16 x i16>*
  %19320 = load <16 x i16>, <16 x i16>* %19319, align 2, !tbaa !399
  %19321 = mul nsw i64 %19302, %318
  %19322 = add nsw i64 %19321, %291
  %19323 = getelementptr inbounds i16, i16* %blur_x841, i64 %19322
  %19324 = getelementptr inbounds i16, i16* %19323, i64 -32
  %19325 = bitcast i16* %19324 to <16 x i16>*
  %19326 = load <16 x i16>, <16 x i16>* %19325, align 2, !tbaa !399
  %19327 = getelementptr inbounds i16, i16* %19323, i64 -16
  %19328 = bitcast i16* %19327 to <16 x i16>*
  %19329 = load <16 x i16>, <16 x i16>* %19328, align 2, !tbaa !399
  %19330 = zext i32 %.pre-phi3395 to i64
  %19331 = mul nsw i64 %19330, %318
  %19332 = add nsw i64 %19331, %291
  %19333 = getelementptr inbounds i16, i16* %blur_x841, i64 %19332
  %19334 = getelementptr inbounds i16, i16* %19333, i64 -32
  %19335 = bitcast i16* %19334 to <16 x i16>*
  %19336 = load <16 x i16>, <16 x i16>* %19335, align 2, !tbaa !399
  %19337 = getelementptr inbounds i16, i16* %19333, i64 -16
  %19338 = bitcast i16* %19337 to <16 x i16>*
  %19339 = load <16 x i16>, <16 x i16>* %19338, align 2, !tbaa !399
  %19340 = add <16 x i16> %19326, %19317
  %19341 = add <16 x i16> %19340, %19336
  %19342 = add <16 x i16> %19329, %19320
  %19343 = add <16 x i16> %19342, %19339
  %19344 = shufflevector <16 x i16> %19341, <16 x i16> %19343, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19345 = udiv <32 x i16> %19344, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19346 = shufflevector <32 x i16> %19345, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19347 = sext i32 %a365 to i64
  %19348 = add nsw i64 %19347, 30
  %19349 = mul nsw i64 %19348, %319
  %19350 = add nsw i64 %321, %19349
  %19351 = getelementptr inbounds i16, i16* %258, i64 %19350
  %19352 = getelementptr inbounds i16, i16* %19351, i64 -32
  %19353 = bitcast i16* %19352 to <16 x i16>*
  store <16 x i16> %19346, <16 x i16>* %19353, align 2, !tbaa !401
  %19354 = shufflevector <32 x i16> %19345, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19355 = getelementptr inbounds i16, i16* %19351, i64 -16
  %19356 = bitcast i16* %19355 to <16 x i16>*
  store <16 x i16> %19354, <16 x i16>* %19356, align 2, !tbaa !401
  br label %after_bb2191

"for blur_y.s0.x.x.rebased2206":                  ; preds = %"for blur_y.s0.x.x.rebased2206.preheader", %"consume blur_x2214"
  %indvars.iv3302 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2206.preheader" ], [ %indvars.iv.next3303, %"consume blur_x2214" ]
  %19357 = add nsw i64 %indvars.iv3302, %298
  %19358 = icmp slt i64 %19357, 1
  %19359 = trunc i64 %19357 to i32
  %19360 = shl nsw i32 %19359, 5
  %19361 = icmp sgt i32 %194, %19360
  %19362 = or i1 %19358, %19361
  br i1 %19362, label %"produce blur_x2212", label %"for blur_y.s0.x.x.rebased2206.consume blur_x2214_crit_edge"

"for blur_y.s0.x.x.rebased2206.consume blur_x2214_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2206"
  %.pre3460 = shl nsw i64 %19357, 5
  br label %"consume blur_x2214"

"end for blur_y.s0.x.x.rebased2207":              ; preds = %"consume blur_x2214", %after_bb2191
  br i1 %299, label %"for blur_y.s0.x.x.rebased2222.preheader", label %"end for blur_y.s0.x.x.rebased2223", !prof !386

"for blur_y.s0.x.x.rebased2222.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2207"
  %19363 = sext i32 %t1638848 to i64
  %19364 = zext i32 %.pre-phi3401 to i64
  %19365 = mul nsw i64 %19364, %322
  %19366 = sub nsw i64 %19365, %293
  %19367 = zext i32 %.pre-phi3387 to i64
  %19368 = mul nsw i64 %19367, %322
  %19369 = sub nsw i64 %19368, %293
  %19370 = zext i32 %.pre-phi3395 to i64
  %19371 = mul nsw i64 %19370, %322
  %19372 = sub nsw i64 %19371, %293
  %19373 = sext i32 %a365 to i64
  %19374 = add nsw i64 %19373, 30
  %19375 = mul nsw i64 %19374, %319
  %19376 = add nsw i64 %19375, %323
  br label %"for blur_y.s0.x.x.rebased2222"

"produce blur_x2212":                             ; preds = %"for blur_y.s0.x.x.rebased2206"
  %t11522213 = add nsw i32 %502, %19360
  %19377 = sext i32 %t11522213 to i64
  %19378 = getelementptr inbounds i16, i16* %read_input784, i64 %19377
  %19379 = getelementptr inbounds i16, i16* %19378, i64 1
  %19380 = bitcast i16* %19379 to <16 x i16>*
  %19381 = load <16 x i16>, <16 x i16>* %19380, align 2, !tbaa !396
  %19382 = getelementptr inbounds i16, i16* %19378, i64 17
  %19383 = bitcast i16* %19382 to <16 x i16>*
  %19384 = load <16 x i16>, <16 x i16>* %19383, align 2, !tbaa !396
  %19385 = getelementptr inbounds i16, i16* %19378, i64 2
  %19386 = bitcast i16* %19385 to <16 x i16>*
  %19387 = load <16 x i16>, <16 x i16>* %19386, align 2, !tbaa !396
  %19388 = getelementptr inbounds i16, i16* %19378, i64 18
  %19389 = bitcast i16* %19388 to <16 x i16>*
  %19390 = load <16 x i16>, <16 x i16>* %19389, align 2, !tbaa !396
  %19391 = bitcast i16* %19378 to <16 x i16>*
  %19392 = load <16 x i16>, <16 x i16>* %19391, align 2, !tbaa !396
  %19393 = getelementptr inbounds i16, i16* %19378, i64 16
  %19394 = bitcast i16* %19393 to <16 x i16>*
  %19395 = load <16 x i16>, <16 x i16>* %19394, align 2, !tbaa !396
  %19396 = add <16 x i16> %19387, %19381
  %19397 = add <16 x i16> %19396, %19392
  %19398 = add <16 x i16> %19390, %19384
  %19399 = add <16 x i16> %19398, %19395
  %19400 = shufflevector <16 x i16> %19397, <16 x i16> %19399, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19401 = udiv <32 x i16> %19400, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19402 = shufflevector <32 x i16> %19401, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19403 = shl nsw i64 %19357, 5
  %19404 = add nsw i64 %19403, %19262
  %19405 = getelementptr inbounds i16, i16* %blur_x841, i64 %19404
  %19406 = bitcast i16* %19405 to <16 x i16>*
  store <16 x i16> %19402, <16 x i16>* %19406, align 2, !tbaa !399
  %19407 = shufflevector <32 x i16> %19401, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19408 = getelementptr inbounds i16, i16* %19405, i64 16
  %19409 = bitcast i16* %19408 to <16 x i16>*
  store <16 x i16> %19407, <16 x i16>* %19409, align 2, !tbaa !399
  br label %"consume blur_x2214"

"consume blur_x2214":                             ; preds = %"for blur_y.s0.x.x.rebased2206.consume blur_x2214_crit_edge", %"produce blur_x2212"
  %.pre-phi3461 = phi i64 [ %.pre3460, %"for blur_y.s0.x.x.rebased2206.consume blur_x2214_crit_edge" ], [ %19403, %"produce blur_x2212" ]
  %19410 = add nsw i64 %19265, %.pre-phi3461
  %19411 = getelementptr inbounds i16, i16* %blur_x841, i64 %19410
  %19412 = bitcast i16* %19411 to <16 x i16>*
  %19413 = load <16 x i16>, <16 x i16>* %19412, align 2, !tbaa !399
  %19414 = getelementptr inbounds i16, i16* %19411, i64 16
  %19415 = bitcast i16* %19414 to <16 x i16>*
  %19416 = load <16 x i16>, <16 x i16>* %19415, align 2, !tbaa !399
  %19417 = add nsw i64 %19268, %.pre-phi3461
  %19418 = getelementptr inbounds i16, i16* %blur_x841, i64 %19417
  %19419 = bitcast i16* %19418 to <16 x i16>*
  %19420 = load <16 x i16>, <16 x i16>* %19419, align 2, !tbaa !399
  %19421 = getelementptr inbounds i16, i16* %19418, i64 16
  %19422 = bitcast i16* %19421 to <16 x i16>*
  %19423 = load <16 x i16>, <16 x i16>* %19422, align 2, !tbaa !399
  %19424 = add nsw i64 %19271, %.pre-phi3461
  %19425 = getelementptr inbounds i16, i16* %blur_x841, i64 %19424
  %19426 = bitcast i16* %19425 to <16 x i16>*
  %19427 = load <16 x i16>, <16 x i16>* %19426, align 2, !tbaa !399
  %19428 = getelementptr inbounds i16, i16* %19425, i64 16
  %19429 = bitcast i16* %19428 to <16 x i16>*
  %19430 = load <16 x i16>, <16 x i16>* %19429, align 2, !tbaa !399
  %19431 = add <16 x i16> %19420, %19413
  %19432 = add <16 x i16> %19431, %19427
  %19433 = add <16 x i16> %19423, %19416
  %19434 = add <16 x i16> %19433, %19430
  %19435 = shufflevector <16 x i16> %19432, <16 x i16> %19434, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19436 = udiv <32 x i16> %19435, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19437 = shufflevector <32 x i16> %19436, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19438 = add nsw i64 %19275, %.pre-phi3461
  %19439 = getelementptr inbounds i16, i16* %258, i64 %19438
  %19440 = bitcast i16* %19439 to <16 x i16>*
  store <16 x i16> %19437, <16 x i16>* %19440, align 2, !tbaa !401
  %19441 = shufflevector <32 x i16> %19436, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19442 = getelementptr inbounds i16, i16* %19439, i64 16
  %19443 = bitcast i16* %19442 to <16 x i16>*
  store <16 x i16> %19441, <16 x i16>* %19443, align 2, !tbaa !401
  %indvars.iv.next3303 = add nuw nsw i64 %indvars.iv3302, 1
  %.not2439 = icmp eq i64 %indvars.iv.next3303, %515
  br i1 %.not2439, label %"end for blur_y.s0.x.x.rebased2207", label %"for blur_y.s0.x.x.rebased2206"

"for blur_y.s0.x.x.rebased2222":                  ; preds = %"for blur_y.s0.x.x.rebased2222.preheader", %"consume blur_x2233"
  %blur_y.s0.x.x.rebased2224 = phi i32 [ %19518, %"consume blur_x2233" ], [ 0, %"for blur_y.s0.x.x.rebased2222.preheader" ]
  %19444 = add nsw i32 %blur_y.s0.x.x.rebased2224, %t1582776
  %a5725 = shl nsw i32 %19444, 5
  %19445 = icmp sgt i32 %t1603, %a5725
  %blur_y.s0.x.v0.base.s2225 = select i1 %19445, i32 %a5725, i32 %t1603
  %19446 = icmp slt i32 %19444, 1
  %19447 = icmp sgt i32 %194, %a5725
  %19448 = or i1 %19446, %19447
  br i1 %19448, label %"produce blur_x2230", label %"consume blur_x2233"

"end for blur_y.s0.x.x.rebased2223":              ; preds = %"consume blur_x2233", %"end for blur_y.s0.x.x.rebased2207"
  br i1 %225, label %"produce blur_x2237", label %after_bb2234

"produce blur_x2230":                             ; preds = %"for blur_y.s0.x.x.rebased2222"
  %19449 = icmp slt i32 %blur_y.s0.x.v0.base.s2225, %194
  %blur_x.s0.x.v1.base.s2231 = select i1 %19449, i32 %blur_y.s0.x.v0.base.s2225, i32 %194
  %t11572232 = add nsw i32 %502, %blur_x.s0.x.v1.base.s2231
  %19450 = sext i32 %t11572232 to i64
  %19451 = getelementptr inbounds i16, i16* %read_input784, i64 %19450
  %19452 = getelementptr inbounds i16, i16* %19451, i64 1
  %19453 = bitcast i16* %19452 to <16 x i16>*
  %19454 = load <16 x i16>, <16 x i16>* %19453, align 2, !tbaa !396
  %19455 = getelementptr inbounds i16, i16* %19451, i64 17
  %19456 = bitcast i16* %19455 to <16 x i16>*
  %19457 = load <16 x i16>, <16 x i16>* %19456, align 2, !tbaa !396
  %19458 = getelementptr inbounds i16, i16* %19451, i64 2
  %19459 = bitcast i16* %19458 to <16 x i16>*
  %19460 = load <16 x i16>, <16 x i16>* %19459, align 2, !tbaa !396
  %19461 = getelementptr inbounds i16, i16* %19451, i64 18
  %19462 = bitcast i16* %19461 to <16 x i16>*
  %19463 = load <16 x i16>, <16 x i16>* %19462, align 2, !tbaa !396
  %19464 = bitcast i16* %19451 to <16 x i16>*
  %19465 = load <16 x i16>, <16 x i16>* %19464, align 2, !tbaa !396
  %19466 = getelementptr inbounds i16, i16* %19451, i64 16
  %19467 = bitcast i16* %19466 to <16 x i16>*
  %19468 = load <16 x i16>, <16 x i16>* %19467, align 2, !tbaa !396
  %19469 = add <16 x i16> %19460, %19454
  %19470 = add <16 x i16> %19469, %19465
  %19471 = add <16 x i16> %19463, %19457
  %19472 = add <16 x i16> %19471, %19468
  %19473 = shufflevector <16 x i16> %19470, <16 x i16> %19472, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19474 = udiv <32 x i16> %19473, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19475 = shufflevector <32 x i16> %19474, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19476 = sext i32 %blur_x.s0.x.v1.base.s2231 to i64
  %19477 = add nsw i64 %19476, %19363
  %19478 = getelementptr inbounds i16, i16* %blur_x841, i64 %19477
  %19479 = bitcast i16* %19478 to <16 x i16>*
  store <16 x i16> %19475, <16 x i16>* %19479, align 2, !tbaa !399
  %19480 = shufflevector <32 x i16> %19474, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19481 = getelementptr inbounds i16, i16* %19478, i64 16
  %19482 = bitcast i16* %19481 to <16 x i16>*
  store <16 x i16> %19480, <16 x i16>* %19482, align 2, !tbaa !399
  br label %"consume blur_x2233"

"consume blur_x2233":                             ; preds = %"for blur_y.s0.x.x.rebased2222", %"produce blur_x2230"
  %19483 = sext i32 %blur_y.s0.x.v0.base.s2225 to i64
  %19484 = add nsw i64 %19366, %19483
  %19485 = getelementptr inbounds i16, i16* %blur_x841, i64 %19484
  %19486 = bitcast i16* %19485 to <16 x i16>*
  %19487 = load <16 x i16>, <16 x i16>* %19486, align 2, !tbaa !399
  %19488 = getelementptr inbounds i16, i16* %19485, i64 16
  %19489 = bitcast i16* %19488 to <16 x i16>*
  %19490 = load <16 x i16>, <16 x i16>* %19489, align 2, !tbaa !399
  %19491 = add nsw i64 %19369, %19483
  %19492 = getelementptr inbounds i16, i16* %blur_x841, i64 %19491
  %19493 = bitcast i16* %19492 to <16 x i16>*
  %19494 = load <16 x i16>, <16 x i16>* %19493, align 2, !tbaa !399
  %19495 = getelementptr inbounds i16, i16* %19492, i64 16
  %19496 = bitcast i16* %19495 to <16 x i16>*
  %19497 = load <16 x i16>, <16 x i16>* %19496, align 2, !tbaa !399
  %19498 = add nsw i64 %19372, %19483
  %19499 = getelementptr inbounds i16, i16* %blur_x841, i64 %19498
  %19500 = bitcast i16* %19499 to <16 x i16>*
  %19501 = load <16 x i16>, <16 x i16>* %19500, align 2, !tbaa !399
  %19502 = getelementptr inbounds i16, i16* %19499, i64 16
  %19503 = bitcast i16* %19502 to <16 x i16>*
  %19504 = load <16 x i16>, <16 x i16>* %19503, align 2, !tbaa !399
  %19505 = add <16 x i16> %19494, %19487
  %19506 = add <16 x i16> %19505, %19501
  %19507 = add <16 x i16> %19497, %19490
  %19508 = add <16 x i16> %19507, %19504
  %19509 = shufflevector <16 x i16> %19506, <16 x i16> %19508, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19510 = udiv <32 x i16> %19509, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19511 = shufflevector <32 x i16> %19510, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19512 = add nsw i64 %19376, %19483
  %19513 = getelementptr inbounds i16, i16* %258, i64 %19512
  %19514 = bitcast i16* %19513 to <16 x i16>*
  store <16 x i16> %19511, <16 x i16>* %19514, align 2, !tbaa !401
  %19515 = shufflevector <32 x i16> %19510, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19516 = getelementptr inbounds i16, i16* %19513, i64 16
  %19517 = bitcast i16* %19516 to <16 x i16>*
  store <16 x i16> %19515, <16 x i16>* %19517, align 2, !tbaa !401
  %19518 = add nuw nsw i32 %blur_y.s0.x.x.rebased2224, 1
  %.not2438 = icmp eq i32 %19518, %t1639860
  br i1 %.not2438, label %"end for blur_y.s0.x.x.rebased2223", label %"for blur_y.s0.x.x.rebased2222"

after_bb2234:                                     ; preds = %"end for blur_y.s0.x.x.rebased2223", %"produce blur_x2237"
  br i1 %297, label %"for blur_y.s0.x.x.rebased2249.preheader", label %"end for blur_y.s0.x.x.rebased2250", !prof !386

"for blur_y.s0.x.x.rebased2249.preheader":        ; preds = %after_bb2234
  %19519 = sext i32 %t1644876 to i64
  %19520 = zext i32 %.pre-phi3387 to i64
  %19521 = mul nsw i64 %19520, %322
  %19522 = sub nsw i64 %19521, %293
  %19523 = zext i32 %.pre-phi3391 to i64
  %19524 = mul nsw i64 %19523, %322
  %19525 = sub nsw i64 %19524, %293
  %19526 = zext i32 %.pre-phi3401 to i64
  %19527 = mul nsw i64 %19526, %322
  %19528 = sub nsw i64 %19527, %293
  %19529 = sext i32 %a365 to i64
  %19530 = add nsw i64 %19529, 31
  %19531 = mul nsw i64 %19530, %319
  %19532 = add nsw i64 %19531, %323
  br label %"for blur_y.s0.x.x.rebased2249"

"produce blur_x2237":                             ; preds = %"end for blur_y.s0.x.x.rebased2223"
  %19533 = getelementptr inbounds i16, i16* %read_input784, i64 %506
  %19534 = getelementptr inbounds i16, i16* %19533, i64 -31
  %19535 = bitcast i16* %19534 to <16 x i16>*
  %19536 = load <16 x i16>, <16 x i16>* %19535, align 2, !tbaa !396
  %19537 = getelementptr inbounds i16, i16* %19533, i64 -15
  %19538 = bitcast i16* %19537 to <16 x i16>*
  %19539 = load <16 x i16>, <16 x i16>* %19538, align 2, !tbaa !396
  %19540 = getelementptr inbounds i16, i16* %19533, i64 -30
  %19541 = bitcast i16* %19540 to <16 x i16>*
  %19542 = load <16 x i16>, <16 x i16>* %19541, align 2, !tbaa !396
  %19543 = getelementptr inbounds i16, i16* %19533, i64 -14
  %19544 = bitcast i16* %19543 to <16 x i16>*
  %19545 = load <16 x i16>, <16 x i16>* %19544, align 2, !tbaa !396
  %19546 = getelementptr inbounds i16, i16* %19533, i64 -32
  %19547 = bitcast i16* %19546 to <16 x i16>*
  %19548 = load <16 x i16>, <16 x i16>* %19547, align 2, !tbaa !396
  %19549 = getelementptr inbounds i16, i16* %19533, i64 -16
  %19550 = bitcast i16* %19549 to <16 x i16>*
  %19551 = load <16 x i16>, <16 x i16>* %19550, align 2, !tbaa !396
  %19552 = add <16 x i16> %19542, %19536
  %19553 = add <16 x i16> %19552, %19548
  %19554 = add <16 x i16> %19545, %19539
  %19555 = add <16 x i16> %19554, %19551
  %19556 = shufflevector <16 x i16> %19553, <16 x i16> %19555, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19557 = udiv <32 x i16> %19556, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19558 = shufflevector <32 x i16> %19557, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19559 = zext i32 %.pre-phi3391 to i64
  %19560 = mul nsw i64 %294, %19559
  %19561 = add nsw i64 %296, %19560
  %19562 = getelementptr inbounds i16, i16* %blur_x841, i64 %19561
  %19563 = getelementptr inbounds i16, i16* %19562, i64 -32
  %19564 = bitcast i16* %19563 to <16 x i16>*
  store <16 x i16> %19558, <16 x i16>* %19564, align 2, !tbaa !399
  %19565 = shufflevector <32 x i16> %19557, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19566 = getelementptr inbounds i16, i16* %19562, i64 -16
  %19567 = bitcast i16* %19566 to <16 x i16>*
  store <16 x i16> %19565, <16 x i16>* %19567, align 2, !tbaa !399
  %19568 = zext i32 %.pre-phi3387 to i64
  %19569 = mul nsw i64 %19568, %318
  %19570 = add nsw i64 %19569, %291
  %19571 = getelementptr inbounds i16, i16* %blur_x841, i64 %19570
  %19572 = getelementptr inbounds i16, i16* %19571, i64 -32
  %19573 = bitcast i16* %19572 to <16 x i16>*
  %19574 = load <16 x i16>, <16 x i16>* %19573, align 2, !tbaa !399
  %19575 = getelementptr inbounds i16, i16* %19571, i64 -16
  %19576 = bitcast i16* %19575 to <16 x i16>*
  %19577 = load <16 x i16>, <16 x i16>* %19576, align 2, !tbaa !399
  %19578 = mul nsw i64 %19559, %318
  %19579 = add nsw i64 %19578, %291
  %19580 = getelementptr inbounds i16, i16* %blur_x841, i64 %19579
  %19581 = getelementptr inbounds i16, i16* %19580, i64 -32
  %19582 = bitcast i16* %19581 to <16 x i16>*
  %19583 = load <16 x i16>, <16 x i16>* %19582, align 2, !tbaa !399
  %19584 = getelementptr inbounds i16, i16* %19580, i64 -16
  %19585 = bitcast i16* %19584 to <16 x i16>*
  %19586 = load <16 x i16>, <16 x i16>* %19585, align 2, !tbaa !399
  %19587 = zext i32 %.pre-phi3401 to i64
  %19588 = mul nsw i64 %19587, %318
  %19589 = add nsw i64 %19588, %291
  %19590 = getelementptr inbounds i16, i16* %blur_x841, i64 %19589
  %19591 = getelementptr inbounds i16, i16* %19590, i64 -32
  %19592 = bitcast i16* %19591 to <16 x i16>*
  %19593 = load <16 x i16>, <16 x i16>* %19592, align 2, !tbaa !399
  %19594 = getelementptr inbounds i16, i16* %19590, i64 -16
  %19595 = bitcast i16* %19594 to <16 x i16>*
  %19596 = load <16 x i16>, <16 x i16>* %19595, align 2, !tbaa !399
  %19597 = add <16 x i16> %19583, %19574
  %19598 = add <16 x i16> %19597, %19593
  %19599 = add <16 x i16> %19586, %19577
  %19600 = add <16 x i16> %19599, %19596
  %19601 = shufflevector <16 x i16> %19598, <16 x i16> %19600, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19602 = udiv <32 x i16> %19601, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19603 = shufflevector <32 x i16> %19602, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19604 = sext i32 %a365 to i64
  %19605 = add nsw i64 %19604, 31
  %19606 = mul nsw i64 %19605, %319
  %19607 = add nsw i64 %321, %19606
  %19608 = getelementptr inbounds i16, i16* %258, i64 %19607
  %19609 = getelementptr inbounds i16, i16* %19608, i64 -32
  %19610 = bitcast i16* %19609 to <16 x i16>*
  store <16 x i16> %19603, <16 x i16>* %19610, align 2, !tbaa !401
  %19611 = shufflevector <32 x i16> %19602, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19612 = getelementptr inbounds i16, i16* %19608, i64 -16
  %19613 = bitcast i16* %19612 to <16 x i16>*
  store <16 x i16> %19611, <16 x i16>* %19613, align 2, !tbaa !401
  br label %after_bb2234

"for blur_y.s0.x.x.rebased2249":                  ; preds = %"for blur_y.s0.x.x.rebased2249.preheader", %"consume blur_x2257"
  %indvars.iv3304 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2249.preheader" ], [ %indvars.iv.next3305, %"consume blur_x2257" ]
  %19614 = add nsw i64 %indvars.iv3304, %298
  %19615 = icmp slt i64 %19614, 1
  %19616 = trunc i64 %19614 to i32
  %19617 = shl nsw i32 %19616, 5
  %19618 = icmp sgt i32 %194, %19617
  %19619 = or i1 %19615, %19618
  br i1 %19619, label %"produce blur_x2255", label %"for blur_y.s0.x.x.rebased2249.consume blur_x2257_crit_edge"

"for blur_y.s0.x.x.rebased2249.consume blur_x2257_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2249"
  %.pre3462 = shl nsw i64 %19614, 5
  br label %"consume blur_x2257"

"end for blur_y.s0.x.x.rebased2250":              ; preds = %"consume blur_x2257", %after_bb2234
  br i1 %299, label %"for blur_y.s0.x.x.rebased2265.preheader", label %"end for blur_y.s0.x.x.rebased2266", !prof !386

"for blur_y.s0.x.x.rebased2265.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2250"
  %19620 = sext i32 %t1644876 to i64
  %19621 = zext i32 %.pre-phi3387 to i64
  %19622 = mul nsw i64 %19621, %322
  %19623 = sub nsw i64 %19622, %293
  %19624 = zext i32 %.pre-phi3391 to i64
  %19625 = mul nsw i64 %19624, %322
  %19626 = sub nsw i64 %19625, %293
  %19627 = zext i32 %.pre-phi3401 to i64
  %19628 = mul nsw i64 %19627, %322
  %19629 = sub nsw i64 %19628, %293
  %19630 = sext i32 %a365 to i64
  %19631 = add nsw i64 %19630, 31
  %19632 = mul nsw i64 %19631, %319
  %19633 = add nsw i64 %19632, %323
  br label %"for blur_y.s0.x.x.rebased2265"

"produce blur_x2255":                             ; preds = %"for blur_y.s0.x.x.rebased2249"
  %t11682256 = add nsw i32 %508, %19617
  %19634 = sext i32 %t11682256 to i64
  %19635 = getelementptr inbounds i16, i16* %read_input784, i64 %19634
  %19636 = getelementptr inbounds i16, i16* %19635, i64 1
  %19637 = bitcast i16* %19636 to <16 x i16>*
  %19638 = load <16 x i16>, <16 x i16>* %19637, align 2, !tbaa !396
  %19639 = getelementptr inbounds i16, i16* %19635, i64 17
  %19640 = bitcast i16* %19639 to <16 x i16>*
  %19641 = load <16 x i16>, <16 x i16>* %19640, align 2, !tbaa !396
  %19642 = getelementptr inbounds i16, i16* %19635, i64 2
  %19643 = bitcast i16* %19642 to <16 x i16>*
  %19644 = load <16 x i16>, <16 x i16>* %19643, align 2, !tbaa !396
  %19645 = getelementptr inbounds i16, i16* %19635, i64 18
  %19646 = bitcast i16* %19645 to <16 x i16>*
  %19647 = load <16 x i16>, <16 x i16>* %19646, align 2, !tbaa !396
  %19648 = bitcast i16* %19635 to <16 x i16>*
  %19649 = load <16 x i16>, <16 x i16>* %19648, align 2, !tbaa !396
  %19650 = getelementptr inbounds i16, i16* %19635, i64 16
  %19651 = bitcast i16* %19650 to <16 x i16>*
  %19652 = load <16 x i16>, <16 x i16>* %19651, align 2, !tbaa !396
  %19653 = add <16 x i16> %19644, %19638
  %19654 = add <16 x i16> %19653, %19649
  %19655 = add <16 x i16> %19647, %19641
  %19656 = add <16 x i16> %19655, %19652
  %19657 = shufflevector <16 x i16> %19654, <16 x i16> %19656, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19658 = udiv <32 x i16> %19657, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19659 = shufflevector <32 x i16> %19658, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19660 = shl nsw i64 %19614, 5
  %19661 = add nsw i64 %19660, %19519
  %19662 = getelementptr inbounds i16, i16* %blur_x841, i64 %19661
  %19663 = bitcast i16* %19662 to <16 x i16>*
  store <16 x i16> %19659, <16 x i16>* %19663, align 2, !tbaa !399
  %19664 = shufflevector <32 x i16> %19658, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19665 = getelementptr inbounds i16, i16* %19662, i64 16
  %19666 = bitcast i16* %19665 to <16 x i16>*
  store <16 x i16> %19664, <16 x i16>* %19666, align 2, !tbaa !399
  br label %"consume blur_x2257"

"consume blur_x2257":                             ; preds = %"for blur_y.s0.x.x.rebased2249.consume blur_x2257_crit_edge", %"produce blur_x2255"
  %.pre-phi3463 = phi i64 [ %.pre3462, %"for blur_y.s0.x.x.rebased2249.consume blur_x2257_crit_edge" ], [ %19660, %"produce blur_x2255" ]
  %19667 = add nsw i64 %19522, %.pre-phi3463
  %19668 = getelementptr inbounds i16, i16* %blur_x841, i64 %19667
  %19669 = bitcast i16* %19668 to <16 x i16>*
  %19670 = load <16 x i16>, <16 x i16>* %19669, align 2, !tbaa !399
  %19671 = getelementptr inbounds i16, i16* %19668, i64 16
  %19672 = bitcast i16* %19671 to <16 x i16>*
  %19673 = load <16 x i16>, <16 x i16>* %19672, align 2, !tbaa !399
  %19674 = add nsw i64 %19525, %.pre-phi3463
  %19675 = getelementptr inbounds i16, i16* %blur_x841, i64 %19674
  %19676 = bitcast i16* %19675 to <16 x i16>*
  %19677 = load <16 x i16>, <16 x i16>* %19676, align 2, !tbaa !399
  %19678 = getelementptr inbounds i16, i16* %19675, i64 16
  %19679 = bitcast i16* %19678 to <16 x i16>*
  %19680 = load <16 x i16>, <16 x i16>* %19679, align 2, !tbaa !399
  %19681 = add nsw i64 %19528, %.pre-phi3463
  %19682 = getelementptr inbounds i16, i16* %blur_x841, i64 %19681
  %19683 = bitcast i16* %19682 to <16 x i16>*
  %19684 = load <16 x i16>, <16 x i16>* %19683, align 2, !tbaa !399
  %19685 = getelementptr inbounds i16, i16* %19682, i64 16
  %19686 = bitcast i16* %19685 to <16 x i16>*
  %19687 = load <16 x i16>, <16 x i16>* %19686, align 2, !tbaa !399
  %19688 = add <16 x i16> %19677, %19670
  %19689 = add <16 x i16> %19688, %19684
  %19690 = add <16 x i16> %19680, %19673
  %19691 = add <16 x i16> %19690, %19687
  %19692 = shufflevector <16 x i16> %19689, <16 x i16> %19691, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19693 = udiv <32 x i16> %19692, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19694 = shufflevector <32 x i16> %19693, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19695 = add nsw i64 %19532, %.pre-phi3463
  %19696 = getelementptr inbounds i16, i16* %258, i64 %19695
  %19697 = bitcast i16* %19696 to <16 x i16>*
  store <16 x i16> %19694, <16 x i16>* %19697, align 2, !tbaa !401
  %19698 = shufflevector <32 x i16> %19693, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19699 = getelementptr inbounds i16, i16* %19696, i64 16
  %19700 = bitcast i16* %19699 to <16 x i16>*
  store <16 x i16> %19698, <16 x i16>* %19700, align 2, !tbaa !401
  %indvars.iv.next3305 = add nuw nsw i64 %indvars.iv3304, 1
  %.not2436 = icmp eq i64 %indvars.iv.next3305, %515
  br i1 %.not2436, label %"end for blur_y.s0.x.x.rebased2250", label %"for blur_y.s0.x.x.rebased2249"

"for blur_y.s0.x.x.rebased2265":                  ; preds = %"for blur_y.s0.x.x.rebased2265.preheader", %"consume blur_x2276"
  %blur_y.s0.x.x.rebased2267 = phi i32 [ %19776, %"consume blur_x2276" ], [ 0, %"for blur_y.s0.x.x.rebased2265.preheader" ]
  %19701 = add nsw i32 %blur_y.s0.x.x.rebased2267, %t1582776
  %a5882 = shl nsw i32 %19701, 5
  %19702 = icmp sgt i32 %t1603, %a5882
  %blur_y.s0.x.v0.base.s2268 = select i1 %19702, i32 %a5882, i32 %t1603
  %19703 = icmp slt i32 %19701, 1
  %19704 = icmp sgt i32 %194, %a5882
  %19705 = or i1 %19703, %19704
  br i1 %19705, label %"produce blur_x2273", label %"consume blur_x2276"

"end for blur_y.s0.x.x.rebased2266":              ; preds = %"consume blur_x2276", %"end for blur_y.s0.x.x.rebased2250"
  %19706 = add nuw nsw i32 %blur_y.s0.y.y780, 1
  %.not2434 = icmp eq i32 %19706, %t1568777
  br i1 %.not2434, label %if.then.i2743.loopexit, label %"for blur_y.s0.y.y778"

"produce blur_x2273":                             ; preds = %"for blur_y.s0.x.x.rebased2265"
  %19707 = icmp slt i32 %blur_y.s0.x.v0.base.s2268, %194
  %blur_x.s0.x.v1.base.s2274 = select i1 %19707, i32 %blur_y.s0.x.v0.base.s2268, i32 %194
  %t11732275 = add nsw i32 %508, %blur_x.s0.x.v1.base.s2274
  %19708 = sext i32 %t11732275 to i64
  %19709 = getelementptr inbounds i16, i16* %read_input784, i64 %19708
  %19710 = getelementptr inbounds i16, i16* %19709, i64 1
  %19711 = bitcast i16* %19710 to <16 x i16>*
  %19712 = load <16 x i16>, <16 x i16>* %19711, align 2, !tbaa !396
  %19713 = getelementptr inbounds i16, i16* %19709, i64 17
  %19714 = bitcast i16* %19713 to <16 x i16>*
  %19715 = load <16 x i16>, <16 x i16>* %19714, align 2, !tbaa !396
  %19716 = getelementptr inbounds i16, i16* %19709, i64 2
  %19717 = bitcast i16* %19716 to <16 x i16>*
  %19718 = load <16 x i16>, <16 x i16>* %19717, align 2, !tbaa !396
  %19719 = getelementptr inbounds i16, i16* %19709, i64 18
  %19720 = bitcast i16* %19719 to <16 x i16>*
  %19721 = load <16 x i16>, <16 x i16>* %19720, align 2, !tbaa !396
  %19722 = bitcast i16* %19709 to <16 x i16>*
  %19723 = load <16 x i16>, <16 x i16>* %19722, align 2, !tbaa !396
  %19724 = getelementptr inbounds i16, i16* %19709, i64 16
  %19725 = bitcast i16* %19724 to <16 x i16>*
  %19726 = load <16 x i16>, <16 x i16>* %19725, align 2, !tbaa !396
  %19727 = add <16 x i16> %19718, %19712
  %19728 = add <16 x i16> %19727, %19723
  %19729 = add <16 x i16> %19721, %19715
  %19730 = add <16 x i16> %19729, %19726
  %19731 = shufflevector <16 x i16> %19728, <16 x i16> %19730, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19732 = udiv <32 x i16> %19731, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19733 = shufflevector <32 x i16> %19732, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19734 = sext i32 %blur_x.s0.x.v1.base.s2274 to i64
  %19735 = add nsw i64 %19734, %19620
  %19736 = getelementptr inbounds i16, i16* %blur_x841, i64 %19735
  %19737 = bitcast i16* %19736 to <16 x i16>*
  store <16 x i16> %19733, <16 x i16>* %19737, align 2, !tbaa !399
  %19738 = shufflevector <32 x i16> %19732, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19739 = getelementptr inbounds i16, i16* %19736, i64 16
  %19740 = bitcast i16* %19739 to <16 x i16>*
  store <16 x i16> %19738, <16 x i16>* %19740, align 2, !tbaa !399
  br label %"consume blur_x2276"

"consume blur_x2276":                             ; preds = %"for blur_y.s0.x.x.rebased2265", %"produce blur_x2273"
  %19741 = sext i32 %blur_y.s0.x.v0.base.s2268 to i64
  %19742 = add nsw i64 %19623, %19741
  %19743 = getelementptr inbounds i16, i16* %blur_x841, i64 %19742
  %19744 = bitcast i16* %19743 to <16 x i16>*
  %19745 = load <16 x i16>, <16 x i16>* %19744, align 2, !tbaa !399
  %19746 = getelementptr inbounds i16, i16* %19743, i64 16
  %19747 = bitcast i16* %19746 to <16 x i16>*
  %19748 = load <16 x i16>, <16 x i16>* %19747, align 2, !tbaa !399
  %19749 = add nsw i64 %19626, %19741
  %19750 = getelementptr inbounds i16, i16* %blur_x841, i64 %19749
  %19751 = bitcast i16* %19750 to <16 x i16>*
  %19752 = load <16 x i16>, <16 x i16>* %19751, align 2, !tbaa !399
  %19753 = getelementptr inbounds i16, i16* %19750, i64 16
  %19754 = bitcast i16* %19753 to <16 x i16>*
  %19755 = load <16 x i16>, <16 x i16>* %19754, align 2, !tbaa !399
  %19756 = add nsw i64 %19629, %19741
  %19757 = getelementptr inbounds i16, i16* %blur_x841, i64 %19756
  %19758 = bitcast i16* %19757 to <16 x i16>*
  %19759 = load <16 x i16>, <16 x i16>* %19758, align 2, !tbaa !399
  %19760 = getelementptr inbounds i16, i16* %19757, i64 16
  %19761 = bitcast i16* %19760 to <16 x i16>*
  %19762 = load <16 x i16>, <16 x i16>* %19761, align 2, !tbaa !399
  %19763 = add <16 x i16> %19752, %19745
  %19764 = add <16 x i16> %19763, %19759
  %19765 = add <16 x i16> %19755, %19748
  %19766 = add <16 x i16> %19765, %19762
  %19767 = shufflevector <16 x i16> %19764, <16 x i16> %19766, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19768 = udiv <32 x i16> %19767, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %19769 = shufflevector <32 x i16> %19768, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19770 = add nsw i64 %19633, %19741
  %19771 = getelementptr inbounds i16, i16* %258, i64 %19770
  %19772 = bitcast i16* %19771 to <16 x i16>*
  store <16 x i16> %19769, <16 x i16>* %19772, align 2, !tbaa !401
  %19773 = shufflevector <32 x i16> %19768, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19774 = getelementptr inbounds i16, i16* %19771, i64 16
  %19775 = bitcast i16* %19774 to <16 x i16>*
  store <16 x i16> %19773, <16 x i16>* %19775, align 2, !tbaa !401
  %19776 = add nuw nsw i32 %blur_y.s0.x.x.rebased2267, 1
  %.not2435 = icmp eq i32 %19776, %t1639860
  br i1 %.not2435, label %"end for blur_y.s0.x.x.rebased2266", label %"for blur_y.s0.x.x.rebased2265"
}

; Function Attrs: nounwind
define i32 @blur3x3_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @blur3x3(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #18
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @blur3x3_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @blur3x3_metadata_storage
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.0(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.1(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.2(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.3(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.4(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.5(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.6(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.7(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.8(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.9(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.10(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.11(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.12(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.13(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.14(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.15(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.16(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.17(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.18(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.19(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.20(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.21(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.22(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.23(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.24(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.25(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.26(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.27(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.28(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.29(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.30(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.31(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.32(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.33(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.34(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.35(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.36(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.37(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.38(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.39(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.40(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.41(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.42(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.43(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.44(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.45(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.46(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.47(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.48(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.49(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.50(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.51(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.52(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.53(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.54(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.55(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.56(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.57(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.58(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.59(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.60(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.61(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.62(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.63(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.64(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.65(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.66(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.67(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.68(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.69(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.70(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.71(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.72(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.73(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.74(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.75(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.76(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.77(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.78(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.79(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.80(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.81(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.82(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.83(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.84(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.85(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.86(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.87(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.88(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.89(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.90(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.91(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.92(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.93(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.94(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.95(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.96(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.97(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.98(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.99(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.100(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.101(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.102(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.103(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.104(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.105(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.106(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.107(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.108(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.109(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.110(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.111(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.112(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.113(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.114(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.115(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.116(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.117(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.118(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.119(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.120(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.121(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.122(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.123(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.124(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.125(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.126(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.127(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.128(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.129(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.130(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.131(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.132(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.133(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.134(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.135(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.136(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.137(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.138(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.139(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.140(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.141(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.142(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.143(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.144(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.145(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.146(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.147(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.148(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.149(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.150(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.151(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.152(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.153(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.154(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.155(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.156(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.157(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.158(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.159(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.160(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.161(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.162(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.163(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.164(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.165(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.166(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.167(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.168(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.169(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.170(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.171(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.172(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.173(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.174(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.175(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.176(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.177(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.178(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.179(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.180(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.181(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.182(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.183(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.184(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.185(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.186(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.187(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.188(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.189(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.190(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.191(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.192(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.193(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.194(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.195(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.196(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen.197(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = udiv <32 x i16> %1, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <32 x i16> %2
}

; Function Attrs: nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32>, <8 x i32*>, i32 immarg, <8 x i1>) #13

; Function Attrs: nofree nosync nounwind readonly willreturn
declare <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*>, i32 immarg, <4 x i1>, <4 x i32>) #14

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v4i64(<4 x i64>) #15

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind willreturn writeonly }
attributes #14 = { nofree nosync nounwind readonly willreturn }
attributes #15 = { nofree nosync nounwind readnone willreturn }
attributes #16 = { nobuiltin nounwind "no-builtins" }
attributes #17 = { nobuiltin "no-builtins" }
attributes #18 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"cascadelake"}
!4 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long", !12, i64 0}
!20 = !{!21, !11, i64 0}
!21 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !22, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !23, i64 80, !11, i64 88, !23, i64 96, !11, i64 104, !23, i64 112, !23, i64 116, !23, i64 120, !16, i64 124}
!22 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !23, i64 32, !23, i64 36, !23, i64 40, !23, i64 44, !16, i64 48}
!23 = !{!"int", !12, i64 0}
!24 = !{!21, !23, i64 36}
!25 = !{!21, !23, i64 40}
!26 = !{!21, !16, i64 48}
!27 = !{!21, !11, i64 24}
!28 = !{!21, !23, i64 32}
!29 = !{!21, !11, i64 8}
!30 = !{!21, !23, i64 44}
!31 = !{!21, !11, i64 16}
!32 = !{!21, !11, i64 56}
!33 = !{!21, !11, i64 104}
!34 = !{!21, !23, i64 116}
!35 = !{!21, !23, i64 112}
!36 = !{!21, !23, i64 120}
!37 = !{!21, !16, i64 124}
!38 = !{!21, !11, i64 72}
!39 = !{!21, !23, i64 80}
!40 = !{!21, !11, i64 88}
!41 = !{!42, !42, i64 0}
!42 = !{!"vtable pointer", !13, i64 0}
!43 = !{!44, !11, i64 8}
!44 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!45 = !{!46, !16, i64 2121}
!46 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !47, i64 0, !23, i64 8, !23, i64 12, !11, i64 16, !23, i64 24, !23, i64 28, !23, i64 32, !48, i64 40, !48, i64 48, !48, i64 56, !23, i64 64, !23, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !23, i64 2124}
!47 = !{!"_ZTS12halide_mutex", !12, i64 0}
!48 = !{!"_ZTS11halide_cond", !12, i64 0}
!49 = distinct !{!49, !50}
!50 = !{!"llvm.loop.mustprogress"}
!51 = !{!46, !23, i64 8}
!52 = !{!46, !23, i64 24}
!53 = !{!46, !23, i64 2124}
!54 = !{!46, !23, i64 28}
!55 = distinct !{!55, !50}
!56 = !{!21, !23, i64 96}
!57 = !{!46, !11, i64 16}
!58 = !{!21, !11, i64 64}
!59 = !{!46, !23, i64 68}
!60 = !{!46, !23, i64 32}
!61 = distinct !{!61, !50}
!62 = distinct !{!62, !50}
!63 = !{!46, !16, i64 2120}
!64 = distinct !{!64, !50}
!65 = !{!66, !11, i64 0}
!66 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !23, i64 8}
!67 = !{!66, !23, i64 8}
!68 = distinct !{!68, !50}
!69 = !{!46, !23, i64 64}
!70 = distinct !{!70, !50}
!71 = distinct !{!71, !50}
!72 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !73, i64 88, i64 8, !10, i64 96, i64 4, !73, i64 104, i64 8, !10, i64 112, i64 4, !73, i64 116, i64 4, !73, i64 120, i64 4, !73, i64 124, i64 1, !15}
!73 = !{!23, !23, i64 0}
!74 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 28, i64 4, !73, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !73, i64 80, i64 8, !10, i64 88, i64 4, !73, i64 96, i64 8, !10, i64 104, i64 4, !73, i64 108, i64 4, !73, i64 112, i64 4, !73, i64 116, i64 1, !15}
!75 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 32, i64 8, !10, i64 40, i64 4, !73, i64 48, i64 8, !10, i64 56, i64 4, !73, i64 60, i64 4, !73, i64 64, i64 4, !73, i64 68, i64 1, !15}
!76 = !{i64 0, i64 8, !10, i64 8, i64 4, !73, i64 12, i64 4, !73, i64 16, i64 4, !73, i64 20, i64 1, !15}
!77 = distinct !{!77, !50}
!78 = distinct !{!78, !50}
!79 = !{!80, !11, i64 144}
!80 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !81, i64 0, !84, i64 136, !11, i64 144, !84, i64 152}
!81 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !82, i64 0, !83, i64 64, !16, i64 128}
!82 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!83 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!84 = !{!"long long", !12, i64 0}
!85 = !{!86, !11, i64 16}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !87, i64 0, !11, i64 8, !11, i64 16}
!87 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !84, i64 0}
!88 = distinct !{!88, !50}
!89 = !{!80, !84, i64 152}
!90 = !{!81, !16, i64 128}
!91 = distinct !{!91, !50}
!92 = !{!93, !11, i64 152}
!93 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !81, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!94 = !{!93, !11, i64 136}
!95 = !{!93, !11, i64 144}
!96 = distinct !{!96, !50}
!97 = distinct !{!97, !50}
!98 = distinct !{!98, !50}
!99 = !{!100, !11, i64 8}
!100 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!101 = !{!100, !11, i64 16}
!102 = !{!103, !11, i64 8}
!103 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!104 = !{!103, !11, i64 16}
!105 = !{!80, !84, i64 136}
!106 = !{!107, !16, i64 0}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !84, i64 8}
!108 = !{!107, !84, i64 8}
!109 = !{!86, !11, i64 8}
!110 = !{!84, !84, i64 0}
!111 = !{!112, !11, i64 0}
!112 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!113 = distinct !{!113, !50}
!114 = !{!112, !11, i64 8}
!115 = !{!116, !11, i64 0}
!116 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !19, i64 16}
!117 = !{!116, !11, i64 8}
!118 = !{!116, !19, i64 16}
!119 = !{!22, !23, i64 40}
!120 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15}
!121 = distinct !{!121, !50}
!122 = distinct !{!122, !50}
!123 = distinct !{!123, !50}
!124 = !{!125, !11, i64 8}
!125 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!126 = !{!125, !11, i64 16}
!127 = !{!128, !11, i64 0}
!128 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!129 = distinct !{!129, !50}
!130 = !{!131, !134, i64 34}
!131 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !132, i64 32, !135, i64 36, !23, i64 40, !23, i64 44, !23, i64 48}
!132 = !{!"_ZTS13halide_type_t", !133, i64 0, !12, i64 1, !134, i64 2}
!133 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!134 = !{!"short", !12, i64 0}
!135 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!136 = !{!132, !12, i64 1}
!137 = !{!131, !23, i64 48}
!138 = !{!131, !11, i64 0}
!139 = !{!131, !11, i64 24}
!140 = !{!141, !23, i64 0}
!141 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !23, i64 0}
!142 = !{!143, !23, i64 4}
!143 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !141, i64 0, !23, i64 4, !23, i64 8, !12, i64 12}
!144 = !{!143, !23, i64 8}
!145 = distinct !{!145, !50}
!146 = !{!147, !23, i64 0}
!147 = !{!"_ZTS21halide_trace_packet_t", !23, i64 0, !23, i64 4, !132, i64 8, !135, i64 12, !23, i64 16, !23, i64 20, !23, i64 24}
!148 = !{!147, !23, i64 4}
!149 = !{!131, !11, i64 16}
!150 = !{!131, !11, i64 8}
!151 = !{!147, !23, i64 24}
!152 = !{!147, !134, i64 10}
!153 = distinct !{!153, !50}
!154 = !{!131, !135, i64 36}
!155 = !{!131, !12, i64 33}
!156 = distinct !{!156, !50}
!157 = !{!131, !23, i64 44}
!158 = distinct !{!158, !50, !159}
!159 = !{!"llvm.loop.peeled.count", i32 1}
!160 = !{!131, !133, i64 32}
!161 = !{!134, !134, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"float", !12, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"double", !12, i64 0}
!166 = distinct !{!166, !50, !159}
!167 = distinct !{!167, !50}
!168 = !{!131, !23, i64 40}
!169 = distinct !{!169, !50}
!170 = distinct !{!170, !50}
!171 = distinct !{!171, !50}
!172 = !{!173, !11, i64 16}
!173 = !{!"_ZTS15halide_buffer_t", !84, i64 0, !11, i64 8, !11, i64 16, !84, i64 24, !132, i64 32, !23, i64 36, !11, i64 40, !11, i64 48}
!174 = !{!173, !84, i64 0}
!175 = !{!173, !23, i64 36}
!176 = !{!173, !11, i64 40}
!177 = !{i64 0, i64 4, !73, i64 4, i64 4, !73, i64 8, i64 4, !73, i64 12, i64 4, !73}
!178 = !{!179, !23, i64 4}
!179 = !{!"_ZTS18halide_dimension_t", !23, i64 0, !23, i64 4, !23, i64 8, !23, i64 12}
!180 = distinct !{!180, !50}
!181 = !{!179, !23, i64 0}
!182 = !{!179, !23, i64 8}
!183 = distinct !{!183, !50, !184}
!184 = !{!"llvm.loop.isvectorized", i32 1}
!185 = distinct !{!185, !186}
!186 = !{!"llvm.loop.unroll.disable"}
!187 = distinct !{!187, !50, !188, !184}
!188 = !{!"llvm.loop.unroll.runtime.disable"}
!189 = !{!190, !134, i64 0}
!190 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !134, i64 0, !134, i64 2, !23, i64 4, !134, i64 8, !12, i64 10, !23, i64 190, !12, i64 194, !12, i64 202}
!191 = !{!190, !134, i64 2}
!192 = !{!190, !23, i64 4}
!193 = !{!190, !134, i64 8}
!194 = !{!195, !134, i64 0}
!195 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !134, i64 0, !134, i64 2, !23, i64 4, !12, i64 8}
!196 = !{!195, !134, i64 2}
!197 = !{!195, !23, i64 4}
!198 = distinct !{!198, !50}
!199 = distinct !{!199, !50}
!200 = distinct !{!200, !50}
!201 = distinct !{!201, !50}
!202 = distinct !{!202, !50}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !50, !184}
!209 = distinct !{!209, !186}
!210 = distinct !{!210, !186}
!211 = distinct !{!211, !50, !184}
!212 = distinct !{!212, !186}
!213 = distinct !{!213, !50, !184}
!214 = distinct !{!214, !50, !184}
!215 = distinct !{!215, !50, !188, !184}
!216 = distinct !{!216, !50, !184}
!217 = distinct !{!217, !50, !188, !184}
!218 = distinct !{!218, !50, !184}
!219 = distinct !{!219, !50, !188, !184}
!220 = distinct !{!220, !50}
!221 = distinct !{!221, !50, !184}
!222 = distinct !{!222, !50, !188, !184}
!223 = distinct !{!223, !50}
!224 = distinct !{!224, !50}
!225 = distinct !{!225, !50}
!226 = distinct !{!226, !50}
!227 = !{!228, !11, i64 0}
!228 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !19, i64 32, !11, i64 40, !23, i64 48, !23, i64 52, !23, i64 56, !23, i64 60, !11, i64 64, !11, i64 72, !84, i64 80, !16, i64 88}
!229 = distinct !{!229, !50}
!230 = !{!228, !23, i64 56}
!231 = !{!228, !11, i64 24}
!232 = !{!228, !11, i64 72}
!233 = distinct !{!233, !50}
!234 = distinct !{!234, !50}
!235 = !{!236, !84, i64 0}
!236 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !84, i64 0, !84, i64 8, !84, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !84, i64 408}
!237 = !{!236, !84, i64 8}
!238 = !{!236, !84, i64 408}
!239 = distinct !{!239, !50}
!240 = !{!236, !84, i64 16}
!241 = distinct !{!241, !50, !184}
!242 = distinct !{!242, !50, !188, !184}
!243 = distinct !{!243, !50}
!244 = distinct !{!244, !186}
!245 = distinct !{!245, !50}
!246 = distinct !{!246, !50}
!247 = distinct !{!247, !50}
!248 = !{i64 0, i64 8, !110, i64 8, i64 8, !110, i64 16, i64 8, !110, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !110}
!249 = distinct !{!249, !50}
!250 = !{!179, !23, i64 12}
!251 = !{!228, !11, i64 16}
!252 = !{!228, !19, i64 32}
!253 = !{!228, !23, i64 48}
!254 = !{!228, !23, i64 52}
!255 = !{!228, !23, i64 60}
!256 = !{!228, !11, i64 64}
!257 = !{!228, !11, i64 40}
!258 = distinct !{!258, !50}
!259 = distinct !{!259, !50}
!260 = distinct !{!260, !50}
!261 = !{!228, !16, i64 88}
!262 = !{!228, !84, i64 80}
!263 = !{i64 0, i64 8, !110, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !110, i64 32, i64 1, !264, i64 33, i64 1, !14, i64 34, i64 2, !161, i64 36, i64 4, !73, i64 40, i64 8, !10, i64 48, i64 8, !10}
!264 = !{!133, !133, i64 0}
!265 = distinct !{!265, !50}
!266 = distinct !{!266, !186}
!267 = distinct !{!267, !50}
!268 = !{!228, !11, i64 8}
!269 = distinct !{!269, !50}
!270 = distinct !{!270, !50, !184}
!271 = distinct !{!271, !50, !188, !184}
!272 = distinct !{!272, !50, !184}
!273 = distinct !{!273, !50, !188, !184}
!274 = distinct !{!274, !50}
!275 = distinct !{!275, !50}
!276 = distinct !{!276, !50}
!277 = distinct !{!277, !50}
!278 = distinct !{!278, !50}
!279 = distinct !{!279, !50, !184}
!280 = distinct !{!280, !50, !188, !184}
!281 = distinct !{!281, !50, !184}
!282 = distinct !{!282, !50, !188, !184}
!283 = distinct !{!283, !50}
!284 = !{!285, !23, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !23, i64 8}
!286 = !{!285, !11, i64 0}
!287 = distinct !{!287, !50}
!288 = distinct !{!288, !186}
!289 = distinct !{!289, !50}
!290 = distinct !{!290, !50}
!291 = distinct !{!291, !50}
!292 = distinct !{!292, !50, !184}
!293 = distinct !{!293, !50, !188, !184}
!294 = distinct !{!294, !50, !184}
!295 = distinct !{!295, !50, !188, !184}
!296 = distinct !{!296, !50}
!297 = distinct !{!297, !50}
!298 = distinct !{!298, !50}
!299 = distinct !{!299, !50}
!300 = distinct !{!300, !50}
!301 = distinct !{!301, !50}
!302 = distinct !{!302, !50}
!303 = distinct !{!303, !50}
!304 = distinct !{!304, !50}
!305 = !{!132, !133, i64 0}
!306 = !{!132, !134, i64 2}
!307 = !{!173, !11, i64 8}
!308 = !{!173, !84, i64 24}
!309 = distinct !{!309, !50}
!310 = !{!311, !11, i64 0}
!311 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!312 = distinct !{!312, !50}
!313 = !{!311, !11, i64 8}
!314 = !{!315, !11, i64 120}
!315 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!316 = !{!317, !11, i64 48}
!317 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!318 = !{!317, !11, i64 40}
!319 = !{!317, !11, i64 56}
!320 = !{!317, !11, i64 0}
!321 = !{!317, !11, i64 16}
!322 = !{!317, !11, i64 8}
!323 = !{!317, !11, i64 32}
!324 = !{!317, !11, i64 24}
!325 = !{!317, !11, i64 64}
!326 = !{!317, !11, i64 72}
!327 = distinct !{!327, !50, !184}
!328 = distinct !{!328, !50, !188, !184}
!329 = distinct !{!329, !50, !184}
!330 = distinct !{!330, !50, !188, !184}
!331 = !{!317, !11, i64 112}
!332 = !{!317, !11, i64 120}
!333 = !{!317, !11, i64 80}
!334 = !{!317, !11, i64 88}
!335 = !{!317, !11, i64 96}
!336 = !{!317, !11, i64 104}
!337 = !{i32 22, i32 33}
!338 = !{!339, !11, i64 40}
!339 = !{!"_ZTS21halide_profiler_state", !47, i64 0, !23, i64 8, !23, i64 12, !23, i64 16, !23, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!340 = !{!339, !23, i64 16}
!341 = !{!342, !84, i64 0}
!342 = !{!"_ZTS30halide_profiler_pipeline_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !23, i64 72, !23, i64 76, !23, i64 80, !23, i64 84, !23, i64 88}
!343 = !{!342, !23, i64 80}
!344 = !{!342, !84, i64 32}
!345 = !{!342, !84, i64 40}
!346 = !{!342, !11, i64 48}
!347 = !{!342, !23, i64 84}
!348 = !{!342, !23, i64 88}
!349 = !{!342, !84, i64 16}
!350 = !{!342, !84, i64 24}
!351 = !{!342, !23, i64 72}
!352 = !{!342, !11, i64 56}
!353 = distinct !{!353, !50}
!354 = !{!355, !84, i64 32}
!355 = !{!"_ZTS26halide_profiler_func_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !84, i64 48, !11, i64 56, !23, i64 64}
!356 = !{!355, !84, i64 0}
!357 = !{!355, !11, i64 56}
!358 = distinct !{!358, !50}
!359 = distinct !{!359, !50}
!360 = distinct !{!360, !50}
!361 = !{!355, !84, i64 40}
!362 = !{!355, !84, i64 48}
!363 = distinct !{!363, !50}
!364 = !{!355, !84, i64 16}
!365 = distinct !{!365, !50}
!366 = !{!355, !23, i64 64}
!367 = distinct !{!367, !50}
!368 = !{!355, !84, i64 24}
!369 = distinct !{!369, !50}
!370 = distinct !{!370, !50}
!371 = !{!339, !11, i64 24}
!372 = !{!342, !11, i64 64}
!373 = distinct !{!373, !50}
!374 = !{!339, !23, i64 12}
!375 = distinct !{!375, !50}
!376 = !{!342, !23, i64 76}
!377 = distinct !{!377, !50}
!378 = distinct !{!378, !50}
!379 = !{!339, !11, i64 32}
!380 = !{!339, !23, i64 20}
!381 = !{!339, !23, i64 8}
!382 = distinct !{!382, !50}
!383 = distinct !{!383, !50}
!384 = distinct !{!384, !50}
!385 = distinct !{!385, !50}
!386 = !{!"branch_weights", i32 1073741824, i32 0}
!387 = !{!388, !19, i64 8}
!388 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !19, i64 8, !19, i64 16}
!389 = !{!388, !11, i64 0}
!390 = !{!"branch_weights", i32 1, i32 2000}
!391 = !{!388, !19, i64 16}
!392 = !{!"branch_weights", i32 0, i32 1073741824}
!393 = !{!394, !394, i64 0}
!394 = !{!"input", !395, i64 0}
!395 = !{!"Halide buffer"}
!396 = !{!397, !397, i64 0}
!397 = !{!"read_input", !395, i64 0}
!398 = distinct !{!398, !186}
!399 = !{!400, !400, i64 0}
!400 = !{!"blur_x", !395, i64 0}
!401 = !{!402, !402, i64 0}
!402 = !{!"blur_y", !395, i64 0}
!403 = distinct !{!403, !186}
