; ModuleID = 'blur7x7'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64--linux-gnu"

%struct.timespec = type { i64, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i64, i64 }

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = comdat any

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@halide_reference_clock_inited = linkonce local_unnamed_addr global i8 0, align 1
@halide_reference_clock = linkonce global %struct.timespec zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant [4 x i64*] zeroinitializer
@str = private constant [6 x i8] c"input\00", align 32
@1 = private constant [4 x i64*] zeroinitializer
@str.200 = private constant [7 x i8] c"blur_y\00", align 32
@2 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @0, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @1, i32 0, i32 0) }]
@str.201 = private constant [64 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_asserts-no_bounds_query-sse41\00", align 32
@str.202 = private constant [8 x i8] c"blur7x7\00", align 32
@blur7x7_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @2, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 64
  %call1 = tail call i8* @malloc(i64 %add) #16
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 71
  %and = and i64 %sub, -64
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #16
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #16
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #16
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #16
  call void @halide_print(i8* %user_context, i8* nonnull %0) #16
  call void @abort() #16
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @halide_reference_clock_inited, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i32, ...) @syscall(i32 228, i32 0, %struct.timespec* nonnull @halide_reference_clock) #16
  store i8 1, i8* @halide_reference_clock_inited, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @syscall(i32, ...) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %now = alloca <2 x i64>, align 16
  %0 = bitcast <2 x i64>* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  %call = call i32 (i32, ...) @syscall(i32 228, i32 0, <2 x i64>* nonnull %now) #16
  %1 = load <2 x i64>, <2 x i64>* %now, align 16, !tbaa !18
  %2 = load <2 x i64>, <2 x i64>* bitcast (%struct.timespec* @halide_reference_clock to <2 x i64>*), align 8, !tbaa !18
  %3 = sub <2 x i64> %1, %2
  %4 = extractelement <2 x i64> %3, i32 0
  %mul = mul nsw i64 %4, 1000000000
  %5 = extractelement <2 x i64> %3, i32 1
  %add = add nsw i64 %mul, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i64 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #16
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #16
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #16
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 84) #16
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @sched_yield() #16
  ret void
}

declare i32 @sched_yield() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !24
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !25
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !26
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !27
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !28
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !29
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !30
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !31
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #17
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #17
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* %exit_status, align 4, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #16
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !41
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #16
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !49

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %6 = icmp eq i32 %num_jobs, 1
  br i1 %6, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %workers_to_wake.1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %add.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %stealable_jobs.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %job_may_block.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %spec.select.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %indvars.iv193.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187.unr = phi i32 [ 0, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185.unr = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184.unr = phi i8 [ 0, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183.unr = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182.unr = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup.loopexit, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %min_threads5.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 7
  %7 = load i32, i32* %min_threads5.epil, align 4, !tbaa !30
  %cmp6.epil = icmp eq i32 %7, 0
  %add.epil = add i32 %7, %min_threads.0187.unr
  %stealable_jobs.1.epil = select i1 %cmp6.epil, i8 1, i8 %stealable_jobs.0183.unr
  %job_may_block.1.epil = select i1 %cmp6.epil, i8 %job_may_block.0185.unr, i8 1
  %num_semaphores.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 4
  %8 = load i32, i32* %num_semaphores.epil, align 8, !tbaa !28
  %cmp16.not.epil = icmp eq i32 %8, 0
  %spec.select.epil = select i1 %cmp16.not.epil, i8 %job_has_acquires.0184.unr, i8 1
  %serial.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 8
  %9 = load i8, i8* %serial.epil, align 8, !tbaa !26, !range !17
  %tobool22.not.epil = icmp eq i8 %9, 0
  br i1 %tobool22.not.epil, label %if.else24.epil, label %if.then23.epil

if.then23.epil:                                   ; preds = %for.body.epil
  %inc.epil = add nsw i32 %workers_to_wake.0182.unr, 1
  br label %for.cond.cleanup.loopexit

if.else24.epil:                                   ; preds = %for.body.epil
  %extent.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 6
  %10 = load i32, i32* %extent.epil, align 8, !tbaa !25
  %add28.epil = add nsw i32 %10, %workers_to_wake.0182.unr
  br label %for.cond.cleanup.loopexit

for.cond.cleanup.loopexit:                        ; preds = %if.else24.epil, %if.then23.epil, %for.cond.cleanup.loopexit.unr-lcssa
  %workers_to_wake.1.lcssa = phi i32 [ %workers_to_wake.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then23.epil ], [ %add28.epil, %if.else24.epil ]
  %add.lcssa = phi i32 [ %add.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add.epil, %if.then23.epil ], [ %add.epil, %if.else24.epil ]
  %stealable_jobs.1.lcssa = phi i8 [ %stealable_jobs.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %stealable_jobs.1.epil, %if.then23.epil ], [ %stealable_jobs.1.epil, %if.else24.epil ]
  %job_may_block.1.lcssa = phi i8 [ %job_may_block.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %job_may_block.1.epil, %if.then23.epil ], [ %job_may_block.1.epil, %if.else24.epil ]
  %spec.select.lcssa = phi i8 [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %if.then23.epil ], [ %spec.select.epil, %if.else24.epil ]
  %phi.bo = and i8 %stealable_jobs.1.lcssa, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1.lcssa, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1.lcssa, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add.lcssa, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader.new ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader.new ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader.new ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader.new ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader.new ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %11 = load i32, i32* %min_threads5, align 4, !tbaa !30
  %cmp6 = icmp eq i32 %11, 0
  %add = add i32 %11, %min_threads.0187
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %12 = load i32, i32* %num_semaphores, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %13 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool22.not = icmp eq i8 %13, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %14 = load i32, i32* %extent, align 8, !tbaa !25
  %add28 = add nsw i32 %14, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = or i64 %indvars.iv193, 1
  %min_threads5.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 7
  %15 = load i32, i32* %min_threads5.1, align 4, !tbaa !30
  %cmp6.1 = icmp eq i32 %15, 0
  %add.1 = add i32 %15, %add
  %16 = or i1 %cmp6.1, %cmp6
  %stealable_jobs.1.1 = select i1 %16, i8 1, i8 %stealable_jobs.0183
  %17 = or i32 %15, %11
  %18 = icmp eq i32 %17, 0
  %job_may_block.1.1 = select i1 %18, i8 %job_may_block.0185, i8 1
  %num_semaphores.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 4
  %19 = load i32, i32* %num_semaphores.1, align 8, !tbaa !28
  %20 = or i32 %19, %12
  %21 = icmp eq i32 %20, 0
  %spec.select.1 = select i1 %21, i8 %job_has_acquires.0184, i8 1
  %serial.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 8
  %22 = load i8, i8* %serial.1, align 8, !tbaa !26, !range !17
  %tobool22.not.1 = icmp eq i8 %22, 0
  br i1 %tobool22.not.1, label %if.else24.1, label %if.then23.1

if.then32:                                        ; preds = %for.cond.cleanup
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  %not. = xor i1 %25, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %26 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp38180 = icmp slt i32 %26, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %27 = phi i32 [ %inc45, %while.body ], [ %26, %if.then32 ]
  %28 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %sub = add nsw i32 %28, -1
  %cmp39 = icmp slt i32 %27, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %27, 1
  %29 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub41 = sub i32 %add40, %29
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %30 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc43 = add nsw i32 %30, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #17
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %inc45 = add nsw i32 %31, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %idxprom46 = sext i32 %31 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %31, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !55

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %25, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %inc55 = add nsw i32 %32, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %33 = load i32, i32* %min_threads63, align 4, !tbaa !30
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %34 = load i32, i32* %active_workers, align 8, !tbaa !35
  %mul = mul nsw i32 %34, %33
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub64 = sub nsw i32 %mul, %35
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %36 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %37 = and i8 %36, 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %39 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %inc75 = add nsw i32 %39, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !56
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %40 = zext i32 %num_jobs to i64
  %xtraiter3 = and i64 %40, 1
  %lcmp.mod4.not = icmp eq i64 %xtraiter3, 0
  br i1 %lcmp.mod4.not, label %for.body83.prol.loopexit, label %for.body83.prol

for.body83.prol:                                  ; preds = %for.body83.lr.ph
  %indvars.iv.next.prol = add nsw i64 %40, -1
  %arrayidx85.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol
  %next_job.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %.promoted, %"struct.Halide::Runtime::Internal::work"** %next_job.prol, align 8, !tbaa !58
  %siblings.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.prol, align 8, !tbaa !38
  %sibling_count.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 4
  store i32 %num_jobs, i32* %sibling_count.prol, align 8, !tbaa !39
  %threads_reserved93.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 6
  store i32 0, i32* %threads_reserved93.prol, align 8, !tbaa !56
  br label %for.body83.prol.loopexit

for.body83.prol.loopexit:                         ; preds = %for.body83.prol, %for.body83.lr.ph
  %indvars.iv.unr = phi i64 [ %40, %for.body83.lr.ph ], [ %indvars.iv.next.prol, %for.body83.prol ]
  %arrayidx85192.unr = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %for.body83.lr.ph ], [ %arrayidx85.prol, %for.body83.prol ]
  %41 = icmp eq i32 %num_jobs, 1
  br i1 %41, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %for.body83.prol.loopexit
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %tobool96 = icmp ne i32 %42, 0
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %44 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %43, %44
  %45 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %43
  %or.cond174 = or i1 %cmp102, %45
  %storemerge = select i1 %or.cond174, i32 %44, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %47 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %cmp106 = icmp sgt i32 %46, %47
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.prol.loopexit, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body83 ], [ %indvars.iv.unr, %for.body83.prol.loopexit ]
  %arrayidx85192 = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85.1, %for.body83 ], [ %arrayidx85192.unr, %for.body83.prol.loopexit ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85192, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !39
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !56
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %arrayidx85.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1
  %next_job.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85, %"struct.Halide::Runtime::Internal::work"** %next_job.1, align 8, !tbaa !58
  %siblings.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.1, align 8, !tbaa !38
  %sibling_count.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 4
  store i32 %num_jobs, i32* %sibling_count.1, align 8, !tbaa !39
  %threads_reserved93.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 6
  store i32 0, i32* %threads_reserved93.1, align 8, !tbaa !56
  %cmp81.1 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp81.1, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !61

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %48 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %49 = and i8 %48, 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %51 = load i32, i32* %threads_reserved118, align 8, !tbaa !56
  %dec119 = add nsw i32 %51, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !56
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %dec121 = add nsw i32 %52, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void

if.then23.1:                                      ; preds = %for.inc
  %inc.1 = add nsw i32 %workers_to_wake.1, 1
  br label %for.inc.1

if.else24.1:                                      ; preds = %for.inc
  %extent.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 6
  %53 = load i32, i32* %extent.1, align 8, !tbaa !25
  %add28.1 = add nsw i32 %53, %workers_to_wake.1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.else24.1, %if.then23.1
  %workers_to_wake.1.1 = phi i32 [ %inc.1, %if.then23.1 ], [ %add28.1, %if.else24.1 ]
  %indvars.iv.next194.1 = add nuw nsw i64 %indvars.iv193, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !62
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !25
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %4 = load i32, i32* %exit_status, align 4, !tbaa !34
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !64

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !25
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !34
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !34
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !40
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !35
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !30
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !56
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !56
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !30
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !26, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !35
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !27
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !65
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !67
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #16
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !68

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !58
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !40
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !35
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !30
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !56
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !30
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !38
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !35
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !27
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !65
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !67
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #16
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !36
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !68

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !58
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !37
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !36
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !35
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !56
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !56
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !26, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !27
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !65
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !67
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #16
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !36
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !68

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !25
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !70

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !33
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %80 = load i32, i32* %min, align 4, !tbaa !24
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !29
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #17
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !71

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %82 = load i32, i32* %min, align 4, !tbaa !24
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !24
  %83 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !25
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !25
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !72
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !74
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !75
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !76
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !24
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !25
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !25
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #17
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #17
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !34
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !39
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !38
  %wide.trip.count = zext i32 %88 to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %90 = icmp eq i32 %88, 1
  br i1 %90, label %if.end271.loopexit.unr-lcssa, label %do.end243.lr.ph.new

do.end243.lr.ph.new:                              ; preds = %do.end243.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %do.end243

do.end243:                                        ; preds = %for.inc.1, %do.end243.lr.ph.new
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph.new ], [ %wake_owners.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %do.end243.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %91 = load i32, i32* %exit_status245, align 4, !tbaa !34
  %cmp246 = icmp eq i32 %91, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !34
  %92 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253 = icmp eq i32 %92, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %93 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !37, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %94 = phi i8 [ 0, %if.then247 ], [ %93, %land.rhs254 ]
  %95 = and i8 %wake_owners.0541, 1
  %or = or i8 %94, %95
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %exit_status245.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 9
  %96 = load i32, i32* %exit_status245.1, align 4, !tbaa !34
  %cmp246.1 = icmp eq i32 %96, 0
  br i1 %cmp246.1, label %if.then247.1, label %for.inc.1

if.end271.loopexit.unr-lcssa:                     ; preds = %for.inc.1, %do.end243.lr.ph
  %wake_owners.1.lcssa.ph = phi i8 [ undef, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541.unr = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %if.end271, label %do.end243.epil

do.end243.epil:                                   ; preds = %if.end271.loopexit.unr-lcssa
  %exit_status245.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 9
  %97 = load i32, i32* %exit_status245.epil, align 4, !tbaa !34
  %cmp246.epil = icmp eq i32 %97, 0
  br i1 %cmp246.epil, label %if.then247.epil, label %if.end271

if.then247.epil:                                  ; preds = %do.end243.epil
  store i32 %result.2510, i32* %exit_status245.epil, align 4, !tbaa !34
  %98 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.epil = icmp eq i32 %98, 0
  br i1 %cmp253.epil, label %land.rhs254.epil, label %land.end260.epil

land.rhs254.epil:                                 ; preds = %if.then247.epil
  %owner_is_sleeping258.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 11
  %99 = load i8, i8* %owner_is_sleeping258.epil, align 4, !tbaa !37, !range !17
  br label %land.end260.epil

land.end260.epil:                                 ; preds = %land.rhs254.epil, %if.then247.epil
  %100 = phi i8 [ 0, %if.then247.epil ], [ %99, %land.rhs254.epil ]
  %101 = and i8 %wake_owners.0541.unr, 1
  %or.epil = or i8 %100, %101
  br label %if.end271

if.end271:                                        ; preds = %if.end271.loopexit.unr-lcssa, %do.end243.epil, %land.end260.epil, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1.lcssa.ph, %if.end271.loopexit.unr-lcssa ], [ %or.epil, %land.end260.epil ], [ %wake_owners.0541.unr, %do.end243.epil ]
  %102 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %102, null
  %103 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %104 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub277 = sub nsw i32 %104, %103
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %102, i64 0, i32 6
  %105 = load i32, i32* %threads_reserved285, align 8, !tbaa !56
  %sub286 = sub nsw i32 %105, %103
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !56
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %106 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %dec292 = add nsw i32 %106, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !35
  %107 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %107, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %108 = load i32, i32* %extent302, align 8, !tbaa !25
  %cmp303 = icmp eq i32 %108, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %109 = load i32, i32* %exit_status305, align 4, !tbaa !34
  %cmp306.not = icmp eq i32 %109, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %110 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !37, !range !17
  %tobool309.not = icmp eq i8 %110, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !77

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void

if.then247.1:                                     ; preds = %for.inc
  store i32 %result.2510, i32* %exit_status245.1, align 4, !tbaa !34
  %111 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.1 = icmp eq i32 %111, 0
  br i1 %cmp253.1, label %land.rhs254.1, label %land.end260.1

land.rhs254.1:                                    ; preds = %if.then247.1
  %owner_is_sleeping258.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 11
  %112 = load i8, i8* %owner_is_sleeping258.1, align 4, !tbaa !37, !range !17
  br label %land.end260.1

land.end260.1:                                    ; preds = %land.rhs254.1, %if.then247.1
  %113 = phi i8 [ 0, %if.then247.1 ], [ %112, %land.rhs254.1 ]
  %114 = and i8 %wake_owners.1, 1
  %or.1 = or i8 %113, %114
  br label %for.inc.1

for.inc.1:                                        ; preds = %land.end260.1, %for.inc
  %wake_owners.1.1 = phi i8 [ %or.1, %land.end260.1 ], [ %wake_owners.1, %for.inc ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %if.end271.loopexit.unr-lcssa, label %do.end243, !llvm.loop !78
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !79
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !79
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !88

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #16
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !89
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !91

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #16
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !94
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !95
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !92
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !96

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !95
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !97

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #16
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !94
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !43
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !43
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !99
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !101
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !102
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !104
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #16
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #16
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !41
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !43
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #16
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #16
  call void @abort() #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !105
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !89
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !105
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !109
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !41
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #16
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !108
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 comdat align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !79
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !106, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !79
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !113

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !79
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !109
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !85
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !85
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !41
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #16
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !89
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #16
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #16
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !99
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !106
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !106, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #16
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #16
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #16
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !115
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !117
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !118
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #16
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !115
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !117
  tail call void %0(i8* %2) #16
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !119
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !120
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %4 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %4, align 8, !tbaa !40
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %5 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %5
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !121

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %6 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %6) #17
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #17
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %7 = load i32, i32* %exit_status28, align 4, !tbaa !34
  %cmp29.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !122

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #16
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !123

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !118
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #16
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !124
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !126
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !124
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #16
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #16
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !127
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #16
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !127
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  tail call void @halide_free(i8* %user_context, i8* %array) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* null, i8* %name) #16
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 1) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = tail call i8* @dlerror() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

declare i8* @dlerror() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !129

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #16
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #16
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #17
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !130
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !137
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !138
  %call4 = tail call i64 @strlen(i8* %4) #16
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #16
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i, label %while.body.i.i.i

while.body.i.i.us.i:                              ; preds = %cond.end, %while.body.i.i.us.i.backedge
  %9 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.us.i = and i32 %9, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %10 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %12 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %12, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %13 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %14 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %15 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %16 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %18 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.us.i = icmp eq i32 %18, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %19 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.us.i = sub i32 %18, %19
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #16
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %20 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !145

while.body.i.i.i:                                 ; preds = %cond.end, %while.body.i.i.i.backedge
  %22 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.i = and i32 %22, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %23 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #16
  tail call void @abort() #16
  %25 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %25, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %26 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %27 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %28 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %29 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %31 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.i = icmp eq i32 %31, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %32 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.i = sub i32 %31, %32
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #16
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %33 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !145

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %12, %do.end.i.us.i ], [ %25, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #16
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #16
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #16
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #16
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !146
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %35 = bitcast i8* %id to i32*
  store i32 %0, i32* %35, align 4, !tbaa !148
  %36 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %37 = bitcast %struct.halide_type_t* %type to i32*
  %38 = bitcast i8* %36 to i32*
  %39 = load i32, i32* %37, align 8
  store i32 %39, i32* %38, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %40 = bitcast i32* %event to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %42 = bitcast i8* %dimensions26 to i32*
  %43 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %44 = load i32*, i32** %coordinates, align 8, !tbaa !149
  %tobool27.not = icmp eq i32* %44, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %45 = bitcast i32* %44 to i8*
  %46 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %46, i8* nonnull %45, i64 %conv31) #16
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %47 = load i8*, i8** %value, align 8, !tbaa !150
  %tobool34.not = icmp eq i8* %47, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i = sext i32 %50 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %49, i64 %idx.ext.i
  %51 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %51, i8* nonnull %47, i64 %conv38) #16
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %52 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i425 = sext i32 %54 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i425
  %55 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %56 = bitcast i8* %lanes.i to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i427 = zext i16 %57 to i32
  %58 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %59 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i428 = zext i8 %59 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %55, i64 %idx.ext.i430
  %60 = load i8*, i8** %func, align 8, !tbaa !138
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %60, i64 %conv43) #16
  %61 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i.i = sext i32 %61 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i.i
  %62 = bitcast i32* %add.ptr.i.i.i to i8*
  %63 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i.i432 = zext i16 %63 to i32
  %64 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i.i = zext i8 %64 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %62, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %65 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %65, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !153

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %66 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool47.not = icmp eq i8* %66, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %66
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #16
  %67 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %67, i64 0, i32 0, i32 0
  %68 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %69 = load i32, i32* %event, align 4, !tbaa !154
  %cmp56 = icmp eq i32 %69, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %70 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %71 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %72 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %73 = extractvalue { i32, i1 } %72, 1
  br i1 %73, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 1
  %74 = load i32, i32* %cursor.i, align 4, !tbaa !142
  %tobool.not.i439 = icmp eq i32 %74, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 2
  %75 = load i32, i32* %overage.i, align 4, !tbaa !144
  %sub.i = sub i32 %74, %75
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !142
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #16
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  store i32 0, i32* %cursor.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i, align 4, !tbaa !144
  %76 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %77 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #16
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %78 = load i8, i8* %bits, align 1, !tbaa !155
  %conv60 = zext i8 %78 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !156

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %79 = load i32, i32* %event65, align 4, !tbaa !154
  %cmp66 = icmp slt i32 %79, 2
  %idxprom = zext i32 %79 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %80 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %80) #16
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %81 = load i8*, i8** %func70, align 8, !tbaa !138
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %81) #16
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %82 = load i32, i32* %value_index73, align 4, !tbaa !157
  %conv.i468 = sext i32 %82 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #16
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %83 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp79 = icmp ugt i16 %83, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #16
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %84 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84660 = icmp sgt i32 %84, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !73
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #16
  %85 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84.peel = icmp sgt i32 %85, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %86 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp108 = icmp ugt i16 %86, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #16
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %87 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp90 = icmp ugt i16 %87, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %87 to i32
  %88 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %88, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #16
  %89 = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %arrayidx103 = getelementptr inbounds i32, i32* %89, i64 %indvars.iv670
  %90 = load i32, i32* %arrayidx103, align 4, !tbaa !73
  %conv.i484 = sext i32 %90 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #16
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %91 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %92 = sext i32 %91 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %92
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !158

if.then115:                                       ; preds = %for.cond.cleanup
  %93 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp119 = icmp ugt i16 %93, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #16
  %94 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130655.not = icmp eq i16 %94, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %95 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %96 = bitcast i8** %value245 to i16**
  %97 = bitcast i8** %value245 to float**
  %98 = bitcast i8** %value245 to double**
  %99 = bitcast i8** %value245 to i32**
  %100 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %101 = load i8**, i8*** %95, align 8, !tbaa !150
  %102 = load i8*, i8** %101, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %102) #16
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %103 = load i16*, i16** %96, align 8, !tbaa !150
  %104 = load i16, i16* %103, align 2, !tbaa !161
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %104) #16
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #16
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %105 = load float*, float** %97, align 8, !tbaa !150
  %106 = load float, float* %105, align 4, !tbaa !162
  %conv.i533.peel = fpext float %106 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #16
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %107 = load double*, double** %98, align 8, !tbaa !150
  %108 = load double, double* %107, align 8, !tbaa !164
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %108, i32 1) #16
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %109 = load i32*, i32** %99, align 8, !tbaa !150
  %110 = load i32, i32* %109, align 4, !tbaa !73
  %conv.i526.peel = zext i32 %110 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #16
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %111 = load i16*, i16** %96, align 8, !tbaa !150
  %112 = load i16, i16* %111, align 2, !tbaa !161
  %conv.i522.peel = zext i16 %112 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #16
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %113 = load i8*, i8** %value245, align 8, !tbaa !150
  %114 = load i8, i8* %113, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %114 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #16
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %115 = load i64*, i64** %100, align 8, !tbaa !150
  %116 = load i64, i64* %115, align 8, !tbaa !110
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %116, i32 1) #16
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %117 = load i32*, i32** %99, align 8, !tbaa !150
  %118 = load i32, i32* %117, align 4, !tbaa !73
  %conv.i511.peel = sext i32 %118 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #16
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %119 = load i16*, i16** %96, align 8, !tbaa !150
  %120 = load i16, i16* %119, align 2, !tbaa !161
  %conv.i507.peel = sext i16 %120 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #16
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %121 = load i8*, i8** %value245, align 8, !tbaa !150
  %122 = load i8, i8* %121, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %122 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #16
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %123 = load i64*, i64** %100, align 8, !tbaa !150
  %124 = load i64, i64* %123, align 8, !tbaa !110
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %124, i32 1) #16
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %125 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130.peel = icmp ugt i16 %125, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %151, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %126 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %126, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %127 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx145 = getelementptr inbounds i8, i8* %127, i64 %indvars.iv
  %128 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %128 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #16
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %129 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx153 = getelementptr inbounds i16, i16* %129, i64 %indvars.iv
  %130 = load i16, i16* %arrayidx153, align 2, !tbaa !161
  %conv.i507 = sext i16 %130 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #16
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %131 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx161 = getelementptr inbounds i32, i32* %131, i64 %indvars.iv
  %132 = load i32, i32* %arrayidx161, align 4, !tbaa !73
  %conv.i511 = sext i32 %132 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #16
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %133 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx166 = getelementptr inbounds i64, i64* %133, i64 %indvars.iv
  %134 = load i64, i64* %arrayidx166, align 8, !tbaa !110
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %134, i32 1) #16
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %135 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx181 = getelementptr inbounds i8, i8* %135, i64 %indvars.iv
  %136 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %136 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #16
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %137 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx189 = getelementptr inbounds i16, i16* %137, i64 %indvars.iv
  %138 = load i16, i16* %arrayidx189, align 2, !tbaa !161
  %conv.i522 = zext i16 %138 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #16
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %139 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx197 = getelementptr inbounds i32, i32* %139, i64 %indvars.iv
  %140 = load i32, i32* %arrayidx197, align 4, !tbaa !73
  %conv.i526 = zext i32 %140 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #16
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %141 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx202 = getelementptr inbounds i64, i64* %141, i64 %indvars.iv
  %142 = load i64, i64* %arrayidx202, align 8, !tbaa !110
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %142, i32 1) #16
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %143 = load float*, float** %97, align 8, !tbaa !150
  %arrayidx223 = getelementptr inbounds float, float* %143, i64 %indvars.iv
  %144 = load float, float* %arrayidx223, align 4, !tbaa !162
  %conv.i533 = fpext float %144 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #16
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %145 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx230 = getelementptr inbounds i16, i16* %145, i64 %indvars.iv
  %146 = load i16, i16* %arrayidx230, align 2, !tbaa !161
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %146) #16
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #16
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %147 = load double*, double** %98, align 8, !tbaa !150
  %arrayidx235 = getelementptr inbounds double, double* %147, i64 %indvars.iv
  %148 = load double, double* %arrayidx235, align 8, !tbaa !164
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %148, i32 1) #16
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %149 = load i8**, i8*** %95, align 8, !tbaa !150
  %arrayidx247 = getelementptr inbounds i8*, i8** %149, i64 %indvars.iv
  %150 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %150) #16
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %151 = load i16, i16* %lanes77, align 2, !tbaa !130
  %152 = zext i16 %151 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %152
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !166

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #16
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %153 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %tobool265.not = icmp eq i8* %153, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %154 = load i8, i8* %153, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %154, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #16
  %155 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %155) #16
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #16
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %156 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %156, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #16
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #16
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #16
  tail call void @halide_set_trace_file(i32 %call5) #17
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #16
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to i32*
  store i32 0, i32* %3, align 4, !tbaa !142
  %overage.i = getelementptr inbounds i8, i8* %call8, i64 8
  %4 = bitcast i8* %overage.i to i32*
  store i32 0, i32* %4, align 4, !tbaa !144
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !140
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #17
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %5
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #16
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #16
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #16
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !138
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !150
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !149
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !139
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !160
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !155
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !130
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !154
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !168
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !157
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !137
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #16
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #16
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #16
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !169

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !170

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %while.end13, !llvm.loop !171

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end, %while.cond6.preheader
  %4 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre45, %if.end ]
  %5 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre, %if.end ]
  %cmp16 = icmp eq i8 %5, %4
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name42 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !172
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #16
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #16
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #16
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %4, align 4, !tbaa !73
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %5 = bitcast i32* %min.i.2 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %5, align 4, !tbaa !73
  %6 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp11875 = icmp sgt i32 %6, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %8 = zext i32 %6 to i64
  %9 = add nsw i64 %8, -1
  %10 = icmp ult i64 %9, 3
  %11 = select i1 %10, i64 %8, i64 4
  %12 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %13 = bitcast %struct.halide_dimension_t* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %12, i8* nonnull align 4 dereferenceable(16) %13, i64 16, i1 false), !tbaa.struct !177
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %14 = load i32, i32* %extent, align 4, !tbaa !178
  %conv903 = zext i32 %14 to i64
  %exitcond.not17 = icmp eq i64 %11, 1
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body.1, !llvm.loop !180

for.cond19.preheader:                             ; preds = %for.body.3, %for.body.2, %for.body.1, %for.body.lr.ph
  %mul.lcssa = phi i64 [ %conv903, %for.body.lr.ph ], [ %mul.1, %for.body.1 ], [ %mul.2, %for.body.2 ], [ %mul.3, %for.body.3 ]
  %cmp20873 = icmp slt i32 %6, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ 1, %if.end9 ]
  %15 = sext i32 %6 to i64
  %16 = sub i32 3, %6
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %min.iters.check = icmp ult i32 %16, 7
  br i1 %min.iters.check, label %for.body22.preheader214, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %18, 8589934584
  %ind.end = add nsw i64 %n.vec, %15
  %.splatinsert = insertelement <8 x i64> poison, i64 %15, i32 0
  %.splat = shufflevector <8 x i64> %.splatinsert, <8 x i64> poison, <8 x i32> zeroinitializer
  %induction = add <8 x i64> %.splat, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %19 = add nsw i64 %n.vec, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %xtraiter = and i64 %21, 3
  %22 = icmp ult i64 %19, 24
  br i1 %22, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = and i64 %21, 4611686018427387900
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %vec.ind = phi <8 x i64> [ %induction, %vector.ph.new ], [ %vec.ind.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %23, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %24 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %24, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %25 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %25, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next = add <8 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %26 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %26, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %27, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %28 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %28, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.1 = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %29 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %29, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %30 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %30, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %31 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %31, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.2 = add <8 x i64> %vec.ind, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %32 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %32, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %33 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %33, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %34 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %34, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.3 = add <8 x i64> %vec.ind, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !183

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %vec.ind.unr = phi <8 x i64> [ %induction, %vector.ph ], [ %vec.ind.next.3, %vector.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %vec.ind.epil = phi <8 x i64> [ %vec.ind.next.epil, %vector.body.epil ], [ %vec.ind.unr, %middle.block.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter, %middle.block.unr-lcssa ]
  %35 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %35, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %36 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %36, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %37 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %37, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.epil = add <8 x i64> %vec.ind.epil, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !185

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %18, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader214

for.body22.preheader214:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %15, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %38 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %38 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #17
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader214, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader214 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  store i32 0, i32* %min, align 4, !tbaa !181
  %extent27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 1
  store i32 1, i32* %extent27, align 4, !tbaa !178
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 4, !tbaa !182
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #17
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %39 = load i32, i32* %extent.i, align 4, !tbaa !178
  %40 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %41 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %switch = icmp ult i32 %41, 2
  %42 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %cmp50 = icmp slt i32 %42, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %42
  %channels.0 = select i1 %or.cond, i32 %42, i32 %41
  %43 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %43) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !189
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !191
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !192
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !193
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !194
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !196
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !197
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %39, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !194
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !196
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !197
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %40, i32* %i32.i635, align 2, !tbaa !14
  %44 = trunc i32 %add.i to i16
  %conv68 = and i16 %44, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !194
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !196
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !197
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !194
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !196
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !197
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !194
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !196
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !197
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !194
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !196
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !197
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !194
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !196
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !197
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !194
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !196
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !197
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %40, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %45 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %45
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %46, align 2
  %47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %47, align 2
  %48 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %48, align 2
  %49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %49, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !194
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !196
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  store i32 1, i32* %count4.i, align 2, !tbaa !197
  %i32.i733 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 3, i32 0
  store i32 194, i32* %i32.i733, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !194
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !196
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  store i32 1, i32* %count4.i743, align 2, !tbaa !197
  %i32.i744 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 3, i32 0
  store i32 202, i32* %i32.i744, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !194
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !196
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !197
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !194
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !196
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !197
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %50 = load i16, i16* %arrayidx93, align 2, !tbaa !161
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !194
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !196
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !197
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %50, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !194
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !196
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !197
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %51 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 2, !tbaa !73
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !73
  %call.i736 = call i64 @fwrite(i8* nonnull %43, i64 210, i64 1, i8* nonnull %call.i598) #16
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %52 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !73
  %mul123 = mul i32 %depth.0, %div.i
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %52, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %53 = load i32, i32* %extent.i, align 4, !tbaa !178
  %54 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %mul124 = mul i32 %mul123, %53
  %mul125 = mul i32 %mul124, %54
  %55 = load i32, i32* %offset, align 4, !tbaa !73
  %add126 = add nsw i32 %mul125, %55
  store i32 %add126, i32* %offset, align 4, !tbaa !73
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !198

for.end129:                                       ; preds = %if.end118
  %56 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !73
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720, !llvm.loop !199

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.end129, %for.cond138
  %i137.0863 = phi i32 [ %inc146, %for.cond138 ], [ 0, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %56, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  %inc146 = add nuw nsw i32 %i137.0863, 1
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #17
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %57 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %57, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !200

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %58 = ptrtoint i8* %filename to i64
  %59 = sub i64 %58, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !201

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %60 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %60, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !202

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %59, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %61 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %61, -1
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %62) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %63 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check39 = icmp ugt i64 %start.0.idx.lcssa, -129
  br i1 %min.iters.check39, label %while.body187.preheader212, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %64 = xor i64 %start.0.idx.lcssa, -1
  %scevgep43 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %64
  %scevgep44 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name42, %scevgep45
  %bound1 = icmp ult i8* %scevgep44, %scevgep43
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader212, label %vector.ph41

vector.ph41:                                      ; preds = %vector.memcheck
  %n.vec47 = and i64 %63, -128
  %ind.end51 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec47
  %ind.end53 = add i64 %start.0.idx.lcssa, %n.vec47
  %65 = add i64 %n.vec47, -128
  %66 = lshr exact i64 %65, 7
  %67 = add nuw nsw i64 %66, 1
  %xtraiter215 = and i64 %67, 3
  %68 = icmp ult i64 %65, 384
  br i1 %68, label %middle.block36.unr-lcssa, label %vector.ph41.new

vector.ph41.new:                                  ; preds = %vector.ph41
  %unroll_iter218 = and i64 %67, 288230376151711740
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph41.new
  %index48 = phi i64 [ 0, %vector.ph41.new ], [ %index.next49.3, %vector.body38 ]
  %niter219 = phi i64 [ %unroll_iter218, %vector.ph41.new ], [ %niter219.nsub.3, %vector.body38 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48
  %offset.idx = add i64 %start.0.idx.lcssa, %index48
  %69 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx
  %70 = bitcast i8* %69 to <32 x i8>*
  %wide.load = load <32 x i8>, <32 x i8>* %70, align 1, !tbaa !14, !alias.scope !203
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <32 x i8>*
  %wide.load58 = load <32 x i8>, <32 x i8>* %72, align 1, !tbaa !14, !alias.scope !203
  %73 = getelementptr inbounds i8, i8* %69, i64 64
  %74 = bitcast i8* %73 to <32 x i8>*
  %wide.load59 = load <32 x i8>, <32 x i8>* %74, align 1, !tbaa !14, !alias.scope !203
  %75 = getelementptr inbounds i8, i8* %69, i64 96
  %76 = bitcast i8* %75 to <32 x i8>*
  %wide.load60 = load <32 x i8>, <32 x i8>* %76, align 1, !tbaa !14, !alias.scope !203
  %77 = bitcast i8* %next.gep to <32 x i8>*
  store <32 x i8> %wide.load, <32 x i8>* %77, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %78 = getelementptr i8, i8* %next.gep, i64 32
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %wide.load58, <32 x i8>* %79, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %80 = getelementptr i8, i8* %next.gep, i64 64
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %wide.load59, <32 x i8>* %81, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %82 = getelementptr i8, i8* %next.gep, i64 96
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %wide.load60, <32 x i8>* %83, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49 = or i64 %index48, 128
  %next.gep.1 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49
  %offset.idx.1 = add i64 %start.0.idx.lcssa, %index.next49
  %84 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.1
  %85 = bitcast i8* %84 to <32 x i8>*
  %wide.load.1 = load <32 x i8>, <32 x i8>* %85, align 1, !tbaa !14, !alias.scope !203
  %86 = getelementptr inbounds i8, i8* %84, i64 32
  %87 = bitcast i8* %86 to <32 x i8>*
  %wide.load58.1 = load <32 x i8>, <32 x i8>* %87, align 1, !tbaa !14, !alias.scope !203
  %88 = getelementptr inbounds i8, i8* %84, i64 64
  %89 = bitcast i8* %88 to <32 x i8>*
  %wide.load59.1 = load <32 x i8>, <32 x i8>* %89, align 1, !tbaa !14, !alias.scope !203
  %90 = getelementptr inbounds i8, i8* %84, i64 96
  %91 = bitcast i8* %90 to <32 x i8>*
  %wide.load60.1 = load <32 x i8>, <32 x i8>* %91, align 1, !tbaa !14, !alias.scope !203
  %92 = bitcast i8* %next.gep.1 to <32 x i8>*
  store <32 x i8> %wide.load.1, <32 x i8>* %92, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %93 = getelementptr i8, i8* %next.gep.1, i64 32
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %wide.load58.1, <32 x i8>* %94, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %95 = getelementptr i8, i8* %next.gep.1, i64 64
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %wide.load59.1, <32 x i8>* %96, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %97 = getelementptr i8, i8* %next.gep.1, i64 96
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %wide.load60.1, <32 x i8>* %98, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.1 = or i64 %index48, 256
  %next.gep.2 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.1
  %offset.idx.2 = add i64 %start.0.idx.lcssa, %index.next49.1
  %99 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.2
  %100 = bitcast i8* %99 to <32 x i8>*
  %wide.load.2 = load <32 x i8>, <32 x i8>* %100, align 1, !tbaa !14, !alias.scope !203
  %101 = getelementptr inbounds i8, i8* %99, i64 32
  %102 = bitcast i8* %101 to <32 x i8>*
  %wide.load58.2 = load <32 x i8>, <32 x i8>* %102, align 1, !tbaa !14, !alias.scope !203
  %103 = getelementptr inbounds i8, i8* %99, i64 64
  %104 = bitcast i8* %103 to <32 x i8>*
  %wide.load59.2 = load <32 x i8>, <32 x i8>* %104, align 1, !tbaa !14, !alias.scope !203
  %105 = getelementptr inbounds i8, i8* %99, i64 96
  %106 = bitcast i8* %105 to <32 x i8>*
  %wide.load60.2 = load <32 x i8>, <32 x i8>* %106, align 1, !tbaa !14, !alias.scope !203
  %107 = bitcast i8* %next.gep.2 to <32 x i8>*
  store <32 x i8> %wide.load.2, <32 x i8>* %107, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %108 = getelementptr i8, i8* %next.gep.2, i64 32
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %wide.load58.2, <32 x i8>* %109, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %110 = getelementptr i8, i8* %next.gep.2, i64 64
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %wide.load59.2, <32 x i8>* %111, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %112 = getelementptr i8, i8* %next.gep.2, i64 96
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %wide.load60.2, <32 x i8>* %113, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.2 = or i64 %index48, 384
  %next.gep.3 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.2
  %offset.idx.3 = add i64 %start.0.idx.lcssa, %index.next49.2
  %114 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.3
  %115 = bitcast i8* %114 to <32 x i8>*
  %wide.load.3 = load <32 x i8>, <32 x i8>* %115, align 1, !tbaa !14, !alias.scope !203
  %116 = getelementptr inbounds i8, i8* %114, i64 32
  %117 = bitcast i8* %116 to <32 x i8>*
  %wide.load58.3 = load <32 x i8>, <32 x i8>* %117, align 1, !tbaa !14, !alias.scope !203
  %118 = getelementptr inbounds i8, i8* %114, i64 64
  %119 = bitcast i8* %118 to <32 x i8>*
  %wide.load59.3 = load <32 x i8>, <32 x i8>* %119, align 1, !tbaa !14, !alias.scope !203
  %120 = getelementptr inbounds i8, i8* %114, i64 96
  %121 = bitcast i8* %120 to <32 x i8>*
  %wide.load60.3 = load <32 x i8>, <32 x i8>* %121, align 1, !tbaa !14, !alias.scope !203
  %122 = bitcast i8* %next.gep.3 to <32 x i8>*
  store <32 x i8> %wide.load.3, <32 x i8>* %122, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %123 = getelementptr i8, i8* %next.gep.3, i64 32
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %wide.load58.3, <32 x i8>* %124, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %125 = getelementptr i8, i8* %next.gep.3, i64 64
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %wide.load59.3, <32 x i8>* %126, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %127 = getelementptr i8, i8* %next.gep.3, i64 96
  %128 = bitcast i8* %127 to <32 x i8>*
  store <32 x i8> %wide.load60.3, <32 x i8>* %128, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.3 = add i64 %index48, 512
  %niter219.nsub.3 = add i64 %niter219, -4
  %niter219.ncmp.3 = icmp eq i64 %niter219.nsub.3, 0
  br i1 %niter219.ncmp.3, label %middle.block36.unr-lcssa, label %vector.body38, !llvm.loop !208

middle.block36.unr-lcssa:                         ; preds = %vector.body38, %vector.ph41
  %index48.unr = phi i64 [ 0, %vector.ph41 ], [ %index.next49.3, %vector.body38 ]
  %lcmp.mod217.not = icmp eq i64 %xtraiter215, 0
  br i1 %lcmp.mod217.not, label %middle.block36, label %vector.body38.epil

vector.body38.epil:                               ; preds = %middle.block36.unr-lcssa, %vector.body38.epil
  %index48.epil = phi i64 [ %index.next49.epil, %vector.body38.epil ], [ %index48.unr, %middle.block36.unr-lcssa ]
  %epil.iter216 = phi i64 [ %epil.iter216.sub, %vector.body38.epil ], [ %xtraiter215, %middle.block36.unr-lcssa ]
  %next.gep.epil = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48.epil
  %offset.idx.epil = add i64 %start.0.idx.lcssa, %index48.epil
  %129 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.epil
  %130 = bitcast i8* %129 to <32 x i8>*
  %wide.load.epil = load <32 x i8>, <32 x i8>* %130, align 1, !tbaa !14, !alias.scope !203
  %131 = getelementptr inbounds i8, i8* %129, i64 32
  %132 = bitcast i8* %131 to <32 x i8>*
  %wide.load58.epil = load <32 x i8>, <32 x i8>* %132, align 1, !tbaa !14, !alias.scope !203
  %133 = getelementptr inbounds i8, i8* %129, i64 64
  %134 = bitcast i8* %133 to <32 x i8>*
  %wide.load59.epil = load <32 x i8>, <32 x i8>* %134, align 1, !tbaa !14, !alias.scope !203
  %135 = getelementptr inbounds i8, i8* %129, i64 96
  %136 = bitcast i8* %135 to <32 x i8>*
  %wide.load60.epil = load <32 x i8>, <32 x i8>* %136, align 1, !tbaa !14, !alias.scope !203
  %137 = bitcast i8* %next.gep.epil to <32 x i8>*
  store <32 x i8> %wide.load.epil, <32 x i8>* %137, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %138 = getelementptr i8, i8* %next.gep.epil, i64 32
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %wide.load58.epil, <32 x i8>* %139, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %140 = getelementptr i8, i8* %next.gep.epil, i64 64
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %wide.load59.epil, <32 x i8>* %141, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %142 = getelementptr i8, i8* %next.gep.epil, i64 96
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %wide.load60.epil, <32 x i8>* %143, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.epil = add i64 %index48.epil, 128
  %epil.iter216.sub = add i64 %epil.iter216, -1
  %epil.iter216.cmp.not = icmp eq i64 %epil.iter216.sub, 0
  br i1 %epil.iter216.cmp.not, label %middle.block36, label %vector.body38.epil, !llvm.loop !209

middle.block36:                                   ; preds = %vector.body38.epil, %middle.block36.unr-lcssa
  %cmp.n54 = icmp eq i64 %n.vec47, %63
  br i1 %cmp.n54, label %while.cond191.preheader, label %while.body187.preheader212

while.body187.preheader212:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block36
  %dst.0870.ph = phi i8* [ %62, %vector.memcheck ], [ %62, %while.body187.preheader ], [ %ind.end51, %middle.block36 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end53, %middle.block36 ]
  %144 = sub i64 -2, %start.1869.idx.ph
  %145 = and i64 %start.1869.idx.ph, 7
  %xtraiter220 = xor i64 %145, 7
  %lcmp.mod221.not = icmp eq i64 %xtraiter220, 0
  br i1 %lcmp.mod221.not, label %while.body187.prol.loopexit, label %while.body187.prol

while.body187.prol:                               ; preds = %while.body187.preheader212, %while.body187.prol
  %dst.0870.prol = phi i8* [ %incdec.ptr189.prol, %while.body187.prol ], [ %dst.0870.ph, %while.body187.preheader212 ]
  %start.1869.idx.prol = phi i64 [ %start.1869.add.prol, %while.body187.prol ], [ %start.1869.idx.ph, %while.body187.preheader212 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %while.body187.prol ], [ %xtraiter220, %while.body187.preheader212 ]
  %start.1869.ptr.prol = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx.prol
  %start.1869.add.prol = add nuw nsw i64 %start.1869.idx.prol, 1
  %146 = load i8, i8* %start.1869.ptr.prol, align 1, !tbaa !14
  %incdec.ptr189.prol = getelementptr inbounds i8, i8* %dst.0870.prol, i64 1
  store i8 %146, i8* %dst.0870.prol, align 1, !tbaa !14
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %while.body187.prol.loopexit, label %while.body187.prol, !llvm.loop !210

while.body187.prol.loopexit:                      ; preds = %while.body187.prol, %while.body187.preheader212
  %incdec.ptr189.lcssa213.unr = phi i8* [ undef, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %dst.0870.unr = phi i8* [ %dst.0870.ph, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %start.1869.idx.unr = phi i64 [ %start.1869.idx.ph, %while.body187.preheader212 ], [ %start.1869.add.prol, %while.body187.prol ]
  %147 = icmp ult i64 %144, 7
  br i1 %147, label %while.cond191.preheader, label %while.body187

while.cond191.preheader:                          ; preds = %while.body187.prol.loopexit, %while.body187, %middle.block36
  %incdec.ptr189.lcssa = phi i8* [ %ind.end51, %middle.block36 ], [ %incdec.ptr189.lcssa213.unr, %while.body187.prol.loopexit ], [ %incdec.ptr189.7, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %62, %while.end183 ]
  %dst.0.lcssa91164 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %148 = sub i64 0, %dst.0.lcssa91164
  %scevgep65 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %148
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep65 to i64
  %min.iters.check67 = icmp ult i8* %scevgep65, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check67, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check69 = icmp ult i8* %scevgep65, inttoptr (i64 128 to i8*)
  br i1 %min.iters.check69, label %vec.epilog.ph, label %vector.ph70

vector.ph70:                                      ; preds = %vector.main.loop.iter.check
  %n.vec72 = and i64 %exitcount.ptrcnt.to.int, -128
  %149 = add i64 %n.vec72, -128
  %150 = lshr exact i64 %149, 7
  %151 = add nuw nsw i64 %150, 1
  %xtraiter222 = and i64 %151, 7
  %152 = icmp ult i64 %149, 896
  br i1 %152, label %middle.block61.unr-lcssa, label %vector.ph70.new

vector.ph70.new:                                  ; preds = %vector.ph70
  %unroll_iter225 = and i64 %151, 288230376151711736
  br label %vector.body63

vector.body63:                                    ; preds = %vector.body63, %vector.ph70.new
  %index73 = phi i64 [ 0, %vector.ph70.new ], [ %index.next74.7, %vector.body63 ]
  %niter226 = phi i64 [ %unroll_iter225, %vector.ph70.new ], [ %niter226.nsub.7, %vector.body63 ]
  %next.gep76 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73
  %153 = bitcast i8* %next.gep76 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %153, align 1, !tbaa !14
  %154 = getelementptr i8, i8* %next.gep76, i64 32
  %155 = bitcast i8* %154 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %155, align 1, !tbaa !14
  %156 = getelementptr i8, i8* %next.gep76, i64 64
  %157 = bitcast i8* %156 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %157, align 1, !tbaa !14
  %158 = getelementptr i8, i8* %next.gep76, i64 96
  %159 = bitcast i8* %158 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %159, align 1, !tbaa !14
  %index.next74 = or i64 %index73, 128
  %next.gep76.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74
  %160 = bitcast i8* %next.gep76.1 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %160, align 1, !tbaa !14
  %161 = getelementptr i8, i8* %next.gep76.1, i64 32
  %162 = bitcast i8* %161 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %162, align 1, !tbaa !14
  %163 = getelementptr i8, i8* %next.gep76.1, i64 64
  %164 = bitcast i8* %163 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %164, align 1, !tbaa !14
  %165 = getelementptr i8, i8* %next.gep76.1, i64 96
  %166 = bitcast i8* %165 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %166, align 1, !tbaa !14
  %index.next74.1 = or i64 %index73, 256
  %next.gep76.2 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.1
  %167 = bitcast i8* %next.gep76.2 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %167, align 1, !tbaa !14
  %168 = getelementptr i8, i8* %next.gep76.2, i64 32
  %169 = bitcast i8* %168 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %169, align 1, !tbaa !14
  %170 = getelementptr i8, i8* %next.gep76.2, i64 64
  %171 = bitcast i8* %170 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %171, align 1, !tbaa !14
  %172 = getelementptr i8, i8* %next.gep76.2, i64 96
  %173 = bitcast i8* %172 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %173, align 1, !tbaa !14
  %index.next74.2 = or i64 %index73, 384
  %next.gep76.3 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.2
  %174 = bitcast i8* %next.gep76.3 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %174, align 1, !tbaa !14
  %175 = getelementptr i8, i8* %next.gep76.3, i64 32
  %176 = bitcast i8* %175 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %176, align 1, !tbaa !14
  %177 = getelementptr i8, i8* %next.gep76.3, i64 64
  %178 = bitcast i8* %177 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %178, align 1, !tbaa !14
  %179 = getelementptr i8, i8* %next.gep76.3, i64 96
  %180 = bitcast i8* %179 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %180, align 1, !tbaa !14
  %index.next74.3 = or i64 %index73, 512
  %next.gep76.4 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.3
  %181 = bitcast i8* %next.gep76.4 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %181, align 1, !tbaa !14
  %182 = getelementptr i8, i8* %next.gep76.4, i64 32
  %183 = bitcast i8* %182 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %183, align 1, !tbaa !14
  %184 = getelementptr i8, i8* %next.gep76.4, i64 64
  %185 = bitcast i8* %184 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %185, align 1, !tbaa !14
  %186 = getelementptr i8, i8* %next.gep76.4, i64 96
  %187 = bitcast i8* %186 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %187, align 1, !tbaa !14
  %index.next74.4 = or i64 %index73, 640
  %next.gep76.5 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.4
  %188 = bitcast i8* %next.gep76.5 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %188, align 1, !tbaa !14
  %189 = getelementptr i8, i8* %next.gep76.5, i64 32
  %190 = bitcast i8* %189 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %190, align 1, !tbaa !14
  %191 = getelementptr i8, i8* %next.gep76.5, i64 64
  %192 = bitcast i8* %191 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %192, align 1, !tbaa !14
  %193 = getelementptr i8, i8* %next.gep76.5, i64 96
  %194 = bitcast i8* %193 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %194, align 1, !tbaa !14
  %index.next74.5 = or i64 %index73, 768
  %next.gep76.6 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.5
  %195 = bitcast i8* %next.gep76.6 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %195, align 1, !tbaa !14
  %196 = getelementptr i8, i8* %next.gep76.6, i64 32
  %197 = bitcast i8* %196 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %197, align 1, !tbaa !14
  %198 = getelementptr i8, i8* %next.gep76.6, i64 64
  %199 = bitcast i8* %198 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %199, align 1, !tbaa !14
  %200 = getelementptr i8, i8* %next.gep76.6, i64 96
  %201 = bitcast i8* %200 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %201, align 1, !tbaa !14
  %index.next74.6 = or i64 %index73, 896
  %next.gep76.7 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.6
  %202 = bitcast i8* %next.gep76.7 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %202, align 1, !tbaa !14
  %203 = getelementptr i8, i8* %next.gep76.7, i64 32
  %204 = bitcast i8* %203 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %204, align 1, !tbaa !14
  %205 = getelementptr i8, i8* %next.gep76.7, i64 64
  %206 = bitcast i8* %205 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %206, align 1, !tbaa !14
  %207 = getelementptr i8, i8* %next.gep76.7, i64 96
  %208 = bitcast i8* %207 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %208, align 1, !tbaa !14
  %index.next74.7 = add i64 %index73, 1024
  %niter226.nsub.7 = add i64 %niter226, -8
  %niter226.ncmp.7 = icmp eq i64 %niter226.nsub.7, 0
  br i1 %niter226.ncmp.7, label %middle.block61.unr-lcssa, label %vector.body63, !llvm.loop !211

middle.block61.unr-lcssa:                         ; preds = %vector.body63, %vector.ph70
  %index73.unr = phi i64 [ 0, %vector.ph70 ], [ %index.next74.7, %vector.body63 ]
  %lcmp.mod224.not = icmp eq i64 %xtraiter222, 0
  br i1 %lcmp.mod224.not, label %middle.block61, label %vector.body63.epil

vector.body63.epil:                               ; preds = %middle.block61.unr-lcssa, %vector.body63.epil
  %index73.epil = phi i64 [ %index.next74.epil, %vector.body63.epil ], [ %index73.unr, %middle.block61.unr-lcssa ]
  %epil.iter223 = phi i64 [ %epil.iter223.sub, %vector.body63.epil ], [ %xtraiter222, %middle.block61.unr-lcssa ]
  %next.gep76.epil = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73.epil
  %209 = bitcast i8* %next.gep76.epil to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %209, align 1, !tbaa !14
  %210 = getelementptr i8, i8* %next.gep76.epil, i64 32
  %211 = bitcast i8* %210 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %211, align 1, !tbaa !14
  %212 = getelementptr i8, i8* %next.gep76.epil, i64 64
  %213 = bitcast i8* %212 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %213, align 1, !tbaa !14
  %214 = getelementptr i8, i8* %next.gep76.epil, i64 96
  %215 = bitcast i8* %214 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %215, align 1, !tbaa !14
  %index.next74.epil = add i64 %index73.epil, 128
  %epil.iter223.sub = add i64 %epil.iter223, -1
  %epil.iter223.cmp.not = icmp eq i64 %epil.iter223.sub, 0
  br i1 %epil.iter223.cmp.not, label %middle.block61, label %vector.body63.epil, !llvm.loop !212

middle.block61:                                   ; preds = %vector.body63.epil, %middle.block61.unr-lcssa
  %cmp.n75 = icmp eq i64 %n.vec72, %exitcount.ptrcnt.to.int
  br i1 %cmp.n75, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block61
  %ind.end89 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec72
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 124
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec72, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %216 = sub i64 0, %dst.0.lcssa91164
  %scevgep80 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %216
  %exitcount.ptrcnt.to.int82 = ptrtoint i8* %scevgep80 to i64
  %n.vec84 = and i64 %exitcount.ptrcnt.to.int82, -4
  %ind.end88 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec84
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index85 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next86, %vec.epilog.vector.body ]
  %next.gep91 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index85
  %217 = bitcast i8* %next.gep91 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %217, align 1, !tbaa !14
  %index.next86 = add i64 %index85, 4
  %218 = icmp eq i64 %index.next86, %n.vec84
  br i1 %218, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n90 = icmp eq i64 %n.vec84, %exitcount.ptrcnt.to.int82
  br i1 %cmp.n90, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end89, %vec.epilog.iter.check ], [ %ind.end88, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.prol.loopexit, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189.7, %while.body187 ], [ %dst.0870.unr, %while.body187.prol.loopexit ]
  %start.1869.idx = phi i64 [ %start.1869.add.7, %while.body187 ], [ %start.1869.idx.unr, %while.body187.prol.loopexit ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %219 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %219, i8* %dst.0870, align 1, !tbaa !14
  %start.1869.ptr.1 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add
  %start.1869.add.1 = add nuw nsw i64 %start.1869.idx, 2
  %220 = load i8, i8* %start.1869.ptr.1, align 1, !tbaa !14
  %incdec.ptr189.1 = getelementptr inbounds i8, i8* %dst.0870, i64 2
  store i8 %220, i8* %incdec.ptr189, align 1, !tbaa !14
  %start.1869.ptr.2 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.1
  %start.1869.add.2 = add nuw nsw i64 %start.1869.idx, 3
  %221 = load i8, i8* %start.1869.ptr.2, align 1, !tbaa !14
  %incdec.ptr189.2 = getelementptr inbounds i8, i8* %dst.0870, i64 3
  store i8 %221, i8* %incdec.ptr189.1, align 1, !tbaa !14
  %start.1869.ptr.3 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.2
  %start.1869.add.3 = add nuw nsw i64 %start.1869.idx, 4
  %222 = load i8, i8* %start.1869.ptr.3, align 1, !tbaa !14
  %incdec.ptr189.3 = getelementptr inbounds i8, i8* %dst.0870, i64 4
  store i8 %222, i8* %incdec.ptr189.2, align 1, !tbaa !14
  %start.1869.ptr.4 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.3
  %start.1869.add.4 = add nuw nsw i64 %start.1869.idx, 5
  %223 = load i8, i8* %start.1869.ptr.4, align 1, !tbaa !14
  %incdec.ptr189.4 = getelementptr inbounds i8, i8* %dst.0870, i64 5
  store i8 %223, i8* %incdec.ptr189.3, align 1, !tbaa !14
  %start.1869.ptr.5 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.4
  %start.1869.add.5 = add nuw nsw i64 %start.1869.idx, 6
  %224 = load i8, i8* %start.1869.ptr.5, align 1, !tbaa !14
  %incdec.ptr189.5 = getelementptr inbounds i8, i8* %dst.0870, i64 6
  store i8 %224, i8* %incdec.ptr189.4, align 1, !tbaa !14
  %start.1869.ptr.6 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.5
  %start.1869.add.6 = add nuw nsw i64 %start.1869.idx, 7
  %225 = load i8, i8* %start.1869.ptr.6, align 1, !tbaa !14
  %incdec.ptr189.6 = getelementptr inbounds i8, i8* %dst.0870, i64 7
  store i8 %225, i8* %incdec.ptr189.5, align 1, !tbaa !14
  %start.1869.ptr.7 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.6
  %start.1869.add.7 = add nuw nsw i64 %start.1869.idx, 8
  %226 = load i8, i8* %start.1869.ptr.7, align 1, !tbaa !14
  %incdec.ptr189.7 = getelementptr inbounds i8, i8* %dst.0870, i64 8
  store i8 %226, i8* %incdec.ptr189.6, align 1, !tbaa !14
  %cmp186.not.7 = icmp eq i64 %start.1869.add.7, -1
  br i1 %cmp186.not.7, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block61, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %61
  %and = and i32 %add197, -8
  %227 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %227, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %227, i64 128, i64 1, i8* nonnull %call.i598) #16
  %228 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %228, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %229 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %228 to i64
  %min.iters.check95 = icmp ult i32 %228, 17
  br i1 %min.iters.check95, label %for.body.i.i.preheader, label %vector.ph96

vector.ph96:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf97 = and i64 %wide.trip.count.i.i, 15
  %230 = icmp eq i64 %n.mod.vf97, 0
  %231 = select i1 %230, i64 16, i64 %n.mod.vf97
  %n.vec98 = sub nsw i64 %wide.trip.count.i.i, %231
  br label %vector.body94

vector.body94:                                    ; preds = %vector.body94, %vector.ph96
  %index99 = phi i64 [ 0, %vector.ph96 ], [ %index.next100, %vector.body94 ]
  %vec.ind103 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph96 ], [ %vec.ind.next107, %vector.body94 ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi, %vector.body94 ]
  %vec.phi108 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi120, %vector.body94 ]
  %vec.phi109 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi121, %vector.body94 ]
  %vec.phi110 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi122, %vector.body94 ]
  %step.add = add <4 x i64> %vec.ind103, <i64 4, i64 4, i64 4, i64 4>
  %step.add104 = add <4 x i64> %vec.ind103, <i64 8, i64 8, i64 8, i64 8>
  %step.add105 = add <4 x i64> %vec.ind103, <i64 12, i64 12, i64 12, i64 12>
  %232 = or i64 %index99, 4
  %233 = or i64 %index99, 8
  %234 = or i64 %index99, 12
  %235 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index99, i32 2
  %236 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %232, i32 2
  %237 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %233, i32 2
  %238 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %234, i32 2
  %239 = bitcast i32* %235 to <16 x i32>*
  %240 = bitcast i32* %236 to <16 x i32>*
  %241 = bitcast i32* %237 to <16 x i32>*
  %242 = bitcast i32* %238 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %239, align 4, !tbaa !182
  %wide.vec111 = load <16 x i32>, <16 x i32>* %240, align 4, !tbaa !182
  %wide.vec112 = load <16 x i32>, <16 x i32>* %241, align 4, !tbaa !182
  %wide.vec113 = load <16 x i32>, <16 x i32>* %242, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec114 = shufflevector <16 x i32> %wide.vec111, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec115 = shufflevector <16 x i32> %wide.vec112, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec116 = shufflevector <16 x i32> %wide.vec113, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %243 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %244 = icmp sgt <4 x i32> %strided.vec114, zeroinitializer
  %245 = icmp sgt <4 x i32> %strided.vec115, zeroinitializer
  %246 = icmp sgt <4 x i32> %strided.vec116, zeroinitializer
  %247 = zext <4 x i32> %strided.vec to <4 x i64>
  %248 = zext <4 x i32> %strided.vec114 to <4 x i64>
  %249 = zext <4 x i32> %strided.vec115 to <4 x i64>
  %250 = zext <4 x i32> %strided.vec116 to <4 x i64>
  %251 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind103, i32 1
  %252 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add, i32 1
  %253 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add104, i32 1
  %254 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add105, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %251, i32 4, <4 x i1> %243, <4 x i32> undef), !tbaa !178
  %wide.masked.gather117 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %252, i32 4, <4 x i1> %244, <4 x i32> undef), !tbaa !178
  %wide.masked.gather118 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %253, i32 4, <4 x i1> %245, <4 x i32> undef), !tbaa !178
  %wide.masked.gather119 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %254, i32 4, <4 x i1> %246, <4 x i32> undef), !tbaa !178
  %255 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %256 = add nsw <4 x i32> %wide.masked.gather117, <i32 -1, i32 -1, i32 -1, i32 -1>
  %257 = add nsw <4 x i32> %wide.masked.gather118, <i32 -1, i32 -1, i32 -1, i32 -1>
  %258 = add nsw <4 x i32> %wide.masked.gather119, <i32 -1, i32 -1, i32 -1, i32 -1>
  %259 = sext <4 x i32> %255 to <4 x i64>
  %260 = sext <4 x i32> %256 to <4 x i64>
  %261 = sext <4 x i32> %257 to <4 x i64>
  %262 = sext <4 x i32> %258 to <4 x i64>
  %263 = mul nsw <4 x i64> %259, %247
  %264 = mul nsw <4 x i64> %260, %248
  %265 = mul nsw <4 x i64> %261, %249
  %266 = mul nsw <4 x i64> %262, %250
  %267 = select <4 x i1> %243, <4 x i64> %263, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %267
  %268 = select <4 x i1> %244, <4 x i64> %264, <4 x i64> zeroinitializer
  %predphi120 = add <4 x i64> %vec.phi108, %268
  %269 = select <4 x i1> %245, <4 x i64> %265, <4 x i64> zeroinitializer
  %predphi121 = add <4 x i64> %vec.phi109, %269
  %270 = select <4 x i1> %246, <4 x i64> %266, <4 x i64> zeroinitializer
  %predphi122 = add <4 x i64> %vec.phi110, %270
  %index.next100 = add i64 %index99, 16
  %vec.ind.next107 = add <4 x i64> %vec.ind103, <i64 16, i64 16, i64 16, i64 16>
  %271 = icmp eq i64 %index.next100, %n.vec98
  br i1 %271, label %middle.block92, label %vector.body94, !llvm.loop !216

middle.block92:                                   ; preds = %vector.body94
  %bin.rdx = add <4 x i64> %predphi120, %predphi
  %bin.rdx123 = add <4 x i64> %predphi121, %bin.rdx
  %bin.rdx124 = add <4 x i64> %predphi122, %bin.rdx123
  %272 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx124)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block92, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec98, %middle.block92 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %272, %middle.block92 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 2
  %273 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %273, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %273 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 1
  %274 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %274, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !217

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check128 = icmp ult i32 %228, 17
  br i1 %min.iters.check128, label %for.body.i13.i.preheader211, label %vector.ph129

vector.ph129:                                     ; preds = %for.body.i13.i.preheader
  %n.mod.vf130 = and i64 %wide.trip.count.i.i, 15
  %275 = icmp eq i64 %n.mod.vf130, 0
  %276 = select i1 %275, i64 16, i64 %n.mod.vf130
  %n.vec131 = sub nsw i64 %wide.trip.count.i.i, %276
  br label %vector.body127

vector.body127:                                   ; preds = %vector.body127, %vector.ph129
  %index132 = phi i64 [ 0, %vector.ph129 ], [ %index.next133, %vector.body127 ]
  %vec.ind136 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph129 ], [ %vec.ind.next141, %vector.body127 ]
  %vec.phi142 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi158, %vector.body127 ]
  %vec.phi143 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi159, %vector.body127 ]
  %vec.phi144 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi160, %vector.body127 ]
  %vec.phi145 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi161, %vector.body127 ]
  %step.add137 = add <4 x i64> %vec.ind136, <i64 4, i64 4, i64 4, i64 4>
  %step.add138 = add <4 x i64> %vec.ind136, <i64 8, i64 8, i64 8, i64 8>
  %step.add139 = add <4 x i64> %vec.ind136, <i64 12, i64 12, i64 12, i64 12>
  %277 = or i64 %index132, 4
  %278 = or i64 %index132, 8
  %279 = or i64 %index132, 12
  %280 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index132, i32 2
  %281 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %277, i32 2
  %282 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %278, i32 2
  %283 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %279, i32 2
  %284 = bitcast i32* %280 to <16 x i32>*
  %285 = bitcast i32* %281 to <16 x i32>*
  %286 = bitcast i32* %282 to <16 x i32>*
  %287 = bitcast i32* %283 to <16 x i32>*
  %wide.vec146 = load <16 x i32>, <16 x i32>* %284, align 4, !tbaa !182
  %wide.vec147 = load <16 x i32>, <16 x i32>* %285, align 4, !tbaa !182
  %wide.vec148 = load <16 x i32>, <16 x i32>* %286, align 4, !tbaa !182
  %wide.vec149 = load <16 x i32>, <16 x i32>* %287, align 4, !tbaa !182
  %strided.vec150 = shufflevector <16 x i32> %wide.vec146, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec151 = shufflevector <16 x i32> %wide.vec147, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec152 = shufflevector <16 x i32> %wide.vec148, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec153 = shufflevector <16 x i32> %wide.vec149, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %288 = icmp slt <4 x i32> %strided.vec150, zeroinitializer
  %289 = icmp slt <4 x i32> %strided.vec151, zeroinitializer
  %290 = icmp slt <4 x i32> %strided.vec152, zeroinitializer
  %291 = icmp slt <4 x i32> %strided.vec153, zeroinitializer
  %292 = sext <4 x i32> %strided.vec150 to <4 x i64>
  %293 = sext <4 x i32> %strided.vec151 to <4 x i64>
  %294 = sext <4 x i32> %strided.vec152 to <4 x i64>
  %295 = sext <4 x i32> %strided.vec153 to <4 x i64>
  %296 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind136, i32 1
  %297 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add137, i32 1
  %298 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add138, i32 1
  %299 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add139, i32 1
  %wide.masked.gather154 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %296, i32 4, <4 x i1> %288, <4 x i32> undef), !tbaa !178
  %wide.masked.gather155 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %297, i32 4, <4 x i1> %289, <4 x i32> undef), !tbaa !178
  %wide.masked.gather156 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %298, i32 4, <4 x i1> %290, <4 x i32> undef), !tbaa !178
  %wide.masked.gather157 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %299, i32 4, <4 x i1> %291, <4 x i32> undef), !tbaa !178
  %300 = add nsw <4 x i32> %wide.masked.gather154, <i32 -1, i32 -1, i32 -1, i32 -1>
  %301 = add nsw <4 x i32> %wide.masked.gather155, <i32 -1, i32 -1, i32 -1, i32 -1>
  %302 = add nsw <4 x i32> %wide.masked.gather156, <i32 -1, i32 -1, i32 -1, i32 -1>
  %303 = add nsw <4 x i32> %wide.masked.gather157, <i32 -1, i32 -1, i32 -1, i32 -1>
  %304 = sext <4 x i32> %300 to <4 x i64>
  %305 = sext <4 x i32> %301 to <4 x i64>
  %306 = sext <4 x i32> %302 to <4 x i64>
  %307 = sext <4 x i32> %303 to <4 x i64>
  %308 = mul nsw <4 x i64> %304, %292
  %309 = mul nsw <4 x i64> %305, %293
  %310 = mul nsw <4 x i64> %306, %294
  %311 = mul nsw <4 x i64> %307, %295
  %312 = select <4 x i1> %288, <4 x i64> %308, <4 x i64> zeroinitializer
  %predphi158 = add <4 x i64> %vec.phi142, %312
  %313 = select <4 x i1> %289, <4 x i64> %309, <4 x i64> zeroinitializer
  %predphi159 = add <4 x i64> %vec.phi143, %313
  %314 = select <4 x i1> %290, <4 x i64> %310, <4 x i64> zeroinitializer
  %predphi160 = add <4 x i64> %vec.phi144, %314
  %315 = select <4 x i1> %291, <4 x i64> %311, <4 x i64> zeroinitializer
  %predphi161 = add <4 x i64> %vec.phi145, %315
  %index.next133 = add i64 %index132, 16
  %vec.ind.next141 = add <4 x i64> %vec.ind136, <i64 16, i64 16, i64 16, i64 16>
  %316 = icmp eq i64 %index.next133, %n.vec131
  br i1 %316, label %middle.block125, label %vector.body127, !llvm.loop !218

middle.block125:                                  ; preds = %vector.body127
  %bin.rdx162 = add <4 x i64> %predphi159, %predphi158
  %bin.rdx163 = add <4 x i64> %predphi160, %bin.rdx162
  %bin.rdx164 = add <4 x i64> %predphi161, %bin.rdx163
  %317 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx164)
  br label %for.body.i13.i.preheader211

for.body.i13.i.preheader211:                      ; preds = %middle.block125, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec131, %middle.block125 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %317, %middle.block125 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader211, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader211 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader211 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 2
  %318 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %318, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %318 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 1
  %319 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %319, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !219

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694 = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %320 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i696 = zext i8 %320 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694
  %321 = trunc i64 %mul.i698 to i32
  %322 = add i32 %321, 7
  %323 = and i32 %322, 7
  %conv204 = xor i32 %323, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #16
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %324 = icmp sgt i32 %228, 2
  %spec.store.select = select i1 %324, i32 %228, i32 2
  %325 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %325) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !73
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %321
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !73
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  store i32 6, i32* %arrayinit.element222, align 4, !tbaa !73
  %arrayinit.element223 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 3
  store i32 8, i32* %arrayinit.element223, align 4, !tbaa !73
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %326 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %326 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !73
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  store i32 1, i32* %arrayinit.element228, align 4, !tbaa !73
  %arrayinit.element229 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 6
  store i32 5, i32* %arrayinit.element229, align 4, !tbaa !73
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !73
  %call.i683 = call i64 @fwrite(i8* nonnull %325, i64 32, i64 1, i8* nonnull %call.i598) #16
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %327 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %327) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %328 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %328, i32* %arrayinit.begin235, align 4, !tbaa !73
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %329 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %329, i32* %arrayinit.element238, align 4, !tbaa !73
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %330 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %330, i32* %arrayinit.element241, align 4, !tbaa !73
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %331 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %331, i32* %arrayinit.element244, align 4, !tbaa !73
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %327, i64 %conv248, i64 1, i8* nonnull %call.i598) #16
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %332 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %332) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !73
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !73
  %call.i660 = call i64 @fwrite(i8* nonnull %332, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %62, i64 %conv258, i64 1, i8* nonnull %call.i598) #16
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %333 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %333) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %334 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %334 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !73
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %321, i32* %arrayinit.element266, align 4, !tbaa !73
  %call.i638 = call i64 @fwrite(i8* nonnull %333, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %333) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %332) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %327) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %325) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %335 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %335) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %336 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %336, i32* %arrayinit.begin290, align 4, !tbaa !73
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %337 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %337, i32* %arrayinit.element293, align 4, !tbaa !73
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %338 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %338, i32* %arrayinit.element296, align 4, !tbaa !73
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %339 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %339, i32* %arrayinit.element299, align 4, !tbaa !73
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !73
  %call.i627 = call i64 @fwrite(i8* nonnull %335, i64 20, i64 1, i8* nonnull %call.i598) #16
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %335) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %340 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %340) #11
  %div = udiv i32 4096, %div.i
  %341 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %cmp320856 = icmp sgt i32 %341, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %342 = load i32, i32* %min.i.3, align 4, !tbaa !181
  %343 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 4, !tbaa !181
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %344 = phi i32 [ %342, %for.body322.lr.ph ], [ %430, %for.inc399 ]
  %345 = phi i32 [ %341, %for.body322.lr.ph ], [ %431, %for.inc399 ]
  %346 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %432, %for.inc399 ]
  %347 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %433, %for.inc399 ]
  %348 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %434, %for.inc399 ]
  %349 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %435, %for.inc399 ]
  %dim3.0858 = phi i32 [ %342, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %348, 0
  br i1 %cmp331848, label %for.body333.preheader, label %for.inc399

for.body333.preheader:                            ; preds = %for.body322
  %.pre893 = load i32, i32* %min.i.1, align 4, !tbaa !181
  %.pre894 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  br label %for.body333

for.body333:                                      ; preds = %for.inc394, %for.body333.preheader
  %350 = phi i32 [ %424, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %351 = phi i32 [ %425, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %352 = phi i32 [ %426, %for.inc394 ], [ %346, %for.body333.preheader ]
  %353 = phi i32 [ %427, %for.inc394 ], [ %347, %for.body333.preheader ]
  %354 = phi i32 [ %428, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %355 = phi i32 [ %429, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %349, %for.body333.preheader ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body333.preheader ]
  %cmp342839 = icmp sgt i32 %354, 0
  br i1 %cmp342839, label %for.body344.preheader, label %for.inc394

for.body344.preheader:                            ; preds = %for.body333
  %.pre = load i32, i32* %extent.i, align 4, !tbaa !178
  br label %for.body344

for.body344:                                      ; preds = %for.body344.preheader, %for.inc389
  %356 = phi i32 [ %421, %for.inc389 ], [ %350, %for.body344.preheader ]
  %357 = phi i32 [ %422, %for.inc389 ], [ %351, %for.body344.preheader ]
  %358 = phi i32 [ %423, %for.inc389 ], [ %.pre, %for.body344.preheader ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %355, %for.body344.preheader ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body344.preheader ]
  %cmp353834 = icmp sgt i32 %358, 0
  br i1 %cmp353834, label %for.body355.preheader, label %for.inc389

for.body355.preheader:                            ; preds = %for.body344
  %359 = load i32, i32* %min.i, align 4, !tbaa !181
  br label %for.body355

for.body355:                                      ; preds = %for.inc384, %for.body355.preheader
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %359, %for.body355.preheader ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body355.preheader ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %343) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !73
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !73
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !73
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !73
  %360 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17.i = icmp sgt i32 %360, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %361 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %wide.trip.count.i = zext i32 %360 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 2
  %362 = load i32, i32* %stride.i621920, align 4, !tbaa !182
  %conv.i622921 = sext i32 %362 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 0
  %363 = load i32, i32* %min.i623922, align 4, !tbaa !181
  %sub.i923 = sub nsw i32 %dim0.0836, %363
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %360, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !220

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 2
  %364 = load i32, i32* %stride.i62126, align 4, !tbaa !182
  %conv.i62227 = sext i32 %364 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 0
  %365 = load i32, i32* %min.i62328, align 4, !tbaa !181
  %sub.i29 = sub nsw i32 %dim1.0841, %365
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %360, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !220

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %366 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check169 = icmp ult i64 %366, 17
  br i1 %min.iters.check169, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph170

vector.ph170:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf171 = and i64 %366, 15
  %367 = icmp eq i64 %n.mod.vf171, 0
  %368 = select i1 %367, i64 16, i64 %n.mod.vf171
  %n.vec172 = sub nsw i64 %366, %368
  %ind.end176 = add nsw i64 %n.vec172, 2
  %369 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body168

vector.body168:                                   ; preds = %vector.body168, %vector.ph170
  %index173 = phi i64 [ 0, %vector.ph170 ], [ %index.next174, %vector.body168 ]
  %vec.phi179 = phi <4 x i64> [ %369, %vector.ph170 ], [ %409, %vector.body168 ]
  %vec.phi180 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %410, %vector.body168 ]
  %vec.phi181 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %411, %vector.body168 ]
  %vec.phi182 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %412, %vector.body168 ]
  %offset.idx178 = or i64 %index173, 2
  %370 = or i64 %index173, 6
  %371 = or i64 %index173, 10
  %372 = or i64 %index173, 14
  %373 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx178
  %374 = bitcast i32* %373 to <4 x i32>*
  %wide.load183 = load <4 x i32>, <4 x i32>* %374, align 4, !tbaa !73
  %375 = getelementptr inbounds i32, i32* %373, i64 4
  %376 = bitcast i32* %375 to <4 x i32>*
  %wide.load184 = load <4 x i32>, <4 x i32>* %376, align 4, !tbaa !73
  %377 = getelementptr inbounds i32, i32* %373, i64 8
  %378 = bitcast i32* %377 to <4 x i32>*
  %wide.load185 = load <4 x i32>, <4 x i32>* %378, align 4, !tbaa !73
  %379 = getelementptr inbounds i32, i32* %373, i64 12
  %380 = bitcast i32* %379 to <4 x i32>*
  %wide.load186 = load <4 x i32>, <4 x i32>* %380, align 4, !tbaa !73
  %381 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %offset.idx178, i32 2
  %382 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %370, i32 2
  %383 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %371, i32 2
  %384 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %372, i32 2
  %385 = getelementptr inbounds i32, i32* %381, i64 -2
  %386 = bitcast i32* %385 to <16 x i32>*
  %387 = getelementptr inbounds i32, i32* %382, i64 -2
  %388 = bitcast i32* %387 to <16 x i32>*
  %389 = getelementptr inbounds i32, i32* %383, i64 -2
  %390 = bitcast i32* %389 to <16 x i32>*
  %391 = getelementptr inbounds i32, i32* %384, i64 -2
  %392 = bitcast i32* %391 to <16 x i32>*
  %wide.vec187 = load <16 x i32>, <16 x i32>* %386, align 4, !tbaa !73
  %wide.vec188 = load <16 x i32>, <16 x i32>* %388, align 4, !tbaa !73
  %wide.vec189 = load <16 x i32>, <16 x i32>* %390, align 4, !tbaa !73
  %wide.vec190 = load <16 x i32>, <16 x i32>* %392, align 4, !tbaa !73
  %strided.vec191 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec192 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec193 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec194 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec195 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec196 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec197 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec198 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %393 = sext <4 x i32> %strided.vec195 to <4 x i64>
  %394 = sext <4 x i32> %strided.vec196 to <4 x i64>
  %395 = sext <4 x i32> %strided.vec197 to <4 x i64>
  %396 = sext <4 x i32> %strided.vec198 to <4 x i64>
  %397 = sub nsw <4 x i32> %wide.load183, %strided.vec191
  %398 = sub nsw <4 x i32> %wide.load184, %strided.vec192
  %399 = sub nsw <4 x i32> %wide.load185, %strided.vec193
  %400 = sub nsw <4 x i32> %wide.load186, %strided.vec194
  %401 = sext <4 x i32> %397 to <4 x i64>
  %402 = sext <4 x i32> %398 to <4 x i64>
  %403 = sext <4 x i32> %399 to <4 x i64>
  %404 = sext <4 x i32> %400 to <4 x i64>
  %405 = mul nsw <4 x i64> %401, %393
  %406 = mul nsw <4 x i64> %402, %394
  %407 = mul nsw <4 x i64> %403, %395
  %408 = mul nsw <4 x i64> %404, %396
  %409 = add <4 x i64> %405, %vec.phi179
  %410 = add <4 x i64> %406, %vec.phi180
  %411 = add <4 x i64> %407, %vec.phi181
  %412 = add <4 x i64> %408, %vec.phi182
  %index.next174 = add i64 %index173, 16
  %413 = icmp eq i64 %index.next174, %n.vec172
  br i1 %413, label %middle.block166, label %vector.body168, !llvm.loop !221

middle.block166:                                  ; preds = %vector.body168
  %bin.rdx199 = add <4 x i64> %410, %409
  %bin.rdx200 = add <4 x i64> %411, %bin.rdx199
  %bin.rdx201 = add <4 x i64> %412, %bin.rdx200
  %414 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx201)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block166, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end176, %middle.block166 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %414, %middle.block166 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !73
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 2
  %415 = load i32, i32* %stride.i621, align 4, !tbaa !182
  %conv.i622 = sext i32 %415 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 0
  %416 = load i32, i32* %min.i623, align 4, !tbaa !181
  %sub.i = sub nsw i32 %.pre895.pre, %416
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !222

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %417 = load i8*, i8** %host.i, align 8, !tbaa !172
  %418 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %418 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %417, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #16
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %340, i64 %conv374, i64 1, i8* nonnull %call.i598) #16
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %419 = load i32, i32* %extent.i, align 4, !tbaa !178
  %420 = load i32, i32* %min.i, align 4, !tbaa !181
  %add352 = add nsw i32 %420, %419
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389.loopexit, !llvm.loop !223

for.inc389.loopexit:                              ; preds = %for.inc384
  %.pre15 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %.pre16 = load i32, i32* %min.i.1, align 4, !tbaa !181
  br label %for.inc389

for.inc389:                                       ; preds = %for.inc389.loopexit, %for.body344
  %421 = phi i32 [ %356, %for.body344 ], [ %.pre16, %for.inc389.loopexit ]
  %422 = phi i32 [ %357, %for.body344 ], [ %.pre15, %for.inc389.loopexit ]
  %423 = phi i32 [ %358, %for.body344 ], [ %419, %for.inc389.loopexit ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc389.loopexit ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %421, %422
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394.loopexit, !llvm.loop !224

for.inc394.loopexit:                              ; preds = %for.inc389
  %.pre896 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %.pre897 = load i32, i32* %min.i.2, align 4, !tbaa !181
  br label %for.inc394

for.inc394:                                       ; preds = %for.inc394.loopexit, %for.body333
  %424 = phi i32 [ %350, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %425 = phi i32 [ %351, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %426 = phi i32 [ %352, %for.body333 ], [ %.pre897, %for.inc394.loopexit ]
  %427 = phi i32 [ %353, %for.body333 ], [ %.pre896, %for.inc394.loopexit ]
  %428 = phi i32 [ %354, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %429 = phi i32 [ %355, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc394.loopexit ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %427, %426
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399.loopexit, !llvm.loop !225

for.inc399.loopexit:                              ; preds = %for.inc394
  %.pre898 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %.pre899 = load i32, i32* %min.i.3, align 4, !tbaa !181
  br label %for.inc399

for.inc399:                                       ; preds = %for.inc399.loopexit, %for.body322
  %430 = phi i32 [ %344, %for.body322 ], [ %.pre899, %for.inc399.loopexit ]
  %431 = phi i32 [ %345, %for.body322 ], [ %.pre898, %for.inc399.loopexit ]
  %432 = phi i32 [ %346, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %433 = phi i32 [ %347, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %434 = phi i32 [ %348, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %435 = phi i32 [ %349, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc399.loopexit ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %431, %430
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !226

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %340, i64 %conv408, i64 1, i8* nonnull %call.i598) #16
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %436 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %436) #11
  store i64 0, i64* %zero, align 8, !tbaa !110
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %436, i64 %conv415, i64 1, i8* nonnull %call.i598) #16
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %436) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %340) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #16
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26

for.body.1:                                       ; preds = %for.body.lr.ph
  %arrayidx.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 1
  %arrayidx14.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1
  %437 = bitcast %struct.halide_dimension_t* %arrayidx14.1 to i8*
  %438 = bitcast %struct.halide_dimension_t* %arrayidx.1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %437, i8* nonnull align 4 dereferenceable(16) %438, i64 16, i1 false), !tbaa.struct !177
  %extent.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %439 = load i32, i32* %extent.1, align 4, !tbaa !178
  %conv903.1 = zext i32 %439 to i64
  %mul.1 = mul nuw i64 %conv903, %conv903.1
  %exitcond.not17.1 = icmp eq i64 %11, 2
  br i1 %exitcond.not17.1, label %for.cond19.preheader, label %for.body.2, !llvm.loop !180

for.body.2:                                       ; preds = %for.body.1
  %arrayidx.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 2
  %arrayidx14.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2
  %440 = bitcast %struct.halide_dimension_t* %arrayidx14.2 to i8*
  %441 = bitcast %struct.halide_dimension_t* %arrayidx.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %440, i8* nonnull align 4 dereferenceable(16) %441, i64 16, i1 false), !tbaa.struct !177
  %extent.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %442 = load i32, i32* %extent.2, align 4, !tbaa !178
  %conv903.2 = zext i32 %442 to i64
  %mul.2 = mul i64 %mul.1, %conv903.2
  %exitcond.not17.2 = icmp eq i64 %11, 3
  br i1 %exitcond.not17.2, label %for.cond19.preheader, label %for.body.3, !llvm.loop !180

for.body.3:                                       ; preds = %for.body.2
  %arrayidx.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 3
  %arrayidx14.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3
  %443 = bitcast %struct.halide_dimension_t* %arrayidx14.3 to i8*
  %444 = bitcast %struct.halide_dimension_t* %arrayidx.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %443, i8* nonnull align 4 dereferenceable(16) %444, i64 16, i1 false), !tbaa.struct !177
  %extent.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %445 = load i32, i32* %extent.3, align 4, !tbaa !178
  %conv903.3 = zext i32 %445 to i64
  %mul.3 = mul i64 %mul.2, %conv903.3
  br label %for.cond19.preheader
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !227
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #17
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #16
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !229

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !231
  tail call void @halide_free(i8* null, i8* %1) #16
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #16
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #17
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !233
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -64
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !234

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !235
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !237
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !238
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #16
  br label %if.end

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.040 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #17
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !110
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %add13 = add i64 %8, %dst_off.addr.038
  %inc = add nuw i64 %i.040, 1
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp7 = icmp ult i64 %inc, %9
  br i1 %cmp7, label %for.body, label %if.end, !llvm.loop !239

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !235
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !237
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !240
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !174
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !235
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !172
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !174
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !237
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !238
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %8 = bitcast i64* %arrayidx to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %8, align 8, !tbaa !110
  %9 = bitcast i64* %arrayidx12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %9, align 8, !tbaa !110
  %10 = bitcast i64* %arrayidx14 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %10, align 8, !tbaa !110
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %11 = bitcast i64* %arrayidx.4 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %11, align 8, !tbaa !110
  %12 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %12, align 8, !tbaa !110
  %13 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %14 = bitcast i64* %arrayidx.8 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %14, align 8, !tbaa !110
  %15 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %15, align 8, !tbaa !110
  %16 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %16, align 8, !tbaa !110
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %17 = bitcast i64* %arrayidx.12 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %17, align 8, !tbaa !110
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %18 = bitcast i64* %arrayidx12.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %18, align 8, !tbaa !110
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %19 = bitcast i64* %arrayidx14.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %19, align 8, !tbaa !110
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %20 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17272 = icmp sgt i32 %20, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %21 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !176
  %wide.trip.count = zext i32 %20 to i64
  %min.iters.check = icmp ult i32 %20, 17
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %73, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 15
  %23 = icmp eq i64 %n.mod.vf, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %24
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %68, %vector.body ]
  %vec.phi2 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %69, %vector.body ]
  %vec.phi3 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %70, %vector.body ]
  %vec.phi4 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %71, %vector.body ]
  %25 = or i64 %index, 4
  %26 = or i64 %index, 8
  %27 = or i64 %index, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %index, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %27, i32 2
  %32 = getelementptr inbounds i32, i32* %28, i64 -2
  %33 = bitcast i32* %32 to <16 x i32>*
  %34 = getelementptr inbounds i32, i32* %29, i64 -2
  %35 = bitcast i32* %34 to <16 x i32>*
  %36 = getelementptr inbounds i32, i32* %30, i64 -2
  %37 = bitcast i32* %36 to <16 x i32>*
  %38 = getelementptr inbounds i32, i32* %31, i64 -2
  %39 = bitcast i32* %38 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !73
  %wide.vec5 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !73
  %wide.vec6 = load <16 x i32>, <16 x i32>* %37, align 4, !tbaa !73
  %wide.vec7 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !73
  %strided.vec11 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec5, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec6, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec7, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %40 = sext <4 x i32> %strided.vec11 to <4 x i64>
  %41 = sext <4 x i32> %strided.vec12 to <4 x i64>
  %42 = sext <4 x i32> %strided.vec13 to <4 x i64>
  %43 = sext <4 x i32> %strided.vec14 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 0
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 0
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 0
  %48 = bitcast i32* %44 to <16 x i32>*
  %49 = bitcast i32* %45 to <16 x i32>*
  %50 = bitcast i32* %46 to <16 x i32>*
  %51 = bitcast i32* %47 to <16 x i32>*
  %wide.vec15 = load <16 x i32>, <16 x i32>* %48, align 4, !tbaa !181
  %wide.vec16 = load <16 x i32>, <16 x i32>* %49, align 4, !tbaa !181
  %wide.vec17 = load <16 x i32>, <16 x i32>* %50, align 4, !tbaa !181
  %wide.vec18 = load <16 x i32>, <16 x i32>* %51, align 4, !tbaa !181
  %52 = sub nsw <16 x i32> %wide.vec15, %wide.vec
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %54 = sub nsw <16 x i32> %wide.vec16, %wide.vec5
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %56 = sub nsw <16 x i32> %wide.vec17, %wide.vec6
  %57 = shufflevector <16 x i32> %56, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %58 = sub nsw <16 x i32> %wide.vec18, %wide.vec7
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = sext <4 x i32> %53 to <4 x i64>
  %61 = sext <4 x i32> %55 to <4 x i64>
  %62 = sext <4 x i32> %57 to <4 x i64>
  %63 = sext <4 x i32> %59 to <4 x i64>
  %64 = mul nsw <4 x i64> %60, %40
  %65 = mul nsw <4 x i64> %61, %41
  %66 = mul nsw <4 x i64> %62, %42
  %67 = mul nsw <4 x i64> %63, %43
  %68 = add <4 x i64> %64, %vec.phi
  %69 = add <4 x i64> %65, %vec.phi2
  %70 = add <4 x i64> %66, %vec.phi3
  %71 = add <4 x i64> %67, %vec.phi4
  %index.next = add i64 %index, 16
  %72 = icmp eq i64 %index.next, %n.vec
  br i1 %72, label %middle.block, label %vector.body, !llvm.loop !241

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %69, %68
  %bin.rdx23 = add <4 x i64> %70, %bin.rdx
  %bin.rdx24 = add <4 x i64> %71, %bin.rdx23
  %73 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx24)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19, %cond.end8
  %74 = phi i64 [ 0, %cond.end8 ], [ %add, %for.body19 ]
  %mul37 = mul i64 %74, %conv
  store i64 %mul37, i64* %src_begin, align 8, !tbaa !240
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %75 = load i32, i32* %dimensions39, align 4, !tbaa !175
  %cmp40.not = icmp eq i32 %20, %75
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %76 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 2
  %77 = load i32, i32* %stride, align 4, !tbaa !182
  %conv22 = sext i32 %77 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv284, i32 0
  %78 = load i32, i32* %min, align 4, !tbaa !181
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 0
  %79 = load i32, i32* %min29, align 4, !tbaa !181
  %sub = sub nsw i32 %78, %79
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %76
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.cond.cleanup18, label %for.body19, !llvm.loop !242

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %80 = load i8, i8* %bits.i253, align 1, !tbaa !136
  %conv.i254 = zext i8 %80 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %20, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %81 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %81, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %82 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !176
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %83 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !176
  %wide.trip.count282 = zext i32 %20 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %84 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %84, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !238
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !110
  %85 = bitcast i64* %arrayidx.1 to <4 x i64>*
  %86 = bitcast i64* %arrayidx to <4 x i64>*
  %87 = bitcast i64* %arrayidx12.1 to <4 x i64>*
  %88 = bitcast i64* %arrayidx12 to <4 x i64>*
  %89 = bitcast i64* %arrayidx14.1 to <4 x i64>*
  %90 = bitcast i64* %arrayidx14 to <4 x i64>*
  %91 = bitcast i64* %arrayidx.5 to <4 x i64>*
  %92 = bitcast i64* %arrayidx.4 to <4 x i64>*
  %93 = bitcast i64* %arrayidx12.5 to <4 x i64>*
  %94 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  %95 = bitcast i64* %arrayidx14.5 to <4 x i64>*
  %96 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  %97 = bitcast i64* %arrayidx.9 to <4 x i64>*
  %98 = bitcast i64* %arrayidx.8 to <4 x i64>*
  %99 = bitcast i64* %arrayidx12.9 to <4 x i64>*
  %100 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  %101 = bitcast i64* %arrayidx14.9 to <4 x i64>*
  %102 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  %103 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %104 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %106 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %108 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 2
  %109 = load i32, i32* %stride63, align 4, !tbaa !182
  %conv64 = sext i32 %109 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %83, i64 %indvars.iv278, i32 2
  %110 = load i32, i32* %stride73, align 4, !tbaa !182
  %conv74 = sext i32 %110 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %111 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %112 = load i64, i64* %arrayidx84.us, align 8, !tbaa !110
  %cmp85.us = icmp ult i64 %mul68, %112
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !243

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %111, %for.body81.preheader ]
  %113 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %113
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %114 = sext i32 %insert.0.lcssa to i64
  %115 = sub i64 %indvars.iv278, %114
  %116 = xor i64 %114, -1
  %117 = add i64 %indvars.iv278, %116
  %xtraiter = and i64 %115, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body95.prol.loopexit, label %for.body95.prol

for.body95.prol:                                  ; preds = %for.body95.preheader, %for.body95.prol
  %indvars.iv280.prol = phi i64 [ %indvars.iv.next281.prol, %for.body95.prol ], [ %indvars.iv278, %for.body95.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body95.prol ], [ %xtraiter, %for.body95.preheader ]
  %indvars.iv.next281.prol = add nsw i64 %indvars.iv280.prol, -1
  %arrayidx99.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.prol
  %118 = load i64, i64* %arrayidx99.prol, align 8, !tbaa !110
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280.prol
  store i64 %118, i64* %arrayidx102.prol, align 8, !tbaa !110
  %arrayidx106.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.prol
  %119 = load i64, i64* %arrayidx106.prol, align 8, !tbaa !110
  %arrayidx109.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280.prol
  store i64 %119, i64* %arrayidx109.prol, align 8, !tbaa !110
  %arrayidx113.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.prol
  %120 = load i64, i64* %arrayidx113.prol, align 8, !tbaa !110
  %arrayidx116.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280.prol
  store i64 %120, i64* %arrayidx116.prol, align 8, !tbaa !110
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body95.prol.loopexit, label %for.body95.prol, !llvm.loop !244

for.body95.prol.loopexit:                         ; preds = %for.body95.prol, %for.body95.preheader
  %indvars.iv280.unr = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281.prol, %for.body95.prol ]
  %121 = icmp ult i64 %117, 3
  br i1 %121, label %for.cond.cleanup94, label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95.prol.loopexit, %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 1
  %122 = load i32, i32* %extent122, align 4, !tbaa !178
  %conv123 = sext i32 %122 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %113
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !110
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %113
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !110
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %113
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !110
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !245

for.body95:                                       ; preds = %for.body95.prol.loopexit, %for.body95
  %indvars.iv280 = phi i64 [ %indvars.iv.next281.3, %for.body95 ], [ %indvars.iv280.unr, %for.body95.prol.loopexit ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx99, align 8, !tbaa !110
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx102, align 8, !tbaa !110
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %124 = load i64, i64* %arrayidx106, align 8, !tbaa !110
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %124, i64* %arrayidx109, align 8, !tbaa !110
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %125 = load i64, i64* %arrayidx113, align 8, !tbaa !110
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %125, i64* %arrayidx116, align 8, !tbaa !110
  %indvars.iv.next281.1 = add nsw i64 %indvars.iv280, -2
  %arrayidx99.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  %126 = load i64, i64* %arrayidx99.1, align 8, !tbaa !110
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  store i64 %126, i64* %arrayidx102.1, align 8, !tbaa !110
  %arrayidx106.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  %127 = load i64, i64* %arrayidx106.1, align 8, !tbaa !110
  %arrayidx109.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  store i64 %127, i64* %arrayidx109.1, align 8, !tbaa !110
  %arrayidx113.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  %128 = load i64, i64* %arrayidx113.1, align 8, !tbaa !110
  %arrayidx116.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  store i64 %128, i64* %arrayidx116.1, align 8, !tbaa !110
  %indvars.iv.next281.2 = add nsw i64 %indvars.iv280, -3
  %arrayidx99.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  %129 = load i64, i64* %arrayidx99.2, align 8, !tbaa !110
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  store i64 %129, i64* %arrayidx102.2, align 8, !tbaa !110
  %arrayidx106.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  %130 = load i64, i64* %arrayidx106.2, align 8, !tbaa !110
  %arrayidx109.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  store i64 %130, i64* %arrayidx109.2, align 8, !tbaa !110
  %arrayidx113.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  %131 = load i64, i64* %arrayidx113.2, align 8, !tbaa !110
  %arrayidx116.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  store i64 %131, i64* %arrayidx116.2, align 8, !tbaa !110
  %indvars.iv.next281.3 = add nsw i64 %indvars.iv280, -4
  %arrayidx99.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.3
  %132 = load i64, i64* %arrayidx99.3, align 8, !tbaa !110
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  store i64 %132, i64* %arrayidx102.3, align 8, !tbaa !110
  %arrayidx106.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.3
  %133 = load i64, i64* %arrayidx106.3, align 8, !tbaa !110
  %arrayidx109.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  store i64 %133, i64* %arrayidx109.3, align 8, !tbaa !110
  %arrayidx113.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.3
  %134 = load i64, i64* %arrayidx113.3, align 8, !tbaa !110
  %arrayidx116.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  store i64 %134, i64* %arrayidx116.3, align 8, !tbaa !110
  %cmp93.3 = icmp sgt i64 %indvars.iv.next281.3, %114
  br i1 %cmp93.3, label %for.body95, label %for.cond.cleanup94, !llvm.loop !246

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %135 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %154, %while.body ]
  %136 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %136, %135
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %137 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %mul147 = mul i64 %137, %135
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !238
  %138 = load <4 x i64>, <4 x i64>* %85, align 8, !tbaa !110
  store <4 x i64> %138, <4 x i64>* %86, align 8, !tbaa !110
  %139 = load <4 x i64>, <4 x i64>* %87, align 8, !tbaa !110
  store <4 x i64> %139, <4 x i64>* %88, align 8, !tbaa !110
  %140 = load <4 x i64>, <4 x i64>* %89, align 8, !tbaa !110
  store <4 x i64> %140, <4 x i64>* %90, align 8, !tbaa !110
  %141 = load <4 x i64>, <4 x i64>* %91, align 8, !tbaa !110
  store <4 x i64> %141, <4 x i64>* %92, align 8, !tbaa !110
  %142 = load <4 x i64>, <4 x i64>* %93, align 8, !tbaa !110
  store <4 x i64> %142, <4 x i64>* %94, align 8, !tbaa !110
  %143 = load <4 x i64>, <4 x i64>* %95, align 8, !tbaa !110
  store <4 x i64> %143, <4 x i64>* %96, align 8, !tbaa !110
  %144 = load <4 x i64>, <4 x i64>* %97, align 8, !tbaa !110
  store <4 x i64> %144, <4 x i64>* %98, align 8, !tbaa !110
  %145 = load <4 x i64>, <4 x i64>* %99, align 8, !tbaa !110
  store <4 x i64> %145, <4 x i64>* %100, align 8, !tbaa !110
  %146 = load <4 x i64>, <4 x i64>* %101, align 8, !tbaa !110
  store <4 x i64> %146, <4 x i64>* %102, align 8, !tbaa !110
  %147 = load <2 x i64>, <2 x i64>* %103, align 8, !tbaa !110
  store <2 x i64> %147, <2 x i64>* %104, align 8, !tbaa !110
  %148 = load <2 x i64>, <2 x i64>* %105, align 8, !tbaa !110
  store <2 x i64> %148, <2 x i64>* %106, align 8, !tbaa !110
  %149 = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !110
  store <2 x i64> %149, <2 x i64>* %108, align 8, !tbaa !110
  %150 = load i64, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 %150, i64* %arrayidx.14, align 8, !tbaa !110
  %151 = load i64, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 %151, i64* %arrayidx12.14, align 8, !tbaa !110
  %152 = load i64, i64* %arrayidx14.15, align 8, !tbaa !110
  store i64 %152, i64* %arrayidx14.14, align 8, !tbaa !110
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !110
  %153 = extractelement <4 x i64> %139, i32 0
  %cmp139 = icmp eq i64 %mul147, %153
  %154 = extractelement <4 x i64> %140, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !247

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %155 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %155, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !248
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #16
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !249

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !181
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !181
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !178
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !182
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !182
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !250
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !250
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !252
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !253
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !254
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !230
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !255
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #16
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !231
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !232
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !256
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !257
  %4 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %6 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp130 = icmp ugt i64 %6, 1
  br i1 %cmp130, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge, %for.body.preheader, %if.end
  %7 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp25115 = icmp sgt i32 %7, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge:                      ; preds = %for.body.preheader, %for.body.for.body_crit_edge
  %inc131 = phi i64 [ %inc, %for.body.for.body_crit_edge ], [ 1, %for.body.preheader ]
  %.pre = load i8*, i8** %key, align 8, !tbaa !257
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc131
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre, i64 %inc131
  store i8 %8, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc131, 1
  %9 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp = icmp ult i64 %inc, %9
  br i1 %cmp, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %10 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp38113.not = icmp eq i32 %10, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 %indvars.iv121
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %14 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %13, i8* nonnull align 4 dereferenceable(16) %14, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %15 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %16 = sext i32 %15 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %16
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !259

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %17 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %18 = zext i32 %17 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %18
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !260

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !261
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !262
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %19 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !10
  %21 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %21, i64 %indvars.iv119
  %22 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %22, i8* nonnull align 8 dereferenceable(56) %20, i64 56, i1 false), !tbaa.struct !263
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %24 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %25 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %24, %25
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 %idx.ext
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !176
  %cmp57111 = icmp sgt i32 %24, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 0, i32 6
  %28 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !176
  %30 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %30, i8* nonnull align 4 dereferenceable(16) %29, i64 16, i1 false), !tbaa.struct !177
  %31 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp57128 = icmp sgt i32 %31, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !176
  %32 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %32, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !176
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %34 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %35 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %34, i8* nonnull align 4 dereferenceable(16) %35, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %36 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %37 = sext i32 %36 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %37
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %38 = xor i1 %tobool.not, true
  ret i1 %38
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = add i64 %key_size, -1
  %xtraiter = and i64 %key_size, 7
  %1 = icmp ult i64 %0, 7
  br i1 %1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %key_size, -8
  %add.0 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
  %add1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add1.7, %for.body ]
  %i.010.unr = phi i64 [ 0, %for.body.preheader ], [ %inc.7, %for.body ]
  %h.09.unr = phi i32 [ 5381, %for.body.preheader ], [ %add1.7, %for.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil
  %i.010.epil = phi i64 [ %inc.epil, %for.body.epil ], [ %i.010.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %h.09.epil = phi i32 [ %add1.epil, %for.body.epil ], [ %h.09.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.epil = mul i32 %h.09.epil, 33
  %arrayidx.epil = getelementptr inbounds i8, i8* %key, i64 %i.010.epil
  %2 = load i8, i8* %arrayidx.epil, align 1, !tbaa !14
  %conv.epil = zext i8 %2 to i32
  %add1.epil = add i32 %add.epil, %conv.epil
  %inc.epil = add nuw i64 %i.010.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !266

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add1.epil, %for.body.epil ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.preheader.new
  %i.010 = phi i64 [ 0, %for.body.preheader.new ], [ %inc.7, %for.body.for.body_crit_edge ]
  %add.phi = phi i32 [ %add.0, %for.body.preheader.new ], [ %add.12, %for.body.for.body_crit_edge ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.7, %for.body.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i8, i8* %key, i64 %i.010
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %3 to i32
  %add1 = add i32 %add.phi, %conv
  %inc = or i64 %i.010, 1
  %add.1 = mul i32 %add1, 33
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 %inc
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %conv.1 = zext i8 %4 to i32
  %add1.1 = add i32 %add.1, %conv.1
  %inc.1 = or i64 %i.010, 2
  %add.2 = mul i32 %add1.1, 33
  %arrayidx.2 = getelementptr inbounds i8, i8* %key, i64 %inc.1
  %5 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %conv.2 = zext i8 %5 to i32
  %add1.2 = add i32 %add.2, %conv.2
  %inc.2 = or i64 %i.010, 3
  %add.3 = mul i32 %add1.2, 33
  %arrayidx.3 = getelementptr inbounds i8, i8* %key, i64 %inc.2
  %6 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %conv.3 = zext i8 %6 to i32
  %add1.3 = add i32 %add.3, %conv.3
  %inc.3 = or i64 %i.010, 4
  %add.4 = mul i32 %add1.3, 33
  %arrayidx.4 = getelementptr inbounds i8, i8* %key, i64 %inc.3
  %7 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %conv.4 = zext i8 %7 to i32
  %add1.4 = add i32 %add.4, %conv.4
  %inc.4 = or i64 %i.010, 5
  %add.5 = mul i32 %add1.4, 33
  %arrayidx.5 = getelementptr inbounds i8, i8* %key, i64 %inc.4
  %8 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %conv.5 = zext i8 %8 to i32
  %add1.5 = add i32 %add.5, %conv.5
  %inc.5 = or i64 %i.010, 6
  %add.6 = mul i32 %add1.5, 33
  %arrayidx.6 = getelementptr inbounds i8, i8* %key, i64 %inc.5
  %9 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %conv.6 = zext i8 %9 to i32
  %add1.6 = add i32 %add.6, %conv.6
  %inc.6 = or i64 %i.010, 7
  %add.7 = mul i32 %add1.6, 33
  %arrayidx.7 = getelementptr inbounds i8, i8* %key, i64 %inc.6
  %10 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %conv.7 = zext i8 %10 to i32
  %add1.7 = add i32 %add.7, %conv.7
  %inc.7 = add nuw i64 %i.010, 8
  %niter.nsub.7 = add i64 %niter, -8
  %niter.ncmp.7 = icmp eq i64 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %add.12 = mul i32 %add1.7, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %114, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %115, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !253
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !227
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !227
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !227
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !227
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !251
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #17
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #16
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check43 = icmp ult i32 %21, 17
  br i1 %min.iters.check43, label %for.body.i.i.preheader, label %vector.ph44

vector.ph44:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf45 = and i64 %wide.trip.count.i.i, 15
  %23 = icmp eq i64 %n.mod.vf45, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf45
  %n.vec46 = sub nsw i64 %wide.trip.count.i.i, %24
  br label %vector.body42

vector.body42:                                    ; preds = %vector.body42, %vector.ph44
  %index47 = phi i64 [ 0, %vector.ph44 ], [ %index.next48, %vector.body42 ]
  %vec.ind51 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph44 ], [ %vec.ind.next56, %vector.body42 ]
  %vec.phi57 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi73, %vector.body42 ]
  %vec.phi58 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi74, %vector.body42 ]
  %vec.phi59 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi75, %vector.body42 ]
  %vec.phi60 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi76, %vector.body42 ]
  %step.add52 = add <4 x i64> %vec.ind51, <i64 4, i64 4, i64 4, i64 4>
  %step.add53 = add <4 x i64> %vec.ind51, <i64 8, i64 8, i64 8, i64 8>
  %step.add54 = add <4 x i64> %vec.ind51, <i64 12, i64 12, i64 12, i64 12>
  %25 = or i64 %index47, 4
  %26 = or i64 %index47, 8
  %27 = or i64 %index47, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index47, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 2
  %32 = bitcast i32* %28 to <16 x i32>*
  %33 = bitcast i32* %29 to <16 x i32>*
  %34 = bitcast i32* %30 to <16 x i32>*
  %35 = bitcast i32* %31 to <16 x i32>*
  %wide.vec61 = load <16 x i32>, <16 x i32>* %32, align 4, !tbaa !182
  %wide.vec62 = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !182
  %wide.vec63 = load <16 x i32>, <16 x i32>* %34, align 4, !tbaa !182
  %wide.vec64 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !182
  %strided.vec65 = shufflevector <16 x i32> %wide.vec61, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec66 = shufflevector <16 x i32> %wide.vec62, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec67 = shufflevector <16 x i32> %wide.vec63, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec68 = shufflevector <16 x i32> %wide.vec64, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = icmp sgt <4 x i32> %strided.vec65, zeroinitializer
  %37 = icmp sgt <4 x i32> %strided.vec66, zeroinitializer
  %38 = icmp sgt <4 x i32> %strided.vec67, zeroinitializer
  %39 = icmp sgt <4 x i32> %strided.vec68, zeroinitializer
  %40 = zext <4 x i32> %strided.vec65 to <4 x i64>
  %41 = zext <4 x i32> %strided.vec66 to <4 x i64>
  %42 = zext <4 x i32> %strided.vec67 to <4 x i64>
  %43 = zext <4 x i32> %strided.vec68 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind51, i32 1
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add52, i32 1
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add53, i32 1
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add54, i32 1
  %wide.masked.gather69 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %44, i32 4, <4 x i1> %36, <4 x i32> undef), !tbaa !178
  %wide.masked.gather70 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %45, i32 4, <4 x i1> %37, <4 x i32> undef), !tbaa !178
  %wide.masked.gather71 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %46, i32 4, <4 x i1> %38, <4 x i32> undef), !tbaa !178
  %wide.masked.gather72 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %47, i32 4, <4 x i1> %39, <4 x i32> undef), !tbaa !178
  %48 = add nsw <4 x i32> %wide.masked.gather69, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = add nsw <4 x i32> %wide.masked.gather70, <i32 -1, i32 -1, i32 -1, i32 -1>
  %50 = add nsw <4 x i32> %wide.masked.gather71, <i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = add nsw <4 x i32> %wide.masked.gather72, <i32 -1, i32 -1, i32 -1, i32 -1>
  %52 = sext <4 x i32> %48 to <4 x i64>
  %53 = sext <4 x i32> %49 to <4 x i64>
  %54 = sext <4 x i32> %50 to <4 x i64>
  %55 = sext <4 x i32> %51 to <4 x i64>
  %56 = mul nsw <4 x i64> %52, %40
  %57 = mul nsw <4 x i64> %53, %41
  %58 = mul nsw <4 x i64> %54, %42
  %59 = mul nsw <4 x i64> %55, %43
  %60 = select <4 x i1> %36, <4 x i64> %56, <4 x i64> zeroinitializer
  %predphi73 = add <4 x i64> %vec.phi57, %60
  %61 = select <4 x i1> %37, <4 x i64> %57, <4 x i64> zeroinitializer
  %predphi74 = add <4 x i64> %vec.phi58, %61
  %62 = select <4 x i1> %38, <4 x i64> %58, <4 x i64> zeroinitializer
  %predphi75 = add <4 x i64> %vec.phi59, %62
  %63 = select <4 x i1> %39, <4 x i64> %59, <4 x i64> zeroinitializer
  %predphi76 = add <4 x i64> %vec.phi60, %63
  %index.next48 = add i64 %index47, 16
  %vec.ind.next56 = add <4 x i64> %vec.ind51, <i64 16, i64 16, i64 16, i64 16>
  %64 = icmp eq i64 %index.next48, %n.vec46
  br i1 %64, label %middle.block40, label %vector.body42, !llvm.loop !270

middle.block40:                                   ; preds = %vector.body42
  %bin.rdx77 = add <4 x i64> %predphi74, %predphi73
  %bin.rdx78 = add <4 x i64> %predphi75, %bin.rdx77
  %bin.rdx79 = add <4 x i64> %predphi76, %bin.rdx78
  %65 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx79)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block40, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec46, %middle.block40 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %65, %middle.block40 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %66 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %66, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %66 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %67 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %67, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %21, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader81, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %68 = icmp eq i64 %n.mod.vf, 0
  %69 = select i1 %68, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %69
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi23 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi35, %vector.body ]
  %vec.phi24 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi36, %vector.body ]
  %vec.phi25 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi37, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add20 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add21 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %70 = or i64 %index, 4
  %71 = or i64 %index, 8
  %72 = or i64 %index, 12
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %70, i32 2
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %71, i32 2
  %76 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %72, i32 2
  %77 = bitcast i32* %73 to <16 x i32>*
  %78 = bitcast i32* %74 to <16 x i32>*
  %79 = bitcast i32* %75 to <16 x i32>*
  %80 = bitcast i32* %76 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %77, align 4, !tbaa !182
  %wide.vec26 = load <16 x i32>, <16 x i32>* %78, align 4, !tbaa !182
  %wide.vec27 = load <16 x i32>, <16 x i32>* %79, align 4, !tbaa !182
  %wide.vec28 = load <16 x i32>, <16 x i32>* %80, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec29 = shufflevector <16 x i32> %wide.vec26, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec30 = shufflevector <16 x i32> %wide.vec27, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec31 = shufflevector <16 x i32> %wide.vec28, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %81 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %82 = icmp slt <4 x i32> %strided.vec29, zeroinitializer
  %83 = icmp slt <4 x i32> %strided.vec30, zeroinitializer
  %84 = icmp slt <4 x i32> %strided.vec31, zeroinitializer
  %85 = sext <4 x i32> %strided.vec to <4 x i64>
  %86 = sext <4 x i32> %strided.vec29 to <4 x i64>
  %87 = sext <4 x i32> %strided.vec30 to <4 x i64>
  %88 = sext <4 x i32> %strided.vec31 to <4 x i64>
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind, i32 1
  %90 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add, i32 1
  %91 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add20, i32 1
  %92 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add21, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %89, i32 4, <4 x i1> %81, <4 x i32> undef), !tbaa !178
  %wide.masked.gather32 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %90, i32 4, <4 x i1> %82, <4 x i32> undef), !tbaa !178
  %wide.masked.gather33 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %91, i32 4, <4 x i1> %83, <4 x i32> undef), !tbaa !178
  %wide.masked.gather34 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %92, i32 4, <4 x i1> %84, <4 x i32> undef), !tbaa !178
  %93 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = add nsw <4 x i32> %wide.masked.gather32, <i32 -1, i32 -1, i32 -1, i32 -1>
  %95 = add nsw <4 x i32> %wide.masked.gather33, <i32 -1, i32 -1, i32 -1, i32 -1>
  %96 = add nsw <4 x i32> %wide.masked.gather34, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = sext <4 x i32> %93 to <4 x i64>
  %98 = sext <4 x i32> %94 to <4 x i64>
  %99 = sext <4 x i32> %95 to <4 x i64>
  %100 = sext <4 x i32> %96 to <4 x i64>
  %101 = mul nsw <4 x i64> %97, %85
  %102 = mul nsw <4 x i64> %98, %86
  %103 = mul nsw <4 x i64> %99, %87
  %104 = mul nsw <4 x i64> %100, %88
  %105 = select <4 x i1> %81, <4 x i64> %101, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %105
  %106 = select <4 x i1> %82, <4 x i64> %102, <4 x i64> zeroinitializer
  %predphi35 = add <4 x i64> %vec.phi23, %106
  %107 = select <4 x i1> %83, <4 x i64> %103, <4 x i64> zeroinitializer
  %predphi36 = add <4 x i64> %vec.phi24, %107
  %108 = select <4 x i1> %84, <4 x i64> %104, <4 x i64> zeroinitializer
  %predphi37 = add <4 x i64> %vec.phi25, %108
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %109 = icmp eq i64 %index.next, %n.vec
  br i1 %109, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi35, %predphi
  %bin.rdx38 = add <4 x i64> %predphi36, %bin.rdx
  %bin.rdx39 = add <4 x i64> %predphi37, %bin.rdx38
  %110 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx39)
  br label %for.body.i13.i.preheader81

for.body.i13.i.preheader81:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %110, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader81, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader81 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader81 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %111 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %111, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %111 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %112 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %112, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i.neg = xor i64 %index.1.i.i, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %113 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %113 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %114 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %115 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %115, %114
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %116 = and i1 %cmp1, %cmp
  br i1 %116, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #17
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !253
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #17
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !256
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #17
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !230
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !232
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #17
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !253
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !257
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #17
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !256
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #17
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !230
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !251
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  %26 = add nsw i64 %wide.trip.count230, -1
  %xtraiter = and i64 %wide.trip.count230, 3
  %27 = icmp ult i64 %26, 3
  br i1 %27, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62.lr.ph.new

for.body62.lr.ph.new:                             ; preds = %for.body62.lr.ph
  %unroll_iter = and i64 %wide.trip.count230, 4294967292
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph.new
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph.new ], [ %indvars.iv.next229.3, %for.body62 ]
  %niter = phi i64 [ %unroll_iter, %for.body62.lr.ph.new ], [ %niter.nsub.3, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %28 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !10
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 %indvars.iv228
  %31 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %29, i8* nonnull align 8 dereferenceable(56) %31, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229 = or i64 %indvars.iv228, 1
  %arrayidx65.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229
  %32 = bitcast %struct.halide_buffer_t** %arrayidx65.1 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !10
  %34 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %34, i64 %indvars.iv.next229
  %35 = bitcast %struct.halide_buffer_t* %arrayidx68.1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %33, i8* nonnull align 8 dereferenceable(56) %35, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.1 = or i64 %indvars.iv228, 2
  %arrayidx65.2 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.1
  %36 = bitcast %struct.halide_buffer_t** %arrayidx65.2 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !10
  %38 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.2 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %38, i64 %indvars.iv.next229.1
  %39 = bitcast %struct.halide_buffer_t* %arrayidx68.2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %37, i8* nonnull align 8 dereferenceable(56) %39, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.2 = or i64 %indvars.iv228, 3
  %arrayidx65.3 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.2
  %40 = bitcast %struct.halide_buffer_t** %arrayidx65.3 to i8**
  %41 = load i8*, i8** %40, align 8, !tbaa !10
  %42 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %42, i64 %indvars.iv.next229.2
  %43 = bitcast %struct.halide_buffer_t* %arrayidx68.3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %41, i8* nonnull align 8 dereferenceable(56) %43, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.3 = add nuw nsw i64 %indvars.iv228, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %44 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 5
  %45 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %45, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 6
  %46 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %45 to i64
  %min.iters.check53 = icmp ult i32 %45, 17
  br i1 %min.iters.check53, label %for.body.i.i.preheader, label %vector.ph54

vector.ph54:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf55 = and i64 %wide.trip.count.i.i, 15
  %47 = icmp eq i64 %n.mod.vf55, 0
  %48 = select i1 %47, i64 16, i64 %n.mod.vf55
  %n.vec56 = sub nsw i64 %wide.trip.count.i.i, %48
  br label %vector.body52

vector.body52:                                    ; preds = %vector.body52, %vector.ph54
  %index57 = phi i64 [ 0, %vector.ph54 ], [ %index.next58, %vector.body52 ]
  %vec.ind61 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph54 ], [ %vec.ind.next66, %vector.body52 ]
  %vec.phi67 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi83, %vector.body52 ]
  %vec.phi68 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi84, %vector.body52 ]
  %vec.phi69 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi85, %vector.body52 ]
  %vec.phi70 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi86, %vector.body52 ]
  %step.add62 = add <4 x i64> %vec.ind61, <i64 4, i64 4, i64 4, i64 4>
  %step.add63 = add <4 x i64> %vec.ind61, <i64 8, i64 8, i64 8, i64 8>
  %step.add64 = add <4 x i64> %vec.ind61, <i64 12, i64 12, i64 12, i64 12>
  %49 = or i64 %index57, 4
  %50 = or i64 %index57, 8
  %51 = or i64 %index57, 12
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index57, i32 2
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %49, i32 2
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %50, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %51, i32 2
  %56 = bitcast i32* %52 to <16 x i32>*
  %57 = bitcast i32* %53 to <16 x i32>*
  %58 = bitcast i32* %54 to <16 x i32>*
  %59 = bitcast i32* %55 to <16 x i32>*
  %wide.vec71 = load <16 x i32>, <16 x i32>* %56, align 4, !tbaa !182
  %wide.vec72 = load <16 x i32>, <16 x i32>* %57, align 4, !tbaa !182
  %wide.vec73 = load <16 x i32>, <16 x i32>* %58, align 4, !tbaa !182
  %wide.vec74 = load <16 x i32>, <16 x i32>* %59, align 4, !tbaa !182
  %strided.vec75 = shufflevector <16 x i32> %wide.vec71, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec76 = shufflevector <16 x i32> %wide.vec72, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec77 = shufflevector <16 x i32> %wide.vec73, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec78 = shufflevector <16 x i32> %wide.vec74, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = icmp sgt <4 x i32> %strided.vec75, zeroinitializer
  %61 = icmp sgt <4 x i32> %strided.vec76, zeroinitializer
  %62 = icmp sgt <4 x i32> %strided.vec77, zeroinitializer
  %63 = icmp sgt <4 x i32> %strided.vec78, zeroinitializer
  %64 = zext <4 x i32> %strided.vec75 to <4 x i64>
  %65 = zext <4 x i32> %strided.vec76 to <4 x i64>
  %66 = zext <4 x i32> %strided.vec77 to <4 x i64>
  %67 = zext <4 x i32> %strided.vec78 to <4 x i64>
  %68 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind61, i32 1
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add62, i32 1
  %70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add63, i32 1
  %71 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add64, i32 1
  %wide.masked.gather79 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %68, i32 4, <4 x i1> %60, <4 x i32> undef), !tbaa !178
  %wide.masked.gather80 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %69, i32 4, <4 x i1> %61, <4 x i32> undef), !tbaa !178
  %wide.masked.gather81 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %70, i32 4, <4 x i1> %62, <4 x i32> undef), !tbaa !178
  %wide.masked.gather82 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %71, i32 4, <4 x i1> %63, <4 x i32> undef), !tbaa !178
  %72 = add nsw <4 x i32> %wide.masked.gather79, <i32 -1, i32 -1, i32 -1, i32 -1>
  %73 = add nsw <4 x i32> %wide.masked.gather80, <i32 -1, i32 -1, i32 -1, i32 -1>
  %74 = add nsw <4 x i32> %wide.masked.gather81, <i32 -1, i32 -1, i32 -1, i32 -1>
  %75 = add nsw <4 x i32> %wide.masked.gather82, <i32 -1, i32 -1, i32 -1, i32 -1>
  %76 = sext <4 x i32> %72 to <4 x i64>
  %77 = sext <4 x i32> %73 to <4 x i64>
  %78 = sext <4 x i32> %74 to <4 x i64>
  %79 = sext <4 x i32> %75 to <4 x i64>
  %80 = mul nsw <4 x i64> %76, %64
  %81 = mul nsw <4 x i64> %77, %65
  %82 = mul nsw <4 x i64> %78, %66
  %83 = mul nsw <4 x i64> %79, %67
  %84 = select <4 x i1> %60, <4 x i64> %80, <4 x i64> zeroinitializer
  %predphi83 = add <4 x i64> %vec.phi67, %84
  %85 = select <4 x i1> %61, <4 x i64> %81, <4 x i64> zeroinitializer
  %predphi84 = add <4 x i64> %vec.phi68, %85
  %86 = select <4 x i1> %62, <4 x i64> %82, <4 x i64> zeroinitializer
  %predphi85 = add <4 x i64> %vec.phi69, %86
  %87 = select <4 x i1> %63, <4 x i64> %83, <4 x i64> zeroinitializer
  %predphi86 = add <4 x i64> %vec.phi70, %87
  %index.next58 = add i64 %index57, 16
  %vec.ind.next66 = add <4 x i64> %vec.ind61, <i64 16, i64 16, i64 16, i64 16>
  %88 = icmp eq i64 %index.next58, %n.vec56
  br i1 %88, label %middle.block50, label %vector.body52, !llvm.loop !279

middle.block50:                                   ; preds = %vector.body52
  %bin.rdx87 = add <4 x i64> %predphi84, %predphi83
  %bin.rdx88 = add <4 x i64> %predphi85, %bin.rdx87
  %bin.rdx89 = add <4 x i64> %predphi86, %bin.rdx88
  %89 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx89)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block50, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec56, %middle.block50 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %89, %middle.block50 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 2
  %90 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %90, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %90 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 1
  %91 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %91, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %45, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader91, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %92 = icmp eq i64 %n.mod.vf, 0
  %93 = select i1 %92, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %93
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi33 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi45, %vector.body ]
  %vec.phi34 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi46, %vector.body ]
  %vec.phi35 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi47, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add30 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add31 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %94 = or i64 %index, 4
  %95 = or i64 %index, 8
  %96 = or i64 %index, 12
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index, i32 2
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %94, i32 2
  %99 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %95, i32 2
  %100 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %96, i32 2
  %101 = bitcast i32* %97 to <16 x i32>*
  %102 = bitcast i32* %98 to <16 x i32>*
  %103 = bitcast i32* %99 to <16 x i32>*
  %104 = bitcast i32* %100 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %101, align 4, !tbaa !182
  %wide.vec36 = load <16 x i32>, <16 x i32>* %102, align 4, !tbaa !182
  %wide.vec37 = load <16 x i32>, <16 x i32>* %103, align 4, !tbaa !182
  %wide.vec38 = load <16 x i32>, <16 x i32>* %104, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec39 = shufflevector <16 x i32> %wide.vec36, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec40 = shufflevector <16 x i32> %wide.vec37, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec41 = shufflevector <16 x i32> %wide.vec38, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %105 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %106 = icmp slt <4 x i32> %strided.vec39, zeroinitializer
  %107 = icmp slt <4 x i32> %strided.vec40, zeroinitializer
  %108 = icmp slt <4 x i32> %strided.vec41, zeroinitializer
  %109 = sext <4 x i32> %strided.vec to <4 x i64>
  %110 = sext <4 x i32> %strided.vec39 to <4 x i64>
  %111 = sext <4 x i32> %strided.vec40 to <4 x i64>
  %112 = sext <4 x i32> %strided.vec41 to <4 x i64>
  %113 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind, i32 1
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add, i32 1
  %115 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add30, i32 1
  %116 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add31, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %113, i32 4, <4 x i1> %105, <4 x i32> undef), !tbaa !178
  %wide.masked.gather42 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %114, i32 4, <4 x i1> %106, <4 x i32> undef), !tbaa !178
  %wide.masked.gather43 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %115, i32 4, <4 x i1> %107, <4 x i32> undef), !tbaa !178
  %wide.masked.gather44 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %116, i32 4, <4 x i1> %108, <4 x i32> undef), !tbaa !178
  %117 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %118 = add nsw <4 x i32> %wide.masked.gather42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %119 = add nsw <4 x i32> %wide.masked.gather43, <i32 -1, i32 -1, i32 -1, i32 -1>
  %120 = add nsw <4 x i32> %wide.masked.gather44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = sext <4 x i32> %117 to <4 x i64>
  %122 = sext <4 x i32> %118 to <4 x i64>
  %123 = sext <4 x i32> %119 to <4 x i64>
  %124 = sext <4 x i32> %120 to <4 x i64>
  %125 = mul nsw <4 x i64> %121, %109
  %126 = mul nsw <4 x i64> %122, %110
  %127 = mul nsw <4 x i64> %123, %111
  %128 = mul nsw <4 x i64> %124, %112
  %129 = select <4 x i1> %105, <4 x i64> %125, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %129
  %130 = select <4 x i1> %106, <4 x i64> %126, <4 x i64> zeroinitializer
  %predphi45 = add <4 x i64> %vec.phi33, %130
  %131 = select <4 x i1> %107, <4 x i64> %127, <4 x i64> zeroinitializer
  %predphi46 = add <4 x i64> %vec.phi34, %131
  %132 = select <4 x i1> %108, <4 x i64> %128, <4 x i64> zeroinitializer
  %predphi47 = add <4 x i64> %vec.phi35, %132
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %133 = icmp eq i64 %index.next, %n.vec
  br i1 %133, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi45, %predphi
  %bin.rdx48 = add <4 x i64> %predphi46, %bin.rdx
  %bin.rdx49 = add <4 x i64> %predphi47, %bin.rdx48
  %134 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx49)
  br label %for.body.i13.i.preheader91

for.body.i13.i.preheader91:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %134, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader91, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader91 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader91 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 2
  %135 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %135, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %135 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 1
  %136 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %136, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body78
  %add8.i27.i = phi i64 [ 1, %for.body78 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body78 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 4, i32 1
  %137 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %137 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add84 = add i64 %mul.i, 64
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !172
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %138 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %138
  %139 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %139, i64 0, i32 2
  %140 = load i8*, i8** %host95, align 8, !tbaa !172
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %140) #17
  %141 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %141) #16
  %142 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %142, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !172
  %143 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %143, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 64
  store i8* %add.ptr, i8** %host, align 8, !tbaa !172
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #17
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223.loopexit.unr-lcssa:        ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228.unr = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229.3, %for.body62 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %cleanup119.loopexit223, label %for.body62.epil

for.body62.epil:                                  ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil
  %indvars.iv228.epil = phi i64 [ %indvars.iv.next229.epil, %for.body62.epil ], [ %indvars.iv228.unr, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body62.epil ], [ %xtraiter, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %arrayidx65.epil = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228.epil
  %144 = bitcast %struct.halide_buffer_t** %arrayidx65.epil to i8**
  %145 = load i8*, i8** %144, align 8, !tbaa !10
  %146 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.epil = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %146, i64 %indvars.iv228.epil
  %147 = bitcast %struct.halide_buffer_t* %arrayidx68.epil to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %145, i8* nonnull align 8 dereferenceable(56) %147, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.epil = add nuw nsw i64 %indvars.iv228.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %cleanup119.loopexit223, label %for.body62.epil, !llvm.loop !288

cleanup119.loopexit223:                           ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %148 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %add = add i32 %148, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !254
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #17
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !253
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #17
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !256
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #17
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !230
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !289

for.body48.us:                                    ; preds = %for.body48.us.preheader, %for.body48.us
  %indvars.iv244 = phi i64 [ %indvars.iv.next245, %for.body48.us ], [ 0, %for.body48.us.preheader ]
  %arrayidx50.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv244
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !172
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #17
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %exitcond247.not = icmp eq i64 %indvars.iv.next245, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us, !llvm.loop !290

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #17
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !172
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !172
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !291

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !253
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !257
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #17
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !256
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #17
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !230
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !289

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #16
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check39 = icmp ult i32 %27, 17
  br i1 %min.iters.check39, label %for.body.i.i.preheader, label %vector.ph40

vector.ph40:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf41 = and i64 %wide.trip.count.i.i, 15
  %29 = icmp eq i64 %n.mod.vf41, 0
  %30 = select i1 %29, i64 16, i64 %n.mod.vf41
  %n.vec42 = sub nsw i64 %wide.trip.count.i.i, %30
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph40
  %index43 = phi i64 [ 0, %vector.ph40 ], [ %index.next44, %vector.body38 ]
  %vec.ind47 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph40 ], [ %vec.ind.next52, %vector.body38 ]
  %vec.phi53 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi69, %vector.body38 ]
  %vec.phi54 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi70, %vector.body38 ]
  %vec.phi55 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi71, %vector.body38 ]
  %vec.phi56 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi72, %vector.body38 ]
  %step.add48 = add <4 x i64> %vec.ind47, <i64 4, i64 4, i64 4, i64 4>
  %step.add49 = add <4 x i64> %vec.ind47, <i64 8, i64 8, i64 8, i64 8>
  %step.add50 = add <4 x i64> %vec.ind47, <i64 12, i64 12, i64 12, i64 12>
  %31 = or i64 %index43, 4
  %32 = or i64 %index43, 8
  %33 = or i64 %index43, 12
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index43, i32 2
  %35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %31, i32 2
  %36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %32, i32 2
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %33, i32 2
  %38 = bitcast i32* %34 to <16 x i32>*
  %39 = bitcast i32* %35 to <16 x i32>*
  %40 = bitcast i32* %36 to <16 x i32>*
  %41 = bitcast i32* %37 to <16 x i32>*
  %wide.vec57 = load <16 x i32>, <16 x i32>* %38, align 4, !tbaa !182
  %wide.vec58 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !182
  %wide.vec59 = load <16 x i32>, <16 x i32>* %40, align 4, !tbaa !182
  %wide.vec60 = load <16 x i32>, <16 x i32>* %41, align 4, !tbaa !182
  %strided.vec61 = shufflevector <16 x i32> %wide.vec57, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec62 = shufflevector <16 x i32> %wide.vec58, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec63 = shufflevector <16 x i32> %wide.vec59, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec64 = shufflevector <16 x i32> %wide.vec60, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %42 = icmp sgt <4 x i32> %strided.vec61, zeroinitializer
  %43 = icmp sgt <4 x i32> %strided.vec62, zeroinitializer
  %44 = icmp sgt <4 x i32> %strided.vec63, zeroinitializer
  %45 = icmp sgt <4 x i32> %strided.vec64, zeroinitializer
  %46 = zext <4 x i32> %strided.vec61 to <4 x i64>
  %47 = zext <4 x i32> %strided.vec62 to <4 x i64>
  %48 = zext <4 x i32> %strided.vec63 to <4 x i64>
  %49 = zext <4 x i32> %strided.vec64 to <4 x i64>
  %50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind47, i32 1
  %51 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add48, i32 1
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add49, i32 1
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add50, i32 1
  %wide.masked.gather65 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %50, i32 4, <4 x i1> %42, <4 x i32> undef), !tbaa !178
  %wide.masked.gather66 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %51, i32 4, <4 x i1> %43, <4 x i32> undef), !tbaa !178
  %wide.masked.gather67 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %52, i32 4, <4 x i1> %44, <4 x i32> undef), !tbaa !178
  %wide.masked.gather68 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %53, i32 4, <4 x i1> %45, <4 x i32> undef), !tbaa !178
  %54 = add nsw <4 x i32> %wide.masked.gather65, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = add nsw <4 x i32> %wide.masked.gather66, <i32 -1, i32 -1, i32 -1, i32 -1>
  %56 = add nsw <4 x i32> %wide.masked.gather67, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = add nsw <4 x i32> %wide.masked.gather68, <i32 -1, i32 -1, i32 -1, i32 -1>
  %58 = sext <4 x i32> %54 to <4 x i64>
  %59 = sext <4 x i32> %55 to <4 x i64>
  %60 = sext <4 x i32> %56 to <4 x i64>
  %61 = sext <4 x i32> %57 to <4 x i64>
  %62 = mul nsw <4 x i64> %58, %46
  %63 = mul nsw <4 x i64> %59, %47
  %64 = mul nsw <4 x i64> %60, %48
  %65 = mul nsw <4 x i64> %61, %49
  %66 = select <4 x i1> %42, <4 x i64> %62, <4 x i64> zeroinitializer
  %predphi69 = add <4 x i64> %vec.phi53, %66
  %67 = select <4 x i1> %43, <4 x i64> %63, <4 x i64> zeroinitializer
  %predphi70 = add <4 x i64> %vec.phi54, %67
  %68 = select <4 x i1> %44, <4 x i64> %64, <4 x i64> zeroinitializer
  %predphi71 = add <4 x i64> %vec.phi55, %68
  %69 = select <4 x i1> %45, <4 x i64> %65, <4 x i64> zeroinitializer
  %predphi72 = add <4 x i64> %vec.phi56, %69
  %index.next44 = add i64 %index43, 16
  %vec.ind.next52 = add <4 x i64> %vec.ind47, <i64 16, i64 16, i64 16, i64 16>
  %70 = icmp eq i64 %index.next44, %n.vec42
  br i1 %70, label %middle.block36, label %vector.body38, !llvm.loop !292

middle.block36:                                   ; preds = %vector.body38
  %bin.rdx73 = add <4 x i64> %predphi70, %predphi69
  %bin.rdx74 = add <4 x i64> %predphi71, %bin.rdx73
  %bin.rdx75 = add <4 x i64> %predphi72, %bin.rdx74
  %71 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx75)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block36, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec42, %middle.block36 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %71, %middle.block36 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %72 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %72, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %72 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %73 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %73, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !293

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %27, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader77, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %74 = icmp eq i64 %n.mod.vf, 0
  %75 = select i1 %74, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %75
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi19 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi31, %vector.body ]
  %vec.phi20 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi32, %vector.body ]
  %vec.phi21 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi33, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add16 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add17 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %76 = or i64 %index, 4
  %77 = or i64 %index, 8
  %78 = or i64 %index, 12
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %80 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %76, i32 2
  %81 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %77, i32 2
  %82 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %78, i32 2
  %83 = bitcast i32* %79 to <16 x i32>*
  %84 = bitcast i32* %80 to <16 x i32>*
  %85 = bitcast i32* %81 to <16 x i32>*
  %86 = bitcast i32* %82 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %83, align 4, !tbaa !182
  %wide.vec22 = load <16 x i32>, <16 x i32>* %84, align 4, !tbaa !182
  %wide.vec23 = load <16 x i32>, <16 x i32>* %85, align 4, !tbaa !182
  %wide.vec24 = load <16 x i32>, <16 x i32>* %86, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec25 = shufflevector <16 x i32> %wide.vec22, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec26 = shufflevector <16 x i32> %wide.vec23, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec27 = shufflevector <16 x i32> %wide.vec24, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %87 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %88 = icmp slt <4 x i32> %strided.vec25, zeroinitializer
  %89 = icmp slt <4 x i32> %strided.vec26, zeroinitializer
  %90 = icmp slt <4 x i32> %strided.vec27, zeroinitializer
  %91 = sext <4 x i32> %strided.vec to <4 x i64>
  %92 = sext <4 x i32> %strided.vec25 to <4 x i64>
  %93 = sext <4 x i32> %strided.vec26 to <4 x i64>
  %94 = sext <4 x i32> %strided.vec27 to <4 x i64>
  %95 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind, i32 1
  %96 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add, i32 1
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add16, i32 1
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add17, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %95, i32 4, <4 x i1> %87, <4 x i32> undef), !tbaa !178
  %wide.masked.gather28 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %96, i32 4, <4 x i1> %88, <4 x i32> undef), !tbaa !178
  %wide.masked.gather29 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %97, i32 4, <4 x i1> %89, <4 x i32> undef), !tbaa !178
  %wide.masked.gather30 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %98, i32 4, <4 x i1> %90, <4 x i32> undef), !tbaa !178
  %99 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %100 = add nsw <4 x i32> %wide.masked.gather28, <i32 -1, i32 -1, i32 -1, i32 -1>
  %101 = add nsw <4 x i32> %wide.masked.gather29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %102 = add nsw <4 x i32> %wide.masked.gather30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %103 = sext <4 x i32> %99 to <4 x i64>
  %104 = sext <4 x i32> %100 to <4 x i64>
  %105 = sext <4 x i32> %101 to <4 x i64>
  %106 = sext <4 x i32> %102 to <4 x i64>
  %107 = mul nsw <4 x i64> %103, %91
  %108 = mul nsw <4 x i64> %104, %92
  %109 = mul nsw <4 x i64> %105, %93
  %110 = mul nsw <4 x i64> %106, %94
  %111 = select <4 x i1> %87, <4 x i64> %107, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %111
  %112 = select <4 x i1> %88, <4 x i64> %108, <4 x i64> zeroinitializer
  %predphi31 = add <4 x i64> %vec.phi19, %112
  %113 = select <4 x i1> %89, <4 x i64> %109, <4 x i64> zeroinitializer
  %predphi32 = add <4 x i64> %vec.phi20, %113
  %114 = select <4 x i1> %90, <4 x i64> %110, <4 x i64> zeroinitializer
  %predphi33 = add <4 x i64> %vec.phi21, %114
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %115 = icmp eq i64 %index.next, %n.vec
  br i1 %115, label %middle.block, label %vector.body, !llvm.loop !294

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi31, %predphi
  %bin.rdx34 = add <4 x i64> %predphi32, %bin.rdx
  %bin.rdx35 = add <4 x i64> %predphi33, %bin.rdx34
  %116 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx35)
  br label %for.body.i13.i.preheader77

for.body.i13.i.preheader77:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %116, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader77, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader77 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader77 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %117 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %117, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %117 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %118 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %118, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !295

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body64
  %add8.i27.i = phi i64 [ 1, %for.body64 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body64 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %119 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %119 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !296

if.then76:                                        ; preds = %for.cond.cleanup63
  %120 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %120, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #17
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %121 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %sub = sub i64 %121, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88, %for.body88.preheader
  %indvars.iv = phi i64 [ 0, %for.body88.preheader ], [ %indvars.iv.next, %for.body88 ]
  %arrayidx90 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %122 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %122, i64 0, i32 2
  %123 = load i8*, i8** %host91, align 8, !tbaa !172
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %123) #17
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88, !llvm.loop !297

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #16
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %124 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %124, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !227
  %125 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %126 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %125, %"struct.Halide::Runtime::Internal::CacheEntry"** %126, align 8, !tbaa !251
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %125, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %125, i64 0, i32 1
  %127 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %127, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %128 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %128, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %129 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %129, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %130 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %130, align 4, !tbaa !254
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  br label %for.body117

for.body117:                                      ; preds = %for.body117, %for.body117.preheader
  %indvars.iv234 = phi i64 [ 0, %for.body117.preheader ], [ %indvars.iv.next235, %for.body117 ]
  %arrayidx119 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv234
  %131 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %131, i64 0, i32 2
  %132 = load i8*, i8** %host120, align 8, !tbaa !172
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %132) #17
  %133 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %133, align 8, !tbaa !286
  %indvars.iv.next235 = add nuw nsw i64 %indvars.iv234, 1
  %exitcond237.not = icmp eq i64 %indvars.iv.next235, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117, !llvm.loop !298

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #17
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !254
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !254
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !227
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !261, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !262
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !251
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #17
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #16
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !299

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body, label %for.cond.cleanup, !llvm.loop !300
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !164
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !110
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #16
  %2 = load i64, i64* %bits, align 8, !tbaa !110
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #17
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #17
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #17
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #17
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #17
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #17
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #17
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #17
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #17
  %4 = load double, double* %arg.addr, align 8, !tbaa !164
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !164
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !164
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.body, label %while.cond40thread-pre-split

while.body:                                       ; preds = %while.condthread-pre-split, %while.body
  %exponent_base_10.0277 = phi i32 [ %dec, %while.body ], [ 0, %while.condthread-pre-split ]
  %5 = phi double [ %mul, %while.body ], [ %.pr, %while.condthread-pre-split ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0277, -1
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !301

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !164
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !302

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !164
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #17
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #17
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #17
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #17
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #17
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #17
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #17
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %xtraiter = and i32 %integer_exponent.0, 1
  %9 = icmp eq i32 %integer_exponent.0, 1
  br i1 %9, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -2
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.1, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.1, %if.end137.1 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.1, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %cmp113.not264.epil = icmp eq i8* %call108, %int_part_ptr.0268.unr
  br i1 %cmp113.not264.epil, label %for.cond.cleanup, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0266.pn.epil = phi i8* [ %p.0266.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0265.epil = phi i32 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0266.epil = getelementptr inbounds i8, i8* %p.0266.pn.epil, i64 -1
  %10 = load i8, i8* %p.0266.epil, align 1, !tbaa !14
  %sub117.epil = add i8 %10, -48
  %conv119.epil = sext i8 %sub117.epil to i32
  %mul120.epil = shl nsw i32 %conv119.epil, 1
  %add121.epil = or i32 %mul120.epil, %carry.0265.epil
  %11 = trunc i32 %add121.epil to i8
  %cmp124.epil = icmp sgt i8 %11, 9
  %sub127.epil = add nsw i32 %add121.epil, 246
  %carry.1.epil = zext i1 %cmp124.epil to i32
  %new_digit.0.in.epil = select i1 %cmp124.epil, i32 %sub127.epil, i32 %add121.epil
  %12 = trunc i32 %new_digit.0.in.epil to i8
  %conv133.epil = add i8 %12, 48
  store i8 %conv133.epil, i8* %p.0266.epil, align 1, !tbaa !14
  %cmp113.not.epil = icmp eq i8* %p.0266.epil, %int_part_ptr.0268.unr
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !303

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %for.cond.cleanup

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  %incdec.ptr136.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.unr, i64 -1
  store i8 49, i8* %incdec.ptr136.epil, align 1, !tbaa !14
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.cond111.preheader.epil, %for.cond.cleanup114.epil, %if.then135.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %incdec.ptr136.epil, %if.then135.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #17
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #17
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %13 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %13, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %14 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %14, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %15 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %15, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !303

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %cmp113.not264.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not264.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0266.pn.1 = phi i8* [ %p.0266.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0265.1 = phi i32 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0266.1 = getelementptr inbounds i8, i8* %p.0266.pn.1, i64 -1
  %16 = load i8, i8* %p.0266.1, align 1, !tbaa !14
  %sub117.1 = add i8 %16, -48
  %conv119.1 = sext i8 %sub117.1 to i32
  %mul120.1 = shl nsw i32 %conv119.1, 1
  %add121.1 = or i32 %mul120.1, %carry.0265.1
  %17 = trunc i32 %add121.1 to i8
  %cmp124.1 = icmp sgt i8 %17, 9
  %sub127.1 = add nsw i32 %add121.1, 246
  %carry.1.1 = zext i1 %cmp124.1 to i32
  %new_digit.0.in.1 = select i1 %cmp124.1, i32 %sub127.1, i32 %add121.1
  %18 = trunc i32 %new_digit.0.in.1 to i8
  %conv133.1 = add i8 %18, 48
  store i8 %conv133.1, i8* %p.0266.1, align 1, !tbaa !14
  %cmp113.not.1 = icmp eq i8* %p.0266.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !303

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  %incdec.ptr136.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i64 -1
  store i8 49, i8* %incdec.ptr136.1, align 1, !tbaa !14
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %incdec.ptr136.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %niter.nsub.1 = add i32 %niter, -2
  %niter.ncmp.1 = icmp eq i32 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !304
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !305
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #17
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !136
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #17
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !306
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #17
  %5 = load i16, i16* %lanes, align 2, !tbaa !306
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #17
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #17
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !307
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #17
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #17
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !308
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #17
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #17
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #17
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !181
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #17
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !178
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #17
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !182
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #17
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !175
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !309

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 64
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !310
  %call = tail call i32 %0(i8* %user_context) #16
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !312

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !313
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !316
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !308
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !318
  %call = tail call i32 %1(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !307
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !307
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #16
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #17
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !319
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #16
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !321
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !323
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !324
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #16
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !325
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #16
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !326
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 17
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %6 = icmp eq i64 %n.mod.vf, 0
  %7 = select i1 %6, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %7
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi6 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi18, %vector.body ]
  %vec.phi7 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi19, %vector.body ]
  %vec.phi8 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi20, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add3 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add4 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %8 = or i64 %index, 4
  %9 = or i64 %index, 8
  %10 = or i64 %index, 12
  %11 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %12 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %8, i32 2
  %13 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %9, i32 2
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %10, i32 2
  %15 = bitcast i32* %11 to <16 x i32>*
  %16 = bitcast i32* %12 to <16 x i32>*
  %17 = bitcast i32* %13 to <16 x i32>*
  %18 = bitcast i32* %14 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %15, align 4, !tbaa !182
  %wide.vec9 = load <16 x i32>, <16 x i32>* %16, align 4, !tbaa !182
  %wide.vec10 = load <16 x i32>, <16 x i32>* %17, align 4, !tbaa !182
  %wide.vec11 = load <16 x i32>, <16 x i32>* %18, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec9, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec10, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec11, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %19 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %20 = icmp sgt <4 x i32> %strided.vec12, zeroinitializer
  %21 = icmp sgt <4 x i32> %strided.vec13, zeroinitializer
  %22 = icmp sgt <4 x i32> %strided.vec14, zeroinitializer
  %23 = zext <4 x i32> %strided.vec to <4 x i64>
  %24 = zext <4 x i32> %strided.vec12 to <4 x i64>
  %25 = zext <4 x i32> %strided.vec13 to <4 x i64>
  %26 = zext <4 x i32> %strided.vec14 to <4 x i64>
  %27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind, i32 1
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add, i32 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add3, i32 1
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add4, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %27, i32 4, <4 x i1> %19, <4 x i32> undef), !tbaa !178
  %wide.masked.gather15 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %28, i32 4, <4 x i1> %20, <4 x i32> undef), !tbaa !178
  %wide.masked.gather16 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %29, i32 4, <4 x i1> %21, <4 x i32> undef), !tbaa !178
  %wide.masked.gather17 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %30, i32 4, <4 x i1> %22, <4 x i32> undef), !tbaa !178
  %31 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = add nsw <4 x i32> %wide.masked.gather15, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = add nsw <4 x i32> %wide.masked.gather16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = add nsw <4 x i32> %wide.masked.gather17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %35 = sext <4 x i32> %31 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = mul nsw <4 x i64> %35, %23
  %40 = mul nsw <4 x i64> %36, %24
  %41 = mul nsw <4 x i64> %37, %25
  %42 = mul nsw <4 x i64> %38, %26
  %43 = select <4 x i1> %19, <4 x i64> %39, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %43
  %44 = select <4 x i1> %20, <4 x i64> %40, <4 x i64> zeroinitializer
  %predphi18 = add <4 x i64> %vec.phi6, %44
  %45 = select <4 x i1> %21, <4 x i64> %41, <4 x i64> zeroinitializer
  %predphi19 = add <4 x i64> %vec.phi7, %45
  %46 = select <4 x i1> %22, <4 x i64> %42, <4 x i64> zeroinitializer
  %predphi20 = add <4 x i64> %vec.phi8, %46
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %47 = icmp eq i64 %index.next, %n.vec
  br i1 %47, label %middle.block, label %vector.body, !llvm.loop !327

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi18, %predphi
  %bin.rdx21 = add <4 x i64> %predphi19, %bin.rdx
  %bin.rdx22 = add <4 x i64> %predphi20, %bin.rdx21
  %48 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx22)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %48, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %49 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %49, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %49 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %50 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %50, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !328

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check26 = icmp ult i32 %4, 17
  br i1 %min.iters.check26, label %for.body.i13.i.preheader64, label %vector.ph27

vector.ph27:                                      ; preds = %for.body.i13.i.preheader
  %n.mod.vf28 = and i64 %wide.trip.count.i.i, 15
  %51 = icmp eq i64 %n.mod.vf28, 0
  %52 = select i1 %51, i64 16, i64 %n.mod.vf28
  %n.vec29 = sub nsw i64 %wide.trip.count.i.i, %52
  br label %vector.body25

vector.body25:                                    ; preds = %vector.body25, %vector.ph27
  %index30 = phi i64 [ 0, %vector.ph27 ], [ %index.next31, %vector.body25 ]
  %vec.ind34 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph27 ], [ %vec.ind.next39, %vector.body25 ]
  %vec.phi40 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi56, %vector.body25 ]
  %vec.phi41 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi57, %vector.body25 ]
  %vec.phi42 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi58, %vector.body25 ]
  %vec.phi43 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi59, %vector.body25 ]
  %step.add35 = add <4 x i64> %vec.ind34, <i64 4, i64 4, i64 4, i64 4>
  %step.add36 = add <4 x i64> %vec.ind34, <i64 8, i64 8, i64 8, i64 8>
  %step.add37 = add <4 x i64> %vec.ind34, <i64 12, i64 12, i64 12, i64 12>
  %53 = or i64 %index30, 4
  %54 = or i64 %index30, 8
  %55 = or i64 %index30, 12
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index30, i32 2
  %57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %53, i32 2
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %54, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %55, i32 2
  %60 = bitcast i32* %56 to <16 x i32>*
  %61 = bitcast i32* %57 to <16 x i32>*
  %62 = bitcast i32* %58 to <16 x i32>*
  %63 = bitcast i32* %59 to <16 x i32>*
  %wide.vec44 = load <16 x i32>, <16 x i32>* %60, align 4, !tbaa !182
  %wide.vec45 = load <16 x i32>, <16 x i32>* %61, align 4, !tbaa !182
  %wide.vec46 = load <16 x i32>, <16 x i32>* %62, align 4, !tbaa !182
  %wide.vec47 = load <16 x i32>, <16 x i32>* %63, align 4, !tbaa !182
  %strided.vec48 = shufflevector <16 x i32> %wide.vec44, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec49 = shufflevector <16 x i32> %wide.vec45, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec50 = shufflevector <16 x i32> %wide.vec46, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec51 = shufflevector <16 x i32> %wide.vec47, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %64 = icmp slt <4 x i32> %strided.vec48, zeroinitializer
  %65 = icmp slt <4 x i32> %strided.vec49, zeroinitializer
  %66 = icmp slt <4 x i32> %strided.vec50, zeroinitializer
  %67 = icmp slt <4 x i32> %strided.vec51, zeroinitializer
  %68 = sext <4 x i32> %strided.vec48 to <4 x i64>
  %69 = sext <4 x i32> %strided.vec49 to <4 x i64>
  %70 = sext <4 x i32> %strided.vec50 to <4 x i64>
  %71 = sext <4 x i32> %strided.vec51 to <4 x i64>
  %72 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind34, i32 1
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add35, i32 1
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add36, i32 1
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add37, i32 1
  %wide.masked.gather52 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %72, i32 4, <4 x i1> %64, <4 x i32> undef), !tbaa !178
  %wide.masked.gather53 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %73, i32 4, <4 x i1> %65, <4 x i32> undef), !tbaa !178
  %wide.masked.gather54 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %74, i32 4, <4 x i1> %66, <4 x i32> undef), !tbaa !178
  %wide.masked.gather55 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %75, i32 4, <4 x i1> %67, <4 x i32> undef), !tbaa !178
  %76 = add nsw <4 x i32> %wide.masked.gather52, <i32 -1, i32 -1, i32 -1, i32 -1>
  %77 = add nsw <4 x i32> %wide.masked.gather53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %78 = add nsw <4 x i32> %wide.masked.gather54, <i32 -1, i32 -1, i32 -1, i32 -1>
  %79 = add nsw <4 x i32> %wide.masked.gather55, <i32 -1, i32 -1, i32 -1, i32 -1>
  %80 = sext <4 x i32> %76 to <4 x i64>
  %81 = sext <4 x i32> %77 to <4 x i64>
  %82 = sext <4 x i32> %78 to <4 x i64>
  %83 = sext <4 x i32> %79 to <4 x i64>
  %84 = mul nsw <4 x i64> %80, %68
  %85 = mul nsw <4 x i64> %81, %69
  %86 = mul nsw <4 x i64> %82, %70
  %87 = mul nsw <4 x i64> %83, %71
  %88 = select <4 x i1> %64, <4 x i64> %84, <4 x i64> zeroinitializer
  %predphi56 = add <4 x i64> %vec.phi40, %88
  %89 = select <4 x i1> %65, <4 x i64> %85, <4 x i64> zeroinitializer
  %predphi57 = add <4 x i64> %vec.phi41, %89
  %90 = select <4 x i1> %66, <4 x i64> %86, <4 x i64> zeroinitializer
  %predphi58 = add <4 x i64> %vec.phi42, %90
  %91 = select <4 x i1> %67, <4 x i64> %87, <4 x i64> zeroinitializer
  %predphi59 = add <4 x i64> %vec.phi43, %91
  %index.next31 = add i64 %index30, 16
  %vec.ind.next39 = add <4 x i64> %vec.ind34, <i64 16, i64 16, i64 16, i64 16>
  %92 = icmp eq i64 %index.next31, %n.vec29
  br i1 %92, label %middle.block23, label %vector.body25, !llvm.loop !329

middle.block23:                                   ; preds = %vector.body25
  %bin.rdx60 = add <4 x i64> %predphi57, %predphi56
  %bin.rdx61 = add <4 x i64> %predphi58, %bin.rdx60
  %bin.rdx62 = add <4 x i64> %predphi59, %bin.rdx61
  %93 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx62)
  br label %for.body.i13.i.preheader64

for.body.i13.i.preheader64:                       ; preds = %middle.block23, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec29, %middle.block23 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %93, %middle.block23 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader64, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader64 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader64 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %94 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %94, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %94 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %95 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %95, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !330

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %if.end
  %add8.i27.i = phi i64 [ 1, %if.end ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %if.end ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %96 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %96 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !172
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #17
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %97 = load i8*, i8** %host, align 8, !tbaa !172
  tail call void @halide_free(i8* %user_context, i8* %97) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #16
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !307
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !331
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !332
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %3() #16
  store i64 %handle, i64* %device, align 8, !tbaa !174
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !174
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %7() #16
  store i64 0, i64* %device, align 8, !tbaa !174
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #16
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !174
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #17
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !174
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !172
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !308
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !308
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !307
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !172
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !333
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #17
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #17
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !307
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !314
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !333
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #17
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !307
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !314
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !333
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !308
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !308
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #17
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !314
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !333
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %1() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !314
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !320
  tail call void %4() #16
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #17
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %6() #16
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !314
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !322
  tail call void %9() #16
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !335
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !336
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  store i64 0, i64* %device, align 8, !tbaa !174
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %5() #16
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !337
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #17
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #16
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #16
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #16
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #16
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #16
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !73
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !73
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !305
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !136
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !306
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !305
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !136
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !306
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #16
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #16
  %call.i = call i8* @malloc(i64 1024) #16
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #16
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #16
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #16
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #16
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #16
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #16
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #16
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #16
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #16
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #16
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #16
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #16
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #16
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #16
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #16
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #16
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #16
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #16
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #16
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #16
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #16
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #16
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #16
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #16
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #16
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #16
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #16
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #16
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #16
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #16
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #16
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #16
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #16
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #16
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #16
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #16
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #16
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #16
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #16
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #16
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #16
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #16
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #16
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #16
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #16
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #16
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  store i32 -1, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #17
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !341
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !344
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !345
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !346
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !344
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !345
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !346
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #16
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #16
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #16
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #16
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !347
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #16
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #16
  %12 = load i32, i32* %runs, align 8, !tbaa !343
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #16
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #16
  %13 = load i32, i32* %runs, align 8, !tbaa !343
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #16
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #16
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #16
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #16
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #16
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !348
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #16
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #16
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !349
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #16
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #16
  %16 = load i64, i64* %time, align 8, !tbaa !341
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !350
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !353

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !354
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !352
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !356
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #16
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !357
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #16
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !358

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !356
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !343
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #16
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !359

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !341
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !356
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #16
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !360

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !361
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !362
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #16
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #16
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !363

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #16
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #16
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !365

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #16
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #16
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !367

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !368
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #16
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #16
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #16
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #16
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #16
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !369

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !370
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !352
  tail call void @free(i8* %5) #16
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #16
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !373

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !374
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !351
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !375

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #16
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !371
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !372
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !346
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !376
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !351
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to i32*
  store i32 0, i32* %11, align 8, !tbaa !343
  %samples = getelementptr inbounds i8, i8* %call4, i64 84
  %12 = bitcast i8* %samples to i32*
  store i32 0, i32* %12, align 4, !tbaa !347
  %13 = bitcast i8* %call4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !348
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !110
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #16
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !352
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %18 = icmp eq i32 %num_funcs, 1
  br i1 %18, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20.lr.ph.new

for.body20.lr.ph.new:                             ; preds = %for.body20.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #16
  br label %cleanup62

for.cond.cleanup19.loopexit.unr-lcssa:            ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next.1, %for.body20 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup19, label %for.body20.epil

for.body20.epil:                                  ; preds = %for.cond.cleanup19.loopexit.unr-lcssa
  %time22.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 0
  store i64 0, i64* %time22.epil, align 8, !tbaa !356
  %arrayidx24.epil = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.unr
  %19 = load i64, i64* %arrayidx24.epil, align 8, !tbaa !110
  %20 = inttoptr i64 %19 to i8*
  %name28.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 7
  store i8* %20, i8** %name28.epil, align 8, !tbaa !357
  %memory_current32.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 1
  %num_allocs44.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 8
  store i32 0, i32* %num_allocs44.epil, align 8, !tbaa !366
  %21 = bitcast i64* %memory_current32.epil to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %21, align 8, !tbaa !110
  %active_threads_numerator51.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 5
  %22 = bitcast i64* %active_threads_numerator51.epil to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !110
  br label %for.cond.cleanup19

for.cond.cleanup19:                               ; preds = %for.body20.epil, %for.cond.cleanup19.loopexit.unr-lcssa, %for.cond17.preheader
  %23 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %add = add nsw i32 %23, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !374
  store i8* %call4, i8** %4, align 8, !tbaa !371
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph.new ], [ %indvars.iv.next.1, %for.body20 ]
  %niter = phi i64 [ %unroll_iter, %for.body20.lr.ph.new ], [ %niter.nsub.1, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !356
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %24 = load i64, i64* %arrayidx24, align 8, !tbaa !110
  %25 = inttoptr i64 %24 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %25, i8** %name28, align 8, !tbaa !357
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !366
  %26 = bitcast i64* %memory_current32 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %26, align 8, !tbaa !110
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %27 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !110
  %indvars.iv.next = or i64 %indvars.iv, 1
  %time22.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 0
  store i64 0, i64* %time22.1, align 8, !tbaa !356
  %arrayidx24.1 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.next
  %28 = load i64, i64* %arrayidx24.1, align 8, !tbaa !110
  %29 = inttoptr i64 %28 to i8*
  %name28.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 7
  store i8* %29, i8** %name28.1, align 8, !tbaa !357
  %memory_current32.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 1
  %num_allocs44.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 8
  store i32 0, i32* %num_allocs44.1, align 8, !tbaa !366
  %30 = bitcast i64* %memory_current32.1 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %30, align 8, !tbaa !110
  %active_threads_numerator51.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 5
  %31 = bitcast i64* %active_threads_numerator51.1 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !110
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20, !llvm.loop !377

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !376
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !372
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !372
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !356
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !356
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = bitcast i64* %active_threads_numerator to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8, !tbaa !110
  %8 = insertelement <2 x i64> <i64 poison, i64 1>, i64 %conv, i32 0
  %9 = add <2 x i64> %7, %8
  %10 = bitcast i64* %active_threads_numerator to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !110
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %11 = load i64, i64* %time16, align 8, !tbaa !341
  %add17 = add i64 %11, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !341
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %12 = load i32, i32* %samples, align 4, !tbaa !347
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !347
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %13 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !tbaa !110
  %15 = add <2 x i64> %14, %8
  %16 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !110
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %17 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %17, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !378

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !379
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #16
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  store i32 %3, i32* %func, align 4, !tbaa !73
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !380
  store i32 %4, i32* %active_threads, align 4, !tbaa !73
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #16
  %5 = load i32, i32* %func, align 4, !tbaa !73
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !110
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !73
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #17
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !110
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !381
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #16
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !110
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #17
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #16
  call void @halide_sleep_ms(i8* null, i32 %call422) #16
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #17
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !382

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #16
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !383

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #16
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #16
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #17
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #16
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !343
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !384

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !351
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !385
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !384

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !110
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !384

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !340
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #16
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #16
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #16
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !110
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !110
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !110
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !110
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !110
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !110
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %info = alloca [4 x i32], align 4
  %info2 = alloca [4 x i32], align 4
  %info3 = alloca [4 x i32], align 4
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <4 x i64>*
  store <4 x i64> <i64 34084860461808, i64 0, i64 0, i64 0>, <4 x i64>* %0, align 8, !tbaa !110
  %1 = bitcast [4 x i32]* %info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 0
  store i32 1, i32* %arraydecay, align 4, !tbaa !73
  %arrayidx1.i110 = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i110, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay) #11
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 2
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !73
  %and = lshr i32 %2, 15
  %3 = and i32 %and, 16
  %and2 = lshr i32 %2, 23
  %4 = and i32 %and2, 32
  %5 = or i32 %4, %3
  %and6 = lshr i32 %2, 20
  %6 = and i32 %and6, 512
  %7 = or i32 %5, %6
  %and14 = lshr i32 %2, 5
  %8 = and i32 %and14, 128
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  %11 = and i32 %2, 805834752
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  store i64 %10, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %14

14:                                               ; preds = %13, %entry
  %15 = and i32 %2, 1879048192
  %.not = icmp eq i32 %15, 1879048192
  br i1 %.not, label %if.then30, label %if.end67

if.then30:                                        ; preds = %14
  %16 = bitcast [4 x i32]* %info2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 0
  store i32 7, i32* %arraydecay31, align 4, !tbaa !73
  %arrayidx1.i99 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i99, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay31) #11
  %17 = load i32, i32* %arrayidx1.i99, align 4, !tbaa !73
  %and33 = and i32 %17, 32
  %cmp34.not = icmp eq i32 %and33, 0
  br i1 %cmp34.not, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.then30
  %or.i98 = or i64 %10, 64
  store i64 %or.i98, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.then30
  %18 = phi i64 [ %or.i98, %if.then35 ], [ %10, %if.then30 ]
  %and38 = and i32 %17, 268500992
  %cmp39 = icmp eq i32 %and38, 268500992
  br i1 %cmp39, label %if.then40, label %if.end66

if.then40:                                        ; preds = %if.end36
  %and42 = and i32 %17, 469827584
  %cmp43 = icmp eq i32 %and42, 469827584
  %spec.select.v = select i1 %cmp43, i64 3298534883328, i64 1099511627776
  %spec.select = or i64 %18, %spec.select.v
  %and47 = and i32 %17, -805109760
  %cmp48 = icmp eq i32 %and47, -805109760
  %or.i92 = or i64 %spec.select, 4398046511104
  %spec.select130 = select i1 %cmp48, i64 %or.i92, i64 %spec.select
  store i64 %spec.select130, i64* %arrayidx3.i, align 8, !tbaa !110
  %and52 = and i32 %17, -803012608
  %cmp53 = icmp eq i32 %and52, -803012608
  br i1 %cmp53, label %if.then54, label %if.end66

if.then54:                                        ; preds = %if.then40
  %or.i90 = or i64 %spec.select130, 8796093022208
  store i64 %or.i90, i64* %arrayidx3.i, align 8, !tbaa !110
  %19 = bitcast [4 x i32]* %info3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #11
  %arraydecay55 = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 0
  store i32 7, i32* %arraydecay55, align 4, !tbaa !73
  %arrayidx1.i = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 1
  store i32 1, i32* %arrayidx1.i, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay55) #11
  %arrayidx56 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 2
  %20 = load i32, i32* %arrayidx56, align 4, !tbaa !73
  %and57 = and i32 %20, 2048
  %cmp58.not = icmp eq i32 %and57, 0
  br i1 %cmp58.not, label %if.end64, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %if.then54
  %21 = load i32, i32* %arraydecay55, align 4, !tbaa !73
  %and61 = and i32 %21, 32
  %cmp62.not = icmp eq i32 %and61, 0
  br i1 %cmp62.not, label %if.end64, label %if.then63

if.then63:                                        ; preds = %land.lhs.true59
  %or.i = or i64 %spec.select130, 26388279066624
  store i64 %or.i, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true59, %if.then54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #11
  br label %if.end66

if.end66:                                         ; preds = %if.end64, %if.then40, %if.end36
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16>, <16 x i16>) #9

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16>, <16 x i16>) #9

; Function Attrs: nounwind
define i32 @blur7x7(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %blur_y.buffer) local_unnamed_addr #10 {
entry:
  %blur_x.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep2473 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 0
  %.fca.1.gep2474 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep2475 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 2
  %read_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 0
  %0 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8 0, i64 24, i1 false)
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 2
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 2
  %1 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %1, i8 0, i64 24, i1 false)
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 0
  %3 = load i32, i32* %min.i, align 4, !tbaa !181
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 1
  %4 = load i32, i32* %extent.i, align 4, !tbaa !178
  %min.i2897 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 0
  %5 = load i32, i32* %min.i2897, align 4, !tbaa !181
  %extent.i2899 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 1
  %6 = load i32, i32* %extent.i2899, align 4, !tbaa !178
  %stride.i2901 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 2
  %7 = load i32, i32* %stride.i2901, align 4, !tbaa !182
  %host.i2902 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %dim.i2903 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2903, align 8, !tbaa !176
  %min.i2904 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 0
  %9 = load i32, i32* %min.i2904, align 4, !tbaa !181
  %extent.i2906 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 1
  %10 = load i32, i32* %extent.i2906, align 4, !tbaa !178
  %min.i2910 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 0
  %11 = load i32, i32* %min.i2910, align 4, !tbaa !181
  %extent.i2912 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 1
  %12 = load i32, i32* %extent.i2912, align 4, !tbaa !178
  %stride.i2914 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 2
  %13 = load i32, i32* %stride.i2914, align 4, !tbaa !182
  %b22 = add nsw i32 %4, %3
  %t1678 = add nsw i32 %10, %9
  %14 = icmp slt i32 %4, 32
  %t1679 = select i1 %14, i32 %4, i32 32
  %15 = icmp sgt i32 %12, 0
  %16 = select i1 %15, i32 %12, i32 0
  %a40 = add nsw i32 %16, %11
  %t1681 = mul nsw i32 %7, %5
  %17 = add nsw i32 %4, 31
  %a3 = ashr i32 %17, 5
  %18 = icmp sgt i32 %4, 32
  %b21 = select i1 %18, i32 %4, i32 32
  %19 = add nuw nsw i32 %b21, 37
  %20 = lshr i32 %19, 5
  %21 = icmp slt i32 %a3, 1
  %b23 = select i1 %21, i32 %a3, i32 1
  %22 = sub i32 63, %3
  %23 = sub i32 %22, %t1679
  %24 = add i32 %23, %9
  %a5 = ashr i32 %24, 5
  %25 = icmp sgt i32 %a5, 0
  %a4 = select i1 %25, i32 %a5, i32 0
  %26 = icmp sgt i32 %20, %a4
  %b18 = select i1 %26, i32 %a4, i32 %20
  %b8 = add nsw i32 %t1679, -32
  %27 = icmp slt i32 %4, 0
  %28 = select i1 %27, i32 %4, i32 0
  %a6 = select i1 %18, i32 %28, i32 %b8
  %29 = icmp sgt i32 %b8, %a6
  %t1689 = select i1 %29, i32 %a6, i32 %b8
  %b19 = add nuw nsw i32 %b21, 5
  %a14 = add nsw i32 %4, -32
  %30 = add nsw i32 %4, -1
  %31 = and i32 %30, -32
  %a8 = select i1 %18, i32 %31, i32 %a14
  %32 = icmp sgt i32 %a8, %a14
  %33 = select i1 %32, i32 %a8, i32 %a14
  %34 = icmp sgt i32 %4, 0
  %35 = select i1 %34, i32 %4, i32 0
  %a9 = select i1 %18, i32 %35, i32 32
  %36 = icmp sgt i32 %a9, 32
  %37 = select i1 %36, i32 %a9, i32 32
  %38 = add nsw i32 %37, -1
  %39 = and i32 %38, -32
  %b16 = add nsw i32 %39, %33
  %a13 = add nsw i32 %b16, 32
  %40 = icmp sgt i32 %4, %a13
  %a12 = select i1 %40, i32 %a13, i32 %4
  %41 = icmp sgt i32 %b16, %a14
  %42 = select i1 %41, i32 %a14, i32 %b16
  %b14 = add nsw i32 %42, 37
  %43 = icmp sgt i32 %a12, %b14
  %a11 = select i1 %43, i32 %a12, i32 %b14
  %a15 = add nsw i32 %4, 6
  %44 = and i32 %b19, 2147483616
  %b17 = add nsw i32 %44, %t1679
  %45 = icmp sgt i32 %b17, %a15
  %46 = select i1 %45, i32 %a15, i32 %b17
  %b13 = add nsw i32 %46, -1
  %.not = icmp slt i32 %a11, %46
  %47 = select i1 %.not, i32 %b13, i32 %a11
  %48 = sub nsw i32 %47, %t1689
  %a24 = add nsw i32 %48, 1
  %49 = sub nsw i32 %t1678, %t1679
  %a18 = sub i32 %49, %3
  %a20 = add nsw i32 %t1678, 25
  %50 = icmp sgt i32 %b22, %a20
  %51 = select i1 %50, i32 %a20, i32 %b22
  %52 = sub i32 32, %3
  %53 = sub i32 %52, %t1679
  %a19 = add i32 %53, %51
  %54 = icmp sgt i32 %b21, %a19
  %55 = select i1 %54, i32 %a19, i32 %b21
  %b20 = add nsw i32 %55, -26
  %56 = icmp sgt i32 %b20, %a18
  %a17 = select i1 %56, i32 %a18, i32 %b20
  %57 = icmp sgt i32 %b19, %a17
  %58 = select i1 %57, i32 %a17, i32 %b19
  %59 = ashr i32 %58, 5
  %a16 = add nsw i32 %59, 1
  %.not2639 = icmp slt i32 %59, %b18
  %t1668 = select i1 %.not2639, i32 %b18, i32 %a16
  %a21 = ashr i32 %4, 5
  %60 = icmp sgt i32 %a21, %b23
  %t1670 = select i1 %60, i32 %a21, i32 %b23
  %61 = add nsw i32 %6, 31
  %t1656 = ashr i32 %61, 5
  %62 = icmp sgt i32 %6, 0
  br i1 %62, label %"for blur_y.s0.y.y.preheader", label %"end for blur_y.s0.y.y", !prof !386

"for blur_y.s0.y.y.preheader":                    ; preds = %entry
  %63 = bitcast i8** %host.i2902 to i16**
  %64 = load i16*, i16** %63, align 8, !tbaa !172
  %65 = bitcast i8** %host.i to i16**
  %66 = load i16*, i16** %65, align 8, !tbaa !172
  %b24 = add nsw i32 %6, -32
  %.inv2804 = icmp slt i32 %48, 0
  %67 = select i1 %.inv2804, i32 0, i32 %a24
  %t2350 = zext i32 %67 to i64
  %68 = mul nuw nsw i64 %t2350, 76
  %69 = add nuw nsw i64 %68, 6
  %70 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b30 = add nsw i32 %12, %11
  %71 = sub nsw i32 %11, %5
  %72 = sub i32 %5, %11
  %t1696 = add nsw i32 %t1689, %3
  %t1694 = add nsw i32 %t1679, %3
  %b36 = add nsw i32 %12, -1
  %b37 = add nsw i32 %b22, 6
  %73 = add nsw i32 %t1678, -1
  %74 = insertelement <32 x i32> undef, i32 %73, i32 0
  %75 = shufflevector <32 x i32> %74, <32 x i32> undef, <8 x i32> zeroinitializer
  %76 = insertelement <32 x i32> undef, i32 %9, i32 0
  %77 = shufflevector <32 x i32> %76, <32 x i32> undef, <8 x i32> zeroinitializer
  %t1705 = sub nsw i32 %20, %t1668
  %78 = icmp sgt i32 %b18, 0
  %79 = sext i32 %11 to i64
  %80 = sext i32 %5 to i64
  %81 = sub nsw i64 %79, %80
  %82 = sext i32 %a24 to i64
  %83 = sext i32 %t1696 to i64
  %t1711 = sub nsw i32 %t1668, %b18
  %84 = icmp sgt i32 %t1711, 0
  %85 = icmp sgt i32 %t1705, 0
  %86 = sub nsw i32 %5, %a40
  %87 = sext i32 %a40 to i64
  %88 = sub nsw i64 %87, %80
  %a73 = sub nsw i32 %4, %t1689
  %89 = icmp sgt i32 %a73, 0
  %90 = select i1 %89, i32 %a73, i32 0
  %t2351 = zext i32 %90 to i64
  %91 = shl nuw nsw i64 %t2351, 4
  %92 = or i64 %91, 6
  %93 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %t710 = sub i32 %t1679, %t1689
  %94 = sext i32 %t710 to i64
  %95 = zext i32 %4 to i64
  %96 = sext i32 %t1689 to i64
  %97 = sub nsw i64 %95, %96
  %98 = sext i32 %t1679 to i64
  %99 = sub nsw i64 %98, %96
  %t1724 = sub nsw i32 %t1670, %b23
  %100 = icmp sgt i32 %t1724, 0
  %101 = sext i32 %b23 to i64
  %t1727 = sub nsw i32 %a3, %t1670
  %102 = icmp sgt i32 %t1727, 0
  %t716 = add i32 %t710, %a24
  %103 = sext i32 %t716 to i64
  %t1731 = sub nsw i32 %a24, %t1689
  %104 = shl nsw i32 %a24, 1
  %t722 = add i32 %t710, %104
  %105 = sext i32 %t722 to i64
  %t1737 = sub nsw i32 %104, %t1689
  %106 = mul nsw i32 %a24, 3
  %t728 = add i32 %t710, %106
  %107 = sext i32 %t728 to i64
  %t1743 = sub nsw i32 %106, %t1689
  %108 = shl nsw i32 %a24, 2
  %t734 = add i32 %t710, %108
  %109 = sext i32 %t734 to i64
  %t1749 = sub nsw i32 %108, %t1689
  %110 = mul nsw i32 %a24, 6
  %a24.neg = xor i32 %48, -1
  %111 = add i32 %t710, %a24.neg
  %t740 = add i32 %111, %110
  %112 = sext i32 %t740 to i64
  %113 = sub nsw i32 %110, %t1689
  %t1755 = sub nsw i32 %113, %a24
  %114 = add nsw i32 %110, %t1679
  %t746 = sub i32 %114, %t1689
  %115 = sext i32 %t746 to i64
  %116 = sext i32 %a73 to i64
  %117 = sext i32 %7 to i64
  %118 = sext i32 %t1681 to i64
  %119 = sub nsw i64 %98, %118
  %t1765 = sub nsw i32 0, %t1681
  %120 = sext i32 %t1765 to i64
  %t762 = add nsw i32 %t746, %a24
  %121 = sext i32 %t762 to i64
  %t1777 = add nsw i32 %113, %a24
  %122 = shl nsw i32 %a24, 3
  %t778 = add i32 %t710, %122
  %123 = sext i32 %t778 to i64
  %t1793 = sub nsw i32 %122, %t1689
  %124 = mul nsw i32 %a24, 9
  %t794 = add i32 %t710, %124
  %125 = sext i32 %t794 to i64
  %t1809 = sub nsw i32 %124, %t1689
  %126 = mul nsw i32 %a24, 10
  %t810 = add i32 %t710, %126
  %127 = sext i32 %t810 to i64
  %t1825 = sub nsw i32 %126, %t1689
  %128 = mul nsw i32 %a24, 11
  %t826 = add i32 %t710, %128
  %129 = sext i32 %t826 to i64
  %t1841 = sub nsw i32 %128, %t1689
  %130 = mul nsw i32 %a24, 12
  %t842 = add i32 %t710, %130
  %131 = sext i32 %t842 to i64
  %t1857 = sub nsw i32 %130, %t1689
  %132 = mul nsw i32 %a24, 13
  %t858 = add i32 %t710, %132
  %133 = sext i32 %t858 to i64
  %t1873 = sub nsw i32 %132, %t1689
  %134 = mul nsw i32 %a24, 14
  %t874 = add i32 %t710, %134
  %135 = sext i32 %t874 to i64
  %t1889 = sub nsw i32 %134, %t1689
  %136 = mul nsw i32 %a24, 15
  %t890 = add i32 %t710, %136
  %137 = sext i32 %t890 to i64
  %t1905 = sub nsw i32 %136, %t1689
  %138 = shl nsw i32 %a24, 4
  %t906 = add i32 %t710, %138
  %139 = sext i32 %t906 to i64
  %t1921 = sub nsw i32 %138, %t1689
  %140 = mul nsw i32 %a24, 17
  %t922 = add i32 %t710, %140
  %141 = sext i32 %t922 to i64
  %t1937 = sub nsw i32 %140, %t1689
  %142 = mul nsw i32 %a24, 18
  %t938 = add i32 %t710, %142
  %143 = sext i32 %t938 to i64
  %t1953 = sub nsw i32 %142, %t1689
  %144 = mul nsw i32 %a24, 19
  %t954 = add i32 %t710, %144
  %145 = sext i32 %t954 to i64
  %t1969 = sub nsw i32 %144, %t1689
  %146 = mul nsw i32 %a24, 20
  %t970 = add i32 %t710, %146
  %147 = sext i32 %t970 to i64
  %t1985 = sub nsw i32 %146, %t1689
  %148 = mul nsw i32 %a24, 21
  %t986 = add i32 %t710, %148
  %149 = sext i32 %t986 to i64
  %t2001 = sub nsw i32 %148, %t1689
  %150 = mul nsw i32 %a24, 22
  %t1002 = add i32 %t710, %150
  %151 = sext i32 %t1002 to i64
  %t2017 = sub nsw i32 %150, %t1689
  %152 = mul nsw i32 %a24, 23
  %t1018 = add i32 %t710, %152
  %153 = sext i32 %t1018 to i64
  %t2033 = sub nsw i32 %152, %t1689
  %154 = mul nsw i32 %a24, 24
  %t1034 = add i32 %t710, %154
  %155 = sext i32 %t1034 to i64
  %t2049 = sub nsw i32 %154, %t1689
  %156 = mul nsw i32 %a24, 25
  %t1050 = add i32 %t710, %156
  %157 = sext i32 %t1050 to i64
  %t2065 = sub nsw i32 %156, %t1689
  %158 = mul nsw i32 %a24, 26
  %t1066 = add i32 %t710, %158
  %159 = sext i32 %t1066 to i64
  %t2081 = sub nsw i32 %158, %t1689
  %160 = mul nsw i32 %a24, 27
  %t1082 = add i32 %t710, %160
  %161 = sext i32 %t1082 to i64
  %t2097 = sub nsw i32 %160, %t1689
  %162 = mul nsw i32 %a24, 28
  %t1098 = add i32 %t710, %162
  %163 = sext i32 %t1098 to i64
  %t2113 = sub nsw i32 %162, %t1689
  %164 = mul nsw i32 %a24, 29
  %t1114 = add i32 %t710, %164
  %165 = sext i32 %t1114 to i64
  %t2129 = sub nsw i32 %164, %t1689
  %166 = mul nsw i32 %a24, 30
  %t1130 = add i32 %t710, %166
  %167 = sext i32 %t1130 to i64
  %t2145 = sub nsw i32 %166, %t1689
  %168 = mul nsw i32 %a24, 31
  %t1146 = add i32 %t710, %168
  %169 = sext i32 %t1146 to i64
  %t2161 = sub nsw i32 %168, %t1689
  %170 = shl nsw i32 %a24, 5
  %t1162 = add i32 %t710, %170
  %171 = sext i32 %t1162 to i64
  %t2177 = sub nsw i32 %170, %t1689
  %172 = mul nsw i32 %a24, 33
  %t1178 = add i32 %t710, %172
  %173 = sext i32 %t1178 to i64
  %t2193 = sub nsw i32 %172, %t1689
  %174 = mul nsw i32 %a24, 34
  %t1194 = add i32 %t710, %174
  %175 = sext i32 %t1194 to i64
  %t2209 = sub nsw i32 %174, %t1689
  %176 = mul nsw i32 %a24, 35
  %t1210 = add i32 %t710, %176
  %177 = sext i32 %t1210 to i64
  %t2225 = sub nsw i32 %176, %t1689
  %178 = mul nsw i32 %a24, 36
  %t1226 = add i32 %t710, %178
  %179 = sext i32 %t1226 to i64
  %t2241 = sub nsw i32 %178, %t1689
  %180 = mul nsw i32 %a24, 37
  %t1242 = add i32 %t710, %180
  %181 = sext i32 %t1242 to i64
  %t2257 = sub nsw i32 %180, %t1689
  %182 = sext i32 %b36 to i64
  %183 = zext i32 %b18 to i64
  %184 = sext i32 %t1694 to i64
  %185 = zext i32 %t1711 to i64
  %186 = sext i32 %13 to i64
  %187 = sext i32 %9 to i64
  %188 = zext i32 %t1724 to i64
  %189 = add nsw i64 %185, -1
  %xtraiter = and i64 %185, 3
  %190 = icmp ult i64 %189, 3
  %unroll_iter = and i64 %185, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %"for blur_y.s0.y.y"

"for blur_y.s0.y.y":                              ; preds = %"for blur_y.s0.y.y.preheader", %"end for blur_y.s0.x.x.rebased825"
  %blur_y.s0.y.y = phi i32 [ %19394, %"end for blur_y.s0.x.x.rebased825" ], [ 0, %"for blur_y.s0.y.y.preheader" ]
  %a22 = shl nsw i32 %blur_y.s0.y.y, 5
  %191 = icmp sgt i32 %b24, %a22
  %blur_y.s0.y.yi.base.s = select i1 %191, i32 %a22, i32 %b24
  %192 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i = icmp ult i64 %192, %69
  %193 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i, label %if.then.i, label %pseudostack_alloc.exit, !prof !390

if.then.i:                                        ; preds = %"for blur_y.s0.y.y"
  %tobool1.not.i = icmp ne i8* %193, null
  %194 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i = icmp ugt i64 %194, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i
  call void @halide_free(i8* null, i8* nonnull %193) #16
  %.pre = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i
  %195 = phi i64 [ %.pre, %if.then3.i ], [ %194, %if.then.i ]
  %add.i = add i64 %195, %69
  store i64 %add.i, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i = icmp ugt i64 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i64 %69) #16
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %69, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for blur_y.s0.y.y", %if.end11.i
  %196 = phi i8* [ %storemerge.i, %if.end11.i ], [ %193, %"for blur_y.s0.y.y" ]
  %197 = bitcast i8* %196 to i16*
  %.not2805 = icmp eq i8* %196, null
  br i1 %.not2805, label %then_bb, label %"produce read_input", !prof !392

"end for blur_y.s0.y.y.loopexit":                 ; preds = %"end for blur_y.s0.x.x.rebased825"
  %198 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %199 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %"end for blur_y.s0.y.y"

"end for blur_y.s0.y.y":                          ; preds = %"end for blur_y.s0.y.y.loopexit", %entry
  %.03019 = phi i8* [ null, %entry ], [ %199, %"end for blur_y.s0.y.y.loopexit" ]
  %.0 = phi i8* [ null, %entry ], [ %198, %"end for blur_y.s0.y.y.loopexit" ]
  %200 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i2917 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %200, i64 0, i32 0
  %201 = load i32, i32* %min.i2917, align 4, !tbaa !181
  %extent.i2919 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %200, i64 0, i32 1
  %202 = load i32, i32* %extent.i2919, align 4, !tbaa !178
  %min.i2923 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %200, i64 1, i32 0
  %203 = load i32, i32* %min.i2923, align 4, !tbaa !181
  %extent.i2925 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %200, i64 1, i32 1
  %204 = load i32, i32* %extent.i2925, align 4, !tbaa !178
  %stride.i2927 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %200, i64 1, i32 2
  %205 = load i32, i32* %stride.i2927, align 4, !tbaa !182
  %206 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2903, align 8, !tbaa !176
  %min.i2930 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %206, i64 0, i32 0
  %207 = load i32, i32* %min.i2930, align 4, !tbaa !181
  %extent.i2932 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %206, i64 0, i32 1
  %208 = load i32, i32* %extent.i2932, align 4, !tbaa !178
  %min.i2936 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %206, i64 1, i32 0
  %209 = load i32, i32* %min.i2936, align 4, !tbaa !181
  %extent.i2938 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %206, i64 1, i32 1
  %210 = load i32, i32* %extent.i2938, align 4, !tbaa !178
  %stride.i2940 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %206, i64 1, i32 2
  %211 = load i32, i32* %stride.i2940, align 4, !tbaa !182
  %t1678845 = add nsw i32 %208, %207
  %212 = icmp slt i32 %202, 32
  %t1679846 = select i1 %212, i32 %202, i32 32
  %213 = icmp sgt i32 %210, 0
  %214 = select i1 %213, i32 %210, i32 0
  %t1680 = add nsw i32 %214, %209
  %t1681847 = mul nsw i32 %205, %203
  %215 = add nsw i32 %202, 31
  %216 = icmp sgt i32 %202, 32
  %217 = select i1 %216, i32 %202, i32 32
  %218 = add nuw nsw i32 %217, 37
  %219 = lshr i32 %218, 5
  %a345 = ashr i32 %215, 5
  %220 = icmp slt i32 %a345, 1
  %t1685 = select i1 %220, i32 %a345, i32 1
  %221 = sub i32 63, %201
  %222 = sub i32 %221, %t1679846
  %223 = add i32 %222, %207
  %a347 = ashr i32 %223, 5
  %224 = icmp sgt i32 %a347, 0
  %a346 = select i1 %224, i32 %a347, i32 0
  %225 = icmp sgt i32 %219, %a346
  %t1686 = select i1 %225, i32 %a346, i32 %219
  %t1688 = add nsw i32 %t1679846, -32
  %226 = icmp slt i32 %202, 0
  %227 = select i1 %226, i32 %202, i32 0
  %a351 = select i1 %216, i32 %227, i32 %t1688
  %228 = icmp sgt i32 %t1688, %a351
  %t1689849 = select i1 %228, i32 %a351, i32 %t1688
  %t1691 = add nsw i32 %202, -32
  %229 = add i32 %202, -1
  %230 = and i32 %229, -32
  %a355 = select i1 %216, i32 %230, i32 %t1691
  %231 = icmp sgt i32 %a355, %t1691
  %232 = select i1 %231, i32 %a355, i32 %t1691
  %233 = icmp sgt i32 %202, 0
  %234 = select i1 %233, i32 %202, i32 0
  %a356 = select i1 %216, i32 %234, i32 32
  %235 = icmp sgt i32 %a356, 32
  %236 = select i1 %235, i32 %a356, i32 32
  %237 = add nsw i32 %236, -1
  %238 = and i32 %237, -32
  %239 = add nsw i32 %238, %232
  %a360 = add nsw i32 %239, 32
  %240 = icmp sgt i32 %202, %a360
  %a359 = select i1 %240, i32 %a360, i32 %202
  %241 = icmp sgt i32 %239, %t1691
  %242 = select i1 %241, i32 %t1691, i32 %239
  %b361 = add nsw i32 %242, 37
  %243 = icmp sgt i32 %a359, %b361
  %a358 = select i1 %243, i32 %a359, i32 %b361
  %a368 = add nsw i32 %202, 6
  %244 = add nuw nsw i32 %217, 5
  %245 = and i32 %244, 2147483616
  %b370 = add nsw i32 %245, %t1679846
  %246 = icmp sgt i32 %b370, %a368
  %247 = select i1 %246, i32 %a368, i32 %b370
  %b360 = add nsw i32 %247, -1
  %.not2640 = icmp slt i32 %a358, %247
  %248 = select i1 %.not2640, i32 %b360, i32 %a358
  %249 = sub nsw i32 %248, %t1689849
  %a391 = add nsw i32 %249, 1
  %250 = sub nsw i32 %t1678845, %t1679846
  %a376 = sub i32 %250, %201
  %a379 = add nsw i32 %t1678845, 25
  %b381 = add nsw i32 %202, %201
  %251 = icmp sgt i32 %b381, %a379
  %252 = select i1 %251, i32 %a379, i32 %b381
  %253 = sub i32 32, %201
  %254 = sub i32 %253, %t1679846
  %a378 = add i32 %254, %252
  %255 = icmp sgt i32 %217, %a378
  %256 = select i1 %255, i32 %a378, i32 %217
  %b378 = add nsw i32 %256, -26
  %257 = icmp sgt i32 %b378, %a376
  %a375 = select i1 %257, i32 %a376, i32 %b378
  %258 = icmp sgt i32 %244, %a375
  %259 = select i1 %258, i32 %a375, i32 %244
  %260 = ashr i32 %259, 5
  %a387 = ashr i32 %202, 5
  %261 = icmp sgt i32 %a387, %t1685
  %t1670852 = select i1 %261, i32 %a387, i32 %t1685
  %262 = add nsw i32 %204, 31
  %t1656853 = ashr i32 %262, 5
  %263 = icmp sgt i32 %204, 0
  br i1 %263, label %"for blur_y.s0.y.y854.preheader", label %"end for blur_y.s0.y.y855", !prof !386

"for blur_y.s0.y.y854.preheader":                 ; preds = %"end for blur_y.s0.y.y"
  %a391.neg = xor i32 %249, -1
  %264 = bitcast i8** %host.i2902 to i16**
  %265 = load i16*, i16** %264, align 8, !tbaa !172
  %266 = bitcast i8** %host.i to i16**
  %267 = load i16*, i16** %266, align 8, !tbaa !172
  %.not2641 = icmp slt i32 %260, %t1686
  %a374 = add nsw i32 %260, 1
  %b391 = add nsw i32 %204, -32
  %.inv = icmp slt i32 %249, 0
  %268 = select i1 %.inv, i32 0, i32 %a391
  %t2352 = zext i32 %268 to i64
  %269 = mul nuw nsw i64 %t2352, 76
  %270 = add nuw nsw i64 %269, 6
  %271 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b399 = add nsw i32 %210, %209
  %272 = sub nsw i32 %209, %203
  %273 = sub i32 %203, %209
  %b412 = add nsw i32 %210, -1
  %274 = add i32 %t1689849, %201
  %275 = add nsw i32 %t1679846, %201
  %b433 = add nsw i32 %b381, 6
  %276 = add nsw i32 %t1678845, -1
  %277 = insertelement <32 x i32> undef, i32 %276, i32 0
  %278 = shufflevector <32 x i32> %277, <32 x i32> undef, <8 x i32> zeroinitializer
  %279 = insertelement <32 x i32> undef, i32 %207, i32 0
  %280 = shufflevector <32 x i32> %279, <32 x i32> undef, <8 x i32> zeroinitializer
  %281 = select i1 %.not2641, i32 %t1686, i32 %a374
  %t1705879 = sub nsw i32 %219, %281
  %282 = icmp sgt i32 %t1686, 0
  %283 = sext i32 %209 to i64
  %284 = sext i32 %203 to i64
  %285 = sub nsw i64 %283, %284
  %286 = sext i32 %a391 to i64
  %287 = sext i32 %274 to i64
  %t1711892 = sub nsw i32 %281, %t1686
  %288 = icmp sgt i32 %t1711892, 0
  %289 = icmp sgt i32 %t1705879, 0
  %290 = sub nsw i32 %203, %t1680
  %291 = sext i32 %t1680 to i64
  %292 = sub nsw i64 %291, %284
  %a565 = sub nsw i32 %202, %t1689849
  %293 = icmp sgt i32 %a565, 0
  %294 = select i1 %293, i32 %a565, i32 0
  %t2353 = zext i32 %294 to i64
  %295 = shl nuw nsw i64 %t2353, 4
  %296 = or i64 %295, 6
  %297 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %a568 = select i1 %216, i32 0, i32 %t1688
  %298 = icmp sgt i32 %t1688, %a568
  %299 = select i1 %298, i32 %a568, i32 %t1688
  %t710923 = sub i32 %t1679846, %299
  %300 = sext i32 %t710923 to i64
  %301 = zext i32 %202 to i64
  %302 = sext i32 %t1689849 to i64
  %303 = sub nsw i64 %301, %302
  %304 = sext i32 %t1679846 to i64
  %305 = sub nsw i64 %304, %302
  %t1724925 = sub nsw i32 %t1670852, %t1685
  %306 = icmp sgt i32 %t1724925, 0
  %307 = sext i32 %t1685 to i64
  %t1727936 = sub nsw i32 %a345, %t1670852
  %308 = icmp sgt i32 %t1727936, 0
  %309 = select i1 %216, i32 %230, i32 0
  %310 = add nsw i32 %232, %309
  %a629 = add nsw i32 %310, 32
  %311 = icmp sgt i32 %202, %a629
  %a628 = select i1 %311, i32 %a629, i32 %202
  %312 = icmp sgt i32 %310, %t1691
  %313 = select i1 %312, i32 %t1691, i32 %310
  %b630 = add nsw i32 %313, 37
  %314 = icmp sgt i32 %a628, %b630
  %a627 = select i1 %314, i32 %a628, i32 %b630
  %.not2791 = icmp slt i32 %a627, %247
  %315 = select i1 %.not2791, i32 %b360, i32 %a627
  %factor = mul i32 %299, -2
  %316 = add nsw i32 %t1679846, 1
  %317 = add i32 %316, %factor
  %t716951 = add i32 %317, %315
  %318 = sext i32 %t716951 to i64
  %319 = sub i32 %a391, %t1689849
  %320 = sub nsw i32 %315, %299
  %321 = shl i32 %320, 1
  %322 = add nsw i32 %t1679846, 2
  %323 = sub i32 %322, %299
  %t722981 = add i32 %323, %321
  %324 = sext i32 %t722981 to i64
  %325 = shl nsw i32 %a391, 1
  %326 = sub i32 %325, %t1689849
  %327 = mul i32 %320, 3
  %328 = add nsw i32 %t1679846, 3
  %329 = sub i32 %328, %299
  %t7281011 = add i32 %329, %327
  %330 = sext i32 %t7281011 to i64
  %331 = mul nsw i32 %a391, 3
  %332 = sub i32 %331, %t1689849
  %333 = shl i32 %320, 2
  %334 = add nsw i32 %t1679846, 4
  %335 = sub i32 %334, %299
  %t7341041 = add i32 %335, %333
  %336 = sext i32 %t7341041 to i64
  %337 = shl nsw i32 %a391, 2
  %338 = sub i32 %337, %t1689849
  %339 = mul i32 %320, 6
  %340 = add i32 %339, 6
  %.neg3196 = xor i32 %320, -1
  %341 = add i32 %t710923, %.neg3196
  %t7401071 = add i32 %341, %340
  %342 = sext i32 %t7401071 to i64
  %343 = mul nsw i32 %a391, 6
  %344 = sub nsw i32 %343, %t1689849
  %345 = add i32 %344, %a391.neg
  %346 = add nsw i32 %t1679846, 6
  %347 = sub i32 %346, %299
  %t7461101 = add i32 %347, %339
  %348 = sext i32 %t7461101 to i64
  %t13071105 = sub nsw i32 %202, %299
  %349 = sext i32 %t13071105 to i64
  %350 = sext i32 %205 to i64
  %351 = sext i32 %t1681847 to i64
  %352 = sub nsw i64 %304, %351
  %t17651111 = sub nsw i32 0, %t1681847
  %353 = sext i32 %a565 to i64
  %354 = sext i32 %t17651111 to i64
  %355 = add nsw i32 %320, 1
  %356 = mul nsw i32 %355, 6
  %357 = add i32 %t710923, %355
  %t7621144 = add i32 %357, %356
  %358 = sext i32 %t7621144 to i64
  %359 = add nsw i32 %344, %a391
  %360 = shl i32 %320, 3
  %361 = add nsw i32 %t1679846, 8
  %362 = sub i32 %361, %299
  %t7781187 = add i32 %362, %360
  %363 = sext i32 %t7781187 to i64
  %364 = shl nsw i32 %a391, 3
  %365 = sub i32 %364, %t1689849
  %366 = mul i32 %320, 9
  %367 = add nsw i32 %t1679846, 9
  %368 = sub i32 %367, %299
  %t7941230 = add i32 %368, %366
  %369 = sext i32 %t7941230 to i64
  %370 = mul nsw i32 %a391, 9
  %371 = sub i32 %370, %t1689849
  %372 = mul i32 %320, 10
  %373 = add nsw i32 %t1679846, 10
  %374 = sub i32 %373, %299
  %t8101273 = add i32 %374, %372
  %375 = sext i32 %t8101273 to i64
  %376 = mul nsw i32 %a391, 10
  %377 = sub i32 %376, %t1689849
  %378 = mul i32 %320, 11
  %379 = add nsw i32 %t1679846, 11
  %380 = sub i32 %379, %299
  %t8261316 = add i32 %380, %378
  %381 = sext i32 %t8261316 to i64
  %382 = mul nsw i32 %a391, 11
  %383 = sub i32 %382, %t1689849
  %384 = mul i32 %320, 12
  %385 = add nsw i32 %t1679846, 12
  %386 = sub i32 %385, %299
  %t8421359 = add i32 %386, %384
  %387 = sext i32 %t8421359 to i64
  %388 = mul nsw i32 %a391, 12
  %389 = sub i32 %388, %t1689849
  %390 = mul i32 %320, 13
  %391 = add nsw i32 %t1679846, 13
  %392 = sub i32 %391, %299
  %t8581402 = add i32 %392, %390
  %393 = sext i32 %t8581402 to i64
  %394 = mul nsw i32 %a391, 13
  %395 = sub i32 %394, %t1689849
  %396 = mul i32 %320, 14
  %397 = add nsw i32 %t1679846, 14
  %398 = sub i32 %397, %299
  %t8741445 = add i32 %398, %396
  %399 = sext i32 %t8741445 to i64
  %400 = mul nsw i32 %a391, 14
  %401 = sub i32 %400, %t1689849
  %402 = mul i32 %320, 15
  %403 = add nsw i32 %t1679846, 15
  %404 = sub i32 %403, %299
  %t8901488 = add i32 %404, %402
  %405 = sext i32 %t8901488 to i64
  %406 = mul nsw i32 %a391, 15
  %407 = sub i32 %406, %t1689849
  %408 = shl i32 %320, 4
  %409 = add nsw i32 %t1679846, 16
  %410 = sub i32 %409, %299
  %t9061531 = add i32 %410, %408
  %411 = sext i32 %t9061531 to i64
  %412 = shl nsw i32 %a391, 4
  %413 = sub i32 %412, %t1689849
  %414 = mul i32 %320, 17
  %415 = add nsw i32 %t1679846, 17
  %416 = sub i32 %415, %299
  %t9221574 = add i32 %416, %414
  %417 = sext i32 %t9221574 to i64
  %418 = mul nsw i32 %a391, 17
  %419 = sub i32 %418, %t1689849
  %420 = mul i32 %320, 18
  %421 = add nsw i32 %t1679846, 18
  %422 = sub i32 %421, %299
  %t9381617 = add i32 %422, %420
  %423 = sext i32 %t9381617 to i64
  %424 = mul nsw i32 %a391, 18
  %425 = sub i32 %424, %t1689849
  %426 = mul i32 %320, 19
  %427 = add nsw i32 %t1679846, 19
  %428 = sub i32 %427, %299
  %t9541660 = add i32 %428, %426
  %429 = sext i32 %t9541660 to i64
  %430 = mul nsw i32 %a391, 19
  %431 = sub i32 %430, %t1689849
  %432 = mul i32 %320, 20
  %433 = add nsw i32 %t1679846, 20
  %434 = sub i32 %433, %299
  %t9701703 = add i32 %434, %432
  %435 = sext i32 %t9701703 to i64
  %436 = mul nsw i32 %a391, 20
  %437 = sub i32 %436, %t1689849
  %438 = mul i32 %320, 21
  %439 = add nsw i32 %t1679846, 21
  %440 = sub i32 %439, %299
  %t9861746 = add i32 %440, %438
  %441 = sext i32 %t9861746 to i64
  %442 = mul nsw i32 %a391, 21
  %443 = sub i32 %442, %t1689849
  %444 = mul i32 %320, 22
  %445 = add nsw i32 %t1679846, 22
  %446 = sub i32 %445, %299
  %t10021789 = add i32 %446, %444
  %447 = sext i32 %t10021789 to i64
  %448 = mul nsw i32 %a391, 22
  %449 = sub i32 %448, %t1689849
  %450 = mul i32 %320, 23
  %451 = add nsw i32 %t1679846, 23
  %452 = sub i32 %451, %299
  %t10181832 = add i32 %452, %450
  %453 = sext i32 %t10181832 to i64
  %454 = mul nsw i32 %a391, 23
  %455 = sub i32 %454, %t1689849
  %456 = mul i32 %320, 24
  %457 = add nsw i32 %t1679846, 24
  %458 = sub i32 %457, %299
  %t10341875 = add i32 %458, %456
  %459 = sext i32 %t10341875 to i64
  %460 = mul nsw i32 %a391, 24
  %461 = sub i32 %460, %t1689849
  %462 = mul i32 %320, 25
  %463 = add nsw i32 %t1679846, 25
  %464 = sub i32 %463, %299
  %t10501918 = add i32 %464, %462
  %465 = sext i32 %t10501918 to i64
  %466 = mul nsw i32 %a391, 25
  %467 = sub i32 %466, %t1689849
  %468 = mul i32 %320, 26
  %469 = add nsw i32 %t1679846, 26
  %470 = sub i32 %469, %299
  %t10661961 = add i32 %470, %468
  %471 = sext i32 %t10661961 to i64
  %472 = mul nsw i32 %a391, 26
  %473 = sub i32 %472, %t1689849
  %474 = mul i32 %320, 27
  %475 = add nsw i32 %t1679846, 27
  %476 = sub i32 %475, %299
  %t10822004 = add i32 %476, %474
  %477 = sext i32 %t10822004 to i64
  %478 = mul nsw i32 %a391, 27
  %479 = sub i32 %478, %t1689849
  %480 = mul i32 %320, 28
  %481 = add nsw i32 %t1679846, 28
  %482 = sub i32 %481, %299
  %t10982047 = add i32 %482, %480
  %483 = sext i32 %t10982047 to i64
  %484 = mul nsw i32 %a391, 28
  %485 = sub i32 %484, %t1689849
  %486 = mul i32 %320, 29
  %487 = add nsw i32 %t1679846, 29
  %488 = sub i32 %487, %299
  %t11142090 = add i32 %488, %486
  %489 = sext i32 %t11142090 to i64
  %490 = mul nsw i32 %a391, 29
  %491 = sub i32 %490, %t1689849
  %492 = mul i32 %320, 30
  %493 = add nsw i32 %t1679846, 30
  %494 = sub i32 %493, %299
  %t11302133 = add i32 %494, %492
  %495 = sext i32 %t11302133 to i64
  %496 = mul nsw i32 %a391, 30
  %497 = sub i32 %496, %t1689849
  %498 = mul i32 %320, 31
  %499 = add nsw i32 %t1679846, 31
  %500 = sub i32 %499, %299
  %t11462176 = add i32 %500, %498
  %501 = sext i32 %t11462176 to i64
  %502 = mul nsw i32 %a391, 31
  %503 = sub i32 %502, %t1689849
  %504 = shl i32 %320, 5
  %505 = add nsw i32 %t1679846, 32
  %506 = sub i32 %505, %299
  %t11622219 = add i32 %506, %504
  %507 = sext i32 %t11622219 to i64
  %508 = shl nsw i32 %a391, 5
  %509 = sub i32 %508, %t1689849
  %510 = mul i32 %320, 33
  %511 = add nsw i32 %t1679846, 33
  %512 = sub i32 %511, %299
  %t11782262 = add i32 %512, %510
  %513 = sext i32 %t11782262 to i64
  %514 = mul nsw i32 %a391, 33
  %515 = sub i32 %514, %t1689849
  %516 = mul i32 %320, 34
  %517 = add nsw i32 %t1679846, 34
  %518 = sub i32 %517, %299
  %t11942305 = add i32 %518, %516
  %519 = sext i32 %t11942305 to i64
  %520 = mul nsw i32 %a391, 34
  %521 = sub i32 %520, %t1689849
  %522 = mul i32 %320, 35
  %523 = add nsw i32 %t1679846, 35
  %524 = sub i32 %523, %299
  %t12102348 = add i32 %524, %522
  %525 = sext i32 %t12102348 to i64
  %526 = mul nsw i32 %a391, 35
  %527 = sub i32 %526, %t1689849
  %528 = mul i32 %320, 36
  %529 = add nsw i32 %t1679846, 36
  %530 = sub i32 %529, %299
  %t12262391 = add i32 %530, %528
  %531 = sext i32 %t12262391 to i64
  %532 = mul nsw i32 %a391, 36
  %533 = sub i32 %532, %t1689849
  %534 = mul i32 %320, 37
  %535 = add nsw i32 %t1679846, 37
  %536 = sub i32 %535, %299
  %t12422434 = add i32 %536, %534
  %537 = sext i32 %t12422434 to i64
  %538 = mul nsw i32 %a391, 37
  %539 = sub i32 %538, %t1689849
  %540 = sext i32 %b412 to i64
  %541 = zext i32 %t1686 to i64
  %542 = sext i32 %275 to i64
  %543 = zext i32 %t1711892 to i64
  %544 = sext i32 %211 to i64
  %545 = sext i32 %207 to i64
  %546 = zext i32 %t1724925 to i64
  %547 = add nsw i64 %543, -1
  %xtraiter3762 = and i64 %543, 3
  %548 = icmp ult i64 %547, 3
  %unroll_iter3765 = and i64 %543, 4294967292
  %lcmp.mod3764.not = icmp eq i64 %xtraiter3762, 0
  br label %"for blur_y.s0.y.y854"

then_bb:                                          ; preds = %pseudostack_alloc.exit
  %549 = alloca i8*, i64 %69, align 32
  %550 = bitcast i8** %549 to i16*
  store i8** %549, i8*** %70, align 8
  br label %"produce read_input"

"produce read_input":                             ; preds = %pseudostack_alloc.exit, %then_bb
  %read_input = phi i16* [ %550, %then_bb ], [ %197, %pseudostack_alloc.exit ]
  %a26 = add nsw i32 %blur_y.s0.y.yi.base.s, %5
  %551 = icmp sgt i32 %a26, %11
  %a25 = select i1 %551, i32 %a26, i32 %11
  %b27 = add nsw i32 %a26, 38
  %552 = icmp sgt i32 %b27, %a25
  %read_input.s0.y.prologue = select i1 %552, i32 %a25, i32 %b27
  %553 = icmp sgt i32 %a25, %b30
  %a27 = select i1 %553, i32 %a25, i32 %b30
  %554 = icmp sgt i32 %b27, %a27
  %read_input.s0.y.epilogue = select i1 %554, i32 %a27, i32 %b27
  %a31 = sub i32 %71, %blur_y.s0.y.yi.base.s
  %555 = icmp sgt i32 %a31, 0
  br i1 %555, label %"for read_input.s0.y.rebased.preheader", label %"end for read_input.s0.y.rebased", !prof !386

"for read_input.s0.y.rebased.preheader":          ; preds = %"produce read_input"
  %t1695 = add nsw i32 %72, %blur_y.s0.y.yi.base.s
  %556 = icmp slt i32 %a31, 38
  %a30 = select i1 %556, i32 %a31, i32 38
  %557 = sext i32 %t1695 to i64
  %558 = zext i32 %a30 to i64
  br label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased":                    ; preds = %"for read_input.s0.y.rebased.preheader", %"end for read_input.s0.x.x"
  %indvars.iv = phi i64 [ 0, %"for read_input.s0.y.rebased.preheader" ], [ %indvars.iv.next, %"end for read_input.s0.x.x" ]
  %559 = add nsw i64 %indvars.iv, %557
  %560 = icmp slt i64 %559, %182
  %561 = trunc i64 %559 to i32
  %a33 = select i1 %560, i32 %561, i32 %b36
  %562 = mul nsw i64 %indvars.iv, %82
  %563 = sub nsw i64 %562, %83
  %564 = icmp sgt i32 %a33, 0
  %565 = select i1 %564, i32 %a33, i32 0
  %566 = mul nsw i32 %565, %13
  %t1697 = sub nsw i32 %566, %9
  %567 = insertelement <32 x i32> undef, i32 %t1697, i32 0
  %568 = shufflevector <32 x i32> %567, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %"for read_input.s0.x.x"

"end for read_input.s0.y.rebased":                ; preds = %"end for read_input.s0.x.x", %"produce read_input"
  %569 = icmp sgt i32 %a40, %a26
  %a39 = select i1 %569, i32 %a40, i32 %a26
  %570 = icmp sgt i32 %b27, %a39
  %571 = select i1 %570, i32 %a39, i32 %b27
  %t1699 = sub nsw i32 %571, %read_input.s0.y.prologue
  %572 = icmp sgt i32 %t1699, 0
  br i1 %572, label %"for read_input.s0.y.rebased1.preheader", label %"end for read_input.s0.y.rebased2", !prof !386

"for read_input.s0.y.rebased1.preheader":         ; preds = %"end for read_input.s0.y.rebased"
  %t1702 = sub i32 %read_input.s0.y.prologue, %11
  %573 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a47 = sub nsw i64 %81, %573
  %574 = icmp slt i64 %a47, 38
  %a46 = select i1 %574, i64 %a47, i64 38
  %575 = icmp sgt i64 %a46, 0
  %576 = select i1 %575, i64 %a46, i64 0
  %577 = sext i32 %t1702 to i64
  %578 = zext i32 %t1699 to i64
  br label %"for read_input.s0.y.rebased1"

"for read_input.s0.x.x":                          ; preds = %"for read_input.s0.y.rebased", %"for read_input.s0.x.x"
  %read_input.s0.x.x = phi i32 [ %777, %"for read_input.s0.x.x" ], [ 0, %"for read_input.s0.y.rebased" ]
  %579 = shl nsw i32 %read_input.s0.x.x, 5
  %a35 = add nsw i32 %579, %t1694
  %580 = icmp sgt i32 %b37, %a35
  %read_input.s0.x.v2.base.s = select i1 %580, i32 %a35, i32 %b37
  %581 = add nsw i32 %read_input.s0.x.v2.base.s, -32
  %582 = insertelement <32 x i32> undef, i32 %581, i32 0
  %583 = shufflevector <32 x i32> %582, <32 x i32> undef, <32 x i32> zeroinitializer
  %a37 = add nsw <32 x i32> %583, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %584 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %585 = icmp sgt <8 x i32> %75, %584
  %586 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %587 = icmp sgt <8 x i32> %75, %586
  %588 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %589 = icmp sgt <8 x i32> %75, %588
  %590 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %591 = icmp sgt <8 x i32> %75, %590
  %592 = select <8 x i1> %585, <8 x i32> %584, <8 x i32> %75
  %593 = select <8 x i1> %587, <8 x i32> %586, <8 x i32> %75
  %594 = select <8 x i1> %589, <8 x i32> %588, <8 x i32> %75
  %595 = select <8 x i1> %591, <8 x i32> %590, <8 x i32> %75
  %596 = icmp sgt <8 x i32> %592, %77
  %597 = icmp sgt <8 x i32> %593, %77
  %598 = icmp sgt <8 x i32> %594, %77
  %599 = icmp sgt <8 x i32> %595, %77
  %600 = select <8 x i1> %596, <8 x i32> %592, <8 x i32> %77
  %601 = select <8 x i1> %597, <8 x i32> %593, <8 x i32> %77
  %602 = select <8 x i1> %598, <8 x i32> %594, <8 x i32> %77
  %603 = select <8 x i1> %599, <8 x i32> %595, <8 x i32> %77
  %604 = shufflevector <8 x i32> %600, <8 x i32> %601, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %605 = shufflevector <8 x i32> %602, <8 x i32> %603, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %606 = shufflevector <16 x i32> %604, <16 x i32> %605, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %607 = add nsw <32 x i32> %606, %568
  %608 = extractelement <32 x i32> %607, i32 0
  %609 = sext i32 %608 to i64
  %610 = getelementptr inbounds i16, i16* %64, i64 %609
  %611 = load i16, i16* %610, align 2, !tbaa !393
  %612 = insertelement <32 x i16> undef, i16 %611, i32 0
  %613 = extractelement <32 x i32> %607, i32 1
  %614 = sext i32 %613 to i64
  %615 = getelementptr inbounds i16, i16* %64, i64 %614
  %616 = load i16, i16* %615, align 2, !tbaa !393
  %617 = insertelement <32 x i16> %612, i16 %616, i32 1
  %618 = extractelement <32 x i32> %607, i32 2
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds i16, i16* %64, i64 %619
  %621 = load i16, i16* %620, align 2, !tbaa !393
  %622 = insertelement <32 x i16> %617, i16 %621, i32 2
  %623 = extractelement <32 x i32> %607, i32 3
  %624 = sext i32 %623 to i64
  %625 = getelementptr inbounds i16, i16* %64, i64 %624
  %626 = load i16, i16* %625, align 2, !tbaa !393
  %627 = insertelement <32 x i16> %622, i16 %626, i32 3
  %628 = extractelement <32 x i32> %607, i32 4
  %629 = sext i32 %628 to i64
  %630 = getelementptr inbounds i16, i16* %64, i64 %629
  %631 = load i16, i16* %630, align 2, !tbaa !393
  %632 = insertelement <32 x i16> %627, i16 %631, i32 4
  %633 = extractelement <32 x i32> %607, i32 5
  %634 = sext i32 %633 to i64
  %635 = getelementptr inbounds i16, i16* %64, i64 %634
  %636 = load i16, i16* %635, align 2, !tbaa !393
  %637 = insertelement <32 x i16> %632, i16 %636, i32 5
  %638 = extractelement <32 x i32> %607, i32 6
  %639 = sext i32 %638 to i64
  %640 = getelementptr inbounds i16, i16* %64, i64 %639
  %641 = load i16, i16* %640, align 2, !tbaa !393
  %642 = insertelement <32 x i16> %637, i16 %641, i32 6
  %643 = extractelement <32 x i32> %607, i32 7
  %644 = sext i32 %643 to i64
  %645 = getelementptr inbounds i16, i16* %64, i64 %644
  %646 = load i16, i16* %645, align 2, !tbaa !393
  %647 = insertelement <32 x i16> %642, i16 %646, i32 7
  %648 = extractelement <32 x i32> %607, i32 8
  %649 = sext i32 %648 to i64
  %650 = getelementptr inbounds i16, i16* %64, i64 %649
  %651 = load i16, i16* %650, align 2, !tbaa !393
  %652 = insertelement <32 x i16> %647, i16 %651, i32 8
  %653 = extractelement <32 x i32> %607, i32 9
  %654 = sext i32 %653 to i64
  %655 = getelementptr inbounds i16, i16* %64, i64 %654
  %656 = load i16, i16* %655, align 2, !tbaa !393
  %657 = insertelement <32 x i16> %652, i16 %656, i32 9
  %658 = extractelement <32 x i32> %607, i32 10
  %659 = sext i32 %658 to i64
  %660 = getelementptr inbounds i16, i16* %64, i64 %659
  %661 = load i16, i16* %660, align 2, !tbaa !393
  %662 = insertelement <32 x i16> %657, i16 %661, i32 10
  %663 = extractelement <32 x i32> %607, i32 11
  %664 = sext i32 %663 to i64
  %665 = getelementptr inbounds i16, i16* %64, i64 %664
  %666 = load i16, i16* %665, align 2, !tbaa !393
  %667 = insertelement <32 x i16> %662, i16 %666, i32 11
  %668 = extractelement <32 x i32> %607, i32 12
  %669 = sext i32 %668 to i64
  %670 = getelementptr inbounds i16, i16* %64, i64 %669
  %671 = load i16, i16* %670, align 2, !tbaa !393
  %672 = insertelement <32 x i16> %667, i16 %671, i32 12
  %673 = extractelement <32 x i32> %607, i32 13
  %674 = sext i32 %673 to i64
  %675 = getelementptr inbounds i16, i16* %64, i64 %674
  %676 = load i16, i16* %675, align 2, !tbaa !393
  %677 = insertelement <32 x i16> %672, i16 %676, i32 13
  %678 = extractelement <32 x i32> %607, i32 14
  %679 = sext i32 %678 to i64
  %680 = getelementptr inbounds i16, i16* %64, i64 %679
  %681 = load i16, i16* %680, align 2, !tbaa !393
  %682 = insertelement <32 x i16> %677, i16 %681, i32 14
  %683 = extractelement <32 x i32> %607, i32 15
  %684 = sext i32 %683 to i64
  %685 = getelementptr inbounds i16, i16* %64, i64 %684
  %686 = load i16, i16* %685, align 2, !tbaa !393
  %687 = insertelement <32 x i16> %682, i16 %686, i32 15
  %688 = extractelement <32 x i32> %607, i32 16
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds i16, i16* %64, i64 %689
  %691 = load i16, i16* %690, align 2, !tbaa !393
  %692 = insertelement <32 x i16> %687, i16 %691, i32 16
  %693 = extractelement <32 x i32> %607, i32 17
  %694 = sext i32 %693 to i64
  %695 = getelementptr inbounds i16, i16* %64, i64 %694
  %696 = load i16, i16* %695, align 2, !tbaa !393
  %697 = insertelement <32 x i16> %692, i16 %696, i32 17
  %698 = extractelement <32 x i32> %607, i32 18
  %699 = sext i32 %698 to i64
  %700 = getelementptr inbounds i16, i16* %64, i64 %699
  %701 = load i16, i16* %700, align 2, !tbaa !393
  %702 = insertelement <32 x i16> %697, i16 %701, i32 18
  %703 = extractelement <32 x i32> %607, i32 19
  %704 = sext i32 %703 to i64
  %705 = getelementptr inbounds i16, i16* %64, i64 %704
  %706 = load i16, i16* %705, align 2, !tbaa !393
  %707 = insertelement <32 x i16> %702, i16 %706, i32 19
  %708 = extractelement <32 x i32> %607, i32 20
  %709 = sext i32 %708 to i64
  %710 = getelementptr inbounds i16, i16* %64, i64 %709
  %711 = load i16, i16* %710, align 2, !tbaa !393
  %712 = insertelement <32 x i16> %707, i16 %711, i32 20
  %713 = extractelement <32 x i32> %607, i32 21
  %714 = sext i32 %713 to i64
  %715 = getelementptr inbounds i16, i16* %64, i64 %714
  %716 = load i16, i16* %715, align 2, !tbaa !393
  %717 = insertelement <32 x i16> %712, i16 %716, i32 21
  %718 = extractelement <32 x i32> %607, i32 22
  %719 = sext i32 %718 to i64
  %720 = getelementptr inbounds i16, i16* %64, i64 %719
  %721 = load i16, i16* %720, align 2, !tbaa !393
  %722 = insertelement <32 x i16> %717, i16 %721, i32 22
  %723 = extractelement <32 x i32> %607, i32 23
  %724 = sext i32 %723 to i64
  %725 = getelementptr inbounds i16, i16* %64, i64 %724
  %726 = load i16, i16* %725, align 2, !tbaa !393
  %727 = insertelement <32 x i16> %722, i16 %726, i32 23
  %728 = extractelement <32 x i32> %607, i32 24
  %729 = sext i32 %728 to i64
  %730 = getelementptr inbounds i16, i16* %64, i64 %729
  %731 = load i16, i16* %730, align 2, !tbaa !393
  %732 = insertelement <32 x i16> %727, i16 %731, i32 24
  %733 = extractelement <32 x i32> %607, i32 25
  %734 = sext i32 %733 to i64
  %735 = getelementptr inbounds i16, i16* %64, i64 %734
  %736 = load i16, i16* %735, align 2, !tbaa !393
  %737 = insertelement <32 x i16> %732, i16 %736, i32 25
  %738 = extractelement <32 x i32> %607, i32 26
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds i16, i16* %64, i64 %739
  %741 = load i16, i16* %740, align 2, !tbaa !393
  %742 = insertelement <32 x i16> %737, i16 %741, i32 26
  %743 = extractelement <32 x i32> %607, i32 27
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds i16, i16* %64, i64 %744
  %746 = load i16, i16* %745, align 2, !tbaa !393
  %747 = insertelement <32 x i16> %742, i16 %746, i32 27
  %748 = extractelement <32 x i32> %607, i32 28
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds i16, i16* %64, i64 %749
  %751 = load i16, i16* %750, align 2, !tbaa !393
  %752 = insertelement <32 x i16> %747, i16 %751, i32 28
  %753 = extractelement <32 x i32> %607, i32 29
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds i16, i16* %64, i64 %754
  %756 = load i16, i16* %755, align 2, !tbaa !393
  %757 = insertelement <32 x i16> %752, i16 %756, i32 29
  %758 = extractelement <32 x i32> %607, i32 30
  %759 = sext i32 %758 to i64
  %760 = getelementptr inbounds i16, i16* %64, i64 %759
  %761 = load i16, i16* %760, align 2, !tbaa !393
  %762 = insertelement <32 x i16> %757, i16 %761, i32 30
  %763 = extractelement <32 x i32> %607, i32 31
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds i16, i16* %64, i64 %764
  %766 = load i16, i16* %765, align 2, !tbaa !393
  %767 = insertelement <32 x i16> %762, i16 %766, i32 31
  %768 = shufflevector <32 x i16> %767, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %769 = sext i32 %read_input.s0.x.v2.base.s to i64
  %770 = add nsw i64 %563, %769
  %771 = getelementptr inbounds i16, i16* %read_input, i64 %770
  %772 = getelementptr inbounds i16, i16* %771, i64 -32
  %773 = bitcast i16* %772 to <16 x i16>*
  store <16 x i16> %768, <16 x i16>* %773, align 2, !tbaa !396
  %774 = shufflevector <32 x i16> %767, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %775 = getelementptr inbounds i16, i16* %771, i64 -16
  %776 = bitcast i16* %775 to <16 x i16>*
  store <16 x i16> %774, <16 x i16>* %776, align 2, !tbaa !396
  %777 = add nuw nsw i32 %read_input.s0.x.x, 1
  %.not2893 = icmp eq i32 %777, %20
  br i1 %.not2893, label %"end for read_input.s0.x.x", label %"for read_input.s0.x.x"

"end for read_input.s0.x.x":                      ; preds = %"for read_input.s0.x.x"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not2892 = icmp eq i64 %indvars.iv.next, %558
  br i1 %.not2892, label %"end for read_input.s0.y.rebased", label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased1":                   ; preds = %"for read_input.s0.y.rebased1.preheader", %"end for read_input.s0.x.x.rebased10"
  %indvars.iv3366 = phi i64 [ 0, %"for read_input.s0.y.rebased1.preheader" ], [ %indvars.iv.next3367, %"end for read_input.s0.x.x.rebased10" ]
  %778 = add nsw i64 %indvars.iv3366, %577
  %779 = mul nsw i64 %778, %186
  %780 = sub nsw i64 %779, %187
  br i1 %78, label %"for read_input.s0.x.x4.preheader", label %"end for read_input.s0.x.x5", !prof !386

"for read_input.s0.x.x4.preheader":               ; preds = %"for read_input.s0.y.rebased1"
  %781 = trunc i64 %780 to i32
  %782 = insertelement <32 x i32> undef, i32 %781, i32 0
  %783 = shufflevector <32 x i32> %782, <32 x i32> undef, <32 x i32> zeroinitializer
  %784 = add nuw nsw i64 %576, %indvars.iv3366
  %785 = mul nsw i64 %784, %82
  %786 = sub i64 %785, %83
  br label %"for read_input.s0.x.x4"

"end for read_input.s0.y.rebased2":               ; preds = %"end for read_input.s0.x.x.rebased10", %"end for read_input.s0.y.rebased"
  %a63 = add nsw i32 %blur_y.s0.y.yi.base.s, %86
  %787 = icmp slt i32 %a63, 0
  %a62 = select i1 %787, i32 %a63, i32 0
  %788 = icmp sgt i32 %a62, -38
  %t1719 = sub nsw i32 %read_input.s0.y.epilogue, %11
  br i1 %788, label %"for read_input.s0.y.rebased13.preheader", label %"end for read_input.s0.y.rebased14", !prof !386

"for read_input.s0.y.rebased13.preheader":        ; preds = %"end for read_input.s0.y.rebased2"
  %789 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a70 = sub nsw i64 %88, %789
  %790 = icmp slt i64 %a70, 38
  %a69 = select i1 %790, i64 %a70, i64 38
  %791 = icmp sgt i64 %a69, 0
  %792 = select i1 %791, i64 %a69, i64 0
  %a62.op = add nsw i32 %a62, 37
  %793 = zext i32 %a62.op to i64
  br label %"for read_input.s0.y.rebased13"

"for read_input.s0.x.x4":                         ; preds = %"for read_input.s0.x.x4.preheader", %"for read_input.s0.x.x4"
  %read_input.s0.x.x6 = phi i32 [ %992, %"for read_input.s0.x.x4" ], [ 0, %"for read_input.s0.x.x4.preheader" ]
  %794 = shl nsw i32 %read_input.s0.x.x6, 5
  %a43 = add nsw i32 %794, %t1694
  %795 = icmp sgt i32 %b37, %a43
  %read_input.s0.x.v2.base.s7 = select i1 %795, i32 %a43, i32 %b37
  %796 = add nsw i32 %read_input.s0.x.v2.base.s7, -32
  %797 = insertelement <32 x i32> undef, i32 %796, i32 0
  %798 = shufflevector <32 x i32> %797, <32 x i32> undef, <32 x i32> zeroinitializer
  %a45 = add nsw <32 x i32> %798, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %799 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %800 = icmp sgt <8 x i32> %75, %799
  %801 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %802 = icmp sgt <8 x i32> %75, %801
  %803 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %804 = icmp sgt <8 x i32> %75, %803
  %805 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %806 = icmp sgt <8 x i32> %75, %805
  %807 = select <8 x i1> %800, <8 x i32> %799, <8 x i32> %75
  %808 = select <8 x i1> %802, <8 x i32> %801, <8 x i32> %75
  %809 = select <8 x i1> %804, <8 x i32> %803, <8 x i32> %75
  %810 = select <8 x i1> %806, <8 x i32> %805, <8 x i32> %75
  %811 = icmp sgt <8 x i32> %807, %77
  %812 = icmp sgt <8 x i32> %808, %77
  %813 = icmp sgt <8 x i32> %809, %77
  %814 = icmp sgt <8 x i32> %810, %77
  %815 = select <8 x i1> %811, <8 x i32> %807, <8 x i32> %77
  %816 = select <8 x i1> %812, <8 x i32> %808, <8 x i32> %77
  %817 = select <8 x i1> %813, <8 x i32> %809, <8 x i32> %77
  %818 = select <8 x i1> %814, <8 x i32> %810, <8 x i32> %77
  %819 = shufflevector <8 x i32> %815, <8 x i32> %816, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %820 = shufflevector <8 x i32> %817, <8 x i32> %818, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %821 = shufflevector <16 x i32> %819, <16 x i32> %820, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %822 = add nsw <32 x i32> %821, %783
  %823 = extractelement <32 x i32> %822, i32 0
  %824 = sext i32 %823 to i64
  %825 = getelementptr inbounds i16, i16* %64, i64 %824
  %826 = load i16, i16* %825, align 2, !tbaa !393
  %827 = insertelement <32 x i16> undef, i16 %826, i32 0
  %828 = extractelement <32 x i32> %822, i32 1
  %829 = sext i32 %828 to i64
  %830 = getelementptr inbounds i16, i16* %64, i64 %829
  %831 = load i16, i16* %830, align 2, !tbaa !393
  %832 = insertelement <32 x i16> %827, i16 %831, i32 1
  %833 = extractelement <32 x i32> %822, i32 2
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds i16, i16* %64, i64 %834
  %836 = load i16, i16* %835, align 2, !tbaa !393
  %837 = insertelement <32 x i16> %832, i16 %836, i32 2
  %838 = extractelement <32 x i32> %822, i32 3
  %839 = sext i32 %838 to i64
  %840 = getelementptr inbounds i16, i16* %64, i64 %839
  %841 = load i16, i16* %840, align 2, !tbaa !393
  %842 = insertelement <32 x i16> %837, i16 %841, i32 3
  %843 = extractelement <32 x i32> %822, i32 4
  %844 = sext i32 %843 to i64
  %845 = getelementptr inbounds i16, i16* %64, i64 %844
  %846 = load i16, i16* %845, align 2, !tbaa !393
  %847 = insertelement <32 x i16> %842, i16 %846, i32 4
  %848 = extractelement <32 x i32> %822, i32 5
  %849 = sext i32 %848 to i64
  %850 = getelementptr inbounds i16, i16* %64, i64 %849
  %851 = load i16, i16* %850, align 2, !tbaa !393
  %852 = insertelement <32 x i16> %847, i16 %851, i32 5
  %853 = extractelement <32 x i32> %822, i32 6
  %854 = sext i32 %853 to i64
  %855 = getelementptr inbounds i16, i16* %64, i64 %854
  %856 = load i16, i16* %855, align 2, !tbaa !393
  %857 = insertelement <32 x i16> %852, i16 %856, i32 6
  %858 = extractelement <32 x i32> %822, i32 7
  %859 = sext i32 %858 to i64
  %860 = getelementptr inbounds i16, i16* %64, i64 %859
  %861 = load i16, i16* %860, align 2, !tbaa !393
  %862 = insertelement <32 x i16> %857, i16 %861, i32 7
  %863 = extractelement <32 x i32> %822, i32 8
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds i16, i16* %64, i64 %864
  %866 = load i16, i16* %865, align 2, !tbaa !393
  %867 = insertelement <32 x i16> %862, i16 %866, i32 8
  %868 = extractelement <32 x i32> %822, i32 9
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds i16, i16* %64, i64 %869
  %871 = load i16, i16* %870, align 2, !tbaa !393
  %872 = insertelement <32 x i16> %867, i16 %871, i32 9
  %873 = extractelement <32 x i32> %822, i32 10
  %874 = sext i32 %873 to i64
  %875 = getelementptr inbounds i16, i16* %64, i64 %874
  %876 = load i16, i16* %875, align 2, !tbaa !393
  %877 = insertelement <32 x i16> %872, i16 %876, i32 10
  %878 = extractelement <32 x i32> %822, i32 11
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds i16, i16* %64, i64 %879
  %881 = load i16, i16* %880, align 2, !tbaa !393
  %882 = insertelement <32 x i16> %877, i16 %881, i32 11
  %883 = extractelement <32 x i32> %822, i32 12
  %884 = sext i32 %883 to i64
  %885 = getelementptr inbounds i16, i16* %64, i64 %884
  %886 = load i16, i16* %885, align 2, !tbaa !393
  %887 = insertelement <32 x i16> %882, i16 %886, i32 12
  %888 = extractelement <32 x i32> %822, i32 13
  %889 = sext i32 %888 to i64
  %890 = getelementptr inbounds i16, i16* %64, i64 %889
  %891 = load i16, i16* %890, align 2, !tbaa !393
  %892 = insertelement <32 x i16> %887, i16 %891, i32 13
  %893 = extractelement <32 x i32> %822, i32 14
  %894 = sext i32 %893 to i64
  %895 = getelementptr inbounds i16, i16* %64, i64 %894
  %896 = load i16, i16* %895, align 2, !tbaa !393
  %897 = insertelement <32 x i16> %892, i16 %896, i32 14
  %898 = extractelement <32 x i32> %822, i32 15
  %899 = sext i32 %898 to i64
  %900 = getelementptr inbounds i16, i16* %64, i64 %899
  %901 = load i16, i16* %900, align 2, !tbaa !393
  %902 = insertelement <32 x i16> %897, i16 %901, i32 15
  %903 = extractelement <32 x i32> %822, i32 16
  %904 = sext i32 %903 to i64
  %905 = getelementptr inbounds i16, i16* %64, i64 %904
  %906 = load i16, i16* %905, align 2, !tbaa !393
  %907 = insertelement <32 x i16> %902, i16 %906, i32 16
  %908 = extractelement <32 x i32> %822, i32 17
  %909 = sext i32 %908 to i64
  %910 = getelementptr inbounds i16, i16* %64, i64 %909
  %911 = load i16, i16* %910, align 2, !tbaa !393
  %912 = insertelement <32 x i16> %907, i16 %911, i32 17
  %913 = extractelement <32 x i32> %822, i32 18
  %914 = sext i32 %913 to i64
  %915 = getelementptr inbounds i16, i16* %64, i64 %914
  %916 = load i16, i16* %915, align 2, !tbaa !393
  %917 = insertelement <32 x i16> %912, i16 %916, i32 18
  %918 = extractelement <32 x i32> %822, i32 19
  %919 = sext i32 %918 to i64
  %920 = getelementptr inbounds i16, i16* %64, i64 %919
  %921 = load i16, i16* %920, align 2, !tbaa !393
  %922 = insertelement <32 x i16> %917, i16 %921, i32 19
  %923 = extractelement <32 x i32> %822, i32 20
  %924 = sext i32 %923 to i64
  %925 = getelementptr inbounds i16, i16* %64, i64 %924
  %926 = load i16, i16* %925, align 2, !tbaa !393
  %927 = insertelement <32 x i16> %922, i16 %926, i32 20
  %928 = extractelement <32 x i32> %822, i32 21
  %929 = sext i32 %928 to i64
  %930 = getelementptr inbounds i16, i16* %64, i64 %929
  %931 = load i16, i16* %930, align 2, !tbaa !393
  %932 = insertelement <32 x i16> %927, i16 %931, i32 21
  %933 = extractelement <32 x i32> %822, i32 22
  %934 = sext i32 %933 to i64
  %935 = getelementptr inbounds i16, i16* %64, i64 %934
  %936 = load i16, i16* %935, align 2, !tbaa !393
  %937 = insertelement <32 x i16> %932, i16 %936, i32 22
  %938 = extractelement <32 x i32> %822, i32 23
  %939 = sext i32 %938 to i64
  %940 = getelementptr inbounds i16, i16* %64, i64 %939
  %941 = load i16, i16* %940, align 2, !tbaa !393
  %942 = insertelement <32 x i16> %937, i16 %941, i32 23
  %943 = extractelement <32 x i32> %822, i32 24
  %944 = sext i32 %943 to i64
  %945 = getelementptr inbounds i16, i16* %64, i64 %944
  %946 = load i16, i16* %945, align 2, !tbaa !393
  %947 = insertelement <32 x i16> %942, i16 %946, i32 24
  %948 = extractelement <32 x i32> %822, i32 25
  %949 = sext i32 %948 to i64
  %950 = getelementptr inbounds i16, i16* %64, i64 %949
  %951 = load i16, i16* %950, align 2, !tbaa !393
  %952 = insertelement <32 x i16> %947, i16 %951, i32 25
  %953 = extractelement <32 x i32> %822, i32 26
  %954 = sext i32 %953 to i64
  %955 = getelementptr inbounds i16, i16* %64, i64 %954
  %956 = load i16, i16* %955, align 2, !tbaa !393
  %957 = insertelement <32 x i16> %952, i16 %956, i32 26
  %958 = extractelement <32 x i32> %822, i32 27
  %959 = sext i32 %958 to i64
  %960 = getelementptr inbounds i16, i16* %64, i64 %959
  %961 = load i16, i16* %960, align 2, !tbaa !393
  %962 = insertelement <32 x i16> %957, i16 %961, i32 27
  %963 = extractelement <32 x i32> %822, i32 28
  %964 = sext i32 %963 to i64
  %965 = getelementptr inbounds i16, i16* %64, i64 %964
  %966 = load i16, i16* %965, align 2, !tbaa !393
  %967 = insertelement <32 x i16> %962, i16 %966, i32 28
  %968 = extractelement <32 x i32> %822, i32 29
  %969 = sext i32 %968 to i64
  %970 = getelementptr inbounds i16, i16* %64, i64 %969
  %971 = load i16, i16* %970, align 2, !tbaa !393
  %972 = insertelement <32 x i16> %967, i16 %971, i32 29
  %973 = extractelement <32 x i32> %822, i32 30
  %974 = sext i32 %973 to i64
  %975 = getelementptr inbounds i16, i16* %64, i64 %974
  %976 = load i16, i16* %975, align 2, !tbaa !393
  %977 = insertelement <32 x i16> %972, i16 %976, i32 30
  %978 = extractelement <32 x i32> %822, i32 31
  %979 = sext i32 %978 to i64
  %980 = getelementptr inbounds i16, i16* %64, i64 %979
  %981 = load i16, i16* %980, align 2, !tbaa !393
  %982 = insertelement <32 x i16> %977, i16 %981, i32 31
  %983 = shufflevector <32 x i16> %982, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %984 = sext i32 %read_input.s0.x.v2.base.s7 to i64
  %985 = add nsw i64 %786, %984
  %986 = getelementptr inbounds i16, i16* %read_input, i64 %985
  %987 = getelementptr inbounds i16, i16* %986, i64 -32
  %988 = bitcast i16* %987 to <16 x i16>*
  store <16 x i16> %983, <16 x i16>* %988, align 2, !tbaa !396
  %989 = shufflevector <32 x i16> %982, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %990 = getelementptr inbounds i16, i16* %986, i64 -16
  %991 = bitcast i16* %990 to <16 x i16>*
  store <16 x i16> %989, <16 x i16>* %991, align 2, !tbaa !396
  %992 = add nuw nsw i32 %read_input.s0.x.x6, 1
  %.not2890 = icmp eq i32 %992, %b18
  br i1 %.not2890, label %"end for read_input.s0.x.x5", label %"for read_input.s0.x.x4"

"end for read_input.s0.x.x5":                     ; preds = %"for read_input.s0.x.x4", %"for read_input.s0.y.rebased1"
  br i1 %84, label %"for read_input.s0.x.x.rebased.preheader", label %"end for read_input.s0.x.x.rebased", !prof !386

"for read_input.s0.x.x.rebased.preheader":        ; preds = %"end for read_input.s0.x.x5"
  %993 = add nuw nsw i64 %576, %indvars.iv3366
  %994 = mul nsw i64 %993, %82
  %995 = sub i64 %994, %83
  br i1 %190, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"for read_input.s0.x.x.rebased":                  ; preds = %"for read_input.s0.x.x.rebased.preheader", %"for read_input.s0.x.x.rebased"
  %indvars.iv3363 = phi i64 [ %indvars.iv.next3364.3, %"for read_input.s0.x.x.rebased" ], [ 0, %"for read_input.s0.x.x.rebased.preheader" ]
  %niter = phi i64 [ %niter.nsub.3, %"for read_input.s0.x.x.rebased" ], [ %unroll_iter, %"for read_input.s0.x.x.rebased.preheader" ]
  %996 = add nuw nsw i64 %indvars.iv3363, %183
  %997 = shl nsw i64 %996, 5
  %998 = add nsw i64 %997, %184
  %999 = add nsw i64 %998, %780
  %1000 = getelementptr inbounds i16, i16* %64, i64 %999
  %1001 = getelementptr inbounds i16, i16* %1000, i64 -32
  %1002 = bitcast i16* %1001 to <16 x i16>*
  %1003 = load <16 x i16>, <16 x i16>* %1002, align 2, !tbaa !393
  %1004 = getelementptr inbounds i16, i16* %1000, i64 -16
  %1005 = bitcast i16* %1004 to <16 x i16>*
  %1006 = load <16 x i16>, <16 x i16>* %1005, align 2, !tbaa !393
  %1007 = add nsw i64 %995, %998
  %1008 = getelementptr inbounds i16, i16* %read_input, i64 %1007
  %1009 = getelementptr inbounds i16, i16* %1008, i64 -32
  %1010 = bitcast i16* %1009 to <16 x i16>*
  store <16 x i16> %1003, <16 x i16>* %1010, align 2, !tbaa !396
  %1011 = getelementptr inbounds i16, i16* %1008, i64 -16
  %1012 = bitcast i16* %1011 to <16 x i16>*
  store <16 x i16> %1006, <16 x i16>* %1012, align 2, !tbaa !396
  %indvars.iv.next3364 = or i64 %indvars.iv3363, 1
  %1013 = add nuw nsw i64 %indvars.iv.next3364, %183
  %1014 = shl nsw i64 %1013, 5
  %1015 = add nsw i64 %1014, %184
  %1016 = add nsw i64 %1015, %780
  %1017 = getelementptr inbounds i16, i16* %64, i64 %1016
  %1018 = getelementptr inbounds i16, i16* %1017, i64 -32
  %1019 = bitcast i16* %1018 to <16 x i16>*
  %1020 = load <16 x i16>, <16 x i16>* %1019, align 2, !tbaa !393
  %1021 = getelementptr inbounds i16, i16* %1017, i64 -16
  %1022 = bitcast i16* %1021 to <16 x i16>*
  %1023 = load <16 x i16>, <16 x i16>* %1022, align 2, !tbaa !393
  %1024 = add nsw i64 %995, %1015
  %1025 = getelementptr inbounds i16, i16* %read_input, i64 %1024
  %1026 = getelementptr inbounds i16, i16* %1025, i64 -32
  %1027 = bitcast i16* %1026 to <16 x i16>*
  store <16 x i16> %1020, <16 x i16>* %1027, align 2, !tbaa !396
  %1028 = getelementptr inbounds i16, i16* %1025, i64 -16
  %1029 = bitcast i16* %1028 to <16 x i16>*
  store <16 x i16> %1023, <16 x i16>* %1029, align 2, !tbaa !396
  %indvars.iv.next3364.1 = or i64 %indvars.iv3363, 2
  %1030 = add nuw nsw i64 %indvars.iv.next3364.1, %183
  %1031 = shl nsw i64 %1030, 5
  %1032 = add nsw i64 %1031, %184
  %1033 = add nsw i64 %1032, %780
  %1034 = getelementptr inbounds i16, i16* %64, i64 %1033
  %1035 = getelementptr inbounds i16, i16* %1034, i64 -32
  %1036 = bitcast i16* %1035 to <16 x i16>*
  %1037 = load <16 x i16>, <16 x i16>* %1036, align 2, !tbaa !393
  %1038 = getelementptr inbounds i16, i16* %1034, i64 -16
  %1039 = bitcast i16* %1038 to <16 x i16>*
  %1040 = load <16 x i16>, <16 x i16>* %1039, align 2, !tbaa !393
  %1041 = add nsw i64 %995, %1032
  %1042 = getelementptr inbounds i16, i16* %read_input, i64 %1041
  %1043 = getelementptr inbounds i16, i16* %1042, i64 -32
  %1044 = bitcast i16* %1043 to <16 x i16>*
  store <16 x i16> %1037, <16 x i16>* %1044, align 2, !tbaa !396
  %1045 = getelementptr inbounds i16, i16* %1042, i64 -16
  %1046 = bitcast i16* %1045 to <16 x i16>*
  store <16 x i16> %1040, <16 x i16>* %1046, align 2, !tbaa !396
  %indvars.iv.next3364.2 = or i64 %indvars.iv3363, 3
  %1047 = add nuw nsw i64 %indvars.iv.next3364.2, %183
  %1048 = shl nsw i64 %1047, 5
  %1049 = add nsw i64 %1048, %184
  %1050 = add nsw i64 %1049, %780
  %1051 = getelementptr inbounds i16, i16* %64, i64 %1050
  %1052 = getelementptr inbounds i16, i16* %1051, i64 -32
  %1053 = bitcast i16* %1052 to <16 x i16>*
  %1054 = load <16 x i16>, <16 x i16>* %1053, align 2, !tbaa !393
  %1055 = getelementptr inbounds i16, i16* %1051, i64 -16
  %1056 = bitcast i16* %1055 to <16 x i16>*
  %1057 = load <16 x i16>, <16 x i16>* %1056, align 2, !tbaa !393
  %1058 = add nsw i64 %995, %1049
  %1059 = getelementptr inbounds i16, i16* %read_input, i64 %1058
  %1060 = getelementptr inbounds i16, i16* %1059, i64 -32
  %1061 = bitcast i16* %1060 to <16 x i16>*
  store <16 x i16> %1054, <16 x i16>* %1061, align 2, !tbaa !396
  %1062 = getelementptr inbounds i16, i16* %1059, i64 -16
  %1063 = bitcast i16* %1062 to <16 x i16>*
  store <16 x i16> %1057, <16 x i16>* %1063, align 2, !tbaa !396
  %indvars.iv.next3364.3 = add nuw nsw i64 %indvars.iv3363, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased", %"for read_input.s0.x.x.rebased.preheader"
  %indvars.iv3363.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3364.3, %"for read_input.s0.x.x.rebased" ]
  br i1 %lcmp.mod.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil"

"for read_input.s0.x.x.rebased.epil":             ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil"
  %indvars.iv3363.epil = phi i64 [ %indvars.iv.next3364.epil, %"for read_input.s0.x.x.rebased.epil" ], [ %indvars.iv3363.unr, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %epil.iter = phi i64 [ %epil.iter.sub, %"for read_input.s0.x.x.rebased.epil" ], [ %xtraiter, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %1064 = add nuw nsw i64 %indvars.iv3363.epil, %183
  %1065 = shl nsw i64 %1064, 5
  %1066 = add nsw i64 %1065, %184
  %1067 = add nsw i64 %1066, %780
  %1068 = getelementptr inbounds i16, i16* %64, i64 %1067
  %1069 = getelementptr inbounds i16, i16* %1068, i64 -32
  %1070 = bitcast i16* %1069 to <16 x i16>*
  %1071 = load <16 x i16>, <16 x i16>* %1070, align 2, !tbaa !393
  %1072 = getelementptr inbounds i16, i16* %1068, i64 -16
  %1073 = bitcast i16* %1072 to <16 x i16>*
  %1074 = load <16 x i16>, <16 x i16>* %1073, align 2, !tbaa !393
  %1075 = add nsw i64 %995, %1066
  %1076 = getelementptr inbounds i16, i16* %read_input, i64 %1075
  %1077 = getelementptr inbounds i16, i16* %1076, i64 -32
  %1078 = bitcast i16* %1077 to <16 x i16>*
  store <16 x i16> %1071, <16 x i16>* %1078, align 2, !tbaa !396
  %1079 = getelementptr inbounds i16, i16* %1076, i64 -16
  %1080 = bitcast i16* %1079 to <16 x i16>*
  store <16 x i16> %1074, <16 x i16>* %1080, align 2, !tbaa !396
  %indvars.iv.next3364.epil = add nuw nsw i64 %indvars.iv3363.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil", !llvm.loop !398

"end for read_input.s0.x.x.rebased":              ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil", %"end for read_input.s0.x.x5"
  br i1 %85, label %"for read_input.s0.x.x.rebased9.preheader", label %"end for read_input.s0.x.x.rebased10", !prof !386

"for read_input.s0.x.x.rebased9.preheader":       ; preds = %"end for read_input.s0.x.x.rebased"
  %1081 = trunc i64 %780 to i32
  %1082 = insertelement <32 x i32> undef, i32 %1081, i32 0
  %1083 = shufflevector <32 x i32> %1082, <32 x i32> undef, <32 x i32> zeroinitializer
  %1084 = add nuw nsw i64 %576, %indvars.iv3366
  %1085 = mul nsw i64 %1084, %82
  %1086 = sub i64 %1085, %83
  br label %"for read_input.s0.x.x.rebased9"

"for read_input.s0.x.x.rebased9":                 ; preds = %"for read_input.s0.x.x.rebased9.preheader", %"for read_input.s0.x.x.rebased9"
  %read_input.s0.x.x.rebased11 = phi i32 [ %1286, %"for read_input.s0.x.x.rebased9" ], [ 0, %"for read_input.s0.x.x.rebased9.preheader" ]
  %1087 = add nsw i32 %read_input.s0.x.x.rebased11, %t1668
  %1088 = shl nsw i32 %1087, 5
  %a54 = add nsw i32 %1088, %t1694
  %1089 = icmp sgt i32 %b37, %a54
  %read_input.s0.x.v2.base.s12 = select i1 %1089, i32 %a54, i32 %b37
  %1090 = add nsw i32 %read_input.s0.x.v2.base.s12, -32
  %1091 = insertelement <32 x i32> undef, i32 %1090, i32 0
  %1092 = shufflevector <32 x i32> %1091, <32 x i32> undef, <32 x i32> zeroinitializer
  %a56 = add nsw <32 x i32> %1092, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1093 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1094 = icmp sgt <8 x i32> %75, %1093
  %1095 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1096 = icmp sgt <8 x i32> %75, %1095
  %1097 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1098 = icmp sgt <8 x i32> %75, %1097
  %1099 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1100 = icmp sgt <8 x i32> %75, %1099
  %1101 = select <8 x i1> %1094, <8 x i32> %1093, <8 x i32> %75
  %1102 = select <8 x i1> %1096, <8 x i32> %1095, <8 x i32> %75
  %1103 = select <8 x i1> %1098, <8 x i32> %1097, <8 x i32> %75
  %1104 = select <8 x i1> %1100, <8 x i32> %1099, <8 x i32> %75
  %1105 = icmp sgt <8 x i32> %1101, %77
  %1106 = icmp sgt <8 x i32> %1102, %77
  %1107 = icmp sgt <8 x i32> %1103, %77
  %1108 = icmp sgt <8 x i32> %1104, %77
  %1109 = select <8 x i1> %1105, <8 x i32> %1101, <8 x i32> %77
  %1110 = select <8 x i1> %1106, <8 x i32> %1102, <8 x i32> %77
  %1111 = select <8 x i1> %1107, <8 x i32> %1103, <8 x i32> %77
  %1112 = select <8 x i1> %1108, <8 x i32> %1104, <8 x i32> %77
  %1113 = shufflevector <8 x i32> %1109, <8 x i32> %1110, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1114 = shufflevector <8 x i32> %1111, <8 x i32> %1112, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1115 = shufflevector <16 x i32> %1113, <16 x i32> %1114, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1116 = add nsw <32 x i32> %1115, %1083
  %1117 = extractelement <32 x i32> %1116, i32 0
  %1118 = sext i32 %1117 to i64
  %1119 = getelementptr inbounds i16, i16* %64, i64 %1118
  %1120 = load i16, i16* %1119, align 2, !tbaa !393
  %1121 = insertelement <32 x i16> undef, i16 %1120, i32 0
  %1122 = extractelement <32 x i32> %1116, i32 1
  %1123 = sext i32 %1122 to i64
  %1124 = getelementptr inbounds i16, i16* %64, i64 %1123
  %1125 = load i16, i16* %1124, align 2, !tbaa !393
  %1126 = insertelement <32 x i16> %1121, i16 %1125, i32 1
  %1127 = extractelement <32 x i32> %1116, i32 2
  %1128 = sext i32 %1127 to i64
  %1129 = getelementptr inbounds i16, i16* %64, i64 %1128
  %1130 = load i16, i16* %1129, align 2, !tbaa !393
  %1131 = insertelement <32 x i16> %1126, i16 %1130, i32 2
  %1132 = extractelement <32 x i32> %1116, i32 3
  %1133 = sext i32 %1132 to i64
  %1134 = getelementptr inbounds i16, i16* %64, i64 %1133
  %1135 = load i16, i16* %1134, align 2, !tbaa !393
  %1136 = insertelement <32 x i16> %1131, i16 %1135, i32 3
  %1137 = extractelement <32 x i32> %1116, i32 4
  %1138 = sext i32 %1137 to i64
  %1139 = getelementptr inbounds i16, i16* %64, i64 %1138
  %1140 = load i16, i16* %1139, align 2, !tbaa !393
  %1141 = insertelement <32 x i16> %1136, i16 %1140, i32 4
  %1142 = extractelement <32 x i32> %1116, i32 5
  %1143 = sext i32 %1142 to i64
  %1144 = getelementptr inbounds i16, i16* %64, i64 %1143
  %1145 = load i16, i16* %1144, align 2, !tbaa !393
  %1146 = insertelement <32 x i16> %1141, i16 %1145, i32 5
  %1147 = extractelement <32 x i32> %1116, i32 6
  %1148 = sext i32 %1147 to i64
  %1149 = getelementptr inbounds i16, i16* %64, i64 %1148
  %1150 = load i16, i16* %1149, align 2, !tbaa !393
  %1151 = insertelement <32 x i16> %1146, i16 %1150, i32 6
  %1152 = extractelement <32 x i32> %1116, i32 7
  %1153 = sext i32 %1152 to i64
  %1154 = getelementptr inbounds i16, i16* %64, i64 %1153
  %1155 = load i16, i16* %1154, align 2, !tbaa !393
  %1156 = insertelement <32 x i16> %1151, i16 %1155, i32 7
  %1157 = extractelement <32 x i32> %1116, i32 8
  %1158 = sext i32 %1157 to i64
  %1159 = getelementptr inbounds i16, i16* %64, i64 %1158
  %1160 = load i16, i16* %1159, align 2, !tbaa !393
  %1161 = insertelement <32 x i16> %1156, i16 %1160, i32 8
  %1162 = extractelement <32 x i32> %1116, i32 9
  %1163 = sext i32 %1162 to i64
  %1164 = getelementptr inbounds i16, i16* %64, i64 %1163
  %1165 = load i16, i16* %1164, align 2, !tbaa !393
  %1166 = insertelement <32 x i16> %1161, i16 %1165, i32 9
  %1167 = extractelement <32 x i32> %1116, i32 10
  %1168 = sext i32 %1167 to i64
  %1169 = getelementptr inbounds i16, i16* %64, i64 %1168
  %1170 = load i16, i16* %1169, align 2, !tbaa !393
  %1171 = insertelement <32 x i16> %1166, i16 %1170, i32 10
  %1172 = extractelement <32 x i32> %1116, i32 11
  %1173 = sext i32 %1172 to i64
  %1174 = getelementptr inbounds i16, i16* %64, i64 %1173
  %1175 = load i16, i16* %1174, align 2, !tbaa !393
  %1176 = insertelement <32 x i16> %1171, i16 %1175, i32 11
  %1177 = extractelement <32 x i32> %1116, i32 12
  %1178 = sext i32 %1177 to i64
  %1179 = getelementptr inbounds i16, i16* %64, i64 %1178
  %1180 = load i16, i16* %1179, align 2, !tbaa !393
  %1181 = insertelement <32 x i16> %1176, i16 %1180, i32 12
  %1182 = extractelement <32 x i32> %1116, i32 13
  %1183 = sext i32 %1182 to i64
  %1184 = getelementptr inbounds i16, i16* %64, i64 %1183
  %1185 = load i16, i16* %1184, align 2, !tbaa !393
  %1186 = insertelement <32 x i16> %1181, i16 %1185, i32 13
  %1187 = extractelement <32 x i32> %1116, i32 14
  %1188 = sext i32 %1187 to i64
  %1189 = getelementptr inbounds i16, i16* %64, i64 %1188
  %1190 = load i16, i16* %1189, align 2, !tbaa !393
  %1191 = insertelement <32 x i16> %1186, i16 %1190, i32 14
  %1192 = extractelement <32 x i32> %1116, i32 15
  %1193 = sext i32 %1192 to i64
  %1194 = getelementptr inbounds i16, i16* %64, i64 %1193
  %1195 = load i16, i16* %1194, align 2, !tbaa !393
  %1196 = insertelement <32 x i16> %1191, i16 %1195, i32 15
  %1197 = extractelement <32 x i32> %1116, i32 16
  %1198 = sext i32 %1197 to i64
  %1199 = getelementptr inbounds i16, i16* %64, i64 %1198
  %1200 = load i16, i16* %1199, align 2, !tbaa !393
  %1201 = insertelement <32 x i16> %1196, i16 %1200, i32 16
  %1202 = extractelement <32 x i32> %1116, i32 17
  %1203 = sext i32 %1202 to i64
  %1204 = getelementptr inbounds i16, i16* %64, i64 %1203
  %1205 = load i16, i16* %1204, align 2, !tbaa !393
  %1206 = insertelement <32 x i16> %1201, i16 %1205, i32 17
  %1207 = extractelement <32 x i32> %1116, i32 18
  %1208 = sext i32 %1207 to i64
  %1209 = getelementptr inbounds i16, i16* %64, i64 %1208
  %1210 = load i16, i16* %1209, align 2, !tbaa !393
  %1211 = insertelement <32 x i16> %1206, i16 %1210, i32 18
  %1212 = extractelement <32 x i32> %1116, i32 19
  %1213 = sext i32 %1212 to i64
  %1214 = getelementptr inbounds i16, i16* %64, i64 %1213
  %1215 = load i16, i16* %1214, align 2, !tbaa !393
  %1216 = insertelement <32 x i16> %1211, i16 %1215, i32 19
  %1217 = extractelement <32 x i32> %1116, i32 20
  %1218 = sext i32 %1217 to i64
  %1219 = getelementptr inbounds i16, i16* %64, i64 %1218
  %1220 = load i16, i16* %1219, align 2, !tbaa !393
  %1221 = insertelement <32 x i16> %1216, i16 %1220, i32 20
  %1222 = extractelement <32 x i32> %1116, i32 21
  %1223 = sext i32 %1222 to i64
  %1224 = getelementptr inbounds i16, i16* %64, i64 %1223
  %1225 = load i16, i16* %1224, align 2, !tbaa !393
  %1226 = insertelement <32 x i16> %1221, i16 %1225, i32 21
  %1227 = extractelement <32 x i32> %1116, i32 22
  %1228 = sext i32 %1227 to i64
  %1229 = getelementptr inbounds i16, i16* %64, i64 %1228
  %1230 = load i16, i16* %1229, align 2, !tbaa !393
  %1231 = insertelement <32 x i16> %1226, i16 %1230, i32 22
  %1232 = extractelement <32 x i32> %1116, i32 23
  %1233 = sext i32 %1232 to i64
  %1234 = getelementptr inbounds i16, i16* %64, i64 %1233
  %1235 = load i16, i16* %1234, align 2, !tbaa !393
  %1236 = insertelement <32 x i16> %1231, i16 %1235, i32 23
  %1237 = extractelement <32 x i32> %1116, i32 24
  %1238 = sext i32 %1237 to i64
  %1239 = getelementptr inbounds i16, i16* %64, i64 %1238
  %1240 = load i16, i16* %1239, align 2, !tbaa !393
  %1241 = insertelement <32 x i16> %1236, i16 %1240, i32 24
  %1242 = extractelement <32 x i32> %1116, i32 25
  %1243 = sext i32 %1242 to i64
  %1244 = getelementptr inbounds i16, i16* %64, i64 %1243
  %1245 = load i16, i16* %1244, align 2, !tbaa !393
  %1246 = insertelement <32 x i16> %1241, i16 %1245, i32 25
  %1247 = extractelement <32 x i32> %1116, i32 26
  %1248 = sext i32 %1247 to i64
  %1249 = getelementptr inbounds i16, i16* %64, i64 %1248
  %1250 = load i16, i16* %1249, align 2, !tbaa !393
  %1251 = insertelement <32 x i16> %1246, i16 %1250, i32 26
  %1252 = extractelement <32 x i32> %1116, i32 27
  %1253 = sext i32 %1252 to i64
  %1254 = getelementptr inbounds i16, i16* %64, i64 %1253
  %1255 = load i16, i16* %1254, align 2, !tbaa !393
  %1256 = insertelement <32 x i16> %1251, i16 %1255, i32 27
  %1257 = extractelement <32 x i32> %1116, i32 28
  %1258 = sext i32 %1257 to i64
  %1259 = getelementptr inbounds i16, i16* %64, i64 %1258
  %1260 = load i16, i16* %1259, align 2, !tbaa !393
  %1261 = insertelement <32 x i16> %1256, i16 %1260, i32 28
  %1262 = extractelement <32 x i32> %1116, i32 29
  %1263 = sext i32 %1262 to i64
  %1264 = getelementptr inbounds i16, i16* %64, i64 %1263
  %1265 = load i16, i16* %1264, align 2, !tbaa !393
  %1266 = insertelement <32 x i16> %1261, i16 %1265, i32 29
  %1267 = extractelement <32 x i32> %1116, i32 30
  %1268 = sext i32 %1267 to i64
  %1269 = getelementptr inbounds i16, i16* %64, i64 %1268
  %1270 = load i16, i16* %1269, align 2, !tbaa !393
  %1271 = insertelement <32 x i16> %1266, i16 %1270, i32 30
  %1272 = extractelement <32 x i32> %1116, i32 31
  %1273 = sext i32 %1272 to i64
  %1274 = getelementptr inbounds i16, i16* %64, i64 %1273
  %1275 = load i16, i16* %1274, align 2, !tbaa !393
  %1276 = insertelement <32 x i16> %1271, i16 %1275, i32 31
  %1277 = shufflevector <32 x i16> %1276, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1278 = sext i32 %read_input.s0.x.v2.base.s12 to i64
  %1279 = add nsw i64 %1086, %1278
  %1280 = getelementptr inbounds i16, i16* %read_input, i64 %1279
  %1281 = getelementptr inbounds i16, i16* %1280, i64 -32
  %1282 = bitcast i16* %1281 to <16 x i16>*
  store <16 x i16> %1277, <16 x i16>* %1282, align 2, !tbaa !396
  %1283 = shufflevector <32 x i16> %1276, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1284 = getelementptr inbounds i16, i16* %1280, i64 -16
  %1285 = bitcast i16* %1284 to <16 x i16>*
  store <16 x i16> %1283, <16 x i16>* %1285, align 2, !tbaa !396
  %1286 = add nuw nsw i32 %read_input.s0.x.x.rebased11, 1
  %.not2888 = icmp eq i32 %1286, %t1705
  br i1 %.not2888, label %"end for read_input.s0.x.x.rebased10", label %"for read_input.s0.x.x.rebased9"

"end for read_input.s0.x.x.rebased10":            ; preds = %"for read_input.s0.x.x.rebased9", %"end for read_input.s0.x.x.rebased"
  %indvars.iv.next3367 = add nuw nsw i64 %indvars.iv3366, 1
  %.not2887 = icmp eq i64 %indvars.iv.next3367, %578
  br i1 %.not2887, label %"end for read_input.s0.y.rebased2", label %"for read_input.s0.y.rebased1"

"for read_input.s0.y.rebased13":                  ; preds = %"for read_input.s0.y.rebased13.preheader", %"end for read_input.s0.x.x17"
  %indvars.iv3369 = phi i64 [ 0, %"for read_input.s0.y.rebased13.preheader" ], [ %indvars.iv.next3370, %"end for read_input.s0.x.x17" ]
  %1287 = trunc i64 %indvars.iv3369 to i32
  %a65 = add nsw i32 %t1719, %1287
  %1288 = icmp sgt i32 %b36, %a65
  %a64 = select i1 %1288, i32 %a65, i32 %b36
  %1289 = icmp sgt i32 %a64, 0
  %1290 = select i1 %1289, i32 %a64, i32 0
  %1291 = mul nsw i32 %1290, %13
  %t1723 = sub nsw i32 %1291, %9
  %1292 = insertelement <32 x i32> undef, i32 %t1723, i32 0
  %1293 = shufflevector <32 x i32> %1292, <32 x i32> undef, <32 x i32> zeroinitializer
  %1294 = add nuw nsw i64 %792, %indvars.iv3369
  %1295 = mul nsw i64 %1294, %82
  %1296 = sub i64 %1295, %83
  br label %"for read_input.s0.x.x16"

"end for read_input.s0.y.rebased14":              ; preds = %"end for read_input.s0.x.x17", %"end for read_input.s0.y.rebased2"
  %1297 = load i64, i64* %.fca.1.gep2474, align 8, !tbaa !387
  %cmp.i2942 = icmp ult i64 %1297, %92
  %1298 = load i8*, i8** %.fca.0.gep2473, align 8, !tbaa !389
  br i1 %cmp.i2942, label %if.then.i2945, label %pseudostack_alloc.exit2958, !prof !390

if.then.i2945:                                    ; preds = %"end for read_input.s0.y.rebased14"
  %tobool1.not.i2944 = icmp ne i8* %1298, null
  %1299 = load i64, i64* %.fca.2.gep2475, align 8
  %cmp2.i2947 = icmp ugt i64 %1299, 16384
  %or.cond3029 = and i1 %tobool1.not.i2944, %cmp2.i2947
  br i1 %or.cond3029, label %if.then3.i2949, label %if.end.i2953

if.then3.i2949:                                   ; preds = %if.then.i2945
  call void @halide_free(i8* null, i8* nonnull %1298) #16
  %.pre3572 = load i64, i64* %.fca.2.gep2475, align 8, !tbaa !391
  br label %if.end.i2953

if.end.i2953:                                     ; preds = %if.then3.i2949, %if.then.i2945
  %1300 = phi i64 [ %.pre3572, %if.then3.i2949 ], [ %1299, %if.then.i2945 ]
  %add.i2951 = add i64 %1300, %92
  store i64 %add.i2951, i64* %.fca.2.gep2475, align 8, !tbaa !391
  %cmp7.i2952 = icmp ugt i64 %add.i2951, 16384
  br i1 %cmp7.i2952, label %if.then8.i2955, label %if.end11.i2957

if.then8.i2955:                                   ; preds = %if.end.i2953
  %call.i2954 = call i8* @halide_malloc(i8* null, i64 %92) #16
  br label %if.end11.i2957

if.end11.i2957:                                   ; preds = %if.then8.i2955, %if.end.i2953
  %storemerge.i2956 = phi i8* [ %call.i2954, %if.then8.i2955 ], [ null, %if.end.i2953 ]
  store i8* %storemerge.i2956, i8** %.fca.0.gep2473, align 8, !tbaa !389
  store i64 %92, i64* %.fca.1.gep2474, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2958

pseudostack_alloc.exit2958:                       ; preds = %"end for read_input.s0.y.rebased14", %if.end11.i2957
  %1301 = phi i8* [ %storemerge.i2956, %if.end11.i2957 ], [ %1298, %"end for read_input.s0.y.rebased14" ]
  %1302 = bitcast i8* %1301 to i16*
  %.not2806 = icmp eq i8* %1301, null
  br i1 %.not2806, label %then_bb21, label %"consume read_input", !prof !392

"for read_input.s0.x.x16":                        ; preds = %"for read_input.s0.y.rebased13", %"for read_input.s0.x.x16"
  %read_input.s0.x.x18 = phi i32 [ %1501, %"for read_input.s0.x.x16" ], [ 0, %"for read_input.s0.y.rebased13" ]
  %1303 = shl nsw i32 %read_input.s0.x.x18, 5
  %a66 = add nsw i32 %1303, %t1694
  %1304 = icmp sgt i32 %b37, %a66
  %read_input.s0.x.v2.base.s19 = select i1 %1304, i32 %a66, i32 %b37
  %1305 = add nsw i32 %read_input.s0.x.v2.base.s19, -32
  %1306 = insertelement <32 x i32> undef, i32 %1305, i32 0
  %1307 = shufflevector <32 x i32> %1306, <32 x i32> undef, <32 x i32> zeroinitializer
  %a68 = add nsw <32 x i32> %1307, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1308 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1309 = icmp sgt <8 x i32> %75, %1308
  %1310 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1311 = icmp sgt <8 x i32> %75, %1310
  %1312 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1313 = icmp sgt <8 x i32> %75, %1312
  %1314 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1315 = icmp sgt <8 x i32> %75, %1314
  %1316 = select <8 x i1> %1309, <8 x i32> %1308, <8 x i32> %75
  %1317 = select <8 x i1> %1311, <8 x i32> %1310, <8 x i32> %75
  %1318 = select <8 x i1> %1313, <8 x i32> %1312, <8 x i32> %75
  %1319 = select <8 x i1> %1315, <8 x i32> %1314, <8 x i32> %75
  %1320 = icmp sgt <8 x i32> %1316, %77
  %1321 = icmp sgt <8 x i32> %1317, %77
  %1322 = icmp sgt <8 x i32> %1318, %77
  %1323 = icmp sgt <8 x i32> %1319, %77
  %1324 = select <8 x i1> %1320, <8 x i32> %1316, <8 x i32> %77
  %1325 = select <8 x i1> %1321, <8 x i32> %1317, <8 x i32> %77
  %1326 = select <8 x i1> %1322, <8 x i32> %1318, <8 x i32> %77
  %1327 = select <8 x i1> %1323, <8 x i32> %1319, <8 x i32> %77
  %1328 = shufflevector <8 x i32> %1324, <8 x i32> %1325, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1329 = shufflevector <8 x i32> %1326, <8 x i32> %1327, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1330 = shufflevector <16 x i32> %1328, <16 x i32> %1329, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1331 = add nsw <32 x i32> %1330, %1293
  %1332 = extractelement <32 x i32> %1331, i32 0
  %1333 = sext i32 %1332 to i64
  %1334 = getelementptr inbounds i16, i16* %64, i64 %1333
  %1335 = load i16, i16* %1334, align 2, !tbaa !393
  %1336 = insertelement <32 x i16> undef, i16 %1335, i32 0
  %1337 = extractelement <32 x i32> %1331, i32 1
  %1338 = sext i32 %1337 to i64
  %1339 = getelementptr inbounds i16, i16* %64, i64 %1338
  %1340 = load i16, i16* %1339, align 2, !tbaa !393
  %1341 = insertelement <32 x i16> %1336, i16 %1340, i32 1
  %1342 = extractelement <32 x i32> %1331, i32 2
  %1343 = sext i32 %1342 to i64
  %1344 = getelementptr inbounds i16, i16* %64, i64 %1343
  %1345 = load i16, i16* %1344, align 2, !tbaa !393
  %1346 = insertelement <32 x i16> %1341, i16 %1345, i32 2
  %1347 = extractelement <32 x i32> %1331, i32 3
  %1348 = sext i32 %1347 to i64
  %1349 = getelementptr inbounds i16, i16* %64, i64 %1348
  %1350 = load i16, i16* %1349, align 2, !tbaa !393
  %1351 = insertelement <32 x i16> %1346, i16 %1350, i32 3
  %1352 = extractelement <32 x i32> %1331, i32 4
  %1353 = sext i32 %1352 to i64
  %1354 = getelementptr inbounds i16, i16* %64, i64 %1353
  %1355 = load i16, i16* %1354, align 2, !tbaa !393
  %1356 = insertelement <32 x i16> %1351, i16 %1355, i32 4
  %1357 = extractelement <32 x i32> %1331, i32 5
  %1358 = sext i32 %1357 to i64
  %1359 = getelementptr inbounds i16, i16* %64, i64 %1358
  %1360 = load i16, i16* %1359, align 2, !tbaa !393
  %1361 = insertelement <32 x i16> %1356, i16 %1360, i32 5
  %1362 = extractelement <32 x i32> %1331, i32 6
  %1363 = sext i32 %1362 to i64
  %1364 = getelementptr inbounds i16, i16* %64, i64 %1363
  %1365 = load i16, i16* %1364, align 2, !tbaa !393
  %1366 = insertelement <32 x i16> %1361, i16 %1365, i32 6
  %1367 = extractelement <32 x i32> %1331, i32 7
  %1368 = sext i32 %1367 to i64
  %1369 = getelementptr inbounds i16, i16* %64, i64 %1368
  %1370 = load i16, i16* %1369, align 2, !tbaa !393
  %1371 = insertelement <32 x i16> %1366, i16 %1370, i32 7
  %1372 = extractelement <32 x i32> %1331, i32 8
  %1373 = sext i32 %1372 to i64
  %1374 = getelementptr inbounds i16, i16* %64, i64 %1373
  %1375 = load i16, i16* %1374, align 2, !tbaa !393
  %1376 = insertelement <32 x i16> %1371, i16 %1375, i32 8
  %1377 = extractelement <32 x i32> %1331, i32 9
  %1378 = sext i32 %1377 to i64
  %1379 = getelementptr inbounds i16, i16* %64, i64 %1378
  %1380 = load i16, i16* %1379, align 2, !tbaa !393
  %1381 = insertelement <32 x i16> %1376, i16 %1380, i32 9
  %1382 = extractelement <32 x i32> %1331, i32 10
  %1383 = sext i32 %1382 to i64
  %1384 = getelementptr inbounds i16, i16* %64, i64 %1383
  %1385 = load i16, i16* %1384, align 2, !tbaa !393
  %1386 = insertelement <32 x i16> %1381, i16 %1385, i32 10
  %1387 = extractelement <32 x i32> %1331, i32 11
  %1388 = sext i32 %1387 to i64
  %1389 = getelementptr inbounds i16, i16* %64, i64 %1388
  %1390 = load i16, i16* %1389, align 2, !tbaa !393
  %1391 = insertelement <32 x i16> %1386, i16 %1390, i32 11
  %1392 = extractelement <32 x i32> %1331, i32 12
  %1393 = sext i32 %1392 to i64
  %1394 = getelementptr inbounds i16, i16* %64, i64 %1393
  %1395 = load i16, i16* %1394, align 2, !tbaa !393
  %1396 = insertelement <32 x i16> %1391, i16 %1395, i32 12
  %1397 = extractelement <32 x i32> %1331, i32 13
  %1398 = sext i32 %1397 to i64
  %1399 = getelementptr inbounds i16, i16* %64, i64 %1398
  %1400 = load i16, i16* %1399, align 2, !tbaa !393
  %1401 = insertelement <32 x i16> %1396, i16 %1400, i32 13
  %1402 = extractelement <32 x i32> %1331, i32 14
  %1403 = sext i32 %1402 to i64
  %1404 = getelementptr inbounds i16, i16* %64, i64 %1403
  %1405 = load i16, i16* %1404, align 2, !tbaa !393
  %1406 = insertelement <32 x i16> %1401, i16 %1405, i32 14
  %1407 = extractelement <32 x i32> %1331, i32 15
  %1408 = sext i32 %1407 to i64
  %1409 = getelementptr inbounds i16, i16* %64, i64 %1408
  %1410 = load i16, i16* %1409, align 2, !tbaa !393
  %1411 = insertelement <32 x i16> %1406, i16 %1410, i32 15
  %1412 = extractelement <32 x i32> %1331, i32 16
  %1413 = sext i32 %1412 to i64
  %1414 = getelementptr inbounds i16, i16* %64, i64 %1413
  %1415 = load i16, i16* %1414, align 2, !tbaa !393
  %1416 = insertelement <32 x i16> %1411, i16 %1415, i32 16
  %1417 = extractelement <32 x i32> %1331, i32 17
  %1418 = sext i32 %1417 to i64
  %1419 = getelementptr inbounds i16, i16* %64, i64 %1418
  %1420 = load i16, i16* %1419, align 2, !tbaa !393
  %1421 = insertelement <32 x i16> %1416, i16 %1420, i32 17
  %1422 = extractelement <32 x i32> %1331, i32 18
  %1423 = sext i32 %1422 to i64
  %1424 = getelementptr inbounds i16, i16* %64, i64 %1423
  %1425 = load i16, i16* %1424, align 2, !tbaa !393
  %1426 = insertelement <32 x i16> %1421, i16 %1425, i32 18
  %1427 = extractelement <32 x i32> %1331, i32 19
  %1428 = sext i32 %1427 to i64
  %1429 = getelementptr inbounds i16, i16* %64, i64 %1428
  %1430 = load i16, i16* %1429, align 2, !tbaa !393
  %1431 = insertelement <32 x i16> %1426, i16 %1430, i32 19
  %1432 = extractelement <32 x i32> %1331, i32 20
  %1433 = sext i32 %1432 to i64
  %1434 = getelementptr inbounds i16, i16* %64, i64 %1433
  %1435 = load i16, i16* %1434, align 2, !tbaa !393
  %1436 = insertelement <32 x i16> %1431, i16 %1435, i32 20
  %1437 = extractelement <32 x i32> %1331, i32 21
  %1438 = sext i32 %1437 to i64
  %1439 = getelementptr inbounds i16, i16* %64, i64 %1438
  %1440 = load i16, i16* %1439, align 2, !tbaa !393
  %1441 = insertelement <32 x i16> %1436, i16 %1440, i32 21
  %1442 = extractelement <32 x i32> %1331, i32 22
  %1443 = sext i32 %1442 to i64
  %1444 = getelementptr inbounds i16, i16* %64, i64 %1443
  %1445 = load i16, i16* %1444, align 2, !tbaa !393
  %1446 = insertelement <32 x i16> %1441, i16 %1445, i32 22
  %1447 = extractelement <32 x i32> %1331, i32 23
  %1448 = sext i32 %1447 to i64
  %1449 = getelementptr inbounds i16, i16* %64, i64 %1448
  %1450 = load i16, i16* %1449, align 2, !tbaa !393
  %1451 = insertelement <32 x i16> %1446, i16 %1450, i32 23
  %1452 = extractelement <32 x i32> %1331, i32 24
  %1453 = sext i32 %1452 to i64
  %1454 = getelementptr inbounds i16, i16* %64, i64 %1453
  %1455 = load i16, i16* %1454, align 2, !tbaa !393
  %1456 = insertelement <32 x i16> %1451, i16 %1455, i32 24
  %1457 = extractelement <32 x i32> %1331, i32 25
  %1458 = sext i32 %1457 to i64
  %1459 = getelementptr inbounds i16, i16* %64, i64 %1458
  %1460 = load i16, i16* %1459, align 2, !tbaa !393
  %1461 = insertelement <32 x i16> %1456, i16 %1460, i32 25
  %1462 = extractelement <32 x i32> %1331, i32 26
  %1463 = sext i32 %1462 to i64
  %1464 = getelementptr inbounds i16, i16* %64, i64 %1463
  %1465 = load i16, i16* %1464, align 2, !tbaa !393
  %1466 = insertelement <32 x i16> %1461, i16 %1465, i32 26
  %1467 = extractelement <32 x i32> %1331, i32 27
  %1468 = sext i32 %1467 to i64
  %1469 = getelementptr inbounds i16, i16* %64, i64 %1468
  %1470 = load i16, i16* %1469, align 2, !tbaa !393
  %1471 = insertelement <32 x i16> %1466, i16 %1470, i32 27
  %1472 = extractelement <32 x i32> %1331, i32 28
  %1473 = sext i32 %1472 to i64
  %1474 = getelementptr inbounds i16, i16* %64, i64 %1473
  %1475 = load i16, i16* %1474, align 2, !tbaa !393
  %1476 = insertelement <32 x i16> %1471, i16 %1475, i32 28
  %1477 = extractelement <32 x i32> %1331, i32 29
  %1478 = sext i32 %1477 to i64
  %1479 = getelementptr inbounds i16, i16* %64, i64 %1478
  %1480 = load i16, i16* %1479, align 2, !tbaa !393
  %1481 = insertelement <32 x i16> %1476, i16 %1480, i32 29
  %1482 = extractelement <32 x i32> %1331, i32 30
  %1483 = sext i32 %1482 to i64
  %1484 = getelementptr inbounds i16, i16* %64, i64 %1483
  %1485 = load i16, i16* %1484, align 2, !tbaa !393
  %1486 = insertelement <32 x i16> %1481, i16 %1485, i32 30
  %1487 = extractelement <32 x i32> %1331, i32 31
  %1488 = sext i32 %1487 to i64
  %1489 = getelementptr inbounds i16, i16* %64, i64 %1488
  %1490 = load i16, i16* %1489, align 2, !tbaa !393
  %1491 = insertelement <32 x i16> %1486, i16 %1490, i32 31
  %1492 = shufflevector <32 x i16> %1491, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1493 = sext i32 %read_input.s0.x.v2.base.s19 to i64
  %1494 = add nsw i64 %1296, %1493
  %1495 = getelementptr inbounds i16, i16* %read_input, i64 %1494
  %1496 = getelementptr inbounds i16, i16* %1495, i64 -32
  %1497 = bitcast i16* %1496 to <16 x i16>*
  store <16 x i16> %1492, <16 x i16>* %1497, align 2, !tbaa !396
  %1498 = shufflevector <32 x i16> %1491, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1499 = getelementptr inbounds i16, i16* %1495, i64 -16
  %1500 = bitcast i16* %1499 to <16 x i16>*
  store <16 x i16> %1498, <16 x i16>* %1500, align 2, !tbaa !396
  %1501 = add nuw nsw i32 %read_input.s0.x.x18, 1
  %.not2886 = icmp eq i32 %1501, %20
  br i1 %.not2886, label %"end for read_input.s0.x.x17", label %"for read_input.s0.x.x16"

"end for read_input.s0.x.x17":                    ; preds = %"for read_input.s0.x.x16"
  %indvars.iv.next3370 = add nuw nsw i64 %indvars.iv3369, 1
  %.not2885 = icmp eq i64 %indvars.iv3369, %793
  br i1 %.not2885, label %"end for read_input.s0.y.rebased14", label %"for read_input.s0.y.rebased13"

then_bb21:                                        ; preds = %pseudostack_alloc.exit2958
  %1502 = alloca i8*, i64 %92, align 32
  %1503 = bitcast i8** %1502 to i16*
  store i8** %1502, i8*** %93, align 8
  br label %"consume read_input"

"consume read_input":                             ; preds = %pseudostack_alloc.exit2958, %then_bb21
  %blur_x = phi i16* [ %1503, %then_bb21 ], [ %1302, %pseudostack_alloc.exit2958 ]
  br i1 %34, label %"produce blur_x", label %"consume read_input.after_bb22_crit_edge"

"consume read_input.after_bb22_crit_edge":        ; preds = %"consume read_input"
  %.pre3575 = and i32 %a26, 7
  br label %after_bb22

after_bb22:                                       ; preds = %"consume read_input.after_bb22_crit_edge", %"produce blur_x"
  %.pre-phi = phi i32 [ %.pre3575, %"consume read_input.after_bb22_crit_edge" ], [ %1568, %"produce blur_x" ]
  %1504 = mul nsw i32 %.pre-phi, %a73
  %t1726 = sub nsw i32 %1504, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased.preheader", label %"end for blur_y.s0.x.x.rebased", !prof !386

"for blur_y.s0.x.x.rebased.preheader":            ; preds = %after_bb22
  %1505 = sext i32 %t1726 to i64
  br label %"for blur_y.s0.x.x.rebased"

"produce blur_x":                                 ; preds = %"consume read_input"
  %1506 = getelementptr inbounds i16, i16* %read_input, i64 %94
  %1507 = getelementptr inbounds i16, i16* %1506, i64 -31
  %1508 = bitcast i16* %1507 to <16 x i16>*
  %1509 = load <16 x i16>, <16 x i16>* %1508, align 2, !tbaa !396
  %1510 = getelementptr inbounds i16, i16* %1506, i64 -15
  %1511 = bitcast i16* %1510 to <16 x i16>*
  %1512 = load <16 x i16>, <16 x i16>* %1511, align 2, !tbaa !396
  %1513 = getelementptr inbounds i16, i16* %1506, i64 -32
  %1514 = bitcast i16* %1513 to <16 x i16>*
  %1515 = load <16 x i16>, <16 x i16>* %1514, align 2, !tbaa !396
  %1516 = getelementptr inbounds i16, i16* %1506, i64 -16
  %1517 = bitcast i16* %1516 to <16 x i16>*
  %1518 = load <16 x i16>, <16 x i16>* %1517, align 2, !tbaa !396
  %1519 = getelementptr inbounds i16, i16* %1506, i64 -30
  %1520 = bitcast i16* %1519 to <16 x i16>*
  %1521 = load <16 x i16>, <16 x i16>* %1520, align 2, !tbaa !396
  %1522 = getelementptr inbounds i16, i16* %1506, i64 -14
  %1523 = bitcast i16* %1522 to <16 x i16>*
  %1524 = load <16 x i16>, <16 x i16>* %1523, align 2, !tbaa !396
  %1525 = getelementptr inbounds i16, i16* %1506, i64 -29
  %1526 = bitcast i16* %1525 to <16 x i16>*
  %1527 = load <16 x i16>, <16 x i16>* %1526, align 2, !tbaa !396
  %1528 = getelementptr inbounds i16, i16* %1506, i64 -13
  %1529 = bitcast i16* %1528 to <16 x i16>*
  %1530 = load <16 x i16>, <16 x i16>* %1529, align 2, !tbaa !396
  %1531 = getelementptr inbounds i16, i16* %1506, i64 -28
  %1532 = bitcast i16* %1531 to <16 x i16>*
  %1533 = load <16 x i16>, <16 x i16>* %1532, align 2, !tbaa !396
  %1534 = getelementptr inbounds i16, i16* %1506, i64 -12
  %1535 = bitcast i16* %1534 to <16 x i16>*
  %1536 = load <16 x i16>, <16 x i16>* %1535, align 2, !tbaa !396
  %1537 = getelementptr inbounds i16, i16* %1506, i64 -26
  %1538 = bitcast i16* %1537 to <16 x i16>*
  %1539 = load <16 x i16>, <16 x i16>* %1538, align 2, !tbaa !396
  %1540 = getelementptr inbounds i16, i16* %1506, i64 -10
  %1541 = bitcast i16* %1540 to <16 x i16>*
  %1542 = load <16 x i16>, <16 x i16>* %1541, align 2, !tbaa !396
  %1543 = getelementptr inbounds i16, i16* %1506, i64 -27
  %1544 = bitcast i16* %1543 to <16 x i16>*
  %1545 = load <16 x i16>, <16 x i16>* %1544, align 2, !tbaa !396
  %1546 = getelementptr inbounds i16, i16* %1506, i64 -11
  %1547 = bitcast i16* %1546 to <16 x i16>*
  %1548 = load <16 x i16>, <16 x i16>* %1547, align 2, !tbaa !396
  %1549 = add <16 x i16> %1515, %1509
  %1550 = add <16 x i16> %1549, %1521
  %1551 = add <16 x i16> %1550, %1527
  %1552 = add <16 x i16> %1551, %1533
  %1553 = add <16 x i16> %1552, %1539
  %1554 = add <16 x i16> %1553, %1545
  %1555 = add <16 x i16> %1518, %1512
  %1556 = add <16 x i16> %1555, %1524
  %1557 = add <16 x i16> %1556, %1530
  %1558 = add <16 x i16> %1557, %1536
  %1559 = add <16 x i16> %1558, %1542
  %1560 = add <16 x i16> %1559, %1548
  %1561 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1554, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1562 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1560, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1563 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1561, <16 x i16> %1554)
  %1564 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1562, <16 x i16> %1560)
  %1565 = shufflevector <16 x i16> %1563, <16 x i16> %1564, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1566 = lshr <32 x i16> %1565, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1567 = shufflevector <32 x i16> %1566, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1568 = and i32 %a26, 7
  %1569 = zext i32 %1568 to i64
  %1570 = mul nsw i64 %97, %1569
  %1571 = add nsw i64 %99, %1570
  %1572 = getelementptr inbounds i16, i16* %blur_x, i64 %1571
  %1573 = getelementptr inbounds i16, i16* %1572, i64 -32
  %1574 = bitcast i16* %1573 to <16 x i16>*
  store <16 x i16> %1567, <16 x i16>* %1574, align 2, !tbaa !399
  %1575 = shufflevector <32 x i16> %1566, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1576 = getelementptr inbounds i16, i16* %1572, i64 -16
  %1577 = bitcast i16* %1576 to <16 x i16>*
  store <16 x i16> %1575, <16 x i16>* %1577, align 2, !tbaa !399
  br label %after_bb22

"for blur_y.s0.x.x.rebased":                      ; preds = %"for blur_y.s0.x.x.rebased.preheader", %after_bb24
  %indvars.iv3371 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3372, %after_bb24 ]
  %1578 = add nsw i64 %indvars.iv3371, %101
  %1579 = icmp slt i64 %1578, 1
  %1580 = trunc i64 %1578 to i32
  %1581 = shl nsw i32 %1580, 5
  %1582 = icmp sgt i32 %4, %1581
  %1583 = or i1 %1579, %1582
  br i1 %1583, label %"produce blur_x27", label %after_bb24

"end for blur_y.s0.x.x.rebased":                  ; preds = %after_bb24, %after_bb22
  br i1 %102, label %"for blur_y.s0.x.x.rebased28.preheader", label %"end for blur_y.s0.x.x.rebased29", !prof !386

"for blur_y.s0.x.x.rebased28.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased"
  %1584 = sext i32 %t1726 to i64
  br label %"for blur_y.s0.x.x.rebased28"

after_bb24:                                       ; preds = %"for blur_y.s0.x.x.rebased", %"produce blur_x27"
  %indvars.iv.next3372 = add nuw nsw i64 %indvars.iv3371, 1
  %.not2883 = icmp eq i64 %indvars.iv.next3372, %188
  br i1 %.not2883, label %"end for blur_y.s0.x.x.rebased", label %"for blur_y.s0.x.x.rebased"

"produce blur_x27":                               ; preds = %"for blur_y.s0.x.x.rebased"
  %t712 = sub i32 %1581, %t1689
  %1585 = sext i32 %t712 to i64
  %1586 = getelementptr inbounds i16, i16* %read_input, i64 %1585
  %1587 = getelementptr inbounds i16, i16* %1586, i64 1
  %1588 = bitcast i16* %1587 to <16 x i16>*
  %1589 = load <16 x i16>, <16 x i16>* %1588, align 2, !tbaa !396
  %1590 = getelementptr inbounds i16, i16* %1586, i64 17
  %1591 = bitcast i16* %1590 to <16 x i16>*
  %1592 = load <16 x i16>, <16 x i16>* %1591, align 2, !tbaa !396
  %1593 = bitcast i16* %1586 to <16 x i16>*
  %1594 = load <16 x i16>, <16 x i16>* %1593, align 2, !tbaa !396
  %1595 = getelementptr inbounds i16, i16* %1586, i64 16
  %1596 = bitcast i16* %1595 to <16 x i16>*
  %1597 = load <16 x i16>, <16 x i16>* %1596, align 2, !tbaa !396
  %1598 = getelementptr inbounds i16, i16* %1586, i64 2
  %1599 = bitcast i16* %1598 to <16 x i16>*
  %1600 = load <16 x i16>, <16 x i16>* %1599, align 2, !tbaa !396
  %1601 = getelementptr inbounds i16, i16* %1586, i64 18
  %1602 = bitcast i16* %1601 to <16 x i16>*
  %1603 = load <16 x i16>, <16 x i16>* %1602, align 2, !tbaa !396
  %1604 = getelementptr inbounds i16, i16* %1586, i64 3
  %1605 = bitcast i16* %1604 to <16 x i16>*
  %1606 = load <16 x i16>, <16 x i16>* %1605, align 2, !tbaa !396
  %1607 = getelementptr inbounds i16, i16* %1586, i64 19
  %1608 = bitcast i16* %1607 to <16 x i16>*
  %1609 = load <16 x i16>, <16 x i16>* %1608, align 2, !tbaa !396
  %1610 = getelementptr inbounds i16, i16* %1586, i64 4
  %1611 = bitcast i16* %1610 to <16 x i16>*
  %1612 = load <16 x i16>, <16 x i16>* %1611, align 2, !tbaa !396
  %1613 = getelementptr inbounds i16, i16* %1586, i64 20
  %1614 = bitcast i16* %1613 to <16 x i16>*
  %1615 = load <16 x i16>, <16 x i16>* %1614, align 2, !tbaa !396
  %1616 = getelementptr inbounds i16, i16* %1586, i64 6
  %1617 = bitcast i16* %1616 to <16 x i16>*
  %1618 = load <16 x i16>, <16 x i16>* %1617, align 2, !tbaa !396
  %1619 = getelementptr inbounds i16, i16* %1586, i64 22
  %1620 = bitcast i16* %1619 to <16 x i16>*
  %1621 = load <16 x i16>, <16 x i16>* %1620, align 2, !tbaa !396
  %1622 = getelementptr inbounds i16, i16* %1586, i64 5
  %1623 = bitcast i16* %1622 to <16 x i16>*
  %1624 = load <16 x i16>, <16 x i16>* %1623, align 2, !tbaa !396
  %1625 = getelementptr inbounds i16, i16* %1586, i64 21
  %1626 = bitcast i16* %1625 to <16 x i16>*
  %1627 = load <16 x i16>, <16 x i16>* %1626, align 2, !tbaa !396
  %1628 = add <16 x i16> %1594, %1589
  %1629 = add <16 x i16> %1628, %1600
  %1630 = add <16 x i16> %1629, %1606
  %1631 = add <16 x i16> %1630, %1612
  %1632 = add <16 x i16> %1631, %1618
  %1633 = add <16 x i16> %1632, %1624
  %1634 = add <16 x i16> %1597, %1592
  %1635 = add <16 x i16> %1634, %1603
  %1636 = add <16 x i16> %1635, %1609
  %1637 = add <16 x i16> %1636, %1615
  %1638 = add <16 x i16> %1637, %1621
  %1639 = add <16 x i16> %1638, %1627
  %1640 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1633, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1641 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1639, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1642 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1640, <16 x i16> %1633)
  %1643 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1641, <16 x i16> %1639)
  %1644 = shufflevector <16 x i16> %1642, <16 x i16> %1643, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1645 = lshr <32 x i16> %1644, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1646 = shufflevector <32 x i16> %1645, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1647 = shl nsw i64 %1578, 5
  %1648 = add nsw i64 %1647, %1505
  %1649 = getelementptr inbounds i16, i16* %blur_x, i64 %1648
  %1650 = bitcast i16* %1649 to <16 x i16>*
  store <16 x i16> %1646, <16 x i16>* %1650, align 2, !tbaa !399
  %1651 = shufflevector <32 x i16> %1645, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1652 = getelementptr inbounds i16, i16* %1649, i64 16
  %1653 = bitcast i16* %1652 to <16 x i16>*
  store <16 x i16> %1651, <16 x i16>* %1653, align 2, !tbaa !399
  br label %after_bb24

"for blur_y.s0.x.x.rebased28":                    ; preds = %"for blur_y.s0.x.x.rebased28.preheader", %after_bb31
  %blur_y.s0.x.x.rebased30 = phi i32 [ %1658, %after_bb31 ], [ 0, %"for blur_y.s0.x.x.rebased28.preheader" ]
  %t2275 = add nsw i32 %blur_y.s0.x.x.rebased30, %t1670
  %1654 = icmp slt i32 %t2275, 1
  %1655 = shl nsw i32 %t2275, 5
  %1656 = icmp sgt i32 %4, %1655
  %1657 = or i1 %1654, %1656
  br i1 %1657, label %then_bb32, label %after_bb31

"end for blur_y.s0.x.x.rebased29":                ; preds = %after_bb31, %"end for blur_y.s0.x.x.rebased"
  br i1 %34, label %"produce blur_x38", label %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge"

"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased29"
  %.pre3576 = add nsw i32 %a26, 1
  %.pre3578 = and i32 %.pre3576, 7
  br label %after_bb35

after_bb31:                                       ; preds = %"for blur_y.s0.x.x.rebased28", %then_bb32
  %1658 = add nuw nsw i32 %blur_y.s0.x.x.rebased30, 1
  %.not2882 = icmp eq i32 %1658, %t1727
  br i1 %.not2882, label %"end for blur_y.s0.x.x.rebased29", label %"for blur_y.s0.x.x.rebased28"

then_bb32:                                        ; preds = %"for blur_y.s0.x.x.rebased28"
  %1659 = icmp sgt i32 %a14, %1655
  %b83 = select i1 %1659, i32 %1655, i32 %a14
  %1660 = icmp slt i32 %b83, %4
  %blur_x.s0.x.v1.base.s = select i1 %1660, i32 %b83, i32 %4
  %t714 = sub i32 %blur_x.s0.x.v1.base.s, %t1689
  %1661 = sext i32 %t714 to i64
  %1662 = getelementptr inbounds i16, i16* %read_input, i64 %1661
  %1663 = getelementptr inbounds i16, i16* %1662, i64 1
  %1664 = bitcast i16* %1663 to <16 x i16>*
  %1665 = load <16 x i16>, <16 x i16>* %1664, align 2, !tbaa !396
  %1666 = getelementptr inbounds i16, i16* %1662, i64 17
  %1667 = bitcast i16* %1666 to <16 x i16>*
  %1668 = load <16 x i16>, <16 x i16>* %1667, align 2, !tbaa !396
  %1669 = bitcast i16* %1662 to <16 x i16>*
  %1670 = load <16 x i16>, <16 x i16>* %1669, align 2, !tbaa !396
  %1671 = getelementptr inbounds i16, i16* %1662, i64 16
  %1672 = bitcast i16* %1671 to <16 x i16>*
  %1673 = load <16 x i16>, <16 x i16>* %1672, align 2, !tbaa !396
  %1674 = getelementptr inbounds i16, i16* %1662, i64 2
  %1675 = bitcast i16* %1674 to <16 x i16>*
  %1676 = load <16 x i16>, <16 x i16>* %1675, align 2, !tbaa !396
  %1677 = getelementptr inbounds i16, i16* %1662, i64 18
  %1678 = bitcast i16* %1677 to <16 x i16>*
  %1679 = load <16 x i16>, <16 x i16>* %1678, align 2, !tbaa !396
  %1680 = getelementptr inbounds i16, i16* %1662, i64 3
  %1681 = bitcast i16* %1680 to <16 x i16>*
  %1682 = load <16 x i16>, <16 x i16>* %1681, align 2, !tbaa !396
  %1683 = getelementptr inbounds i16, i16* %1662, i64 19
  %1684 = bitcast i16* %1683 to <16 x i16>*
  %1685 = load <16 x i16>, <16 x i16>* %1684, align 2, !tbaa !396
  %1686 = getelementptr inbounds i16, i16* %1662, i64 4
  %1687 = bitcast i16* %1686 to <16 x i16>*
  %1688 = load <16 x i16>, <16 x i16>* %1687, align 2, !tbaa !396
  %1689 = getelementptr inbounds i16, i16* %1662, i64 20
  %1690 = bitcast i16* %1689 to <16 x i16>*
  %1691 = load <16 x i16>, <16 x i16>* %1690, align 2, !tbaa !396
  %1692 = getelementptr inbounds i16, i16* %1662, i64 6
  %1693 = bitcast i16* %1692 to <16 x i16>*
  %1694 = load <16 x i16>, <16 x i16>* %1693, align 2, !tbaa !396
  %1695 = getelementptr inbounds i16, i16* %1662, i64 22
  %1696 = bitcast i16* %1695 to <16 x i16>*
  %1697 = load <16 x i16>, <16 x i16>* %1696, align 2, !tbaa !396
  %1698 = getelementptr inbounds i16, i16* %1662, i64 5
  %1699 = bitcast i16* %1698 to <16 x i16>*
  %1700 = load <16 x i16>, <16 x i16>* %1699, align 2, !tbaa !396
  %1701 = getelementptr inbounds i16, i16* %1662, i64 21
  %1702 = bitcast i16* %1701 to <16 x i16>*
  %1703 = load <16 x i16>, <16 x i16>* %1702, align 2, !tbaa !396
  %1704 = add <16 x i16> %1670, %1665
  %1705 = add <16 x i16> %1704, %1676
  %1706 = add <16 x i16> %1705, %1682
  %1707 = add <16 x i16> %1706, %1688
  %1708 = add <16 x i16> %1707, %1694
  %1709 = add <16 x i16> %1708, %1700
  %1710 = add <16 x i16> %1673, %1668
  %1711 = add <16 x i16> %1710, %1679
  %1712 = add <16 x i16> %1711, %1685
  %1713 = add <16 x i16> %1712, %1691
  %1714 = add <16 x i16> %1713, %1697
  %1715 = add <16 x i16> %1714, %1703
  %1716 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1709, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1717 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1715, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1718 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1716, <16 x i16> %1709)
  %1719 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1717, <16 x i16> %1715)
  %1720 = shufflevector <16 x i16> %1718, <16 x i16> %1719, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1721 = lshr <32 x i16> %1720, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1722 = shufflevector <32 x i16> %1721, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1723 = sext i32 %blur_x.s0.x.v1.base.s to i64
  %1724 = add nsw i64 %1723, %1584
  %1725 = getelementptr inbounds i16, i16* %blur_x, i64 %1724
  %1726 = bitcast i16* %1725 to <16 x i16>*
  store <16 x i16> %1722, <16 x i16>* %1726, align 2, !tbaa !399
  %1727 = shufflevector <32 x i16> %1721, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1728 = getelementptr inbounds i16, i16* %1725, i64 16
  %1729 = bitcast i16* %1728 to <16 x i16>*
  store <16 x i16> %1727, <16 x i16>* %1729, align 2, !tbaa !399
  br label %after_bb31

after_bb35:                                       ; preds = %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge", %"produce blur_x38"
  %.pre-phi3579 = phi i32 [ %.pre3578, %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge" ], [ %1795, %"produce blur_x38" ]
  %1730 = mul nsw i32 %.pre-phi3579, %a73
  %t1732 = sub nsw i32 %1730, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased39.preheader", label %"end for blur_y.s0.x.x.rebased40", !prof !386

"for blur_y.s0.x.x.rebased39.preheader":          ; preds = %after_bb35
  %1731 = sext i32 %t1732 to i64
  br label %"for blur_y.s0.x.x.rebased39"

"produce blur_x38":                               ; preds = %"end for blur_y.s0.x.x.rebased29"
  %1732 = getelementptr inbounds i16, i16* %read_input, i64 %103
  %1733 = getelementptr inbounds i16, i16* %1732, i64 -31
  %1734 = bitcast i16* %1733 to <16 x i16>*
  %1735 = load <16 x i16>, <16 x i16>* %1734, align 2, !tbaa !396
  %1736 = getelementptr inbounds i16, i16* %1732, i64 -15
  %1737 = bitcast i16* %1736 to <16 x i16>*
  %1738 = load <16 x i16>, <16 x i16>* %1737, align 2, !tbaa !396
  %1739 = getelementptr inbounds i16, i16* %1732, i64 -32
  %1740 = bitcast i16* %1739 to <16 x i16>*
  %1741 = load <16 x i16>, <16 x i16>* %1740, align 2, !tbaa !396
  %1742 = getelementptr inbounds i16, i16* %1732, i64 -16
  %1743 = bitcast i16* %1742 to <16 x i16>*
  %1744 = load <16 x i16>, <16 x i16>* %1743, align 2, !tbaa !396
  %1745 = getelementptr inbounds i16, i16* %1732, i64 -30
  %1746 = bitcast i16* %1745 to <16 x i16>*
  %1747 = load <16 x i16>, <16 x i16>* %1746, align 2, !tbaa !396
  %1748 = getelementptr inbounds i16, i16* %1732, i64 -14
  %1749 = bitcast i16* %1748 to <16 x i16>*
  %1750 = load <16 x i16>, <16 x i16>* %1749, align 2, !tbaa !396
  %1751 = getelementptr inbounds i16, i16* %1732, i64 -29
  %1752 = bitcast i16* %1751 to <16 x i16>*
  %1753 = load <16 x i16>, <16 x i16>* %1752, align 2, !tbaa !396
  %1754 = getelementptr inbounds i16, i16* %1732, i64 -13
  %1755 = bitcast i16* %1754 to <16 x i16>*
  %1756 = load <16 x i16>, <16 x i16>* %1755, align 2, !tbaa !396
  %1757 = getelementptr inbounds i16, i16* %1732, i64 -28
  %1758 = bitcast i16* %1757 to <16 x i16>*
  %1759 = load <16 x i16>, <16 x i16>* %1758, align 2, !tbaa !396
  %1760 = getelementptr inbounds i16, i16* %1732, i64 -12
  %1761 = bitcast i16* %1760 to <16 x i16>*
  %1762 = load <16 x i16>, <16 x i16>* %1761, align 2, !tbaa !396
  %1763 = getelementptr inbounds i16, i16* %1732, i64 -26
  %1764 = bitcast i16* %1763 to <16 x i16>*
  %1765 = load <16 x i16>, <16 x i16>* %1764, align 2, !tbaa !396
  %1766 = getelementptr inbounds i16, i16* %1732, i64 -10
  %1767 = bitcast i16* %1766 to <16 x i16>*
  %1768 = load <16 x i16>, <16 x i16>* %1767, align 2, !tbaa !396
  %1769 = getelementptr inbounds i16, i16* %1732, i64 -27
  %1770 = bitcast i16* %1769 to <16 x i16>*
  %1771 = load <16 x i16>, <16 x i16>* %1770, align 2, !tbaa !396
  %1772 = getelementptr inbounds i16, i16* %1732, i64 -11
  %1773 = bitcast i16* %1772 to <16 x i16>*
  %1774 = load <16 x i16>, <16 x i16>* %1773, align 2, !tbaa !396
  %1775 = add <16 x i16> %1741, %1735
  %1776 = add <16 x i16> %1775, %1747
  %1777 = add <16 x i16> %1776, %1753
  %1778 = add <16 x i16> %1777, %1759
  %1779 = add <16 x i16> %1778, %1765
  %1780 = add <16 x i16> %1779, %1771
  %1781 = add <16 x i16> %1744, %1738
  %1782 = add <16 x i16> %1781, %1750
  %1783 = add <16 x i16> %1782, %1756
  %1784 = add <16 x i16> %1783, %1762
  %1785 = add <16 x i16> %1784, %1768
  %1786 = add <16 x i16> %1785, %1774
  %1787 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1780, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1788 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1786, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1789 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1787, <16 x i16> %1780)
  %1790 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1788, <16 x i16> %1786)
  %1791 = shufflevector <16 x i16> %1789, <16 x i16> %1790, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1792 = lshr <32 x i16> %1791, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1793 = shufflevector <32 x i16> %1792, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1794 = add nsw i32 %a26, 1
  %1795 = and i32 %1794, 7
  %1796 = zext i32 %1795 to i64
  %1797 = mul nsw i64 %97, %1796
  %1798 = add nsw i64 %99, %1797
  %1799 = getelementptr inbounds i16, i16* %blur_x, i64 %1798
  %1800 = getelementptr inbounds i16, i16* %1799, i64 -32
  %1801 = bitcast i16* %1800 to <16 x i16>*
  store <16 x i16> %1793, <16 x i16>* %1801, align 2, !tbaa !399
  %1802 = shufflevector <32 x i16> %1792, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1803 = getelementptr inbounds i16, i16* %1799, i64 -16
  %1804 = bitcast i16* %1803 to <16 x i16>*
  store <16 x i16> %1802, <16 x i16>* %1804, align 2, !tbaa !399
  br label %after_bb35

"for blur_y.s0.x.x.rebased39":                    ; preds = %"for blur_y.s0.x.x.rebased39.preheader", %after_bb42
  %indvars.iv3374 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased39.preheader" ], [ %indvars.iv.next3375, %after_bb42 ]
  %1805 = add nsw i64 %indvars.iv3374, %101
  %1806 = icmp slt i64 %1805, 1
  %1807 = trunc i64 %1805 to i32
  %1808 = shl nsw i32 %1807, 5
  %1809 = icmp sgt i32 %4, %1808
  %1810 = or i1 %1806, %1809
  br i1 %1810, label %"produce blur_x45", label %after_bb42

"end for blur_y.s0.x.x.rebased40":                ; preds = %after_bb42, %after_bb35
  br i1 %102, label %"for blur_y.s0.x.x.rebased46.preheader", label %"end for blur_y.s0.x.x.rebased47", !prof !386

"for blur_y.s0.x.x.rebased46.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased40"
  %1811 = sext i32 %t1732 to i64
  br label %"for blur_y.s0.x.x.rebased46"

after_bb42:                                       ; preds = %"for blur_y.s0.x.x.rebased39", %"produce blur_x45"
  %indvars.iv.next3375 = add nuw nsw i64 %indvars.iv3374, 1
  %.not2881 = icmp eq i64 %indvars.iv.next3375, %188
  br i1 %.not2881, label %"end for blur_y.s0.x.x.rebased40", label %"for blur_y.s0.x.x.rebased39"

"produce blur_x45":                               ; preds = %"for blur_y.s0.x.x.rebased39"
  %t718 = add nsw i32 %1808, %t1731
  %1812 = sext i32 %t718 to i64
  %1813 = getelementptr inbounds i16, i16* %read_input, i64 %1812
  %1814 = getelementptr inbounds i16, i16* %1813, i64 1
  %1815 = bitcast i16* %1814 to <16 x i16>*
  %1816 = load <16 x i16>, <16 x i16>* %1815, align 2, !tbaa !396
  %1817 = getelementptr inbounds i16, i16* %1813, i64 17
  %1818 = bitcast i16* %1817 to <16 x i16>*
  %1819 = load <16 x i16>, <16 x i16>* %1818, align 2, !tbaa !396
  %1820 = bitcast i16* %1813 to <16 x i16>*
  %1821 = load <16 x i16>, <16 x i16>* %1820, align 2, !tbaa !396
  %1822 = getelementptr inbounds i16, i16* %1813, i64 16
  %1823 = bitcast i16* %1822 to <16 x i16>*
  %1824 = load <16 x i16>, <16 x i16>* %1823, align 2, !tbaa !396
  %1825 = getelementptr inbounds i16, i16* %1813, i64 2
  %1826 = bitcast i16* %1825 to <16 x i16>*
  %1827 = load <16 x i16>, <16 x i16>* %1826, align 2, !tbaa !396
  %1828 = getelementptr inbounds i16, i16* %1813, i64 18
  %1829 = bitcast i16* %1828 to <16 x i16>*
  %1830 = load <16 x i16>, <16 x i16>* %1829, align 2, !tbaa !396
  %1831 = getelementptr inbounds i16, i16* %1813, i64 3
  %1832 = bitcast i16* %1831 to <16 x i16>*
  %1833 = load <16 x i16>, <16 x i16>* %1832, align 2, !tbaa !396
  %1834 = getelementptr inbounds i16, i16* %1813, i64 19
  %1835 = bitcast i16* %1834 to <16 x i16>*
  %1836 = load <16 x i16>, <16 x i16>* %1835, align 2, !tbaa !396
  %1837 = getelementptr inbounds i16, i16* %1813, i64 4
  %1838 = bitcast i16* %1837 to <16 x i16>*
  %1839 = load <16 x i16>, <16 x i16>* %1838, align 2, !tbaa !396
  %1840 = getelementptr inbounds i16, i16* %1813, i64 20
  %1841 = bitcast i16* %1840 to <16 x i16>*
  %1842 = load <16 x i16>, <16 x i16>* %1841, align 2, !tbaa !396
  %1843 = getelementptr inbounds i16, i16* %1813, i64 6
  %1844 = bitcast i16* %1843 to <16 x i16>*
  %1845 = load <16 x i16>, <16 x i16>* %1844, align 2, !tbaa !396
  %1846 = getelementptr inbounds i16, i16* %1813, i64 22
  %1847 = bitcast i16* %1846 to <16 x i16>*
  %1848 = load <16 x i16>, <16 x i16>* %1847, align 2, !tbaa !396
  %1849 = getelementptr inbounds i16, i16* %1813, i64 5
  %1850 = bitcast i16* %1849 to <16 x i16>*
  %1851 = load <16 x i16>, <16 x i16>* %1850, align 2, !tbaa !396
  %1852 = getelementptr inbounds i16, i16* %1813, i64 21
  %1853 = bitcast i16* %1852 to <16 x i16>*
  %1854 = load <16 x i16>, <16 x i16>* %1853, align 2, !tbaa !396
  %1855 = add <16 x i16> %1821, %1816
  %1856 = add <16 x i16> %1855, %1827
  %1857 = add <16 x i16> %1856, %1833
  %1858 = add <16 x i16> %1857, %1839
  %1859 = add <16 x i16> %1858, %1845
  %1860 = add <16 x i16> %1859, %1851
  %1861 = add <16 x i16> %1824, %1819
  %1862 = add <16 x i16> %1861, %1830
  %1863 = add <16 x i16> %1862, %1836
  %1864 = add <16 x i16> %1863, %1842
  %1865 = add <16 x i16> %1864, %1848
  %1866 = add <16 x i16> %1865, %1854
  %1867 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1860, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1868 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1866, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1869 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1867, <16 x i16> %1860)
  %1870 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1868, <16 x i16> %1866)
  %1871 = shufflevector <16 x i16> %1869, <16 x i16> %1870, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1872 = lshr <32 x i16> %1871, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1873 = shufflevector <32 x i16> %1872, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1874 = shl nsw i64 %1805, 5
  %1875 = add nsw i64 %1874, %1731
  %1876 = getelementptr inbounds i16, i16* %blur_x, i64 %1875
  %1877 = bitcast i16* %1876 to <16 x i16>*
  store <16 x i16> %1873, <16 x i16>* %1877, align 2, !tbaa !399
  %1878 = shufflevector <32 x i16> %1872, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1879 = getelementptr inbounds i16, i16* %1876, i64 16
  %1880 = bitcast i16* %1879 to <16 x i16>*
  store <16 x i16> %1878, <16 x i16>* %1880, align 2, !tbaa !399
  br label %after_bb42

"for blur_y.s0.x.x.rebased46":                    ; preds = %"for blur_y.s0.x.x.rebased46.preheader", %after_bb49
  %blur_y.s0.x.x.rebased48 = phi i32 [ %1885, %after_bb49 ], [ 0, %"for blur_y.s0.x.x.rebased46.preheader" ]
  %t2277 = add nsw i32 %blur_y.s0.x.x.rebased48, %t1670
  %1881 = icmp slt i32 %t2277, 1
  %1882 = shl nsw i32 %t2277, 5
  %1883 = icmp sgt i32 %4, %1882
  %1884 = or i1 %1881, %1883
  br i1 %1884, label %then_bb50, label %after_bb49

"end for blur_y.s0.x.x.rebased47":                ; preds = %after_bb49, %"end for blur_y.s0.x.x.rebased40"
  br i1 %34, label %"produce blur_x57", label %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge"

"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased47"
  %.pre3580 = add nsw i32 %a26, 2
  %.pre3582 = and i32 %.pre3580, 7
  br label %after_bb54

after_bb49:                                       ; preds = %"for blur_y.s0.x.x.rebased46", %then_bb50
  %1885 = add nuw nsw i32 %blur_y.s0.x.x.rebased48, 1
  %.not2880 = icmp eq i32 %1885, %t1727
  br i1 %.not2880, label %"end for blur_y.s0.x.x.rebased47", label %"for blur_y.s0.x.x.rebased46"

then_bb50:                                        ; preds = %"for blur_y.s0.x.x.rebased46"
  %1886 = icmp sgt i32 %a14, %1882
  %b90 = select i1 %1886, i32 %1882, i32 %a14
  %1887 = icmp slt i32 %b90, %4
  %blur_x.s0.x.v1.base.s53 = select i1 %1887, i32 %b90, i32 %4
  %t720 = add nsw i32 %blur_x.s0.x.v1.base.s53, %t1731
  %1888 = sext i32 %t720 to i64
  %1889 = getelementptr inbounds i16, i16* %read_input, i64 %1888
  %1890 = getelementptr inbounds i16, i16* %1889, i64 1
  %1891 = bitcast i16* %1890 to <16 x i16>*
  %1892 = load <16 x i16>, <16 x i16>* %1891, align 2, !tbaa !396
  %1893 = getelementptr inbounds i16, i16* %1889, i64 17
  %1894 = bitcast i16* %1893 to <16 x i16>*
  %1895 = load <16 x i16>, <16 x i16>* %1894, align 2, !tbaa !396
  %1896 = bitcast i16* %1889 to <16 x i16>*
  %1897 = load <16 x i16>, <16 x i16>* %1896, align 2, !tbaa !396
  %1898 = getelementptr inbounds i16, i16* %1889, i64 16
  %1899 = bitcast i16* %1898 to <16 x i16>*
  %1900 = load <16 x i16>, <16 x i16>* %1899, align 2, !tbaa !396
  %1901 = getelementptr inbounds i16, i16* %1889, i64 2
  %1902 = bitcast i16* %1901 to <16 x i16>*
  %1903 = load <16 x i16>, <16 x i16>* %1902, align 2, !tbaa !396
  %1904 = getelementptr inbounds i16, i16* %1889, i64 18
  %1905 = bitcast i16* %1904 to <16 x i16>*
  %1906 = load <16 x i16>, <16 x i16>* %1905, align 2, !tbaa !396
  %1907 = getelementptr inbounds i16, i16* %1889, i64 3
  %1908 = bitcast i16* %1907 to <16 x i16>*
  %1909 = load <16 x i16>, <16 x i16>* %1908, align 2, !tbaa !396
  %1910 = getelementptr inbounds i16, i16* %1889, i64 19
  %1911 = bitcast i16* %1910 to <16 x i16>*
  %1912 = load <16 x i16>, <16 x i16>* %1911, align 2, !tbaa !396
  %1913 = getelementptr inbounds i16, i16* %1889, i64 4
  %1914 = bitcast i16* %1913 to <16 x i16>*
  %1915 = load <16 x i16>, <16 x i16>* %1914, align 2, !tbaa !396
  %1916 = getelementptr inbounds i16, i16* %1889, i64 20
  %1917 = bitcast i16* %1916 to <16 x i16>*
  %1918 = load <16 x i16>, <16 x i16>* %1917, align 2, !tbaa !396
  %1919 = getelementptr inbounds i16, i16* %1889, i64 6
  %1920 = bitcast i16* %1919 to <16 x i16>*
  %1921 = load <16 x i16>, <16 x i16>* %1920, align 2, !tbaa !396
  %1922 = getelementptr inbounds i16, i16* %1889, i64 22
  %1923 = bitcast i16* %1922 to <16 x i16>*
  %1924 = load <16 x i16>, <16 x i16>* %1923, align 2, !tbaa !396
  %1925 = getelementptr inbounds i16, i16* %1889, i64 5
  %1926 = bitcast i16* %1925 to <16 x i16>*
  %1927 = load <16 x i16>, <16 x i16>* %1926, align 2, !tbaa !396
  %1928 = getelementptr inbounds i16, i16* %1889, i64 21
  %1929 = bitcast i16* %1928 to <16 x i16>*
  %1930 = load <16 x i16>, <16 x i16>* %1929, align 2, !tbaa !396
  %1931 = add <16 x i16> %1897, %1892
  %1932 = add <16 x i16> %1931, %1903
  %1933 = add <16 x i16> %1932, %1909
  %1934 = add <16 x i16> %1933, %1915
  %1935 = add <16 x i16> %1934, %1921
  %1936 = add <16 x i16> %1935, %1927
  %1937 = add <16 x i16> %1900, %1895
  %1938 = add <16 x i16> %1937, %1906
  %1939 = add <16 x i16> %1938, %1912
  %1940 = add <16 x i16> %1939, %1918
  %1941 = add <16 x i16> %1940, %1924
  %1942 = add <16 x i16> %1941, %1930
  %1943 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1936, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1944 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1942, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1945 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1943, <16 x i16> %1936)
  %1946 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1944, <16 x i16> %1942)
  %1947 = shufflevector <16 x i16> %1945, <16 x i16> %1946, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1948 = lshr <32 x i16> %1947, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1949 = shufflevector <32 x i16> %1948, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1950 = sext i32 %blur_x.s0.x.v1.base.s53 to i64
  %1951 = add nsw i64 %1950, %1811
  %1952 = getelementptr inbounds i16, i16* %blur_x, i64 %1951
  %1953 = bitcast i16* %1952 to <16 x i16>*
  store <16 x i16> %1949, <16 x i16>* %1953, align 2, !tbaa !399
  %1954 = shufflevector <32 x i16> %1948, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1955 = getelementptr inbounds i16, i16* %1952, i64 16
  %1956 = bitcast i16* %1955 to <16 x i16>*
  store <16 x i16> %1954, <16 x i16>* %1956, align 2, !tbaa !399
  br label %after_bb49

after_bb54:                                       ; preds = %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge", %"produce blur_x57"
  %.pre-phi3583 = phi i32 [ %.pre3582, %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge" ], [ %2022, %"produce blur_x57" ]
  %1957 = mul nsw i32 %.pre-phi3583, %a73
  %t1738 = sub nsw i32 %1957, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased58.preheader", label %"end for blur_y.s0.x.x.rebased59", !prof !386

"for blur_y.s0.x.x.rebased58.preheader":          ; preds = %after_bb54
  %1958 = sext i32 %t1738 to i64
  br label %"for blur_y.s0.x.x.rebased58"

"produce blur_x57":                               ; preds = %"end for blur_y.s0.x.x.rebased47"
  %1959 = getelementptr inbounds i16, i16* %read_input, i64 %105
  %1960 = getelementptr inbounds i16, i16* %1959, i64 -31
  %1961 = bitcast i16* %1960 to <16 x i16>*
  %1962 = load <16 x i16>, <16 x i16>* %1961, align 2, !tbaa !396
  %1963 = getelementptr inbounds i16, i16* %1959, i64 -15
  %1964 = bitcast i16* %1963 to <16 x i16>*
  %1965 = load <16 x i16>, <16 x i16>* %1964, align 2, !tbaa !396
  %1966 = getelementptr inbounds i16, i16* %1959, i64 -32
  %1967 = bitcast i16* %1966 to <16 x i16>*
  %1968 = load <16 x i16>, <16 x i16>* %1967, align 2, !tbaa !396
  %1969 = getelementptr inbounds i16, i16* %1959, i64 -16
  %1970 = bitcast i16* %1969 to <16 x i16>*
  %1971 = load <16 x i16>, <16 x i16>* %1970, align 2, !tbaa !396
  %1972 = getelementptr inbounds i16, i16* %1959, i64 -30
  %1973 = bitcast i16* %1972 to <16 x i16>*
  %1974 = load <16 x i16>, <16 x i16>* %1973, align 2, !tbaa !396
  %1975 = getelementptr inbounds i16, i16* %1959, i64 -14
  %1976 = bitcast i16* %1975 to <16 x i16>*
  %1977 = load <16 x i16>, <16 x i16>* %1976, align 2, !tbaa !396
  %1978 = getelementptr inbounds i16, i16* %1959, i64 -29
  %1979 = bitcast i16* %1978 to <16 x i16>*
  %1980 = load <16 x i16>, <16 x i16>* %1979, align 2, !tbaa !396
  %1981 = getelementptr inbounds i16, i16* %1959, i64 -13
  %1982 = bitcast i16* %1981 to <16 x i16>*
  %1983 = load <16 x i16>, <16 x i16>* %1982, align 2, !tbaa !396
  %1984 = getelementptr inbounds i16, i16* %1959, i64 -28
  %1985 = bitcast i16* %1984 to <16 x i16>*
  %1986 = load <16 x i16>, <16 x i16>* %1985, align 2, !tbaa !396
  %1987 = getelementptr inbounds i16, i16* %1959, i64 -12
  %1988 = bitcast i16* %1987 to <16 x i16>*
  %1989 = load <16 x i16>, <16 x i16>* %1988, align 2, !tbaa !396
  %1990 = getelementptr inbounds i16, i16* %1959, i64 -26
  %1991 = bitcast i16* %1990 to <16 x i16>*
  %1992 = load <16 x i16>, <16 x i16>* %1991, align 2, !tbaa !396
  %1993 = getelementptr inbounds i16, i16* %1959, i64 -10
  %1994 = bitcast i16* %1993 to <16 x i16>*
  %1995 = load <16 x i16>, <16 x i16>* %1994, align 2, !tbaa !396
  %1996 = getelementptr inbounds i16, i16* %1959, i64 -27
  %1997 = bitcast i16* %1996 to <16 x i16>*
  %1998 = load <16 x i16>, <16 x i16>* %1997, align 2, !tbaa !396
  %1999 = getelementptr inbounds i16, i16* %1959, i64 -11
  %2000 = bitcast i16* %1999 to <16 x i16>*
  %2001 = load <16 x i16>, <16 x i16>* %2000, align 2, !tbaa !396
  %2002 = add <16 x i16> %1968, %1962
  %2003 = add <16 x i16> %2002, %1974
  %2004 = add <16 x i16> %2003, %1980
  %2005 = add <16 x i16> %2004, %1986
  %2006 = add <16 x i16> %2005, %1992
  %2007 = add <16 x i16> %2006, %1998
  %2008 = add <16 x i16> %1971, %1965
  %2009 = add <16 x i16> %2008, %1977
  %2010 = add <16 x i16> %2009, %1983
  %2011 = add <16 x i16> %2010, %1989
  %2012 = add <16 x i16> %2011, %1995
  %2013 = add <16 x i16> %2012, %2001
  %2014 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2007, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2015 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2013, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2016 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2014, <16 x i16> %2007)
  %2017 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2015, <16 x i16> %2013)
  %2018 = shufflevector <16 x i16> %2016, <16 x i16> %2017, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2019 = lshr <32 x i16> %2018, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2020 = shufflevector <32 x i16> %2019, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2021 = add nsw i32 %a26, 2
  %2022 = and i32 %2021, 7
  %2023 = zext i32 %2022 to i64
  %2024 = mul nsw i64 %97, %2023
  %2025 = add nsw i64 %99, %2024
  %2026 = getelementptr inbounds i16, i16* %blur_x, i64 %2025
  %2027 = getelementptr inbounds i16, i16* %2026, i64 -32
  %2028 = bitcast i16* %2027 to <16 x i16>*
  store <16 x i16> %2020, <16 x i16>* %2028, align 2, !tbaa !399
  %2029 = shufflevector <32 x i16> %2019, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2030 = getelementptr inbounds i16, i16* %2026, i64 -16
  %2031 = bitcast i16* %2030 to <16 x i16>*
  store <16 x i16> %2029, <16 x i16>* %2031, align 2, !tbaa !399
  br label %after_bb54

"for blur_y.s0.x.x.rebased58":                    ; preds = %"for blur_y.s0.x.x.rebased58.preheader", %after_bb61
  %indvars.iv3377 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased58.preheader" ], [ %indvars.iv.next3378, %after_bb61 ]
  %2032 = add nsw i64 %indvars.iv3377, %101
  %2033 = icmp slt i64 %2032, 1
  %2034 = trunc i64 %2032 to i32
  %2035 = shl nsw i32 %2034, 5
  %2036 = icmp sgt i32 %4, %2035
  %2037 = or i1 %2033, %2036
  br i1 %2037, label %"produce blur_x64", label %after_bb61

"end for blur_y.s0.x.x.rebased59":                ; preds = %after_bb61, %after_bb54
  br i1 %102, label %"for blur_y.s0.x.x.rebased65.preheader", label %"end for blur_y.s0.x.x.rebased66", !prof !386

"for blur_y.s0.x.x.rebased65.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased59"
  %2038 = sext i32 %t1738 to i64
  br label %"for blur_y.s0.x.x.rebased65"

after_bb61:                                       ; preds = %"for blur_y.s0.x.x.rebased58", %"produce blur_x64"
  %indvars.iv.next3378 = add nuw nsw i64 %indvars.iv3377, 1
  %.not2879 = icmp eq i64 %indvars.iv.next3378, %188
  br i1 %.not2879, label %"end for blur_y.s0.x.x.rebased59", label %"for blur_y.s0.x.x.rebased58"

"produce blur_x64":                               ; preds = %"for blur_y.s0.x.x.rebased58"
  %t724 = add nsw i32 %2035, %t1737
  %2039 = sext i32 %t724 to i64
  %2040 = getelementptr inbounds i16, i16* %read_input, i64 %2039
  %2041 = getelementptr inbounds i16, i16* %2040, i64 1
  %2042 = bitcast i16* %2041 to <16 x i16>*
  %2043 = load <16 x i16>, <16 x i16>* %2042, align 2, !tbaa !396
  %2044 = getelementptr inbounds i16, i16* %2040, i64 17
  %2045 = bitcast i16* %2044 to <16 x i16>*
  %2046 = load <16 x i16>, <16 x i16>* %2045, align 2, !tbaa !396
  %2047 = bitcast i16* %2040 to <16 x i16>*
  %2048 = load <16 x i16>, <16 x i16>* %2047, align 2, !tbaa !396
  %2049 = getelementptr inbounds i16, i16* %2040, i64 16
  %2050 = bitcast i16* %2049 to <16 x i16>*
  %2051 = load <16 x i16>, <16 x i16>* %2050, align 2, !tbaa !396
  %2052 = getelementptr inbounds i16, i16* %2040, i64 2
  %2053 = bitcast i16* %2052 to <16 x i16>*
  %2054 = load <16 x i16>, <16 x i16>* %2053, align 2, !tbaa !396
  %2055 = getelementptr inbounds i16, i16* %2040, i64 18
  %2056 = bitcast i16* %2055 to <16 x i16>*
  %2057 = load <16 x i16>, <16 x i16>* %2056, align 2, !tbaa !396
  %2058 = getelementptr inbounds i16, i16* %2040, i64 3
  %2059 = bitcast i16* %2058 to <16 x i16>*
  %2060 = load <16 x i16>, <16 x i16>* %2059, align 2, !tbaa !396
  %2061 = getelementptr inbounds i16, i16* %2040, i64 19
  %2062 = bitcast i16* %2061 to <16 x i16>*
  %2063 = load <16 x i16>, <16 x i16>* %2062, align 2, !tbaa !396
  %2064 = getelementptr inbounds i16, i16* %2040, i64 4
  %2065 = bitcast i16* %2064 to <16 x i16>*
  %2066 = load <16 x i16>, <16 x i16>* %2065, align 2, !tbaa !396
  %2067 = getelementptr inbounds i16, i16* %2040, i64 20
  %2068 = bitcast i16* %2067 to <16 x i16>*
  %2069 = load <16 x i16>, <16 x i16>* %2068, align 2, !tbaa !396
  %2070 = getelementptr inbounds i16, i16* %2040, i64 6
  %2071 = bitcast i16* %2070 to <16 x i16>*
  %2072 = load <16 x i16>, <16 x i16>* %2071, align 2, !tbaa !396
  %2073 = getelementptr inbounds i16, i16* %2040, i64 22
  %2074 = bitcast i16* %2073 to <16 x i16>*
  %2075 = load <16 x i16>, <16 x i16>* %2074, align 2, !tbaa !396
  %2076 = getelementptr inbounds i16, i16* %2040, i64 5
  %2077 = bitcast i16* %2076 to <16 x i16>*
  %2078 = load <16 x i16>, <16 x i16>* %2077, align 2, !tbaa !396
  %2079 = getelementptr inbounds i16, i16* %2040, i64 21
  %2080 = bitcast i16* %2079 to <16 x i16>*
  %2081 = load <16 x i16>, <16 x i16>* %2080, align 2, !tbaa !396
  %2082 = add <16 x i16> %2048, %2043
  %2083 = add <16 x i16> %2082, %2054
  %2084 = add <16 x i16> %2083, %2060
  %2085 = add <16 x i16> %2084, %2066
  %2086 = add <16 x i16> %2085, %2072
  %2087 = add <16 x i16> %2086, %2078
  %2088 = add <16 x i16> %2051, %2046
  %2089 = add <16 x i16> %2088, %2057
  %2090 = add <16 x i16> %2089, %2063
  %2091 = add <16 x i16> %2090, %2069
  %2092 = add <16 x i16> %2091, %2075
  %2093 = add <16 x i16> %2092, %2081
  %2094 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2087, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2095 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2093, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2096 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2094, <16 x i16> %2087)
  %2097 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2095, <16 x i16> %2093)
  %2098 = shufflevector <16 x i16> %2096, <16 x i16> %2097, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2099 = lshr <32 x i16> %2098, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2100 = shufflevector <32 x i16> %2099, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2101 = shl nsw i64 %2032, 5
  %2102 = add nsw i64 %2101, %1958
  %2103 = getelementptr inbounds i16, i16* %blur_x, i64 %2102
  %2104 = bitcast i16* %2103 to <16 x i16>*
  store <16 x i16> %2100, <16 x i16>* %2104, align 2, !tbaa !399
  %2105 = shufflevector <32 x i16> %2099, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2106 = getelementptr inbounds i16, i16* %2103, i64 16
  %2107 = bitcast i16* %2106 to <16 x i16>*
  store <16 x i16> %2105, <16 x i16>* %2107, align 2, !tbaa !399
  br label %after_bb61

"for blur_y.s0.x.x.rebased65":                    ; preds = %"for blur_y.s0.x.x.rebased65.preheader", %after_bb68
  %blur_y.s0.x.x.rebased67 = phi i32 [ %2112, %after_bb68 ], [ 0, %"for blur_y.s0.x.x.rebased65.preheader" ]
  %t2279 = add nsw i32 %blur_y.s0.x.x.rebased67, %t1670
  %2108 = icmp slt i32 %t2279, 1
  %2109 = shl nsw i32 %t2279, 5
  %2110 = icmp sgt i32 %4, %2109
  %2111 = or i1 %2108, %2110
  br i1 %2111, label %then_bb69, label %after_bb68

"end for blur_y.s0.x.x.rebased66":                ; preds = %after_bb68, %"end for blur_y.s0.x.x.rebased59"
  br i1 %34, label %"produce blur_x76", label %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge"

"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased66"
  %.pre3584 = add nsw i32 %a26, 3
  %.pre3586 = and i32 %.pre3584, 7
  br label %after_bb73

after_bb68:                                       ; preds = %"for blur_y.s0.x.x.rebased65", %then_bb69
  %2112 = add nuw nsw i32 %blur_y.s0.x.x.rebased67, 1
  %.not2878 = icmp eq i32 %2112, %t1727
  br i1 %.not2878, label %"end for blur_y.s0.x.x.rebased66", label %"for blur_y.s0.x.x.rebased65"

then_bb69:                                        ; preds = %"for blur_y.s0.x.x.rebased65"
  %2113 = icmp sgt i32 %a14, %2109
  %b97 = select i1 %2113, i32 %2109, i32 %a14
  %2114 = icmp slt i32 %b97, %4
  %blur_x.s0.x.v1.base.s72 = select i1 %2114, i32 %b97, i32 %4
  %t726 = add nsw i32 %blur_x.s0.x.v1.base.s72, %t1737
  %2115 = sext i32 %t726 to i64
  %2116 = getelementptr inbounds i16, i16* %read_input, i64 %2115
  %2117 = getelementptr inbounds i16, i16* %2116, i64 1
  %2118 = bitcast i16* %2117 to <16 x i16>*
  %2119 = load <16 x i16>, <16 x i16>* %2118, align 2, !tbaa !396
  %2120 = getelementptr inbounds i16, i16* %2116, i64 17
  %2121 = bitcast i16* %2120 to <16 x i16>*
  %2122 = load <16 x i16>, <16 x i16>* %2121, align 2, !tbaa !396
  %2123 = bitcast i16* %2116 to <16 x i16>*
  %2124 = load <16 x i16>, <16 x i16>* %2123, align 2, !tbaa !396
  %2125 = getelementptr inbounds i16, i16* %2116, i64 16
  %2126 = bitcast i16* %2125 to <16 x i16>*
  %2127 = load <16 x i16>, <16 x i16>* %2126, align 2, !tbaa !396
  %2128 = getelementptr inbounds i16, i16* %2116, i64 2
  %2129 = bitcast i16* %2128 to <16 x i16>*
  %2130 = load <16 x i16>, <16 x i16>* %2129, align 2, !tbaa !396
  %2131 = getelementptr inbounds i16, i16* %2116, i64 18
  %2132 = bitcast i16* %2131 to <16 x i16>*
  %2133 = load <16 x i16>, <16 x i16>* %2132, align 2, !tbaa !396
  %2134 = getelementptr inbounds i16, i16* %2116, i64 3
  %2135 = bitcast i16* %2134 to <16 x i16>*
  %2136 = load <16 x i16>, <16 x i16>* %2135, align 2, !tbaa !396
  %2137 = getelementptr inbounds i16, i16* %2116, i64 19
  %2138 = bitcast i16* %2137 to <16 x i16>*
  %2139 = load <16 x i16>, <16 x i16>* %2138, align 2, !tbaa !396
  %2140 = getelementptr inbounds i16, i16* %2116, i64 4
  %2141 = bitcast i16* %2140 to <16 x i16>*
  %2142 = load <16 x i16>, <16 x i16>* %2141, align 2, !tbaa !396
  %2143 = getelementptr inbounds i16, i16* %2116, i64 20
  %2144 = bitcast i16* %2143 to <16 x i16>*
  %2145 = load <16 x i16>, <16 x i16>* %2144, align 2, !tbaa !396
  %2146 = getelementptr inbounds i16, i16* %2116, i64 6
  %2147 = bitcast i16* %2146 to <16 x i16>*
  %2148 = load <16 x i16>, <16 x i16>* %2147, align 2, !tbaa !396
  %2149 = getelementptr inbounds i16, i16* %2116, i64 22
  %2150 = bitcast i16* %2149 to <16 x i16>*
  %2151 = load <16 x i16>, <16 x i16>* %2150, align 2, !tbaa !396
  %2152 = getelementptr inbounds i16, i16* %2116, i64 5
  %2153 = bitcast i16* %2152 to <16 x i16>*
  %2154 = load <16 x i16>, <16 x i16>* %2153, align 2, !tbaa !396
  %2155 = getelementptr inbounds i16, i16* %2116, i64 21
  %2156 = bitcast i16* %2155 to <16 x i16>*
  %2157 = load <16 x i16>, <16 x i16>* %2156, align 2, !tbaa !396
  %2158 = add <16 x i16> %2124, %2119
  %2159 = add <16 x i16> %2158, %2130
  %2160 = add <16 x i16> %2159, %2136
  %2161 = add <16 x i16> %2160, %2142
  %2162 = add <16 x i16> %2161, %2148
  %2163 = add <16 x i16> %2162, %2154
  %2164 = add <16 x i16> %2127, %2122
  %2165 = add <16 x i16> %2164, %2133
  %2166 = add <16 x i16> %2165, %2139
  %2167 = add <16 x i16> %2166, %2145
  %2168 = add <16 x i16> %2167, %2151
  %2169 = add <16 x i16> %2168, %2157
  %2170 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2163, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2171 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2169, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2172 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2170, <16 x i16> %2163)
  %2173 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2171, <16 x i16> %2169)
  %2174 = shufflevector <16 x i16> %2172, <16 x i16> %2173, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2175 = lshr <32 x i16> %2174, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2176 = shufflevector <32 x i16> %2175, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2177 = sext i32 %blur_x.s0.x.v1.base.s72 to i64
  %2178 = add nsw i64 %2177, %2038
  %2179 = getelementptr inbounds i16, i16* %blur_x, i64 %2178
  %2180 = bitcast i16* %2179 to <16 x i16>*
  store <16 x i16> %2176, <16 x i16>* %2180, align 2, !tbaa !399
  %2181 = shufflevector <32 x i16> %2175, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2182 = getelementptr inbounds i16, i16* %2179, i64 16
  %2183 = bitcast i16* %2182 to <16 x i16>*
  store <16 x i16> %2181, <16 x i16>* %2183, align 2, !tbaa !399
  br label %after_bb68

after_bb73:                                       ; preds = %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge", %"produce blur_x76"
  %.pre-phi3587 = phi i32 [ %.pre3586, %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge" ], [ %2249, %"produce blur_x76" ]
  %2184 = mul nsw i32 %.pre-phi3587, %a73
  %t1744 = sub nsw i32 %2184, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased77.preheader", label %"end for blur_y.s0.x.x.rebased78", !prof !386

"for blur_y.s0.x.x.rebased77.preheader":          ; preds = %after_bb73
  %2185 = sext i32 %t1744 to i64
  br label %"for blur_y.s0.x.x.rebased77"

"produce blur_x76":                               ; preds = %"end for blur_y.s0.x.x.rebased66"
  %2186 = getelementptr inbounds i16, i16* %read_input, i64 %107
  %2187 = getelementptr inbounds i16, i16* %2186, i64 -31
  %2188 = bitcast i16* %2187 to <16 x i16>*
  %2189 = load <16 x i16>, <16 x i16>* %2188, align 2, !tbaa !396
  %2190 = getelementptr inbounds i16, i16* %2186, i64 -15
  %2191 = bitcast i16* %2190 to <16 x i16>*
  %2192 = load <16 x i16>, <16 x i16>* %2191, align 2, !tbaa !396
  %2193 = getelementptr inbounds i16, i16* %2186, i64 -32
  %2194 = bitcast i16* %2193 to <16 x i16>*
  %2195 = load <16 x i16>, <16 x i16>* %2194, align 2, !tbaa !396
  %2196 = getelementptr inbounds i16, i16* %2186, i64 -16
  %2197 = bitcast i16* %2196 to <16 x i16>*
  %2198 = load <16 x i16>, <16 x i16>* %2197, align 2, !tbaa !396
  %2199 = getelementptr inbounds i16, i16* %2186, i64 -30
  %2200 = bitcast i16* %2199 to <16 x i16>*
  %2201 = load <16 x i16>, <16 x i16>* %2200, align 2, !tbaa !396
  %2202 = getelementptr inbounds i16, i16* %2186, i64 -14
  %2203 = bitcast i16* %2202 to <16 x i16>*
  %2204 = load <16 x i16>, <16 x i16>* %2203, align 2, !tbaa !396
  %2205 = getelementptr inbounds i16, i16* %2186, i64 -29
  %2206 = bitcast i16* %2205 to <16 x i16>*
  %2207 = load <16 x i16>, <16 x i16>* %2206, align 2, !tbaa !396
  %2208 = getelementptr inbounds i16, i16* %2186, i64 -13
  %2209 = bitcast i16* %2208 to <16 x i16>*
  %2210 = load <16 x i16>, <16 x i16>* %2209, align 2, !tbaa !396
  %2211 = getelementptr inbounds i16, i16* %2186, i64 -28
  %2212 = bitcast i16* %2211 to <16 x i16>*
  %2213 = load <16 x i16>, <16 x i16>* %2212, align 2, !tbaa !396
  %2214 = getelementptr inbounds i16, i16* %2186, i64 -12
  %2215 = bitcast i16* %2214 to <16 x i16>*
  %2216 = load <16 x i16>, <16 x i16>* %2215, align 2, !tbaa !396
  %2217 = getelementptr inbounds i16, i16* %2186, i64 -26
  %2218 = bitcast i16* %2217 to <16 x i16>*
  %2219 = load <16 x i16>, <16 x i16>* %2218, align 2, !tbaa !396
  %2220 = getelementptr inbounds i16, i16* %2186, i64 -10
  %2221 = bitcast i16* %2220 to <16 x i16>*
  %2222 = load <16 x i16>, <16 x i16>* %2221, align 2, !tbaa !396
  %2223 = getelementptr inbounds i16, i16* %2186, i64 -27
  %2224 = bitcast i16* %2223 to <16 x i16>*
  %2225 = load <16 x i16>, <16 x i16>* %2224, align 2, !tbaa !396
  %2226 = getelementptr inbounds i16, i16* %2186, i64 -11
  %2227 = bitcast i16* %2226 to <16 x i16>*
  %2228 = load <16 x i16>, <16 x i16>* %2227, align 2, !tbaa !396
  %2229 = add <16 x i16> %2195, %2189
  %2230 = add <16 x i16> %2229, %2201
  %2231 = add <16 x i16> %2230, %2207
  %2232 = add <16 x i16> %2231, %2213
  %2233 = add <16 x i16> %2232, %2219
  %2234 = add <16 x i16> %2233, %2225
  %2235 = add <16 x i16> %2198, %2192
  %2236 = add <16 x i16> %2235, %2204
  %2237 = add <16 x i16> %2236, %2210
  %2238 = add <16 x i16> %2237, %2216
  %2239 = add <16 x i16> %2238, %2222
  %2240 = add <16 x i16> %2239, %2228
  %2241 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2234, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2242 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2240, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2243 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2241, <16 x i16> %2234)
  %2244 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2242, <16 x i16> %2240)
  %2245 = shufflevector <16 x i16> %2243, <16 x i16> %2244, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2246 = lshr <32 x i16> %2245, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2247 = shufflevector <32 x i16> %2246, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2248 = add nsw i32 %a26, 3
  %2249 = and i32 %2248, 7
  %2250 = zext i32 %2249 to i64
  %2251 = mul nsw i64 %97, %2250
  %2252 = add nsw i64 %99, %2251
  %2253 = getelementptr inbounds i16, i16* %blur_x, i64 %2252
  %2254 = getelementptr inbounds i16, i16* %2253, i64 -32
  %2255 = bitcast i16* %2254 to <16 x i16>*
  store <16 x i16> %2247, <16 x i16>* %2255, align 2, !tbaa !399
  %2256 = shufflevector <32 x i16> %2246, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2257 = getelementptr inbounds i16, i16* %2253, i64 -16
  %2258 = bitcast i16* %2257 to <16 x i16>*
  store <16 x i16> %2256, <16 x i16>* %2258, align 2, !tbaa !399
  br label %after_bb73

"for blur_y.s0.x.x.rebased77":                    ; preds = %"for blur_y.s0.x.x.rebased77.preheader", %after_bb80
  %indvars.iv3380 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased77.preheader" ], [ %indvars.iv.next3381, %after_bb80 ]
  %2259 = add nsw i64 %indvars.iv3380, %101
  %2260 = icmp slt i64 %2259, 1
  %2261 = trunc i64 %2259 to i32
  %2262 = shl nsw i32 %2261, 5
  %2263 = icmp sgt i32 %4, %2262
  %2264 = or i1 %2260, %2263
  br i1 %2264, label %"produce blur_x83", label %after_bb80

"end for blur_y.s0.x.x.rebased78":                ; preds = %after_bb80, %after_bb73
  br i1 %102, label %"for blur_y.s0.x.x.rebased84.preheader", label %"end for blur_y.s0.x.x.rebased85", !prof !386

"for blur_y.s0.x.x.rebased84.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased78"
  %2265 = sext i32 %t1744 to i64
  br label %"for blur_y.s0.x.x.rebased84"

after_bb80:                                       ; preds = %"for blur_y.s0.x.x.rebased77", %"produce blur_x83"
  %indvars.iv.next3381 = add nuw nsw i64 %indvars.iv3380, 1
  %.not2877 = icmp eq i64 %indvars.iv.next3381, %188
  br i1 %.not2877, label %"end for blur_y.s0.x.x.rebased78", label %"for blur_y.s0.x.x.rebased77"

"produce blur_x83":                               ; preds = %"for blur_y.s0.x.x.rebased77"
  %t730 = add nsw i32 %2262, %t1743
  %2266 = sext i32 %t730 to i64
  %2267 = getelementptr inbounds i16, i16* %read_input, i64 %2266
  %2268 = getelementptr inbounds i16, i16* %2267, i64 1
  %2269 = bitcast i16* %2268 to <16 x i16>*
  %2270 = load <16 x i16>, <16 x i16>* %2269, align 2, !tbaa !396
  %2271 = getelementptr inbounds i16, i16* %2267, i64 17
  %2272 = bitcast i16* %2271 to <16 x i16>*
  %2273 = load <16 x i16>, <16 x i16>* %2272, align 2, !tbaa !396
  %2274 = bitcast i16* %2267 to <16 x i16>*
  %2275 = load <16 x i16>, <16 x i16>* %2274, align 2, !tbaa !396
  %2276 = getelementptr inbounds i16, i16* %2267, i64 16
  %2277 = bitcast i16* %2276 to <16 x i16>*
  %2278 = load <16 x i16>, <16 x i16>* %2277, align 2, !tbaa !396
  %2279 = getelementptr inbounds i16, i16* %2267, i64 2
  %2280 = bitcast i16* %2279 to <16 x i16>*
  %2281 = load <16 x i16>, <16 x i16>* %2280, align 2, !tbaa !396
  %2282 = getelementptr inbounds i16, i16* %2267, i64 18
  %2283 = bitcast i16* %2282 to <16 x i16>*
  %2284 = load <16 x i16>, <16 x i16>* %2283, align 2, !tbaa !396
  %2285 = getelementptr inbounds i16, i16* %2267, i64 3
  %2286 = bitcast i16* %2285 to <16 x i16>*
  %2287 = load <16 x i16>, <16 x i16>* %2286, align 2, !tbaa !396
  %2288 = getelementptr inbounds i16, i16* %2267, i64 19
  %2289 = bitcast i16* %2288 to <16 x i16>*
  %2290 = load <16 x i16>, <16 x i16>* %2289, align 2, !tbaa !396
  %2291 = getelementptr inbounds i16, i16* %2267, i64 4
  %2292 = bitcast i16* %2291 to <16 x i16>*
  %2293 = load <16 x i16>, <16 x i16>* %2292, align 2, !tbaa !396
  %2294 = getelementptr inbounds i16, i16* %2267, i64 20
  %2295 = bitcast i16* %2294 to <16 x i16>*
  %2296 = load <16 x i16>, <16 x i16>* %2295, align 2, !tbaa !396
  %2297 = getelementptr inbounds i16, i16* %2267, i64 6
  %2298 = bitcast i16* %2297 to <16 x i16>*
  %2299 = load <16 x i16>, <16 x i16>* %2298, align 2, !tbaa !396
  %2300 = getelementptr inbounds i16, i16* %2267, i64 22
  %2301 = bitcast i16* %2300 to <16 x i16>*
  %2302 = load <16 x i16>, <16 x i16>* %2301, align 2, !tbaa !396
  %2303 = getelementptr inbounds i16, i16* %2267, i64 5
  %2304 = bitcast i16* %2303 to <16 x i16>*
  %2305 = load <16 x i16>, <16 x i16>* %2304, align 2, !tbaa !396
  %2306 = getelementptr inbounds i16, i16* %2267, i64 21
  %2307 = bitcast i16* %2306 to <16 x i16>*
  %2308 = load <16 x i16>, <16 x i16>* %2307, align 2, !tbaa !396
  %2309 = add <16 x i16> %2275, %2270
  %2310 = add <16 x i16> %2309, %2281
  %2311 = add <16 x i16> %2310, %2287
  %2312 = add <16 x i16> %2311, %2293
  %2313 = add <16 x i16> %2312, %2299
  %2314 = add <16 x i16> %2313, %2305
  %2315 = add <16 x i16> %2278, %2273
  %2316 = add <16 x i16> %2315, %2284
  %2317 = add <16 x i16> %2316, %2290
  %2318 = add <16 x i16> %2317, %2296
  %2319 = add <16 x i16> %2318, %2302
  %2320 = add <16 x i16> %2319, %2308
  %2321 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2314, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2322 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2320, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2323 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2321, <16 x i16> %2314)
  %2324 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2322, <16 x i16> %2320)
  %2325 = shufflevector <16 x i16> %2323, <16 x i16> %2324, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2326 = lshr <32 x i16> %2325, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2327 = shufflevector <32 x i16> %2326, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2328 = shl nsw i64 %2259, 5
  %2329 = add nsw i64 %2328, %2185
  %2330 = getelementptr inbounds i16, i16* %blur_x, i64 %2329
  %2331 = bitcast i16* %2330 to <16 x i16>*
  store <16 x i16> %2327, <16 x i16>* %2331, align 2, !tbaa !399
  %2332 = shufflevector <32 x i16> %2326, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2333 = getelementptr inbounds i16, i16* %2330, i64 16
  %2334 = bitcast i16* %2333 to <16 x i16>*
  store <16 x i16> %2332, <16 x i16>* %2334, align 2, !tbaa !399
  br label %after_bb80

"for blur_y.s0.x.x.rebased84":                    ; preds = %"for blur_y.s0.x.x.rebased84.preheader", %after_bb87
  %blur_y.s0.x.x.rebased86 = phi i32 [ %2339, %after_bb87 ], [ 0, %"for blur_y.s0.x.x.rebased84.preheader" ]
  %t2281 = add nsw i32 %blur_y.s0.x.x.rebased86, %t1670
  %2335 = icmp slt i32 %t2281, 1
  %2336 = shl nsw i32 %t2281, 5
  %2337 = icmp sgt i32 %4, %2336
  %2338 = or i1 %2335, %2337
  br i1 %2338, label %then_bb88, label %after_bb87

"end for blur_y.s0.x.x.rebased85":                ; preds = %after_bb87, %"end for blur_y.s0.x.x.rebased78"
  br i1 %34, label %"produce blur_x95", label %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge"

"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased85"
  %.pre3588 = add nsw i32 %a26, 4
  %.pre3590 = and i32 %.pre3588, 7
  br label %after_bb92

after_bb87:                                       ; preds = %"for blur_y.s0.x.x.rebased84", %then_bb88
  %2339 = add nuw nsw i32 %blur_y.s0.x.x.rebased86, 1
  %.not2876 = icmp eq i32 %2339, %t1727
  br i1 %.not2876, label %"end for blur_y.s0.x.x.rebased85", label %"for blur_y.s0.x.x.rebased84"

then_bb88:                                        ; preds = %"for blur_y.s0.x.x.rebased84"
  %2340 = icmp sgt i32 %a14, %2336
  %b104 = select i1 %2340, i32 %2336, i32 %a14
  %2341 = icmp slt i32 %b104, %4
  %blur_x.s0.x.v1.base.s91 = select i1 %2341, i32 %b104, i32 %4
  %t732 = add nsw i32 %blur_x.s0.x.v1.base.s91, %t1743
  %2342 = sext i32 %t732 to i64
  %2343 = getelementptr inbounds i16, i16* %read_input, i64 %2342
  %2344 = getelementptr inbounds i16, i16* %2343, i64 1
  %2345 = bitcast i16* %2344 to <16 x i16>*
  %2346 = load <16 x i16>, <16 x i16>* %2345, align 2, !tbaa !396
  %2347 = getelementptr inbounds i16, i16* %2343, i64 17
  %2348 = bitcast i16* %2347 to <16 x i16>*
  %2349 = load <16 x i16>, <16 x i16>* %2348, align 2, !tbaa !396
  %2350 = bitcast i16* %2343 to <16 x i16>*
  %2351 = load <16 x i16>, <16 x i16>* %2350, align 2, !tbaa !396
  %2352 = getelementptr inbounds i16, i16* %2343, i64 16
  %2353 = bitcast i16* %2352 to <16 x i16>*
  %2354 = load <16 x i16>, <16 x i16>* %2353, align 2, !tbaa !396
  %2355 = getelementptr inbounds i16, i16* %2343, i64 2
  %2356 = bitcast i16* %2355 to <16 x i16>*
  %2357 = load <16 x i16>, <16 x i16>* %2356, align 2, !tbaa !396
  %2358 = getelementptr inbounds i16, i16* %2343, i64 18
  %2359 = bitcast i16* %2358 to <16 x i16>*
  %2360 = load <16 x i16>, <16 x i16>* %2359, align 2, !tbaa !396
  %2361 = getelementptr inbounds i16, i16* %2343, i64 3
  %2362 = bitcast i16* %2361 to <16 x i16>*
  %2363 = load <16 x i16>, <16 x i16>* %2362, align 2, !tbaa !396
  %2364 = getelementptr inbounds i16, i16* %2343, i64 19
  %2365 = bitcast i16* %2364 to <16 x i16>*
  %2366 = load <16 x i16>, <16 x i16>* %2365, align 2, !tbaa !396
  %2367 = getelementptr inbounds i16, i16* %2343, i64 4
  %2368 = bitcast i16* %2367 to <16 x i16>*
  %2369 = load <16 x i16>, <16 x i16>* %2368, align 2, !tbaa !396
  %2370 = getelementptr inbounds i16, i16* %2343, i64 20
  %2371 = bitcast i16* %2370 to <16 x i16>*
  %2372 = load <16 x i16>, <16 x i16>* %2371, align 2, !tbaa !396
  %2373 = getelementptr inbounds i16, i16* %2343, i64 6
  %2374 = bitcast i16* %2373 to <16 x i16>*
  %2375 = load <16 x i16>, <16 x i16>* %2374, align 2, !tbaa !396
  %2376 = getelementptr inbounds i16, i16* %2343, i64 22
  %2377 = bitcast i16* %2376 to <16 x i16>*
  %2378 = load <16 x i16>, <16 x i16>* %2377, align 2, !tbaa !396
  %2379 = getelementptr inbounds i16, i16* %2343, i64 5
  %2380 = bitcast i16* %2379 to <16 x i16>*
  %2381 = load <16 x i16>, <16 x i16>* %2380, align 2, !tbaa !396
  %2382 = getelementptr inbounds i16, i16* %2343, i64 21
  %2383 = bitcast i16* %2382 to <16 x i16>*
  %2384 = load <16 x i16>, <16 x i16>* %2383, align 2, !tbaa !396
  %2385 = add <16 x i16> %2351, %2346
  %2386 = add <16 x i16> %2385, %2357
  %2387 = add <16 x i16> %2386, %2363
  %2388 = add <16 x i16> %2387, %2369
  %2389 = add <16 x i16> %2388, %2375
  %2390 = add <16 x i16> %2389, %2381
  %2391 = add <16 x i16> %2354, %2349
  %2392 = add <16 x i16> %2391, %2360
  %2393 = add <16 x i16> %2392, %2366
  %2394 = add <16 x i16> %2393, %2372
  %2395 = add <16 x i16> %2394, %2378
  %2396 = add <16 x i16> %2395, %2384
  %2397 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2390, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2398 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2396, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2399 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2397, <16 x i16> %2390)
  %2400 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2398, <16 x i16> %2396)
  %2401 = shufflevector <16 x i16> %2399, <16 x i16> %2400, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2402 = lshr <32 x i16> %2401, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2403 = shufflevector <32 x i16> %2402, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2404 = sext i32 %blur_x.s0.x.v1.base.s91 to i64
  %2405 = add nsw i64 %2404, %2265
  %2406 = getelementptr inbounds i16, i16* %blur_x, i64 %2405
  %2407 = bitcast i16* %2406 to <16 x i16>*
  store <16 x i16> %2403, <16 x i16>* %2407, align 2, !tbaa !399
  %2408 = shufflevector <32 x i16> %2402, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2409 = getelementptr inbounds i16, i16* %2406, i64 16
  %2410 = bitcast i16* %2409 to <16 x i16>*
  store <16 x i16> %2408, <16 x i16>* %2410, align 2, !tbaa !399
  br label %after_bb87

after_bb92:                                       ; preds = %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge", %"produce blur_x95"
  %.pre-phi3591 = phi i32 [ %.pre3590, %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge" ], [ %2476, %"produce blur_x95" ]
  %2411 = mul nsw i32 %.pre-phi3591, %a73
  %t1750 = sub nsw i32 %2411, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased96.preheader", label %"end for blur_y.s0.x.x.rebased97", !prof !386

"for blur_y.s0.x.x.rebased96.preheader":          ; preds = %after_bb92
  %2412 = sext i32 %t1750 to i64
  br label %"for blur_y.s0.x.x.rebased96"

"produce blur_x95":                               ; preds = %"end for blur_y.s0.x.x.rebased85"
  %2413 = getelementptr inbounds i16, i16* %read_input, i64 %109
  %2414 = getelementptr inbounds i16, i16* %2413, i64 -31
  %2415 = bitcast i16* %2414 to <16 x i16>*
  %2416 = load <16 x i16>, <16 x i16>* %2415, align 2, !tbaa !396
  %2417 = getelementptr inbounds i16, i16* %2413, i64 -15
  %2418 = bitcast i16* %2417 to <16 x i16>*
  %2419 = load <16 x i16>, <16 x i16>* %2418, align 2, !tbaa !396
  %2420 = getelementptr inbounds i16, i16* %2413, i64 -32
  %2421 = bitcast i16* %2420 to <16 x i16>*
  %2422 = load <16 x i16>, <16 x i16>* %2421, align 2, !tbaa !396
  %2423 = getelementptr inbounds i16, i16* %2413, i64 -16
  %2424 = bitcast i16* %2423 to <16 x i16>*
  %2425 = load <16 x i16>, <16 x i16>* %2424, align 2, !tbaa !396
  %2426 = getelementptr inbounds i16, i16* %2413, i64 -30
  %2427 = bitcast i16* %2426 to <16 x i16>*
  %2428 = load <16 x i16>, <16 x i16>* %2427, align 2, !tbaa !396
  %2429 = getelementptr inbounds i16, i16* %2413, i64 -14
  %2430 = bitcast i16* %2429 to <16 x i16>*
  %2431 = load <16 x i16>, <16 x i16>* %2430, align 2, !tbaa !396
  %2432 = getelementptr inbounds i16, i16* %2413, i64 -29
  %2433 = bitcast i16* %2432 to <16 x i16>*
  %2434 = load <16 x i16>, <16 x i16>* %2433, align 2, !tbaa !396
  %2435 = getelementptr inbounds i16, i16* %2413, i64 -13
  %2436 = bitcast i16* %2435 to <16 x i16>*
  %2437 = load <16 x i16>, <16 x i16>* %2436, align 2, !tbaa !396
  %2438 = getelementptr inbounds i16, i16* %2413, i64 -28
  %2439 = bitcast i16* %2438 to <16 x i16>*
  %2440 = load <16 x i16>, <16 x i16>* %2439, align 2, !tbaa !396
  %2441 = getelementptr inbounds i16, i16* %2413, i64 -12
  %2442 = bitcast i16* %2441 to <16 x i16>*
  %2443 = load <16 x i16>, <16 x i16>* %2442, align 2, !tbaa !396
  %2444 = getelementptr inbounds i16, i16* %2413, i64 -26
  %2445 = bitcast i16* %2444 to <16 x i16>*
  %2446 = load <16 x i16>, <16 x i16>* %2445, align 2, !tbaa !396
  %2447 = getelementptr inbounds i16, i16* %2413, i64 -10
  %2448 = bitcast i16* %2447 to <16 x i16>*
  %2449 = load <16 x i16>, <16 x i16>* %2448, align 2, !tbaa !396
  %2450 = getelementptr inbounds i16, i16* %2413, i64 -27
  %2451 = bitcast i16* %2450 to <16 x i16>*
  %2452 = load <16 x i16>, <16 x i16>* %2451, align 2, !tbaa !396
  %2453 = getelementptr inbounds i16, i16* %2413, i64 -11
  %2454 = bitcast i16* %2453 to <16 x i16>*
  %2455 = load <16 x i16>, <16 x i16>* %2454, align 2, !tbaa !396
  %2456 = add <16 x i16> %2422, %2416
  %2457 = add <16 x i16> %2456, %2428
  %2458 = add <16 x i16> %2457, %2434
  %2459 = add <16 x i16> %2458, %2440
  %2460 = add <16 x i16> %2459, %2446
  %2461 = add <16 x i16> %2460, %2452
  %2462 = add <16 x i16> %2425, %2419
  %2463 = add <16 x i16> %2462, %2431
  %2464 = add <16 x i16> %2463, %2437
  %2465 = add <16 x i16> %2464, %2443
  %2466 = add <16 x i16> %2465, %2449
  %2467 = add <16 x i16> %2466, %2455
  %2468 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2461, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2469 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2467, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2470 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2468, <16 x i16> %2461)
  %2471 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2469, <16 x i16> %2467)
  %2472 = shufflevector <16 x i16> %2470, <16 x i16> %2471, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2473 = lshr <32 x i16> %2472, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2474 = shufflevector <32 x i16> %2473, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2475 = add nsw i32 %a26, 4
  %2476 = and i32 %2475, 7
  %2477 = zext i32 %2476 to i64
  %2478 = mul nsw i64 %97, %2477
  %2479 = add nsw i64 %99, %2478
  %2480 = getelementptr inbounds i16, i16* %blur_x, i64 %2479
  %2481 = getelementptr inbounds i16, i16* %2480, i64 -32
  %2482 = bitcast i16* %2481 to <16 x i16>*
  store <16 x i16> %2474, <16 x i16>* %2482, align 2, !tbaa !399
  %2483 = shufflevector <32 x i16> %2473, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2484 = getelementptr inbounds i16, i16* %2480, i64 -16
  %2485 = bitcast i16* %2484 to <16 x i16>*
  store <16 x i16> %2483, <16 x i16>* %2485, align 2, !tbaa !399
  br label %after_bb92

"for blur_y.s0.x.x.rebased96":                    ; preds = %"for blur_y.s0.x.x.rebased96.preheader", %after_bb99
  %indvars.iv3383 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased96.preheader" ], [ %indvars.iv.next3384, %after_bb99 ]
  %2486 = add nsw i64 %indvars.iv3383, %101
  %2487 = icmp slt i64 %2486, 1
  %2488 = trunc i64 %2486 to i32
  %2489 = shl nsw i32 %2488, 5
  %2490 = icmp sgt i32 %4, %2489
  %2491 = or i1 %2487, %2490
  br i1 %2491, label %"produce blur_x102", label %after_bb99

"end for blur_y.s0.x.x.rebased97":                ; preds = %after_bb99, %after_bb92
  br i1 %102, label %"for blur_y.s0.x.x.rebased103.preheader", label %"end for blur_y.s0.x.x.rebased104", !prof !386

"for blur_y.s0.x.x.rebased103.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased97"
  %2492 = sext i32 %t1750 to i64
  br label %"for blur_y.s0.x.x.rebased103"

after_bb99:                                       ; preds = %"for blur_y.s0.x.x.rebased96", %"produce blur_x102"
  %indvars.iv.next3384 = add nuw nsw i64 %indvars.iv3383, 1
  %.not2875 = icmp eq i64 %indvars.iv.next3384, %188
  br i1 %.not2875, label %"end for blur_y.s0.x.x.rebased97", label %"for blur_y.s0.x.x.rebased96"

"produce blur_x102":                              ; preds = %"for blur_y.s0.x.x.rebased96"
  %t736 = add nsw i32 %2489, %t1749
  %2493 = sext i32 %t736 to i64
  %2494 = getelementptr inbounds i16, i16* %read_input, i64 %2493
  %2495 = getelementptr inbounds i16, i16* %2494, i64 1
  %2496 = bitcast i16* %2495 to <16 x i16>*
  %2497 = load <16 x i16>, <16 x i16>* %2496, align 2, !tbaa !396
  %2498 = getelementptr inbounds i16, i16* %2494, i64 17
  %2499 = bitcast i16* %2498 to <16 x i16>*
  %2500 = load <16 x i16>, <16 x i16>* %2499, align 2, !tbaa !396
  %2501 = bitcast i16* %2494 to <16 x i16>*
  %2502 = load <16 x i16>, <16 x i16>* %2501, align 2, !tbaa !396
  %2503 = getelementptr inbounds i16, i16* %2494, i64 16
  %2504 = bitcast i16* %2503 to <16 x i16>*
  %2505 = load <16 x i16>, <16 x i16>* %2504, align 2, !tbaa !396
  %2506 = getelementptr inbounds i16, i16* %2494, i64 2
  %2507 = bitcast i16* %2506 to <16 x i16>*
  %2508 = load <16 x i16>, <16 x i16>* %2507, align 2, !tbaa !396
  %2509 = getelementptr inbounds i16, i16* %2494, i64 18
  %2510 = bitcast i16* %2509 to <16 x i16>*
  %2511 = load <16 x i16>, <16 x i16>* %2510, align 2, !tbaa !396
  %2512 = getelementptr inbounds i16, i16* %2494, i64 3
  %2513 = bitcast i16* %2512 to <16 x i16>*
  %2514 = load <16 x i16>, <16 x i16>* %2513, align 2, !tbaa !396
  %2515 = getelementptr inbounds i16, i16* %2494, i64 19
  %2516 = bitcast i16* %2515 to <16 x i16>*
  %2517 = load <16 x i16>, <16 x i16>* %2516, align 2, !tbaa !396
  %2518 = getelementptr inbounds i16, i16* %2494, i64 4
  %2519 = bitcast i16* %2518 to <16 x i16>*
  %2520 = load <16 x i16>, <16 x i16>* %2519, align 2, !tbaa !396
  %2521 = getelementptr inbounds i16, i16* %2494, i64 20
  %2522 = bitcast i16* %2521 to <16 x i16>*
  %2523 = load <16 x i16>, <16 x i16>* %2522, align 2, !tbaa !396
  %2524 = getelementptr inbounds i16, i16* %2494, i64 6
  %2525 = bitcast i16* %2524 to <16 x i16>*
  %2526 = load <16 x i16>, <16 x i16>* %2525, align 2, !tbaa !396
  %2527 = getelementptr inbounds i16, i16* %2494, i64 22
  %2528 = bitcast i16* %2527 to <16 x i16>*
  %2529 = load <16 x i16>, <16 x i16>* %2528, align 2, !tbaa !396
  %2530 = getelementptr inbounds i16, i16* %2494, i64 5
  %2531 = bitcast i16* %2530 to <16 x i16>*
  %2532 = load <16 x i16>, <16 x i16>* %2531, align 2, !tbaa !396
  %2533 = getelementptr inbounds i16, i16* %2494, i64 21
  %2534 = bitcast i16* %2533 to <16 x i16>*
  %2535 = load <16 x i16>, <16 x i16>* %2534, align 2, !tbaa !396
  %2536 = add <16 x i16> %2502, %2497
  %2537 = add <16 x i16> %2536, %2508
  %2538 = add <16 x i16> %2537, %2514
  %2539 = add <16 x i16> %2538, %2520
  %2540 = add <16 x i16> %2539, %2526
  %2541 = add <16 x i16> %2540, %2532
  %2542 = add <16 x i16> %2505, %2500
  %2543 = add <16 x i16> %2542, %2511
  %2544 = add <16 x i16> %2543, %2517
  %2545 = add <16 x i16> %2544, %2523
  %2546 = add <16 x i16> %2545, %2529
  %2547 = add <16 x i16> %2546, %2535
  %2548 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2541, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2549 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2547, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2550 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2548, <16 x i16> %2541)
  %2551 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2549, <16 x i16> %2547)
  %2552 = shufflevector <16 x i16> %2550, <16 x i16> %2551, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2553 = lshr <32 x i16> %2552, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2554 = shufflevector <32 x i16> %2553, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2555 = shl nsw i64 %2486, 5
  %2556 = add nsw i64 %2555, %2412
  %2557 = getelementptr inbounds i16, i16* %blur_x, i64 %2556
  %2558 = bitcast i16* %2557 to <16 x i16>*
  store <16 x i16> %2554, <16 x i16>* %2558, align 2, !tbaa !399
  %2559 = shufflevector <32 x i16> %2553, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2560 = getelementptr inbounds i16, i16* %2557, i64 16
  %2561 = bitcast i16* %2560 to <16 x i16>*
  store <16 x i16> %2559, <16 x i16>* %2561, align 2, !tbaa !399
  br label %after_bb99

"for blur_y.s0.x.x.rebased103":                   ; preds = %"for blur_y.s0.x.x.rebased103.preheader", %after_bb106
  %blur_y.s0.x.x.rebased105 = phi i32 [ %2566, %after_bb106 ], [ 0, %"for blur_y.s0.x.x.rebased103.preheader" ]
  %t2283 = add nsw i32 %blur_y.s0.x.x.rebased105, %t1670
  %2562 = icmp slt i32 %t2283, 1
  %2563 = shl nsw i32 %t2283, 5
  %2564 = icmp sgt i32 %4, %2563
  %2565 = or i1 %2562, %2564
  br i1 %2565, label %then_bb107, label %after_bb106

"end for blur_y.s0.x.x.rebased104":               ; preds = %after_bb106, %"end for blur_y.s0.x.x.rebased97"
  br i1 %34, label %"produce blur_x114", label %"end for blur_y.s0.x.x.rebased104.after_bb111_crit_edge"

"end for blur_y.s0.x.x.rebased104.after_bb111_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased104"
  %.pre3592 = add nsw i32 %a26, 5
  %.pre3594 = and i32 %.pre3592, 7
  br label %after_bb111

after_bb106:                                      ; preds = %"for blur_y.s0.x.x.rebased103", %then_bb107
  %2566 = add nuw nsw i32 %blur_y.s0.x.x.rebased105, 1
  %.not2874 = icmp eq i32 %2566, %t1727
  br i1 %.not2874, label %"end for blur_y.s0.x.x.rebased104", label %"for blur_y.s0.x.x.rebased103"

then_bb107:                                       ; preds = %"for blur_y.s0.x.x.rebased103"
  %2567 = icmp sgt i32 %a14, %2563
  %b111 = select i1 %2567, i32 %2563, i32 %a14
  %2568 = icmp slt i32 %b111, %4
  %blur_x.s0.x.v1.base.s110 = select i1 %2568, i32 %b111, i32 %4
  %t738 = add nsw i32 %blur_x.s0.x.v1.base.s110, %t1749
  %2569 = sext i32 %t738 to i64
  %2570 = getelementptr inbounds i16, i16* %read_input, i64 %2569
  %2571 = getelementptr inbounds i16, i16* %2570, i64 1
  %2572 = bitcast i16* %2571 to <16 x i16>*
  %2573 = load <16 x i16>, <16 x i16>* %2572, align 2, !tbaa !396
  %2574 = getelementptr inbounds i16, i16* %2570, i64 17
  %2575 = bitcast i16* %2574 to <16 x i16>*
  %2576 = load <16 x i16>, <16 x i16>* %2575, align 2, !tbaa !396
  %2577 = bitcast i16* %2570 to <16 x i16>*
  %2578 = load <16 x i16>, <16 x i16>* %2577, align 2, !tbaa !396
  %2579 = getelementptr inbounds i16, i16* %2570, i64 16
  %2580 = bitcast i16* %2579 to <16 x i16>*
  %2581 = load <16 x i16>, <16 x i16>* %2580, align 2, !tbaa !396
  %2582 = getelementptr inbounds i16, i16* %2570, i64 2
  %2583 = bitcast i16* %2582 to <16 x i16>*
  %2584 = load <16 x i16>, <16 x i16>* %2583, align 2, !tbaa !396
  %2585 = getelementptr inbounds i16, i16* %2570, i64 18
  %2586 = bitcast i16* %2585 to <16 x i16>*
  %2587 = load <16 x i16>, <16 x i16>* %2586, align 2, !tbaa !396
  %2588 = getelementptr inbounds i16, i16* %2570, i64 3
  %2589 = bitcast i16* %2588 to <16 x i16>*
  %2590 = load <16 x i16>, <16 x i16>* %2589, align 2, !tbaa !396
  %2591 = getelementptr inbounds i16, i16* %2570, i64 19
  %2592 = bitcast i16* %2591 to <16 x i16>*
  %2593 = load <16 x i16>, <16 x i16>* %2592, align 2, !tbaa !396
  %2594 = getelementptr inbounds i16, i16* %2570, i64 4
  %2595 = bitcast i16* %2594 to <16 x i16>*
  %2596 = load <16 x i16>, <16 x i16>* %2595, align 2, !tbaa !396
  %2597 = getelementptr inbounds i16, i16* %2570, i64 20
  %2598 = bitcast i16* %2597 to <16 x i16>*
  %2599 = load <16 x i16>, <16 x i16>* %2598, align 2, !tbaa !396
  %2600 = getelementptr inbounds i16, i16* %2570, i64 6
  %2601 = bitcast i16* %2600 to <16 x i16>*
  %2602 = load <16 x i16>, <16 x i16>* %2601, align 2, !tbaa !396
  %2603 = getelementptr inbounds i16, i16* %2570, i64 22
  %2604 = bitcast i16* %2603 to <16 x i16>*
  %2605 = load <16 x i16>, <16 x i16>* %2604, align 2, !tbaa !396
  %2606 = getelementptr inbounds i16, i16* %2570, i64 5
  %2607 = bitcast i16* %2606 to <16 x i16>*
  %2608 = load <16 x i16>, <16 x i16>* %2607, align 2, !tbaa !396
  %2609 = getelementptr inbounds i16, i16* %2570, i64 21
  %2610 = bitcast i16* %2609 to <16 x i16>*
  %2611 = load <16 x i16>, <16 x i16>* %2610, align 2, !tbaa !396
  %2612 = add <16 x i16> %2578, %2573
  %2613 = add <16 x i16> %2612, %2584
  %2614 = add <16 x i16> %2613, %2590
  %2615 = add <16 x i16> %2614, %2596
  %2616 = add <16 x i16> %2615, %2602
  %2617 = add <16 x i16> %2616, %2608
  %2618 = add <16 x i16> %2581, %2576
  %2619 = add <16 x i16> %2618, %2587
  %2620 = add <16 x i16> %2619, %2593
  %2621 = add <16 x i16> %2620, %2599
  %2622 = add <16 x i16> %2621, %2605
  %2623 = add <16 x i16> %2622, %2611
  %2624 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2617, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2625 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2623, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2626 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2624, <16 x i16> %2617)
  %2627 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2625, <16 x i16> %2623)
  %2628 = shufflevector <16 x i16> %2626, <16 x i16> %2627, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2629 = lshr <32 x i16> %2628, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2630 = shufflevector <32 x i16> %2629, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2631 = sext i32 %blur_x.s0.x.v1.base.s110 to i64
  %2632 = add nsw i64 %2631, %2492
  %2633 = getelementptr inbounds i16, i16* %blur_x, i64 %2632
  %2634 = bitcast i16* %2633 to <16 x i16>*
  store <16 x i16> %2630, <16 x i16>* %2634, align 2, !tbaa !399
  %2635 = shufflevector <32 x i16> %2629, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2636 = getelementptr inbounds i16, i16* %2633, i64 16
  %2637 = bitcast i16* %2636 to <16 x i16>*
  store <16 x i16> %2635, <16 x i16>* %2637, align 2, !tbaa !399
  br label %after_bb106

after_bb111:                                      ; preds = %"end for blur_y.s0.x.x.rebased104.after_bb111_crit_edge", %"produce blur_x114"
  %.pre-phi3595 = phi i32 [ %.pre3594, %"end for blur_y.s0.x.x.rebased104.after_bb111_crit_edge" ], [ %2703, %"produce blur_x114" ]
  %2638 = mul nsw i32 %.pre-phi3595, %a73
  %t1756 = sub nsw i32 %2638, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased115.preheader", label %"end for blur_y.s0.x.x.rebased116", !prof !386

"for blur_y.s0.x.x.rebased115.preheader":         ; preds = %after_bb111
  %2639 = sext i32 %t1756 to i64
  br label %"for blur_y.s0.x.x.rebased115"

"produce blur_x114":                              ; preds = %"end for blur_y.s0.x.x.rebased104"
  %2640 = getelementptr inbounds i16, i16* %read_input, i64 %112
  %2641 = getelementptr inbounds i16, i16* %2640, i64 -31
  %2642 = bitcast i16* %2641 to <16 x i16>*
  %2643 = load <16 x i16>, <16 x i16>* %2642, align 2, !tbaa !396
  %2644 = getelementptr inbounds i16, i16* %2640, i64 -15
  %2645 = bitcast i16* %2644 to <16 x i16>*
  %2646 = load <16 x i16>, <16 x i16>* %2645, align 2, !tbaa !396
  %2647 = getelementptr inbounds i16, i16* %2640, i64 -32
  %2648 = bitcast i16* %2647 to <16 x i16>*
  %2649 = load <16 x i16>, <16 x i16>* %2648, align 2, !tbaa !396
  %2650 = getelementptr inbounds i16, i16* %2640, i64 -16
  %2651 = bitcast i16* %2650 to <16 x i16>*
  %2652 = load <16 x i16>, <16 x i16>* %2651, align 2, !tbaa !396
  %2653 = getelementptr inbounds i16, i16* %2640, i64 -30
  %2654 = bitcast i16* %2653 to <16 x i16>*
  %2655 = load <16 x i16>, <16 x i16>* %2654, align 2, !tbaa !396
  %2656 = getelementptr inbounds i16, i16* %2640, i64 -14
  %2657 = bitcast i16* %2656 to <16 x i16>*
  %2658 = load <16 x i16>, <16 x i16>* %2657, align 2, !tbaa !396
  %2659 = getelementptr inbounds i16, i16* %2640, i64 -29
  %2660 = bitcast i16* %2659 to <16 x i16>*
  %2661 = load <16 x i16>, <16 x i16>* %2660, align 2, !tbaa !396
  %2662 = getelementptr inbounds i16, i16* %2640, i64 -13
  %2663 = bitcast i16* %2662 to <16 x i16>*
  %2664 = load <16 x i16>, <16 x i16>* %2663, align 2, !tbaa !396
  %2665 = getelementptr inbounds i16, i16* %2640, i64 -28
  %2666 = bitcast i16* %2665 to <16 x i16>*
  %2667 = load <16 x i16>, <16 x i16>* %2666, align 2, !tbaa !396
  %2668 = getelementptr inbounds i16, i16* %2640, i64 -12
  %2669 = bitcast i16* %2668 to <16 x i16>*
  %2670 = load <16 x i16>, <16 x i16>* %2669, align 2, !tbaa !396
  %2671 = getelementptr inbounds i16, i16* %2640, i64 -26
  %2672 = bitcast i16* %2671 to <16 x i16>*
  %2673 = load <16 x i16>, <16 x i16>* %2672, align 2, !tbaa !396
  %2674 = getelementptr inbounds i16, i16* %2640, i64 -10
  %2675 = bitcast i16* %2674 to <16 x i16>*
  %2676 = load <16 x i16>, <16 x i16>* %2675, align 2, !tbaa !396
  %2677 = getelementptr inbounds i16, i16* %2640, i64 -27
  %2678 = bitcast i16* %2677 to <16 x i16>*
  %2679 = load <16 x i16>, <16 x i16>* %2678, align 2, !tbaa !396
  %2680 = getelementptr inbounds i16, i16* %2640, i64 -11
  %2681 = bitcast i16* %2680 to <16 x i16>*
  %2682 = load <16 x i16>, <16 x i16>* %2681, align 2, !tbaa !396
  %2683 = add <16 x i16> %2649, %2643
  %2684 = add <16 x i16> %2683, %2655
  %2685 = add <16 x i16> %2684, %2661
  %2686 = add <16 x i16> %2685, %2667
  %2687 = add <16 x i16> %2686, %2673
  %2688 = add <16 x i16> %2687, %2679
  %2689 = add <16 x i16> %2652, %2646
  %2690 = add <16 x i16> %2689, %2658
  %2691 = add <16 x i16> %2690, %2664
  %2692 = add <16 x i16> %2691, %2670
  %2693 = add <16 x i16> %2692, %2676
  %2694 = add <16 x i16> %2693, %2682
  %2695 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2688, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2696 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2694, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2697 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2695, <16 x i16> %2688)
  %2698 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2696, <16 x i16> %2694)
  %2699 = shufflevector <16 x i16> %2697, <16 x i16> %2698, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2700 = lshr <32 x i16> %2699, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2701 = shufflevector <32 x i16> %2700, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2702 = add nsw i32 %a26, 5
  %2703 = and i32 %2702, 7
  %2704 = zext i32 %2703 to i64
  %2705 = mul nsw i64 %97, %2704
  %2706 = add nsw i64 %99, %2705
  %2707 = getelementptr inbounds i16, i16* %blur_x, i64 %2706
  %2708 = getelementptr inbounds i16, i16* %2707, i64 -32
  %2709 = bitcast i16* %2708 to <16 x i16>*
  store <16 x i16> %2701, <16 x i16>* %2709, align 2, !tbaa !399
  %2710 = shufflevector <32 x i16> %2700, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2711 = getelementptr inbounds i16, i16* %2707, i64 -16
  %2712 = bitcast i16* %2711 to <16 x i16>*
  store <16 x i16> %2710, <16 x i16>* %2712, align 2, !tbaa !399
  br label %after_bb111

"for blur_y.s0.x.x.rebased115":                   ; preds = %"for blur_y.s0.x.x.rebased115.preheader", %after_bb118
  %indvars.iv3386 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased115.preheader" ], [ %indvars.iv.next3387, %after_bb118 ]
  %2713 = add nsw i64 %indvars.iv3386, %101
  %2714 = icmp slt i64 %2713, 1
  %2715 = trunc i64 %2713 to i32
  %2716 = shl nsw i32 %2715, 5
  %2717 = icmp sgt i32 %4, %2716
  %2718 = or i1 %2714, %2717
  br i1 %2718, label %"produce blur_x121", label %after_bb118

"end for blur_y.s0.x.x.rebased116":               ; preds = %after_bb118, %after_bb111
  br i1 %102, label %"for blur_y.s0.x.x.rebased122.preheader", label %"end for blur_y.s0.x.x.rebased123", !prof !386

"for blur_y.s0.x.x.rebased122.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased116"
  %2719 = sext i32 %t1756 to i64
  br label %"for blur_y.s0.x.x.rebased122"

after_bb118:                                      ; preds = %"for blur_y.s0.x.x.rebased115", %"produce blur_x121"
  %indvars.iv.next3387 = add nuw nsw i64 %indvars.iv3386, 1
  %.not2873 = icmp eq i64 %indvars.iv.next3387, %188
  br i1 %.not2873, label %"end for blur_y.s0.x.x.rebased116", label %"for blur_y.s0.x.x.rebased115"

"produce blur_x121":                              ; preds = %"for blur_y.s0.x.x.rebased115"
  %t742 = add nsw i32 %2716, %t1755
  %2720 = sext i32 %t742 to i64
  %2721 = getelementptr inbounds i16, i16* %read_input, i64 %2720
  %2722 = getelementptr inbounds i16, i16* %2721, i64 1
  %2723 = bitcast i16* %2722 to <16 x i16>*
  %2724 = load <16 x i16>, <16 x i16>* %2723, align 2, !tbaa !396
  %2725 = getelementptr inbounds i16, i16* %2721, i64 17
  %2726 = bitcast i16* %2725 to <16 x i16>*
  %2727 = load <16 x i16>, <16 x i16>* %2726, align 2, !tbaa !396
  %2728 = bitcast i16* %2721 to <16 x i16>*
  %2729 = load <16 x i16>, <16 x i16>* %2728, align 2, !tbaa !396
  %2730 = getelementptr inbounds i16, i16* %2721, i64 16
  %2731 = bitcast i16* %2730 to <16 x i16>*
  %2732 = load <16 x i16>, <16 x i16>* %2731, align 2, !tbaa !396
  %2733 = getelementptr inbounds i16, i16* %2721, i64 2
  %2734 = bitcast i16* %2733 to <16 x i16>*
  %2735 = load <16 x i16>, <16 x i16>* %2734, align 2, !tbaa !396
  %2736 = getelementptr inbounds i16, i16* %2721, i64 18
  %2737 = bitcast i16* %2736 to <16 x i16>*
  %2738 = load <16 x i16>, <16 x i16>* %2737, align 2, !tbaa !396
  %2739 = getelementptr inbounds i16, i16* %2721, i64 3
  %2740 = bitcast i16* %2739 to <16 x i16>*
  %2741 = load <16 x i16>, <16 x i16>* %2740, align 2, !tbaa !396
  %2742 = getelementptr inbounds i16, i16* %2721, i64 19
  %2743 = bitcast i16* %2742 to <16 x i16>*
  %2744 = load <16 x i16>, <16 x i16>* %2743, align 2, !tbaa !396
  %2745 = getelementptr inbounds i16, i16* %2721, i64 4
  %2746 = bitcast i16* %2745 to <16 x i16>*
  %2747 = load <16 x i16>, <16 x i16>* %2746, align 2, !tbaa !396
  %2748 = getelementptr inbounds i16, i16* %2721, i64 20
  %2749 = bitcast i16* %2748 to <16 x i16>*
  %2750 = load <16 x i16>, <16 x i16>* %2749, align 2, !tbaa !396
  %2751 = getelementptr inbounds i16, i16* %2721, i64 6
  %2752 = bitcast i16* %2751 to <16 x i16>*
  %2753 = load <16 x i16>, <16 x i16>* %2752, align 2, !tbaa !396
  %2754 = getelementptr inbounds i16, i16* %2721, i64 22
  %2755 = bitcast i16* %2754 to <16 x i16>*
  %2756 = load <16 x i16>, <16 x i16>* %2755, align 2, !tbaa !396
  %2757 = getelementptr inbounds i16, i16* %2721, i64 5
  %2758 = bitcast i16* %2757 to <16 x i16>*
  %2759 = load <16 x i16>, <16 x i16>* %2758, align 2, !tbaa !396
  %2760 = getelementptr inbounds i16, i16* %2721, i64 21
  %2761 = bitcast i16* %2760 to <16 x i16>*
  %2762 = load <16 x i16>, <16 x i16>* %2761, align 2, !tbaa !396
  %2763 = add <16 x i16> %2729, %2724
  %2764 = add <16 x i16> %2763, %2735
  %2765 = add <16 x i16> %2764, %2741
  %2766 = add <16 x i16> %2765, %2747
  %2767 = add <16 x i16> %2766, %2753
  %2768 = add <16 x i16> %2767, %2759
  %2769 = add <16 x i16> %2732, %2727
  %2770 = add <16 x i16> %2769, %2738
  %2771 = add <16 x i16> %2770, %2744
  %2772 = add <16 x i16> %2771, %2750
  %2773 = add <16 x i16> %2772, %2756
  %2774 = add <16 x i16> %2773, %2762
  %2775 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2768, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2776 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2774, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2777 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2775, <16 x i16> %2768)
  %2778 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2776, <16 x i16> %2774)
  %2779 = shufflevector <16 x i16> %2777, <16 x i16> %2778, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2780 = lshr <32 x i16> %2779, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2781 = shufflevector <32 x i16> %2780, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2782 = shl nsw i64 %2713, 5
  %2783 = add nsw i64 %2782, %2639
  %2784 = getelementptr inbounds i16, i16* %blur_x, i64 %2783
  %2785 = bitcast i16* %2784 to <16 x i16>*
  store <16 x i16> %2781, <16 x i16>* %2785, align 2, !tbaa !399
  %2786 = shufflevector <32 x i16> %2780, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2787 = getelementptr inbounds i16, i16* %2784, i64 16
  %2788 = bitcast i16* %2787 to <16 x i16>*
  store <16 x i16> %2786, <16 x i16>* %2788, align 2, !tbaa !399
  br label %after_bb118

"for blur_y.s0.x.x.rebased122":                   ; preds = %"for blur_y.s0.x.x.rebased122.preheader", %after_bb125
  %blur_y.s0.x.x.rebased124 = phi i32 [ %2793, %after_bb125 ], [ 0, %"for blur_y.s0.x.x.rebased122.preheader" ]
  %t2285 = add nsw i32 %blur_y.s0.x.x.rebased124, %t1670
  %2789 = icmp slt i32 %t2285, 1
  %2790 = shl nsw i32 %t2285, 5
  %2791 = icmp sgt i32 %4, %2790
  %2792 = or i1 %2789, %2791
  br i1 %2792, label %then_bb126, label %after_bb125

"end for blur_y.s0.x.x.rebased123":               ; preds = %after_bb125, %"end for blur_y.s0.x.x.rebased116"
  br i1 %34, label %"produce blur_x133", label %"end for blur_y.s0.x.x.rebased123.after_bb130_crit_edge"

"end for blur_y.s0.x.x.rebased123.after_bb130_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased123"
  %.pre3596 = add nsw i32 %a26, 6
  %.pre3598 = and i32 %.pre3596, 7
  br label %after_bb130

after_bb125:                                      ; preds = %"for blur_y.s0.x.x.rebased122", %then_bb126
  %2793 = add nuw nsw i32 %blur_y.s0.x.x.rebased124, 1
  %.not2872 = icmp eq i32 %2793, %t1727
  br i1 %.not2872, label %"end for blur_y.s0.x.x.rebased123", label %"for blur_y.s0.x.x.rebased122"

then_bb126:                                       ; preds = %"for blur_y.s0.x.x.rebased122"
  %2794 = icmp sgt i32 %a14, %2790
  %b118 = select i1 %2794, i32 %2790, i32 %a14
  %2795 = icmp slt i32 %b118, %4
  %blur_x.s0.x.v1.base.s129 = select i1 %2795, i32 %b118, i32 %4
  %t744 = add nsw i32 %blur_x.s0.x.v1.base.s129, %t1755
  %2796 = sext i32 %t744 to i64
  %2797 = getelementptr inbounds i16, i16* %read_input, i64 %2796
  %2798 = getelementptr inbounds i16, i16* %2797, i64 1
  %2799 = bitcast i16* %2798 to <16 x i16>*
  %2800 = load <16 x i16>, <16 x i16>* %2799, align 2, !tbaa !396
  %2801 = getelementptr inbounds i16, i16* %2797, i64 17
  %2802 = bitcast i16* %2801 to <16 x i16>*
  %2803 = load <16 x i16>, <16 x i16>* %2802, align 2, !tbaa !396
  %2804 = bitcast i16* %2797 to <16 x i16>*
  %2805 = load <16 x i16>, <16 x i16>* %2804, align 2, !tbaa !396
  %2806 = getelementptr inbounds i16, i16* %2797, i64 16
  %2807 = bitcast i16* %2806 to <16 x i16>*
  %2808 = load <16 x i16>, <16 x i16>* %2807, align 2, !tbaa !396
  %2809 = getelementptr inbounds i16, i16* %2797, i64 2
  %2810 = bitcast i16* %2809 to <16 x i16>*
  %2811 = load <16 x i16>, <16 x i16>* %2810, align 2, !tbaa !396
  %2812 = getelementptr inbounds i16, i16* %2797, i64 18
  %2813 = bitcast i16* %2812 to <16 x i16>*
  %2814 = load <16 x i16>, <16 x i16>* %2813, align 2, !tbaa !396
  %2815 = getelementptr inbounds i16, i16* %2797, i64 3
  %2816 = bitcast i16* %2815 to <16 x i16>*
  %2817 = load <16 x i16>, <16 x i16>* %2816, align 2, !tbaa !396
  %2818 = getelementptr inbounds i16, i16* %2797, i64 19
  %2819 = bitcast i16* %2818 to <16 x i16>*
  %2820 = load <16 x i16>, <16 x i16>* %2819, align 2, !tbaa !396
  %2821 = getelementptr inbounds i16, i16* %2797, i64 4
  %2822 = bitcast i16* %2821 to <16 x i16>*
  %2823 = load <16 x i16>, <16 x i16>* %2822, align 2, !tbaa !396
  %2824 = getelementptr inbounds i16, i16* %2797, i64 20
  %2825 = bitcast i16* %2824 to <16 x i16>*
  %2826 = load <16 x i16>, <16 x i16>* %2825, align 2, !tbaa !396
  %2827 = getelementptr inbounds i16, i16* %2797, i64 6
  %2828 = bitcast i16* %2827 to <16 x i16>*
  %2829 = load <16 x i16>, <16 x i16>* %2828, align 2, !tbaa !396
  %2830 = getelementptr inbounds i16, i16* %2797, i64 22
  %2831 = bitcast i16* %2830 to <16 x i16>*
  %2832 = load <16 x i16>, <16 x i16>* %2831, align 2, !tbaa !396
  %2833 = getelementptr inbounds i16, i16* %2797, i64 5
  %2834 = bitcast i16* %2833 to <16 x i16>*
  %2835 = load <16 x i16>, <16 x i16>* %2834, align 2, !tbaa !396
  %2836 = getelementptr inbounds i16, i16* %2797, i64 21
  %2837 = bitcast i16* %2836 to <16 x i16>*
  %2838 = load <16 x i16>, <16 x i16>* %2837, align 2, !tbaa !396
  %2839 = add <16 x i16> %2805, %2800
  %2840 = add <16 x i16> %2839, %2811
  %2841 = add <16 x i16> %2840, %2817
  %2842 = add <16 x i16> %2841, %2823
  %2843 = add <16 x i16> %2842, %2829
  %2844 = add <16 x i16> %2843, %2835
  %2845 = add <16 x i16> %2808, %2803
  %2846 = add <16 x i16> %2845, %2814
  %2847 = add <16 x i16> %2846, %2820
  %2848 = add <16 x i16> %2847, %2826
  %2849 = add <16 x i16> %2848, %2832
  %2850 = add <16 x i16> %2849, %2838
  %2851 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2844, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2852 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2850, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2853 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2851, <16 x i16> %2844)
  %2854 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2852, <16 x i16> %2850)
  %2855 = shufflevector <16 x i16> %2853, <16 x i16> %2854, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2856 = lshr <32 x i16> %2855, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2857 = shufflevector <32 x i16> %2856, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2858 = sext i32 %blur_x.s0.x.v1.base.s129 to i64
  %2859 = add nsw i64 %2858, %2719
  %2860 = getelementptr inbounds i16, i16* %blur_x, i64 %2859
  %2861 = bitcast i16* %2860 to <16 x i16>*
  store <16 x i16> %2857, <16 x i16>* %2861, align 2, !tbaa !399
  %2862 = shufflevector <32 x i16> %2856, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2863 = getelementptr inbounds i16, i16* %2860, i64 16
  %2864 = bitcast i16* %2863 to <16 x i16>*
  store <16 x i16> %2862, <16 x i16>* %2864, align 2, !tbaa !399
  br label %after_bb125

after_bb130:                                      ; preds = %"end for blur_y.s0.x.x.rebased123.after_bb130_crit_edge", %"produce blur_x133"
  %.pre-phi3599 = phi i32 [ %.pre3598, %"end for blur_y.s0.x.x.rebased123.after_bb130_crit_edge" ], [ %2954, %"produce blur_x133" ]
  %2865 = mul nsw i32 %.pre-phi3599, %a73
  %t1762 = sub nsw i32 %2865, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased134.preheader", label %"end for blur_y.s0.x.x.rebased135", !prof !386

"for blur_y.s0.x.x.rebased134.preheader":         ; preds = %after_bb130
  %2866 = sext i32 %t1762 to i64
  %2867 = zext i32 %.pre-phi3579 to i64
  %2868 = mul nsw i64 %2867, %116
  %2869 = sub nsw i64 %2868, %96
  %2870 = zext i32 %.pre-phi to i64
  %2871 = mul nsw i64 %2870, %116
  %2872 = sub nsw i64 %2871, %96
  %2873 = zext i32 %.pre-phi3583 to i64
  %2874 = mul nsw i64 %2873, %116
  %2875 = sub nsw i64 %2874, %96
  %2876 = zext i32 %.pre-phi3587 to i64
  %2877 = mul nsw i64 %2876, %116
  %2878 = sub nsw i64 %2877, %96
  %2879 = zext i32 %.pre-phi3591 to i64
  %2880 = mul nsw i64 %2879, %116
  %2881 = sub nsw i64 %2880, %96
  %2882 = zext i32 %.pre-phi3599 to i64
  %2883 = mul nsw i64 %2882, %116
  %2884 = sub nsw i64 %2883, %96
  %2885 = zext i32 %.pre-phi3595 to i64
  %2886 = mul nsw i64 %2885, %116
  %2887 = sub nsw i64 %2886, %96
  %2888 = sext i32 %a26 to i64
  %2889 = mul nsw i64 %2888, %117
  %2890 = add nsw i64 %2889, %120
  br label %"for blur_y.s0.x.x.rebased134"

"produce blur_x133":                              ; preds = %"end for blur_y.s0.x.x.rebased123"
  %2891 = getelementptr inbounds i16, i16* %read_input, i64 %115
  %2892 = getelementptr inbounds i16, i16* %2891, i64 -31
  %2893 = bitcast i16* %2892 to <16 x i16>*
  %2894 = load <16 x i16>, <16 x i16>* %2893, align 2, !tbaa !396
  %2895 = getelementptr inbounds i16, i16* %2891, i64 -15
  %2896 = bitcast i16* %2895 to <16 x i16>*
  %2897 = load <16 x i16>, <16 x i16>* %2896, align 2, !tbaa !396
  %2898 = getelementptr inbounds i16, i16* %2891, i64 -32
  %2899 = bitcast i16* %2898 to <16 x i16>*
  %2900 = load <16 x i16>, <16 x i16>* %2899, align 2, !tbaa !396
  %2901 = getelementptr inbounds i16, i16* %2891, i64 -16
  %2902 = bitcast i16* %2901 to <16 x i16>*
  %2903 = load <16 x i16>, <16 x i16>* %2902, align 2, !tbaa !396
  %2904 = getelementptr inbounds i16, i16* %2891, i64 -30
  %2905 = bitcast i16* %2904 to <16 x i16>*
  %2906 = load <16 x i16>, <16 x i16>* %2905, align 2, !tbaa !396
  %2907 = getelementptr inbounds i16, i16* %2891, i64 -14
  %2908 = bitcast i16* %2907 to <16 x i16>*
  %2909 = load <16 x i16>, <16 x i16>* %2908, align 2, !tbaa !396
  %2910 = getelementptr inbounds i16, i16* %2891, i64 -29
  %2911 = bitcast i16* %2910 to <16 x i16>*
  %2912 = load <16 x i16>, <16 x i16>* %2911, align 2, !tbaa !396
  %2913 = getelementptr inbounds i16, i16* %2891, i64 -13
  %2914 = bitcast i16* %2913 to <16 x i16>*
  %2915 = load <16 x i16>, <16 x i16>* %2914, align 2, !tbaa !396
  %2916 = getelementptr inbounds i16, i16* %2891, i64 -28
  %2917 = bitcast i16* %2916 to <16 x i16>*
  %2918 = load <16 x i16>, <16 x i16>* %2917, align 2, !tbaa !396
  %2919 = getelementptr inbounds i16, i16* %2891, i64 -12
  %2920 = bitcast i16* %2919 to <16 x i16>*
  %2921 = load <16 x i16>, <16 x i16>* %2920, align 2, !tbaa !396
  %2922 = getelementptr inbounds i16, i16* %2891, i64 -26
  %2923 = bitcast i16* %2922 to <16 x i16>*
  %2924 = load <16 x i16>, <16 x i16>* %2923, align 2, !tbaa !396
  %2925 = getelementptr inbounds i16, i16* %2891, i64 -10
  %2926 = bitcast i16* %2925 to <16 x i16>*
  %2927 = load <16 x i16>, <16 x i16>* %2926, align 2, !tbaa !396
  %2928 = getelementptr inbounds i16, i16* %2891, i64 -27
  %2929 = bitcast i16* %2928 to <16 x i16>*
  %2930 = load <16 x i16>, <16 x i16>* %2929, align 2, !tbaa !396
  %2931 = getelementptr inbounds i16, i16* %2891, i64 -11
  %2932 = bitcast i16* %2931 to <16 x i16>*
  %2933 = load <16 x i16>, <16 x i16>* %2932, align 2, !tbaa !396
  %2934 = add <16 x i16> %2900, %2894
  %2935 = add <16 x i16> %2934, %2906
  %2936 = add <16 x i16> %2935, %2912
  %2937 = add <16 x i16> %2936, %2918
  %2938 = add <16 x i16> %2937, %2924
  %2939 = add <16 x i16> %2938, %2930
  %2940 = add <16 x i16> %2903, %2897
  %2941 = add <16 x i16> %2940, %2909
  %2942 = add <16 x i16> %2941, %2915
  %2943 = add <16 x i16> %2942, %2921
  %2944 = add <16 x i16> %2943, %2927
  %2945 = add <16 x i16> %2944, %2933
  %2946 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2939, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2947 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2945, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2948 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2946, <16 x i16> %2939)
  %2949 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2947, <16 x i16> %2945)
  %2950 = shufflevector <16 x i16> %2948, <16 x i16> %2949, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2951 = lshr <32 x i16> %2950, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2952 = shufflevector <32 x i16> %2951, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2953 = add nsw i32 %a26, 6
  %2954 = and i32 %2953, 7
  %2955 = zext i32 %2954 to i64
  %2956 = mul nsw i64 %97, %2955
  %2957 = add nsw i64 %99, %2956
  %2958 = getelementptr inbounds i16, i16* %blur_x, i64 %2957
  %2959 = getelementptr inbounds i16, i16* %2958, i64 -32
  %2960 = bitcast i16* %2959 to <16 x i16>*
  store <16 x i16> %2952, <16 x i16>* %2960, align 2, !tbaa !399
  %2961 = shufflevector <32 x i16> %2951, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2962 = getelementptr inbounds i16, i16* %2958, i64 -16
  %2963 = bitcast i16* %2962 to <16 x i16>*
  store <16 x i16> %2961, <16 x i16>* %2963, align 2, !tbaa !399
  %2964 = zext i32 %.pre-phi3579 to i64
  %2965 = mul nsw i64 %2964, %116
  %2966 = add nsw i64 %2965, %94
  %2967 = getelementptr inbounds i16, i16* %blur_x, i64 %2966
  %2968 = getelementptr inbounds i16, i16* %2967, i64 -32
  %2969 = bitcast i16* %2968 to <16 x i16>*
  %2970 = load <16 x i16>, <16 x i16>* %2969, align 2, !tbaa !399
  %2971 = getelementptr inbounds i16, i16* %2967, i64 -16
  %2972 = bitcast i16* %2971 to <16 x i16>*
  %2973 = load <16 x i16>, <16 x i16>* %2972, align 2, !tbaa !399
  %2974 = zext i32 %.pre-phi to i64
  %2975 = mul nsw i64 %2974, %116
  %2976 = add nsw i64 %2975, %94
  %2977 = getelementptr inbounds i16, i16* %blur_x, i64 %2976
  %2978 = getelementptr inbounds i16, i16* %2977, i64 -32
  %2979 = bitcast i16* %2978 to <16 x i16>*
  %2980 = load <16 x i16>, <16 x i16>* %2979, align 2, !tbaa !399
  %2981 = getelementptr inbounds i16, i16* %2977, i64 -16
  %2982 = bitcast i16* %2981 to <16 x i16>*
  %2983 = load <16 x i16>, <16 x i16>* %2982, align 2, !tbaa !399
  %2984 = zext i32 %.pre-phi3583 to i64
  %2985 = mul nsw i64 %2984, %116
  %2986 = add nsw i64 %2985, %94
  %2987 = getelementptr inbounds i16, i16* %blur_x, i64 %2986
  %2988 = getelementptr inbounds i16, i16* %2987, i64 -32
  %2989 = bitcast i16* %2988 to <16 x i16>*
  %2990 = load <16 x i16>, <16 x i16>* %2989, align 2, !tbaa !399
  %2991 = getelementptr inbounds i16, i16* %2987, i64 -16
  %2992 = bitcast i16* %2991 to <16 x i16>*
  %2993 = load <16 x i16>, <16 x i16>* %2992, align 2, !tbaa !399
  %2994 = zext i32 %.pre-phi3587 to i64
  %2995 = mul nsw i64 %2994, %116
  %2996 = add nsw i64 %2995, %94
  %2997 = getelementptr inbounds i16, i16* %blur_x, i64 %2996
  %2998 = getelementptr inbounds i16, i16* %2997, i64 -32
  %2999 = bitcast i16* %2998 to <16 x i16>*
  %3000 = load <16 x i16>, <16 x i16>* %2999, align 2, !tbaa !399
  %3001 = getelementptr inbounds i16, i16* %2997, i64 -16
  %3002 = bitcast i16* %3001 to <16 x i16>*
  %3003 = load <16 x i16>, <16 x i16>* %3002, align 2, !tbaa !399
  %3004 = zext i32 %.pre-phi3591 to i64
  %3005 = mul nsw i64 %3004, %116
  %3006 = add nsw i64 %3005, %94
  %3007 = getelementptr inbounds i16, i16* %blur_x, i64 %3006
  %3008 = getelementptr inbounds i16, i16* %3007, i64 -32
  %3009 = bitcast i16* %3008 to <16 x i16>*
  %3010 = load <16 x i16>, <16 x i16>* %3009, align 2, !tbaa !399
  %3011 = getelementptr inbounds i16, i16* %3007, i64 -16
  %3012 = bitcast i16* %3011 to <16 x i16>*
  %3013 = load <16 x i16>, <16 x i16>* %3012, align 2, !tbaa !399
  %3014 = mul nsw i64 %2955, %116
  %3015 = add nsw i64 %3014, %94
  %3016 = getelementptr inbounds i16, i16* %blur_x, i64 %3015
  %3017 = getelementptr inbounds i16, i16* %3016, i64 -32
  %3018 = bitcast i16* %3017 to <16 x i16>*
  %3019 = load <16 x i16>, <16 x i16>* %3018, align 2, !tbaa !399
  %3020 = getelementptr inbounds i16, i16* %3016, i64 -16
  %3021 = bitcast i16* %3020 to <16 x i16>*
  %3022 = load <16 x i16>, <16 x i16>* %3021, align 2, !tbaa !399
  %3023 = zext i32 %.pre-phi3595 to i64
  %3024 = mul nsw i64 %3023, %116
  %3025 = add nsw i64 %3024, %94
  %3026 = getelementptr inbounds i16, i16* %blur_x, i64 %3025
  %3027 = getelementptr inbounds i16, i16* %3026, i64 -32
  %3028 = bitcast i16* %3027 to <16 x i16>*
  %3029 = load <16 x i16>, <16 x i16>* %3028, align 2, !tbaa !399
  %3030 = getelementptr inbounds i16, i16* %3026, i64 -16
  %3031 = bitcast i16* %3030 to <16 x i16>*
  %3032 = load <16 x i16>, <16 x i16>* %3031, align 2, !tbaa !399
  %3033 = add <16 x i16> %2980, %2970
  %3034 = add <16 x i16> %3033, %2990
  %3035 = add <16 x i16> %3034, %3000
  %3036 = add <16 x i16> %3035, %3010
  %3037 = add <16 x i16> %3036, %3019
  %3038 = add <16 x i16> %3037, %3029
  %3039 = add <16 x i16> %2983, %2973
  %3040 = add <16 x i16> %3039, %2993
  %3041 = add <16 x i16> %3040, %3003
  %3042 = add <16 x i16> %3041, %3013
  %3043 = add <16 x i16> %3042, %3022
  %3044 = add <16 x i16> %3043, %3032
  %3045 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3038, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3046 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3044, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3047 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3045, <16 x i16> %3038)
  %3048 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3046, <16 x i16> %3044)
  %3049 = shufflevector <16 x i16> %3047, <16 x i16> %3048, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3050 = lshr <32 x i16> %3049, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3051 = shufflevector <32 x i16> %3050, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3052 = sext i32 %a26 to i64
  %3053 = mul nsw i64 %3052, %117
  %3054 = add nsw i64 %119, %3053
  %3055 = getelementptr inbounds i16, i16* %66, i64 %3054
  %3056 = getelementptr inbounds i16, i16* %3055, i64 -32
  %3057 = bitcast i16* %3056 to <16 x i16>*
  store <16 x i16> %3051, <16 x i16>* %3057, align 2, !tbaa !401
  %3058 = shufflevector <32 x i16> %3050, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3059 = getelementptr inbounds i16, i16* %3055, i64 -16
  %3060 = bitcast i16* %3059 to <16 x i16>*
  store <16 x i16> %3058, <16 x i16>* %3060, align 2, !tbaa !401
  br label %after_bb130

"for blur_y.s0.x.x.rebased134":                   ; preds = %"for blur_y.s0.x.x.rebased134.preheader", %"consume blur_x141"
  %indvars.iv3389 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased134.preheader" ], [ %indvars.iv.next3390, %"consume blur_x141" ]
  %3061 = add nsw i64 %indvars.iv3389, %101
  %3062 = icmp slt i64 %3061, 1
  %3063 = trunc i64 %3061 to i32
  %3064 = shl nsw i32 %3063, 5
  %3065 = icmp sgt i32 %4, %3064
  %3066 = or i1 %3062, %3065
  br i1 %3066, label %"produce blur_x140", label %"for blur_y.s0.x.x.rebased134.consume blur_x141_crit_edge"

"for blur_y.s0.x.x.rebased134.consume blur_x141_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased134"
  %.pre3600 = shl nsw i64 %3061, 5
  br label %"consume blur_x141"

"end for blur_y.s0.x.x.rebased135":               ; preds = %"consume blur_x141", %after_bb130
  br i1 %102, label %"for blur_y.s0.x.x.rebased142.preheader", label %"end for blur_y.s0.x.x.rebased143", !prof !386

"for blur_y.s0.x.x.rebased142.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased135"
  %3067 = sext i32 %t1762 to i64
  %3068 = zext i32 %.pre-phi3579 to i64
  %3069 = mul nsw i64 %3068, %116
  %3070 = sub nsw i64 %3069, %96
  %3071 = zext i32 %.pre-phi to i64
  %3072 = mul nsw i64 %3071, %116
  %3073 = sub nsw i64 %3072, %96
  %3074 = zext i32 %.pre-phi3583 to i64
  %3075 = mul nsw i64 %3074, %116
  %3076 = sub nsw i64 %3075, %96
  %3077 = zext i32 %.pre-phi3587 to i64
  %3078 = mul nsw i64 %3077, %116
  %3079 = sub nsw i64 %3078, %96
  %3080 = zext i32 %.pre-phi3591 to i64
  %3081 = mul nsw i64 %3080, %116
  %3082 = sub nsw i64 %3081, %96
  %3083 = zext i32 %.pre-phi3599 to i64
  %3084 = mul nsw i64 %3083, %116
  %3085 = sub nsw i64 %3084, %96
  %3086 = zext i32 %.pre-phi3595 to i64
  %3087 = mul nsw i64 %3086, %116
  %3088 = sub nsw i64 %3087, %96
  %3089 = sext i32 %a26 to i64
  %3090 = mul nsw i64 %3089, %117
  %3091 = add nsw i64 %3090, %120
  br label %"for blur_y.s0.x.x.rebased142"

"produce blur_x140":                              ; preds = %"for blur_y.s0.x.x.rebased134"
  %t752 = add nsw i32 %3064, %113
  %3092 = sext i32 %t752 to i64
  %3093 = getelementptr inbounds i16, i16* %read_input, i64 %3092
  %3094 = getelementptr inbounds i16, i16* %3093, i64 1
  %3095 = bitcast i16* %3094 to <16 x i16>*
  %3096 = load <16 x i16>, <16 x i16>* %3095, align 2, !tbaa !396
  %3097 = getelementptr inbounds i16, i16* %3093, i64 17
  %3098 = bitcast i16* %3097 to <16 x i16>*
  %3099 = load <16 x i16>, <16 x i16>* %3098, align 2, !tbaa !396
  %3100 = bitcast i16* %3093 to <16 x i16>*
  %3101 = load <16 x i16>, <16 x i16>* %3100, align 2, !tbaa !396
  %3102 = getelementptr inbounds i16, i16* %3093, i64 16
  %3103 = bitcast i16* %3102 to <16 x i16>*
  %3104 = load <16 x i16>, <16 x i16>* %3103, align 2, !tbaa !396
  %3105 = getelementptr inbounds i16, i16* %3093, i64 2
  %3106 = bitcast i16* %3105 to <16 x i16>*
  %3107 = load <16 x i16>, <16 x i16>* %3106, align 2, !tbaa !396
  %3108 = getelementptr inbounds i16, i16* %3093, i64 18
  %3109 = bitcast i16* %3108 to <16 x i16>*
  %3110 = load <16 x i16>, <16 x i16>* %3109, align 2, !tbaa !396
  %3111 = getelementptr inbounds i16, i16* %3093, i64 3
  %3112 = bitcast i16* %3111 to <16 x i16>*
  %3113 = load <16 x i16>, <16 x i16>* %3112, align 2, !tbaa !396
  %3114 = getelementptr inbounds i16, i16* %3093, i64 19
  %3115 = bitcast i16* %3114 to <16 x i16>*
  %3116 = load <16 x i16>, <16 x i16>* %3115, align 2, !tbaa !396
  %3117 = getelementptr inbounds i16, i16* %3093, i64 4
  %3118 = bitcast i16* %3117 to <16 x i16>*
  %3119 = load <16 x i16>, <16 x i16>* %3118, align 2, !tbaa !396
  %3120 = getelementptr inbounds i16, i16* %3093, i64 20
  %3121 = bitcast i16* %3120 to <16 x i16>*
  %3122 = load <16 x i16>, <16 x i16>* %3121, align 2, !tbaa !396
  %3123 = getelementptr inbounds i16, i16* %3093, i64 6
  %3124 = bitcast i16* %3123 to <16 x i16>*
  %3125 = load <16 x i16>, <16 x i16>* %3124, align 2, !tbaa !396
  %3126 = getelementptr inbounds i16, i16* %3093, i64 22
  %3127 = bitcast i16* %3126 to <16 x i16>*
  %3128 = load <16 x i16>, <16 x i16>* %3127, align 2, !tbaa !396
  %3129 = getelementptr inbounds i16, i16* %3093, i64 5
  %3130 = bitcast i16* %3129 to <16 x i16>*
  %3131 = load <16 x i16>, <16 x i16>* %3130, align 2, !tbaa !396
  %3132 = getelementptr inbounds i16, i16* %3093, i64 21
  %3133 = bitcast i16* %3132 to <16 x i16>*
  %3134 = load <16 x i16>, <16 x i16>* %3133, align 2, !tbaa !396
  %3135 = add <16 x i16> %3101, %3096
  %3136 = add <16 x i16> %3135, %3107
  %3137 = add <16 x i16> %3136, %3113
  %3138 = add <16 x i16> %3137, %3119
  %3139 = add <16 x i16> %3138, %3125
  %3140 = add <16 x i16> %3139, %3131
  %3141 = add <16 x i16> %3104, %3099
  %3142 = add <16 x i16> %3141, %3110
  %3143 = add <16 x i16> %3142, %3116
  %3144 = add <16 x i16> %3143, %3122
  %3145 = add <16 x i16> %3144, %3128
  %3146 = add <16 x i16> %3145, %3134
  %3147 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3140, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3148 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3146, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3149 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3147, <16 x i16> %3140)
  %3150 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3148, <16 x i16> %3146)
  %3151 = shufflevector <16 x i16> %3149, <16 x i16> %3150, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3152 = lshr <32 x i16> %3151, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3153 = shufflevector <32 x i16> %3152, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3154 = shl nsw i64 %3061, 5
  %3155 = add nsw i64 %3154, %2866
  %3156 = getelementptr inbounds i16, i16* %blur_x, i64 %3155
  %3157 = bitcast i16* %3156 to <16 x i16>*
  store <16 x i16> %3153, <16 x i16>* %3157, align 2, !tbaa !399
  %3158 = shufflevector <32 x i16> %3152, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3159 = getelementptr inbounds i16, i16* %3156, i64 16
  %3160 = bitcast i16* %3159 to <16 x i16>*
  store <16 x i16> %3158, <16 x i16>* %3160, align 2, !tbaa !399
  br label %"consume blur_x141"

"consume blur_x141":                              ; preds = %"for blur_y.s0.x.x.rebased134.consume blur_x141_crit_edge", %"produce blur_x140"
  %.pre-phi3601 = phi i64 [ %.pre3600, %"for blur_y.s0.x.x.rebased134.consume blur_x141_crit_edge" ], [ %3154, %"produce blur_x140" ]
  %3161 = add nsw i64 %2869, %.pre-phi3601
  %3162 = getelementptr inbounds i16, i16* %blur_x, i64 %3161
  %3163 = bitcast i16* %3162 to <16 x i16>*
  %3164 = load <16 x i16>, <16 x i16>* %3163, align 2, !tbaa !399
  %3165 = getelementptr inbounds i16, i16* %3162, i64 16
  %3166 = bitcast i16* %3165 to <16 x i16>*
  %3167 = load <16 x i16>, <16 x i16>* %3166, align 2, !tbaa !399
  %3168 = add nsw i64 %2872, %.pre-phi3601
  %3169 = getelementptr inbounds i16, i16* %blur_x, i64 %3168
  %3170 = bitcast i16* %3169 to <16 x i16>*
  %3171 = load <16 x i16>, <16 x i16>* %3170, align 2, !tbaa !399
  %3172 = getelementptr inbounds i16, i16* %3169, i64 16
  %3173 = bitcast i16* %3172 to <16 x i16>*
  %3174 = load <16 x i16>, <16 x i16>* %3173, align 2, !tbaa !399
  %3175 = add nsw i64 %2875, %.pre-phi3601
  %3176 = getelementptr inbounds i16, i16* %blur_x, i64 %3175
  %3177 = bitcast i16* %3176 to <16 x i16>*
  %3178 = load <16 x i16>, <16 x i16>* %3177, align 2, !tbaa !399
  %3179 = getelementptr inbounds i16, i16* %3176, i64 16
  %3180 = bitcast i16* %3179 to <16 x i16>*
  %3181 = load <16 x i16>, <16 x i16>* %3180, align 2, !tbaa !399
  %3182 = add nsw i64 %2878, %.pre-phi3601
  %3183 = getelementptr inbounds i16, i16* %blur_x, i64 %3182
  %3184 = bitcast i16* %3183 to <16 x i16>*
  %3185 = load <16 x i16>, <16 x i16>* %3184, align 2, !tbaa !399
  %3186 = getelementptr inbounds i16, i16* %3183, i64 16
  %3187 = bitcast i16* %3186 to <16 x i16>*
  %3188 = load <16 x i16>, <16 x i16>* %3187, align 2, !tbaa !399
  %3189 = add nsw i64 %2881, %.pre-phi3601
  %3190 = getelementptr inbounds i16, i16* %blur_x, i64 %3189
  %3191 = bitcast i16* %3190 to <16 x i16>*
  %3192 = load <16 x i16>, <16 x i16>* %3191, align 2, !tbaa !399
  %3193 = getelementptr inbounds i16, i16* %3190, i64 16
  %3194 = bitcast i16* %3193 to <16 x i16>*
  %3195 = load <16 x i16>, <16 x i16>* %3194, align 2, !tbaa !399
  %3196 = add nsw i64 %2884, %.pre-phi3601
  %3197 = getelementptr inbounds i16, i16* %blur_x, i64 %3196
  %3198 = bitcast i16* %3197 to <16 x i16>*
  %3199 = load <16 x i16>, <16 x i16>* %3198, align 2, !tbaa !399
  %3200 = getelementptr inbounds i16, i16* %3197, i64 16
  %3201 = bitcast i16* %3200 to <16 x i16>*
  %3202 = load <16 x i16>, <16 x i16>* %3201, align 2, !tbaa !399
  %3203 = add nsw i64 %2887, %.pre-phi3601
  %3204 = getelementptr inbounds i16, i16* %blur_x, i64 %3203
  %3205 = bitcast i16* %3204 to <16 x i16>*
  %3206 = load <16 x i16>, <16 x i16>* %3205, align 2, !tbaa !399
  %3207 = getelementptr inbounds i16, i16* %3204, i64 16
  %3208 = bitcast i16* %3207 to <16 x i16>*
  %3209 = load <16 x i16>, <16 x i16>* %3208, align 2, !tbaa !399
  %3210 = add <16 x i16> %3171, %3164
  %3211 = add <16 x i16> %3210, %3178
  %3212 = add <16 x i16> %3211, %3185
  %3213 = add <16 x i16> %3212, %3192
  %3214 = add <16 x i16> %3213, %3199
  %3215 = add <16 x i16> %3214, %3206
  %3216 = add <16 x i16> %3174, %3167
  %3217 = add <16 x i16> %3216, %3181
  %3218 = add <16 x i16> %3217, %3188
  %3219 = add <16 x i16> %3218, %3195
  %3220 = add <16 x i16> %3219, %3202
  %3221 = add <16 x i16> %3220, %3209
  %3222 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3215, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3223 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3221, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3224 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3222, <16 x i16> %3215)
  %3225 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3223, <16 x i16> %3221)
  %3226 = shufflevector <16 x i16> %3224, <16 x i16> %3225, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3227 = lshr <32 x i16> %3226, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3228 = shufflevector <32 x i16> %3227, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3229 = add nsw i64 %2890, %.pre-phi3601
  %3230 = getelementptr inbounds i16, i16* %66, i64 %3229
  %3231 = bitcast i16* %3230 to <16 x i16>*
  store <16 x i16> %3228, <16 x i16>* %3231, align 2, !tbaa !401
  %3232 = shufflevector <32 x i16> %3227, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3233 = getelementptr inbounds i16, i16* %3230, i64 16
  %3234 = bitcast i16* %3233 to <16 x i16>*
  store <16 x i16> %3232, <16 x i16>* %3234, align 2, !tbaa !401
  %indvars.iv.next3390 = add nuw nsw i64 %indvars.iv3389, 1
  %.not2871 = icmp eq i64 %indvars.iv.next3390, %188
  br i1 %.not2871, label %"end for blur_y.s0.x.x.rebased135", label %"for blur_y.s0.x.x.rebased134"

"for blur_y.s0.x.x.rebased142":                   ; preds = %"for blur_y.s0.x.x.rebased142.preheader", %"consume blur_x150"
  %blur_y.s0.x.x.rebased144 = phi i32 [ %3385, %"consume blur_x150" ], [ 0, %"for blur_y.s0.x.x.rebased142.preheader" ]
  %3235 = add nsw i32 %blur_y.s0.x.x.rebased144, %t1670
  %a119 = shl nsw i32 %3235, 5
  %3236 = icmp sgt i32 %a14, %a119
  %b125 = select i1 %3236, i32 %a119, i32 %a14
  %3237 = icmp slt i32 %3235, 1
  %3238 = icmp sgt i32 %4, %a119
  %3239 = or i1 %3237, %3238
  br i1 %3239, label %"produce blur_x148", label %"consume blur_x150"

"end for blur_y.s0.x.x.rebased143":               ; preds = %"consume blur_x150", %"end for blur_y.s0.x.x.rebased135"
  br i1 %34, label %"produce blur_x154", label %"end for blur_y.s0.x.x.rebased143.after_bb151_crit_edge"

"end for blur_y.s0.x.x.rebased143.after_bb151_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased143"
  %.pre3602 = add nsw i32 %a26, 7
  %.pre3604 = and i32 %.pre3602, 7
  br label %after_bb151

"produce blur_x148":                              ; preds = %"for blur_y.s0.x.x.rebased142"
  %3240 = icmp slt i32 %b125, %4
  %blur_x.s0.x.v1.base.s149 = select i1 %3240, i32 %b125, i32 %4
  %t757 = add nsw i32 %blur_x.s0.x.v1.base.s149, %113
  %3241 = sext i32 %t757 to i64
  %3242 = getelementptr inbounds i16, i16* %read_input, i64 %3241
  %3243 = getelementptr inbounds i16, i16* %3242, i64 1
  %3244 = bitcast i16* %3243 to <16 x i16>*
  %3245 = load <16 x i16>, <16 x i16>* %3244, align 2, !tbaa !396
  %3246 = getelementptr inbounds i16, i16* %3242, i64 17
  %3247 = bitcast i16* %3246 to <16 x i16>*
  %3248 = load <16 x i16>, <16 x i16>* %3247, align 2, !tbaa !396
  %3249 = bitcast i16* %3242 to <16 x i16>*
  %3250 = load <16 x i16>, <16 x i16>* %3249, align 2, !tbaa !396
  %3251 = getelementptr inbounds i16, i16* %3242, i64 16
  %3252 = bitcast i16* %3251 to <16 x i16>*
  %3253 = load <16 x i16>, <16 x i16>* %3252, align 2, !tbaa !396
  %3254 = getelementptr inbounds i16, i16* %3242, i64 2
  %3255 = bitcast i16* %3254 to <16 x i16>*
  %3256 = load <16 x i16>, <16 x i16>* %3255, align 2, !tbaa !396
  %3257 = getelementptr inbounds i16, i16* %3242, i64 18
  %3258 = bitcast i16* %3257 to <16 x i16>*
  %3259 = load <16 x i16>, <16 x i16>* %3258, align 2, !tbaa !396
  %3260 = getelementptr inbounds i16, i16* %3242, i64 3
  %3261 = bitcast i16* %3260 to <16 x i16>*
  %3262 = load <16 x i16>, <16 x i16>* %3261, align 2, !tbaa !396
  %3263 = getelementptr inbounds i16, i16* %3242, i64 19
  %3264 = bitcast i16* %3263 to <16 x i16>*
  %3265 = load <16 x i16>, <16 x i16>* %3264, align 2, !tbaa !396
  %3266 = getelementptr inbounds i16, i16* %3242, i64 4
  %3267 = bitcast i16* %3266 to <16 x i16>*
  %3268 = load <16 x i16>, <16 x i16>* %3267, align 2, !tbaa !396
  %3269 = getelementptr inbounds i16, i16* %3242, i64 20
  %3270 = bitcast i16* %3269 to <16 x i16>*
  %3271 = load <16 x i16>, <16 x i16>* %3270, align 2, !tbaa !396
  %3272 = getelementptr inbounds i16, i16* %3242, i64 6
  %3273 = bitcast i16* %3272 to <16 x i16>*
  %3274 = load <16 x i16>, <16 x i16>* %3273, align 2, !tbaa !396
  %3275 = getelementptr inbounds i16, i16* %3242, i64 22
  %3276 = bitcast i16* %3275 to <16 x i16>*
  %3277 = load <16 x i16>, <16 x i16>* %3276, align 2, !tbaa !396
  %3278 = getelementptr inbounds i16, i16* %3242, i64 5
  %3279 = bitcast i16* %3278 to <16 x i16>*
  %3280 = load <16 x i16>, <16 x i16>* %3279, align 2, !tbaa !396
  %3281 = getelementptr inbounds i16, i16* %3242, i64 21
  %3282 = bitcast i16* %3281 to <16 x i16>*
  %3283 = load <16 x i16>, <16 x i16>* %3282, align 2, !tbaa !396
  %3284 = add <16 x i16> %3250, %3245
  %3285 = add <16 x i16> %3284, %3256
  %3286 = add <16 x i16> %3285, %3262
  %3287 = add <16 x i16> %3286, %3268
  %3288 = add <16 x i16> %3287, %3274
  %3289 = add <16 x i16> %3288, %3280
  %3290 = add <16 x i16> %3253, %3248
  %3291 = add <16 x i16> %3290, %3259
  %3292 = add <16 x i16> %3291, %3265
  %3293 = add <16 x i16> %3292, %3271
  %3294 = add <16 x i16> %3293, %3277
  %3295 = add <16 x i16> %3294, %3283
  %3296 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3289, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3297 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3295, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3298 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3296, <16 x i16> %3289)
  %3299 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3297, <16 x i16> %3295)
  %3300 = shufflevector <16 x i16> %3298, <16 x i16> %3299, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3301 = lshr <32 x i16> %3300, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3302 = shufflevector <32 x i16> %3301, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3303 = sext i32 %blur_x.s0.x.v1.base.s149 to i64
  %3304 = add nsw i64 %3303, %3067
  %3305 = getelementptr inbounds i16, i16* %blur_x, i64 %3304
  %3306 = bitcast i16* %3305 to <16 x i16>*
  store <16 x i16> %3302, <16 x i16>* %3306, align 2, !tbaa !399
  %3307 = shufflevector <32 x i16> %3301, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3308 = getelementptr inbounds i16, i16* %3305, i64 16
  %3309 = bitcast i16* %3308 to <16 x i16>*
  store <16 x i16> %3307, <16 x i16>* %3309, align 2, !tbaa !399
  br label %"consume blur_x150"

"consume blur_x150":                              ; preds = %"for blur_y.s0.x.x.rebased142", %"produce blur_x148"
  %3310 = sext i32 %b125 to i64
  %3311 = add nsw i64 %3070, %3310
  %3312 = getelementptr inbounds i16, i16* %blur_x, i64 %3311
  %3313 = bitcast i16* %3312 to <16 x i16>*
  %3314 = load <16 x i16>, <16 x i16>* %3313, align 2, !tbaa !399
  %3315 = getelementptr inbounds i16, i16* %3312, i64 16
  %3316 = bitcast i16* %3315 to <16 x i16>*
  %3317 = load <16 x i16>, <16 x i16>* %3316, align 2, !tbaa !399
  %3318 = add nsw i64 %3073, %3310
  %3319 = getelementptr inbounds i16, i16* %blur_x, i64 %3318
  %3320 = bitcast i16* %3319 to <16 x i16>*
  %3321 = load <16 x i16>, <16 x i16>* %3320, align 2, !tbaa !399
  %3322 = getelementptr inbounds i16, i16* %3319, i64 16
  %3323 = bitcast i16* %3322 to <16 x i16>*
  %3324 = load <16 x i16>, <16 x i16>* %3323, align 2, !tbaa !399
  %3325 = add nsw i64 %3076, %3310
  %3326 = getelementptr inbounds i16, i16* %blur_x, i64 %3325
  %3327 = bitcast i16* %3326 to <16 x i16>*
  %3328 = load <16 x i16>, <16 x i16>* %3327, align 2, !tbaa !399
  %3329 = getelementptr inbounds i16, i16* %3326, i64 16
  %3330 = bitcast i16* %3329 to <16 x i16>*
  %3331 = load <16 x i16>, <16 x i16>* %3330, align 2, !tbaa !399
  %3332 = add nsw i64 %3079, %3310
  %3333 = getelementptr inbounds i16, i16* %blur_x, i64 %3332
  %3334 = bitcast i16* %3333 to <16 x i16>*
  %3335 = load <16 x i16>, <16 x i16>* %3334, align 2, !tbaa !399
  %3336 = getelementptr inbounds i16, i16* %3333, i64 16
  %3337 = bitcast i16* %3336 to <16 x i16>*
  %3338 = load <16 x i16>, <16 x i16>* %3337, align 2, !tbaa !399
  %3339 = add nsw i64 %3082, %3310
  %3340 = getelementptr inbounds i16, i16* %blur_x, i64 %3339
  %3341 = bitcast i16* %3340 to <16 x i16>*
  %3342 = load <16 x i16>, <16 x i16>* %3341, align 2, !tbaa !399
  %3343 = getelementptr inbounds i16, i16* %3340, i64 16
  %3344 = bitcast i16* %3343 to <16 x i16>*
  %3345 = load <16 x i16>, <16 x i16>* %3344, align 2, !tbaa !399
  %3346 = add nsw i64 %3085, %3310
  %3347 = getelementptr inbounds i16, i16* %blur_x, i64 %3346
  %3348 = bitcast i16* %3347 to <16 x i16>*
  %3349 = load <16 x i16>, <16 x i16>* %3348, align 2, !tbaa !399
  %3350 = getelementptr inbounds i16, i16* %3347, i64 16
  %3351 = bitcast i16* %3350 to <16 x i16>*
  %3352 = load <16 x i16>, <16 x i16>* %3351, align 2, !tbaa !399
  %3353 = add nsw i64 %3088, %3310
  %3354 = getelementptr inbounds i16, i16* %blur_x, i64 %3353
  %3355 = bitcast i16* %3354 to <16 x i16>*
  %3356 = load <16 x i16>, <16 x i16>* %3355, align 2, !tbaa !399
  %3357 = getelementptr inbounds i16, i16* %3354, i64 16
  %3358 = bitcast i16* %3357 to <16 x i16>*
  %3359 = load <16 x i16>, <16 x i16>* %3358, align 2, !tbaa !399
  %3360 = add <16 x i16> %3321, %3314
  %3361 = add <16 x i16> %3360, %3328
  %3362 = add <16 x i16> %3361, %3335
  %3363 = add <16 x i16> %3362, %3342
  %3364 = add <16 x i16> %3363, %3349
  %3365 = add <16 x i16> %3364, %3356
  %3366 = add <16 x i16> %3324, %3317
  %3367 = add <16 x i16> %3366, %3331
  %3368 = add <16 x i16> %3367, %3338
  %3369 = add <16 x i16> %3368, %3345
  %3370 = add <16 x i16> %3369, %3352
  %3371 = add <16 x i16> %3370, %3359
  %3372 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3365, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3373 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3371, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3374 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3372, <16 x i16> %3365)
  %3375 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3373, <16 x i16> %3371)
  %3376 = shufflevector <16 x i16> %3374, <16 x i16> %3375, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3377 = lshr <32 x i16> %3376, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3378 = shufflevector <32 x i16> %3377, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3379 = add nsw i64 %3091, %3310
  %3380 = getelementptr inbounds i16, i16* %66, i64 %3379
  %3381 = bitcast i16* %3380 to <16 x i16>*
  store <16 x i16> %3378, <16 x i16>* %3381, align 2, !tbaa !401
  %3382 = shufflevector <32 x i16> %3377, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3383 = getelementptr inbounds i16, i16* %3380, i64 16
  %3384 = bitcast i16* %3383 to <16 x i16>*
  store <16 x i16> %3382, <16 x i16>* %3384, align 2, !tbaa !401
  %3385 = add nuw nsw i32 %blur_y.s0.x.x.rebased144, 1
  %.not2870 = icmp eq i32 %3385, %t1727
  br i1 %.not2870, label %"end for blur_y.s0.x.x.rebased143", label %"for blur_y.s0.x.x.rebased142"

after_bb151:                                      ; preds = %"end for blur_y.s0.x.x.rebased143.after_bb151_crit_edge", %"produce blur_x154"
  %.pre-phi3605 = phi i32 [ %.pre3604, %"end for blur_y.s0.x.x.rebased143.after_bb151_crit_edge" ], [ %3476, %"produce blur_x154" ]
  %3386 = mul nsw i32 %.pre-phi3605, %a73
  %t1778 = sub nsw i32 %3386, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased156.preheader", label %"end for blur_y.s0.x.x.rebased157", !prof !386

"for blur_y.s0.x.x.rebased156.preheader":         ; preds = %after_bb151
  %3387 = sext i32 %t1778 to i64
  %3388 = zext i32 %.pre-phi3583 to i64
  %3389 = mul nsw i64 %3388, %116
  %3390 = sub nsw i64 %3389, %96
  %3391 = zext i32 %.pre-phi3579 to i64
  %3392 = mul nsw i64 %3391, %116
  %3393 = sub nsw i64 %3392, %96
  %3394 = zext i32 %.pre-phi3587 to i64
  %3395 = mul nsw i64 %3394, %116
  %3396 = sub nsw i64 %3395, %96
  %3397 = zext i32 %.pre-phi3591 to i64
  %3398 = mul nsw i64 %3397, %116
  %3399 = sub nsw i64 %3398, %96
  %3400 = zext i32 %.pre-phi3595 to i64
  %3401 = mul nsw i64 %3400, %116
  %3402 = sub nsw i64 %3401, %96
  %3403 = zext i32 %.pre-phi3605 to i64
  %3404 = mul nsw i64 %3403, %116
  %3405 = sub nsw i64 %3404, %96
  %3406 = zext i32 %.pre-phi3599 to i64
  %3407 = mul nsw i64 %3406, %116
  %3408 = sub nsw i64 %3407, %96
  %3409 = sext i32 %a26 to i64
  %3410 = add nsw i64 %3409, 1
  %3411 = mul nsw i64 %3410, %117
  %3412 = add nsw i64 %3411, %120
  br label %"for blur_y.s0.x.x.rebased156"

"produce blur_x154":                              ; preds = %"end for blur_y.s0.x.x.rebased143"
  %3413 = getelementptr inbounds i16, i16* %read_input, i64 %121
  %3414 = getelementptr inbounds i16, i16* %3413, i64 -31
  %3415 = bitcast i16* %3414 to <16 x i16>*
  %3416 = load <16 x i16>, <16 x i16>* %3415, align 2, !tbaa !396
  %3417 = getelementptr inbounds i16, i16* %3413, i64 -15
  %3418 = bitcast i16* %3417 to <16 x i16>*
  %3419 = load <16 x i16>, <16 x i16>* %3418, align 2, !tbaa !396
  %3420 = getelementptr inbounds i16, i16* %3413, i64 -32
  %3421 = bitcast i16* %3420 to <16 x i16>*
  %3422 = load <16 x i16>, <16 x i16>* %3421, align 2, !tbaa !396
  %3423 = getelementptr inbounds i16, i16* %3413, i64 -16
  %3424 = bitcast i16* %3423 to <16 x i16>*
  %3425 = load <16 x i16>, <16 x i16>* %3424, align 2, !tbaa !396
  %3426 = getelementptr inbounds i16, i16* %3413, i64 -30
  %3427 = bitcast i16* %3426 to <16 x i16>*
  %3428 = load <16 x i16>, <16 x i16>* %3427, align 2, !tbaa !396
  %3429 = getelementptr inbounds i16, i16* %3413, i64 -14
  %3430 = bitcast i16* %3429 to <16 x i16>*
  %3431 = load <16 x i16>, <16 x i16>* %3430, align 2, !tbaa !396
  %3432 = getelementptr inbounds i16, i16* %3413, i64 -29
  %3433 = bitcast i16* %3432 to <16 x i16>*
  %3434 = load <16 x i16>, <16 x i16>* %3433, align 2, !tbaa !396
  %3435 = getelementptr inbounds i16, i16* %3413, i64 -13
  %3436 = bitcast i16* %3435 to <16 x i16>*
  %3437 = load <16 x i16>, <16 x i16>* %3436, align 2, !tbaa !396
  %3438 = getelementptr inbounds i16, i16* %3413, i64 -28
  %3439 = bitcast i16* %3438 to <16 x i16>*
  %3440 = load <16 x i16>, <16 x i16>* %3439, align 2, !tbaa !396
  %3441 = getelementptr inbounds i16, i16* %3413, i64 -12
  %3442 = bitcast i16* %3441 to <16 x i16>*
  %3443 = load <16 x i16>, <16 x i16>* %3442, align 2, !tbaa !396
  %3444 = getelementptr inbounds i16, i16* %3413, i64 -26
  %3445 = bitcast i16* %3444 to <16 x i16>*
  %3446 = load <16 x i16>, <16 x i16>* %3445, align 2, !tbaa !396
  %3447 = getelementptr inbounds i16, i16* %3413, i64 -10
  %3448 = bitcast i16* %3447 to <16 x i16>*
  %3449 = load <16 x i16>, <16 x i16>* %3448, align 2, !tbaa !396
  %3450 = getelementptr inbounds i16, i16* %3413, i64 -27
  %3451 = bitcast i16* %3450 to <16 x i16>*
  %3452 = load <16 x i16>, <16 x i16>* %3451, align 2, !tbaa !396
  %3453 = getelementptr inbounds i16, i16* %3413, i64 -11
  %3454 = bitcast i16* %3453 to <16 x i16>*
  %3455 = load <16 x i16>, <16 x i16>* %3454, align 2, !tbaa !396
  %3456 = add <16 x i16> %3422, %3416
  %3457 = add <16 x i16> %3456, %3428
  %3458 = add <16 x i16> %3457, %3434
  %3459 = add <16 x i16> %3458, %3440
  %3460 = add <16 x i16> %3459, %3446
  %3461 = add <16 x i16> %3460, %3452
  %3462 = add <16 x i16> %3425, %3419
  %3463 = add <16 x i16> %3462, %3431
  %3464 = add <16 x i16> %3463, %3437
  %3465 = add <16 x i16> %3464, %3443
  %3466 = add <16 x i16> %3465, %3449
  %3467 = add <16 x i16> %3466, %3455
  %3468 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3461, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3469 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3467, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3470 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3468, <16 x i16> %3461)
  %3471 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3469, <16 x i16> %3467)
  %3472 = shufflevector <16 x i16> %3470, <16 x i16> %3471, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3473 = lshr <32 x i16> %3472, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3474 = shufflevector <32 x i16> %3473, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3475 = add nsw i32 %a26, 7
  %3476 = and i32 %3475, 7
  %3477 = zext i32 %3476 to i64
  %3478 = mul nsw i64 %97, %3477
  %3479 = add nsw i64 %99, %3478
  %3480 = getelementptr inbounds i16, i16* %blur_x, i64 %3479
  %3481 = getelementptr inbounds i16, i16* %3480, i64 -32
  %3482 = bitcast i16* %3481 to <16 x i16>*
  store <16 x i16> %3474, <16 x i16>* %3482, align 2, !tbaa !399
  %3483 = shufflevector <32 x i16> %3473, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3484 = getelementptr inbounds i16, i16* %3480, i64 -16
  %3485 = bitcast i16* %3484 to <16 x i16>*
  store <16 x i16> %3483, <16 x i16>* %3485, align 2, !tbaa !399
  %3486 = zext i32 %.pre-phi3583 to i64
  %3487 = mul nsw i64 %3486, %116
  %3488 = add nsw i64 %3487, %94
  %3489 = getelementptr inbounds i16, i16* %blur_x, i64 %3488
  %3490 = getelementptr inbounds i16, i16* %3489, i64 -32
  %3491 = bitcast i16* %3490 to <16 x i16>*
  %3492 = load <16 x i16>, <16 x i16>* %3491, align 2, !tbaa !399
  %3493 = getelementptr inbounds i16, i16* %3489, i64 -16
  %3494 = bitcast i16* %3493 to <16 x i16>*
  %3495 = load <16 x i16>, <16 x i16>* %3494, align 2, !tbaa !399
  %3496 = zext i32 %.pre-phi3579 to i64
  %3497 = mul nsw i64 %3496, %116
  %3498 = add nsw i64 %3497, %94
  %3499 = getelementptr inbounds i16, i16* %blur_x, i64 %3498
  %3500 = getelementptr inbounds i16, i16* %3499, i64 -32
  %3501 = bitcast i16* %3500 to <16 x i16>*
  %3502 = load <16 x i16>, <16 x i16>* %3501, align 2, !tbaa !399
  %3503 = getelementptr inbounds i16, i16* %3499, i64 -16
  %3504 = bitcast i16* %3503 to <16 x i16>*
  %3505 = load <16 x i16>, <16 x i16>* %3504, align 2, !tbaa !399
  %3506 = zext i32 %.pre-phi3587 to i64
  %3507 = mul nsw i64 %3506, %116
  %3508 = add nsw i64 %3507, %94
  %3509 = getelementptr inbounds i16, i16* %blur_x, i64 %3508
  %3510 = getelementptr inbounds i16, i16* %3509, i64 -32
  %3511 = bitcast i16* %3510 to <16 x i16>*
  %3512 = load <16 x i16>, <16 x i16>* %3511, align 2, !tbaa !399
  %3513 = getelementptr inbounds i16, i16* %3509, i64 -16
  %3514 = bitcast i16* %3513 to <16 x i16>*
  %3515 = load <16 x i16>, <16 x i16>* %3514, align 2, !tbaa !399
  %3516 = zext i32 %.pre-phi3591 to i64
  %3517 = mul nsw i64 %3516, %116
  %3518 = add nsw i64 %3517, %94
  %3519 = getelementptr inbounds i16, i16* %blur_x, i64 %3518
  %3520 = getelementptr inbounds i16, i16* %3519, i64 -32
  %3521 = bitcast i16* %3520 to <16 x i16>*
  %3522 = load <16 x i16>, <16 x i16>* %3521, align 2, !tbaa !399
  %3523 = getelementptr inbounds i16, i16* %3519, i64 -16
  %3524 = bitcast i16* %3523 to <16 x i16>*
  %3525 = load <16 x i16>, <16 x i16>* %3524, align 2, !tbaa !399
  %3526 = zext i32 %.pre-phi3595 to i64
  %3527 = mul nsw i64 %3526, %116
  %3528 = add nsw i64 %3527, %94
  %3529 = getelementptr inbounds i16, i16* %blur_x, i64 %3528
  %3530 = getelementptr inbounds i16, i16* %3529, i64 -32
  %3531 = bitcast i16* %3530 to <16 x i16>*
  %3532 = load <16 x i16>, <16 x i16>* %3531, align 2, !tbaa !399
  %3533 = getelementptr inbounds i16, i16* %3529, i64 -16
  %3534 = bitcast i16* %3533 to <16 x i16>*
  %3535 = load <16 x i16>, <16 x i16>* %3534, align 2, !tbaa !399
  %3536 = mul nsw i64 %3477, %116
  %3537 = add nsw i64 %3536, %94
  %3538 = getelementptr inbounds i16, i16* %blur_x, i64 %3537
  %3539 = getelementptr inbounds i16, i16* %3538, i64 -32
  %3540 = bitcast i16* %3539 to <16 x i16>*
  %3541 = load <16 x i16>, <16 x i16>* %3540, align 2, !tbaa !399
  %3542 = getelementptr inbounds i16, i16* %3538, i64 -16
  %3543 = bitcast i16* %3542 to <16 x i16>*
  %3544 = load <16 x i16>, <16 x i16>* %3543, align 2, !tbaa !399
  %3545 = zext i32 %.pre-phi3599 to i64
  %3546 = mul nsw i64 %3545, %116
  %3547 = add nsw i64 %3546, %94
  %3548 = getelementptr inbounds i16, i16* %blur_x, i64 %3547
  %3549 = getelementptr inbounds i16, i16* %3548, i64 -32
  %3550 = bitcast i16* %3549 to <16 x i16>*
  %3551 = load <16 x i16>, <16 x i16>* %3550, align 2, !tbaa !399
  %3552 = getelementptr inbounds i16, i16* %3548, i64 -16
  %3553 = bitcast i16* %3552 to <16 x i16>*
  %3554 = load <16 x i16>, <16 x i16>* %3553, align 2, !tbaa !399
  %3555 = add <16 x i16> %3502, %3492
  %3556 = add <16 x i16> %3555, %3512
  %3557 = add <16 x i16> %3556, %3522
  %3558 = add <16 x i16> %3557, %3532
  %3559 = add <16 x i16> %3558, %3541
  %3560 = add <16 x i16> %3559, %3551
  %3561 = add <16 x i16> %3505, %3495
  %3562 = add <16 x i16> %3561, %3515
  %3563 = add <16 x i16> %3562, %3525
  %3564 = add <16 x i16> %3563, %3535
  %3565 = add <16 x i16> %3564, %3544
  %3566 = add <16 x i16> %3565, %3554
  %3567 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3560, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3568 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3566, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3569 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3567, <16 x i16> %3560)
  %3570 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3568, <16 x i16> %3566)
  %3571 = shufflevector <16 x i16> %3569, <16 x i16> %3570, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3572 = lshr <32 x i16> %3571, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3573 = shufflevector <32 x i16> %3572, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3574 = sext i32 %a26 to i64
  %3575 = add nsw i64 %3574, 1
  %3576 = mul nsw i64 %3575, %117
  %3577 = add nsw i64 %119, %3576
  %3578 = getelementptr inbounds i16, i16* %66, i64 %3577
  %3579 = getelementptr inbounds i16, i16* %3578, i64 -32
  %3580 = bitcast i16* %3579 to <16 x i16>*
  store <16 x i16> %3573, <16 x i16>* %3580, align 2, !tbaa !401
  %3581 = shufflevector <32 x i16> %3572, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3582 = getelementptr inbounds i16, i16* %3578, i64 -16
  %3583 = bitcast i16* %3582 to <16 x i16>*
  store <16 x i16> %3581, <16 x i16>* %3583, align 2, !tbaa !401
  br label %after_bb151

"for blur_y.s0.x.x.rebased156":                   ; preds = %"for blur_y.s0.x.x.rebased156.preheader", %"consume blur_x163"
  %indvars.iv3392 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased156.preheader" ], [ %indvars.iv.next3393, %"consume blur_x163" ]
  %3584 = add nsw i64 %indvars.iv3392, %101
  %3585 = icmp slt i64 %3584, 1
  %3586 = trunc i64 %3584 to i32
  %3587 = shl nsw i32 %3586, 5
  %3588 = icmp sgt i32 %4, %3587
  %3589 = or i1 %3585, %3588
  br i1 %3589, label %"produce blur_x162", label %"for blur_y.s0.x.x.rebased156.consume blur_x163_crit_edge"

"for blur_y.s0.x.x.rebased156.consume blur_x163_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased156"
  %.pre3606 = shl nsw i64 %3584, 5
  br label %"consume blur_x163"

"end for blur_y.s0.x.x.rebased157":               ; preds = %"consume blur_x163", %after_bb151
  br i1 %102, label %"for blur_y.s0.x.x.rebased164.preheader", label %"end for blur_y.s0.x.x.rebased165", !prof !386

"for blur_y.s0.x.x.rebased164.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased157"
  %3590 = sext i32 %t1778 to i64
  %3591 = zext i32 %.pre-phi3583 to i64
  %3592 = mul nsw i64 %3591, %116
  %3593 = sub nsw i64 %3592, %96
  %3594 = zext i32 %.pre-phi3579 to i64
  %3595 = mul nsw i64 %3594, %116
  %3596 = sub nsw i64 %3595, %96
  %3597 = zext i32 %.pre-phi3587 to i64
  %3598 = mul nsw i64 %3597, %116
  %3599 = sub nsw i64 %3598, %96
  %3600 = zext i32 %.pre-phi3591 to i64
  %3601 = mul nsw i64 %3600, %116
  %3602 = sub nsw i64 %3601, %96
  %3603 = zext i32 %.pre-phi3595 to i64
  %3604 = mul nsw i64 %3603, %116
  %3605 = sub nsw i64 %3604, %96
  %3606 = zext i32 %.pre-phi3605 to i64
  %3607 = mul nsw i64 %3606, %116
  %3608 = sub nsw i64 %3607, %96
  %3609 = zext i32 %.pre-phi3599 to i64
  %3610 = mul nsw i64 %3609, %116
  %3611 = sub nsw i64 %3610, %96
  %3612 = sext i32 %a26 to i64
  %3613 = add nsw i64 %3612, 1
  %3614 = mul nsw i64 %3613, %117
  %3615 = add nsw i64 %3614, %120
  br label %"for blur_y.s0.x.x.rebased164"

"produce blur_x162":                              ; preds = %"for blur_y.s0.x.x.rebased156"
  %t768 = add nsw i32 %3587, %t1777
  %3616 = sext i32 %t768 to i64
  %3617 = getelementptr inbounds i16, i16* %read_input, i64 %3616
  %3618 = getelementptr inbounds i16, i16* %3617, i64 1
  %3619 = bitcast i16* %3618 to <16 x i16>*
  %3620 = load <16 x i16>, <16 x i16>* %3619, align 2, !tbaa !396
  %3621 = getelementptr inbounds i16, i16* %3617, i64 17
  %3622 = bitcast i16* %3621 to <16 x i16>*
  %3623 = load <16 x i16>, <16 x i16>* %3622, align 2, !tbaa !396
  %3624 = bitcast i16* %3617 to <16 x i16>*
  %3625 = load <16 x i16>, <16 x i16>* %3624, align 2, !tbaa !396
  %3626 = getelementptr inbounds i16, i16* %3617, i64 16
  %3627 = bitcast i16* %3626 to <16 x i16>*
  %3628 = load <16 x i16>, <16 x i16>* %3627, align 2, !tbaa !396
  %3629 = getelementptr inbounds i16, i16* %3617, i64 2
  %3630 = bitcast i16* %3629 to <16 x i16>*
  %3631 = load <16 x i16>, <16 x i16>* %3630, align 2, !tbaa !396
  %3632 = getelementptr inbounds i16, i16* %3617, i64 18
  %3633 = bitcast i16* %3632 to <16 x i16>*
  %3634 = load <16 x i16>, <16 x i16>* %3633, align 2, !tbaa !396
  %3635 = getelementptr inbounds i16, i16* %3617, i64 3
  %3636 = bitcast i16* %3635 to <16 x i16>*
  %3637 = load <16 x i16>, <16 x i16>* %3636, align 2, !tbaa !396
  %3638 = getelementptr inbounds i16, i16* %3617, i64 19
  %3639 = bitcast i16* %3638 to <16 x i16>*
  %3640 = load <16 x i16>, <16 x i16>* %3639, align 2, !tbaa !396
  %3641 = getelementptr inbounds i16, i16* %3617, i64 4
  %3642 = bitcast i16* %3641 to <16 x i16>*
  %3643 = load <16 x i16>, <16 x i16>* %3642, align 2, !tbaa !396
  %3644 = getelementptr inbounds i16, i16* %3617, i64 20
  %3645 = bitcast i16* %3644 to <16 x i16>*
  %3646 = load <16 x i16>, <16 x i16>* %3645, align 2, !tbaa !396
  %3647 = getelementptr inbounds i16, i16* %3617, i64 6
  %3648 = bitcast i16* %3647 to <16 x i16>*
  %3649 = load <16 x i16>, <16 x i16>* %3648, align 2, !tbaa !396
  %3650 = getelementptr inbounds i16, i16* %3617, i64 22
  %3651 = bitcast i16* %3650 to <16 x i16>*
  %3652 = load <16 x i16>, <16 x i16>* %3651, align 2, !tbaa !396
  %3653 = getelementptr inbounds i16, i16* %3617, i64 5
  %3654 = bitcast i16* %3653 to <16 x i16>*
  %3655 = load <16 x i16>, <16 x i16>* %3654, align 2, !tbaa !396
  %3656 = getelementptr inbounds i16, i16* %3617, i64 21
  %3657 = bitcast i16* %3656 to <16 x i16>*
  %3658 = load <16 x i16>, <16 x i16>* %3657, align 2, !tbaa !396
  %3659 = add <16 x i16> %3625, %3620
  %3660 = add <16 x i16> %3659, %3631
  %3661 = add <16 x i16> %3660, %3637
  %3662 = add <16 x i16> %3661, %3643
  %3663 = add <16 x i16> %3662, %3649
  %3664 = add <16 x i16> %3663, %3655
  %3665 = add <16 x i16> %3628, %3623
  %3666 = add <16 x i16> %3665, %3634
  %3667 = add <16 x i16> %3666, %3640
  %3668 = add <16 x i16> %3667, %3646
  %3669 = add <16 x i16> %3668, %3652
  %3670 = add <16 x i16> %3669, %3658
  %3671 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3664, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3672 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3670, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3673 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3671, <16 x i16> %3664)
  %3674 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3672, <16 x i16> %3670)
  %3675 = shufflevector <16 x i16> %3673, <16 x i16> %3674, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3676 = lshr <32 x i16> %3675, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3677 = shufflevector <32 x i16> %3676, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3678 = shl nsw i64 %3584, 5
  %3679 = add nsw i64 %3678, %3387
  %3680 = getelementptr inbounds i16, i16* %blur_x, i64 %3679
  %3681 = bitcast i16* %3680 to <16 x i16>*
  store <16 x i16> %3677, <16 x i16>* %3681, align 2, !tbaa !399
  %3682 = shufflevector <32 x i16> %3676, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3683 = getelementptr inbounds i16, i16* %3680, i64 16
  %3684 = bitcast i16* %3683 to <16 x i16>*
  store <16 x i16> %3682, <16 x i16>* %3684, align 2, !tbaa !399
  br label %"consume blur_x163"

"consume blur_x163":                              ; preds = %"for blur_y.s0.x.x.rebased156.consume blur_x163_crit_edge", %"produce blur_x162"
  %.pre-phi3607 = phi i64 [ %.pre3606, %"for blur_y.s0.x.x.rebased156.consume blur_x163_crit_edge" ], [ %3678, %"produce blur_x162" ]
  %3685 = add nsw i64 %3390, %.pre-phi3607
  %3686 = getelementptr inbounds i16, i16* %blur_x, i64 %3685
  %3687 = bitcast i16* %3686 to <16 x i16>*
  %3688 = load <16 x i16>, <16 x i16>* %3687, align 2, !tbaa !399
  %3689 = getelementptr inbounds i16, i16* %3686, i64 16
  %3690 = bitcast i16* %3689 to <16 x i16>*
  %3691 = load <16 x i16>, <16 x i16>* %3690, align 2, !tbaa !399
  %3692 = add nsw i64 %3393, %.pre-phi3607
  %3693 = getelementptr inbounds i16, i16* %blur_x, i64 %3692
  %3694 = bitcast i16* %3693 to <16 x i16>*
  %3695 = load <16 x i16>, <16 x i16>* %3694, align 2, !tbaa !399
  %3696 = getelementptr inbounds i16, i16* %3693, i64 16
  %3697 = bitcast i16* %3696 to <16 x i16>*
  %3698 = load <16 x i16>, <16 x i16>* %3697, align 2, !tbaa !399
  %3699 = add nsw i64 %3396, %.pre-phi3607
  %3700 = getelementptr inbounds i16, i16* %blur_x, i64 %3699
  %3701 = bitcast i16* %3700 to <16 x i16>*
  %3702 = load <16 x i16>, <16 x i16>* %3701, align 2, !tbaa !399
  %3703 = getelementptr inbounds i16, i16* %3700, i64 16
  %3704 = bitcast i16* %3703 to <16 x i16>*
  %3705 = load <16 x i16>, <16 x i16>* %3704, align 2, !tbaa !399
  %3706 = add nsw i64 %3399, %.pre-phi3607
  %3707 = getelementptr inbounds i16, i16* %blur_x, i64 %3706
  %3708 = bitcast i16* %3707 to <16 x i16>*
  %3709 = load <16 x i16>, <16 x i16>* %3708, align 2, !tbaa !399
  %3710 = getelementptr inbounds i16, i16* %3707, i64 16
  %3711 = bitcast i16* %3710 to <16 x i16>*
  %3712 = load <16 x i16>, <16 x i16>* %3711, align 2, !tbaa !399
  %3713 = add nsw i64 %3402, %.pre-phi3607
  %3714 = getelementptr inbounds i16, i16* %blur_x, i64 %3713
  %3715 = bitcast i16* %3714 to <16 x i16>*
  %3716 = load <16 x i16>, <16 x i16>* %3715, align 2, !tbaa !399
  %3717 = getelementptr inbounds i16, i16* %3714, i64 16
  %3718 = bitcast i16* %3717 to <16 x i16>*
  %3719 = load <16 x i16>, <16 x i16>* %3718, align 2, !tbaa !399
  %3720 = add nsw i64 %3405, %.pre-phi3607
  %3721 = getelementptr inbounds i16, i16* %blur_x, i64 %3720
  %3722 = bitcast i16* %3721 to <16 x i16>*
  %3723 = load <16 x i16>, <16 x i16>* %3722, align 2, !tbaa !399
  %3724 = getelementptr inbounds i16, i16* %3721, i64 16
  %3725 = bitcast i16* %3724 to <16 x i16>*
  %3726 = load <16 x i16>, <16 x i16>* %3725, align 2, !tbaa !399
  %3727 = add nsw i64 %3408, %.pre-phi3607
  %3728 = getelementptr inbounds i16, i16* %blur_x, i64 %3727
  %3729 = bitcast i16* %3728 to <16 x i16>*
  %3730 = load <16 x i16>, <16 x i16>* %3729, align 2, !tbaa !399
  %3731 = getelementptr inbounds i16, i16* %3728, i64 16
  %3732 = bitcast i16* %3731 to <16 x i16>*
  %3733 = load <16 x i16>, <16 x i16>* %3732, align 2, !tbaa !399
  %3734 = add <16 x i16> %3695, %3688
  %3735 = add <16 x i16> %3734, %3702
  %3736 = add <16 x i16> %3735, %3709
  %3737 = add <16 x i16> %3736, %3716
  %3738 = add <16 x i16> %3737, %3723
  %3739 = add <16 x i16> %3738, %3730
  %3740 = add <16 x i16> %3698, %3691
  %3741 = add <16 x i16> %3740, %3705
  %3742 = add <16 x i16> %3741, %3712
  %3743 = add <16 x i16> %3742, %3719
  %3744 = add <16 x i16> %3743, %3726
  %3745 = add <16 x i16> %3744, %3733
  %3746 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3739, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3747 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3745, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3748 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3746, <16 x i16> %3739)
  %3749 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3747, <16 x i16> %3745)
  %3750 = shufflevector <16 x i16> %3748, <16 x i16> %3749, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3751 = lshr <32 x i16> %3750, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3752 = shufflevector <32 x i16> %3751, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3753 = add nsw i64 %3412, %.pre-phi3607
  %3754 = getelementptr inbounds i16, i16* %66, i64 %3753
  %3755 = bitcast i16* %3754 to <16 x i16>*
  store <16 x i16> %3752, <16 x i16>* %3755, align 2, !tbaa !401
  %3756 = shufflevector <32 x i16> %3751, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3757 = getelementptr inbounds i16, i16* %3754, i64 16
  %3758 = bitcast i16* %3757 to <16 x i16>*
  store <16 x i16> %3756, <16 x i16>* %3758, align 2, !tbaa !401
  %indvars.iv.next3393 = add nuw nsw i64 %indvars.iv3392, 1
  %.not2869 = icmp eq i64 %indvars.iv.next3393, %188
  br i1 %.not2869, label %"end for blur_y.s0.x.x.rebased157", label %"for blur_y.s0.x.x.rebased156"

"for blur_y.s0.x.x.rebased164":                   ; preds = %"for blur_y.s0.x.x.rebased164.preheader", %"consume blur_x172"
  %blur_y.s0.x.x.rebased166 = phi i32 [ %3909, %"consume blur_x172" ], [ 0, %"for blur_y.s0.x.x.rebased164.preheader" ]
  %3759 = add nsw i32 %blur_y.s0.x.x.rebased166, %t1670
  %a126 = shl nsw i32 %3759, 5
  %3760 = icmp sgt i32 %a14, %a126
  %b132 = select i1 %3760, i32 %a126, i32 %a14
  %3761 = icmp slt i32 %3759, 1
  %3762 = icmp sgt i32 %4, %a126
  %3763 = or i1 %3761, %3762
  br i1 %3763, label %"produce blur_x170", label %"consume blur_x172"

"end for blur_y.s0.x.x.rebased165":               ; preds = %"consume blur_x172", %"end for blur_y.s0.x.x.rebased157"
  br i1 %34, label %"produce blur_x176", label %after_bb173

"produce blur_x170":                              ; preds = %"for blur_y.s0.x.x.rebased164"
  %3764 = icmp slt i32 %b132, %4
  %blur_x.s0.x.v1.base.s171 = select i1 %3764, i32 %b132, i32 %4
  %t773 = add nsw i32 %blur_x.s0.x.v1.base.s171, %t1777
  %3765 = sext i32 %t773 to i64
  %3766 = getelementptr inbounds i16, i16* %read_input, i64 %3765
  %3767 = getelementptr inbounds i16, i16* %3766, i64 1
  %3768 = bitcast i16* %3767 to <16 x i16>*
  %3769 = load <16 x i16>, <16 x i16>* %3768, align 2, !tbaa !396
  %3770 = getelementptr inbounds i16, i16* %3766, i64 17
  %3771 = bitcast i16* %3770 to <16 x i16>*
  %3772 = load <16 x i16>, <16 x i16>* %3771, align 2, !tbaa !396
  %3773 = bitcast i16* %3766 to <16 x i16>*
  %3774 = load <16 x i16>, <16 x i16>* %3773, align 2, !tbaa !396
  %3775 = getelementptr inbounds i16, i16* %3766, i64 16
  %3776 = bitcast i16* %3775 to <16 x i16>*
  %3777 = load <16 x i16>, <16 x i16>* %3776, align 2, !tbaa !396
  %3778 = getelementptr inbounds i16, i16* %3766, i64 2
  %3779 = bitcast i16* %3778 to <16 x i16>*
  %3780 = load <16 x i16>, <16 x i16>* %3779, align 2, !tbaa !396
  %3781 = getelementptr inbounds i16, i16* %3766, i64 18
  %3782 = bitcast i16* %3781 to <16 x i16>*
  %3783 = load <16 x i16>, <16 x i16>* %3782, align 2, !tbaa !396
  %3784 = getelementptr inbounds i16, i16* %3766, i64 3
  %3785 = bitcast i16* %3784 to <16 x i16>*
  %3786 = load <16 x i16>, <16 x i16>* %3785, align 2, !tbaa !396
  %3787 = getelementptr inbounds i16, i16* %3766, i64 19
  %3788 = bitcast i16* %3787 to <16 x i16>*
  %3789 = load <16 x i16>, <16 x i16>* %3788, align 2, !tbaa !396
  %3790 = getelementptr inbounds i16, i16* %3766, i64 4
  %3791 = bitcast i16* %3790 to <16 x i16>*
  %3792 = load <16 x i16>, <16 x i16>* %3791, align 2, !tbaa !396
  %3793 = getelementptr inbounds i16, i16* %3766, i64 20
  %3794 = bitcast i16* %3793 to <16 x i16>*
  %3795 = load <16 x i16>, <16 x i16>* %3794, align 2, !tbaa !396
  %3796 = getelementptr inbounds i16, i16* %3766, i64 6
  %3797 = bitcast i16* %3796 to <16 x i16>*
  %3798 = load <16 x i16>, <16 x i16>* %3797, align 2, !tbaa !396
  %3799 = getelementptr inbounds i16, i16* %3766, i64 22
  %3800 = bitcast i16* %3799 to <16 x i16>*
  %3801 = load <16 x i16>, <16 x i16>* %3800, align 2, !tbaa !396
  %3802 = getelementptr inbounds i16, i16* %3766, i64 5
  %3803 = bitcast i16* %3802 to <16 x i16>*
  %3804 = load <16 x i16>, <16 x i16>* %3803, align 2, !tbaa !396
  %3805 = getelementptr inbounds i16, i16* %3766, i64 21
  %3806 = bitcast i16* %3805 to <16 x i16>*
  %3807 = load <16 x i16>, <16 x i16>* %3806, align 2, !tbaa !396
  %3808 = add <16 x i16> %3774, %3769
  %3809 = add <16 x i16> %3808, %3780
  %3810 = add <16 x i16> %3809, %3786
  %3811 = add <16 x i16> %3810, %3792
  %3812 = add <16 x i16> %3811, %3798
  %3813 = add <16 x i16> %3812, %3804
  %3814 = add <16 x i16> %3777, %3772
  %3815 = add <16 x i16> %3814, %3783
  %3816 = add <16 x i16> %3815, %3789
  %3817 = add <16 x i16> %3816, %3795
  %3818 = add <16 x i16> %3817, %3801
  %3819 = add <16 x i16> %3818, %3807
  %3820 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3813, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3821 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3819, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3822 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3820, <16 x i16> %3813)
  %3823 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3821, <16 x i16> %3819)
  %3824 = shufflevector <16 x i16> %3822, <16 x i16> %3823, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3825 = lshr <32 x i16> %3824, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3826 = shufflevector <32 x i16> %3825, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3827 = sext i32 %blur_x.s0.x.v1.base.s171 to i64
  %3828 = add nsw i64 %3827, %3590
  %3829 = getelementptr inbounds i16, i16* %blur_x, i64 %3828
  %3830 = bitcast i16* %3829 to <16 x i16>*
  store <16 x i16> %3826, <16 x i16>* %3830, align 2, !tbaa !399
  %3831 = shufflevector <32 x i16> %3825, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3832 = getelementptr inbounds i16, i16* %3829, i64 16
  %3833 = bitcast i16* %3832 to <16 x i16>*
  store <16 x i16> %3831, <16 x i16>* %3833, align 2, !tbaa !399
  br label %"consume blur_x172"

"consume blur_x172":                              ; preds = %"for blur_y.s0.x.x.rebased164", %"produce blur_x170"
  %3834 = sext i32 %b132 to i64
  %3835 = add nsw i64 %3593, %3834
  %3836 = getelementptr inbounds i16, i16* %blur_x, i64 %3835
  %3837 = bitcast i16* %3836 to <16 x i16>*
  %3838 = load <16 x i16>, <16 x i16>* %3837, align 2, !tbaa !399
  %3839 = getelementptr inbounds i16, i16* %3836, i64 16
  %3840 = bitcast i16* %3839 to <16 x i16>*
  %3841 = load <16 x i16>, <16 x i16>* %3840, align 2, !tbaa !399
  %3842 = add nsw i64 %3596, %3834
  %3843 = getelementptr inbounds i16, i16* %blur_x, i64 %3842
  %3844 = bitcast i16* %3843 to <16 x i16>*
  %3845 = load <16 x i16>, <16 x i16>* %3844, align 2, !tbaa !399
  %3846 = getelementptr inbounds i16, i16* %3843, i64 16
  %3847 = bitcast i16* %3846 to <16 x i16>*
  %3848 = load <16 x i16>, <16 x i16>* %3847, align 2, !tbaa !399
  %3849 = add nsw i64 %3599, %3834
  %3850 = getelementptr inbounds i16, i16* %blur_x, i64 %3849
  %3851 = bitcast i16* %3850 to <16 x i16>*
  %3852 = load <16 x i16>, <16 x i16>* %3851, align 2, !tbaa !399
  %3853 = getelementptr inbounds i16, i16* %3850, i64 16
  %3854 = bitcast i16* %3853 to <16 x i16>*
  %3855 = load <16 x i16>, <16 x i16>* %3854, align 2, !tbaa !399
  %3856 = add nsw i64 %3602, %3834
  %3857 = getelementptr inbounds i16, i16* %blur_x, i64 %3856
  %3858 = bitcast i16* %3857 to <16 x i16>*
  %3859 = load <16 x i16>, <16 x i16>* %3858, align 2, !tbaa !399
  %3860 = getelementptr inbounds i16, i16* %3857, i64 16
  %3861 = bitcast i16* %3860 to <16 x i16>*
  %3862 = load <16 x i16>, <16 x i16>* %3861, align 2, !tbaa !399
  %3863 = add nsw i64 %3605, %3834
  %3864 = getelementptr inbounds i16, i16* %blur_x, i64 %3863
  %3865 = bitcast i16* %3864 to <16 x i16>*
  %3866 = load <16 x i16>, <16 x i16>* %3865, align 2, !tbaa !399
  %3867 = getelementptr inbounds i16, i16* %3864, i64 16
  %3868 = bitcast i16* %3867 to <16 x i16>*
  %3869 = load <16 x i16>, <16 x i16>* %3868, align 2, !tbaa !399
  %3870 = add nsw i64 %3608, %3834
  %3871 = getelementptr inbounds i16, i16* %blur_x, i64 %3870
  %3872 = bitcast i16* %3871 to <16 x i16>*
  %3873 = load <16 x i16>, <16 x i16>* %3872, align 2, !tbaa !399
  %3874 = getelementptr inbounds i16, i16* %3871, i64 16
  %3875 = bitcast i16* %3874 to <16 x i16>*
  %3876 = load <16 x i16>, <16 x i16>* %3875, align 2, !tbaa !399
  %3877 = add nsw i64 %3611, %3834
  %3878 = getelementptr inbounds i16, i16* %blur_x, i64 %3877
  %3879 = bitcast i16* %3878 to <16 x i16>*
  %3880 = load <16 x i16>, <16 x i16>* %3879, align 2, !tbaa !399
  %3881 = getelementptr inbounds i16, i16* %3878, i64 16
  %3882 = bitcast i16* %3881 to <16 x i16>*
  %3883 = load <16 x i16>, <16 x i16>* %3882, align 2, !tbaa !399
  %3884 = add <16 x i16> %3845, %3838
  %3885 = add <16 x i16> %3884, %3852
  %3886 = add <16 x i16> %3885, %3859
  %3887 = add <16 x i16> %3886, %3866
  %3888 = add <16 x i16> %3887, %3873
  %3889 = add <16 x i16> %3888, %3880
  %3890 = add <16 x i16> %3848, %3841
  %3891 = add <16 x i16> %3890, %3855
  %3892 = add <16 x i16> %3891, %3862
  %3893 = add <16 x i16> %3892, %3869
  %3894 = add <16 x i16> %3893, %3876
  %3895 = add <16 x i16> %3894, %3883
  %3896 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3889, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3897 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3895, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3898 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3896, <16 x i16> %3889)
  %3899 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3897, <16 x i16> %3895)
  %3900 = shufflevector <16 x i16> %3898, <16 x i16> %3899, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3901 = lshr <32 x i16> %3900, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3902 = shufflevector <32 x i16> %3901, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3903 = add nsw i64 %3615, %3834
  %3904 = getelementptr inbounds i16, i16* %66, i64 %3903
  %3905 = bitcast i16* %3904 to <16 x i16>*
  store <16 x i16> %3902, <16 x i16>* %3905, align 2, !tbaa !401
  %3906 = shufflevector <32 x i16> %3901, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3907 = getelementptr inbounds i16, i16* %3904, i64 16
  %3908 = bitcast i16* %3907 to <16 x i16>*
  store <16 x i16> %3906, <16 x i16>* %3908, align 2, !tbaa !401
  %3909 = add nuw nsw i32 %blur_y.s0.x.x.rebased166, 1
  %.not2868 = icmp eq i32 %3909, %t1727
  br i1 %.not2868, label %"end for blur_y.s0.x.x.rebased165", label %"for blur_y.s0.x.x.rebased164"

after_bb173:                                      ; preds = %"end for blur_y.s0.x.x.rebased165", %"produce blur_x176"
  br i1 %100, label %"for blur_y.s0.x.x.rebased178.preheader", label %"end for blur_y.s0.x.x.rebased179", !prof !386

"for blur_y.s0.x.x.rebased178.preheader":         ; preds = %after_bb173
  %3910 = sext i32 %t1726 to i64
  %3911 = zext i32 %.pre-phi3587 to i64
  %3912 = mul nsw i64 %3911, %116
  %3913 = sub nsw i64 %3912, %96
  %3914 = zext i32 %.pre-phi3583 to i64
  %3915 = mul nsw i64 %3914, %116
  %3916 = sub nsw i64 %3915, %96
  %3917 = zext i32 %.pre-phi3591 to i64
  %3918 = mul nsw i64 %3917, %116
  %3919 = sub nsw i64 %3918, %96
  %3920 = zext i32 %.pre-phi3595 to i64
  %3921 = mul nsw i64 %3920, %116
  %3922 = sub nsw i64 %3921, %96
  %3923 = zext i32 %.pre-phi3599 to i64
  %3924 = mul nsw i64 %3923, %116
  %3925 = sub nsw i64 %3924, %96
  %3926 = zext i32 %.pre-phi to i64
  %3927 = mul nsw i64 %3926, %116
  %3928 = sub nsw i64 %3927, %96
  %3929 = zext i32 %.pre-phi3605 to i64
  %3930 = mul nsw i64 %3929, %116
  %3931 = sub nsw i64 %3930, %96
  %3932 = sext i32 %a26 to i64
  %3933 = add nsw i64 %3932, 2
  %3934 = mul nsw i64 %3933, %117
  %3935 = add nsw i64 %3934, %120
  br label %"for blur_y.s0.x.x.rebased178"

"produce blur_x176":                              ; preds = %"end for blur_y.s0.x.x.rebased165"
  %3936 = getelementptr inbounds i16, i16* %read_input, i64 %123
  %3937 = getelementptr inbounds i16, i16* %3936, i64 -31
  %3938 = bitcast i16* %3937 to <16 x i16>*
  %3939 = load <16 x i16>, <16 x i16>* %3938, align 2, !tbaa !396
  %3940 = getelementptr inbounds i16, i16* %3936, i64 -15
  %3941 = bitcast i16* %3940 to <16 x i16>*
  %3942 = load <16 x i16>, <16 x i16>* %3941, align 2, !tbaa !396
  %3943 = getelementptr inbounds i16, i16* %3936, i64 -32
  %3944 = bitcast i16* %3943 to <16 x i16>*
  %3945 = load <16 x i16>, <16 x i16>* %3944, align 2, !tbaa !396
  %3946 = getelementptr inbounds i16, i16* %3936, i64 -16
  %3947 = bitcast i16* %3946 to <16 x i16>*
  %3948 = load <16 x i16>, <16 x i16>* %3947, align 2, !tbaa !396
  %3949 = getelementptr inbounds i16, i16* %3936, i64 -30
  %3950 = bitcast i16* %3949 to <16 x i16>*
  %3951 = load <16 x i16>, <16 x i16>* %3950, align 2, !tbaa !396
  %3952 = getelementptr inbounds i16, i16* %3936, i64 -14
  %3953 = bitcast i16* %3952 to <16 x i16>*
  %3954 = load <16 x i16>, <16 x i16>* %3953, align 2, !tbaa !396
  %3955 = getelementptr inbounds i16, i16* %3936, i64 -29
  %3956 = bitcast i16* %3955 to <16 x i16>*
  %3957 = load <16 x i16>, <16 x i16>* %3956, align 2, !tbaa !396
  %3958 = getelementptr inbounds i16, i16* %3936, i64 -13
  %3959 = bitcast i16* %3958 to <16 x i16>*
  %3960 = load <16 x i16>, <16 x i16>* %3959, align 2, !tbaa !396
  %3961 = getelementptr inbounds i16, i16* %3936, i64 -28
  %3962 = bitcast i16* %3961 to <16 x i16>*
  %3963 = load <16 x i16>, <16 x i16>* %3962, align 2, !tbaa !396
  %3964 = getelementptr inbounds i16, i16* %3936, i64 -12
  %3965 = bitcast i16* %3964 to <16 x i16>*
  %3966 = load <16 x i16>, <16 x i16>* %3965, align 2, !tbaa !396
  %3967 = getelementptr inbounds i16, i16* %3936, i64 -26
  %3968 = bitcast i16* %3967 to <16 x i16>*
  %3969 = load <16 x i16>, <16 x i16>* %3968, align 2, !tbaa !396
  %3970 = getelementptr inbounds i16, i16* %3936, i64 -10
  %3971 = bitcast i16* %3970 to <16 x i16>*
  %3972 = load <16 x i16>, <16 x i16>* %3971, align 2, !tbaa !396
  %3973 = getelementptr inbounds i16, i16* %3936, i64 -27
  %3974 = bitcast i16* %3973 to <16 x i16>*
  %3975 = load <16 x i16>, <16 x i16>* %3974, align 2, !tbaa !396
  %3976 = getelementptr inbounds i16, i16* %3936, i64 -11
  %3977 = bitcast i16* %3976 to <16 x i16>*
  %3978 = load <16 x i16>, <16 x i16>* %3977, align 2, !tbaa !396
  %3979 = add <16 x i16> %3945, %3939
  %3980 = add <16 x i16> %3979, %3951
  %3981 = add <16 x i16> %3980, %3957
  %3982 = add <16 x i16> %3981, %3963
  %3983 = add <16 x i16> %3982, %3969
  %3984 = add <16 x i16> %3983, %3975
  %3985 = add <16 x i16> %3948, %3942
  %3986 = add <16 x i16> %3985, %3954
  %3987 = add <16 x i16> %3986, %3960
  %3988 = add <16 x i16> %3987, %3966
  %3989 = add <16 x i16> %3988, %3972
  %3990 = add <16 x i16> %3989, %3978
  %3991 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3984, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3992 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3990, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3993 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3991, <16 x i16> %3984)
  %3994 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3992, <16 x i16> %3990)
  %3995 = shufflevector <16 x i16> %3993, <16 x i16> %3994, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3996 = lshr <32 x i16> %3995, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3997 = shufflevector <32 x i16> %3996, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3998 = zext i32 %.pre-phi to i64
  %3999 = mul nsw i64 %97, %3998
  %4000 = add nsw i64 %99, %3999
  %4001 = getelementptr inbounds i16, i16* %blur_x, i64 %4000
  %4002 = getelementptr inbounds i16, i16* %4001, i64 -32
  %4003 = bitcast i16* %4002 to <16 x i16>*
  store <16 x i16> %3997, <16 x i16>* %4003, align 2, !tbaa !399
  %4004 = shufflevector <32 x i16> %3996, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4005 = getelementptr inbounds i16, i16* %4001, i64 -16
  %4006 = bitcast i16* %4005 to <16 x i16>*
  store <16 x i16> %4004, <16 x i16>* %4006, align 2, !tbaa !399
  %4007 = zext i32 %.pre-phi3587 to i64
  %4008 = mul nsw i64 %4007, %116
  %4009 = add nsw i64 %4008, %94
  %4010 = getelementptr inbounds i16, i16* %blur_x, i64 %4009
  %4011 = getelementptr inbounds i16, i16* %4010, i64 -32
  %4012 = bitcast i16* %4011 to <16 x i16>*
  %4013 = load <16 x i16>, <16 x i16>* %4012, align 2, !tbaa !399
  %4014 = getelementptr inbounds i16, i16* %4010, i64 -16
  %4015 = bitcast i16* %4014 to <16 x i16>*
  %4016 = load <16 x i16>, <16 x i16>* %4015, align 2, !tbaa !399
  %4017 = zext i32 %.pre-phi3583 to i64
  %4018 = mul nsw i64 %4017, %116
  %4019 = add nsw i64 %4018, %94
  %4020 = getelementptr inbounds i16, i16* %blur_x, i64 %4019
  %4021 = getelementptr inbounds i16, i16* %4020, i64 -32
  %4022 = bitcast i16* %4021 to <16 x i16>*
  %4023 = load <16 x i16>, <16 x i16>* %4022, align 2, !tbaa !399
  %4024 = getelementptr inbounds i16, i16* %4020, i64 -16
  %4025 = bitcast i16* %4024 to <16 x i16>*
  %4026 = load <16 x i16>, <16 x i16>* %4025, align 2, !tbaa !399
  %4027 = zext i32 %.pre-phi3591 to i64
  %4028 = mul nsw i64 %4027, %116
  %4029 = add nsw i64 %4028, %94
  %4030 = getelementptr inbounds i16, i16* %blur_x, i64 %4029
  %4031 = getelementptr inbounds i16, i16* %4030, i64 -32
  %4032 = bitcast i16* %4031 to <16 x i16>*
  %4033 = load <16 x i16>, <16 x i16>* %4032, align 2, !tbaa !399
  %4034 = getelementptr inbounds i16, i16* %4030, i64 -16
  %4035 = bitcast i16* %4034 to <16 x i16>*
  %4036 = load <16 x i16>, <16 x i16>* %4035, align 2, !tbaa !399
  %4037 = zext i32 %.pre-phi3595 to i64
  %4038 = mul nsw i64 %4037, %116
  %4039 = add nsw i64 %4038, %94
  %4040 = getelementptr inbounds i16, i16* %blur_x, i64 %4039
  %4041 = getelementptr inbounds i16, i16* %4040, i64 -32
  %4042 = bitcast i16* %4041 to <16 x i16>*
  %4043 = load <16 x i16>, <16 x i16>* %4042, align 2, !tbaa !399
  %4044 = getelementptr inbounds i16, i16* %4040, i64 -16
  %4045 = bitcast i16* %4044 to <16 x i16>*
  %4046 = load <16 x i16>, <16 x i16>* %4045, align 2, !tbaa !399
  %4047 = zext i32 %.pre-phi3599 to i64
  %4048 = mul nsw i64 %4047, %116
  %4049 = add nsw i64 %4048, %94
  %4050 = getelementptr inbounds i16, i16* %blur_x, i64 %4049
  %4051 = getelementptr inbounds i16, i16* %4050, i64 -32
  %4052 = bitcast i16* %4051 to <16 x i16>*
  %4053 = load <16 x i16>, <16 x i16>* %4052, align 2, !tbaa !399
  %4054 = getelementptr inbounds i16, i16* %4050, i64 -16
  %4055 = bitcast i16* %4054 to <16 x i16>*
  %4056 = load <16 x i16>, <16 x i16>* %4055, align 2, !tbaa !399
  %4057 = mul nsw i64 %3998, %116
  %4058 = add nsw i64 %4057, %94
  %4059 = getelementptr inbounds i16, i16* %blur_x, i64 %4058
  %4060 = getelementptr inbounds i16, i16* %4059, i64 -32
  %4061 = bitcast i16* %4060 to <16 x i16>*
  %4062 = load <16 x i16>, <16 x i16>* %4061, align 2, !tbaa !399
  %4063 = getelementptr inbounds i16, i16* %4059, i64 -16
  %4064 = bitcast i16* %4063 to <16 x i16>*
  %4065 = load <16 x i16>, <16 x i16>* %4064, align 2, !tbaa !399
  %4066 = zext i32 %.pre-phi3605 to i64
  %4067 = mul nsw i64 %4066, %116
  %4068 = add nsw i64 %4067, %94
  %4069 = getelementptr inbounds i16, i16* %blur_x, i64 %4068
  %4070 = getelementptr inbounds i16, i16* %4069, i64 -32
  %4071 = bitcast i16* %4070 to <16 x i16>*
  %4072 = load <16 x i16>, <16 x i16>* %4071, align 2, !tbaa !399
  %4073 = getelementptr inbounds i16, i16* %4069, i64 -16
  %4074 = bitcast i16* %4073 to <16 x i16>*
  %4075 = load <16 x i16>, <16 x i16>* %4074, align 2, !tbaa !399
  %4076 = add <16 x i16> %4023, %4013
  %4077 = add <16 x i16> %4076, %4033
  %4078 = add <16 x i16> %4077, %4043
  %4079 = add <16 x i16> %4078, %4053
  %4080 = add <16 x i16> %4079, %4062
  %4081 = add <16 x i16> %4080, %4072
  %4082 = add <16 x i16> %4026, %4016
  %4083 = add <16 x i16> %4082, %4036
  %4084 = add <16 x i16> %4083, %4046
  %4085 = add <16 x i16> %4084, %4056
  %4086 = add <16 x i16> %4085, %4065
  %4087 = add <16 x i16> %4086, %4075
  %4088 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4081, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4089 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4087, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4090 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4088, <16 x i16> %4081)
  %4091 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4089, <16 x i16> %4087)
  %4092 = shufflevector <16 x i16> %4090, <16 x i16> %4091, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4093 = lshr <32 x i16> %4092, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4094 = shufflevector <32 x i16> %4093, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4095 = sext i32 %a26 to i64
  %4096 = add nsw i64 %4095, 2
  %4097 = mul nsw i64 %4096, %117
  %4098 = add nsw i64 %119, %4097
  %4099 = getelementptr inbounds i16, i16* %66, i64 %4098
  %4100 = getelementptr inbounds i16, i16* %4099, i64 -32
  %4101 = bitcast i16* %4100 to <16 x i16>*
  store <16 x i16> %4094, <16 x i16>* %4101, align 2, !tbaa !401
  %4102 = shufflevector <32 x i16> %4093, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4103 = getelementptr inbounds i16, i16* %4099, i64 -16
  %4104 = bitcast i16* %4103 to <16 x i16>*
  store <16 x i16> %4102, <16 x i16>* %4104, align 2, !tbaa !401
  br label %after_bb173

"for blur_y.s0.x.x.rebased178":                   ; preds = %"for blur_y.s0.x.x.rebased178.preheader", %"consume blur_x185"
  %indvars.iv3395 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased178.preheader" ], [ %indvars.iv.next3396, %"consume blur_x185" ]
  %4105 = add nsw i64 %indvars.iv3395, %101
  %4106 = icmp slt i64 %4105, 1
  %4107 = trunc i64 %4105 to i32
  %4108 = shl nsw i32 %4107, 5
  %4109 = icmp sgt i32 %4, %4108
  %4110 = or i1 %4106, %4109
  br i1 %4110, label %"produce blur_x184", label %"for blur_y.s0.x.x.rebased178.consume blur_x185_crit_edge"

"for blur_y.s0.x.x.rebased178.consume blur_x185_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased178"
  %.pre3608 = shl nsw i64 %4105, 5
  br label %"consume blur_x185"

"end for blur_y.s0.x.x.rebased179":               ; preds = %"consume blur_x185", %after_bb173
  br i1 %102, label %"for blur_y.s0.x.x.rebased186.preheader", label %"end for blur_y.s0.x.x.rebased187", !prof !386

"for blur_y.s0.x.x.rebased186.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased179"
  %4111 = sext i32 %t1726 to i64
  %4112 = zext i32 %.pre-phi3587 to i64
  %4113 = mul nsw i64 %4112, %116
  %4114 = sub nsw i64 %4113, %96
  %4115 = zext i32 %.pre-phi3583 to i64
  %4116 = mul nsw i64 %4115, %116
  %4117 = sub nsw i64 %4116, %96
  %4118 = zext i32 %.pre-phi3591 to i64
  %4119 = mul nsw i64 %4118, %116
  %4120 = sub nsw i64 %4119, %96
  %4121 = zext i32 %.pre-phi3595 to i64
  %4122 = mul nsw i64 %4121, %116
  %4123 = sub nsw i64 %4122, %96
  %4124 = zext i32 %.pre-phi3599 to i64
  %4125 = mul nsw i64 %4124, %116
  %4126 = sub nsw i64 %4125, %96
  %4127 = zext i32 %.pre-phi to i64
  %4128 = mul nsw i64 %4127, %116
  %4129 = sub nsw i64 %4128, %96
  %4130 = zext i32 %.pre-phi3605 to i64
  %4131 = mul nsw i64 %4130, %116
  %4132 = sub nsw i64 %4131, %96
  %4133 = sext i32 %a26 to i64
  %4134 = add nsw i64 %4133, 2
  %4135 = mul nsw i64 %4134, %117
  %4136 = add nsw i64 %4135, %120
  br label %"for blur_y.s0.x.x.rebased186"

"produce blur_x184":                              ; preds = %"for blur_y.s0.x.x.rebased178"
  %t784 = add nsw i32 %4108, %t1793
  %4137 = sext i32 %t784 to i64
  %4138 = getelementptr inbounds i16, i16* %read_input, i64 %4137
  %4139 = getelementptr inbounds i16, i16* %4138, i64 1
  %4140 = bitcast i16* %4139 to <16 x i16>*
  %4141 = load <16 x i16>, <16 x i16>* %4140, align 2, !tbaa !396
  %4142 = getelementptr inbounds i16, i16* %4138, i64 17
  %4143 = bitcast i16* %4142 to <16 x i16>*
  %4144 = load <16 x i16>, <16 x i16>* %4143, align 2, !tbaa !396
  %4145 = bitcast i16* %4138 to <16 x i16>*
  %4146 = load <16 x i16>, <16 x i16>* %4145, align 2, !tbaa !396
  %4147 = getelementptr inbounds i16, i16* %4138, i64 16
  %4148 = bitcast i16* %4147 to <16 x i16>*
  %4149 = load <16 x i16>, <16 x i16>* %4148, align 2, !tbaa !396
  %4150 = getelementptr inbounds i16, i16* %4138, i64 2
  %4151 = bitcast i16* %4150 to <16 x i16>*
  %4152 = load <16 x i16>, <16 x i16>* %4151, align 2, !tbaa !396
  %4153 = getelementptr inbounds i16, i16* %4138, i64 18
  %4154 = bitcast i16* %4153 to <16 x i16>*
  %4155 = load <16 x i16>, <16 x i16>* %4154, align 2, !tbaa !396
  %4156 = getelementptr inbounds i16, i16* %4138, i64 3
  %4157 = bitcast i16* %4156 to <16 x i16>*
  %4158 = load <16 x i16>, <16 x i16>* %4157, align 2, !tbaa !396
  %4159 = getelementptr inbounds i16, i16* %4138, i64 19
  %4160 = bitcast i16* %4159 to <16 x i16>*
  %4161 = load <16 x i16>, <16 x i16>* %4160, align 2, !tbaa !396
  %4162 = getelementptr inbounds i16, i16* %4138, i64 4
  %4163 = bitcast i16* %4162 to <16 x i16>*
  %4164 = load <16 x i16>, <16 x i16>* %4163, align 2, !tbaa !396
  %4165 = getelementptr inbounds i16, i16* %4138, i64 20
  %4166 = bitcast i16* %4165 to <16 x i16>*
  %4167 = load <16 x i16>, <16 x i16>* %4166, align 2, !tbaa !396
  %4168 = getelementptr inbounds i16, i16* %4138, i64 6
  %4169 = bitcast i16* %4168 to <16 x i16>*
  %4170 = load <16 x i16>, <16 x i16>* %4169, align 2, !tbaa !396
  %4171 = getelementptr inbounds i16, i16* %4138, i64 22
  %4172 = bitcast i16* %4171 to <16 x i16>*
  %4173 = load <16 x i16>, <16 x i16>* %4172, align 2, !tbaa !396
  %4174 = getelementptr inbounds i16, i16* %4138, i64 5
  %4175 = bitcast i16* %4174 to <16 x i16>*
  %4176 = load <16 x i16>, <16 x i16>* %4175, align 2, !tbaa !396
  %4177 = getelementptr inbounds i16, i16* %4138, i64 21
  %4178 = bitcast i16* %4177 to <16 x i16>*
  %4179 = load <16 x i16>, <16 x i16>* %4178, align 2, !tbaa !396
  %4180 = add <16 x i16> %4146, %4141
  %4181 = add <16 x i16> %4180, %4152
  %4182 = add <16 x i16> %4181, %4158
  %4183 = add <16 x i16> %4182, %4164
  %4184 = add <16 x i16> %4183, %4170
  %4185 = add <16 x i16> %4184, %4176
  %4186 = add <16 x i16> %4149, %4144
  %4187 = add <16 x i16> %4186, %4155
  %4188 = add <16 x i16> %4187, %4161
  %4189 = add <16 x i16> %4188, %4167
  %4190 = add <16 x i16> %4189, %4173
  %4191 = add <16 x i16> %4190, %4179
  %4192 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4185, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4193 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4191, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4194 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4192, <16 x i16> %4185)
  %4195 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4193, <16 x i16> %4191)
  %4196 = shufflevector <16 x i16> %4194, <16 x i16> %4195, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4197 = lshr <32 x i16> %4196, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4198 = shufflevector <32 x i16> %4197, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4199 = shl nsw i64 %4105, 5
  %4200 = add nsw i64 %4199, %3910
  %4201 = getelementptr inbounds i16, i16* %blur_x, i64 %4200
  %4202 = bitcast i16* %4201 to <16 x i16>*
  store <16 x i16> %4198, <16 x i16>* %4202, align 2, !tbaa !399
  %4203 = shufflevector <32 x i16> %4197, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4204 = getelementptr inbounds i16, i16* %4201, i64 16
  %4205 = bitcast i16* %4204 to <16 x i16>*
  store <16 x i16> %4203, <16 x i16>* %4205, align 2, !tbaa !399
  br label %"consume blur_x185"

"consume blur_x185":                              ; preds = %"for blur_y.s0.x.x.rebased178.consume blur_x185_crit_edge", %"produce blur_x184"
  %.pre-phi3609 = phi i64 [ %.pre3608, %"for blur_y.s0.x.x.rebased178.consume blur_x185_crit_edge" ], [ %4199, %"produce blur_x184" ]
  %4206 = add nsw i64 %3913, %.pre-phi3609
  %4207 = getelementptr inbounds i16, i16* %blur_x, i64 %4206
  %4208 = bitcast i16* %4207 to <16 x i16>*
  %4209 = load <16 x i16>, <16 x i16>* %4208, align 2, !tbaa !399
  %4210 = getelementptr inbounds i16, i16* %4207, i64 16
  %4211 = bitcast i16* %4210 to <16 x i16>*
  %4212 = load <16 x i16>, <16 x i16>* %4211, align 2, !tbaa !399
  %4213 = add nsw i64 %3916, %.pre-phi3609
  %4214 = getelementptr inbounds i16, i16* %blur_x, i64 %4213
  %4215 = bitcast i16* %4214 to <16 x i16>*
  %4216 = load <16 x i16>, <16 x i16>* %4215, align 2, !tbaa !399
  %4217 = getelementptr inbounds i16, i16* %4214, i64 16
  %4218 = bitcast i16* %4217 to <16 x i16>*
  %4219 = load <16 x i16>, <16 x i16>* %4218, align 2, !tbaa !399
  %4220 = add nsw i64 %3919, %.pre-phi3609
  %4221 = getelementptr inbounds i16, i16* %blur_x, i64 %4220
  %4222 = bitcast i16* %4221 to <16 x i16>*
  %4223 = load <16 x i16>, <16 x i16>* %4222, align 2, !tbaa !399
  %4224 = getelementptr inbounds i16, i16* %4221, i64 16
  %4225 = bitcast i16* %4224 to <16 x i16>*
  %4226 = load <16 x i16>, <16 x i16>* %4225, align 2, !tbaa !399
  %4227 = add nsw i64 %3922, %.pre-phi3609
  %4228 = getelementptr inbounds i16, i16* %blur_x, i64 %4227
  %4229 = bitcast i16* %4228 to <16 x i16>*
  %4230 = load <16 x i16>, <16 x i16>* %4229, align 2, !tbaa !399
  %4231 = getelementptr inbounds i16, i16* %4228, i64 16
  %4232 = bitcast i16* %4231 to <16 x i16>*
  %4233 = load <16 x i16>, <16 x i16>* %4232, align 2, !tbaa !399
  %4234 = add nsw i64 %3925, %.pre-phi3609
  %4235 = getelementptr inbounds i16, i16* %blur_x, i64 %4234
  %4236 = bitcast i16* %4235 to <16 x i16>*
  %4237 = load <16 x i16>, <16 x i16>* %4236, align 2, !tbaa !399
  %4238 = getelementptr inbounds i16, i16* %4235, i64 16
  %4239 = bitcast i16* %4238 to <16 x i16>*
  %4240 = load <16 x i16>, <16 x i16>* %4239, align 2, !tbaa !399
  %4241 = add nsw i64 %3928, %.pre-phi3609
  %4242 = getelementptr inbounds i16, i16* %blur_x, i64 %4241
  %4243 = bitcast i16* %4242 to <16 x i16>*
  %4244 = load <16 x i16>, <16 x i16>* %4243, align 2, !tbaa !399
  %4245 = getelementptr inbounds i16, i16* %4242, i64 16
  %4246 = bitcast i16* %4245 to <16 x i16>*
  %4247 = load <16 x i16>, <16 x i16>* %4246, align 2, !tbaa !399
  %4248 = add nsw i64 %3931, %.pre-phi3609
  %4249 = getelementptr inbounds i16, i16* %blur_x, i64 %4248
  %4250 = bitcast i16* %4249 to <16 x i16>*
  %4251 = load <16 x i16>, <16 x i16>* %4250, align 2, !tbaa !399
  %4252 = getelementptr inbounds i16, i16* %4249, i64 16
  %4253 = bitcast i16* %4252 to <16 x i16>*
  %4254 = load <16 x i16>, <16 x i16>* %4253, align 2, !tbaa !399
  %4255 = add <16 x i16> %4216, %4209
  %4256 = add <16 x i16> %4255, %4223
  %4257 = add <16 x i16> %4256, %4230
  %4258 = add <16 x i16> %4257, %4237
  %4259 = add <16 x i16> %4258, %4244
  %4260 = add <16 x i16> %4259, %4251
  %4261 = add <16 x i16> %4219, %4212
  %4262 = add <16 x i16> %4261, %4226
  %4263 = add <16 x i16> %4262, %4233
  %4264 = add <16 x i16> %4263, %4240
  %4265 = add <16 x i16> %4264, %4247
  %4266 = add <16 x i16> %4265, %4254
  %4267 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4260, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4268 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4266, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4269 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4267, <16 x i16> %4260)
  %4270 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4268, <16 x i16> %4266)
  %4271 = shufflevector <16 x i16> %4269, <16 x i16> %4270, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4272 = lshr <32 x i16> %4271, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4273 = shufflevector <32 x i16> %4272, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4274 = add nsw i64 %3935, %.pre-phi3609
  %4275 = getelementptr inbounds i16, i16* %66, i64 %4274
  %4276 = bitcast i16* %4275 to <16 x i16>*
  store <16 x i16> %4273, <16 x i16>* %4276, align 2, !tbaa !401
  %4277 = shufflevector <32 x i16> %4272, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4278 = getelementptr inbounds i16, i16* %4275, i64 16
  %4279 = bitcast i16* %4278 to <16 x i16>*
  store <16 x i16> %4277, <16 x i16>* %4279, align 2, !tbaa !401
  %indvars.iv.next3396 = add nuw nsw i64 %indvars.iv3395, 1
  %.not2867 = icmp eq i64 %indvars.iv.next3396, %188
  br i1 %.not2867, label %"end for blur_y.s0.x.x.rebased179", label %"for blur_y.s0.x.x.rebased178"

"for blur_y.s0.x.x.rebased186":                   ; preds = %"for blur_y.s0.x.x.rebased186.preheader", %"consume blur_x194"
  %blur_y.s0.x.x.rebased188 = phi i32 [ %4430, %"consume blur_x194" ], [ 0, %"for blur_y.s0.x.x.rebased186.preheader" ]
  %4280 = add nsw i32 %blur_y.s0.x.x.rebased188, %t1670
  %a133 = shl nsw i32 %4280, 5
  %4281 = icmp sgt i32 %a14, %a133
  %b139 = select i1 %4281, i32 %a133, i32 %a14
  %4282 = icmp slt i32 %4280, 1
  %4283 = icmp sgt i32 %4, %a133
  %4284 = or i1 %4282, %4283
  br i1 %4284, label %"produce blur_x192", label %"consume blur_x194"

"end for blur_y.s0.x.x.rebased187":               ; preds = %"consume blur_x194", %"end for blur_y.s0.x.x.rebased179"
  br i1 %34, label %"produce blur_x198", label %after_bb195

"produce blur_x192":                              ; preds = %"for blur_y.s0.x.x.rebased186"
  %4285 = icmp slt i32 %b139, %4
  %blur_x.s0.x.v1.base.s193 = select i1 %4285, i32 %b139, i32 %4
  %t789 = add nsw i32 %blur_x.s0.x.v1.base.s193, %t1793
  %4286 = sext i32 %t789 to i64
  %4287 = getelementptr inbounds i16, i16* %read_input, i64 %4286
  %4288 = getelementptr inbounds i16, i16* %4287, i64 1
  %4289 = bitcast i16* %4288 to <16 x i16>*
  %4290 = load <16 x i16>, <16 x i16>* %4289, align 2, !tbaa !396
  %4291 = getelementptr inbounds i16, i16* %4287, i64 17
  %4292 = bitcast i16* %4291 to <16 x i16>*
  %4293 = load <16 x i16>, <16 x i16>* %4292, align 2, !tbaa !396
  %4294 = bitcast i16* %4287 to <16 x i16>*
  %4295 = load <16 x i16>, <16 x i16>* %4294, align 2, !tbaa !396
  %4296 = getelementptr inbounds i16, i16* %4287, i64 16
  %4297 = bitcast i16* %4296 to <16 x i16>*
  %4298 = load <16 x i16>, <16 x i16>* %4297, align 2, !tbaa !396
  %4299 = getelementptr inbounds i16, i16* %4287, i64 2
  %4300 = bitcast i16* %4299 to <16 x i16>*
  %4301 = load <16 x i16>, <16 x i16>* %4300, align 2, !tbaa !396
  %4302 = getelementptr inbounds i16, i16* %4287, i64 18
  %4303 = bitcast i16* %4302 to <16 x i16>*
  %4304 = load <16 x i16>, <16 x i16>* %4303, align 2, !tbaa !396
  %4305 = getelementptr inbounds i16, i16* %4287, i64 3
  %4306 = bitcast i16* %4305 to <16 x i16>*
  %4307 = load <16 x i16>, <16 x i16>* %4306, align 2, !tbaa !396
  %4308 = getelementptr inbounds i16, i16* %4287, i64 19
  %4309 = bitcast i16* %4308 to <16 x i16>*
  %4310 = load <16 x i16>, <16 x i16>* %4309, align 2, !tbaa !396
  %4311 = getelementptr inbounds i16, i16* %4287, i64 4
  %4312 = bitcast i16* %4311 to <16 x i16>*
  %4313 = load <16 x i16>, <16 x i16>* %4312, align 2, !tbaa !396
  %4314 = getelementptr inbounds i16, i16* %4287, i64 20
  %4315 = bitcast i16* %4314 to <16 x i16>*
  %4316 = load <16 x i16>, <16 x i16>* %4315, align 2, !tbaa !396
  %4317 = getelementptr inbounds i16, i16* %4287, i64 6
  %4318 = bitcast i16* %4317 to <16 x i16>*
  %4319 = load <16 x i16>, <16 x i16>* %4318, align 2, !tbaa !396
  %4320 = getelementptr inbounds i16, i16* %4287, i64 22
  %4321 = bitcast i16* %4320 to <16 x i16>*
  %4322 = load <16 x i16>, <16 x i16>* %4321, align 2, !tbaa !396
  %4323 = getelementptr inbounds i16, i16* %4287, i64 5
  %4324 = bitcast i16* %4323 to <16 x i16>*
  %4325 = load <16 x i16>, <16 x i16>* %4324, align 2, !tbaa !396
  %4326 = getelementptr inbounds i16, i16* %4287, i64 21
  %4327 = bitcast i16* %4326 to <16 x i16>*
  %4328 = load <16 x i16>, <16 x i16>* %4327, align 2, !tbaa !396
  %4329 = add <16 x i16> %4295, %4290
  %4330 = add <16 x i16> %4329, %4301
  %4331 = add <16 x i16> %4330, %4307
  %4332 = add <16 x i16> %4331, %4313
  %4333 = add <16 x i16> %4332, %4319
  %4334 = add <16 x i16> %4333, %4325
  %4335 = add <16 x i16> %4298, %4293
  %4336 = add <16 x i16> %4335, %4304
  %4337 = add <16 x i16> %4336, %4310
  %4338 = add <16 x i16> %4337, %4316
  %4339 = add <16 x i16> %4338, %4322
  %4340 = add <16 x i16> %4339, %4328
  %4341 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4334, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4342 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4340, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4343 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4341, <16 x i16> %4334)
  %4344 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4342, <16 x i16> %4340)
  %4345 = shufflevector <16 x i16> %4343, <16 x i16> %4344, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4346 = lshr <32 x i16> %4345, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4347 = shufflevector <32 x i16> %4346, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4348 = sext i32 %blur_x.s0.x.v1.base.s193 to i64
  %4349 = add nsw i64 %4348, %4111
  %4350 = getelementptr inbounds i16, i16* %blur_x, i64 %4349
  %4351 = bitcast i16* %4350 to <16 x i16>*
  store <16 x i16> %4347, <16 x i16>* %4351, align 2, !tbaa !399
  %4352 = shufflevector <32 x i16> %4346, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4353 = getelementptr inbounds i16, i16* %4350, i64 16
  %4354 = bitcast i16* %4353 to <16 x i16>*
  store <16 x i16> %4352, <16 x i16>* %4354, align 2, !tbaa !399
  br label %"consume blur_x194"

"consume blur_x194":                              ; preds = %"for blur_y.s0.x.x.rebased186", %"produce blur_x192"
  %4355 = sext i32 %b139 to i64
  %4356 = add nsw i64 %4114, %4355
  %4357 = getelementptr inbounds i16, i16* %blur_x, i64 %4356
  %4358 = bitcast i16* %4357 to <16 x i16>*
  %4359 = load <16 x i16>, <16 x i16>* %4358, align 2, !tbaa !399
  %4360 = getelementptr inbounds i16, i16* %4357, i64 16
  %4361 = bitcast i16* %4360 to <16 x i16>*
  %4362 = load <16 x i16>, <16 x i16>* %4361, align 2, !tbaa !399
  %4363 = add nsw i64 %4117, %4355
  %4364 = getelementptr inbounds i16, i16* %blur_x, i64 %4363
  %4365 = bitcast i16* %4364 to <16 x i16>*
  %4366 = load <16 x i16>, <16 x i16>* %4365, align 2, !tbaa !399
  %4367 = getelementptr inbounds i16, i16* %4364, i64 16
  %4368 = bitcast i16* %4367 to <16 x i16>*
  %4369 = load <16 x i16>, <16 x i16>* %4368, align 2, !tbaa !399
  %4370 = add nsw i64 %4120, %4355
  %4371 = getelementptr inbounds i16, i16* %blur_x, i64 %4370
  %4372 = bitcast i16* %4371 to <16 x i16>*
  %4373 = load <16 x i16>, <16 x i16>* %4372, align 2, !tbaa !399
  %4374 = getelementptr inbounds i16, i16* %4371, i64 16
  %4375 = bitcast i16* %4374 to <16 x i16>*
  %4376 = load <16 x i16>, <16 x i16>* %4375, align 2, !tbaa !399
  %4377 = add nsw i64 %4123, %4355
  %4378 = getelementptr inbounds i16, i16* %blur_x, i64 %4377
  %4379 = bitcast i16* %4378 to <16 x i16>*
  %4380 = load <16 x i16>, <16 x i16>* %4379, align 2, !tbaa !399
  %4381 = getelementptr inbounds i16, i16* %4378, i64 16
  %4382 = bitcast i16* %4381 to <16 x i16>*
  %4383 = load <16 x i16>, <16 x i16>* %4382, align 2, !tbaa !399
  %4384 = add nsw i64 %4126, %4355
  %4385 = getelementptr inbounds i16, i16* %blur_x, i64 %4384
  %4386 = bitcast i16* %4385 to <16 x i16>*
  %4387 = load <16 x i16>, <16 x i16>* %4386, align 2, !tbaa !399
  %4388 = getelementptr inbounds i16, i16* %4385, i64 16
  %4389 = bitcast i16* %4388 to <16 x i16>*
  %4390 = load <16 x i16>, <16 x i16>* %4389, align 2, !tbaa !399
  %4391 = add nsw i64 %4129, %4355
  %4392 = getelementptr inbounds i16, i16* %blur_x, i64 %4391
  %4393 = bitcast i16* %4392 to <16 x i16>*
  %4394 = load <16 x i16>, <16 x i16>* %4393, align 2, !tbaa !399
  %4395 = getelementptr inbounds i16, i16* %4392, i64 16
  %4396 = bitcast i16* %4395 to <16 x i16>*
  %4397 = load <16 x i16>, <16 x i16>* %4396, align 2, !tbaa !399
  %4398 = add nsw i64 %4132, %4355
  %4399 = getelementptr inbounds i16, i16* %blur_x, i64 %4398
  %4400 = bitcast i16* %4399 to <16 x i16>*
  %4401 = load <16 x i16>, <16 x i16>* %4400, align 2, !tbaa !399
  %4402 = getelementptr inbounds i16, i16* %4399, i64 16
  %4403 = bitcast i16* %4402 to <16 x i16>*
  %4404 = load <16 x i16>, <16 x i16>* %4403, align 2, !tbaa !399
  %4405 = add <16 x i16> %4366, %4359
  %4406 = add <16 x i16> %4405, %4373
  %4407 = add <16 x i16> %4406, %4380
  %4408 = add <16 x i16> %4407, %4387
  %4409 = add <16 x i16> %4408, %4394
  %4410 = add <16 x i16> %4409, %4401
  %4411 = add <16 x i16> %4369, %4362
  %4412 = add <16 x i16> %4411, %4376
  %4413 = add <16 x i16> %4412, %4383
  %4414 = add <16 x i16> %4413, %4390
  %4415 = add <16 x i16> %4414, %4397
  %4416 = add <16 x i16> %4415, %4404
  %4417 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4410, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4418 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4416, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4419 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4417, <16 x i16> %4410)
  %4420 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4418, <16 x i16> %4416)
  %4421 = shufflevector <16 x i16> %4419, <16 x i16> %4420, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4422 = lshr <32 x i16> %4421, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4423 = shufflevector <32 x i16> %4422, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4424 = add nsw i64 %4136, %4355
  %4425 = getelementptr inbounds i16, i16* %66, i64 %4424
  %4426 = bitcast i16* %4425 to <16 x i16>*
  store <16 x i16> %4423, <16 x i16>* %4426, align 2, !tbaa !401
  %4427 = shufflevector <32 x i16> %4422, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4428 = getelementptr inbounds i16, i16* %4425, i64 16
  %4429 = bitcast i16* %4428 to <16 x i16>*
  store <16 x i16> %4427, <16 x i16>* %4429, align 2, !tbaa !401
  %4430 = add nuw nsw i32 %blur_y.s0.x.x.rebased188, 1
  %.not2866 = icmp eq i32 %4430, %t1727
  br i1 %.not2866, label %"end for blur_y.s0.x.x.rebased187", label %"for blur_y.s0.x.x.rebased186"

after_bb195:                                      ; preds = %"end for blur_y.s0.x.x.rebased187", %"produce blur_x198"
  br i1 %100, label %"for blur_y.s0.x.x.rebased200.preheader", label %"end for blur_y.s0.x.x.rebased201", !prof !386

"for blur_y.s0.x.x.rebased200.preheader":         ; preds = %after_bb195
  %4431 = sext i32 %t1732 to i64
  %4432 = zext i32 %.pre-phi3591 to i64
  %4433 = mul nsw i64 %4432, %116
  %4434 = sub nsw i64 %4433, %96
  %4435 = zext i32 %.pre-phi3587 to i64
  %4436 = mul nsw i64 %4435, %116
  %4437 = sub nsw i64 %4436, %96
  %4438 = zext i32 %.pre-phi3595 to i64
  %4439 = mul nsw i64 %4438, %116
  %4440 = sub nsw i64 %4439, %96
  %4441 = zext i32 %.pre-phi3599 to i64
  %4442 = mul nsw i64 %4441, %116
  %4443 = sub nsw i64 %4442, %96
  %4444 = zext i32 %.pre-phi3605 to i64
  %4445 = mul nsw i64 %4444, %116
  %4446 = sub nsw i64 %4445, %96
  %4447 = zext i32 %.pre-phi3579 to i64
  %4448 = mul nsw i64 %4447, %116
  %4449 = sub nsw i64 %4448, %96
  %4450 = zext i32 %.pre-phi to i64
  %4451 = mul nsw i64 %4450, %116
  %4452 = sub nsw i64 %4451, %96
  %4453 = sext i32 %a26 to i64
  %4454 = add nsw i64 %4453, 3
  %4455 = mul nsw i64 %4454, %117
  %4456 = add nsw i64 %4455, %120
  br label %"for blur_y.s0.x.x.rebased200"

"produce blur_x198":                              ; preds = %"end for blur_y.s0.x.x.rebased187"
  %4457 = getelementptr inbounds i16, i16* %read_input, i64 %125
  %4458 = getelementptr inbounds i16, i16* %4457, i64 -31
  %4459 = bitcast i16* %4458 to <16 x i16>*
  %4460 = load <16 x i16>, <16 x i16>* %4459, align 2, !tbaa !396
  %4461 = getelementptr inbounds i16, i16* %4457, i64 -15
  %4462 = bitcast i16* %4461 to <16 x i16>*
  %4463 = load <16 x i16>, <16 x i16>* %4462, align 2, !tbaa !396
  %4464 = getelementptr inbounds i16, i16* %4457, i64 -32
  %4465 = bitcast i16* %4464 to <16 x i16>*
  %4466 = load <16 x i16>, <16 x i16>* %4465, align 2, !tbaa !396
  %4467 = getelementptr inbounds i16, i16* %4457, i64 -16
  %4468 = bitcast i16* %4467 to <16 x i16>*
  %4469 = load <16 x i16>, <16 x i16>* %4468, align 2, !tbaa !396
  %4470 = getelementptr inbounds i16, i16* %4457, i64 -30
  %4471 = bitcast i16* %4470 to <16 x i16>*
  %4472 = load <16 x i16>, <16 x i16>* %4471, align 2, !tbaa !396
  %4473 = getelementptr inbounds i16, i16* %4457, i64 -14
  %4474 = bitcast i16* %4473 to <16 x i16>*
  %4475 = load <16 x i16>, <16 x i16>* %4474, align 2, !tbaa !396
  %4476 = getelementptr inbounds i16, i16* %4457, i64 -29
  %4477 = bitcast i16* %4476 to <16 x i16>*
  %4478 = load <16 x i16>, <16 x i16>* %4477, align 2, !tbaa !396
  %4479 = getelementptr inbounds i16, i16* %4457, i64 -13
  %4480 = bitcast i16* %4479 to <16 x i16>*
  %4481 = load <16 x i16>, <16 x i16>* %4480, align 2, !tbaa !396
  %4482 = getelementptr inbounds i16, i16* %4457, i64 -28
  %4483 = bitcast i16* %4482 to <16 x i16>*
  %4484 = load <16 x i16>, <16 x i16>* %4483, align 2, !tbaa !396
  %4485 = getelementptr inbounds i16, i16* %4457, i64 -12
  %4486 = bitcast i16* %4485 to <16 x i16>*
  %4487 = load <16 x i16>, <16 x i16>* %4486, align 2, !tbaa !396
  %4488 = getelementptr inbounds i16, i16* %4457, i64 -26
  %4489 = bitcast i16* %4488 to <16 x i16>*
  %4490 = load <16 x i16>, <16 x i16>* %4489, align 2, !tbaa !396
  %4491 = getelementptr inbounds i16, i16* %4457, i64 -10
  %4492 = bitcast i16* %4491 to <16 x i16>*
  %4493 = load <16 x i16>, <16 x i16>* %4492, align 2, !tbaa !396
  %4494 = getelementptr inbounds i16, i16* %4457, i64 -27
  %4495 = bitcast i16* %4494 to <16 x i16>*
  %4496 = load <16 x i16>, <16 x i16>* %4495, align 2, !tbaa !396
  %4497 = getelementptr inbounds i16, i16* %4457, i64 -11
  %4498 = bitcast i16* %4497 to <16 x i16>*
  %4499 = load <16 x i16>, <16 x i16>* %4498, align 2, !tbaa !396
  %4500 = add <16 x i16> %4466, %4460
  %4501 = add <16 x i16> %4500, %4472
  %4502 = add <16 x i16> %4501, %4478
  %4503 = add <16 x i16> %4502, %4484
  %4504 = add <16 x i16> %4503, %4490
  %4505 = add <16 x i16> %4504, %4496
  %4506 = add <16 x i16> %4469, %4463
  %4507 = add <16 x i16> %4506, %4475
  %4508 = add <16 x i16> %4507, %4481
  %4509 = add <16 x i16> %4508, %4487
  %4510 = add <16 x i16> %4509, %4493
  %4511 = add <16 x i16> %4510, %4499
  %4512 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4505, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4513 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4511, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4514 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4512, <16 x i16> %4505)
  %4515 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4513, <16 x i16> %4511)
  %4516 = shufflevector <16 x i16> %4514, <16 x i16> %4515, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4517 = lshr <32 x i16> %4516, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4518 = shufflevector <32 x i16> %4517, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4519 = zext i32 %.pre-phi3579 to i64
  %4520 = mul nsw i64 %97, %4519
  %4521 = add nsw i64 %99, %4520
  %4522 = getelementptr inbounds i16, i16* %blur_x, i64 %4521
  %4523 = getelementptr inbounds i16, i16* %4522, i64 -32
  %4524 = bitcast i16* %4523 to <16 x i16>*
  store <16 x i16> %4518, <16 x i16>* %4524, align 2, !tbaa !399
  %4525 = shufflevector <32 x i16> %4517, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4526 = getelementptr inbounds i16, i16* %4522, i64 -16
  %4527 = bitcast i16* %4526 to <16 x i16>*
  store <16 x i16> %4525, <16 x i16>* %4527, align 2, !tbaa !399
  %4528 = zext i32 %.pre-phi3591 to i64
  %4529 = mul nsw i64 %4528, %116
  %4530 = add nsw i64 %4529, %94
  %4531 = getelementptr inbounds i16, i16* %blur_x, i64 %4530
  %4532 = getelementptr inbounds i16, i16* %4531, i64 -32
  %4533 = bitcast i16* %4532 to <16 x i16>*
  %4534 = load <16 x i16>, <16 x i16>* %4533, align 2, !tbaa !399
  %4535 = getelementptr inbounds i16, i16* %4531, i64 -16
  %4536 = bitcast i16* %4535 to <16 x i16>*
  %4537 = load <16 x i16>, <16 x i16>* %4536, align 2, !tbaa !399
  %4538 = zext i32 %.pre-phi3587 to i64
  %4539 = mul nsw i64 %4538, %116
  %4540 = add nsw i64 %4539, %94
  %4541 = getelementptr inbounds i16, i16* %blur_x, i64 %4540
  %4542 = getelementptr inbounds i16, i16* %4541, i64 -32
  %4543 = bitcast i16* %4542 to <16 x i16>*
  %4544 = load <16 x i16>, <16 x i16>* %4543, align 2, !tbaa !399
  %4545 = getelementptr inbounds i16, i16* %4541, i64 -16
  %4546 = bitcast i16* %4545 to <16 x i16>*
  %4547 = load <16 x i16>, <16 x i16>* %4546, align 2, !tbaa !399
  %4548 = zext i32 %.pre-phi3595 to i64
  %4549 = mul nsw i64 %4548, %116
  %4550 = add nsw i64 %4549, %94
  %4551 = getelementptr inbounds i16, i16* %blur_x, i64 %4550
  %4552 = getelementptr inbounds i16, i16* %4551, i64 -32
  %4553 = bitcast i16* %4552 to <16 x i16>*
  %4554 = load <16 x i16>, <16 x i16>* %4553, align 2, !tbaa !399
  %4555 = getelementptr inbounds i16, i16* %4551, i64 -16
  %4556 = bitcast i16* %4555 to <16 x i16>*
  %4557 = load <16 x i16>, <16 x i16>* %4556, align 2, !tbaa !399
  %4558 = zext i32 %.pre-phi3599 to i64
  %4559 = mul nsw i64 %4558, %116
  %4560 = add nsw i64 %4559, %94
  %4561 = getelementptr inbounds i16, i16* %blur_x, i64 %4560
  %4562 = getelementptr inbounds i16, i16* %4561, i64 -32
  %4563 = bitcast i16* %4562 to <16 x i16>*
  %4564 = load <16 x i16>, <16 x i16>* %4563, align 2, !tbaa !399
  %4565 = getelementptr inbounds i16, i16* %4561, i64 -16
  %4566 = bitcast i16* %4565 to <16 x i16>*
  %4567 = load <16 x i16>, <16 x i16>* %4566, align 2, !tbaa !399
  %4568 = zext i32 %.pre-phi3605 to i64
  %4569 = mul nsw i64 %4568, %116
  %4570 = add nsw i64 %4569, %94
  %4571 = getelementptr inbounds i16, i16* %blur_x, i64 %4570
  %4572 = getelementptr inbounds i16, i16* %4571, i64 -32
  %4573 = bitcast i16* %4572 to <16 x i16>*
  %4574 = load <16 x i16>, <16 x i16>* %4573, align 2, !tbaa !399
  %4575 = getelementptr inbounds i16, i16* %4571, i64 -16
  %4576 = bitcast i16* %4575 to <16 x i16>*
  %4577 = load <16 x i16>, <16 x i16>* %4576, align 2, !tbaa !399
  %4578 = mul nsw i64 %4519, %116
  %4579 = add nsw i64 %4578, %94
  %4580 = getelementptr inbounds i16, i16* %blur_x, i64 %4579
  %4581 = getelementptr inbounds i16, i16* %4580, i64 -32
  %4582 = bitcast i16* %4581 to <16 x i16>*
  %4583 = load <16 x i16>, <16 x i16>* %4582, align 2, !tbaa !399
  %4584 = getelementptr inbounds i16, i16* %4580, i64 -16
  %4585 = bitcast i16* %4584 to <16 x i16>*
  %4586 = load <16 x i16>, <16 x i16>* %4585, align 2, !tbaa !399
  %4587 = zext i32 %.pre-phi to i64
  %4588 = mul nsw i64 %4587, %116
  %4589 = add nsw i64 %4588, %94
  %4590 = getelementptr inbounds i16, i16* %blur_x, i64 %4589
  %4591 = getelementptr inbounds i16, i16* %4590, i64 -32
  %4592 = bitcast i16* %4591 to <16 x i16>*
  %4593 = load <16 x i16>, <16 x i16>* %4592, align 2, !tbaa !399
  %4594 = getelementptr inbounds i16, i16* %4590, i64 -16
  %4595 = bitcast i16* %4594 to <16 x i16>*
  %4596 = load <16 x i16>, <16 x i16>* %4595, align 2, !tbaa !399
  %4597 = add <16 x i16> %4544, %4534
  %4598 = add <16 x i16> %4597, %4554
  %4599 = add <16 x i16> %4598, %4564
  %4600 = add <16 x i16> %4599, %4574
  %4601 = add <16 x i16> %4600, %4583
  %4602 = add <16 x i16> %4601, %4593
  %4603 = add <16 x i16> %4547, %4537
  %4604 = add <16 x i16> %4603, %4557
  %4605 = add <16 x i16> %4604, %4567
  %4606 = add <16 x i16> %4605, %4577
  %4607 = add <16 x i16> %4606, %4586
  %4608 = add <16 x i16> %4607, %4596
  %4609 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4602, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4610 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4608, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4611 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4609, <16 x i16> %4602)
  %4612 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4610, <16 x i16> %4608)
  %4613 = shufflevector <16 x i16> %4611, <16 x i16> %4612, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4614 = lshr <32 x i16> %4613, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4615 = shufflevector <32 x i16> %4614, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4616 = sext i32 %a26 to i64
  %4617 = add nsw i64 %4616, 3
  %4618 = mul nsw i64 %4617, %117
  %4619 = add nsw i64 %119, %4618
  %4620 = getelementptr inbounds i16, i16* %66, i64 %4619
  %4621 = getelementptr inbounds i16, i16* %4620, i64 -32
  %4622 = bitcast i16* %4621 to <16 x i16>*
  store <16 x i16> %4615, <16 x i16>* %4622, align 2, !tbaa !401
  %4623 = shufflevector <32 x i16> %4614, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4624 = getelementptr inbounds i16, i16* %4620, i64 -16
  %4625 = bitcast i16* %4624 to <16 x i16>*
  store <16 x i16> %4623, <16 x i16>* %4625, align 2, !tbaa !401
  br label %after_bb195

"for blur_y.s0.x.x.rebased200":                   ; preds = %"for blur_y.s0.x.x.rebased200.preheader", %"consume blur_x207"
  %indvars.iv3398 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased200.preheader" ], [ %indvars.iv.next3399, %"consume blur_x207" ]
  %4626 = add nsw i64 %indvars.iv3398, %101
  %4627 = icmp slt i64 %4626, 1
  %4628 = trunc i64 %4626 to i32
  %4629 = shl nsw i32 %4628, 5
  %4630 = icmp sgt i32 %4, %4629
  %4631 = or i1 %4627, %4630
  br i1 %4631, label %"produce blur_x206", label %"for blur_y.s0.x.x.rebased200.consume blur_x207_crit_edge"

"for blur_y.s0.x.x.rebased200.consume blur_x207_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased200"
  %.pre3610 = shl nsw i64 %4626, 5
  br label %"consume blur_x207"

"end for blur_y.s0.x.x.rebased201":               ; preds = %"consume blur_x207", %after_bb195
  br i1 %102, label %"for blur_y.s0.x.x.rebased208.preheader", label %"end for blur_y.s0.x.x.rebased209", !prof !386

"for blur_y.s0.x.x.rebased208.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased201"
  %4632 = sext i32 %t1732 to i64
  %4633 = zext i32 %.pre-phi3591 to i64
  %4634 = mul nsw i64 %4633, %116
  %4635 = sub nsw i64 %4634, %96
  %4636 = zext i32 %.pre-phi3587 to i64
  %4637 = mul nsw i64 %4636, %116
  %4638 = sub nsw i64 %4637, %96
  %4639 = zext i32 %.pre-phi3595 to i64
  %4640 = mul nsw i64 %4639, %116
  %4641 = sub nsw i64 %4640, %96
  %4642 = zext i32 %.pre-phi3599 to i64
  %4643 = mul nsw i64 %4642, %116
  %4644 = sub nsw i64 %4643, %96
  %4645 = zext i32 %.pre-phi3605 to i64
  %4646 = mul nsw i64 %4645, %116
  %4647 = sub nsw i64 %4646, %96
  %4648 = zext i32 %.pre-phi3579 to i64
  %4649 = mul nsw i64 %4648, %116
  %4650 = sub nsw i64 %4649, %96
  %4651 = zext i32 %.pre-phi to i64
  %4652 = mul nsw i64 %4651, %116
  %4653 = sub nsw i64 %4652, %96
  %4654 = sext i32 %a26 to i64
  %4655 = add nsw i64 %4654, 3
  %4656 = mul nsw i64 %4655, %117
  %4657 = add nsw i64 %4656, %120
  br label %"for blur_y.s0.x.x.rebased208"

"produce blur_x206":                              ; preds = %"for blur_y.s0.x.x.rebased200"
  %t800 = add nsw i32 %4629, %t1809
  %4658 = sext i32 %t800 to i64
  %4659 = getelementptr inbounds i16, i16* %read_input, i64 %4658
  %4660 = getelementptr inbounds i16, i16* %4659, i64 1
  %4661 = bitcast i16* %4660 to <16 x i16>*
  %4662 = load <16 x i16>, <16 x i16>* %4661, align 2, !tbaa !396
  %4663 = getelementptr inbounds i16, i16* %4659, i64 17
  %4664 = bitcast i16* %4663 to <16 x i16>*
  %4665 = load <16 x i16>, <16 x i16>* %4664, align 2, !tbaa !396
  %4666 = bitcast i16* %4659 to <16 x i16>*
  %4667 = load <16 x i16>, <16 x i16>* %4666, align 2, !tbaa !396
  %4668 = getelementptr inbounds i16, i16* %4659, i64 16
  %4669 = bitcast i16* %4668 to <16 x i16>*
  %4670 = load <16 x i16>, <16 x i16>* %4669, align 2, !tbaa !396
  %4671 = getelementptr inbounds i16, i16* %4659, i64 2
  %4672 = bitcast i16* %4671 to <16 x i16>*
  %4673 = load <16 x i16>, <16 x i16>* %4672, align 2, !tbaa !396
  %4674 = getelementptr inbounds i16, i16* %4659, i64 18
  %4675 = bitcast i16* %4674 to <16 x i16>*
  %4676 = load <16 x i16>, <16 x i16>* %4675, align 2, !tbaa !396
  %4677 = getelementptr inbounds i16, i16* %4659, i64 3
  %4678 = bitcast i16* %4677 to <16 x i16>*
  %4679 = load <16 x i16>, <16 x i16>* %4678, align 2, !tbaa !396
  %4680 = getelementptr inbounds i16, i16* %4659, i64 19
  %4681 = bitcast i16* %4680 to <16 x i16>*
  %4682 = load <16 x i16>, <16 x i16>* %4681, align 2, !tbaa !396
  %4683 = getelementptr inbounds i16, i16* %4659, i64 4
  %4684 = bitcast i16* %4683 to <16 x i16>*
  %4685 = load <16 x i16>, <16 x i16>* %4684, align 2, !tbaa !396
  %4686 = getelementptr inbounds i16, i16* %4659, i64 20
  %4687 = bitcast i16* %4686 to <16 x i16>*
  %4688 = load <16 x i16>, <16 x i16>* %4687, align 2, !tbaa !396
  %4689 = getelementptr inbounds i16, i16* %4659, i64 6
  %4690 = bitcast i16* %4689 to <16 x i16>*
  %4691 = load <16 x i16>, <16 x i16>* %4690, align 2, !tbaa !396
  %4692 = getelementptr inbounds i16, i16* %4659, i64 22
  %4693 = bitcast i16* %4692 to <16 x i16>*
  %4694 = load <16 x i16>, <16 x i16>* %4693, align 2, !tbaa !396
  %4695 = getelementptr inbounds i16, i16* %4659, i64 5
  %4696 = bitcast i16* %4695 to <16 x i16>*
  %4697 = load <16 x i16>, <16 x i16>* %4696, align 2, !tbaa !396
  %4698 = getelementptr inbounds i16, i16* %4659, i64 21
  %4699 = bitcast i16* %4698 to <16 x i16>*
  %4700 = load <16 x i16>, <16 x i16>* %4699, align 2, !tbaa !396
  %4701 = add <16 x i16> %4667, %4662
  %4702 = add <16 x i16> %4701, %4673
  %4703 = add <16 x i16> %4702, %4679
  %4704 = add <16 x i16> %4703, %4685
  %4705 = add <16 x i16> %4704, %4691
  %4706 = add <16 x i16> %4705, %4697
  %4707 = add <16 x i16> %4670, %4665
  %4708 = add <16 x i16> %4707, %4676
  %4709 = add <16 x i16> %4708, %4682
  %4710 = add <16 x i16> %4709, %4688
  %4711 = add <16 x i16> %4710, %4694
  %4712 = add <16 x i16> %4711, %4700
  %4713 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4706, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4714 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4712, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4715 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4713, <16 x i16> %4706)
  %4716 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4714, <16 x i16> %4712)
  %4717 = shufflevector <16 x i16> %4715, <16 x i16> %4716, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4718 = lshr <32 x i16> %4717, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4719 = shufflevector <32 x i16> %4718, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4720 = shl nsw i64 %4626, 5
  %4721 = add nsw i64 %4720, %4431
  %4722 = getelementptr inbounds i16, i16* %blur_x, i64 %4721
  %4723 = bitcast i16* %4722 to <16 x i16>*
  store <16 x i16> %4719, <16 x i16>* %4723, align 2, !tbaa !399
  %4724 = shufflevector <32 x i16> %4718, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4725 = getelementptr inbounds i16, i16* %4722, i64 16
  %4726 = bitcast i16* %4725 to <16 x i16>*
  store <16 x i16> %4724, <16 x i16>* %4726, align 2, !tbaa !399
  br label %"consume blur_x207"

"consume blur_x207":                              ; preds = %"for blur_y.s0.x.x.rebased200.consume blur_x207_crit_edge", %"produce blur_x206"
  %.pre-phi3611 = phi i64 [ %.pre3610, %"for blur_y.s0.x.x.rebased200.consume blur_x207_crit_edge" ], [ %4720, %"produce blur_x206" ]
  %4727 = add nsw i64 %4434, %.pre-phi3611
  %4728 = getelementptr inbounds i16, i16* %blur_x, i64 %4727
  %4729 = bitcast i16* %4728 to <16 x i16>*
  %4730 = load <16 x i16>, <16 x i16>* %4729, align 2, !tbaa !399
  %4731 = getelementptr inbounds i16, i16* %4728, i64 16
  %4732 = bitcast i16* %4731 to <16 x i16>*
  %4733 = load <16 x i16>, <16 x i16>* %4732, align 2, !tbaa !399
  %4734 = add nsw i64 %4437, %.pre-phi3611
  %4735 = getelementptr inbounds i16, i16* %blur_x, i64 %4734
  %4736 = bitcast i16* %4735 to <16 x i16>*
  %4737 = load <16 x i16>, <16 x i16>* %4736, align 2, !tbaa !399
  %4738 = getelementptr inbounds i16, i16* %4735, i64 16
  %4739 = bitcast i16* %4738 to <16 x i16>*
  %4740 = load <16 x i16>, <16 x i16>* %4739, align 2, !tbaa !399
  %4741 = add nsw i64 %4440, %.pre-phi3611
  %4742 = getelementptr inbounds i16, i16* %blur_x, i64 %4741
  %4743 = bitcast i16* %4742 to <16 x i16>*
  %4744 = load <16 x i16>, <16 x i16>* %4743, align 2, !tbaa !399
  %4745 = getelementptr inbounds i16, i16* %4742, i64 16
  %4746 = bitcast i16* %4745 to <16 x i16>*
  %4747 = load <16 x i16>, <16 x i16>* %4746, align 2, !tbaa !399
  %4748 = add nsw i64 %4443, %.pre-phi3611
  %4749 = getelementptr inbounds i16, i16* %blur_x, i64 %4748
  %4750 = bitcast i16* %4749 to <16 x i16>*
  %4751 = load <16 x i16>, <16 x i16>* %4750, align 2, !tbaa !399
  %4752 = getelementptr inbounds i16, i16* %4749, i64 16
  %4753 = bitcast i16* %4752 to <16 x i16>*
  %4754 = load <16 x i16>, <16 x i16>* %4753, align 2, !tbaa !399
  %4755 = add nsw i64 %4446, %.pre-phi3611
  %4756 = getelementptr inbounds i16, i16* %blur_x, i64 %4755
  %4757 = bitcast i16* %4756 to <16 x i16>*
  %4758 = load <16 x i16>, <16 x i16>* %4757, align 2, !tbaa !399
  %4759 = getelementptr inbounds i16, i16* %4756, i64 16
  %4760 = bitcast i16* %4759 to <16 x i16>*
  %4761 = load <16 x i16>, <16 x i16>* %4760, align 2, !tbaa !399
  %4762 = add nsw i64 %4449, %.pre-phi3611
  %4763 = getelementptr inbounds i16, i16* %blur_x, i64 %4762
  %4764 = bitcast i16* %4763 to <16 x i16>*
  %4765 = load <16 x i16>, <16 x i16>* %4764, align 2, !tbaa !399
  %4766 = getelementptr inbounds i16, i16* %4763, i64 16
  %4767 = bitcast i16* %4766 to <16 x i16>*
  %4768 = load <16 x i16>, <16 x i16>* %4767, align 2, !tbaa !399
  %4769 = add nsw i64 %4452, %.pre-phi3611
  %4770 = getelementptr inbounds i16, i16* %blur_x, i64 %4769
  %4771 = bitcast i16* %4770 to <16 x i16>*
  %4772 = load <16 x i16>, <16 x i16>* %4771, align 2, !tbaa !399
  %4773 = getelementptr inbounds i16, i16* %4770, i64 16
  %4774 = bitcast i16* %4773 to <16 x i16>*
  %4775 = load <16 x i16>, <16 x i16>* %4774, align 2, !tbaa !399
  %4776 = add <16 x i16> %4737, %4730
  %4777 = add <16 x i16> %4776, %4744
  %4778 = add <16 x i16> %4777, %4751
  %4779 = add <16 x i16> %4778, %4758
  %4780 = add <16 x i16> %4779, %4765
  %4781 = add <16 x i16> %4780, %4772
  %4782 = add <16 x i16> %4740, %4733
  %4783 = add <16 x i16> %4782, %4747
  %4784 = add <16 x i16> %4783, %4754
  %4785 = add <16 x i16> %4784, %4761
  %4786 = add <16 x i16> %4785, %4768
  %4787 = add <16 x i16> %4786, %4775
  %4788 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4781, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4789 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4787, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4790 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4788, <16 x i16> %4781)
  %4791 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4789, <16 x i16> %4787)
  %4792 = shufflevector <16 x i16> %4790, <16 x i16> %4791, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4793 = lshr <32 x i16> %4792, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4794 = shufflevector <32 x i16> %4793, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4795 = add nsw i64 %4456, %.pre-phi3611
  %4796 = getelementptr inbounds i16, i16* %66, i64 %4795
  %4797 = bitcast i16* %4796 to <16 x i16>*
  store <16 x i16> %4794, <16 x i16>* %4797, align 2, !tbaa !401
  %4798 = shufflevector <32 x i16> %4793, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4799 = getelementptr inbounds i16, i16* %4796, i64 16
  %4800 = bitcast i16* %4799 to <16 x i16>*
  store <16 x i16> %4798, <16 x i16>* %4800, align 2, !tbaa !401
  %indvars.iv.next3399 = add nuw nsw i64 %indvars.iv3398, 1
  %.not2865 = icmp eq i64 %indvars.iv.next3399, %188
  br i1 %.not2865, label %"end for blur_y.s0.x.x.rebased201", label %"for blur_y.s0.x.x.rebased200"

"for blur_y.s0.x.x.rebased208":                   ; preds = %"for blur_y.s0.x.x.rebased208.preheader", %"consume blur_x216"
  %blur_y.s0.x.x.rebased210 = phi i32 [ %4951, %"consume blur_x216" ], [ 0, %"for blur_y.s0.x.x.rebased208.preheader" ]
  %4801 = add nsw i32 %blur_y.s0.x.x.rebased210, %t1670
  %a140 = shl nsw i32 %4801, 5
  %4802 = icmp sgt i32 %a14, %a140
  %b146 = select i1 %4802, i32 %a140, i32 %a14
  %4803 = icmp slt i32 %4801, 1
  %4804 = icmp sgt i32 %4, %a140
  %4805 = or i1 %4803, %4804
  br i1 %4805, label %"produce blur_x214", label %"consume blur_x216"

"end for blur_y.s0.x.x.rebased209":               ; preds = %"consume blur_x216", %"end for blur_y.s0.x.x.rebased201"
  br i1 %34, label %"produce blur_x220", label %after_bb217

"produce blur_x214":                              ; preds = %"for blur_y.s0.x.x.rebased208"
  %4806 = icmp slt i32 %b146, %4
  %blur_x.s0.x.v1.base.s215 = select i1 %4806, i32 %b146, i32 %4
  %t805 = add nsw i32 %blur_x.s0.x.v1.base.s215, %t1809
  %4807 = sext i32 %t805 to i64
  %4808 = getelementptr inbounds i16, i16* %read_input, i64 %4807
  %4809 = getelementptr inbounds i16, i16* %4808, i64 1
  %4810 = bitcast i16* %4809 to <16 x i16>*
  %4811 = load <16 x i16>, <16 x i16>* %4810, align 2, !tbaa !396
  %4812 = getelementptr inbounds i16, i16* %4808, i64 17
  %4813 = bitcast i16* %4812 to <16 x i16>*
  %4814 = load <16 x i16>, <16 x i16>* %4813, align 2, !tbaa !396
  %4815 = bitcast i16* %4808 to <16 x i16>*
  %4816 = load <16 x i16>, <16 x i16>* %4815, align 2, !tbaa !396
  %4817 = getelementptr inbounds i16, i16* %4808, i64 16
  %4818 = bitcast i16* %4817 to <16 x i16>*
  %4819 = load <16 x i16>, <16 x i16>* %4818, align 2, !tbaa !396
  %4820 = getelementptr inbounds i16, i16* %4808, i64 2
  %4821 = bitcast i16* %4820 to <16 x i16>*
  %4822 = load <16 x i16>, <16 x i16>* %4821, align 2, !tbaa !396
  %4823 = getelementptr inbounds i16, i16* %4808, i64 18
  %4824 = bitcast i16* %4823 to <16 x i16>*
  %4825 = load <16 x i16>, <16 x i16>* %4824, align 2, !tbaa !396
  %4826 = getelementptr inbounds i16, i16* %4808, i64 3
  %4827 = bitcast i16* %4826 to <16 x i16>*
  %4828 = load <16 x i16>, <16 x i16>* %4827, align 2, !tbaa !396
  %4829 = getelementptr inbounds i16, i16* %4808, i64 19
  %4830 = bitcast i16* %4829 to <16 x i16>*
  %4831 = load <16 x i16>, <16 x i16>* %4830, align 2, !tbaa !396
  %4832 = getelementptr inbounds i16, i16* %4808, i64 4
  %4833 = bitcast i16* %4832 to <16 x i16>*
  %4834 = load <16 x i16>, <16 x i16>* %4833, align 2, !tbaa !396
  %4835 = getelementptr inbounds i16, i16* %4808, i64 20
  %4836 = bitcast i16* %4835 to <16 x i16>*
  %4837 = load <16 x i16>, <16 x i16>* %4836, align 2, !tbaa !396
  %4838 = getelementptr inbounds i16, i16* %4808, i64 6
  %4839 = bitcast i16* %4838 to <16 x i16>*
  %4840 = load <16 x i16>, <16 x i16>* %4839, align 2, !tbaa !396
  %4841 = getelementptr inbounds i16, i16* %4808, i64 22
  %4842 = bitcast i16* %4841 to <16 x i16>*
  %4843 = load <16 x i16>, <16 x i16>* %4842, align 2, !tbaa !396
  %4844 = getelementptr inbounds i16, i16* %4808, i64 5
  %4845 = bitcast i16* %4844 to <16 x i16>*
  %4846 = load <16 x i16>, <16 x i16>* %4845, align 2, !tbaa !396
  %4847 = getelementptr inbounds i16, i16* %4808, i64 21
  %4848 = bitcast i16* %4847 to <16 x i16>*
  %4849 = load <16 x i16>, <16 x i16>* %4848, align 2, !tbaa !396
  %4850 = add <16 x i16> %4816, %4811
  %4851 = add <16 x i16> %4850, %4822
  %4852 = add <16 x i16> %4851, %4828
  %4853 = add <16 x i16> %4852, %4834
  %4854 = add <16 x i16> %4853, %4840
  %4855 = add <16 x i16> %4854, %4846
  %4856 = add <16 x i16> %4819, %4814
  %4857 = add <16 x i16> %4856, %4825
  %4858 = add <16 x i16> %4857, %4831
  %4859 = add <16 x i16> %4858, %4837
  %4860 = add <16 x i16> %4859, %4843
  %4861 = add <16 x i16> %4860, %4849
  %4862 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4855, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4863 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4861, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4864 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4862, <16 x i16> %4855)
  %4865 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4863, <16 x i16> %4861)
  %4866 = shufflevector <16 x i16> %4864, <16 x i16> %4865, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4867 = lshr <32 x i16> %4866, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4868 = shufflevector <32 x i16> %4867, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4869 = sext i32 %blur_x.s0.x.v1.base.s215 to i64
  %4870 = add nsw i64 %4869, %4632
  %4871 = getelementptr inbounds i16, i16* %blur_x, i64 %4870
  %4872 = bitcast i16* %4871 to <16 x i16>*
  store <16 x i16> %4868, <16 x i16>* %4872, align 2, !tbaa !399
  %4873 = shufflevector <32 x i16> %4867, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4874 = getelementptr inbounds i16, i16* %4871, i64 16
  %4875 = bitcast i16* %4874 to <16 x i16>*
  store <16 x i16> %4873, <16 x i16>* %4875, align 2, !tbaa !399
  br label %"consume blur_x216"

"consume blur_x216":                              ; preds = %"for blur_y.s0.x.x.rebased208", %"produce blur_x214"
  %4876 = sext i32 %b146 to i64
  %4877 = add nsw i64 %4635, %4876
  %4878 = getelementptr inbounds i16, i16* %blur_x, i64 %4877
  %4879 = bitcast i16* %4878 to <16 x i16>*
  %4880 = load <16 x i16>, <16 x i16>* %4879, align 2, !tbaa !399
  %4881 = getelementptr inbounds i16, i16* %4878, i64 16
  %4882 = bitcast i16* %4881 to <16 x i16>*
  %4883 = load <16 x i16>, <16 x i16>* %4882, align 2, !tbaa !399
  %4884 = add nsw i64 %4638, %4876
  %4885 = getelementptr inbounds i16, i16* %blur_x, i64 %4884
  %4886 = bitcast i16* %4885 to <16 x i16>*
  %4887 = load <16 x i16>, <16 x i16>* %4886, align 2, !tbaa !399
  %4888 = getelementptr inbounds i16, i16* %4885, i64 16
  %4889 = bitcast i16* %4888 to <16 x i16>*
  %4890 = load <16 x i16>, <16 x i16>* %4889, align 2, !tbaa !399
  %4891 = add nsw i64 %4641, %4876
  %4892 = getelementptr inbounds i16, i16* %blur_x, i64 %4891
  %4893 = bitcast i16* %4892 to <16 x i16>*
  %4894 = load <16 x i16>, <16 x i16>* %4893, align 2, !tbaa !399
  %4895 = getelementptr inbounds i16, i16* %4892, i64 16
  %4896 = bitcast i16* %4895 to <16 x i16>*
  %4897 = load <16 x i16>, <16 x i16>* %4896, align 2, !tbaa !399
  %4898 = add nsw i64 %4644, %4876
  %4899 = getelementptr inbounds i16, i16* %blur_x, i64 %4898
  %4900 = bitcast i16* %4899 to <16 x i16>*
  %4901 = load <16 x i16>, <16 x i16>* %4900, align 2, !tbaa !399
  %4902 = getelementptr inbounds i16, i16* %4899, i64 16
  %4903 = bitcast i16* %4902 to <16 x i16>*
  %4904 = load <16 x i16>, <16 x i16>* %4903, align 2, !tbaa !399
  %4905 = add nsw i64 %4647, %4876
  %4906 = getelementptr inbounds i16, i16* %blur_x, i64 %4905
  %4907 = bitcast i16* %4906 to <16 x i16>*
  %4908 = load <16 x i16>, <16 x i16>* %4907, align 2, !tbaa !399
  %4909 = getelementptr inbounds i16, i16* %4906, i64 16
  %4910 = bitcast i16* %4909 to <16 x i16>*
  %4911 = load <16 x i16>, <16 x i16>* %4910, align 2, !tbaa !399
  %4912 = add nsw i64 %4650, %4876
  %4913 = getelementptr inbounds i16, i16* %blur_x, i64 %4912
  %4914 = bitcast i16* %4913 to <16 x i16>*
  %4915 = load <16 x i16>, <16 x i16>* %4914, align 2, !tbaa !399
  %4916 = getelementptr inbounds i16, i16* %4913, i64 16
  %4917 = bitcast i16* %4916 to <16 x i16>*
  %4918 = load <16 x i16>, <16 x i16>* %4917, align 2, !tbaa !399
  %4919 = add nsw i64 %4653, %4876
  %4920 = getelementptr inbounds i16, i16* %blur_x, i64 %4919
  %4921 = bitcast i16* %4920 to <16 x i16>*
  %4922 = load <16 x i16>, <16 x i16>* %4921, align 2, !tbaa !399
  %4923 = getelementptr inbounds i16, i16* %4920, i64 16
  %4924 = bitcast i16* %4923 to <16 x i16>*
  %4925 = load <16 x i16>, <16 x i16>* %4924, align 2, !tbaa !399
  %4926 = add <16 x i16> %4887, %4880
  %4927 = add <16 x i16> %4926, %4894
  %4928 = add <16 x i16> %4927, %4901
  %4929 = add <16 x i16> %4928, %4908
  %4930 = add <16 x i16> %4929, %4915
  %4931 = add <16 x i16> %4930, %4922
  %4932 = add <16 x i16> %4890, %4883
  %4933 = add <16 x i16> %4932, %4897
  %4934 = add <16 x i16> %4933, %4904
  %4935 = add <16 x i16> %4934, %4911
  %4936 = add <16 x i16> %4935, %4918
  %4937 = add <16 x i16> %4936, %4925
  %4938 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4931, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4939 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4937, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4940 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4938, <16 x i16> %4931)
  %4941 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4939, <16 x i16> %4937)
  %4942 = shufflevector <16 x i16> %4940, <16 x i16> %4941, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4943 = lshr <32 x i16> %4942, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4944 = shufflevector <32 x i16> %4943, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4945 = add nsw i64 %4657, %4876
  %4946 = getelementptr inbounds i16, i16* %66, i64 %4945
  %4947 = bitcast i16* %4946 to <16 x i16>*
  store <16 x i16> %4944, <16 x i16>* %4947, align 2, !tbaa !401
  %4948 = shufflevector <32 x i16> %4943, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4949 = getelementptr inbounds i16, i16* %4946, i64 16
  %4950 = bitcast i16* %4949 to <16 x i16>*
  store <16 x i16> %4948, <16 x i16>* %4950, align 2, !tbaa !401
  %4951 = add nuw nsw i32 %blur_y.s0.x.x.rebased210, 1
  %.not2864 = icmp eq i32 %4951, %t1727
  br i1 %.not2864, label %"end for blur_y.s0.x.x.rebased209", label %"for blur_y.s0.x.x.rebased208"

after_bb217:                                      ; preds = %"end for blur_y.s0.x.x.rebased209", %"produce blur_x220"
  br i1 %100, label %"for blur_y.s0.x.x.rebased222.preheader", label %"end for blur_y.s0.x.x.rebased223", !prof !386

"for blur_y.s0.x.x.rebased222.preheader":         ; preds = %after_bb217
  %4952 = sext i32 %t1738 to i64
  %4953 = zext i32 %.pre-phi3595 to i64
  %4954 = mul nsw i64 %4953, %116
  %4955 = sub nsw i64 %4954, %96
  %4956 = zext i32 %.pre-phi3591 to i64
  %4957 = mul nsw i64 %4956, %116
  %4958 = sub nsw i64 %4957, %96
  %4959 = zext i32 %.pre-phi3599 to i64
  %4960 = mul nsw i64 %4959, %116
  %4961 = sub nsw i64 %4960, %96
  %4962 = zext i32 %.pre-phi3605 to i64
  %4963 = mul nsw i64 %4962, %116
  %4964 = sub nsw i64 %4963, %96
  %4965 = zext i32 %.pre-phi to i64
  %4966 = mul nsw i64 %4965, %116
  %4967 = sub nsw i64 %4966, %96
  %4968 = zext i32 %.pre-phi3583 to i64
  %4969 = mul nsw i64 %4968, %116
  %4970 = sub nsw i64 %4969, %96
  %4971 = zext i32 %.pre-phi3579 to i64
  %4972 = mul nsw i64 %4971, %116
  %4973 = sub nsw i64 %4972, %96
  %4974 = sext i32 %a26 to i64
  %4975 = add nsw i64 %4974, 4
  %4976 = mul nsw i64 %4975, %117
  %4977 = add nsw i64 %4976, %120
  br label %"for blur_y.s0.x.x.rebased222"

"produce blur_x220":                              ; preds = %"end for blur_y.s0.x.x.rebased209"
  %4978 = getelementptr inbounds i16, i16* %read_input, i64 %127
  %4979 = getelementptr inbounds i16, i16* %4978, i64 -31
  %4980 = bitcast i16* %4979 to <16 x i16>*
  %4981 = load <16 x i16>, <16 x i16>* %4980, align 2, !tbaa !396
  %4982 = getelementptr inbounds i16, i16* %4978, i64 -15
  %4983 = bitcast i16* %4982 to <16 x i16>*
  %4984 = load <16 x i16>, <16 x i16>* %4983, align 2, !tbaa !396
  %4985 = getelementptr inbounds i16, i16* %4978, i64 -32
  %4986 = bitcast i16* %4985 to <16 x i16>*
  %4987 = load <16 x i16>, <16 x i16>* %4986, align 2, !tbaa !396
  %4988 = getelementptr inbounds i16, i16* %4978, i64 -16
  %4989 = bitcast i16* %4988 to <16 x i16>*
  %4990 = load <16 x i16>, <16 x i16>* %4989, align 2, !tbaa !396
  %4991 = getelementptr inbounds i16, i16* %4978, i64 -30
  %4992 = bitcast i16* %4991 to <16 x i16>*
  %4993 = load <16 x i16>, <16 x i16>* %4992, align 2, !tbaa !396
  %4994 = getelementptr inbounds i16, i16* %4978, i64 -14
  %4995 = bitcast i16* %4994 to <16 x i16>*
  %4996 = load <16 x i16>, <16 x i16>* %4995, align 2, !tbaa !396
  %4997 = getelementptr inbounds i16, i16* %4978, i64 -29
  %4998 = bitcast i16* %4997 to <16 x i16>*
  %4999 = load <16 x i16>, <16 x i16>* %4998, align 2, !tbaa !396
  %5000 = getelementptr inbounds i16, i16* %4978, i64 -13
  %5001 = bitcast i16* %5000 to <16 x i16>*
  %5002 = load <16 x i16>, <16 x i16>* %5001, align 2, !tbaa !396
  %5003 = getelementptr inbounds i16, i16* %4978, i64 -28
  %5004 = bitcast i16* %5003 to <16 x i16>*
  %5005 = load <16 x i16>, <16 x i16>* %5004, align 2, !tbaa !396
  %5006 = getelementptr inbounds i16, i16* %4978, i64 -12
  %5007 = bitcast i16* %5006 to <16 x i16>*
  %5008 = load <16 x i16>, <16 x i16>* %5007, align 2, !tbaa !396
  %5009 = getelementptr inbounds i16, i16* %4978, i64 -26
  %5010 = bitcast i16* %5009 to <16 x i16>*
  %5011 = load <16 x i16>, <16 x i16>* %5010, align 2, !tbaa !396
  %5012 = getelementptr inbounds i16, i16* %4978, i64 -10
  %5013 = bitcast i16* %5012 to <16 x i16>*
  %5014 = load <16 x i16>, <16 x i16>* %5013, align 2, !tbaa !396
  %5015 = getelementptr inbounds i16, i16* %4978, i64 -27
  %5016 = bitcast i16* %5015 to <16 x i16>*
  %5017 = load <16 x i16>, <16 x i16>* %5016, align 2, !tbaa !396
  %5018 = getelementptr inbounds i16, i16* %4978, i64 -11
  %5019 = bitcast i16* %5018 to <16 x i16>*
  %5020 = load <16 x i16>, <16 x i16>* %5019, align 2, !tbaa !396
  %5021 = add <16 x i16> %4987, %4981
  %5022 = add <16 x i16> %5021, %4993
  %5023 = add <16 x i16> %5022, %4999
  %5024 = add <16 x i16> %5023, %5005
  %5025 = add <16 x i16> %5024, %5011
  %5026 = add <16 x i16> %5025, %5017
  %5027 = add <16 x i16> %4990, %4984
  %5028 = add <16 x i16> %5027, %4996
  %5029 = add <16 x i16> %5028, %5002
  %5030 = add <16 x i16> %5029, %5008
  %5031 = add <16 x i16> %5030, %5014
  %5032 = add <16 x i16> %5031, %5020
  %5033 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5026, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5034 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5032, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5035 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5033, <16 x i16> %5026)
  %5036 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5034, <16 x i16> %5032)
  %5037 = shufflevector <16 x i16> %5035, <16 x i16> %5036, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5038 = lshr <32 x i16> %5037, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5039 = shufflevector <32 x i16> %5038, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5040 = zext i32 %.pre-phi3583 to i64
  %5041 = mul nsw i64 %97, %5040
  %5042 = add nsw i64 %99, %5041
  %5043 = getelementptr inbounds i16, i16* %blur_x, i64 %5042
  %5044 = getelementptr inbounds i16, i16* %5043, i64 -32
  %5045 = bitcast i16* %5044 to <16 x i16>*
  store <16 x i16> %5039, <16 x i16>* %5045, align 2, !tbaa !399
  %5046 = shufflevector <32 x i16> %5038, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5047 = getelementptr inbounds i16, i16* %5043, i64 -16
  %5048 = bitcast i16* %5047 to <16 x i16>*
  store <16 x i16> %5046, <16 x i16>* %5048, align 2, !tbaa !399
  %5049 = zext i32 %.pre-phi3595 to i64
  %5050 = mul nsw i64 %5049, %116
  %5051 = add nsw i64 %5050, %94
  %5052 = getelementptr inbounds i16, i16* %blur_x, i64 %5051
  %5053 = getelementptr inbounds i16, i16* %5052, i64 -32
  %5054 = bitcast i16* %5053 to <16 x i16>*
  %5055 = load <16 x i16>, <16 x i16>* %5054, align 2, !tbaa !399
  %5056 = getelementptr inbounds i16, i16* %5052, i64 -16
  %5057 = bitcast i16* %5056 to <16 x i16>*
  %5058 = load <16 x i16>, <16 x i16>* %5057, align 2, !tbaa !399
  %5059 = zext i32 %.pre-phi3591 to i64
  %5060 = mul nsw i64 %5059, %116
  %5061 = add nsw i64 %5060, %94
  %5062 = getelementptr inbounds i16, i16* %blur_x, i64 %5061
  %5063 = getelementptr inbounds i16, i16* %5062, i64 -32
  %5064 = bitcast i16* %5063 to <16 x i16>*
  %5065 = load <16 x i16>, <16 x i16>* %5064, align 2, !tbaa !399
  %5066 = getelementptr inbounds i16, i16* %5062, i64 -16
  %5067 = bitcast i16* %5066 to <16 x i16>*
  %5068 = load <16 x i16>, <16 x i16>* %5067, align 2, !tbaa !399
  %5069 = zext i32 %.pre-phi3599 to i64
  %5070 = mul nsw i64 %5069, %116
  %5071 = add nsw i64 %5070, %94
  %5072 = getelementptr inbounds i16, i16* %blur_x, i64 %5071
  %5073 = getelementptr inbounds i16, i16* %5072, i64 -32
  %5074 = bitcast i16* %5073 to <16 x i16>*
  %5075 = load <16 x i16>, <16 x i16>* %5074, align 2, !tbaa !399
  %5076 = getelementptr inbounds i16, i16* %5072, i64 -16
  %5077 = bitcast i16* %5076 to <16 x i16>*
  %5078 = load <16 x i16>, <16 x i16>* %5077, align 2, !tbaa !399
  %5079 = zext i32 %.pre-phi3605 to i64
  %5080 = mul nsw i64 %5079, %116
  %5081 = add nsw i64 %5080, %94
  %5082 = getelementptr inbounds i16, i16* %blur_x, i64 %5081
  %5083 = getelementptr inbounds i16, i16* %5082, i64 -32
  %5084 = bitcast i16* %5083 to <16 x i16>*
  %5085 = load <16 x i16>, <16 x i16>* %5084, align 2, !tbaa !399
  %5086 = getelementptr inbounds i16, i16* %5082, i64 -16
  %5087 = bitcast i16* %5086 to <16 x i16>*
  %5088 = load <16 x i16>, <16 x i16>* %5087, align 2, !tbaa !399
  %5089 = zext i32 %.pre-phi to i64
  %5090 = mul nsw i64 %5089, %116
  %5091 = add nsw i64 %5090, %94
  %5092 = getelementptr inbounds i16, i16* %blur_x, i64 %5091
  %5093 = getelementptr inbounds i16, i16* %5092, i64 -32
  %5094 = bitcast i16* %5093 to <16 x i16>*
  %5095 = load <16 x i16>, <16 x i16>* %5094, align 2, !tbaa !399
  %5096 = getelementptr inbounds i16, i16* %5092, i64 -16
  %5097 = bitcast i16* %5096 to <16 x i16>*
  %5098 = load <16 x i16>, <16 x i16>* %5097, align 2, !tbaa !399
  %5099 = mul nsw i64 %5040, %116
  %5100 = add nsw i64 %5099, %94
  %5101 = getelementptr inbounds i16, i16* %blur_x, i64 %5100
  %5102 = getelementptr inbounds i16, i16* %5101, i64 -32
  %5103 = bitcast i16* %5102 to <16 x i16>*
  %5104 = load <16 x i16>, <16 x i16>* %5103, align 2, !tbaa !399
  %5105 = getelementptr inbounds i16, i16* %5101, i64 -16
  %5106 = bitcast i16* %5105 to <16 x i16>*
  %5107 = load <16 x i16>, <16 x i16>* %5106, align 2, !tbaa !399
  %5108 = zext i32 %.pre-phi3579 to i64
  %5109 = mul nsw i64 %5108, %116
  %5110 = add nsw i64 %5109, %94
  %5111 = getelementptr inbounds i16, i16* %blur_x, i64 %5110
  %5112 = getelementptr inbounds i16, i16* %5111, i64 -32
  %5113 = bitcast i16* %5112 to <16 x i16>*
  %5114 = load <16 x i16>, <16 x i16>* %5113, align 2, !tbaa !399
  %5115 = getelementptr inbounds i16, i16* %5111, i64 -16
  %5116 = bitcast i16* %5115 to <16 x i16>*
  %5117 = load <16 x i16>, <16 x i16>* %5116, align 2, !tbaa !399
  %5118 = add <16 x i16> %5065, %5055
  %5119 = add <16 x i16> %5118, %5075
  %5120 = add <16 x i16> %5119, %5085
  %5121 = add <16 x i16> %5120, %5095
  %5122 = add <16 x i16> %5121, %5104
  %5123 = add <16 x i16> %5122, %5114
  %5124 = add <16 x i16> %5068, %5058
  %5125 = add <16 x i16> %5124, %5078
  %5126 = add <16 x i16> %5125, %5088
  %5127 = add <16 x i16> %5126, %5098
  %5128 = add <16 x i16> %5127, %5107
  %5129 = add <16 x i16> %5128, %5117
  %5130 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5123, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5131 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5129, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5132 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5130, <16 x i16> %5123)
  %5133 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5131, <16 x i16> %5129)
  %5134 = shufflevector <16 x i16> %5132, <16 x i16> %5133, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5135 = lshr <32 x i16> %5134, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5136 = shufflevector <32 x i16> %5135, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5137 = sext i32 %a26 to i64
  %5138 = add nsw i64 %5137, 4
  %5139 = mul nsw i64 %5138, %117
  %5140 = add nsw i64 %119, %5139
  %5141 = getelementptr inbounds i16, i16* %66, i64 %5140
  %5142 = getelementptr inbounds i16, i16* %5141, i64 -32
  %5143 = bitcast i16* %5142 to <16 x i16>*
  store <16 x i16> %5136, <16 x i16>* %5143, align 2, !tbaa !401
  %5144 = shufflevector <32 x i16> %5135, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5145 = getelementptr inbounds i16, i16* %5141, i64 -16
  %5146 = bitcast i16* %5145 to <16 x i16>*
  store <16 x i16> %5144, <16 x i16>* %5146, align 2, !tbaa !401
  br label %after_bb217

"for blur_y.s0.x.x.rebased222":                   ; preds = %"for blur_y.s0.x.x.rebased222.preheader", %"consume blur_x229"
  %indvars.iv3401 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased222.preheader" ], [ %indvars.iv.next3402, %"consume blur_x229" ]
  %5147 = add nsw i64 %indvars.iv3401, %101
  %5148 = icmp slt i64 %5147, 1
  %5149 = trunc i64 %5147 to i32
  %5150 = shl nsw i32 %5149, 5
  %5151 = icmp sgt i32 %4, %5150
  %5152 = or i1 %5148, %5151
  br i1 %5152, label %"produce blur_x228", label %"for blur_y.s0.x.x.rebased222.consume blur_x229_crit_edge"

"for blur_y.s0.x.x.rebased222.consume blur_x229_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased222"
  %.pre3612 = shl nsw i64 %5147, 5
  br label %"consume blur_x229"

"end for blur_y.s0.x.x.rebased223":               ; preds = %"consume blur_x229", %after_bb217
  br i1 %102, label %"for blur_y.s0.x.x.rebased230.preheader", label %"end for blur_y.s0.x.x.rebased231", !prof !386

"for blur_y.s0.x.x.rebased230.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased223"
  %5153 = sext i32 %t1738 to i64
  %5154 = zext i32 %.pre-phi3595 to i64
  %5155 = mul nsw i64 %5154, %116
  %5156 = sub nsw i64 %5155, %96
  %5157 = zext i32 %.pre-phi3591 to i64
  %5158 = mul nsw i64 %5157, %116
  %5159 = sub nsw i64 %5158, %96
  %5160 = zext i32 %.pre-phi3599 to i64
  %5161 = mul nsw i64 %5160, %116
  %5162 = sub nsw i64 %5161, %96
  %5163 = zext i32 %.pre-phi3605 to i64
  %5164 = mul nsw i64 %5163, %116
  %5165 = sub nsw i64 %5164, %96
  %5166 = zext i32 %.pre-phi to i64
  %5167 = mul nsw i64 %5166, %116
  %5168 = sub nsw i64 %5167, %96
  %5169 = zext i32 %.pre-phi3583 to i64
  %5170 = mul nsw i64 %5169, %116
  %5171 = sub nsw i64 %5170, %96
  %5172 = zext i32 %.pre-phi3579 to i64
  %5173 = mul nsw i64 %5172, %116
  %5174 = sub nsw i64 %5173, %96
  %5175 = sext i32 %a26 to i64
  %5176 = add nsw i64 %5175, 4
  %5177 = mul nsw i64 %5176, %117
  %5178 = add nsw i64 %5177, %120
  br label %"for blur_y.s0.x.x.rebased230"

"produce blur_x228":                              ; preds = %"for blur_y.s0.x.x.rebased222"
  %t816 = add nsw i32 %5150, %t1825
  %5179 = sext i32 %t816 to i64
  %5180 = getelementptr inbounds i16, i16* %read_input, i64 %5179
  %5181 = getelementptr inbounds i16, i16* %5180, i64 1
  %5182 = bitcast i16* %5181 to <16 x i16>*
  %5183 = load <16 x i16>, <16 x i16>* %5182, align 2, !tbaa !396
  %5184 = getelementptr inbounds i16, i16* %5180, i64 17
  %5185 = bitcast i16* %5184 to <16 x i16>*
  %5186 = load <16 x i16>, <16 x i16>* %5185, align 2, !tbaa !396
  %5187 = bitcast i16* %5180 to <16 x i16>*
  %5188 = load <16 x i16>, <16 x i16>* %5187, align 2, !tbaa !396
  %5189 = getelementptr inbounds i16, i16* %5180, i64 16
  %5190 = bitcast i16* %5189 to <16 x i16>*
  %5191 = load <16 x i16>, <16 x i16>* %5190, align 2, !tbaa !396
  %5192 = getelementptr inbounds i16, i16* %5180, i64 2
  %5193 = bitcast i16* %5192 to <16 x i16>*
  %5194 = load <16 x i16>, <16 x i16>* %5193, align 2, !tbaa !396
  %5195 = getelementptr inbounds i16, i16* %5180, i64 18
  %5196 = bitcast i16* %5195 to <16 x i16>*
  %5197 = load <16 x i16>, <16 x i16>* %5196, align 2, !tbaa !396
  %5198 = getelementptr inbounds i16, i16* %5180, i64 3
  %5199 = bitcast i16* %5198 to <16 x i16>*
  %5200 = load <16 x i16>, <16 x i16>* %5199, align 2, !tbaa !396
  %5201 = getelementptr inbounds i16, i16* %5180, i64 19
  %5202 = bitcast i16* %5201 to <16 x i16>*
  %5203 = load <16 x i16>, <16 x i16>* %5202, align 2, !tbaa !396
  %5204 = getelementptr inbounds i16, i16* %5180, i64 4
  %5205 = bitcast i16* %5204 to <16 x i16>*
  %5206 = load <16 x i16>, <16 x i16>* %5205, align 2, !tbaa !396
  %5207 = getelementptr inbounds i16, i16* %5180, i64 20
  %5208 = bitcast i16* %5207 to <16 x i16>*
  %5209 = load <16 x i16>, <16 x i16>* %5208, align 2, !tbaa !396
  %5210 = getelementptr inbounds i16, i16* %5180, i64 6
  %5211 = bitcast i16* %5210 to <16 x i16>*
  %5212 = load <16 x i16>, <16 x i16>* %5211, align 2, !tbaa !396
  %5213 = getelementptr inbounds i16, i16* %5180, i64 22
  %5214 = bitcast i16* %5213 to <16 x i16>*
  %5215 = load <16 x i16>, <16 x i16>* %5214, align 2, !tbaa !396
  %5216 = getelementptr inbounds i16, i16* %5180, i64 5
  %5217 = bitcast i16* %5216 to <16 x i16>*
  %5218 = load <16 x i16>, <16 x i16>* %5217, align 2, !tbaa !396
  %5219 = getelementptr inbounds i16, i16* %5180, i64 21
  %5220 = bitcast i16* %5219 to <16 x i16>*
  %5221 = load <16 x i16>, <16 x i16>* %5220, align 2, !tbaa !396
  %5222 = add <16 x i16> %5188, %5183
  %5223 = add <16 x i16> %5222, %5194
  %5224 = add <16 x i16> %5223, %5200
  %5225 = add <16 x i16> %5224, %5206
  %5226 = add <16 x i16> %5225, %5212
  %5227 = add <16 x i16> %5226, %5218
  %5228 = add <16 x i16> %5191, %5186
  %5229 = add <16 x i16> %5228, %5197
  %5230 = add <16 x i16> %5229, %5203
  %5231 = add <16 x i16> %5230, %5209
  %5232 = add <16 x i16> %5231, %5215
  %5233 = add <16 x i16> %5232, %5221
  %5234 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5227, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5235 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5233, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5236 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5234, <16 x i16> %5227)
  %5237 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5235, <16 x i16> %5233)
  %5238 = shufflevector <16 x i16> %5236, <16 x i16> %5237, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5239 = lshr <32 x i16> %5238, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5240 = shufflevector <32 x i16> %5239, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5241 = shl nsw i64 %5147, 5
  %5242 = add nsw i64 %5241, %4952
  %5243 = getelementptr inbounds i16, i16* %blur_x, i64 %5242
  %5244 = bitcast i16* %5243 to <16 x i16>*
  store <16 x i16> %5240, <16 x i16>* %5244, align 2, !tbaa !399
  %5245 = shufflevector <32 x i16> %5239, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5246 = getelementptr inbounds i16, i16* %5243, i64 16
  %5247 = bitcast i16* %5246 to <16 x i16>*
  store <16 x i16> %5245, <16 x i16>* %5247, align 2, !tbaa !399
  br label %"consume blur_x229"

"consume blur_x229":                              ; preds = %"for blur_y.s0.x.x.rebased222.consume blur_x229_crit_edge", %"produce blur_x228"
  %.pre-phi3613 = phi i64 [ %.pre3612, %"for blur_y.s0.x.x.rebased222.consume blur_x229_crit_edge" ], [ %5241, %"produce blur_x228" ]
  %5248 = add nsw i64 %4955, %.pre-phi3613
  %5249 = getelementptr inbounds i16, i16* %blur_x, i64 %5248
  %5250 = bitcast i16* %5249 to <16 x i16>*
  %5251 = load <16 x i16>, <16 x i16>* %5250, align 2, !tbaa !399
  %5252 = getelementptr inbounds i16, i16* %5249, i64 16
  %5253 = bitcast i16* %5252 to <16 x i16>*
  %5254 = load <16 x i16>, <16 x i16>* %5253, align 2, !tbaa !399
  %5255 = add nsw i64 %4958, %.pre-phi3613
  %5256 = getelementptr inbounds i16, i16* %blur_x, i64 %5255
  %5257 = bitcast i16* %5256 to <16 x i16>*
  %5258 = load <16 x i16>, <16 x i16>* %5257, align 2, !tbaa !399
  %5259 = getelementptr inbounds i16, i16* %5256, i64 16
  %5260 = bitcast i16* %5259 to <16 x i16>*
  %5261 = load <16 x i16>, <16 x i16>* %5260, align 2, !tbaa !399
  %5262 = add nsw i64 %4961, %.pre-phi3613
  %5263 = getelementptr inbounds i16, i16* %blur_x, i64 %5262
  %5264 = bitcast i16* %5263 to <16 x i16>*
  %5265 = load <16 x i16>, <16 x i16>* %5264, align 2, !tbaa !399
  %5266 = getelementptr inbounds i16, i16* %5263, i64 16
  %5267 = bitcast i16* %5266 to <16 x i16>*
  %5268 = load <16 x i16>, <16 x i16>* %5267, align 2, !tbaa !399
  %5269 = add nsw i64 %4964, %.pre-phi3613
  %5270 = getelementptr inbounds i16, i16* %blur_x, i64 %5269
  %5271 = bitcast i16* %5270 to <16 x i16>*
  %5272 = load <16 x i16>, <16 x i16>* %5271, align 2, !tbaa !399
  %5273 = getelementptr inbounds i16, i16* %5270, i64 16
  %5274 = bitcast i16* %5273 to <16 x i16>*
  %5275 = load <16 x i16>, <16 x i16>* %5274, align 2, !tbaa !399
  %5276 = add nsw i64 %4967, %.pre-phi3613
  %5277 = getelementptr inbounds i16, i16* %blur_x, i64 %5276
  %5278 = bitcast i16* %5277 to <16 x i16>*
  %5279 = load <16 x i16>, <16 x i16>* %5278, align 2, !tbaa !399
  %5280 = getelementptr inbounds i16, i16* %5277, i64 16
  %5281 = bitcast i16* %5280 to <16 x i16>*
  %5282 = load <16 x i16>, <16 x i16>* %5281, align 2, !tbaa !399
  %5283 = add nsw i64 %4970, %.pre-phi3613
  %5284 = getelementptr inbounds i16, i16* %blur_x, i64 %5283
  %5285 = bitcast i16* %5284 to <16 x i16>*
  %5286 = load <16 x i16>, <16 x i16>* %5285, align 2, !tbaa !399
  %5287 = getelementptr inbounds i16, i16* %5284, i64 16
  %5288 = bitcast i16* %5287 to <16 x i16>*
  %5289 = load <16 x i16>, <16 x i16>* %5288, align 2, !tbaa !399
  %5290 = add nsw i64 %4973, %.pre-phi3613
  %5291 = getelementptr inbounds i16, i16* %blur_x, i64 %5290
  %5292 = bitcast i16* %5291 to <16 x i16>*
  %5293 = load <16 x i16>, <16 x i16>* %5292, align 2, !tbaa !399
  %5294 = getelementptr inbounds i16, i16* %5291, i64 16
  %5295 = bitcast i16* %5294 to <16 x i16>*
  %5296 = load <16 x i16>, <16 x i16>* %5295, align 2, !tbaa !399
  %5297 = add <16 x i16> %5258, %5251
  %5298 = add <16 x i16> %5297, %5265
  %5299 = add <16 x i16> %5298, %5272
  %5300 = add <16 x i16> %5299, %5279
  %5301 = add <16 x i16> %5300, %5286
  %5302 = add <16 x i16> %5301, %5293
  %5303 = add <16 x i16> %5261, %5254
  %5304 = add <16 x i16> %5303, %5268
  %5305 = add <16 x i16> %5304, %5275
  %5306 = add <16 x i16> %5305, %5282
  %5307 = add <16 x i16> %5306, %5289
  %5308 = add <16 x i16> %5307, %5296
  %5309 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5302, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5310 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5308, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5311 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5309, <16 x i16> %5302)
  %5312 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5310, <16 x i16> %5308)
  %5313 = shufflevector <16 x i16> %5311, <16 x i16> %5312, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5314 = lshr <32 x i16> %5313, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5315 = shufflevector <32 x i16> %5314, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5316 = add nsw i64 %4977, %.pre-phi3613
  %5317 = getelementptr inbounds i16, i16* %66, i64 %5316
  %5318 = bitcast i16* %5317 to <16 x i16>*
  store <16 x i16> %5315, <16 x i16>* %5318, align 2, !tbaa !401
  %5319 = shufflevector <32 x i16> %5314, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5320 = getelementptr inbounds i16, i16* %5317, i64 16
  %5321 = bitcast i16* %5320 to <16 x i16>*
  store <16 x i16> %5319, <16 x i16>* %5321, align 2, !tbaa !401
  %indvars.iv.next3402 = add nuw nsw i64 %indvars.iv3401, 1
  %.not2863 = icmp eq i64 %indvars.iv.next3402, %188
  br i1 %.not2863, label %"end for blur_y.s0.x.x.rebased223", label %"for blur_y.s0.x.x.rebased222"

"for blur_y.s0.x.x.rebased230":                   ; preds = %"for blur_y.s0.x.x.rebased230.preheader", %"consume blur_x238"
  %blur_y.s0.x.x.rebased232 = phi i32 [ %5472, %"consume blur_x238" ], [ 0, %"for blur_y.s0.x.x.rebased230.preheader" ]
  %5322 = add nsw i32 %blur_y.s0.x.x.rebased232, %t1670
  %a147 = shl nsw i32 %5322, 5
  %5323 = icmp sgt i32 %a14, %a147
  %b153 = select i1 %5323, i32 %a147, i32 %a14
  %5324 = icmp slt i32 %5322, 1
  %5325 = icmp sgt i32 %4, %a147
  %5326 = or i1 %5324, %5325
  br i1 %5326, label %"produce blur_x236", label %"consume blur_x238"

"end for blur_y.s0.x.x.rebased231":               ; preds = %"consume blur_x238", %"end for blur_y.s0.x.x.rebased223"
  br i1 %34, label %"produce blur_x242", label %after_bb239

"produce blur_x236":                              ; preds = %"for blur_y.s0.x.x.rebased230"
  %5327 = icmp slt i32 %b153, %4
  %blur_x.s0.x.v1.base.s237 = select i1 %5327, i32 %b153, i32 %4
  %t821 = add nsw i32 %blur_x.s0.x.v1.base.s237, %t1825
  %5328 = sext i32 %t821 to i64
  %5329 = getelementptr inbounds i16, i16* %read_input, i64 %5328
  %5330 = getelementptr inbounds i16, i16* %5329, i64 1
  %5331 = bitcast i16* %5330 to <16 x i16>*
  %5332 = load <16 x i16>, <16 x i16>* %5331, align 2, !tbaa !396
  %5333 = getelementptr inbounds i16, i16* %5329, i64 17
  %5334 = bitcast i16* %5333 to <16 x i16>*
  %5335 = load <16 x i16>, <16 x i16>* %5334, align 2, !tbaa !396
  %5336 = bitcast i16* %5329 to <16 x i16>*
  %5337 = load <16 x i16>, <16 x i16>* %5336, align 2, !tbaa !396
  %5338 = getelementptr inbounds i16, i16* %5329, i64 16
  %5339 = bitcast i16* %5338 to <16 x i16>*
  %5340 = load <16 x i16>, <16 x i16>* %5339, align 2, !tbaa !396
  %5341 = getelementptr inbounds i16, i16* %5329, i64 2
  %5342 = bitcast i16* %5341 to <16 x i16>*
  %5343 = load <16 x i16>, <16 x i16>* %5342, align 2, !tbaa !396
  %5344 = getelementptr inbounds i16, i16* %5329, i64 18
  %5345 = bitcast i16* %5344 to <16 x i16>*
  %5346 = load <16 x i16>, <16 x i16>* %5345, align 2, !tbaa !396
  %5347 = getelementptr inbounds i16, i16* %5329, i64 3
  %5348 = bitcast i16* %5347 to <16 x i16>*
  %5349 = load <16 x i16>, <16 x i16>* %5348, align 2, !tbaa !396
  %5350 = getelementptr inbounds i16, i16* %5329, i64 19
  %5351 = bitcast i16* %5350 to <16 x i16>*
  %5352 = load <16 x i16>, <16 x i16>* %5351, align 2, !tbaa !396
  %5353 = getelementptr inbounds i16, i16* %5329, i64 4
  %5354 = bitcast i16* %5353 to <16 x i16>*
  %5355 = load <16 x i16>, <16 x i16>* %5354, align 2, !tbaa !396
  %5356 = getelementptr inbounds i16, i16* %5329, i64 20
  %5357 = bitcast i16* %5356 to <16 x i16>*
  %5358 = load <16 x i16>, <16 x i16>* %5357, align 2, !tbaa !396
  %5359 = getelementptr inbounds i16, i16* %5329, i64 6
  %5360 = bitcast i16* %5359 to <16 x i16>*
  %5361 = load <16 x i16>, <16 x i16>* %5360, align 2, !tbaa !396
  %5362 = getelementptr inbounds i16, i16* %5329, i64 22
  %5363 = bitcast i16* %5362 to <16 x i16>*
  %5364 = load <16 x i16>, <16 x i16>* %5363, align 2, !tbaa !396
  %5365 = getelementptr inbounds i16, i16* %5329, i64 5
  %5366 = bitcast i16* %5365 to <16 x i16>*
  %5367 = load <16 x i16>, <16 x i16>* %5366, align 2, !tbaa !396
  %5368 = getelementptr inbounds i16, i16* %5329, i64 21
  %5369 = bitcast i16* %5368 to <16 x i16>*
  %5370 = load <16 x i16>, <16 x i16>* %5369, align 2, !tbaa !396
  %5371 = add <16 x i16> %5337, %5332
  %5372 = add <16 x i16> %5371, %5343
  %5373 = add <16 x i16> %5372, %5349
  %5374 = add <16 x i16> %5373, %5355
  %5375 = add <16 x i16> %5374, %5361
  %5376 = add <16 x i16> %5375, %5367
  %5377 = add <16 x i16> %5340, %5335
  %5378 = add <16 x i16> %5377, %5346
  %5379 = add <16 x i16> %5378, %5352
  %5380 = add <16 x i16> %5379, %5358
  %5381 = add <16 x i16> %5380, %5364
  %5382 = add <16 x i16> %5381, %5370
  %5383 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5376, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5384 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5382, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5385 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5383, <16 x i16> %5376)
  %5386 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5384, <16 x i16> %5382)
  %5387 = shufflevector <16 x i16> %5385, <16 x i16> %5386, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5388 = lshr <32 x i16> %5387, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5389 = shufflevector <32 x i16> %5388, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5390 = sext i32 %blur_x.s0.x.v1.base.s237 to i64
  %5391 = add nsw i64 %5390, %5153
  %5392 = getelementptr inbounds i16, i16* %blur_x, i64 %5391
  %5393 = bitcast i16* %5392 to <16 x i16>*
  store <16 x i16> %5389, <16 x i16>* %5393, align 2, !tbaa !399
  %5394 = shufflevector <32 x i16> %5388, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5395 = getelementptr inbounds i16, i16* %5392, i64 16
  %5396 = bitcast i16* %5395 to <16 x i16>*
  store <16 x i16> %5394, <16 x i16>* %5396, align 2, !tbaa !399
  br label %"consume blur_x238"

"consume blur_x238":                              ; preds = %"for blur_y.s0.x.x.rebased230", %"produce blur_x236"
  %5397 = sext i32 %b153 to i64
  %5398 = add nsw i64 %5156, %5397
  %5399 = getelementptr inbounds i16, i16* %blur_x, i64 %5398
  %5400 = bitcast i16* %5399 to <16 x i16>*
  %5401 = load <16 x i16>, <16 x i16>* %5400, align 2, !tbaa !399
  %5402 = getelementptr inbounds i16, i16* %5399, i64 16
  %5403 = bitcast i16* %5402 to <16 x i16>*
  %5404 = load <16 x i16>, <16 x i16>* %5403, align 2, !tbaa !399
  %5405 = add nsw i64 %5159, %5397
  %5406 = getelementptr inbounds i16, i16* %blur_x, i64 %5405
  %5407 = bitcast i16* %5406 to <16 x i16>*
  %5408 = load <16 x i16>, <16 x i16>* %5407, align 2, !tbaa !399
  %5409 = getelementptr inbounds i16, i16* %5406, i64 16
  %5410 = bitcast i16* %5409 to <16 x i16>*
  %5411 = load <16 x i16>, <16 x i16>* %5410, align 2, !tbaa !399
  %5412 = add nsw i64 %5162, %5397
  %5413 = getelementptr inbounds i16, i16* %blur_x, i64 %5412
  %5414 = bitcast i16* %5413 to <16 x i16>*
  %5415 = load <16 x i16>, <16 x i16>* %5414, align 2, !tbaa !399
  %5416 = getelementptr inbounds i16, i16* %5413, i64 16
  %5417 = bitcast i16* %5416 to <16 x i16>*
  %5418 = load <16 x i16>, <16 x i16>* %5417, align 2, !tbaa !399
  %5419 = add nsw i64 %5165, %5397
  %5420 = getelementptr inbounds i16, i16* %blur_x, i64 %5419
  %5421 = bitcast i16* %5420 to <16 x i16>*
  %5422 = load <16 x i16>, <16 x i16>* %5421, align 2, !tbaa !399
  %5423 = getelementptr inbounds i16, i16* %5420, i64 16
  %5424 = bitcast i16* %5423 to <16 x i16>*
  %5425 = load <16 x i16>, <16 x i16>* %5424, align 2, !tbaa !399
  %5426 = add nsw i64 %5168, %5397
  %5427 = getelementptr inbounds i16, i16* %blur_x, i64 %5426
  %5428 = bitcast i16* %5427 to <16 x i16>*
  %5429 = load <16 x i16>, <16 x i16>* %5428, align 2, !tbaa !399
  %5430 = getelementptr inbounds i16, i16* %5427, i64 16
  %5431 = bitcast i16* %5430 to <16 x i16>*
  %5432 = load <16 x i16>, <16 x i16>* %5431, align 2, !tbaa !399
  %5433 = add nsw i64 %5171, %5397
  %5434 = getelementptr inbounds i16, i16* %blur_x, i64 %5433
  %5435 = bitcast i16* %5434 to <16 x i16>*
  %5436 = load <16 x i16>, <16 x i16>* %5435, align 2, !tbaa !399
  %5437 = getelementptr inbounds i16, i16* %5434, i64 16
  %5438 = bitcast i16* %5437 to <16 x i16>*
  %5439 = load <16 x i16>, <16 x i16>* %5438, align 2, !tbaa !399
  %5440 = add nsw i64 %5174, %5397
  %5441 = getelementptr inbounds i16, i16* %blur_x, i64 %5440
  %5442 = bitcast i16* %5441 to <16 x i16>*
  %5443 = load <16 x i16>, <16 x i16>* %5442, align 2, !tbaa !399
  %5444 = getelementptr inbounds i16, i16* %5441, i64 16
  %5445 = bitcast i16* %5444 to <16 x i16>*
  %5446 = load <16 x i16>, <16 x i16>* %5445, align 2, !tbaa !399
  %5447 = add <16 x i16> %5408, %5401
  %5448 = add <16 x i16> %5447, %5415
  %5449 = add <16 x i16> %5448, %5422
  %5450 = add <16 x i16> %5449, %5429
  %5451 = add <16 x i16> %5450, %5436
  %5452 = add <16 x i16> %5451, %5443
  %5453 = add <16 x i16> %5411, %5404
  %5454 = add <16 x i16> %5453, %5418
  %5455 = add <16 x i16> %5454, %5425
  %5456 = add <16 x i16> %5455, %5432
  %5457 = add <16 x i16> %5456, %5439
  %5458 = add <16 x i16> %5457, %5446
  %5459 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5452, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5460 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5458, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5461 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5459, <16 x i16> %5452)
  %5462 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5460, <16 x i16> %5458)
  %5463 = shufflevector <16 x i16> %5461, <16 x i16> %5462, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5464 = lshr <32 x i16> %5463, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5465 = shufflevector <32 x i16> %5464, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5466 = add nsw i64 %5178, %5397
  %5467 = getelementptr inbounds i16, i16* %66, i64 %5466
  %5468 = bitcast i16* %5467 to <16 x i16>*
  store <16 x i16> %5465, <16 x i16>* %5468, align 2, !tbaa !401
  %5469 = shufflevector <32 x i16> %5464, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5470 = getelementptr inbounds i16, i16* %5467, i64 16
  %5471 = bitcast i16* %5470 to <16 x i16>*
  store <16 x i16> %5469, <16 x i16>* %5471, align 2, !tbaa !401
  %5472 = add nuw nsw i32 %blur_y.s0.x.x.rebased232, 1
  %.not2862 = icmp eq i32 %5472, %t1727
  br i1 %.not2862, label %"end for blur_y.s0.x.x.rebased231", label %"for blur_y.s0.x.x.rebased230"

after_bb239:                                      ; preds = %"end for blur_y.s0.x.x.rebased231", %"produce blur_x242"
  br i1 %100, label %"for blur_y.s0.x.x.rebased244.preheader", label %"end for blur_y.s0.x.x.rebased245", !prof !386

"for blur_y.s0.x.x.rebased244.preheader":         ; preds = %after_bb239
  %5473 = sext i32 %t1744 to i64
  %5474 = zext i32 %.pre-phi3599 to i64
  %5475 = mul nsw i64 %5474, %116
  %5476 = sub nsw i64 %5475, %96
  %5477 = zext i32 %.pre-phi3595 to i64
  %5478 = mul nsw i64 %5477, %116
  %5479 = sub nsw i64 %5478, %96
  %5480 = zext i32 %.pre-phi3605 to i64
  %5481 = mul nsw i64 %5480, %116
  %5482 = sub nsw i64 %5481, %96
  %5483 = zext i32 %.pre-phi to i64
  %5484 = mul nsw i64 %5483, %116
  %5485 = sub nsw i64 %5484, %96
  %5486 = zext i32 %.pre-phi3579 to i64
  %5487 = mul nsw i64 %5486, %116
  %5488 = sub nsw i64 %5487, %96
  %5489 = zext i32 %.pre-phi3587 to i64
  %5490 = mul nsw i64 %5489, %116
  %5491 = sub nsw i64 %5490, %96
  %5492 = zext i32 %.pre-phi3583 to i64
  %5493 = mul nsw i64 %5492, %116
  %5494 = sub nsw i64 %5493, %96
  %5495 = sext i32 %a26 to i64
  %5496 = add nsw i64 %5495, 5
  %5497 = mul nsw i64 %5496, %117
  %5498 = add nsw i64 %5497, %120
  br label %"for blur_y.s0.x.x.rebased244"

"produce blur_x242":                              ; preds = %"end for blur_y.s0.x.x.rebased231"
  %5499 = getelementptr inbounds i16, i16* %read_input, i64 %129
  %5500 = getelementptr inbounds i16, i16* %5499, i64 -31
  %5501 = bitcast i16* %5500 to <16 x i16>*
  %5502 = load <16 x i16>, <16 x i16>* %5501, align 2, !tbaa !396
  %5503 = getelementptr inbounds i16, i16* %5499, i64 -15
  %5504 = bitcast i16* %5503 to <16 x i16>*
  %5505 = load <16 x i16>, <16 x i16>* %5504, align 2, !tbaa !396
  %5506 = getelementptr inbounds i16, i16* %5499, i64 -32
  %5507 = bitcast i16* %5506 to <16 x i16>*
  %5508 = load <16 x i16>, <16 x i16>* %5507, align 2, !tbaa !396
  %5509 = getelementptr inbounds i16, i16* %5499, i64 -16
  %5510 = bitcast i16* %5509 to <16 x i16>*
  %5511 = load <16 x i16>, <16 x i16>* %5510, align 2, !tbaa !396
  %5512 = getelementptr inbounds i16, i16* %5499, i64 -30
  %5513 = bitcast i16* %5512 to <16 x i16>*
  %5514 = load <16 x i16>, <16 x i16>* %5513, align 2, !tbaa !396
  %5515 = getelementptr inbounds i16, i16* %5499, i64 -14
  %5516 = bitcast i16* %5515 to <16 x i16>*
  %5517 = load <16 x i16>, <16 x i16>* %5516, align 2, !tbaa !396
  %5518 = getelementptr inbounds i16, i16* %5499, i64 -29
  %5519 = bitcast i16* %5518 to <16 x i16>*
  %5520 = load <16 x i16>, <16 x i16>* %5519, align 2, !tbaa !396
  %5521 = getelementptr inbounds i16, i16* %5499, i64 -13
  %5522 = bitcast i16* %5521 to <16 x i16>*
  %5523 = load <16 x i16>, <16 x i16>* %5522, align 2, !tbaa !396
  %5524 = getelementptr inbounds i16, i16* %5499, i64 -28
  %5525 = bitcast i16* %5524 to <16 x i16>*
  %5526 = load <16 x i16>, <16 x i16>* %5525, align 2, !tbaa !396
  %5527 = getelementptr inbounds i16, i16* %5499, i64 -12
  %5528 = bitcast i16* %5527 to <16 x i16>*
  %5529 = load <16 x i16>, <16 x i16>* %5528, align 2, !tbaa !396
  %5530 = getelementptr inbounds i16, i16* %5499, i64 -26
  %5531 = bitcast i16* %5530 to <16 x i16>*
  %5532 = load <16 x i16>, <16 x i16>* %5531, align 2, !tbaa !396
  %5533 = getelementptr inbounds i16, i16* %5499, i64 -10
  %5534 = bitcast i16* %5533 to <16 x i16>*
  %5535 = load <16 x i16>, <16 x i16>* %5534, align 2, !tbaa !396
  %5536 = getelementptr inbounds i16, i16* %5499, i64 -27
  %5537 = bitcast i16* %5536 to <16 x i16>*
  %5538 = load <16 x i16>, <16 x i16>* %5537, align 2, !tbaa !396
  %5539 = getelementptr inbounds i16, i16* %5499, i64 -11
  %5540 = bitcast i16* %5539 to <16 x i16>*
  %5541 = load <16 x i16>, <16 x i16>* %5540, align 2, !tbaa !396
  %5542 = add <16 x i16> %5508, %5502
  %5543 = add <16 x i16> %5542, %5514
  %5544 = add <16 x i16> %5543, %5520
  %5545 = add <16 x i16> %5544, %5526
  %5546 = add <16 x i16> %5545, %5532
  %5547 = add <16 x i16> %5546, %5538
  %5548 = add <16 x i16> %5511, %5505
  %5549 = add <16 x i16> %5548, %5517
  %5550 = add <16 x i16> %5549, %5523
  %5551 = add <16 x i16> %5550, %5529
  %5552 = add <16 x i16> %5551, %5535
  %5553 = add <16 x i16> %5552, %5541
  %5554 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5547, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5555 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5553, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5556 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5554, <16 x i16> %5547)
  %5557 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5555, <16 x i16> %5553)
  %5558 = shufflevector <16 x i16> %5556, <16 x i16> %5557, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5559 = lshr <32 x i16> %5558, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5560 = shufflevector <32 x i16> %5559, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5561 = zext i32 %.pre-phi3587 to i64
  %5562 = mul nsw i64 %97, %5561
  %5563 = add nsw i64 %99, %5562
  %5564 = getelementptr inbounds i16, i16* %blur_x, i64 %5563
  %5565 = getelementptr inbounds i16, i16* %5564, i64 -32
  %5566 = bitcast i16* %5565 to <16 x i16>*
  store <16 x i16> %5560, <16 x i16>* %5566, align 2, !tbaa !399
  %5567 = shufflevector <32 x i16> %5559, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5568 = getelementptr inbounds i16, i16* %5564, i64 -16
  %5569 = bitcast i16* %5568 to <16 x i16>*
  store <16 x i16> %5567, <16 x i16>* %5569, align 2, !tbaa !399
  %5570 = zext i32 %.pre-phi3599 to i64
  %5571 = mul nsw i64 %5570, %116
  %5572 = add nsw i64 %5571, %94
  %5573 = getelementptr inbounds i16, i16* %blur_x, i64 %5572
  %5574 = getelementptr inbounds i16, i16* %5573, i64 -32
  %5575 = bitcast i16* %5574 to <16 x i16>*
  %5576 = load <16 x i16>, <16 x i16>* %5575, align 2, !tbaa !399
  %5577 = getelementptr inbounds i16, i16* %5573, i64 -16
  %5578 = bitcast i16* %5577 to <16 x i16>*
  %5579 = load <16 x i16>, <16 x i16>* %5578, align 2, !tbaa !399
  %5580 = zext i32 %.pre-phi3595 to i64
  %5581 = mul nsw i64 %5580, %116
  %5582 = add nsw i64 %5581, %94
  %5583 = getelementptr inbounds i16, i16* %blur_x, i64 %5582
  %5584 = getelementptr inbounds i16, i16* %5583, i64 -32
  %5585 = bitcast i16* %5584 to <16 x i16>*
  %5586 = load <16 x i16>, <16 x i16>* %5585, align 2, !tbaa !399
  %5587 = getelementptr inbounds i16, i16* %5583, i64 -16
  %5588 = bitcast i16* %5587 to <16 x i16>*
  %5589 = load <16 x i16>, <16 x i16>* %5588, align 2, !tbaa !399
  %5590 = zext i32 %.pre-phi3605 to i64
  %5591 = mul nsw i64 %5590, %116
  %5592 = add nsw i64 %5591, %94
  %5593 = getelementptr inbounds i16, i16* %blur_x, i64 %5592
  %5594 = getelementptr inbounds i16, i16* %5593, i64 -32
  %5595 = bitcast i16* %5594 to <16 x i16>*
  %5596 = load <16 x i16>, <16 x i16>* %5595, align 2, !tbaa !399
  %5597 = getelementptr inbounds i16, i16* %5593, i64 -16
  %5598 = bitcast i16* %5597 to <16 x i16>*
  %5599 = load <16 x i16>, <16 x i16>* %5598, align 2, !tbaa !399
  %5600 = zext i32 %.pre-phi to i64
  %5601 = mul nsw i64 %5600, %116
  %5602 = add nsw i64 %5601, %94
  %5603 = getelementptr inbounds i16, i16* %blur_x, i64 %5602
  %5604 = getelementptr inbounds i16, i16* %5603, i64 -32
  %5605 = bitcast i16* %5604 to <16 x i16>*
  %5606 = load <16 x i16>, <16 x i16>* %5605, align 2, !tbaa !399
  %5607 = getelementptr inbounds i16, i16* %5603, i64 -16
  %5608 = bitcast i16* %5607 to <16 x i16>*
  %5609 = load <16 x i16>, <16 x i16>* %5608, align 2, !tbaa !399
  %5610 = zext i32 %.pre-phi3579 to i64
  %5611 = mul nsw i64 %5610, %116
  %5612 = add nsw i64 %5611, %94
  %5613 = getelementptr inbounds i16, i16* %blur_x, i64 %5612
  %5614 = getelementptr inbounds i16, i16* %5613, i64 -32
  %5615 = bitcast i16* %5614 to <16 x i16>*
  %5616 = load <16 x i16>, <16 x i16>* %5615, align 2, !tbaa !399
  %5617 = getelementptr inbounds i16, i16* %5613, i64 -16
  %5618 = bitcast i16* %5617 to <16 x i16>*
  %5619 = load <16 x i16>, <16 x i16>* %5618, align 2, !tbaa !399
  %5620 = mul nsw i64 %5561, %116
  %5621 = add nsw i64 %5620, %94
  %5622 = getelementptr inbounds i16, i16* %blur_x, i64 %5621
  %5623 = getelementptr inbounds i16, i16* %5622, i64 -32
  %5624 = bitcast i16* %5623 to <16 x i16>*
  %5625 = load <16 x i16>, <16 x i16>* %5624, align 2, !tbaa !399
  %5626 = getelementptr inbounds i16, i16* %5622, i64 -16
  %5627 = bitcast i16* %5626 to <16 x i16>*
  %5628 = load <16 x i16>, <16 x i16>* %5627, align 2, !tbaa !399
  %5629 = zext i32 %.pre-phi3583 to i64
  %5630 = mul nsw i64 %5629, %116
  %5631 = add nsw i64 %5630, %94
  %5632 = getelementptr inbounds i16, i16* %blur_x, i64 %5631
  %5633 = getelementptr inbounds i16, i16* %5632, i64 -32
  %5634 = bitcast i16* %5633 to <16 x i16>*
  %5635 = load <16 x i16>, <16 x i16>* %5634, align 2, !tbaa !399
  %5636 = getelementptr inbounds i16, i16* %5632, i64 -16
  %5637 = bitcast i16* %5636 to <16 x i16>*
  %5638 = load <16 x i16>, <16 x i16>* %5637, align 2, !tbaa !399
  %5639 = add <16 x i16> %5586, %5576
  %5640 = add <16 x i16> %5639, %5596
  %5641 = add <16 x i16> %5640, %5606
  %5642 = add <16 x i16> %5641, %5616
  %5643 = add <16 x i16> %5642, %5625
  %5644 = add <16 x i16> %5643, %5635
  %5645 = add <16 x i16> %5589, %5579
  %5646 = add <16 x i16> %5645, %5599
  %5647 = add <16 x i16> %5646, %5609
  %5648 = add <16 x i16> %5647, %5619
  %5649 = add <16 x i16> %5648, %5628
  %5650 = add <16 x i16> %5649, %5638
  %5651 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5644, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5652 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5650, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5653 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5651, <16 x i16> %5644)
  %5654 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5652, <16 x i16> %5650)
  %5655 = shufflevector <16 x i16> %5653, <16 x i16> %5654, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5656 = lshr <32 x i16> %5655, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5657 = shufflevector <32 x i16> %5656, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5658 = sext i32 %a26 to i64
  %5659 = add nsw i64 %5658, 5
  %5660 = mul nsw i64 %5659, %117
  %5661 = add nsw i64 %119, %5660
  %5662 = getelementptr inbounds i16, i16* %66, i64 %5661
  %5663 = getelementptr inbounds i16, i16* %5662, i64 -32
  %5664 = bitcast i16* %5663 to <16 x i16>*
  store <16 x i16> %5657, <16 x i16>* %5664, align 2, !tbaa !401
  %5665 = shufflevector <32 x i16> %5656, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5666 = getelementptr inbounds i16, i16* %5662, i64 -16
  %5667 = bitcast i16* %5666 to <16 x i16>*
  store <16 x i16> %5665, <16 x i16>* %5667, align 2, !tbaa !401
  br label %after_bb239

"for blur_y.s0.x.x.rebased244":                   ; preds = %"for blur_y.s0.x.x.rebased244.preheader", %"consume blur_x251"
  %indvars.iv3404 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased244.preheader" ], [ %indvars.iv.next3405, %"consume blur_x251" ]
  %5668 = add nsw i64 %indvars.iv3404, %101
  %5669 = icmp slt i64 %5668, 1
  %5670 = trunc i64 %5668 to i32
  %5671 = shl nsw i32 %5670, 5
  %5672 = icmp sgt i32 %4, %5671
  %5673 = or i1 %5669, %5672
  br i1 %5673, label %"produce blur_x250", label %"for blur_y.s0.x.x.rebased244.consume blur_x251_crit_edge"

"for blur_y.s0.x.x.rebased244.consume blur_x251_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased244"
  %.pre3614 = shl nsw i64 %5668, 5
  br label %"consume blur_x251"

"end for blur_y.s0.x.x.rebased245":               ; preds = %"consume blur_x251", %after_bb239
  br i1 %102, label %"for blur_y.s0.x.x.rebased252.preheader", label %"end for blur_y.s0.x.x.rebased253", !prof !386

"for blur_y.s0.x.x.rebased252.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased245"
  %5674 = sext i32 %t1744 to i64
  %5675 = zext i32 %.pre-phi3599 to i64
  %5676 = mul nsw i64 %5675, %116
  %5677 = sub nsw i64 %5676, %96
  %5678 = zext i32 %.pre-phi3595 to i64
  %5679 = mul nsw i64 %5678, %116
  %5680 = sub nsw i64 %5679, %96
  %5681 = zext i32 %.pre-phi3605 to i64
  %5682 = mul nsw i64 %5681, %116
  %5683 = sub nsw i64 %5682, %96
  %5684 = zext i32 %.pre-phi to i64
  %5685 = mul nsw i64 %5684, %116
  %5686 = sub nsw i64 %5685, %96
  %5687 = zext i32 %.pre-phi3579 to i64
  %5688 = mul nsw i64 %5687, %116
  %5689 = sub nsw i64 %5688, %96
  %5690 = zext i32 %.pre-phi3587 to i64
  %5691 = mul nsw i64 %5690, %116
  %5692 = sub nsw i64 %5691, %96
  %5693 = zext i32 %.pre-phi3583 to i64
  %5694 = mul nsw i64 %5693, %116
  %5695 = sub nsw i64 %5694, %96
  %5696 = sext i32 %a26 to i64
  %5697 = add nsw i64 %5696, 5
  %5698 = mul nsw i64 %5697, %117
  %5699 = add nsw i64 %5698, %120
  br label %"for blur_y.s0.x.x.rebased252"

"produce blur_x250":                              ; preds = %"for blur_y.s0.x.x.rebased244"
  %t832 = add nsw i32 %5671, %t1841
  %5700 = sext i32 %t832 to i64
  %5701 = getelementptr inbounds i16, i16* %read_input, i64 %5700
  %5702 = getelementptr inbounds i16, i16* %5701, i64 1
  %5703 = bitcast i16* %5702 to <16 x i16>*
  %5704 = load <16 x i16>, <16 x i16>* %5703, align 2, !tbaa !396
  %5705 = getelementptr inbounds i16, i16* %5701, i64 17
  %5706 = bitcast i16* %5705 to <16 x i16>*
  %5707 = load <16 x i16>, <16 x i16>* %5706, align 2, !tbaa !396
  %5708 = bitcast i16* %5701 to <16 x i16>*
  %5709 = load <16 x i16>, <16 x i16>* %5708, align 2, !tbaa !396
  %5710 = getelementptr inbounds i16, i16* %5701, i64 16
  %5711 = bitcast i16* %5710 to <16 x i16>*
  %5712 = load <16 x i16>, <16 x i16>* %5711, align 2, !tbaa !396
  %5713 = getelementptr inbounds i16, i16* %5701, i64 2
  %5714 = bitcast i16* %5713 to <16 x i16>*
  %5715 = load <16 x i16>, <16 x i16>* %5714, align 2, !tbaa !396
  %5716 = getelementptr inbounds i16, i16* %5701, i64 18
  %5717 = bitcast i16* %5716 to <16 x i16>*
  %5718 = load <16 x i16>, <16 x i16>* %5717, align 2, !tbaa !396
  %5719 = getelementptr inbounds i16, i16* %5701, i64 3
  %5720 = bitcast i16* %5719 to <16 x i16>*
  %5721 = load <16 x i16>, <16 x i16>* %5720, align 2, !tbaa !396
  %5722 = getelementptr inbounds i16, i16* %5701, i64 19
  %5723 = bitcast i16* %5722 to <16 x i16>*
  %5724 = load <16 x i16>, <16 x i16>* %5723, align 2, !tbaa !396
  %5725 = getelementptr inbounds i16, i16* %5701, i64 4
  %5726 = bitcast i16* %5725 to <16 x i16>*
  %5727 = load <16 x i16>, <16 x i16>* %5726, align 2, !tbaa !396
  %5728 = getelementptr inbounds i16, i16* %5701, i64 20
  %5729 = bitcast i16* %5728 to <16 x i16>*
  %5730 = load <16 x i16>, <16 x i16>* %5729, align 2, !tbaa !396
  %5731 = getelementptr inbounds i16, i16* %5701, i64 6
  %5732 = bitcast i16* %5731 to <16 x i16>*
  %5733 = load <16 x i16>, <16 x i16>* %5732, align 2, !tbaa !396
  %5734 = getelementptr inbounds i16, i16* %5701, i64 22
  %5735 = bitcast i16* %5734 to <16 x i16>*
  %5736 = load <16 x i16>, <16 x i16>* %5735, align 2, !tbaa !396
  %5737 = getelementptr inbounds i16, i16* %5701, i64 5
  %5738 = bitcast i16* %5737 to <16 x i16>*
  %5739 = load <16 x i16>, <16 x i16>* %5738, align 2, !tbaa !396
  %5740 = getelementptr inbounds i16, i16* %5701, i64 21
  %5741 = bitcast i16* %5740 to <16 x i16>*
  %5742 = load <16 x i16>, <16 x i16>* %5741, align 2, !tbaa !396
  %5743 = add <16 x i16> %5709, %5704
  %5744 = add <16 x i16> %5743, %5715
  %5745 = add <16 x i16> %5744, %5721
  %5746 = add <16 x i16> %5745, %5727
  %5747 = add <16 x i16> %5746, %5733
  %5748 = add <16 x i16> %5747, %5739
  %5749 = add <16 x i16> %5712, %5707
  %5750 = add <16 x i16> %5749, %5718
  %5751 = add <16 x i16> %5750, %5724
  %5752 = add <16 x i16> %5751, %5730
  %5753 = add <16 x i16> %5752, %5736
  %5754 = add <16 x i16> %5753, %5742
  %5755 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5748, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5756 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5754, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5757 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5755, <16 x i16> %5748)
  %5758 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5756, <16 x i16> %5754)
  %5759 = shufflevector <16 x i16> %5757, <16 x i16> %5758, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5760 = lshr <32 x i16> %5759, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5761 = shufflevector <32 x i16> %5760, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5762 = shl nsw i64 %5668, 5
  %5763 = add nsw i64 %5762, %5473
  %5764 = getelementptr inbounds i16, i16* %blur_x, i64 %5763
  %5765 = bitcast i16* %5764 to <16 x i16>*
  store <16 x i16> %5761, <16 x i16>* %5765, align 2, !tbaa !399
  %5766 = shufflevector <32 x i16> %5760, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5767 = getelementptr inbounds i16, i16* %5764, i64 16
  %5768 = bitcast i16* %5767 to <16 x i16>*
  store <16 x i16> %5766, <16 x i16>* %5768, align 2, !tbaa !399
  br label %"consume blur_x251"

"consume blur_x251":                              ; preds = %"for blur_y.s0.x.x.rebased244.consume blur_x251_crit_edge", %"produce blur_x250"
  %.pre-phi3615 = phi i64 [ %.pre3614, %"for blur_y.s0.x.x.rebased244.consume blur_x251_crit_edge" ], [ %5762, %"produce blur_x250" ]
  %5769 = add nsw i64 %5476, %.pre-phi3615
  %5770 = getelementptr inbounds i16, i16* %blur_x, i64 %5769
  %5771 = bitcast i16* %5770 to <16 x i16>*
  %5772 = load <16 x i16>, <16 x i16>* %5771, align 2, !tbaa !399
  %5773 = getelementptr inbounds i16, i16* %5770, i64 16
  %5774 = bitcast i16* %5773 to <16 x i16>*
  %5775 = load <16 x i16>, <16 x i16>* %5774, align 2, !tbaa !399
  %5776 = add nsw i64 %5479, %.pre-phi3615
  %5777 = getelementptr inbounds i16, i16* %blur_x, i64 %5776
  %5778 = bitcast i16* %5777 to <16 x i16>*
  %5779 = load <16 x i16>, <16 x i16>* %5778, align 2, !tbaa !399
  %5780 = getelementptr inbounds i16, i16* %5777, i64 16
  %5781 = bitcast i16* %5780 to <16 x i16>*
  %5782 = load <16 x i16>, <16 x i16>* %5781, align 2, !tbaa !399
  %5783 = add nsw i64 %5482, %.pre-phi3615
  %5784 = getelementptr inbounds i16, i16* %blur_x, i64 %5783
  %5785 = bitcast i16* %5784 to <16 x i16>*
  %5786 = load <16 x i16>, <16 x i16>* %5785, align 2, !tbaa !399
  %5787 = getelementptr inbounds i16, i16* %5784, i64 16
  %5788 = bitcast i16* %5787 to <16 x i16>*
  %5789 = load <16 x i16>, <16 x i16>* %5788, align 2, !tbaa !399
  %5790 = add nsw i64 %5485, %.pre-phi3615
  %5791 = getelementptr inbounds i16, i16* %blur_x, i64 %5790
  %5792 = bitcast i16* %5791 to <16 x i16>*
  %5793 = load <16 x i16>, <16 x i16>* %5792, align 2, !tbaa !399
  %5794 = getelementptr inbounds i16, i16* %5791, i64 16
  %5795 = bitcast i16* %5794 to <16 x i16>*
  %5796 = load <16 x i16>, <16 x i16>* %5795, align 2, !tbaa !399
  %5797 = add nsw i64 %5488, %.pre-phi3615
  %5798 = getelementptr inbounds i16, i16* %blur_x, i64 %5797
  %5799 = bitcast i16* %5798 to <16 x i16>*
  %5800 = load <16 x i16>, <16 x i16>* %5799, align 2, !tbaa !399
  %5801 = getelementptr inbounds i16, i16* %5798, i64 16
  %5802 = bitcast i16* %5801 to <16 x i16>*
  %5803 = load <16 x i16>, <16 x i16>* %5802, align 2, !tbaa !399
  %5804 = add nsw i64 %5491, %.pre-phi3615
  %5805 = getelementptr inbounds i16, i16* %blur_x, i64 %5804
  %5806 = bitcast i16* %5805 to <16 x i16>*
  %5807 = load <16 x i16>, <16 x i16>* %5806, align 2, !tbaa !399
  %5808 = getelementptr inbounds i16, i16* %5805, i64 16
  %5809 = bitcast i16* %5808 to <16 x i16>*
  %5810 = load <16 x i16>, <16 x i16>* %5809, align 2, !tbaa !399
  %5811 = add nsw i64 %5494, %.pre-phi3615
  %5812 = getelementptr inbounds i16, i16* %blur_x, i64 %5811
  %5813 = bitcast i16* %5812 to <16 x i16>*
  %5814 = load <16 x i16>, <16 x i16>* %5813, align 2, !tbaa !399
  %5815 = getelementptr inbounds i16, i16* %5812, i64 16
  %5816 = bitcast i16* %5815 to <16 x i16>*
  %5817 = load <16 x i16>, <16 x i16>* %5816, align 2, !tbaa !399
  %5818 = add <16 x i16> %5779, %5772
  %5819 = add <16 x i16> %5818, %5786
  %5820 = add <16 x i16> %5819, %5793
  %5821 = add <16 x i16> %5820, %5800
  %5822 = add <16 x i16> %5821, %5807
  %5823 = add <16 x i16> %5822, %5814
  %5824 = add <16 x i16> %5782, %5775
  %5825 = add <16 x i16> %5824, %5789
  %5826 = add <16 x i16> %5825, %5796
  %5827 = add <16 x i16> %5826, %5803
  %5828 = add <16 x i16> %5827, %5810
  %5829 = add <16 x i16> %5828, %5817
  %5830 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5823, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5831 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5829, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5832 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5830, <16 x i16> %5823)
  %5833 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5831, <16 x i16> %5829)
  %5834 = shufflevector <16 x i16> %5832, <16 x i16> %5833, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5835 = lshr <32 x i16> %5834, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5836 = shufflevector <32 x i16> %5835, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5837 = add nsw i64 %5498, %.pre-phi3615
  %5838 = getelementptr inbounds i16, i16* %66, i64 %5837
  %5839 = bitcast i16* %5838 to <16 x i16>*
  store <16 x i16> %5836, <16 x i16>* %5839, align 2, !tbaa !401
  %5840 = shufflevector <32 x i16> %5835, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5841 = getelementptr inbounds i16, i16* %5838, i64 16
  %5842 = bitcast i16* %5841 to <16 x i16>*
  store <16 x i16> %5840, <16 x i16>* %5842, align 2, !tbaa !401
  %indvars.iv.next3405 = add nuw nsw i64 %indvars.iv3404, 1
  %.not2861 = icmp eq i64 %indvars.iv.next3405, %188
  br i1 %.not2861, label %"end for blur_y.s0.x.x.rebased245", label %"for blur_y.s0.x.x.rebased244"

"for blur_y.s0.x.x.rebased252":                   ; preds = %"for blur_y.s0.x.x.rebased252.preheader", %"consume blur_x260"
  %blur_y.s0.x.x.rebased254 = phi i32 [ %5993, %"consume blur_x260" ], [ 0, %"for blur_y.s0.x.x.rebased252.preheader" ]
  %5843 = add nsw i32 %blur_y.s0.x.x.rebased254, %t1670
  %a154 = shl nsw i32 %5843, 5
  %5844 = icmp sgt i32 %a14, %a154
  %b160 = select i1 %5844, i32 %a154, i32 %a14
  %5845 = icmp slt i32 %5843, 1
  %5846 = icmp sgt i32 %4, %a154
  %5847 = or i1 %5845, %5846
  br i1 %5847, label %"produce blur_x258", label %"consume blur_x260"

"end for blur_y.s0.x.x.rebased253":               ; preds = %"consume blur_x260", %"end for blur_y.s0.x.x.rebased245"
  br i1 %34, label %"produce blur_x264", label %after_bb261

"produce blur_x258":                              ; preds = %"for blur_y.s0.x.x.rebased252"
  %5848 = icmp slt i32 %b160, %4
  %blur_x.s0.x.v1.base.s259 = select i1 %5848, i32 %b160, i32 %4
  %t837 = add nsw i32 %blur_x.s0.x.v1.base.s259, %t1841
  %5849 = sext i32 %t837 to i64
  %5850 = getelementptr inbounds i16, i16* %read_input, i64 %5849
  %5851 = getelementptr inbounds i16, i16* %5850, i64 1
  %5852 = bitcast i16* %5851 to <16 x i16>*
  %5853 = load <16 x i16>, <16 x i16>* %5852, align 2, !tbaa !396
  %5854 = getelementptr inbounds i16, i16* %5850, i64 17
  %5855 = bitcast i16* %5854 to <16 x i16>*
  %5856 = load <16 x i16>, <16 x i16>* %5855, align 2, !tbaa !396
  %5857 = bitcast i16* %5850 to <16 x i16>*
  %5858 = load <16 x i16>, <16 x i16>* %5857, align 2, !tbaa !396
  %5859 = getelementptr inbounds i16, i16* %5850, i64 16
  %5860 = bitcast i16* %5859 to <16 x i16>*
  %5861 = load <16 x i16>, <16 x i16>* %5860, align 2, !tbaa !396
  %5862 = getelementptr inbounds i16, i16* %5850, i64 2
  %5863 = bitcast i16* %5862 to <16 x i16>*
  %5864 = load <16 x i16>, <16 x i16>* %5863, align 2, !tbaa !396
  %5865 = getelementptr inbounds i16, i16* %5850, i64 18
  %5866 = bitcast i16* %5865 to <16 x i16>*
  %5867 = load <16 x i16>, <16 x i16>* %5866, align 2, !tbaa !396
  %5868 = getelementptr inbounds i16, i16* %5850, i64 3
  %5869 = bitcast i16* %5868 to <16 x i16>*
  %5870 = load <16 x i16>, <16 x i16>* %5869, align 2, !tbaa !396
  %5871 = getelementptr inbounds i16, i16* %5850, i64 19
  %5872 = bitcast i16* %5871 to <16 x i16>*
  %5873 = load <16 x i16>, <16 x i16>* %5872, align 2, !tbaa !396
  %5874 = getelementptr inbounds i16, i16* %5850, i64 4
  %5875 = bitcast i16* %5874 to <16 x i16>*
  %5876 = load <16 x i16>, <16 x i16>* %5875, align 2, !tbaa !396
  %5877 = getelementptr inbounds i16, i16* %5850, i64 20
  %5878 = bitcast i16* %5877 to <16 x i16>*
  %5879 = load <16 x i16>, <16 x i16>* %5878, align 2, !tbaa !396
  %5880 = getelementptr inbounds i16, i16* %5850, i64 6
  %5881 = bitcast i16* %5880 to <16 x i16>*
  %5882 = load <16 x i16>, <16 x i16>* %5881, align 2, !tbaa !396
  %5883 = getelementptr inbounds i16, i16* %5850, i64 22
  %5884 = bitcast i16* %5883 to <16 x i16>*
  %5885 = load <16 x i16>, <16 x i16>* %5884, align 2, !tbaa !396
  %5886 = getelementptr inbounds i16, i16* %5850, i64 5
  %5887 = bitcast i16* %5886 to <16 x i16>*
  %5888 = load <16 x i16>, <16 x i16>* %5887, align 2, !tbaa !396
  %5889 = getelementptr inbounds i16, i16* %5850, i64 21
  %5890 = bitcast i16* %5889 to <16 x i16>*
  %5891 = load <16 x i16>, <16 x i16>* %5890, align 2, !tbaa !396
  %5892 = add <16 x i16> %5858, %5853
  %5893 = add <16 x i16> %5892, %5864
  %5894 = add <16 x i16> %5893, %5870
  %5895 = add <16 x i16> %5894, %5876
  %5896 = add <16 x i16> %5895, %5882
  %5897 = add <16 x i16> %5896, %5888
  %5898 = add <16 x i16> %5861, %5856
  %5899 = add <16 x i16> %5898, %5867
  %5900 = add <16 x i16> %5899, %5873
  %5901 = add <16 x i16> %5900, %5879
  %5902 = add <16 x i16> %5901, %5885
  %5903 = add <16 x i16> %5902, %5891
  %5904 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5897, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5905 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5903, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5906 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5904, <16 x i16> %5897)
  %5907 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5905, <16 x i16> %5903)
  %5908 = shufflevector <16 x i16> %5906, <16 x i16> %5907, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5909 = lshr <32 x i16> %5908, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5910 = shufflevector <32 x i16> %5909, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5911 = sext i32 %blur_x.s0.x.v1.base.s259 to i64
  %5912 = add nsw i64 %5911, %5674
  %5913 = getelementptr inbounds i16, i16* %blur_x, i64 %5912
  %5914 = bitcast i16* %5913 to <16 x i16>*
  store <16 x i16> %5910, <16 x i16>* %5914, align 2, !tbaa !399
  %5915 = shufflevector <32 x i16> %5909, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5916 = getelementptr inbounds i16, i16* %5913, i64 16
  %5917 = bitcast i16* %5916 to <16 x i16>*
  store <16 x i16> %5915, <16 x i16>* %5917, align 2, !tbaa !399
  br label %"consume blur_x260"

"consume blur_x260":                              ; preds = %"for blur_y.s0.x.x.rebased252", %"produce blur_x258"
  %5918 = sext i32 %b160 to i64
  %5919 = add nsw i64 %5677, %5918
  %5920 = getelementptr inbounds i16, i16* %blur_x, i64 %5919
  %5921 = bitcast i16* %5920 to <16 x i16>*
  %5922 = load <16 x i16>, <16 x i16>* %5921, align 2, !tbaa !399
  %5923 = getelementptr inbounds i16, i16* %5920, i64 16
  %5924 = bitcast i16* %5923 to <16 x i16>*
  %5925 = load <16 x i16>, <16 x i16>* %5924, align 2, !tbaa !399
  %5926 = add nsw i64 %5680, %5918
  %5927 = getelementptr inbounds i16, i16* %blur_x, i64 %5926
  %5928 = bitcast i16* %5927 to <16 x i16>*
  %5929 = load <16 x i16>, <16 x i16>* %5928, align 2, !tbaa !399
  %5930 = getelementptr inbounds i16, i16* %5927, i64 16
  %5931 = bitcast i16* %5930 to <16 x i16>*
  %5932 = load <16 x i16>, <16 x i16>* %5931, align 2, !tbaa !399
  %5933 = add nsw i64 %5683, %5918
  %5934 = getelementptr inbounds i16, i16* %blur_x, i64 %5933
  %5935 = bitcast i16* %5934 to <16 x i16>*
  %5936 = load <16 x i16>, <16 x i16>* %5935, align 2, !tbaa !399
  %5937 = getelementptr inbounds i16, i16* %5934, i64 16
  %5938 = bitcast i16* %5937 to <16 x i16>*
  %5939 = load <16 x i16>, <16 x i16>* %5938, align 2, !tbaa !399
  %5940 = add nsw i64 %5686, %5918
  %5941 = getelementptr inbounds i16, i16* %blur_x, i64 %5940
  %5942 = bitcast i16* %5941 to <16 x i16>*
  %5943 = load <16 x i16>, <16 x i16>* %5942, align 2, !tbaa !399
  %5944 = getelementptr inbounds i16, i16* %5941, i64 16
  %5945 = bitcast i16* %5944 to <16 x i16>*
  %5946 = load <16 x i16>, <16 x i16>* %5945, align 2, !tbaa !399
  %5947 = add nsw i64 %5689, %5918
  %5948 = getelementptr inbounds i16, i16* %blur_x, i64 %5947
  %5949 = bitcast i16* %5948 to <16 x i16>*
  %5950 = load <16 x i16>, <16 x i16>* %5949, align 2, !tbaa !399
  %5951 = getelementptr inbounds i16, i16* %5948, i64 16
  %5952 = bitcast i16* %5951 to <16 x i16>*
  %5953 = load <16 x i16>, <16 x i16>* %5952, align 2, !tbaa !399
  %5954 = add nsw i64 %5692, %5918
  %5955 = getelementptr inbounds i16, i16* %blur_x, i64 %5954
  %5956 = bitcast i16* %5955 to <16 x i16>*
  %5957 = load <16 x i16>, <16 x i16>* %5956, align 2, !tbaa !399
  %5958 = getelementptr inbounds i16, i16* %5955, i64 16
  %5959 = bitcast i16* %5958 to <16 x i16>*
  %5960 = load <16 x i16>, <16 x i16>* %5959, align 2, !tbaa !399
  %5961 = add nsw i64 %5695, %5918
  %5962 = getelementptr inbounds i16, i16* %blur_x, i64 %5961
  %5963 = bitcast i16* %5962 to <16 x i16>*
  %5964 = load <16 x i16>, <16 x i16>* %5963, align 2, !tbaa !399
  %5965 = getelementptr inbounds i16, i16* %5962, i64 16
  %5966 = bitcast i16* %5965 to <16 x i16>*
  %5967 = load <16 x i16>, <16 x i16>* %5966, align 2, !tbaa !399
  %5968 = add <16 x i16> %5929, %5922
  %5969 = add <16 x i16> %5968, %5936
  %5970 = add <16 x i16> %5969, %5943
  %5971 = add <16 x i16> %5970, %5950
  %5972 = add <16 x i16> %5971, %5957
  %5973 = add <16 x i16> %5972, %5964
  %5974 = add <16 x i16> %5932, %5925
  %5975 = add <16 x i16> %5974, %5939
  %5976 = add <16 x i16> %5975, %5946
  %5977 = add <16 x i16> %5976, %5953
  %5978 = add <16 x i16> %5977, %5960
  %5979 = add <16 x i16> %5978, %5967
  %5980 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5973, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5981 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5979, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5982 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5980, <16 x i16> %5973)
  %5983 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5981, <16 x i16> %5979)
  %5984 = shufflevector <16 x i16> %5982, <16 x i16> %5983, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5985 = lshr <32 x i16> %5984, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5986 = shufflevector <32 x i16> %5985, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5987 = add nsw i64 %5699, %5918
  %5988 = getelementptr inbounds i16, i16* %66, i64 %5987
  %5989 = bitcast i16* %5988 to <16 x i16>*
  store <16 x i16> %5986, <16 x i16>* %5989, align 2, !tbaa !401
  %5990 = shufflevector <32 x i16> %5985, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5991 = getelementptr inbounds i16, i16* %5988, i64 16
  %5992 = bitcast i16* %5991 to <16 x i16>*
  store <16 x i16> %5990, <16 x i16>* %5992, align 2, !tbaa !401
  %5993 = add nuw nsw i32 %blur_y.s0.x.x.rebased254, 1
  %.not2860 = icmp eq i32 %5993, %t1727
  br i1 %.not2860, label %"end for blur_y.s0.x.x.rebased253", label %"for blur_y.s0.x.x.rebased252"

after_bb261:                                      ; preds = %"end for blur_y.s0.x.x.rebased253", %"produce blur_x264"
  br i1 %100, label %"for blur_y.s0.x.x.rebased266.preheader", label %"end for blur_y.s0.x.x.rebased267", !prof !386

"for blur_y.s0.x.x.rebased266.preheader":         ; preds = %after_bb261
  %5994 = sext i32 %t1750 to i64
  %5995 = zext i32 %.pre-phi3605 to i64
  %5996 = mul nsw i64 %5995, %116
  %5997 = sub nsw i64 %5996, %96
  %5998 = zext i32 %.pre-phi3599 to i64
  %5999 = mul nsw i64 %5998, %116
  %6000 = sub nsw i64 %5999, %96
  %6001 = zext i32 %.pre-phi to i64
  %6002 = mul nsw i64 %6001, %116
  %6003 = sub nsw i64 %6002, %96
  %6004 = zext i32 %.pre-phi3579 to i64
  %6005 = mul nsw i64 %6004, %116
  %6006 = sub nsw i64 %6005, %96
  %6007 = zext i32 %.pre-phi3583 to i64
  %6008 = mul nsw i64 %6007, %116
  %6009 = sub nsw i64 %6008, %96
  %6010 = zext i32 %.pre-phi3591 to i64
  %6011 = mul nsw i64 %6010, %116
  %6012 = sub nsw i64 %6011, %96
  %6013 = zext i32 %.pre-phi3587 to i64
  %6014 = mul nsw i64 %6013, %116
  %6015 = sub nsw i64 %6014, %96
  %6016 = sext i32 %a26 to i64
  %6017 = add nsw i64 %6016, 6
  %6018 = mul nsw i64 %6017, %117
  %6019 = add nsw i64 %6018, %120
  br label %"for blur_y.s0.x.x.rebased266"

"produce blur_x264":                              ; preds = %"end for blur_y.s0.x.x.rebased253"
  %6020 = getelementptr inbounds i16, i16* %read_input, i64 %131
  %6021 = getelementptr inbounds i16, i16* %6020, i64 -31
  %6022 = bitcast i16* %6021 to <16 x i16>*
  %6023 = load <16 x i16>, <16 x i16>* %6022, align 2, !tbaa !396
  %6024 = getelementptr inbounds i16, i16* %6020, i64 -15
  %6025 = bitcast i16* %6024 to <16 x i16>*
  %6026 = load <16 x i16>, <16 x i16>* %6025, align 2, !tbaa !396
  %6027 = getelementptr inbounds i16, i16* %6020, i64 -32
  %6028 = bitcast i16* %6027 to <16 x i16>*
  %6029 = load <16 x i16>, <16 x i16>* %6028, align 2, !tbaa !396
  %6030 = getelementptr inbounds i16, i16* %6020, i64 -16
  %6031 = bitcast i16* %6030 to <16 x i16>*
  %6032 = load <16 x i16>, <16 x i16>* %6031, align 2, !tbaa !396
  %6033 = getelementptr inbounds i16, i16* %6020, i64 -30
  %6034 = bitcast i16* %6033 to <16 x i16>*
  %6035 = load <16 x i16>, <16 x i16>* %6034, align 2, !tbaa !396
  %6036 = getelementptr inbounds i16, i16* %6020, i64 -14
  %6037 = bitcast i16* %6036 to <16 x i16>*
  %6038 = load <16 x i16>, <16 x i16>* %6037, align 2, !tbaa !396
  %6039 = getelementptr inbounds i16, i16* %6020, i64 -29
  %6040 = bitcast i16* %6039 to <16 x i16>*
  %6041 = load <16 x i16>, <16 x i16>* %6040, align 2, !tbaa !396
  %6042 = getelementptr inbounds i16, i16* %6020, i64 -13
  %6043 = bitcast i16* %6042 to <16 x i16>*
  %6044 = load <16 x i16>, <16 x i16>* %6043, align 2, !tbaa !396
  %6045 = getelementptr inbounds i16, i16* %6020, i64 -28
  %6046 = bitcast i16* %6045 to <16 x i16>*
  %6047 = load <16 x i16>, <16 x i16>* %6046, align 2, !tbaa !396
  %6048 = getelementptr inbounds i16, i16* %6020, i64 -12
  %6049 = bitcast i16* %6048 to <16 x i16>*
  %6050 = load <16 x i16>, <16 x i16>* %6049, align 2, !tbaa !396
  %6051 = getelementptr inbounds i16, i16* %6020, i64 -26
  %6052 = bitcast i16* %6051 to <16 x i16>*
  %6053 = load <16 x i16>, <16 x i16>* %6052, align 2, !tbaa !396
  %6054 = getelementptr inbounds i16, i16* %6020, i64 -10
  %6055 = bitcast i16* %6054 to <16 x i16>*
  %6056 = load <16 x i16>, <16 x i16>* %6055, align 2, !tbaa !396
  %6057 = getelementptr inbounds i16, i16* %6020, i64 -27
  %6058 = bitcast i16* %6057 to <16 x i16>*
  %6059 = load <16 x i16>, <16 x i16>* %6058, align 2, !tbaa !396
  %6060 = getelementptr inbounds i16, i16* %6020, i64 -11
  %6061 = bitcast i16* %6060 to <16 x i16>*
  %6062 = load <16 x i16>, <16 x i16>* %6061, align 2, !tbaa !396
  %6063 = add <16 x i16> %6029, %6023
  %6064 = add <16 x i16> %6063, %6035
  %6065 = add <16 x i16> %6064, %6041
  %6066 = add <16 x i16> %6065, %6047
  %6067 = add <16 x i16> %6066, %6053
  %6068 = add <16 x i16> %6067, %6059
  %6069 = add <16 x i16> %6032, %6026
  %6070 = add <16 x i16> %6069, %6038
  %6071 = add <16 x i16> %6070, %6044
  %6072 = add <16 x i16> %6071, %6050
  %6073 = add <16 x i16> %6072, %6056
  %6074 = add <16 x i16> %6073, %6062
  %6075 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6068, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6076 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6074, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6077 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6075, <16 x i16> %6068)
  %6078 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6076, <16 x i16> %6074)
  %6079 = shufflevector <16 x i16> %6077, <16 x i16> %6078, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6080 = lshr <32 x i16> %6079, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6081 = shufflevector <32 x i16> %6080, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6082 = zext i32 %.pre-phi3591 to i64
  %6083 = mul nsw i64 %97, %6082
  %6084 = add nsw i64 %99, %6083
  %6085 = getelementptr inbounds i16, i16* %blur_x, i64 %6084
  %6086 = getelementptr inbounds i16, i16* %6085, i64 -32
  %6087 = bitcast i16* %6086 to <16 x i16>*
  store <16 x i16> %6081, <16 x i16>* %6087, align 2, !tbaa !399
  %6088 = shufflevector <32 x i16> %6080, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6089 = getelementptr inbounds i16, i16* %6085, i64 -16
  %6090 = bitcast i16* %6089 to <16 x i16>*
  store <16 x i16> %6088, <16 x i16>* %6090, align 2, !tbaa !399
  %6091 = zext i32 %.pre-phi3605 to i64
  %6092 = mul nsw i64 %6091, %116
  %6093 = add nsw i64 %6092, %94
  %6094 = getelementptr inbounds i16, i16* %blur_x, i64 %6093
  %6095 = getelementptr inbounds i16, i16* %6094, i64 -32
  %6096 = bitcast i16* %6095 to <16 x i16>*
  %6097 = load <16 x i16>, <16 x i16>* %6096, align 2, !tbaa !399
  %6098 = getelementptr inbounds i16, i16* %6094, i64 -16
  %6099 = bitcast i16* %6098 to <16 x i16>*
  %6100 = load <16 x i16>, <16 x i16>* %6099, align 2, !tbaa !399
  %6101 = zext i32 %.pre-phi3599 to i64
  %6102 = mul nsw i64 %6101, %116
  %6103 = add nsw i64 %6102, %94
  %6104 = getelementptr inbounds i16, i16* %blur_x, i64 %6103
  %6105 = getelementptr inbounds i16, i16* %6104, i64 -32
  %6106 = bitcast i16* %6105 to <16 x i16>*
  %6107 = load <16 x i16>, <16 x i16>* %6106, align 2, !tbaa !399
  %6108 = getelementptr inbounds i16, i16* %6104, i64 -16
  %6109 = bitcast i16* %6108 to <16 x i16>*
  %6110 = load <16 x i16>, <16 x i16>* %6109, align 2, !tbaa !399
  %6111 = zext i32 %.pre-phi to i64
  %6112 = mul nsw i64 %6111, %116
  %6113 = add nsw i64 %6112, %94
  %6114 = getelementptr inbounds i16, i16* %blur_x, i64 %6113
  %6115 = getelementptr inbounds i16, i16* %6114, i64 -32
  %6116 = bitcast i16* %6115 to <16 x i16>*
  %6117 = load <16 x i16>, <16 x i16>* %6116, align 2, !tbaa !399
  %6118 = getelementptr inbounds i16, i16* %6114, i64 -16
  %6119 = bitcast i16* %6118 to <16 x i16>*
  %6120 = load <16 x i16>, <16 x i16>* %6119, align 2, !tbaa !399
  %6121 = zext i32 %.pre-phi3579 to i64
  %6122 = mul nsw i64 %6121, %116
  %6123 = add nsw i64 %6122, %94
  %6124 = getelementptr inbounds i16, i16* %blur_x, i64 %6123
  %6125 = getelementptr inbounds i16, i16* %6124, i64 -32
  %6126 = bitcast i16* %6125 to <16 x i16>*
  %6127 = load <16 x i16>, <16 x i16>* %6126, align 2, !tbaa !399
  %6128 = getelementptr inbounds i16, i16* %6124, i64 -16
  %6129 = bitcast i16* %6128 to <16 x i16>*
  %6130 = load <16 x i16>, <16 x i16>* %6129, align 2, !tbaa !399
  %6131 = zext i32 %.pre-phi3583 to i64
  %6132 = mul nsw i64 %6131, %116
  %6133 = add nsw i64 %6132, %94
  %6134 = getelementptr inbounds i16, i16* %blur_x, i64 %6133
  %6135 = getelementptr inbounds i16, i16* %6134, i64 -32
  %6136 = bitcast i16* %6135 to <16 x i16>*
  %6137 = load <16 x i16>, <16 x i16>* %6136, align 2, !tbaa !399
  %6138 = getelementptr inbounds i16, i16* %6134, i64 -16
  %6139 = bitcast i16* %6138 to <16 x i16>*
  %6140 = load <16 x i16>, <16 x i16>* %6139, align 2, !tbaa !399
  %6141 = mul nsw i64 %6082, %116
  %6142 = add nsw i64 %6141, %94
  %6143 = getelementptr inbounds i16, i16* %blur_x, i64 %6142
  %6144 = getelementptr inbounds i16, i16* %6143, i64 -32
  %6145 = bitcast i16* %6144 to <16 x i16>*
  %6146 = load <16 x i16>, <16 x i16>* %6145, align 2, !tbaa !399
  %6147 = getelementptr inbounds i16, i16* %6143, i64 -16
  %6148 = bitcast i16* %6147 to <16 x i16>*
  %6149 = load <16 x i16>, <16 x i16>* %6148, align 2, !tbaa !399
  %6150 = zext i32 %.pre-phi3587 to i64
  %6151 = mul nsw i64 %6150, %116
  %6152 = add nsw i64 %6151, %94
  %6153 = getelementptr inbounds i16, i16* %blur_x, i64 %6152
  %6154 = getelementptr inbounds i16, i16* %6153, i64 -32
  %6155 = bitcast i16* %6154 to <16 x i16>*
  %6156 = load <16 x i16>, <16 x i16>* %6155, align 2, !tbaa !399
  %6157 = getelementptr inbounds i16, i16* %6153, i64 -16
  %6158 = bitcast i16* %6157 to <16 x i16>*
  %6159 = load <16 x i16>, <16 x i16>* %6158, align 2, !tbaa !399
  %6160 = add <16 x i16> %6107, %6097
  %6161 = add <16 x i16> %6160, %6117
  %6162 = add <16 x i16> %6161, %6127
  %6163 = add <16 x i16> %6162, %6137
  %6164 = add <16 x i16> %6163, %6146
  %6165 = add <16 x i16> %6164, %6156
  %6166 = add <16 x i16> %6110, %6100
  %6167 = add <16 x i16> %6166, %6120
  %6168 = add <16 x i16> %6167, %6130
  %6169 = add <16 x i16> %6168, %6140
  %6170 = add <16 x i16> %6169, %6149
  %6171 = add <16 x i16> %6170, %6159
  %6172 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6165, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6173 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6171, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6174 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6172, <16 x i16> %6165)
  %6175 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6173, <16 x i16> %6171)
  %6176 = shufflevector <16 x i16> %6174, <16 x i16> %6175, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6177 = lshr <32 x i16> %6176, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6178 = shufflevector <32 x i16> %6177, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6179 = sext i32 %a26 to i64
  %6180 = add nsw i64 %6179, 6
  %6181 = mul nsw i64 %6180, %117
  %6182 = add nsw i64 %119, %6181
  %6183 = getelementptr inbounds i16, i16* %66, i64 %6182
  %6184 = getelementptr inbounds i16, i16* %6183, i64 -32
  %6185 = bitcast i16* %6184 to <16 x i16>*
  store <16 x i16> %6178, <16 x i16>* %6185, align 2, !tbaa !401
  %6186 = shufflevector <32 x i16> %6177, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6187 = getelementptr inbounds i16, i16* %6183, i64 -16
  %6188 = bitcast i16* %6187 to <16 x i16>*
  store <16 x i16> %6186, <16 x i16>* %6188, align 2, !tbaa !401
  br label %after_bb261

"for blur_y.s0.x.x.rebased266":                   ; preds = %"for blur_y.s0.x.x.rebased266.preheader", %"consume blur_x273"
  %indvars.iv3407 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased266.preheader" ], [ %indvars.iv.next3408, %"consume blur_x273" ]
  %6189 = add nsw i64 %indvars.iv3407, %101
  %6190 = icmp slt i64 %6189, 1
  %6191 = trunc i64 %6189 to i32
  %6192 = shl nsw i32 %6191, 5
  %6193 = icmp sgt i32 %4, %6192
  %6194 = or i1 %6190, %6193
  br i1 %6194, label %"produce blur_x272", label %"for blur_y.s0.x.x.rebased266.consume blur_x273_crit_edge"

"for blur_y.s0.x.x.rebased266.consume blur_x273_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased266"
  %.pre3616 = shl nsw i64 %6189, 5
  br label %"consume blur_x273"

"end for blur_y.s0.x.x.rebased267":               ; preds = %"consume blur_x273", %after_bb261
  br i1 %102, label %"for blur_y.s0.x.x.rebased274.preheader", label %"end for blur_y.s0.x.x.rebased275", !prof !386

"for blur_y.s0.x.x.rebased274.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased267"
  %6195 = sext i32 %t1750 to i64
  %6196 = zext i32 %.pre-phi3605 to i64
  %6197 = mul nsw i64 %6196, %116
  %6198 = sub nsw i64 %6197, %96
  %6199 = zext i32 %.pre-phi3599 to i64
  %6200 = mul nsw i64 %6199, %116
  %6201 = sub nsw i64 %6200, %96
  %6202 = zext i32 %.pre-phi to i64
  %6203 = mul nsw i64 %6202, %116
  %6204 = sub nsw i64 %6203, %96
  %6205 = zext i32 %.pre-phi3579 to i64
  %6206 = mul nsw i64 %6205, %116
  %6207 = sub nsw i64 %6206, %96
  %6208 = zext i32 %.pre-phi3583 to i64
  %6209 = mul nsw i64 %6208, %116
  %6210 = sub nsw i64 %6209, %96
  %6211 = zext i32 %.pre-phi3591 to i64
  %6212 = mul nsw i64 %6211, %116
  %6213 = sub nsw i64 %6212, %96
  %6214 = zext i32 %.pre-phi3587 to i64
  %6215 = mul nsw i64 %6214, %116
  %6216 = sub nsw i64 %6215, %96
  %6217 = sext i32 %a26 to i64
  %6218 = add nsw i64 %6217, 6
  %6219 = mul nsw i64 %6218, %117
  %6220 = add nsw i64 %6219, %120
  br label %"for blur_y.s0.x.x.rebased274"

"produce blur_x272":                              ; preds = %"for blur_y.s0.x.x.rebased266"
  %t848 = add nsw i32 %6192, %t1857
  %6221 = sext i32 %t848 to i64
  %6222 = getelementptr inbounds i16, i16* %read_input, i64 %6221
  %6223 = getelementptr inbounds i16, i16* %6222, i64 1
  %6224 = bitcast i16* %6223 to <16 x i16>*
  %6225 = load <16 x i16>, <16 x i16>* %6224, align 2, !tbaa !396
  %6226 = getelementptr inbounds i16, i16* %6222, i64 17
  %6227 = bitcast i16* %6226 to <16 x i16>*
  %6228 = load <16 x i16>, <16 x i16>* %6227, align 2, !tbaa !396
  %6229 = bitcast i16* %6222 to <16 x i16>*
  %6230 = load <16 x i16>, <16 x i16>* %6229, align 2, !tbaa !396
  %6231 = getelementptr inbounds i16, i16* %6222, i64 16
  %6232 = bitcast i16* %6231 to <16 x i16>*
  %6233 = load <16 x i16>, <16 x i16>* %6232, align 2, !tbaa !396
  %6234 = getelementptr inbounds i16, i16* %6222, i64 2
  %6235 = bitcast i16* %6234 to <16 x i16>*
  %6236 = load <16 x i16>, <16 x i16>* %6235, align 2, !tbaa !396
  %6237 = getelementptr inbounds i16, i16* %6222, i64 18
  %6238 = bitcast i16* %6237 to <16 x i16>*
  %6239 = load <16 x i16>, <16 x i16>* %6238, align 2, !tbaa !396
  %6240 = getelementptr inbounds i16, i16* %6222, i64 3
  %6241 = bitcast i16* %6240 to <16 x i16>*
  %6242 = load <16 x i16>, <16 x i16>* %6241, align 2, !tbaa !396
  %6243 = getelementptr inbounds i16, i16* %6222, i64 19
  %6244 = bitcast i16* %6243 to <16 x i16>*
  %6245 = load <16 x i16>, <16 x i16>* %6244, align 2, !tbaa !396
  %6246 = getelementptr inbounds i16, i16* %6222, i64 4
  %6247 = bitcast i16* %6246 to <16 x i16>*
  %6248 = load <16 x i16>, <16 x i16>* %6247, align 2, !tbaa !396
  %6249 = getelementptr inbounds i16, i16* %6222, i64 20
  %6250 = bitcast i16* %6249 to <16 x i16>*
  %6251 = load <16 x i16>, <16 x i16>* %6250, align 2, !tbaa !396
  %6252 = getelementptr inbounds i16, i16* %6222, i64 6
  %6253 = bitcast i16* %6252 to <16 x i16>*
  %6254 = load <16 x i16>, <16 x i16>* %6253, align 2, !tbaa !396
  %6255 = getelementptr inbounds i16, i16* %6222, i64 22
  %6256 = bitcast i16* %6255 to <16 x i16>*
  %6257 = load <16 x i16>, <16 x i16>* %6256, align 2, !tbaa !396
  %6258 = getelementptr inbounds i16, i16* %6222, i64 5
  %6259 = bitcast i16* %6258 to <16 x i16>*
  %6260 = load <16 x i16>, <16 x i16>* %6259, align 2, !tbaa !396
  %6261 = getelementptr inbounds i16, i16* %6222, i64 21
  %6262 = bitcast i16* %6261 to <16 x i16>*
  %6263 = load <16 x i16>, <16 x i16>* %6262, align 2, !tbaa !396
  %6264 = add <16 x i16> %6230, %6225
  %6265 = add <16 x i16> %6264, %6236
  %6266 = add <16 x i16> %6265, %6242
  %6267 = add <16 x i16> %6266, %6248
  %6268 = add <16 x i16> %6267, %6254
  %6269 = add <16 x i16> %6268, %6260
  %6270 = add <16 x i16> %6233, %6228
  %6271 = add <16 x i16> %6270, %6239
  %6272 = add <16 x i16> %6271, %6245
  %6273 = add <16 x i16> %6272, %6251
  %6274 = add <16 x i16> %6273, %6257
  %6275 = add <16 x i16> %6274, %6263
  %6276 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6269, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6277 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6275, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6278 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6276, <16 x i16> %6269)
  %6279 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6277, <16 x i16> %6275)
  %6280 = shufflevector <16 x i16> %6278, <16 x i16> %6279, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6281 = lshr <32 x i16> %6280, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6282 = shufflevector <32 x i16> %6281, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6283 = shl nsw i64 %6189, 5
  %6284 = add nsw i64 %6283, %5994
  %6285 = getelementptr inbounds i16, i16* %blur_x, i64 %6284
  %6286 = bitcast i16* %6285 to <16 x i16>*
  store <16 x i16> %6282, <16 x i16>* %6286, align 2, !tbaa !399
  %6287 = shufflevector <32 x i16> %6281, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6288 = getelementptr inbounds i16, i16* %6285, i64 16
  %6289 = bitcast i16* %6288 to <16 x i16>*
  store <16 x i16> %6287, <16 x i16>* %6289, align 2, !tbaa !399
  br label %"consume blur_x273"

"consume blur_x273":                              ; preds = %"for blur_y.s0.x.x.rebased266.consume blur_x273_crit_edge", %"produce blur_x272"
  %.pre-phi3617 = phi i64 [ %.pre3616, %"for blur_y.s0.x.x.rebased266.consume blur_x273_crit_edge" ], [ %6283, %"produce blur_x272" ]
  %6290 = add nsw i64 %5997, %.pre-phi3617
  %6291 = getelementptr inbounds i16, i16* %blur_x, i64 %6290
  %6292 = bitcast i16* %6291 to <16 x i16>*
  %6293 = load <16 x i16>, <16 x i16>* %6292, align 2, !tbaa !399
  %6294 = getelementptr inbounds i16, i16* %6291, i64 16
  %6295 = bitcast i16* %6294 to <16 x i16>*
  %6296 = load <16 x i16>, <16 x i16>* %6295, align 2, !tbaa !399
  %6297 = add nsw i64 %6000, %.pre-phi3617
  %6298 = getelementptr inbounds i16, i16* %blur_x, i64 %6297
  %6299 = bitcast i16* %6298 to <16 x i16>*
  %6300 = load <16 x i16>, <16 x i16>* %6299, align 2, !tbaa !399
  %6301 = getelementptr inbounds i16, i16* %6298, i64 16
  %6302 = bitcast i16* %6301 to <16 x i16>*
  %6303 = load <16 x i16>, <16 x i16>* %6302, align 2, !tbaa !399
  %6304 = add nsw i64 %6003, %.pre-phi3617
  %6305 = getelementptr inbounds i16, i16* %blur_x, i64 %6304
  %6306 = bitcast i16* %6305 to <16 x i16>*
  %6307 = load <16 x i16>, <16 x i16>* %6306, align 2, !tbaa !399
  %6308 = getelementptr inbounds i16, i16* %6305, i64 16
  %6309 = bitcast i16* %6308 to <16 x i16>*
  %6310 = load <16 x i16>, <16 x i16>* %6309, align 2, !tbaa !399
  %6311 = add nsw i64 %6006, %.pre-phi3617
  %6312 = getelementptr inbounds i16, i16* %blur_x, i64 %6311
  %6313 = bitcast i16* %6312 to <16 x i16>*
  %6314 = load <16 x i16>, <16 x i16>* %6313, align 2, !tbaa !399
  %6315 = getelementptr inbounds i16, i16* %6312, i64 16
  %6316 = bitcast i16* %6315 to <16 x i16>*
  %6317 = load <16 x i16>, <16 x i16>* %6316, align 2, !tbaa !399
  %6318 = add nsw i64 %6009, %.pre-phi3617
  %6319 = getelementptr inbounds i16, i16* %blur_x, i64 %6318
  %6320 = bitcast i16* %6319 to <16 x i16>*
  %6321 = load <16 x i16>, <16 x i16>* %6320, align 2, !tbaa !399
  %6322 = getelementptr inbounds i16, i16* %6319, i64 16
  %6323 = bitcast i16* %6322 to <16 x i16>*
  %6324 = load <16 x i16>, <16 x i16>* %6323, align 2, !tbaa !399
  %6325 = add nsw i64 %6012, %.pre-phi3617
  %6326 = getelementptr inbounds i16, i16* %blur_x, i64 %6325
  %6327 = bitcast i16* %6326 to <16 x i16>*
  %6328 = load <16 x i16>, <16 x i16>* %6327, align 2, !tbaa !399
  %6329 = getelementptr inbounds i16, i16* %6326, i64 16
  %6330 = bitcast i16* %6329 to <16 x i16>*
  %6331 = load <16 x i16>, <16 x i16>* %6330, align 2, !tbaa !399
  %6332 = add nsw i64 %6015, %.pre-phi3617
  %6333 = getelementptr inbounds i16, i16* %blur_x, i64 %6332
  %6334 = bitcast i16* %6333 to <16 x i16>*
  %6335 = load <16 x i16>, <16 x i16>* %6334, align 2, !tbaa !399
  %6336 = getelementptr inbounds i16, i16* %6333, i64 16
  %6337 = bitcast i16* %6336 to <16 x i16>*
  %6338 = load <16 x i16>, <16 x i16>* %6337, align 2, !tbaa !399
  %6339 = add <16 x i16> %6300, %6293
  %6340 = add <16 x i16> %6339, %6307
  %6341 = add <16 x i16> %6340, %6314
  %6342 = add <16 x i16> %6341, %6321
  %6343 = add <16 x i16> %6342, %6328
  %6344 = add <16 x i16> %6343, %6335
  %6345 = add <16 x i16> %6303, %6296
  %6346 = add <16 x i16> %6345, %6310
  %6347 = add <16 x i16> %6346, %6317
  %6348 = add <16 x i16> %6347, %6324
  %6349 = add <16 x i16> %6348, %6331
  %6350 = add <16 x i16> %6349, %6338
  %6351 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6344, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6352 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6350, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6353 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6351, <16 x i16> %6344)
  %6354 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6352, <16 x i16> %6350)
  %6355 = shufflevector <16 x i16> %6353, <16 x i16> %6354, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6356 = lshr <32 x i16> %6355, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6357 = shufflevector <32 x i16> %6356, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6358 = add nsw i64 %6019, %.pre-phi3617
  %6359 = getelementptr inbounds i16, i16* %66, i64 %6358
  %6360 = bitcast i16* %6359 to <16 x i16>*
  store <16 x i16> %6357, <16 x i16>* %6360, align 2, !tbaa !401
  %6361 = shufflevector <32 x i16> %6356, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6362 = getelementptr inbounds i16, i16* %6359, i64 16
  %6363 = bitcast i16* %6362 to <16 x i16>*
  store <16 x i16> %6361, <16 x i16>* %6363, align 2, !tbaa !401
  %indvars.iv.next3408 = add nuw nsw i64 %indvars.iv3407, 1
  %.not2859 = icmp eq i64 %indvars.iv.next3408, %188
  br i1 %.not2859, label %"end for blur_y.s0.x.x.rebased267", label %"for blur_y.s0.x.x.rebased266"

"for blur_y.s0.x.x.rebased274":                   ; preds = %"for blur_y.s0.x.x.rebased274.preheader", %"consume blur_x282"
  %blur_y.s0.x.x.rebased276 = phi i32 [ %6514, %"consume blur_x282" ], [ 0, %"for blur_y.s0.x.x.rebased274.preheader" ]
  %6364 = add nsw i32 %blur_y.s0.x.x.rebased276, %t1670
  %a161 = shl nsw i32 %6364, 5
  %6365 = icmp sgt i32 %a14, %a161
  %b167 = select i1 %6365, i32 %a161, i32 %a14
  %6366 = icmp slt i32 %6364, 1
  %6367 = icmp sgt i32 %4, %a161
  %6368 = or i1 %6366, %6367
  br i1 %6368, label %"produce blur_x280", label %"consume blur_x282"

"end for blur_y.s0.x.x.rebased275":               ; preds = %"consume blur_x282", %"end for blur_y.s0.x.x.rebased267"
  br i1 %34, label %"produce blur_x286", label %after_bb283

"produce blur_x280":                              ; preds = %"for blur_y.s0.x.x.rebased274"
  %6369 = icmp slt i32 %b167, %4
  %blur_x.s0.x.v1.base.s281 = select i1 %6369, i32 %b167, i32 %4
  %t853 = add nsw i32 %blur_x.s0.x.v1.base.s281, %t1857
  %6370 = sext i32 %t853 to i64
  %6371 = getelementptr inbounds i16, i16* %read_input, i64 %6370
  %6372 = getelementptr inbounds i16, i16* %6371, i64 1
  %6373 = bitcast i16* %6372 to <16 x i16>*
  %6374 = load <16 x i16>, <16 x i16>* %6373, align 2, !tbaa !396
  %6375 = getelementptr inbounds i16, i16* %6371, i64 17
  %6376 = bitcast i16* %6375 to <16 x i16>*
  %6377 = load <16 x i16>, <16 x i16>* %6376, align 2, !tbaa !396
  %6378 = bitcast i16* %6371 to <16 x i16>*
  %6379 = load <16 x i16>, <16 x i16>* %6378, align 2, !tbaa !396
  %6380 = getelementptr inbounds i16, i16* %6371, i64 16
  %6381 = bitcast i16* %6380 to <16 x i16>*
  %6382 = load <16 x i16>, <16 x i16>* %6381, align 2, !tbaa !396
  %6383 = getelementptr inbounds i16, i16* %6371, i64 2
  %6384 = bitcast i16* %6383 to <16 x i16>*
  %6385 = load <16 x i16>, <16 x i16>* %6384, align 2, !tbaa !396
  %6386 = getelementptr inbounds i16, i16* %6371, i64 18
  %6387 = bitcast i16* %6386 to <16 x i16>*
  %6388 = load <16 x i16>, <16 x i16>* %6387, align 2, !tbaa !396
  %6389 = getelementptr inbounds i16, i16* %6371, i64 3
  %6390 = bitcast i16* %6389 to <16 x i16>*
  %6391 = load <16 x i16>, <16 x i16>* %6390, align 2, !tbaa !396
  %6392 = getelementptr inbounds i16, i16* %6371, i64 19
  %6393 = bitcast i16* %6392 to <16 x i16>*
  %6394 = load <16 x i16>, <16 x i16>* %6393, align 2, !tbaa !396
  %6395 = getelementptr inbounds i16, i16* %6371, i64 4
  %6396 = bitcast i16* %6395 to <16 x i16>*
  %6397 = load <16 x i16>, <16 x i16>* %6396, align 2, !tbaa !396
  %6398 = getelementptr inbounds i16, i16* %6371, i64 20
  %6399 = bitcast i16* %6398 to <16 x i16>*
  %6400 = load <16 x i16>, <16 x i16>* %6399, align 2, !tbaa !396
  %6401 = getelementptr inbounds i16, i16* %6371, i64 6
  %6402 = bitcast i16* %6401 to <16 x i16>*
  %6403 = load <16 x i16>, <16 x i16>* %6402, align 2, !tbaa !396
  %6404 = getelementptr inbounds i16, i16* %6371, i64 22
  %6405 = bitcast i16* %6404 to <16 x i16>*
  %6406 = load <16 x i16>, <16 x i16>* %6405, align 2, !tbaa !396
  %6407 = getelementptr inbounds i16, i16* %6371, i64 5
  %6408 = bitcast i16* %6407 to <16 x i16>*
  %6409 = load <16 x i16>, <16 x i16>* %6408, align 2, !tbaa !396
  %6410 = getelementptr inbounds i16, i16* %6371, i64 21
  %6411 = bitcast i16* %6410 to <16 x i16>*
  %6412 = load <16 x i16>, <16 x i16>* %6411, align 2, !tbaa !396
  %6413 = add <16 x i16> %6379, %6374
  %6414 = add <16 x i16> %6413, %6385
  %6415 = add <16 x i16> %6414, %6391
  %6416 = add <16 x i16> %6415, %6397
  %6417 = add <16 x i16> %6416, %6403
  %6418 = add <16 x i16> %6417, %6409
  %6419 = add <16 x i16> %6382, %6377
  %6420 = add <16 x i16> %6419, %6388
  %6421 = add <16 x i16> %6420, %6394
  %6422 = add <16 x i16> %6421, %6400
  %6423 = add <16 x i16> %6422, %6406
  %6424 = add <16 x i16> %6423, %6412
  %6425 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6418, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6426 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6424, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6427 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6425, <16 x i16> %6418)
  %6428 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6426, <16 x i16> %6424)
  %6429 = shufflevector <16 x i16> %6427, <16 x i16> %6428, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6430 = lshr <32 x i16> %6429, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6431 = shufflevector <32 x i16> %6430, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6432 = sext i32 %blur_x.s0.x.v1.base.s281 to i64
  %6433 = add nsw i64 %6432, %6195
  %6434 = getelementptr inbounds i16, i16* %blur_x, i64 %6433
  %6435 = bitcast i16* %6434 to <16 x i16>*
  store <16 x i16> %6431, <16 x i16>* %6435, align 2, !tbaa !399
  %6436 = shufflevector <32 x i16> %6430, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6437 = getelementptr inbounds i16, i16* %6434, i64 16
  %6438 = bitcast i16* %6437 to <16 x i16>*
  store <16 x i16> %6436, <16 x i16>* %6438, align 2, !tbaa !399
  br label %"consume blur_x282"

"consume blur_x282":                              ; preds = %"for blur_y.s0.x.x.rebased274", %"produce blur_x280"
  %6439 = sext i32 %b167 to i64
  %6440 = add nsw i64 %6198, %6439
  %6441 = getelementptr inbounds i16, i16* %blur_x, i64 %6440
  %6442 = bitcast i16* %6441 to <16 x i16>*
  %6443 = load <16 x i16>, <16 x i16>* %6442, align 2, !tbaa !399
  %6444 = getelementptr inbounds i16, i16* %6441, i64 16
  %6445 = bitcast i16* %6444 to <16 x i16>*
  %6446 = load <16 x i16>, <16 x i16>* %6445, align 2, !tbaa !399
  %6447 = add nsw i64 %6201, %6439
  %6448 = getelementptr inbounds i16, i16* %blur_x, i64 %6447
  %6449 = bitcast i16* %6448 to <16 x i16>*
  %6450 = load <16 x i16>, <16 x i16>* %6449, align 2, !tbaa !399
  %6451 = getelementptr inbounds i16, i16* %6448, i64 16
  %6452 = bitcast i16* %6451 to <16 x i16>*
  %6453 = load <16 x i16>, <16 x i16>* %6452, align 2, !tbaa !399
  %6454 = add nsw i64 %6204, %6439
  %6455 = getelementptr inbounds i16, i16* %blur_x, i64 %6454
  %6456 = bitcast i16* %6455 to <16 x i16>*
  %6457 = load <16 x i16>, <16 x i16>* %6456, align 2, !tbaa !399
  %6458 = getelementptr inbounds i16, i16* %6455, i64 16
  %6459 = bitcast i16* %6458 to <16 x i16>*
  %6460 = load <16 x i16>, <16 x i16>* %6459, align 2, !tbaa !399
  %6461 = add nsw i64 %6207, %6439
  %6462 = getelementptr inbounds i16, i16* %blur_x, i64 %6461
  %6463 = bitcast i16* %6462 to <16 x i16>*
  %6464 = load <16 x i16>, <16 x i16>* %6463, align 2, !tbaa !399
  %6465 = getelementptr inbounds i16, i16* %6462, i64 16
  %6466 = bitcast i16* %6465 to <16 x i16>*
  %6467 = load <16 x i16>, <16 x i16>* %6466, align 2, !tbaa !399
  %6468 = add nsw i64 %6210, %6439
  %6469 = getelementptr inbounds i16, i16* %blur_x, i64 %6468
  %6470 = bitcast i16* %6469 to <16 x i16>*
  %6471 = load <16 x i16>, <16 x i16>* %6470, align 2, !tbaa !399
  %6472 = getelementptr inbounds i16, i16* %6469, i64 16
  %6473 = bitcast i16* %6472 to <16 x i16>*
  %6474 = load <16 x i16>, <16 x i16>* %6473, align 2, !tbaa !399
  %6475 = add nsw i64 %6213, %6439
  %6476 = getelementptr inbounds i16, i16* %blur_x, i64 %6475
  %6477 = bitcast i16* %6476 to <16 x i16>*
  %6478 = load <16 x i16>, <16 x i16>* %6477, align 2, !tbaa !399
  %6479 = getelementptr inbounds i16, i16* %6476, i64 16
  %6480 = bitcast i16* %6479 to <16 x i16>*
  %6481 = load <16 x i16>, <16 x i16>* %6480, align 2, !tbaa !399
  %6482 = add nsw i64 %6216, %6439
  %6483 = getelementptr inbounds i16, i16* %blur_x, i64 %6482
  %6484 = bitcast i16* %6483 to <16 x i16>*
  %6485 = load <16 x i16>, <16 x i16>* %6484, align 2, !tbaa !399
  %6486 = getelementptr inbounds i16, i16* %6483, i64 16
  %6487 = bitcast i16* %6486 to <16 x i16>*
  %6488 = load <16 x i16>, <16 x i16>* %6487, align 2, !tbaa !399
  %6489 = add <16 x i16> %6450, %6443
  %6490 = add <16 x i16> %6489, %6457
  %6491 = add <16 x i16> %6490, %6464
  %6492 = add <16 x i16> %6491, %6471
  %6493 = add <16 x i16> %6492, %6478
  %6494 = add <16 x i16> %6493, %6485
  %6495 = add <16 x i16> %6453, %6446
  %6496 = add <16 x i16> %6495, %6460
  %6497 = add <16 x i16> %6496, %6467
  %6498 = add <16 x i16> %6497, %6474
  %6499 = add <16 x i16> %6498, %6481
  %6500 = add <16 x i16> %6499, %6488
  %6501 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6494, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6502 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6500, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6503 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6501, <16 x i16> %6494)
  %6504 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6502, <16 x i16> %6500)
  %6505 = shufflevector <16 x i16> %6503, <16 x i16> %6504, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6506 = lshr <32 x i16> %6505, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6507 = shufflevector <32 x i16> %6506, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6508 = add nsw i64 %6220, %6439
  %6509 = getelementptr inbounds i16, i16* %66, i64 %6508
  %6510 = bitcast i16* %6509 to <16 x i16>*
  store <16 x i16> %6507, <16 x i16>* %6510, align 2, !tbaa !401
  %6511 = shufflevector <32 x i16> %6506, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6512 = getelementptr inbounds i16, i16* %6509, i64 16
  %6513 = bitcast i16* %6512 to <16 x i16>*
  store <16 x i16> %6511, <16 x i16>* %6513, align 2, !tbaa !401
  %6514 = add nuw nsw i32 %blur_y.s0.x.x.rebased276, 1
  %.not2858 = icmp eq i32 %6514, %t1727
  br i1 %.not2858, label %"end for blur_y.s0.x.x.rebased275", label %"for blur_y.s0.x.x.rebased274"

after_bb283:                                      ; preds = %"end for blur_y.s0.x.x.rebased275", %"produce blur_x286"
  br i1 %100, label %"for blur_y.s0.x.x.rebased288.preheader", label %"end for blur_y.s0.x.x.rebased289", !prof !386

"for blur_y.s0.x.x.rebased288.preheader":         ; preds = %after_bb283
  %6515 = sext i32 %t1756 to i64
  %6516 = zext i32 %.pre-phi to i64
  %6517 = mul nsw i64 %6516, %116
  %6518 = sub nsw i64 %6517, %96
  %6519 = zext i32 %.pre-phi3605 to i64
  %6520 = mul nsw i64 %6519, %116
  %6521 = sub nsw i64 %6520, %96
  %6522 = zext i32 %.pre-phi3579 to i64
  %6523 = mul nsw i64 %6522, %116
  %6524 = sub nsw i64 %6523, %96
  %6525 = zext i32 %.pre-phi3583 to i64
  %6526 = mul nsw i64 %6525, %116
  %6527 = sub nsw i64 %6526, %96
  %6528 = zext i32 %.pre-phi3587 to i64
  %6529 = mul nsw i64 %6528, %116
  %6530 = sub nsw i64 %6529, %96
  %6531 = zext i32 %.pre-phi3595 to i64
  %6532 = mul nsw i64 %6531, %116
  %6533 = sub nsw i64 %6532, %96
  %6534 = zext i32 %.pre-phi3591 to i64
  %6535 = mul nsw i64 %6534, %116
  %6536 = sub nsw i64 %6535, %96
  %6537 = sext i32 %a26 to i64
  %6538 = add nsw i64 %6537, 7
  %6539 = mul nsw i64 %6538, %117
  %6540 = add nsw i64 %6539, %120
  br label %"for blur_y.s0.x.x.rebased288"

"produce blur_x286":                              ; preds = %"end for blur_y.s0.x.x.rebased275"
  %6541 = getelementptr inbounds i16, i16* %read_input, i64 %133
  %6542 = getelementptr inbounds i16, i16* %6541, i64 -31
  %6543 = bitcast i16* %6542 to <16 x i16>*
  %6544 = load <16 x i16>, <16 x i16>* %6543, align 2, !tbaa !396
  %6545 = getelementptr inbounds i16, i16* %6541, i64 -15
  %6546 = bitcast i16* %6545 to <16 x i16>*
  %6547 = load <16 x i16>, <16 x i16>* %6546, align 2, !tbaa !396
  %6548 = getelementptr inbounds i16, i16* %6541, i64 -32
  %6549 = bitcast i16* %6548 to <16 x i16>*
  %6550 = load <16 x i16>, <16 x i16>* %6549, align 2, !tbaa !396
  %6551 = getelementptr inbounds i16, i16* %6541, i64 -16
  %6552 = bitcast i16* %6551 to <16 x i16>*
  %6553 = load <16 x i16>, <16 x i16>* %6552, align 2, !tbaa !396
  %6554 = getelementptr inbounds i16, i16* %6541, i64 -30
  %6555 = bitcast i16* %6554 to <16 x i16>*
  %6556 = load <16 x i16>, <16 x i16>* %6555, align 2, !tbaa !396
  %6557 = getelementptr inbounds i16, i16* %6541, i64 -14
  %6558 = bitcast i16* %6557 to <16 x i16>*
  %6559 = load <16 x i16>, <16 x i16>* %6558, align 2, !tbaa !396
  %6560 = getelementptr inbounds i16, i16* %6541, i64 -29
  %6561 = bitcast i16* %6560 to <16 x i16>*
  %6562 = load <16 x i16>, <16 x i16>* %6561, align 2, !tbaa !396
  %6563 = getelementptr inbounds i16, i16* %6541, i64 -13
  %6564 = bitcast i16* %6563 to <16 x i16>*
  %6565 = load <16 x i16>, <16 x i16>* %6564, align 2, !tbaa !396
  %6566 = getelementptr inbounds i16, i16* %6541, i64 -28
  %6567 = bitcast i16* %6566 to <16 x i16>*
  %6568 = load <16 x i16>, <16 x i16>* %6567, align 2, !tbaa !396
  %6569 = getelementptr inbounds i16, i16* %6541, i64 -12
  %6570 = bitcast i16* %6569 to <16 x i16>*
  %6571 = load <16 x i16>, <16 x i16>* %6570, align 2, !tbaa !396
  %6572 = getelementptr inbounds i16, i16* %6541, i64 -26
  %6573 = bitcast i16* %6572 to <16 x i16>*
  %6574 = load <16 x i16>, <16 x i16>* %6573, align 2, !tbaa !396
  %6575 = getelementptr inbounds i16, i16* %6541, i64 -10
  %6576 = bitcast i16* %6575 to <16 x i16>*
  %6577 = load <16 x i16>, <16 x i16>* %6576, align 2, !tbaa !396
  %6578 = getelementptr inbounds i16, i16* %6541, i64 -27
  %6579 = bitcast i16* %6578 to <16 x i16>*
  %6580 = load <16 x i16>, <16 x i16>* %6579, align 2, !tbaa !396
  %6581 = getelementptr inbounds i16, i16* %6541, i64 -11
  %6582 = bitcast i16* %6581 to <16 x i16>*
  %6583 = load <16 x i16>, <16 x i16>* %6582, align 2, !tbaa !396
  %6584 = add <16 x i16> %6550, %6544
  %6585 = add <16 x i16> %6584, %6556
  %6586 = add <16 x i16> %6585, %6562
  %6587 = add <16 x i16> %6586, %6568
  %6588 = add <16 x i16> %6587, %6574
  %6589 = add <16 x i16> %6588, %6580
  %6590 = add <16 x i16> %6553, %6547
  %6591 = add <16 x i16> %6590, %6559
  %6592 = add <16 x i16> %6591, %6565
  %6593 = add <16 x i16> %6592, %6571
  %6594 = add <16 x i16> %6593, %6577
  %6595 = add <16 x i16> %6594, %6583
  %6596 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6589, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6597 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6595, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6598 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6596, <16 x i16> %6589)
  %6599 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6597, <16 x i16> %6595)
  %6600 = shufflevector <16 x i16> %6598, <16 x i16> %6599, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6601 = lshr <32 x i16> %6600, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6602 = shufflevector <32 x i16> %6601, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6603 = zext i32 %.pre-phi3595 to i64
  %6604 = mul nsw i64 %97, %6603
  %6605 = add nsw i64 %99, %6604
  %6606 = getelementptr inbounds i16, i16* %blur_x, i64 %6605
  %6607 = getelementptr inbounds i16, i16* %6606, i64 -32
  %6608 = bitcast i16* %6607 to <16 x i16>*
  store <16 x i16> %6602, <16 x i16>* %6608, align 2, !tbaa !399
  %6609 = shufflevector <32 x i16> %6601, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6610 = getelementptr inbounds i16, i16* %6606, i64 -16
  %6611 = bitcast i16* %6610 to <16 x i16>*
  store <16 x i16> %6609, <16 x i16>* %6611, align 2, !tbaa !399
  %6612 = zext i32 %.pre-phi to i64
  %6613 = mul nsw i64 %6612, %116
  %6614 = add nsw i64 %6613, %94
  %6615 = getelementptr inbounds i16, i16* %blur_x, i64 %6614
  %6616 = getelementptr inbounds i16, i16* %6615, i64 -32
  %6617 = bitcast i16* %6616 to <16 x i16>*
  %6618 = load <16 x i16>, <16 x i16>* %6617, align 2, !tbaa !399
  %6619 = getelementptr inbounds i16, i16* %6615, i64 -16
  %6620 = bitcast i16* %6619 to <16 x i16>*
  %6621 = load <16 x i16>, <16 x i16>* %6620, align 2, !tbaa !399
  %6622 = zext i32 %.pre-phi3605 to i64
  %6623 = mul nsw i64 %6622, %116
  %6624 = add nsw i64 %6623, %94
  %6625 = getelementptr inbounds i16, i16* %blur_x, i64 %6624
  %6626 = getelementptr inbounds i16, i16* %6625, i64 -32
  %6627 = bitcast i16* %6626 to <16 x i16>*
  %6628 = load <16 x i16>, <16 x i16>* %6627, align 2, !tbaa !399
  %6629 = getelementptr inbounds i16, i16* %6625, i64 -16
  %6630 = bitcast i16* %6629 to <16 x i16>*
  %6631 = load <16 x i16>, <16 x i16>* %6630, align 2, !tbaa !399
  %6632 = zext i32 %.pre-phi3579 to i64
  %6633 = mul nsw i64 %6632, %116
  %6634 = add nsw i64 %6633, %94
  %6635 = getelementptr inbounds i16, i16* %blur_x, i64 %6634
  %6636 = getelementptr inbounds i16, i16* %6635, i64 -32
  %6637 = bitcast i16* %6636 to <16 x i16>*
  %6638 = load <16 x i16>, <16 x i16>* %6637, align 2, !tbaa !399
  %6639 = getelementptr inbounds i16, i16* %6635, i64 -16
  %6640 = bitcast i16* %6639 to <16 x i16>*
  %6641 = load <16 x i16>, <16 x i16>* %6640, align 2, !tbaa !399
  %6642 = zext i32 %.pre-phi3583 to i64
  %6643 = mul nsw i64 %6642, %116
  %6644 = add nsw i64 %6643, %94
  %6645 = getelementptr inbounds i16, i16* %blur_x, i64 %6644
  %6646 = getelementptr inbounds i16, i16* %6645, i64 -32
  %6647 = bitcast i16* %6646 to <16 x i16>*
  %6648 = load <16 x i16>, <16 x i16>* %6647, align 2, !tbaa !399
  %6649 = getelementptr inbounds i16, i16* %6645, i64 -16
  %6650 = bitcast i16* %6649 to <16 x i16>*
  %6651 = load <16 x i16>, <16 x i16>* %6650, align 2, !tbaa !399
  %6652 = zext i32 %.pre-phi3587 to i64
  %6653 = mul nsw i64 %6652, %116
  %6654 = add nsw i64 %6653, %94
  %6655 = getelementptr inbounds i16, i16* %blur_x, i64 %6654
  %6656 = getelementptr inbounds i16, i16* %6655, i64 -32
  %6657 = bitcast i16* %6656 to <16 x i16>*
  %6658 = load <16 x i16>, <16 x i16>* %6657, align 2, !tbaa !399
  %6659 = getelementptr inbounds i16, i16* %6655, i64 -16
  %6660 = bitcast i16* %6659 to <16 x i16>*
  %6661 = load <16 x i16>, <16 x i16>* %6660, align 2, !tbaa !399
  %6662 = mul nsw i64 %6603, %116
  %6663 = add nsw i64 %6662, %94
  %6664 = getelementptr inbounds i16, i16* %blur_x, i64 %6663
  %6665 = getelementptr inbounds i16, i16* %6664, i64 -32
  %6666 = bitcast i16* %6665 to <16 x i16>*
  %6667 = load <16 x i16>, <16 x i16>* %6666, align 2, !tbaa !399
  %6668 = getelementptr inbounds i16, i16* %6664, i64 -16
  %6669 = bitcast i16* %6668 to <16 x i16>*
  %6670 = load <16 x i16>, <16 x i16>* %6669, align 2, !tbaa !399
  %6671 = zext i32 %.pre-phi3591 to i64
  %6672 = mul nsw i64 %6671, %116
  %6673 = add nsw i64 %6672, %94
  %6674 = getelementptr inbounds i16, i16* %blur_x, i64 %6673
  %6675 = getelementptr inbounds i16, i16* %6674, i64 -32
  %6676 = bitcast i16* %6675 to <16 x i16>*
  %6677 = load <16 x i16>, <16 x i16>* %6676, align 2, !tbaa !399
  %6678 = getelementptr inbounds i16, i16* %6674, i64 -16
  %6679 = bitcast i16* %6678 to <16 x i16>*
  %6680 = load <16 x i16>, <16 x i16>* %6679, align 2, !tbaa !399
  %6681 = add <16 x i16> %6628, %6618
  %6682 = add <16 x i16> %6681, %6638
  %6683 = add <16 x i16> %6682, %6648
  %6684 = add <16 x i16> %6683, %6658
  %6685 = add <16 x i16> %6684, %6667
  %6686 = add <16 x i16> %6685, %6677
  %6687 = add <16 x i16> %6631, %6621
  %6688 = add <16 x i16> %6687, %6641
  %6689 = add <16 x i16> %6688, %6651
  %6690 = add <16 x i16> %6689, %6661
  %6691 = add <16 x i16> %6690, %6670
  %6692 = add <16 x i16> %6691, %6680
  %6693 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6686, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6694 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6692, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6695 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6693, <16 x i16> %6686)
  %6696 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6694, <16 x i16> %6692)
  %6697 = shufflevector <16 x i16> %6695, <16 x i16> %6696, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6698 = lshr <32 x i16> %6697, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6699 = shufflevector <32 x i16> %6698, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6700 = sext i32 %a26 to i64
  %6701 = add nsw i64 %6700, 7
  %6702 = mul nsw i64 %6701, %117
  %6703 = add nsw i64 %119, %6702
  %6704 = getelementptr inbounds i16, i16* %66, i64 %6703
  %6705 = getelementptr inbounds i16, i16* %6704, i64 -32
  %6706 = bitcast i16* %6705 to <16 x i16>*
  store <16 x i16> %6699, <16 x i16>* %6706, align 2, !tbaa !401
  %6707 = shufflevector <32 x i16> %6698, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6708 = getelementptr inbounds i16, i16* %6704, i64 -16
  %6709 = bitcast i16* %6708 to <16 x i16>*
  store <16 x i16> %6707, <16 x i16>* %6709, align 2, !tbaa !401
  br label %after_bb283

"for blur_y.s0.x.x.rebased288":                   ; preds = %"for blur_y.s0.x.x.rebased288.preheader", %"consume blur_x295"
  %indvars.iv3410 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased288.preheader" ], [ %indvars.iv.next3411, %"consume blur_x295" ]
  %6710 = add nsw i64 %indvars.iv3410, %101
  %6711 = icmp slt i64 %6710, 1
  %6712 = trunc i64 %6710 to i32
  %6713 = shl nsw i32 %6712, 5
  %6714 = icmp sgt i32 %4, %6713
  %6715 = or i1 %6711, %6714
  br i1 %6715, label %"produce blur_x294", label %"for blur_y.s0.x.x.rebased288.consume blur_x295_crit_edge"

"for blur_y.s0.x.x.rebased288.consume blur_x295_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased288"
  %.pre3618 = shl nsw i64 %6710, 5
  br label %"consume blur_x295"

"end for blur_y.s0.x.x.rebased289":               ; preds = %"consume blur_x295", %after_bb283
  br i1 %102, label %"for blur_y.s0.x.x.rebased296.preheader", label %"end for blur_y.s0.x.x.rebased297", !prof !386

"for blur_y.s0.x.x.rebased296.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased289"
  %6716 = sext i32 %t1756 to i64
  %6717 = zext i32 %.pre-phi to i64
  %6718 = mul nsw i64 %6717, %116
  %6719 = sub nsw i64 %6718, %96
  %6720 = zext i32 %.pre-phi3605 to i64
  %6721 = mul nsw i64 %6720, %116
  %6722 = sub nsw i64 %6721, %96
  %6723 = zext i32 %.pre-phi3579 to i64
  %6724 = mul nsw i64 %6723, %116
  %6725 = sub nsw i64 %6724, %96
  %6726 = zext i32 %.pre-phi3583 to i64
  %6727 = mul nsw i64 %6726, %116
  %6728 = sub nsw i64 %6727, %96
  %6729 = zext i32 %.pre-phi3587 to i64
  %6730 = mul nsw i64 %6729, %116
  %6731 = sub nsw i64 %6730, %96
  %6732 = zext i32 %.pre-phi3595 to i64
  %6733 = mul nsw i64 %6732, %116
  %6734 = sub nsw i64 %6733, %96
  %6735 = zext i32 %.pre-phi3591 to i64
  %6736 = mul nsw i64 %6735, %116
  %6737 = sub nsw i64 %6736, %96
  %6738 = sext i32 %a26 to i64
  %6739 = add nsw i64 %6738, 7
  %6740 = mul nsw i64 %6739, %117
  %6741 = add nsw i64 %6740, %120
  br label %"for blur_y.s0.x.x.rebased296"

"produce blur_x294":                              ; preds = %"for blur_y.s0.x.x.rebased288"
  %t864 = add nsw i32 %6713, %t1873
  %6742 = sext i32 %t864 to i64
  %6743 = getelementptr inbounds i16, i16* %read_input, i64 %6742
  %6744 = getelementptr inbounds i16, i16* %6743, i64 1
  %6745 = bitcast i16* %6744 to <16 x i16>*
  %6746 = load <16 x i16>, <16 x i16>* %6745, align 2, !tbaa !396
  %6747 = getelementptr inbounds i16, i16* %6743, i64 17
  %6748 = bitcast i16* %6747 to <16 x i16>*
  %6749 = load <16 x i16>, <16 x i16>* %6748, align 2, !tbaa !396
  %6750 = bitcast i16* %6743 to <16 x i16>*
  %6751 = load <16 x i16>, <16 x i16>* %6750, align 2, !tbaa !396
  %6752 = getelementptr inbounds i16, i16* %6743, i64 16
  %6753 = bitcast i16* %6752 to <16 x i16>*
  %6754 = load <16 x i16>, <16 x i16>* %6753, align 2, !tbaa !396
  %6755 = getelementptr inbounds i16, i16* %6743, i64 2
  %6756 = bitcast i16* %6755 to <16 x i16>*
  %6757 = load <16 x i16>, <16 x i16>* %6756, align 2, !tbaa !396
  %6758 = getelementptr inbounds i16, i16* %6743, i64 18
  %6759 = bitcast i16* %6758 to <16 x i16>*
  %6760 = load <16 x i16>, <16 x i16>* %6759, align 2, !tbaa !396
  %6761 = getelementptr inbounds i16, i16* %6743, i64 3
  %6762 = bitcast i16* %6761 to <16 x i16>*
  %6763 = load <16 x i16>, <16 x i16>* %6762, align 2, !tbaa !396
  %6764 = getelementptr inbounds i16, i16* %6743, i64 19
  %6765 = bitcast i16* %6764 to <16 x i16>*
  %6766 = load <16 x i16>, <16 x i16>* %6765, align 2, !tbaa !396
  %6767 = getelementptr inbounds i16, i16* %6743, i64 4
  %6768 = bitcast i16* %6767 to <16 x i16>*
  %6769 = load <16 x i16>, <16 x i16>* %6768, align 2, !tbaa !396
  %6770 = getelementptr inbounds i16, i16* %6743, i64 20
  %6771 = bitcast i16* %6770 to <16 x i16>*
  %6772 = load <16 x i16>, <16 x i16>* %6771, align 2, !tbaa !396
  %6773 = getelementptr inbounds i16, i16* %6743, i64 6
  %6774 = bitcast i16* %6773 to <16 x i16>*
  %6775 = load <16 x i16>, <16 x i16>* %6774, align 2, !tbaa !396
  %6776 = getelementptr inbounds i16, i16* %6743, i64 22
  %6777 = bitcast i16* %6776 to <16 x i16>*
  %6778 = load <16 x i16>, <16 x i16>* %6777, align 2, !tbaa !396
  %6779 = getelementptr inbounds i16, i16* %6743, i64 5
  %6780 = bitcast i16* %6779 to <16 x i16>*
  %6781 = load <16 x i16>, <16 x i16>* %6780, align 2, !tbaa !396
  %6782 = getelementptr inbounds i16, i16* %6743, i64 21
  %6783 = bitcast i16* %6782 to <16 x i16>*
  %6784 = load <16 x i16>, <16 x i16>* %6783, align 2, !tbaa !396
  %6785 = add <16 x i16> %6751, %6746
  %6786 = add <16 x i16> %6785, %6757
  %6787 = add <16 x i16> %6786, %6763
  %6788 = add <16 x i16> %6787, %6769
  %6789 = add <16 x i16> %6788, %6775
  %6790 = add <16 x i16> %6789, %6781
  %6791 = add <16 x i16> %6754, %6749
  %6792 = add <16 x i16> %6791, %6760
  %6793 = add <16 x i16> %6792, %6766
  %6794 = add <16 x i16> %6793, %6772
  %6795 = add <16 x i16> %6794, %6778
  %6796 = add <16 x i16> %6795, %6784
  %6797 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6790, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6798 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6796, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6799 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6797, <16 x i16> %6790)
  %6800 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6798, <16 x i16> %6796)
  %6801 = shufflevector <16 x i16> %6799, <16 x i16> %6800, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6802 = lshr <32 x i16> %6801, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6803 = shufflevector <32 x i16> %6802, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6804 = shl nsw i64 %6710, 5
  %6805 = add nsw i64 %6804, %6515
  %6806 = getelementptr inbounds i16, i16* %blur_x, i64 %6805
  %6807 = bitcast i16* %6806 to <16 x i16>*
  store <16 x i16> %6803, <16 x i16>* %6807, align 2, !tbaa !399
  %6808 = shufflevector <32 x i16> %6802, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6809 = getelementptr inbounds i16, i16* %6806, i64 16
  %6810 = bitcast i16* %6809 to <16 x i16>*
  store <16 x i16> %6808, <16 x i16>* %6810, align 2, !tbaa !399
  br label %"consume blur_x295"

"consume blur_x295":                              ; preds = %"for blur_y.s0.x.x.rebased288.consume blur_x295_crit_edge", %"produce blur_x294"
  %.pre-phi3619 = phi i64 [ %.pre3618, %"for blur_y.s0.x.x.rebased288.consume blur_x295_crit_edge" ], [ %6804, %"produce blur_x294" ]
  %6811 = add nsw i64 %6518, %.pre-phi3619
  %6812 = getelementptr inbounds i16, i16* %blur_x, i64 %6811
  %6813 = bitcast i16* %6812 to <16 x i16>*
  %6814 = load <16 x i16>, <16 x i16>* %6813, align 2, !tbaa !399
  %6815 = getelementptr inbounds i16, i16* %6812, i64 16
  %6816 = bitcast i16* %6815 to <16 x i16>*
  %6817 = load <16 x i16>, <16 x i16>* %6816, align 2, !tbaa !399
  %6818 = add nsw i64 %6521, %.pre-phi3619
  %6819 = getelementptr inbounds i16, i16* %blur_x, i64 %6818
  %6820 = bitcast i16* %6819 to <16 x i16>*
  %6821 = load <16 x i16>, <16 x i16>* %6820, align 2, !tbaa !399
  %6822 = getelementptr inbounds i16, i16* %6819, i64 16
  %6823 = bitcast i16* %6822 to <16 x i16>*
  %6824 = load <16 x i16>, <16 x i16>* %6823, align 2, !tbaa !399
  %6825 = add nsw i64 %6524, %.pre-phi3619
  %6826 = getelementptr inbounds i16, i16* %blur_x, i64 %6825
  %6827 = bitcast i16* %6826 to <16 x i16>*
  %6828 = load <16 x i16>, <16 x i16>* %6827, align 2, !tbaa !399
  %6829 = getelementptr inbounds i16, i16* %6826, i64 16
  %6830 = bitcast i16* %6829 to <16 x i16>*
  %6831 = load <16 x i16>, <16 x i16>* %6830, align 2, !tbaa !399
  %6832 = add nsw i64 %6527, %.pre-phi3619
  %6833 = getelementptr inbounds i16, i16* %blur_x, i64 %6832
  %6834 = bitcast i16* %6833 to <16 x i16>*
  %6835 = load <16 x i16>, <16 x i16>* %6834, align 2, !tbaa !399
  %6836 = getelementptr inbounds i16, i16* %6833, i64 16
  %6837 = bitcast i16* %6836 to <16 x i16>*
  %6838 = load <16 x i16>, <16 x i16>* %6837, align 2, !tbaa !399
  %6839 = add nsw i64 %6530, %.pre-phi3619
  %6840 = getelementptr inbounds i16, i16* %blur_x, i64 %6839
  %6841 = bitcast i16* %6840 to <16 x i16>*
  %6842 = load <16 x i16>, <16 x i16>* %6841, align 2, !tbaa !399
  %6843 = getelementptr inbounds i16, i16* %6840, i64 16
  %6844 = bitcast i16* %6843 to <16 x i16>*
  %6845 = load <16 x i16>, <16 x i16>* %6844, align 2, !tbaa !399
  %6846 = add nsw i64 %6533, %.pre-phi3619
  %6847 = getelementptr inbounds i16, i16* %blur_x, i64 %6846
  %6848 = bitcast i16* %6847 to <16 x i16>*
  %6849 = load <16 x i16>, <16 x i16>* %6848, align 2, !tbaa !399
  %6850 = getelementptr inbounds i16, i16* %6847, i64 16
  %6851 = bitcast i16* %6850 to <16 x i16>*
  %6852 = load <16 x i16>, <16 x i16>* %6851, align 2, !tbaa !399
  %6853 = add nsw i64 %6536, %.pre-phi3619
  %6854 = getelementptr inbounds i16, i16* %blur_x, i64 %6853
  %6855 = bitcast i16* %6854 to <16 x i16>*
  %6856 = load <16 x i16>, <16 x i16>* %6855, align 2, !tbaa !399
  %6857 = getelementptr inbounds i16, i16* %6854, i64 16
  %6858 = bitcast i16* %6857 to <16 x i16>*
  %6859 = load <16 x i16>, <16 x i16>* %6858, align 2, !tbaa !399
  %6860 = add <16 x i16> %6821, %6814
  %6861 = add <16 x i16> %6860, %6828
  %6862 = add <16 x i16> %6861, %6835
  %6863 = add <16 x i16> %6862, %6842
  %6864 = add <16 x i16> %6863, %6849
  %6865 = add <16 x i16> %6864, %6856
  %6866 = add <16 x i16> %6824, %6817
  %6867 = add <16 x i16> %6866, %6831
  %6868 = add <16 x i16> %6867, %6838
  %6869 = add <16 x i16> %6868, %6845
  %6870 = add <16 x i16> %6869, %6852
  %6871 = add <16 x i16> %6870, %6859
  %6872 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6865, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6873 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6871, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6874 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6872, <16 x i16> %6865)
  %6875 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6873, <16 x i16> %6871)
  %6876 = shufflevector <16 x i16> %6874, <16 x i16> %6875, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6877 = lshr <32 x i16> %6876, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6878 = shufflevector <32 x i16> %6877, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6879 = add nsw i64 %6540, %.pre-phi3619
  %6880 = getelementptr inbounds i16, i16* %66, i64 %6879
  %6881 = bitcast i16* %6880 to <16 x i16>*
  store <16 x i16> %6878, <16 x i16>* %6881, align 2, !tbaa !401
  %6882 = shufflevector <32 x i16> %6877, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6883 = getelementptr inbounds i16, i16* %6880, i64 16
  %6884 = bitcast i16* %6883 to <16 x i16>*
  store <16 x i16> %6882, <16 x i16>* %6884, align 2, !tbaa !401
  %indvars.iv.next3411 = add nuw nsw i64 %indvars.iv3410, 1
  %.not2857 = icmp eq i64 %indvars.iv.next3411, %188
  br i1 %.not2857, label %"end for blur_y.s0.x.x.rebased289", label %"for blur_y.s0.x.x.rebased288"

"for blur_y.s0.x.x.rebased296":                   ; preds = %"for blur_y.s0.x.x.rebased296.preheader", %"consume blur_x304"
  %blur_y.s0.x.x.rebased298 = phi i32 [ %7035, %"consume blur_x304" ], [ 0, %"for blur_y.s0.x.x.rebased296.preheader" ]
  %6885 = add nsw i32 %blur_y.s0.x.x.rebased298, %t1670
  %a168 = shl nsw i32 %6885, 5
  %6886 = icmp sgt i32 %a14, %a168
  %b174 = select i1 %6886, i32 %a168, i32 %a14
  %6887 = icmp slt i32 %6885, 1
  %6888 = icmp sgt i32 %4, %a168
  %6889 = or i1 %6887, %6888
  br i1 %6889, label %"produce blur_x302", label %"consume blur_x304"

"end for blur_y.s0.x.x.rebased297":               ; preds = %"consume blur_x304", %"end for blur_y.s0.x.x.rebased289"
  br i1 %34, label %"produce blur_x308", label %after_bb305

"produce blur_x302":                              ; preds = %"for blur_y.s0.x.x.rebased296"
  %6890 = icmp slt i32 %b174, %4
  %blur_x.s0.x.v1.base.s303 = select i1 %6890, i32 %b174, i32 %4
  %t869 = add nsw i32 %blur_x.s0.x.v1.base.s303, %t1873
  %6891 = sext i32 %t869 to i64
  %6892 = getelementptr inbounds i16, i16* %read_input, i64 %6891
  %6893 = getelementptr inbounds i16, i16* %6892, i64 1
  %6894 = bitcast i16* %6893 to <16 x i16>*
  %6895 = load <16 x i16>, <16 x i16>* %6894, align 2, !tbaa !396
  %6896 = getelementptr inbounds i16, i16* %6892, i64 17
  %6897 = bitcast i16* %6896 to <16 x i16>*
  %6898 = load <16 x i16>, <16 x i16>* %6897, align 2, !tbaa !396
  %6899 = bitcast i16* %6892 to <16 x i16>*
  %6900 = load <16 x i16>, <16 x i16>* %6899, align 2, !tbaa !396
  %6901 = getelementptr inbounds i16, i16* %6892, i64 16
  %6902 = bitcast i16* %6901 to <16 x i16>*
  %6903 = load <16 x i16>, <16 x i16>* %6902, align 2, !tbaa !396
  %6904 = getelementptr inbounds i16, i16* %6892, i64 2
  %6905 = bitcast i16* %6904 to <16 x i16>*
  %6906 = load <16 x i16>, <16 x i16>* %6905, align 2, !tbaa !396
  %6907 = getelementptr inbounds i16, i16* %6892, i64 18
  %6908 = bitcast i16* %6907 to <16 x i16>*
  %6909 = load <16 x i16>, <16 x i16>* %6908, align 2, !tbaa !396
  %6910 = getelementptr inbounds i16, i16* %6892, i64 3
  %6911 = bitcast i16* %6910 to <16 x i16>*
  %6912 = load <16 x i16>, <16 x i16>* %6911, align 2, !tbaa !396
  %6913 = getelementptr inbounds i16, i16* %6892, i64 19
  %6914 = bitcast i16* %6913 to <16 x i16>*
  %6915 = load <16 x i16>, <16 x i16>* %6914, align 2, !tbaa !396
  %6916 = getelementptr inbounds i16, i16* %6892, i64 4
  %6917 = bitcast i16* %6916 to <16 x i16>*
  %6918 = load <16 x i16>, <16 x i16>* %6917, align 2, !tbaa !396
  %6919 = getelementptr inbounds i16, i16* %6892, i64 20
  %6920 = bitcast i16* %6919 to <16 x i16>*
  %6921 = load <16 x i16>, <16 x i16>* %6920, align 2, !tbaa !396
  %6922 = getelementptr inbounds i16, i16* %6892, i64 6
  %6923 = bitcast i16* %6922 to <16 x i16>*
  %6924 = load <16 x i16>, <16 x i16>* %6923, align 2, !tbaa !396
  %6925 = getelementptr inbounds i16, i16* %6892, i64 22
  %6926 = bitcast i16* %6925 to <16 x i16>*
  %6927 = load <16 x i16>, <16 x i16>* %6926, align 2, !tbaa !396
  %6928 = getelementptr inbounds i16, i16* %6892, i64 5
  %6929 = bitcast i16* %6928 to <16 x i16>*
  %6930 = load <16 x i16>, <16 x i16>* %6929, align 2, !tbaa !396
  %6931 = getelementptr inbounds i16, i16* %6892, i64 21
  %6932 = bitcast i16* %6931 to <16 x i16>*
  %6933 = load <16 x i16>, <16 x i16>* %6932, align 2, !tbaa !396
  %6934 = add <16 x i16> %6900, %6895
  %6935 = add <16 x i16> %6934, %6906
  %6936 = add <16 x i16> %6935, %6912
  %6937 = add <16 x i16> %6936, %6918
  %6938 = add <16 x i16> %6937, %6924
  %6939 = add <16 x i16> %6938, %6930
  %6940 = add <16 x i16> %6903, %6898
  %6941 = add <16 x i16> %6940, %6909
  %6942 = add <16 x i16> %6941, %6915
  %6943 = add <16 x i16> %6942, %6921
  %6944 = add <16 x i16> %6943, %6927
  %6945 = add <16 x i16> %6944, %6933
  %6946 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6939, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6947 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6945, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6948 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6946, <16 x i16> %6939)
  %6949 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6947, <16 x i16> %6945)
  %6950 = shufflevector <16 x i16> %6948, <16 x i16> %6949, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6951 = lshr <32 x i16> %6950, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6952 = shufflevector <32 x i16> %6951, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6953 = sext i32 %blur_x.s0.x.v1.base.s303 to i64
  %6954 = add nsw i64 %6953, %6716
  %6955 = getelementptr inbounds i16, i16* %blur_x, i64 %6954
  %6956 = bitcast i16* %6955 to <16 x i16>*
  store <16 x i16> %6952, <16 x i16>* %6956, align 2, !tbaa !399
  %6957 = shufflevector <32 x i16> %6951, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6958 = getelementptr inbounds i16, i16* %6955, i64 16
  %6959 = bitcast i16* %6958 to <16 x i16>*
  store <16 x i16> %6957, <16 x i16>* %6959, align 2, !tbaa !399
  br label %"consume blur_x304"

"consume blur_x304":                              ; preds = %"for blur_y.s0.x.x.rebased296", %"produce blur_x302"
  %6960 = sext i32 %b174 to i64
  %6961 = add nsw i64 %6719, %6960
  %6962 = getelementptr inbounds i16, i16* %blur_x, i64 %6961
  %6963 = bitcast i16* %6962 to <16 x i16>*
  %6964 = load <16 x i16>, <16 x i16>* %6963, align 2, !tbaa !399
  %6965 = getelementptr inbounds i16, i16* %6962, i64 16
  %6966 = bitcast i16* %6965 to <16 x i16>*
  %6967 = load <16 x i16>, <16 x i16>* %6966, align 2, !tbaa !399
  %6968 = add nsw i64 %6722, %6960
  %6969 = getelementptr inbounds i16, i16* %blur_x, i64 %6968
  %6970 = bitcast i16* %6969 to <16 x i16>*
  %6971 = load <16 x i16>, <16 x i16>* %6970, align 2, !tbaa !399
  %6972 = getelementptr inbounds i16, i16* %6969, i64 16
  %6973 = bitcast i16* %6972 to <16 x i16>*
  %6974 = load <16 x i16>, <16 x i16>* %6973, align 2, !tbaa !399
  %6975 = add nsw i64 %6725, %6960
  %6976 = getelementptr inbounds i16, i16* %blur_x, i64 %6975
  %6977 = bitcast i16* %6976 to <16 x i16>*
  %6978 = load <16 x i16>, <16 x i16>* %6977, align 2, !tbaa !399
  %6979 = getelementptr inbounds i16, i16* %6976, i64 16
  %6980 = bitcast i16* %6979 to <16 x i16>*
  %6981 = load <16 x i16>, <16 x i16>* %6980, align 2, !tbaa !399
  %6982 = add nsw i64 %6728, %6960
  %6983 = getelementptr inbounds i16, i16* %blur_x, i64 %6982
  %6984 = bitcast i16* %6983 to <16 x i16>*
  %6985 = load <16 x i16>, <16 x i16>* %6984, align 2, !tbaa !399
  %6986 = getelementptr inbounds i16, i16* %6983, i64 16
  %6987 = bitcast i16* %6986 to <16 x i16>*
  %6988 = load <16 x i16>, <16 x i16>* %6987, align 2, !tbaa !399
  %6989 = add nsw i64 %6731, %6960
  %6990 = getelementptr inbounds i16, i16* %blur_x, i64 %6989
  %6991 = bitcast i16* %6990 to <16 x i16>*
  %6992 = load <16 x i16>, <16 x i16>* %6991, align 2, !tbaa !399
  %6993 = getelementptr inbounds i16, i16* %6990, i64 16
  %6994 = bitcast i16* %6993 to <16 x i16>*
  %6995 = load <16 x i16>, <16 x i16>* %6994, align 2, !tbaa !399
  %6996 = add nsw i64 %6734, %6960
  %6997 = getelementptr inbounds i16, i16* %blur_x, i64 %6996
  %6998 = bitcast i16* %6997 to <16 x i16>*
  %6999 = load <16 x i16>, <16 x i16>* %6998, align 2, !tbaa !399
  %7000 = getelementptr inbounds i16, i16* %6997, i64 16
  %7001 = bitcast i16* %7000 to <16 x i16>*
  %7002 = load <16 x i16>, <16 x i16>* %7001, align 2, !tbaa !399
  %7003 = add nsw i64 %6737, %6960
  %7004 = getelementptr inbounds i16, i16* %blur_x, i64 %7003
  %7005 = bitcast i16* %7004 to <16 x i16>*
  %7006 = load <16 x i16>, <16 x i16>* %7005, align 2, !tbaa !399
  %7007 = getelementptr inbounds i16, i16* %7004, i64 16
  %7008 = bitcast i16* %7007 to <16 x i16>*
  %7009 = load <16 x i16>, <16 x i16>* %7008, align 2, !tbaa !399
  %7010 = add <16 x i16> %6971, %6964
  %7011 = add <16 x i16> %7010, %6978
  %7012 = add <16 x i16> %7011, %6985
  %7013 = add <16 x i16> %7012, %6992
  %7014 = add <16 x i16> %7013, %6999
  %7015 = add <16 x i16> %7014, %7006
  %7016 = add <16 x i16> %6974, %6967
  %7017 = add <16 x i16> %7016, %6981
  %7018 = add <16 x i16> %7017, %6988
  %7019 = add <16 x i16> %7018, %6995
  %7020 = add <16 x i16> %7019, %7002
  %7021 = add <16 x i16> %7020, %7009
  %7022 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7015, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7023 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7021, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7024 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7022, <16 x i16> %7015)
  %7025 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7023, <16 x i16> %7021)
  %7026 = shufflevector <16 x i16> %7024, <16 x i16> %7025, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7027 = lshr <32 x i16> %7026, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7028 = shufflevector <32 x i16> %7027, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7029 = add nsw i64 %6741, %6960
  %7030 = getelementptr inbounds i16, i16* %66, i64 %7029
  %7031 = bitcast i16* %7030 to <16 x i16>*
  store <16 x i16> %7028, <16 x i16>* %7031, align 2, !tbaa !401
  %7032 = shufflevector <32 x i16> %7027, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7033 = getelementptr inbounds i16, i16* %7030, i64 16
  %7034 = bitcast i16* %7033 to <16 x i16>*
  store <16 x i16> %7032, <16 x i16>* %7034, align 2, !tbaa !401
  %7035 = add nuw nsw i32 %blur_y.s0.x.x.rebased298, 1
  %.not2856 = icmp eq i32 %7035, %t1727
  br i1 %.not2856, label %"end for blur_y.s0.x.x.rebased297", label %"for blur_y.s0.x.x.rebased296"

after_bb305:                                      ; preds = %"end for blur_y.s0.x.x.rebased297", %"produce blur_x308"
  br i1 %100, label %"for blur_y.s0.x.x.rebased310.preheader", label %"end for blur_y.s0.x.x.rebased311", !prof !386

"for blur_y.s0.x.x.rebased310.preheader":         ; preds = %after_bb305
  %7036 = sext i32 %t1762 to i64
  %7037 = zext i32 %.pre-phi3579 to i64
  %7038 = mul nsw i64 %7037, %116
  %7039 = sub nsw i64 %7038, %96
  %7040 = zext i32 %.pre-phi to i64
  %7041 = mul nsw i64 %7040, %116
  %7042 = sub nsw i64 %7041, %96
  %7043 = zext i32 %.pre-phi3583 to i64
  %7044 = mul nsw i64 %7043, %116
  %7045 = sub nsw i64 %7044, %96
  %7046 = zext i32 %.pre-phi3587 to i64
  %7047 = mul nsw i64 %7046, %116
  %7048 = sub nsw i64 %7047, %96
  %7049 = zext i32 %.pre-phi3591 to i64
  %7050 = mul nsw i64 %7049, %116
  %7051 = sub nsw i64 %7050, %96
  %7052 = zext i32 %.pre-phi3599 to i64
  %7053 = mul nsw i64 %7052, %116
  %7054 = sub nsw i64 %7053, %96
  %7055 = zext i32 %.pre-phi3595 to i64
  %7056 = mul nsw i64 %7055, %116
  %7057 = sub nsw i64 %7056, %96
  %7058 = sext i32 %a26 to i64
  %7059 = add nsw i64 %7058, 8
  %7060 = mul nsw i64 %7059, %117
  %7061 = add nsw i64 %7060, %120
  br label %"for blur_y.s0.x.x.rebased310"

"produce blur_x308":                              ; preds = %"end for blur_y.s0.x.x.rebased297"
  %7062 = getelementptr inbounds i16, i16* %read_input, i64 %135
  %7063 = getelementptr inbounds i16, i16* %7062, i64 -31
  %7064 = bitcast i16* %7063 to <16 x i16>*
  %7065 = load <16 x i16>, <16 x i16>* %7064, align 2, !tbaa !396
  %7066 = getelementptr inbounds i16, i16* %7062, i64 -15
  %7067 = bitcast i16* %7066 to <16 x i16>*
  %7068 = load <16 x i16>, <16 x i16>* %7067, align 2, !tbaa !396
  %7069 = getelementptr inbounds i16, i16* %7062, i64 -32
  %7070 = bitcast i16* %7069 to <16 x i16>*
  %7071 = load <16 x i16>, <16 x i16>* %7070, align 2, !tbaa !396
  %7072 = getelementptr inbounds i16, i16* %7062, i64 -16
  %7073 = bitcast i16* %7072 to <16 x i16>*
  %7074 = load <16 x i16>, <16 x i16>* %7073, align 2, !tbaa !396
  %7075 = getelementptr inbounds i16, i16* %7062, i64 -30
  %7076 = bitcast i16* %7075 to <16 x i16>*
  %7077 = load <16 x i16>, <16 x i16>* %7076, align 2, !tbaa !396
  %7078 = getelementptr inbounds i16, i16* %7062, i64 -14
  %7079 = bitcast i16* %7078 to <16 x i16>*
  %7080 = load <16 x i16>, <16 x i16>* %7079, align 2, !tbaa !396
  %7081 = getelementptr inbounds i16, i16* %7062, i64 -29
  %7082 = bitcast i16* %7081 to <16 x i16>*
  %7083 = load <16 x i16>, <16 x i16>* %7082, align 2, !tbaa !396
  %7084 = getelementptr inbounds i16, i16* %7062, i64 -13
  %7085 = bitcast i16* %7084 to <16 x i16>*
  %7086 = load <16 x i16>, <16 x i16>* %7085, align 2, !tbaa !396
  %7087 = getelementptr inbounds i16, i16* %7062, i64 -28
  %7088 = bitcast i16* %7087 to <16 x i16>*
  %7089 = load <16 x i16>, <16 x i16>* %7088, align 2, !tbaa !396
  %7090 = getelementptr inbounds i16, i16* %7062, i64 -12
  %7091 = bitcast i16* %7090 to <16 x i16>*
  %7092 = load <16 x i16>, <16 x i16>* %7091, align 2, !tbaa !396
  %7093 = getelementptr inbounds i16, i16* %7062, i64 -26
  %7094 = bitcast i16* %7093 to <16 x i16>*
  %7095 = load <16 x i16>, <16 x i16>* %7094, align 2, !tbaa !396
  %7096 = getelementptr inbounds i16, i16* %7062, i64 -10
  %7097 = bitcast i16* %7096 to <16 x i16>*
  %7098 = load <16 x i16>, <16 x i16>* %7097, align 2, !tbaa !396
  %7099 = getelementptr inbounds i16, i16* %7062, i64 -27
  %7100 = bitcast i16* %7099 to <16 x i16>*
  %7101 = load <16 x i16>, <16 x i16>* %7100, align 2, !tbaa !396
  %7102 = getelementptr inbounds i16, i16* %7062, i64 -11
  %7103 = bitcast i16* %7102 to <16 x i16>*
  %7104 = load <16 x i16>, <16 x i16>* %7103, align 2, !tbaa !396
  %7105 = add <16 x i16> %7071, %7065
  %7106 = add <16 x i16> %7105, %7077
  %7107 = add <16 x i16> %7106, %7083
  %7108 = add <16 x i16> %7107, %7089
  %7109 = add <16 x i16> %7108, %7095
  %7110 = add <16 x i16> %7109, %7101
  %7111 = add <16 x i16> %7074, %7068
  %7112 = add <16 x i16> %7111, %7080
  %7113 = add <16 x i16> %7112, %7086
  %7114 = add <16 x i16> %7113, %7092
  %7115 = add <16 x i16> %7114, %7098
  %7116 = add <16 x i16> %7115, %7104
  %7117 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7110, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7118 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7116, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7119 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7117, <16 x i16> %7110)
  %7120 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7118, <16 x i16> %7116)
  %7121 = shufflevector <16 x i16> %7119, <16 x i16> %7120, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7122 = lshr <32 x i16> %7121, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7123 = shufflevector <32 x i16> %7122, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7124 = zext i32 %.pre-phi3599 to i64
  %7125 = mul nsw i64 %97, %7124
  %7126 = add nsw i64 %99, %7125
  %7127 = getelementptr inbounds i16, i16* %blur_x, i64 %7126
  %7128 = getelementptr inbounds i16, i16* %7127, i64 -32
  %7129 = bitcast i16* %7128 to <16 x i16>*
  store <16 x i16> %7123, <16 x i16>* %7129, align 2, !tbaa !399
  %7130 = shufflevector <32 x i16> %7122, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7131 = getelementptr inbounds i16, i16* %7127, i64 -16
  %7132 = bitcast i16* %7131 to <16 x i16>*
  store <16 x i16> %7130, <16 x i16>* %7132, align 2, !tbaa !399
  %7133 = zext i32 %.pre-phi3579 to i64
  %7134 = mul nsw i64 %7133, %116
  %7135 = add nsw i64 %7134, %94
  %7136 = getelementptr inbounds i16, i16* %blur_x, i64 %7135
  %7137 = getelementptr inbounds i16, i16* %7136, i64 -32
  %7138 = bitcast i16* %7137 to <16 x i16>*
  %7139 = load <16 x i16>, <16 x i16>* %7138, align 2, !tbaa !399
  %7140 = getelementptr inbounds i16, i16* %7136, i64 -16
  %7141 = bitcast i16* %7140 to <16 x i16>*
  %7142 = load <16 x i16>, <16 x i16>* %7141, align 2, !tbaa !399
  %7143 = zext i32 %.pre-phi to i64
  %7144 = mul nsw i64 %7143, %116
  %7145 = add nsw i64 %7144, %94
  %7146 = getelementptr inbounds i16, i16* %blur_x, i64 %7145
  %7147 = getelementptr inbounds i16, i16* %7146, i64 -32
  %7148 = bitcast i16* %7147 to <16 x i16>*
  %7149 = load <16 x i16>, <16 x i16>* %7148, align 2, !tbaa !399
  %7150 = getelementptr inbounds i16, i16* %7146, i64 -16
  %7151 = bitcast i16* %7150 to <16 x i16>*
  %7152 = load <16 x i16>, <16 x i16>* %7151, align 2, !tbaa !399
  %7153 = zext i32 %.pre-phi3583 to i64
  %7154 = mul nsw i64 %7153, %116
  %7155 = add nsw i64 %7154, %94
  %7156 = getelementptr inbounds i16, i16* %blur_x, i64 %7155
  %7157 = getelementptr inbounds i16, i16* %7156, i64 -32
  %7158 = bitcast i16* %7157 to <16 x i16>*
  %7159 = load <16 x i16>, <16 x i16>* %7158, align 2, !tbaa !399
  %7160 = getelementptr inbounds i16, i16* %7156, i64 -16
  %7161 = bitcast i16* %7160 to <16 x i16>*
  %7162 = load <16 x i16>, <16 x i16>* %7161, align 2, !tbaa !399
  %7163 = zext i32 %.pre-phi3587 to i64
  %7164 = mul nsw i64 %7163, %116
  %7165 = add nsw i64 %7164, %94
  %7166 = getelementptr inbounds i16, i16* %blur_x, i64 %7165
  %7167 = getelementptr inbounds i16, i16* %7166, i64 -32
  %7168 = bitcast i16* %7167 to <16 x i16>*
  %7169 = load <16 x i16>, <16 x i16>* %7168, align 2, !tbaa !399
  %7170 = getelementptr inbounds i16, i16* %7166, i64 -16
  %7171 = bitcast i16* %7170 to <16 x i16>*
  %7172 = load <16 x i16>, <16 x i16>* %7171, align 2, !tbaa !399
  %7173 = zext i32 %.pre-phi3591 to i64
  %7174 = mul nsw i64 %7173, %116
  %7175 = add nsw i64 %7174, %94
  %7176 = getelementptr inbounds i16, i16* %blur_x, i64 %7175
  %7177 = getelementptr inbounds i16, i16* %7176, i64 -32
  %7178 = bitcast i16* %7177 to <16 x i16>*
  %7179 = load <16 x i16>, <16 x i16>* %7178, align 2, !tbaa !399
  %7180 = getelementptr inbounds i16, i16* %7176, i64 -16
  %7181 = bitcast i16* %7180 to <16 x i16>*
  %7182 = load <16 x i16>, <16 x i16>* %7181, align 2, !tbaa !399
  %7183 = mul nsw i64 %7124, %116
  %7184 = add nsw i64 %7183, %94
  %7185 = getelementptr inbounds i16, i16* %blur_x, i64 %7184
  %7186 = getelementptr inbounds i16, i16* %7185, i64 -32
  %7187 = bitcast i16* %7186 to <16 x i16>*
  %7188 = load <16 x i16>, <16 x i16>* %7187, align 2, !tbaa !399
  %7189 = getelementptr inbounds i16, i16* %7185, i64 -16
  %7190 = bitcast i16* %7189 to <16 x i16>*
  %7191 = load <16 x i16>, <16 x i16>* %7190, align 2, !tbaa !399
  %7192 = zext i32 %.pre-phi3595 to i64
  %7193 = mul nsw i64 %7192, %116
  %7194 = add nsw i64 %7193, %94
  %7195 = getelementptr inbounds i16, i16* %blur_x, i64 %7194
  %7196 = getelementptr inbounds i16, i16* %7195, i64 -32
  %7197 = bitcast i16* %7196 to <16 x i16>*
  %7198 = load <16 x i16>, <16 x i16>* %7197, align 2, !tbaa !399
  %7199 = getelementptr inbounds i16, i16* %7195, i64 -16
  %7200 = bitcast i16* %7199 to <16 x i16>*
  %7201 = load <16 x i16>, <16 x i16>* %7200, align 2, !tbaa !399
  %7202 = add <16 x i16> %7149, %7139
  %7203 = add <16 x i16> %7202, %7159
  %7204 = add <16 x i16> %7203, %7169
  %7205 = add <16 x i16> %7204, %7179
  %7206 = add <16 x i16> %7205, %7188
  %7207 = add <16 x i16> %7206, %7198
  %7208 = add <16 x i16> %7152, %7142
  %7209 = add <16 x i16> %7208, %7162
  %7210 = add <16 x i16> %7209, %7172
  %7211 = add <16 x i16> %7210, %7182
  %7212 = add <16 x i16> %7211, %7191
  %7213 = add <16 x i16> %7212, %7201
  %7214 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7207, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7215 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7213, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7216 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7214, <16 x i16> %7207)
  %7217 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7215, <16 x i16> %7213)
  %7218 = shufflevector <16 x i16> %7216, <16 x i16> %7217, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7219 = lshr <32 x i16> %7218, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7220 = shufflevector <32 x i16> %7219, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7221 = sext i32 %a26 to i64
  %7222 = add nsw i64 %7221, 8
  %7223 = mul nsw i64 %7222, %117
  %7224 = add nsw i64 %119, %7223
  %7225 = getelementptr inbounds i16, i16* %66, i64 %7224
  %7226 = getelementptr inbounds i16, i16* %7225, i64 -32
  %7227 = bitcast i16* %7226 to <16 x i16>*
  store <16 x i16> %7220, <16 x i16>* %7227, align 2, !tbaa !401
  %7228 = shufflevector <32 x i16> %7219, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7229 = getelementptr inbounds i16, i16* %7225, i64 -16
  %7230 = bitcast i16* %7229 to <16 x i16>*
  store <16 x i16> %7228, <16 x i16>* %7230, align 2, !tbaa !401
  br label %after_bb305

"for blur_y.s0.x.x.rebased310":                   ; preds = %"for blur_y.s0.x.x.rebased310.preheader", %"consume blur_x317"
  %indvars.iv3413 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased310.preheader" ], [ %indvars.iv.next3414, %"consume blur_x317" ]
  %7231 = add nsw i64 %indvars.iv3413, %101
  %7232 = icmp slt i64 %7231, 1
  %7233 = trunc i64 %7231 to i32
  %7234 = shl nsw i32 %7233, 5
  %7235 = icmp sgt i32 %4, %7234
  %7236 = or i1 %7232, %7235
  br i1 %7236, label %"produce blur_x316", label %"for blur_y.s0.x.x.rebased310.consume blur_x317_crit_edge"

"for blur_y.s0.x.x.rebased310.consume blur_x317_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased310"
  %.pre3620 = shl nsw i64 %7231, 5
  br label %"consume blur_x317"

"end for blur_y.s0.x.x.rebased311":               ; preds = %"consume blur_x317", %after_bb305
  br i1 %102, label %"for blur_y.s0.x.x.rebased318.preheader", label %"end for blur_y.s0.x.x.rebased319", !prof !386

"for blur_y.s0.x.x.rebased318.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased311"
  %7237 = sext i32 %t1762 to i64
  %7238 = zext i32 %.pre-phi3579 to i64
  %7239 = mul nsw i64 %7238, %116
  %7240 = sub nsw i64 %7239, %96
  %7241 = zext i32 %.pre-phi to i64
  %7242 = mul nsw i64 %7241, %116
  %7243 = sub nsw i64 %7242, %96
  %7244 = zext i32 %.pre-phi3583 to i64
  %7245 = mul nsw i64 %7244, %116
  %7246 = sub nsw i64 %7245, %96
  %7247 = zext i32 %.pre-phi3587 to i64
  %7248 = mul nsw i64 %7247, %116
  %7249 = sub nsw i64 %7248, %96
  %7250 = zext i32 %.pre-phi3591 to i64
  %7251 = mul nsw i64 %7250, %116
  %7252 = sub nsw i64 %7251, %96
  %7253 = zext i32 %.pre-phi3599 to i64
  %7254 = mul nsw i64 %7253, %116
  %7255 = sub nsw i64 %7254, %96
  %7256 = zext i32 %.pre-phi3595 to i64
  %7257 = mul nsw i64 %7256, %116
  %7258 = sub nsw i64 %7257, %96
  %7259 = sext i32 %a26 to i64
  %7260 = add nsw i64 %7259, 8
  %7261 = mul nsw i64 %7260, %117
  %7262 = add nsw i64 %7261, %120
  br label %"for blur_y.s0.x.x.rebased318"

"produce blur_x316":                              ; preds = %"for blur_y.s0.x.x.rebased310"
  %t880 = add nsw i32 %7234, %t1889
  %7263 = sext i32 %t880 to i64
  %7264 = getelementptr inbounds i16, i16* %read_input, i64 %7263
  %7265 = getelementptr inbounds i16, i16* %7264, i64 1
  %7266 = bitcast i16* %7265 to <16 x i16>*
  %7267 = load <16 x i16>, <16 x i16>* %7266, align 2, !tbaa !396
  %7268 = getelementptr inbounds i16, i16* %7264, i64 17
  %7269 = bitcast i16* %7268 to <16 x i16>*
  %7270 = load <16 x i16>, <16 x i16>* %7269, align 2, !tbaa !396
  %7271 = bitcast i16* %7264 to <16 x i16>*
  %7272 = load <16 x i16>, <16 x i16>* %7271, align 2, !tbaa !396
  %7273 = getelementptr inbounds i16, i16* %7264, i64 16
  %7274 = bitcast i16* %7273 to <16 x i16>*
  %7275 = load <16 x i16>, <16 x i16>* %7274, align 2, !tbaa !396
  %7276 = getelementptr inbounds i16, i16* %7264, i64 2
  %7277 = bitcast i16* %7276 to <16 x i16>*
  %7278 = load <16 x i16>, <16 x i16>* %7277, align 2, !tbaa !396
  %7279 = getelementptr inbounds i16, i16* %7264, i64 18
  %7280 = bitcast i16* %7279 to <16 x i16>*
  %7281 = load <16 x i16>, <16 x i16>* %7280, align 2, !tbaa !396
  %7282 = getelementptr inbounds i16, i16* %7264, i64 3
  %7283 = bitcast i16* %7282 to <16 x i16>*
  %7284 = load <16 x i16>, <16 x i16>* %7283, align 2, !tbaa !396
  %7285 = getelementptr inbounds i16, i16* %7264, i64 19
  %7286 = bitcast i16* %7285 to <16 x i16>*
  %7287 = load <16 x i16>, <16 x i16>* %7286, align 2, !tbaa !396
  %7288 = getelementptr inbounds i16, i16* %7264, i64 4
  %7289 = bitcast i16* %7288 to <16 x i16>*
  %7290 = load <16 x i16>, <16 x i16>* %7289, align 2, !tbaa !396
  %7291 = getelementptr inbounds i16, i16* %7264, i64 20
  %7292 = bitcast i16* %7291 to <16 x i16>*
  %7293 = load <16 x i16>, <16 x i16>* %7292, align 2, !tbaa !396
  %7294 = getelementptr inbounds i16, i16* %7264, i64 6
  %7295 = bitcast i16* %7294 to <16 x i16>*
  %7296 = load <16 x i16>, <16 x i16>* %7295, align 2, !tbaa !396
  %7297 = getelementptr inbounds i16, i16* %7264, i64 22
  %7298 = bitcast i16* %7297 to <16 x i16>*
  %7299 = load <16 x i16>, <16 x i16>* %7298, align 2, !tbaa !396
  %7300 = getelementptr inbounds i16, i16* %7264, i64 5
  %7301 = bitcast i16* %7300 to <16 x i16>*
  %7302 = load <16 x i16>, <16 x i16>* %7301, align 2, !tbaa !396
  %7303 = getelementptr inbounds i16, i16* %7264, i64 21
  %7304 = bitcast i16* %7303 to <16 x i16>*
  %7305 = load <16 x i16>, <16 x i16>* %7304, align 2, !tbaa !396
  %7306 = add <16 x i16> %7272, %7267
  %7307 = add <16 x i16> %7306, %7278
  %7308 = add <16 x i16> %7307, %7284
  %7309 = add <16 x i16> %7308, %7290
  %7310 = add <16 x i16> %7309, %7296
  %7311 = add <16 x i16> %7310, %7302
  %7312 = add <16 x i16> %7275, %7270
  %7313 = add <16 x i16> %7312, %7281
  %7314 = add <16 x i16> %7313, %7287
  %7315 = add <16 x i16> %7314, %7293
  %7316 = add <16 x i16> %7315, %7299
  %7317 = add <16 x i16> %7316, %7305
  %7318 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7311, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7319 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7317, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7320 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7318, <16 x i16> %7311)
  %7321 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7319, <16 x i16> %7317)
  %7322 = shufflevector <16 x i16> %7320, <16 x i16> %7321, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7323 = lshr <32 x i16> %7322, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7324 = shufflevector <32 x i16> %7323, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7325 = shl nsw i64 %7231, 5
  %7326 = add nsw i64 %7325, %7036
  %7327 = getelementptr inbounds i16, i16* %blur_x, i64 %7326
  %7328 = bitcast i16* %7327 to <16 x i16>*
  store <16 x i16> %7324, <16 x i16>* %7328, align 2, !tbaa !399
  %7329 = shufflevector <32 x i16> %7323, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7330 = getelementptr inbounds i16, i16* %7327, i64 16
  %7331 = bitcast i16* %7330 to <16 x i16>*
  store <16 x i16> %7329, <16 x i16>* %7331, align 2, !tbaa !399
  br label %"consume blur_x317"

"consume blur_x317":                              ; preds = %"for blur_y.s0.x.x.rebased310.consume blur_x317_crit_edge", %"produce blur_x316"
  %.pre-phi3621 = phi i64 [ %.pre3620, %"for blur_y.s0.x.x.rebased310.consume blur_x317_crit_edge" ], [ %7325, %"produce blur_x316" ]
  %7332 = add nsw i64 %7039, %.pre-phi3621
  %7333 = getelementptr inbounds i16, i16* %blur_x, i64 %7332
  %7334 = bitcast i16* %7333 to <16 x i16>*
  %7335 = load <16 x i16>, <16 x i16>* %7334, align 2, !tbaa !399
  %7336 = getelementptr inbounds i16, i16* %7333, i64 16
  %7337 = bitcast i16* %7336 to <16 x i16>*
  %7338 = load <16 x i16>, <16 x i16>* %7337, align 2, !tbaa !399
  %7339 = add nsw i64 %7042, %.pre-phi3621
  %7340 = getelementptr inbounds i16, i16* %blur_x, i64 %7339
  %7341 = bitcast i16* %7340 to <16 x i16>*
  %7342 = load <16 x i16>, <16 x i16>* %7341, align 2, !tbaa !399
  %7343 = getelementptr inbounds i16, i16* %7340, i64 16
  %7344 = bitcast i16* %7343 to <16 x i16>*
  %7345 = load <16 x i16>, <16 x i16>* %7344, align 2, !tbaa !399
  %7346 = add nsw i64 %7045, %.pre-phi3621
  %7347 = getelementptr inbounds i16, i16* %blur_x, i64 %7346
  %7348 = bitcast i16* %7347 to <16 x i16>*
  %7349 = load <16 x i16>, <16 x i16>* %7348, align 2, !tbaa !399
  %7350 = getelementptr inbounds i16, i16* %7347, i64 16
  %7351 = bitcast i16* %7350 to <16 x i16>*
  %7352 = load <16 x i16>, <16 x i16>* %7351, align 2, !tbaa !399
  %7353 = add nsw i64 %7048, %.pre-phi3621
  %7354 = getelementptr inbounds i16, i16* %blur_x, i64 %7353
  %7355 = bitcast i16* %7354 to <16 x i16>*
  %7356 = load <16 x i16>, <16 x i16>* %7355, align 2, !tbaa !399
  %7357 = getelementptr inbounds i16, i16* %7354, i64 16
  %7358 = bitcast i16* %7357 to <16 x i16>*
  %7359 = load <16 x i16>, <16 x i16>* %7358, align 2, !tbaa !399
  %7360 = add nsw i64 %7051, %.pre-phi3621
  %7361 = getelementptr inbounds i16, i16* %blur_x, i64 %7360
  %7362 = bitcast i16* %7361 to <16 x i16>*
  %7363 = load <16 x i16>, <16 x i16>* %7362, align 2, !tbaa !399
  %7364 = getelementptr inbounds i16, i16* %7361, i64 16
  %7365 = bitcast i16* %7364 to <16 x i16>*
  %7366 = load <16 x i16>, <16 x i16>* %7365, align 2, !tbaa !399
  %7367 = add nsw i64 %7054, %.pre-phi3621
  %7368 = getelementptr inbounds i16, i16* %blur_x, i64 %7367
  %7369 = bitcast i16* %7368 to <16 x i16>*
  %7370 = load <16 x i16>, <16 x i16>* %7369, align 2, !tbaa !399
  %7371 = getelementptr inbounds i16, i16* %7368, i64 16
  %7372 = bitcast i16* %7371 to <16 x i16>*
  %7373 = load <16 x i16>, <16 x i16>* %7372, align 2, !tbaa !399
  %7374 = add nsw i64 %7057, %.pre-phi3621
  %7375 = getelementptr inbounds i16, i16* %blur_x, i64 %7374
  %7376 = bitcast i16* %7375 to <16 x i16>*
  %7377 = load <16 x i16>, <16 x i16>* %7376, align 2, !tbaa !399
  %7378 = getelementptr inbounds i16, i16* %7375, i64 16
  %7379 = bitcast i16* %7378 to <16 x i16>*
  %7380 = load <16 x i16>, <16 x i16>* %7379, align 2, !tbaa !399
  %7381 = add <16 x i16> %7342, %7335
  %7382 = add <16 x i16> %7381, %7349
  %7383 = add <16 x i16> %7382, %7356
  %7384 = add <16 x i16> %7383, %7363
  %7385 = add <16 x i16> %7384, %7370
  %7386 = add <16 x i16> %7385, %7377
  %7387 = add <16 x i16> %7345, %7338
  %7388 = add <16 x i16> %7387, %7352
  %7389 = add <16 x i16> %7388, %7359
  %7390 = add <16 x i16> %7389, %7366
  %7391 = add <16 x i16> %7390, %7373
  %7392 = add <16 x i16> %7391, %7380
  %7393 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7386, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7394 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7392, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7395 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7393, <16 x i16> %7386)
  %7396 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7394, <16 x i16> %7392)
  %7397 = shufflevector <16 x i16> %7395, <16 x i16> %7396, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7398 = lshr <32 x i16> %7397, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7399 = shufflevector <32 x i16> %7398, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7400 = add nsw i64 %7061, %.pre-phi3621
  %7401 = getelementptr inbounds i16, i16* %66, i64 %7400
  %7402 = bitcast i16* %7401 to <16 x i16>*
  store <16 x i16> %7399, <16 x i16>* %7402, align 2, !tbaa !401
  %7403 = shufflevector <32 x i16> %7398, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7404 = getelementptr inbounds i16, i16* %7401, i64 16
  %7405 = bitcast i16* %7404 to <16 x i16>*
  store <16 x i16> %7403, <16 x i16>* %7405, align 2, !tbaa !401
  %indvars.iv.next3414 = add nuw nsw i64 %indvars.iv3413, 1
  %.not2855 = icmp eq i64 %indvars.iv.next3414, %188
  br i1 %.not2855, label %"end for blur_y.s0.x.x.rebased311", label %"for blur_y.s0.x.x.rebased310"

"for blur_y.s0.x.x.rebased318":                   ; preds = %"for blur_y.s0.x.x.rebased318.preheader", %"consume blur_x326"
  %blur_y.s0.x.x.rebased320 = phi i32 [ %7556, %"consume blur_x326" ], [ 0, %"for blur_y.s0.x.x.rebased318.preheader" ]
  %7406 = add nsw i32 %blur_y.s0.x.x.rebased320, %t1670
  %a175 = shl nsw i32 %7406, 5
  %7407 = icmp sgt i32 %a14, %a175
  %b181 = select i1 %7407, i32 %a175, i32 %a14
  %7408 = icmp slt i32 %7406, 1
  %7409 = icmp sgt i32 %4, %a175
  %7410 = or i1 %7408, %7409
  br i1 %7410, label %"produce blur_x324", label %"consume blur_x326"

"end for blur_y.s0.x.x.rebased319":               ; preds = %"consume blur_x326", %"end for blur_y.s0.x.x.rebased311"
  br i1 %34, label %"produce blur_x330", label %after_bb327

"produce blur_x324":                              ; preds = %"for blur_y.s0.x.x.rebased318"
  %7411 = icmp slt i32 %b181, %4
  %blur_x.s0.x.v1.base.s325 = select i1 %7411, i32 %b181, i32 %4
  %t885 = add nsw i32 %blur_x.s0.x.v1.base.s325, %t1889
  %7412 = sext i32 %t885 to i64
  %7413 = getelementptr inbounds i16, i16* %read_input, i64 %7412
  %7414 = getelementptr inbounds i16, i16* %7413, i64 1
  %7415 = bitcast i16* %7414 to <16 x i16>*
  %7416 = load <16 x i16>, <16 x i16>* %7415, align 2, !tbaa !396
  %7417 = getelementptr inbounds i16, i16* %7413, i64 17
  %7418 = bitcast i16* %7417 to <16 x i16>*
  %7419 = load <16 x i16>, <16 x i16>* %7418, align 2, !tbaa !396
  %7420 = bitcast i16* %7413 to <16 x i16>*
  %7421 = load <16 x i16>, <16 x i16>* %7420, align 2, !tbaa !396
  %7422 = getelementptr inbounds i16, i16* %7413, i64 16
  %7423 = bitcast i16* %7422 to <16 x i16>*
  %7424 = load <16 x i16>, <16 x i16>* %7423, align 2, !tbaa !396
  %7425 = getelementptr inbounds i16, i16* %7413, i64 2
  %7426 = bitcast i16* %7425 to <16 x i16>*
  %7427 = load <16 x i16>, <16 x i16>* %7426, align 2, !tbaa !396
  %7428 = getelementptr inbounds i16, i16* %7413, i64 18
  %7429 = bitcast i16* %7428 to <16 x i16>*
  %7430 = load <16 x i16>, <16 x i16>* %7429, align 2, !tbaa !396
  %7431 = getelementptr inbounds i16, i16* %7413, i64 3
  %7432 = bitcast i16* %7431 to <16 x i16>*
  %7433 = load <16 x i16>, <16 x i16>* %7432, align 2, !tbaa !396
  %7434 = getelementptr inbounds i16, i16* %7413, i64 19
  %7435 = bitcast i16* %7434 to <16 x i16>*
  %7436 = load <16 x i16>, <16 x i16>* %7435, align 2, !tbaa !396
  %7437 = getelementptr inbounds i16, i16* %7413, i64 4
  %7438 = bitcast i16* %7437 to <16 x i16>*
  %7439 = load <16 x i16>, <16 x i16>* %7438, align 2, !tbaa !396
  %7440 = getelementptr inbounds i16, i16* %7413, i64 20
  %7441 = bitcast i16* %7440 to <16 x i16>*
  %7442 = load <16 x i16>, <16 x i16>* %7441, align 2, !tbaa !396
  %7443 = getelementptr inbounds i16, i16* %7413, i64 6
  %7444 = bitcast i16* %7443 to <16 x i16>*
  %7445 = load <16 x i16>, <16 x i16>* %7444, align 2, !tbaa !396
  %7446 = getelementptr inbounds i16, i16* %7413, i64 22
  %7447 = bitcast i16* %7446 to <16 x i16>*
  %7448 = load <16 x i16>, <16 x i16>* %7447, align 2, !tbaa !396
  %7449 = getelementptr inbounds i16, i16* %7413, i64 5
  %7450 = bitcast i16* %7449 to <16 x i16>*
  %7451 = load <16 x i16>, <16 x i16>* %7450, align 2, !tbaa !396
  %7452 = getelementptr inbounds i16, i16* %7413, i64 21
  %7453 = bitcast i16* %7452 to <16 x i16>*
  %7454 = load <16 x i16>, <16 x i16>* %7453, align 2, !tbaa !396
  %7455 = add <16 x i16> %7421, %7416
  %7456 = add <16 x i16> %7455, %7427
  %7457 = add <16 x i16> %7456, %7433
  %7458 = add <16 x i16> %7457, %7439
  %7459 = add <16 x i16> %7458, %7445
  %7460 = add <16 x i16> %7459, %7451
  %7461 = add <16 x i16> %7424, %7419
  %7462 = add <16 x i16> %7461, %7430
  %7463 = add <16 x i16> %7462, %7436
  %7464 = add <16 x i16> %7463, %7442
  %7465 = add <16 x i16> %7464, %7448
  %7466 = add <16 x i16> %7465, %7454
  %7467 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7460, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7468 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7466, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7469 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7467, <16 x i16> %7460)
  %7470 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7468, <16 x i16> %7466)
  %7471 = shufflevector <16 x i16> %7469, <16 x i16> %7470, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7472 = lshr <32 x i16> %7471, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7473 = shufflevector <32 x i16> %7472, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7474 = sext i32 %blur_x.s0.x.v1.base.s325 to i64
  %7475 = add nsw i64 %7474, %7237
  %7476 = getelementptr inbounds i16, i16* %blur_x, i64 %7475
  %7477 = bitcast i16* %7476 to <16 x i16>*
  store <16 x i16> %7473, <16 x i16>* %7477, align 2, !tbaa !399
  %7478 = shufflevector <32 x i16> %7472, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7479 = getelementptr inbounds i16, i16* %7476, i64 16
  %7480 = bitcast i16* %7479 to <16 x i16>*
  store <16 x i16> %7478, <16 x i16>* %7480, align 2, !tbaa !399
  br label %"consume blur_x326"

"consume blur_x326":                              ; preds = %"for blur_y.s0.x.x.rebased318", %"produce blur_x324"
  %7481 = sext i32 %b181 to i64
  %7482 = add nsw i64 %7240, %7481
  %7483 = getelementptr inbounds i16, i16* %blur_x, i64 %7482
  %7484 = bitcast i16* %7483 to <16 x i16>*
  %7485 = load <16 x i16>, <16 x i16>* %7484, align 2, !tbaa !399
  %7486 = getelementptr inbounds i16, i16* %7483, i64 16
  %7487 = bitcast i16* %7486 to <16 x i16>*
  %7488 = load <16 x i16>, <16 x i16>* %7487, align 2, !tbaa !399
  %7489 = add nsw i64 %7243, %7481
  %7490 = getelementptr inbounds i16, i16* %blur_x, i64 %7489
  %7491 = bitcast i16* %7490 to <16 x i16>*
  %7492 = load <16 x i16>, <16 x i16>* %7491, align 2, !tbaa !399
  %7493 = getelementptr inbounds i16, i16* %7490, i64 16
  %7494 = bitcast i16* %7493 to <16 x i16>*
  %7495 = load <16 x i16>, <16 x i16>* %7494, align 2, !tbaa !399
  %7496 = add nsw i64 %7246, %7481
  %7497 = getelementptr inbounds i16, i16* %blur_x, i64 %7496
  %7498 = bitcast i16* %7497 to <16 x i16>*
  %7499 = load <16 x i16>, <16 x i16>* %7498, align 2, !tbaa !399
  %7500 = getelementptr inbounds i16, i16* %7497, i64 16
  %7501 = bitcast i16* %7500 to <16 x i16>*
  %7502 = load <16 x i16>, <16 x i16>* %7501, align 2, !tbaa !399
  %7503 = add nsw i64 %7249, %7481
  %7504 = getelementptr inbounds i16, i16* %blur_x, i64 %7503
  %7505 = bitcast i16* %7504 to <16 x i16>*
  %7506 = load <16 x i16>, <16 x i16>* %7505, align 2, !tbaa !399
  %7507 = getelementptr inbounds i16, i16* %7504, i64 16
  %7508 = bitcast i16* %7507 to <16 x i16>*
  %7509 = load <16 x i16>, <16 x i16>* %7508, align 2, !tbaa !399
  %7510 = add nsw i64 %7252, %7481
  %7511 = getelementptr inbounds i16, i16* %blur_x, i64 %7510
  %7512 = bitcast i16* %7511 to <16 x i16>*
  %7513 = load <16 x i16>, <16 x i16>* %7512, align 2, !tbaa !399
  %7514 = getelementptr inbounds i16, i16* %7511, i64 16
  %7515 = bitcast i16* %7514 to <16 x i16>*
  %7516 = load <16 x i16>, <16 x i16>* %7515, align 2, !tbaa !399
  %7517 = add nsw i64 %7255, %7481
  %7518 = getelementptr inbounds i16, i16* %blur_x, i64 %7517
  %7519 = bitcast i16* %7518 to <16 x i16>*
  %7520 = load <16 x i16>, <16 x i16>* %7519, align 2, !tbaa !399
  %7521 = getelementptr inbounds i16, i16* %7518, i64 16
  %7522 = bitcast i16* %7521 to <16 x i16>*
  %7523 = load <16 x i16>, <16 x i16>* %7522, align 2, !tbaa !399
  %7524 = add nsw i64 %7258, %7481
  %7525 = getelementptr inbounds i16, i16* %blur_x, i64 %7524
  %7526 = bitcast i16* %7525 to <16 x i16>*
  %7527 = load <16 x i16>, <16 x i16>* %7526, align 2, !tbaa !399
  %7528 = getelementptr inbounds i16, i16* %7525, i64 16
  %7529 = bitcast i16* %7528 to <16 x i16>*
  %7530 = load <16 x i16>, <16 x i16>* %7529, align 2, !tbaa !399
  %7531 = add <16 x i16> %7492, %7485
  %7532 = add <16 x i16> %7531, %7499
  %7533 = add <16 x i16> %7532, %7506
  %7534 = add <16 x i16> %7533, %7513
  %7535 = add <16 x i16> %7534, %7520
  %7536 = add <16 x i16> %7535, %7527
  %7537 = add <16 x i16> %7495, %7488
  %7538 = add <16 x i16> %7537, %7502
  %7539 = add <16 x i16> %7538, %7509
  %7540 = add <16 x i16> %7539, %7516
  %7541 = add <16 x i16> %7540, %7523
  %7542 = add <16 x i16> %7541, %7530
  %7543 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7536, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7544 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7542, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7545 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7543, <16 x i16> %7536)
  %7546 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7544, <16 x i16> %7542)
  %7547 = shufflevector <16 x i16> %7545, <16 x i16> %7546, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7548 = lshr <32 x i16> %7547, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7549 = shufflevector <32 x i16> %7548, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7550 = add nsw i64 %7262, %7481
  %7551 = getelementptr inbounds i16, i16* %66, i64 %7550
  %7552 = bitcast i16* %7551 to <16 x i16>*
  store <16 x i16> %7549, <16 x i16>* %7552, align 2, !tbaa !401
  %7553 = shufflevector <32 x i16> %7548, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7554 = getelementptr inbounds i16, i16* %7551, i64 16
  %7555 = bitcast i16* %7554 to <16 x i16>*
  store <16 x i16> %7553, <16 x i16>* %7555, align 2, !tbaa !401
  %7556 = add nuw nsw i32 %blur_y.s0.x.x.rebased320, 1
  %.not2854 = icmp eq i32 %7556, %t1727
  br i1 %.not2854, label %"end for blur_y.s0.x.x.rebased319", label %"for blur_y.s0.x.x.rebased318"

after_bb327:                                      ; preds = %"end for blur_y.s0.x.x.rebased319", %"produce blur_x330"
  br i1 %100, label %"for blur_y.s0.x.x.rebased332.preheader", label %"end for blur_y.s0.x.x.rebased333", !prof !386

"for blur_y.s0.x.x.rebased332.preheader":         ; preds = %after_bb327
  %7557 = sext i32 %t1778 to i64
  %7558 = zext i32 %.pre-phi3583 to i64
  %7559 = mul nsw i64 %7558, %116
  %7560 = sub nsw i64 %7559, %96
  %7561 = zext i32 %.pre-phi3579 to i64
  %7562 = mul nsw i64 %7561, %116
  %7563 = sub nsw i64 %7562, %96
  %7564 = zext i32 %.pre-phi3587 to i64
  %7565 = mul nsw i64 %7564, %116
  %7566 = sub nsw i64 %7565, %96
  %7567 = zext i32 %.pre-phi3591 to i64
  %7568 = mul nsw i64 %7567, %116
  %7569 = sub nsw i64 %7568, %96
  %7570 = zext i32 %.pre-phi3595 to i64
  %7571 = mul nsw i64 %7570, %116
  %7572 = sub nsw i64 %7571, %96
  %7573 = zext i32 %.pre-phi3605 to i64
  %7574 = mul nsw i64 %7573, %116
  %7575 = sub nsw i64 %7574, %96
  %7576 = zext i32 %.pre-phi3599 to i64
  %7577 = mul nsw i64 %7576, %116
  %7578 = sub nsw i64 %7577, %96
  %7579 = sext i32 %a26 to i64
  %7580 = add nsw i64 %7579, 9
  %7581 = mul nsw i64 %7580, %117
  %7582 = add nsw i64 %7581, %120
  br label %"for blur_y.s0.x.x.rebased332"

"produce blur_x330":                              ; preds = %"end for blur_y.s0.x.x.rebased319"
  %7583 = getelementptr inbounds i16, i16* %read_input, i64 %137
  %7584 = getelementptr inbounds i16, i16* %7583, i64 -31
  %7585 = bitcast i16* %7584 to <16 x i16>*
  %7586 = load <16 x i16>, <16 x i16>* %7585, align 2, !tbaa !396
  %7587 = getelementptr inbounds i16, i16* %7583, i64 -15
  %7588 = bitcast i16* %7587 to <16 x i16>*
  %7589 = load <16 x i16>, <16 x i16>* %7588, align 2, !tbaa !396
  %7590 = getelementptr inbounds i16, i16* %7583, i64 -32
  %7591 = bitcast i16* %7590 to <16 x i16>*
  %7592 = load <16 x i16>, <16 x i16>* %7591, align 2, !tbaa !396
  %7593 = getelementptr inbounds i16, i16* %7583, i64 -16
  %7594 = bitcast i16* %7593 to <16 x i16>*
  %7595 = load <16 x i16>, <16 x i16>* %7594, align 2, !tbaa !396
  %7596 = getelementptr inbounds i16, i16* %7583, i64 -30
  %7597 = bitcast i16* %7596 to <16 x i16>*
  %7598 = load <16 x i16>, <16 x i16>* %7597, align 2, !tbaa !396
  %7599 = getelementptr inbounds i16, i16* %7583, i64 -14
  %7600 = bitcast i16* %7599 to <16 x i16>*
  %7601 = load <16 x i16>, <16 x i16>* %7600, align 2, !tbaa !396
  %7602 = getelementptr inbounds i16, i16* %7583, i64 -29
  %7603 = bitcast i16* %7602 to <16 x i16>*
  %7604 = load <16 x i16>, <16 x i16>* %7603, align 2, !tbaa !396
  %7605 = getelementptr inbounds i16, i16* %7583, i64 -13
  %7606 = bitcast i16* %7605 to <16 x i16>*
  %7607 = load <16 x i16>, <16 x i16>* %7606, align 2, !tbaa !396
  %7608 = getelementptr inbounds i16, i16* %7583, i64 -28
  %7609 = bitcast i16* %7608 to <16 x i16>*
  %7610 = load <16 x i16>, <16 x i16>* %7609, align 2, !tbaa !396
  %7611 = getelementptr inbounds i16, i16* %7583, i64 -12
  %7612 = bitcast i16* %7611 to <16 x i16>*
  %7613 = load <16 x i16>, <16 x i16>* %7612, align 2, !tbaa !396
  %7614 = getelementptr inbounds i16, i16* %7583, i64 -26
  %7615 = bitcast i16* %7614 to <16 x i16>*
  %7616 = load <16 x i16>, <16 x i16>* %7615, align 2, !tbaa !396
  %7617 = getelementptr inbounds i16, i16* %7583, i64 -10
  %7618 = bitcast i16* %7617 to <16 x i16>*
  %7619 = load <16 x i16>, <16 x i16>* %7618, align 2, !tbaa !396
  %7620 = getelementptr inbounds i16, i16* %7583, i64 -27
  %7621 = bitcast i16* %7620 to <16 x i16>*
  %7622 = load <16 x i16>, <16 x i16>* %7621, align 2, !tbaa !396
  %7623 = getelementptr inbounds i16, i16* %7583, i64 -11
  %7624 = bitcast i16* %7623 to <16 x i16>*
  %7625 = load <16 x i16>, <16 x i16>* %7624, align 2, !tbaa !396
  %7626 = add <16 x i16> %7592, %7586
  %7627 = add <16 x i16> %7626, %7598
  %7628 = add <16 x i16> %7627, %7604
  %7629 = add <16 x i16> %7628, %7610
  %7630 = add <16 x i16> %7629, %7616
  %7631 = add <16 x i16> %7630, %7622
  %7632 = add <16 x i16> %7595, %7589
  %7633 = add <16 x i16> %7632, %7601
  %7634 = add <16 x i16> %7633, %7607
  %7635 = add <16 x i16> %7634, %7613
  %7636 = add <16 x i16> %7635, %7619
  %7637 = add <16 x i16> %7636, %7625
  %7638 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7631, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7639 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7637, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7640 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7638, <16 x i16> %7631)
  %7641 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7639, <16 x i16> %7637)
  %7642 = shufflevector <16 x i16> %7640, <16 x i16> %7641, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7643 = lshr <32 x i16> %7642, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7644 = shufflevector <32 x i16> %7643, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7645 = zext i32 %.pre-phi3605 to i64
  %7646 = mul nsw i64 %97, %7645
  %7647 = add nsw i64 %99, %7646
  %7648 = getelementptr inbounds i16, i16* %blur_x, i64 %7647
  %7649 = getelementptr inbounds i16, i16* %7648, i64 -32
  %7650 = bitcast i16* %7649 to <16 x i16>*
  store <16 x i16> %7644, <16 x i16>* %7650, align 2, !tbaa !399
  %7651 = shufflevector <32 x i16> %7643, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7652 = getelementptr inbounds i16, i16* %7648, i64 -16
  %7653 = bitcast i16* %7652 to <16 x i16>*
  store <16 x i16> %7651, <16 x i16>* %7653, align 2, !tbaa !399
  %7654 = zext i32 %.pre-phi3583 to i64
  %7655 = mul nsw i64 %7654, %116
  %7656 = add nsw i64 %7655, %94
  %7657 = getelementptr inbounds i16, i16* %blur_x, i64 %7656
  %7658 = getelementptr inbounds i16, i16* %7657, i64 -32
  %7659 = bitcast i16* %7658 to <16 x i16>*
  %7660 = load <16 x i16>, <16 x i16>* %7659, align 2, !tbaa !399
  %7661 = getelementptr inbounds i16, i16* %7657, i64 -16
  %7662 = bitcast i16* %7661 to <16 x i16>*
  %7663 = load <16 x i16>, <16 x i16>* %7662, align 2, !tbaa !399
  %7664 = zext i32 %.pre-phi3579 to i64
  %7665 = mul nsw i64 %7664, %116
  %7666 = add nsw i64 %7665, %94
  %7667 = getelementptr inbounds i16, i16* %blur_x, i64 %7666
  %7668 = getelementptr inbounds i16, i16* %7667, i64 -32
  %7669 = bitcast i16* %7668 to <16 x i16>*
  %7670 = load <16 x i16>, <16 x i16>* %7669, align 2, !tbaa !399
  %7671 = getelementptr inbounds i16, i16* %7667, i64 -16
  %7672 = bitcast i16* %7671 to <16 x i16>*
  %7673 = load <16 x i16>, <16 x i16>* %7672, align 2, !tbaa !399
  %7674 = zext i32 %.pre-phi3587 to i64
  %7675 = mul nsw i64 %7674, %116
  %7676 = add nsw i64 %7675, %94
  %7677 = getelementptr inbounds i16, i16* %blur_x, i64 %7676
  %7678 = getelementptr inbounds i16, i16* %7677, i64 -32
  %7679 = bitcast i16* %7678 to <16 x i16>*
  %7680 = load <16 x i16>, <16 x i16>* %7679, align 2, !tbaa !399
  %7681 = getelementptr inbounds i16, i16* %7677, i64 -16
  %7682 = bitcast i16* %7681 to <16 x i16>*
  %7683 = load <16 x i16>, <16 x i16>* %7682, align 2, !tbaa !399
  %7684 = zext i32 %.pre-phi3591 to i64
  %7685 = mul nsw i64 %7684, %116
  %7686 = add nsw i64 %7685, %94
  %7687 = getelementptr inbounds i16, i16* %blur_x, i64 %7686
  %7688 = getelementptr inbounds i16, i16* %7687, i64 -32
  %7689 = bitcast i16* %7688 to <16 x i16>*
  %7690 = load <16 x i16>, <16 x i16>* %7689, align 2, !tbaa !399
  %7691 = getelementptr inbounds i16, i16* %7687, i64 -16
  %7692 = bitcast i16* %7691 to <16 x i16>*
  %7693 = load <16 x i16>, <16 x i16>* %7692, align 2, !tbaa !399
  %7694 = zext i32 %.pre-phi3595 to i64
  %7695 = mul nsw i64 %7694, %116
  %7696 = add nsw i64 %7695, %94
  %7697 = getelementptr inbounds i16, i16* %blur_x, i64 %7696
  %7698 = getelementptr inbounds i16, i16* %7697, i64 -32
  %7699 = bitcast i16* %7698 to <16 x i16>*
  %7700 = load <16 x i16>, <16 x i16>* %7699, align 2, !tbaa !399
  %7701 = getelementptr inbounds i16, i16* %7697, i64 -16
  %7702 = bitcast i16* %7701 to <16 x i16>*
  %7703 = load <16 x i16>, <16 x i16>* %7702, align 2, !tbaa !399
  %7704 = mul nsw i64 %7645, %116
  %7705 = add nsw i64 %7704, %94
  %7706 = getelementptr inbounds i16, i16* %blur_x, i64 %7705
  %7707 = getelementptr inbounds i16, i16* %7706, i64 -32
  %7708 = bitcast i16* %7707 to <16 x i16>*
  %7709 = load <16 x i16>, <16 x i16>* %7708, align 2, !tbaa !399
  %7710 = getelementptr inbounds i16, i16* %7706, i64 -16
  %7711 = bitcast i16* %7710 to <16 x i16>*
  %7712 = load <16 x i16>, <16 x i16>* %7711, align 2, !tbaa !399
  %7713 = zext i32 %.pre-phi3599 to i64
  %7714 = mul nsw i64 %7713, %116
  %7715 = add nsw i64 %7714, %94
  %7716 = getelementptr inbounds i16, i16* %blur_x, i64 %7715
  %7717 = getelementptr inbounds i16, i16* %7716, i64 -32
  %7718 = bitcast i16* %7717 to <16 x i16>*
  %7719 = load <16 x i16>, <16 x i16>* %7718, align 2, !tbaa !399
  %7720 = getelementptr inbounds i16, i16* %7716, i64 -16
  %7721 = bitcast i16* %7720 to <16 x i16>*
  %7722 = load <16 x i16>, <16 x i16>* %7721, align 2, !tbaa !399
  %7723 = add <16 x i16> %7670, %7660
  %7724 = add <16 x i16> %7723, %7680
  %7725 = add <16 x i16> %7724, %7690
  %7726 = add <16 x i16> %7725, %7700
  %7727 = add <16 x i16> %7726, %7709
  %7728 = add <16 x i16> %7727, %7719
  %7729 = add <16 x i16> %7673, %7663
  %7730 = add <16 x i16> %7729, %7683
  %7731 = add <16 x i16> %7730, %7693
  %7732 = add <16 x i16> %7731, %7703
  %7733 = add <16 x i16> %7732, %7712
  %7734 = add <16 x i16> %7733, %7722
  %7735 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7728, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7736 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7734, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7737 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7735, <16 x i16> %7728)
  %7738 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7736, <16 x i16> %7734)
  %7739 = shufflevector <16 x i16> %7737, <16 x i16> %7738, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7740 = lshr <32 x i16> %7739, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7741 = shufflevector <32 x i16> %7740, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7742 = sext i32 %a26 to i64
  %7743 = add nsw i64 %7742, 9
  %7744 = mul nsw i64 %7743, %117
  %7745 = add nsw i64 %119, %7744
  %7746 = getelementptr inbounds i16, i16* %66, i64 %7745
  %7747 = getelementptr inbounds i16, i16* %7746, i64 -32
  %7748 = bitcast i16* %7747 to <16 x i16>*
  store <16 x i16> %7741, <16 x i16>* %7748, align 2, !tbaa !401
  %7749 = shufflevector <32 x i16> %7740, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7750 = getelementptr inbounds i16, i16* %7746, i64 -16
  %7751 = bitcast i16* %7750 to <16 x i16>*
  store <16 x i16> %7749, <16 x i16>* %7751, align 2, !tbaa !401
  br label %after_bb327

"for blur_y.s0.x.x.rebased332":                   ; preds = %"for blur_y.s0.x.x.rebased332.preheader", %"consume blur_x339"
  %indvars.iv3416 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased332.preheader" ], [ %indvars.iv.next3417, %"consume blur_x339" ]
  %7752 = add nsw i64 %indvars.iv3416, %101
  %7753 = icmp slt i64 %7752, 1
  %7754 = trunc i64 %7752 to i32
  %7755 = shl nsw i32 %7754, 5
  %7756 = icmp sgt i32 %4, %7755
  %7757 = or i1 %7753, %7756
  br i1 %7757, label %"produce blur_x338", label %"for blur_y.s0.x.x.rebased332.consume blur_x339_crit_edge"

"for blur_y.s0.x.x.rebased332.consume blur_x339_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased332"
  %.pre3622 = shl nsw i64 %7752, 5
  br label %"consume blur_x339"

"end for blur_y.s0.x.x.rebased333":               ; preds = %"consume blur_x339", %after_bb327
  br i1 %102, label %"for blur_y.s0.x.x.rebased340.preheader", label %"end for blur_y.s0.x.x.rebased341", !prof !386

"for blur_y.s0.x.x.rebased340.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased333"
  %7758 = sext i32 %t1778 to i64
  %7759 = zext i32 %.pre-phi3583 to i64
  %7760 = mul nsw i64 %7759, %116
  %7761 = sub nsw i64 %7760, %96
  %7762 = zext i32 %.pre-phi3579 to i64
  %7763 = mul nsw i64 %7762, %116
  %7764 = sub nsw i64 %7763, %96
  %7765 = zext i32 %.pre-phi3587 to i64
  %7766 = mul nsw i64 %7765, %116
  %7767 = sub nsw i64 %7766, %96
  %7768 = zext i32 %.pre-phi3591 to i64
  %7769 = mul nsw i64 %7768, %116
  %7770 = sub nsw i64 %7769, %96
  %7771 = zext i32 %.pre-phi3595 to i64
  %7772 = mul nsw i64 %7771, %116
  %7773 = sub nsw i64 %7772, %96
  %7774 = zext i32 %.pre-phi3605 to i64
  %7775 = mul nsw i64 %7774, %116
  %7776 = sub nsw i64 %7775, %96
  %7777 = zext i32 %.pre-phi3599 to i64
  %7778 = mul nsw i64 %7777, %116
  %7779 = sub nsw i64 %7778, %96
  %7780 = sext i32 %a26 to i64
  %7781 = add nsw i64 %7780, 9
  %7782 = mul nsw i64 %7781, %117
  %7783 = add nsw i64 %7782, %120
  br label %"for blur_y.s0.x.x.rebased340"

"produce blur_x338":                              ; preds = %"for blur_y.s0.x.x.rebased332"
  %t896 = add nsw i32 %7755, %t1905
  %7784 = sext i32 %t896 to i64
  %7785 = getelementptr inbounds i16, i16* %read_input, i64 %7784
  %7786 = getelementptr inbounds i16, i16* %7785, i64 1
  %7787 = bitcast i16* %7786 to <16 x i16>*
  %7788 = load <16 x i16>, <16 x i16>* %7787, align 2, !tbaa !396
  %7789 = getelementptr inbounds i16, i16* %7785, i64 17
  %7790 = bitcast i16* %7789 to <16 x i16>*
  %7791 = load <16 x i16>, <16 x i16>* %7790, align 2, !tbaa !396
  %7792 = bitcast i16* %7785 to <16 x i16>*
  %7793 = load <16 x i16>, <16 x i16>* %7792, align 2, !tbaa !396
  %7794 = getelementptr inbounds i16, i16* %7785, i64 16
  %7795 = bitcast i16* %7794 to <16 x i16>*
  %7796 = load <16 x i16>, <16 x i16>* %7795, align 2, !tbaa !396
  %7797 = getelementptr inbounds i16, i16* %7785, i64 2
  %7798 = bitcast i16* %7797 to <16 x i16>*
  %7799 = load <16 x i16>, <16 x i16>* %7798, align 2, !tbaa !396
  %7800 = getelementptr inbounds i16, i16* %7785, i64 18
  %7801 = bitcast i16* %7800 to <16 x i16>*
  %7802 = load <16 x i16>, <16 x i16>* %7801, align 2, !tbaa !396
  %7803 = getelementptr inbounds i16, i16* %7785, i64 3
  %7804 = bitcast i16* %7803 to <16 x i16>*
  %7805 = load <16 x i16>, <16 x i16>* %7804, align 2, !tbaa !396
  %7806 = getelementptr inbounds i16, i16* %7785, i64 19
  %7807 = bitcast i16* %7806 to <16 x i16>*
  %7808 = load <16 x i16>, <16 x i16>* %7807, align 2, !tbaa !396
  %7809 = getelementptr inbounds i16, i16* %7785, i64 4
  %7810 = bitcast i16* %7809 to <16 x i16>*
  %7811 = load <16 x i16>, <16 x i16>* %7810, align 2, !tbaa !396
  %7812 = getelementptr inbounds i16, i16* %7785, i64 20
  %7813 = bitcast i16* %7812 to <16 x i16>*
  %7814 = load <16 x i16>, <16 x i16>* %7813, align 2, !tbaa !396
  %7815 = getelementptr inbounds i16, i16* %7785, i64 6
  %7816 = bitcast i16* %7815 to <16 x i16>*
  %7817 = load <16 x i16>, <16 x i16>* %7816, align 2, !tbaa !396
  %7818 = getelementptr inbounds i16, i16* %7785, i64 22
  %7819 = bitcast i16* %7818 to <16 x i16>*
  %7820 = load <16 x i16>, <16 x i16>* %7819, align 2, !tbaa !396
  %7821 = getelementptr inbounds i16, i16* %7785, i64 5
  %7822 = bitcast i16* %7821 to <16 x i16>*
  %7823 = load <16 x i16>, <16 x i16>* %7822, align 2, !tbaa !396
  %7824 = getelementptr inbounds i16, i16* %7785, i64 21
  %7825 = bitcast i16* %7824 to <16 x i16>*
  %7826 = load <16 x i16>, <16 x i16>* %7825, align 2, !tbaa !396
  %7827 = add <16 x i16> %7793, %7788
  %7828 = add <16 x i16> %7827, %7799
  %7829 = add <16 x i16> %7828, %7805
  %7830 = add <16 x i16> %7829, %7811
  %7831 = add <16 x i16> %7830, %7817
  %7832 = add <16 x i16> %7831, %7823
  %7833 = add <16 x i16> %7796, %7791
  %7834 = add <16 x i16> %7833, %7802
  %7835 = add <16 x i16> %7834, %7808
  %7836 = add <16 x i16> %7835, %7814
  %7837 = add <16 x i16> %7836, %7820
  %7838 = add <16 x i16> %7837, %7826
  %7839 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7832, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7840 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7838, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7841 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7839, <16 x i16> %7832)
  %7842 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7840, <16 x i16> %7838)
  %7843 = shufflevector <16 x i16> %7841, <16 x i16> %7842, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7844 = lshr <32 x i16> %7843, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7845 = shufflevector <32 x i16> %7844, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7846 = shl nsw i64 %7752, 5
  %7847 = add nsw i64 %7846, %7557
  %7848 = getelementptr inbounds i16, i16* %blur_x, i64 %7847
  %7849 = bitcast i16* %7848 to <16 x i16>*
  store <16 x i16> %7845, <16 x i16>* %7849, align 2, !tbaa !399
  %7850 = shufflevector <32 x i16> %7844, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7851 = getelementptr inbounds i16, i16* %7848, i64 16
  %7852 = bitcast i16* %7851 to <16 x i16>*
  store <16 x i16> %7850, <16 x i16>* %7852, align 2, !tbaa !399
  br label %"consume blur_x339"

"consume blur_x339":                              ; preds = %"for blur_y.s0.x.x.rebased332.consume blur_x339_crit_edge", %"produce blur_x338"
  %.pre-phi3623 = phi i64 [ %.pre3622, %"for blur_y.s0.x.x.rebased332.consume blur_x339_crit_edge" ], [ %7846, %"produce blur_x338" ]
  %7853 = add nsw i64 %7560, %.pre-phi3623
  %7854 = getelementptr inbounds i16, i16* %blur_x, i64 %7853
  %7855 = bitcast i16* %7854 to <16 x i16>*
  %7856 = load <16 x i16>, <16 x i16>* %7855, align 2, !tbaa !399
  %7857 = getelementptr inbounds i16, i16* %7854, i64 16
  %7858 = bitcast i16* %7857 to <16 x i16>*
  %7859 = load <16 x i16>, <16 x i16>* %7858, align 2, !tbaa !399
  %7860 = add nsw i64 %7563, %.pre-phi3623
  %7861 = getelementptr inbounds i16, i16* %blur_x, i64 %7860
  %7862 = bitcast i16* %7861 to <16 x i16>*
  %7863 = load <16 x i16>, <16 x i16>* %7862, align 2, !tbaa !399
  %7864 = getelementptr inbounds i16, i16* %7861, i64 16
  %7865 = bitcast i16* %7864 to <16 x i16>*
  %7866 = load <16 x i16>, <16 x i16>* %7865, align 2, !tbaa !399
  %7867 = add nsw i64 %7566, %.pre-phi3623
  %7868 = getelementptr inbounds i16, i16* %blur_x, i64 %7867
  %7869 = bitcast i16* %7868 to <16 x i16>*
  %7870 = load <16 x i16>, <16 x i16>* %7869, align 2, !tbaa !399
  %7871 = getelementptr inbounds i16, i16* %7868, i64 16
  %7872 = bitcast i16* %7871 to <16 x i16>*
  %7873 = load <16 x i16>, <16 x i16>* %7872, align 2, !tbaa !399
  %7874 = add nsw i64 %7569, %.pre-phi3623
  %7875 = getelementptr inbounds i16, i16* %blur_x, i64 %7874
  %7876 = bitcast i16* %7875 to <16 x i16>*
  %7877 = load <16 x i16>, <16 x i16>* %7876, align 2, !tbaa !399
  %7878 = getelementptr inbounds i16, i16* %7875, i64 16
  %7879 = bitcast i16* %7878 to <16 x i16>*
  %7880 = load <16 x i16>, <16 x i16>* %7879, align 2, !tbaa !399
  %7881 = add nsw i64 %7572, %.pre-phi3623
  %7882 = getelementptr inbounds i16, i16* %blur_x, i64 %7881
  %7883 = bitcast i16* %7882 to <16 x i16>*
  %7884 = load <16 x i16>, <16 x i16>* %7883, align 2, !tbaa !399
  %7885 = getelementptr inbounds i16, i16* %7882, i64 16
  %7886 = bitcast i16* %7885 to <16 x i16>*
  %7887 = load <16 x i16>, <16 x i16>* %7886, align 2, !tbaa !399
  %7888 = add nsw i64 %7575, %.pre-phi3623
  %7889 = getelementptr inbounds i16, i16* %blur_x, i64 %7888
  %7890 = bitcast i16* %7889 to <16 x i16>*
  %7891 = load <16 x i16>, <16 x i16>* %7890, align 2, !tbaa !399
  %7892 = getelementptr inbounds i16, i16* %7889, i64 16
  %7893 = bitcast i16* %7892 to <16 x i16>*
  %7894 = load <16 x i16>, <16 x i16>* %7893, align 2, !tbaa !399
  %7895 = add nsw i64 %7578, %.pre-phi3623
  %7896 = getelementptr inbounds i16, i16* %blur_x, i64 %7895
  %7897 = bitcast i16* %7896 to <16 x i16>*
  %7898 = load <16 x i16>, <16 x i16>* %7897, align 2, !tbaa !399
  %7899 = getelementptr inbounds i16, i16* %7896, i64 16
  %7900 = bitcast i16* %7899 to <16 x i16>*
  %7901 = load <16 x i16>, <16 x i16>* %7900, align 2, !tbaa !399
  %7902 = add <16 x i16> %7863, %7856
  %7903 = add <16 x i16> %7902, %7870
  %7904 = add <16 x i16> %7903, %7877
  %7905 = add <16 x i16> %7904, %7884
  %7906 = add <16 x i16> %7905, %7891
  %7907 = add <16 x i16> %7906, %7898
  %7908 = add <16 x i16> %7866, %7859
  %7909 = add <16 x i16> %7908, %7873
  %7910 = add <16 x i16> %7909, %7880
  %7911 = add <16 x i16> %7910, %7887
  %7912 = add <16 x i16> %7911, %7894
  %7913 = add <16 x i16> %7912, %7901
  %7914 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7907, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7915 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7913, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7916 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7914, <16 x i16> %7907)
  %7917 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7915, <16 x i16> %7913)
  %7918 = shufflevector <16 x i16> %7916, <16 x i16> %7917, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7919 = lshr <32 x i16> %7918, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7920 = shufflevector <32 x i16> %7919, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7921 = add nsw i64 %7582, %.pre-phi3623
  %7922 = getelementptr inbounds i16, i16* %66, i64 %7921
  %7923 = bitcast i16* %7922 to <16 x i16>*
  store <16 x i16> %7920, <16 x i16>* %7923, align 2, !tbaa !401
  %7924 = shufflevector <32 x i16> %7919, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7925 = getelementptr inbounds i16, i16* %7922, i64 16
  %7926 = bitcast i16* %7925 to <16 x i16>*
  store <16 x i16> %7924, <16 x i16>* %7926, align 2, !tbaa !401
  %indvars.iv.next3417 = add nuw nsw i64 %indvars.iv3416, 1
  %.not2853 = icmp eq i64 %indvars.iv.next3417, %188
  br i1 %.not2853, label %"end for blur_y.s0.x.x.rebased333", label %"for blur_y.s0.x.x.rebased332"

"for blur_y.s0.x.x.rebased340":                   ; preds = %"for blur_y.s0.x.x.rebased340.preheader", %"consume blur_x348"
  %blur_y.s0.x.x.rebased342 = phi i32 [ %8077, %"consume blur_x348" ], [ 0, %"for blur_y.s0.x.x.rebased340.preheader" ]
  %7927 = add nsw i32 %blur_y.s0.x.x.rebased342, %t1670
  %a182 = shl nsw i32 %7927, 5
  %7928 = icmp sgt i32 %a14, %a182
  %b188 = select i1 %7928, i32 %a182, i32 %a14
  %7929 = icmp slt i32 %7927, 1
  %7930 = icmp sgt i32 %4, %a182
  %7931 = or i1 %7929, %7930
  br i1 %7931, label %"produce blur_x346", label %"consume blur_x348"

"end for blur_y.s0.x.x.rebased341":               ; preds = %"consume blur_x348", %"end for blur_y.s0.x.x.rebased333"
  br i1 %34, label %"produce blur_x352", label %after_bb349

"produce blur_x346":                              ; preds = %"for blur_y.s0.x.x.rebased340"
  %7932 = icmp slt i32 %b188, %4
  %blur_x.s0.x.v1.base.s347 = select i1 %7932, i32 %b188, i32 %4
  %t901 = add nsw i32 %blur_x.s0.x.v1.base.s347, %t1905
  %7933 = sext i32 %t901 to i64
  %7934 = getelementptr inbounds i16, i16* %read_input, i64 %7933
  %7935 = getelementptr inbounds i16, i16* %7934, i64 1
  %7936 = bitcast i16* %7935 to <16 x i16>*
  %7937 = load <16 x i16>, <16 x i16>* %7936, align 2, !tbaa !396
  %7938 = getelementptr inbounds i16, i16* %7934, i64 17
  %7939 = bitcast i16* %7938 to <16 x i16>*
  %7940 = load <16 x i16>, <16 x i16>* %7939, align 2, !tbaa !396
  %7941 = bitcast i16* %7934 to <16 x i16>*
  %7942 = load <16 x i16>, <16 x i16>* %7941, align 2, !tbaa !396
  %7943 = getelementptr inbounds i16, i16* %7934, i64 16
  %7944 = bitcast i16* %7943 to <16 x i16>*
  %7945 = load <16 x i16>, <16 x i16>* %7944, align 2, !tbaa !396
  %7946 = getelementptr inbounds i16, i16* %7934, i64 2
  %7947 = bitcast i16* %7946 to <16 x i16>*
  %7948 = load <16 x i16>, <16 x i16>* %7947, align 2, !tbaa !396
  %7949 = getelementptr inbounds i16, i16* %7934, i64 18
  %7950 = bitcast i16* %7949 to <16 x i16>*
  %7951 = load <16 x i16>, <16 x i16>* %7950, align 2, !tbaa !396
  %7952 = getelementptr inbounds i16, i16* %7934, i64 3
  %7953 = bitcast i16* %7952 to <16 x i16>*
  %7954 = load <16 x i16>, <16 x i16>* %7953, align 2, !tbaa !396
  %7955 = getelementptr inbounds i16, i16* %7934, i64 19
  %7956 = bitcast i16* %7955 to <16 x i16>*
  %7957 = load <16 x i16>, <16 x i16>* %7956, align 2, !tbaa !396
  %7958 = getelementptr inbounds i16, i16* %7934, i64 4
  %7959 = bitcast i16* %7958 to <16 x i16>*
  %7960 = load <16 x i16>, <16 x i16>* %7959, align 2, !tbaa !396
  %7961 = getelementptr inbounds i16, i16* %7934, i64 20
  %7962 = bitcast i16* %7961 to <16 x i16>*
  %7963 = load <16 x i16>, <16 x i16>* %7962, align 2, !tbaa !396
  %7964 = getelementptr inbounds i16, i16* %7934, i64 6
  %7965 = bitcast i16* %7964 to <16 x i16>*
  %7966 = load <16 x i16>, <16 x i16>* %7965, align 2, !tbaa !396
  %7967 = getelementptr inbounds i16, i16* %7934, i64 22
  %7968 = bitcast i16* %7967 to <16 x i16>*
  %7969 = load <16 x i16>, <16 x i16>* %7968, align 2, !tbaa !396
  %7970 = getelementptr inbounds i16, i16* %7934, i64 5
  %7971 = bitcast i16* %7970 to <16 x i16>*
  %7972 = load <16 x i16>, <16 x i16>* %7971, align 2, !tbaa !396
  %7973 = getelementptr inbounds i16, i16* %7934, i64 21
  %7974 = bitcast i16* %7973 to <16 x i16>*
  %7975 = load <16 x i16>, <16 x i16>* %7974, align 2, !tbaa !396
  %7976 = add <16 x i16> %7942, %7937
  %7977 = add <16 x i16> %7976, %7948
  %7978 = add <16 x i16> %7977, %7954
  %7979 = add <16 x i16> %7978, %7960
  %7980 = add <16 x i16> %7979, %7966
  %7981 = add <16 x i16> %7980, %7972
  %7982 = add <16 x i16> %7945, %7940
  %7983 = add <16 x i16> %7982, %7951
  %7984 = add <16 x i16> %7983, %7957
  %7985 = add <16 x i16> %7984, %7963
  %7986 = add <16 x i16> %7985, %7969
  %7987 = add <16 x i16> %7986, %7975
  %7988 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7981, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7989 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7987, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7990 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7988, <16 x i16> %7981)
  %7991 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7989, <16 x i16> %7987)
  %7992 = shufflevector <16 x i16> %7990, <16 x i16> %7991, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7993 = lshr <32 x i16> %7992, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7994 = shufflevector <32 x i16> %7993, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7995 = sext i32 %blur_x.s0.x.v1.base.s347 to i64
  %7996 = add nsw i64 %7995, %7758
  %7997 = getelementptr inbounds i16, i16* %blur_x, i64 %7996
  %7998 = bitcast i16* %7997 to <16 x i16>*
  store <16 x i16> %7994, <16 x i16>* %7998, align 2, !tbaa !399
  %7999 = shufflevector <32 x i16> %7993, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8000 = getelementptr inbounds i16, i16* %7997, i64 16
  %8001 = bitcast i16* %8000 to <16 x i16>*
  store <16 x i16> %7999, <16 x i16>* %8001, align 2, !tbaa !399
  br label %"consume blur_x348"

"consume blur_x348":                              ; preds = %"for blur_y.s0.x.x.rebased340", %"produce blur_x346"
  %8002 = sext i32 %b188 to i64
  %8003 = add nsw i64 %7761, %8002
  %8004 = getelementptr inbounds i16, i16* %blur_x, i64 %8003
  %8005 = bitcast i16* %8004 to <16 x i16>*
  %8006 = load <16 x i16>, <16 x i16>* %8005, align 2, !tbaa !399
  %8007 = getelementptr inbounds i16, i16* %8004, i64 16
  %8008 = bitcast i16* %8007 to <16 x i16>*
  %8009 = load <16 x i16>, <16 x i16>* %8008, align 2, !tbaa !399
  %8010 = add nsw i64 %7764, %8002
  %8011 = getelementptr inbounds i16, i16* %blur_x, i64 %8010
  %8012 = bitcast i16* %8011 to <16 x i16>*
  %8013 = load <16 x i16>, <16 x i16>* %8012, align 2, !tbaa !399
  %8014 = getelementptr inbounds i16, i16* %8011, i64 16
  %8015 = bitcast i16* %8014 to <16 x i16>*
  %8016 = load <16 x i16>, <16 x i16>* %8015, align 2, !tbaa !399
  %8017 = add nsw i64 %7767, %8002
  %8018 = getelementptr inbounds i16, i16* %blur_x, i64 %8017
  %8019 = bitcast i16* %8018 to <16 x i16>*
  %8020 = load <16 x i16>, <16 x i16>* %8019, align 2, !tbaa !399
  %8021 = getelementptr inbounds i16, i16* %8018, i64 16
  %8022 = bitcast i16* %8021 to <16 x i16>*
  %8023 = load <16 x i16>, <16 x i16>* %8022, align 2, !tbaa !399
  %8024 = add nsw i64 %7770, %8002
  %8025 = getelementptr inbounds i16, i16* %blur_x, i64 %8024
  %8026 = bitcast i16* %8025 to <16 x i16>*
  %8027 = load <16 x i16>, <16 x i16>* %8026, align 2, !tbaa !399
  %8028 = getelementptr inbounds i16, i16* %8025, i64 16
  %8029 = bitcast i16* %8028 to <16 x i16>*
  %8030 = load <16 x i16>, <16 x i16>* %8029, align 2, !tbaa !399
  %8031 = add nsw i64 %7773, %8002
  %8032 = getelementptr inbounds i16, i16* %blur_x, i64 %8031
  %8033 = bitcast i16* %8032 to <16 x i16>*
  %8034 = load <16 x i16>, <16 x i16>* %8033, align 2, !tbaa !399
  %8035 = getelementptr inbounds i16, i16* %8032, i64 16
  %8036 = bitcast i16* %8035 to <16 x i16>*
  %8037 = load <16 x i16>, <16 x i16>* %8036, align 2, !tbaa !399
  %8038 = add nsw i64 %7776, %8002
  %8039 = getelementptr inbounds i16, i16* %blur_x, i64 %8038
  %8040 = bitcast i16* %8039 to <16 x i16>*
  %8041 = load <16 x i16>, <16 x i16>* %8040, align 2, !tbaa !399
  %8042 = getelementptr inbounds i16, i16* %8039, i64 16
  %8043 = bitcast i16* %8042 to <16 x i16>*
  %8044 = load <16 x i16>, <16 x i16>* %8043, align 2, !tbaa !399
  %8045 = add nsw i64 %7779, %8002
  %8046 = getelementptr inbounds i16, i16* %blur_x, i64 %8045
  %8047 = bitcast i16* %8046 to <16 x i16>*
  %8048 = load <16 x i16>, <16 x i16>* %8047, align 2, !tbaa !399
  %8049 = getelementptr inbounds i16, i16* %8046, i64 16
  %8050 = bitcast i16* %8049 to <16 x i16>*
  %8051 = load <16 x i16>, <16 x i16>* %8050, align 2, !tbaa !399
  %8052 = add <16 x i16> %8013, %8006
  %8053 = add <16 x i16> %8052, %8020
  %8054 = add <16 x i16> %8053, %8027
  %8055 = add <16 x i16> %8054, %8034
  %8056 = add <16 x i16> %8055, %8041
  %8057 = add <16 x i16> %8056, %8048
  %8058 = add <16 x i16> %8016, %8009
  %8059 = add <16 x i16> %8058, %8023
  %8060 = add <16 x i16> %8059, %8030
  %8061 = add <16 x i16> %8060, %8037
  %8062 = add <16 x i16> %8061, %8044
  %8063 = add <16 x i16> %8062, %8051
  %8064 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8057, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8065 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8063, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8066 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8064, <16 x i16> %8057)
  %8067 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8065, <16 x i16> %8063)
  %8068 = shufflevector <16 x i16> %8066, <16 x i16> %8067, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8069 = lshr <32 x i16> %8068, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8070 = shufflevector <32 x i16> %8069, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8071 = add nsw i64 %7783, %8002
  %8072 = getelementptr inbounds i16, i16* %66, i64 %8071
  %8073 = bitcast i16* %8072 to <16 x i16>*
  store <16 x i16> %8070, <16 x i16>* %8073, align 2, !tbaa !401
  %8074 = shufflevector <32 x i16> %8069, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8075 = getelementptr inbounds i16, i16* %8072, i64 16
  %8076 = bitcast i16* %8075 to <16 x i16>*
  store <16 x i16> %8074, <16 x i16>* %8076, align 2, !tbaa !401
  %8077 = add nuw nsw i32 %blur_y.s0.x.x.rebased342, 1
  %.not2852 = icmp eq i32 %8077, %t1727
  br i1 %.not2852, label %"end for blur_y.s0.x.x.rebased341", label %"for blur_y.s0.x.x.rebased340"

after_bb349:                                      ; preds = %"end for blur_y.s0.x.x.rebased341", %"produce blur_x352"
  br i1 %100, label %"for blur_y.s0.x.x.rebased354.preheader", label %"end for blur_y.s0.x.x.rebased355", !prof !386

"for blur_y.s0.x.x.rebased354.preheader":         ; preds = %after_bb349
  %8078 = sext i32 %t1726 to i64
  %8079 = zext i32 %.pre-phi3587 to i64
  %8080 = mul nsw i64 %8079, %116
  %8081 = sub nsw i64 %8080, %96
  %8082 = zext i32 %.pre-phi3583 to i64
  %8083 = mul nsw i64 %8082, %116
  %8084 = sub nsw i64 %8083, %96
  %8085 = zext i32 %.pre-phi3591 to i64
  %8086 = mul nsw i64 %8085, %116
  %8087 = sub nsw i64 %8086, %96
  %8088 = zext i32 %.pre-phi3595 to i64
  %8089 = mul nsw i64 %8088, %116
  %8090 = sub nsw i64 %8089, %96
  %8091 = zext i32 %.pre-phi3599 to i64
  %8092 = mul nsw i64 %8091, %116
  %8093 = sub nsw i64 %8092, %96
  %8094 = zext i32 %.pre-phi to i64
  %8095 = mul nsw i64 %8094, %116
  %8096 = sub nsw i64 %8095, %96
  %8097 = zext i32 %.pre-phi3605 to i64
  %8098 = mul nsw i64 %8097, %116
  %8099 = sub nsw i64 %8098, %96
  %8100 = sext i32 %a26 to i64
  %8101 = add nsw i64 %8100, 10
  %8102 = mul nsw i64 %8101, %117
  %8103 = add nsw i64 %8102, %120
  br label %"for blur_y.s0.x.x.rebased354"

"produce blur_x352":                              ; preds = %"end for blur_y.s0.x.x.rebased341"
  %8104 = getelementptr inbounds i16, i16* %read_input, i64 %139
  %8105 = getelementptr inbounds i16, i16* %8104, i64 -31
  %8106 = bitcast i16* %8105 to <16 x i16>*
  %8107 = load <16 x i16>, <16 x i16>* %8106, align 2, !tbaa !396
  %8108 = getelementptr inbounds i16, i16* %8104, i64 -15
  %8109 = bitcast i16* %8108 to <16 x i16>*
  %8110 = load <16 x i16>, <16 x i16>* %8109, align 2, !tbaa !396
  %8111 = getelementptr inbounds i16, i16* %8104, i64 -32
  %8112 = bitcast i16* %8111 to <16 x i16>*
  %8113 = load <16 x i16>, <16 x i16>* %8112, align 2, !tbaa !396
  %8114 = getelementptr inbounds i16, i16* %8104, i64 -16
  %8115 = bitcast i16* %8114 to <16 x i16>*
  %8116 = load <16 x i16>, <16 x i16>* %8115, align 2, !tbaa !396
  %8117 = getelementptr inbounds i16, i16* %8104, i64 -30
  %8118 = bitcast i16* %8117 to <16 x i16>*
  %8119 = load <16 x i16>, <16 x i16>* %8118, align 2, !tbaa !396
  %8120 = getelementptr inbounds i16, i16* %8104, i64 -14
  %8121 = bitcast i16* %8120 to <16 x i16>*
  %8122 = load <16 x i16>, <16 x i16>* %8121, align 2, !tbaa !396
  %8123 = getelementptr inbounds i16, i16* %8104, i64 -29
  %8124 = bitcast i16* %8123 to <16 x i16>*
  %8125 = load <16 x i16>, <16 x i16>* %8124, align 2, !tbaa !396
  %8126 = getelementptr inbounds i16, i16* %8104, i64 -13
  %8127 = bitcast i16* %8126 to <16 x i16>*
  %8128 = load <16 x i16>, <16 x i16>* %8127, align 2, !tbaa !396
  %8129 = getelementptr inbounds i16, i16* %8104, i64 -28
  %8130 = bitcast i16* %8129 to <16 x i16>*
  %8131 = load <16 x i16>, <16 x i16>* %8130, align 2, !tbaa !396
  %8132 = getelementptr inbounds i16, i16* %8104, i64 -12
  %8133 = bitcast i16* %8132 to <16 x i16>*
  %8134 = load <16 x i16>, <16 x i16>* %8133, align 2, !tbaa !396
  %8135 = getelementptr inbounds i16, i16* %8104, i64 -26
  %8136 = bitcast i16* %8135 to <16 x i16>*
  %8137 = load <16 x i16>, <16 x i16>* %8136, align 2, !tbaa !396
  %8138 = getelementptr inbounds i16, i16* %8104, i64 -10
  %8139 = bitcast i16* %8138 to <16 x i16>*
  %8140 = load <16 x i16>, <16 x i16>* %8139, align 2, !tbaa !396
  %8141 = getelementptr inbounds i16, i16* %8104, i64 -27
  %8142 = bitcast i16* %8141 to <16 x i16>*
  %8143 = load <16 x i16>, <16 x i16>* %8142, align 2, !tbaa !396
  %8144 = getelementptr inbounds i16, i16* %8104, i64 -11
  %8145 = bitcast i16* %8144 to <16 x i16>*
  %8146 = load <16 x i16>, <16 x i16>* %8145, align 2, !tbaa !396
  %8147 = add <16 x i16> %8113, %8107
  %8148 = add <16 x i16> %8147, %8119
  %8149 = add <16 x i16> %8148, %8125
  %8150 = add <16 x i16> %8149, %8131
  %8151 = add <16 x i16> %8150, %8137
  %8152 = add <16 x i16> %8151, %8143
  %8153 = add <16 x i16> %8116, %8110
  %8154 = add <16 x i16> %8153, %8122
  %8155 = add <16 x i16> %8154, %8128
  %8156 = add <16 x i16> %8155, %8134
  %8157 = add <16 x i16> %8156, %8140
  %8158 = add <16 x i16> %8157, %8146
  %8159 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8152, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8160 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8158, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8161 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8159, <16 x i16> %8152)
  %8162 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8160, <16 x i16> %8158)
  %8163 = shufflevector <16 x i16> %8161, <16 x i16> %8162, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8164 = lshr <32 x i16> %8163, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8165 = shufflevector <32 x i16> %8164, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8166 = zext i32 %.pre-phi to i64
  %8167 = mul nsw i64 %97, %8166
  %8168 = add nsw i64 %99, %8167
  %8169 = getelementptr inbounds i16, i16* %blur_x, i64 %8168
  %8170 = getelementptr inbounds i16, i16* %8169, i64 -32
  %8171 = bitcast i16* %8170 to <16 x i16>*
  store <16 x i16> %8165, <16 x i16>* %8171, align 2, !tbaa !399
  %8172 = shufflevector <32 x i16> %8164, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8173 = getelementptr inbounds i16, i16* %8169, i64 -16
  %8174 = bitcast i16* %8173 to <16 x i16>*
  store <16 x i16> %8172, <16 x i16>* %8174, align 2, !tbaa !399
  %8175 = zext i32 %.pre-phi3587 to i64
  %8176 = mul nsw i64 %8175, %116
  %8177 = add nsw i64 %8176, %94
  %8178 = getelementptr inbounds i16, i16* %blur_x, i64 %8177
  %8179 = getelementptr inbounds i16, i16* %8178, i64 -32
  %8180 = bitcast i16* %8179 to <16 x i16>*
  %8181 = load <16 x i16>, <16 x i16>* %8180, align 2, !tbaa !399
  %8182 = getelementptr inbounds i16, i16* %8178, i64 -16
  %8183 = bitcast i16* %8182 to <16 x i16>*
  %8184 = load <16 x i16>, <16 x i16>* %8183, align 2, !tbaa !399
  %8185 = zext i32 %.pre-phi3583 to i64
  %8186 = mul nsw i64 %8185, %116
  %8187 = add nsw i64 %8186, %94
  %8188 = getelementptr inbounds i16, i16* %blur_x, i64 %8187
  %8189 = getelementptr inbounds i16, i16* %8188, i64 -32
  %8190 = bitcast i16* %8189 to <16 x i16>*
  %8191 = load <16 x i16>, <16 x i16>* %8190, align 2, !tbaa !399
  %8192 = getelementptr inbounds i16, i16* %8188, i64 -16
  %8193 = bitcast i16* %8192 to <16 x i16>*
  %8194 = load <16 x i16>, <16 x i16>* %8193, align 2, !tbaa !399
  %8195 = zext i32 %.pre-phi3591 to i64
  %8196 = mul nsw i64 %8195, %116
  %8197 = add nsw i64 %8196, %94
  %8198 = getelementptr inbounds i16, i16* %blur_x, i64 %8197
  %8199 = getelementptr inbounds i16, i16* %8198, i64 -32
  %8200 = bitcast i16* %8199 to <16 x i16>*
  %8201 = load <16 x i16>, <16 x i16>* %8200, align 2, !tbaa !399
  %8202 = getelementptr inbounds i16, i16* %8198, i64 -16
  %8203 = bitcast i16* %8202 to <16 x i16>*
  %8204 = load <16 x i16>, <16 x i16>* %8203, align 2, !tbaa !399
  %8205 = zext i32 %.pre-phi3595 to i64
  %8206 = mul nsw i64 %8205, %116
  %8207 = add nsw i64 %8206, %94
  %8208 = getelementptr inbounds i16, i16* %blur_x, i64 %8207
  %8209 = getelementptr inbounds i16, i16* %8208, i64 -32
  %8210 = bitcast i16* %8209 to <16 x i16>*
  %8211 = load <16 x i16>, <16 x i16>* %8210, align 2, !tbaa !399
  %8212 = getelementptr inbounds i16, i16* %8208, i64 -16
  %8213 = bitcast i16* %8212 to <16 x i16>*
  %8214 = load <16 x i16>, <16 x i16>* %8213, align 2, !tbaa !399
  %8215 = zext i32 %.pre-phi3599 to i64
  %8216 = mul nsw i64 %8215, %116
  %8217 = add nsw i64 %8216, %94
  %8218 = getelementptr inbounds i16, i16* %blur_x, i64 %8217
  %8219 = getelementptr inbounds i16, i16* %8218, i64 -32
  %8220 = bitcast i16* %8219 to <16 x i16>*
  %8221 = load <16 x i16>, <16 x i16>* %8220, align 2, !tbaa !399
  %8222 = getelementptr inbounds i16, i16* %8218, i64 -16
  %8223 = bitcast i16* %8222 to <16 x i16>*
  %8224 = load <16 x i16>, <16 x i16>* %8223, align 2, !tbaa !399
  %8225 = mul nsw i64 %8166, %116
  %8226 = add nsw i64 %8225, %94
  %8227 = getelementptr inbounds i16, i16* %blur_x, i64 %8226
  %8228 = getelementptr inbounds i16, i16* %8227, i64 -32
  %8229 = bitcast i16* %8228 to <16 x i16>*
  %8230 = load <16 x i16>, <16 x i16>* %8229, align 2, !tbaa !399
  %8231 = getelementptr inbounds i16, i16* %8227, i64 -16
  %8232 = bitcast i16* %8231 to <16 x i16>*
  %8233 = load <16 x i16>, <16 x i16>* %8232, align 2, !tbaa !399
  %8234 = zext i32 %.pre-phi3605 to i64
  %8235 = mul nsw i64 %8234, %116
  %8236 = add nsw i64 %8235, %94
  %8237 = getelementptr inbounds i16, i16* %blur_x, i64 %8236
  %8238 = getelementptr inbounds i16, i16* %8237, i64 -32
  %8239 = bitcast i16* %8238 to <16 x i16>*
  %8240 = load <16 x i16>, <16 x i16>* %8239, align 2, !tbaa !399
  %8241 = getelementptr inbounds i16, i16* %8237, i64 -16
  %8242 = bitcast i16* %8241 to <16 x i16>*
  %8243 = load <16 x i16>, <16 x i16>* %8242, align 2, !tbaa !399
  %8244 = add <16 x i16> %8191, %8181
  %8245 = add <16 x i16> %8244, %8201
  %8246 = add <16 x i16> %8245, %8211
  %8247 = add <16 x i16> %8246, %8221
  %8248 = add <16 x i16> %8247, %8230
  %8249 = add <16 x i16> %8248, %8240
  %8250 = add <16 x i16> %8194, %8184
  %8251 = add <16 x i16> %8250, %8204
  %8252 = add <16 x i16> %8251, %8214
  %8253 = add <16 x i16> %8252, %8224
  %8254 = add <16 x i16> %8253, %8233
  %8255 = add <16 x i16> %8254, %8243
  %8256 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8249, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8257 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8255, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8258 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8256, <16 x i16> %8249)
  %8259 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8257, <16 x i16> %8255)
  %8260 = shufflevector <16 x i16> %8258, <16 x i16> %8259, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8261 = lshr <32 x i16> %8260, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8262 = shufflevector <32 x i16> %8261, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8263 = sext i32 %a26 to i64
  %8264 = add nsw i64 %8263, 10
  %8265 = mul nsw i64 %8264, %117
  %8266 = add nsw i64 %119, %8265
  %8267 = getelementptr inbounds i16, i16* %66, i64 %8266
  %8268 = getelementptr inbounds i16, i16* %8267, i64 -32
  %8269 = bitcast i16* %8268 to <16 x i16>*
  store <16 x i16> %8262, <16 x i16>* %8269, align 2, !tbaa !401
  %8270 = shufflevector <32 x i16> %8261, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8271 = getelementptr inbounds i16, i16* %8267, i64 -16
  %8272 = bitcast i16* %8271 to <16 x i16>*
  store <16 x i16> %8270, <16 x i16>* %8272, align 2, !tbaa !401
  br label %after_bb349

"for blur_y.s0.x.x.rebased354":                   ; preds = %"for blur_y.s0.x.x.rebased354.preheader", %"consume blur_x361"
  %indvars.iv3419 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased354.preheader" ], [ %indvars.iv.next3420, %"consume blur_x361" ]
  %8273 = add nsw i64 %indvars.iv3419, %101
  %8274 = icmp slt i64 %8273, 1
  %8275 = trunc i64 %8273 to i32
  %8276 = shl nsw i32 %8275, 5
  %8277 = icmp sgt i32 %4, %8276
  %8278 = or i1 %8274, %8277
  br i1 %8278, label %"produce blur_x360", label %"for blur_y.s0.x.x.rebased354.consume blur_x361_crit_edge"

"for blur_y.s0.x.x.rebased354.consume blur_x361_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased354"
  %.pre3624 = shl nsw i64 %8273, 5
  br label %"consume blur_x361"

"end for blur_y.s0.x.x.rebased355":               ; preds = %"consume blur_x361", %after_bb349
  br i1 %102, label %"for blur_y.s0.x.x.rebased362.preheader", label %"end for blur_y.s0.x.x.rebased363", !prof !386

"for blur_y.s0.x.x.rebased362.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased355"
  %8279 = sext i32 %t1726 to i64
  %8280 = zext i32 %.pre-phi3587 to i64
  %8281 = mul nsw i64 %8280, %116
  %8282 = sub nsw i64 %8281, %96
  %8283 = zext i32 %.pre-phi3583 to i64
  %8284 = mul nsw i64 %8283, %116
  %8285 = sub nsw i64 %8284, %96
  %8286 = zext i32 %.pre-phi3591 to i64
  %8287 = mul nsw i64 %8286, %116
  %8288 = sub nsw i64 %8287, %96
  %8289 = zext i32 %.pre-phi3595 to i64
  %8290 = mul nsw i64 %8289, %116
  %8291 = sub nsw i64 %8290, %96
  %8292 = zext i32 %.pre-phi3599 to i64
  %8293 = mul nsw i64 %8292, %116
  %8294 = sub nsw i64 %8293, %96
  %8295 = zext i32 %.pre-phi to i64
  %8296 = mul nsw i64 %8295, %116
  %8297 = sub nsw i64 %8296, %96
  %8298 = zext i32 %.pre-phi3605 to i64
  %8299 = mul nsw i64 %8298, %116
  %8300 = sub nsw i64 %8299, %96
  %8301 = sext i32 %a26 to i64
  %8302 = add nsw i64 %8301, 10
  %8303 = mul nsw i64 %8302, %117
  %8304 = add nsw i64 %8303, %120
  br label %"for blur_y.s0.x.x.rebased362"

"produce blur_x360":                              ; preds = %"for blur_y.s0.x.x.rebased354"
  %t912 = add nsw i32 %8276, %t1921
  %8305 = sext i32 %t912 to i64
  %8306 = getelementptr inbounds i16, i16* %read_input, i64 %8305
  %8307 = getelementptr inbounds i16, i16* %8306, i64 1
  %8308 = bitcast i16* %8307 to <16 x i16>*
  %8309 = load <16 x i16>, <16 x i16>* %8308, align 2, !tbaa !396
  %8310 = getelementptr inbounds i16, i16* %8306, i64 17
  %8311 = bitcast i16* %8310 to <16 x i16>*
  %8312 = load <16 x i16>, <16 x i16>* %8311, align 2, !tbaa !396
  %8313 = bitcast i16* %8306 to <16 x i16>*
  %8314 = load <16 x i16>, <16 x i16>* %8313, align 2, !tbaa !396
  %8315 = getelementptr inbounds i16, i16* %8306, i64 16
  %8316 = bitcast i16* %8315 to <16 x i16>*
  %8317 = load <16 x i16>, <16 x i16>* %8316, align 2, !tbaa !396
  %8318 = getelementptr inbounds i16, i16* %8306, i64 2
  %8319 = bitcast i16* %8318 to <16 x i16>*
  %8320 = load <16 x i16>, <16 x i16>* %8319, align 2, !tbaa !396
  %8321 = getelementptr inbounds i16, i16* %8306, i64 18
  %8322 = bitcast i16* %8321 to <16 x i16>*
  %8323 = load <16 x i16>, <16 x i16>* %8322, align 2, !tbaa !396
  %8324 = getelementptr inbounds i16, i16* %8306, i64 3
  %8325 = bitcast i16* %8324 to <16 x i16>*
  %8326 = load <16 x i16>, <16 x i16>* %8325, align 2, !tbaa !396
  %8327 = getelementptr inbounds i16, i16* %8306, i64 19
  %8328 = bitcast i16* %8327 to <16 x i16>*
  %8329 = load <16 x i16>, <16 x i16>* %8328, align 2, !tbaa !396
  %8330 = getelementptr inbounds i16, i16* %8306, i64 4
  %8331 = bitcast i16* %8330 to <16 x i16>*
  %8332 = load <16 x i16>, <16 x i16>* %8331, align 2, !tbaa !396
  %8333 = getelementptr inbounds i16, i16* %8306, i64 20
  %8334 = bitcast i16* %8333 to <16 x i16>*
  %8335 = load <16 x i16>, <16 x i16>* %8334, align 2, !tbaa !396
  %8336 = getelementptr inbounds i16, i16* %8306, i64 6
  %8337 = bitcast i16* %8336 to <16 x i16>*
  %8338 = load <16 x i16>, <16 x i16>* %8337, align 2, !tbaa !396
  %8339 = getelementptr inbounds i16, i16* %8306, i64 22
  %8340 = bitcast i16* %8339 to <16 x i16>*
  %8341 = load <16 x i16>, <16 x i16>* %8340, align 2, !tbaa !396
  %8342 = getelementptr inbounds i16, i16* %8306, i64 5
  %8343 = bitcast i16* %8342 to <16 x i16>*
  %8344 = load <16 x i16>, <16 x i16>* %8343, align 2, !tbaa !396
  %8345 = getelementptr inbounds i16, i16* %8306, i64 21
  %8346 = bitcast i16* %8345 to <16 x i16>*
  %8347 = load <16 x i16>, <16 x i16>* %8346, align 2, !tbaa !396
  %8348 = add <16 x i16> %8314, %8309
  %8349 = add <16 x i16> %8348, %8320
  %8350 = add <16 x i16> %8349, %8326
  %8351 = add <16 x i16> %8350, %8332
  %8352 = add <16 x i16> %8351, %8338
  %8353 = add <16 x i16> %8352, %8344
  %8354 = add <16 x i16> %8317, %8312
  %8355 = add <16 x i16> %8354, %8323
  %8356 = add <16 x i16> %8355, %8329
  %8357 = add <16 x i16> %8356, %8335
  %8358 = add <16 x i16> %8357, %8341
  %8359 = add <16 x i16> %8358, %8347
  %8360 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8353, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8361 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8359, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8362 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8360, <16 x i16> %8353)
  %8363 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8361, <16 x i16> %8359)
  %8364 = shufflevector <16 x i16> %8362, <16 x i16> %8363, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8365 = lshr <32 x i16> %8364, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8366 = shufflevector <32 x i16> %8365, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8367 = shl nsw i64 %8273, 5
  %8368 = add nsw i64 %8367, %8078
  %8369 = getelementptr inbounds i16, i16* %blur_x, i64 %8368
  %8370 = bitcast i16* %8369 to <16 x i16>*
  store <16 x i16> %8366, <16 x i16>* %8370, align 2, !tbaa !399
  %8371 = shufflevector <32 x i16> %8365, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8372 = getelementptr inbounds i16, i16* %8369, i64 16
  %8373 = bitcast i16* %8372 to <16 x i16>*
  store <16 x i16> %8371, <16 x i16>* %8373, align 2, !tbaa !399
  br label %"consume blur_x361"

"consume blur_x361":                              ; preds = %"for blur_y.s0.x.x.rebased354.consume blur_x361_crit_edge", %"produce blur_x360"
  %.pre-phi3625 = phi i64 [ %.pre3624, %"for blur_y.s0.x.x.rebased354.consume blur_x361_crit_edge" ], [ %8367, %"produce blur_x360" ]
  %8374 = add nsw i64 %8081, %.pre-phi3625
  %8375 = getelementptr inbounds i16, i16* %blur_x, i64 %8374
  %8376 = bitcast i16* %8375 to <16 x i16>*
  %8377 = load <16 x i16>, <16 x i16>* %8376, align 2, !tbaa !399
  %8378 = getelementptr inbounds i16, i16* %8375, i64 16
  %8379 = bitcast i16* %8378 to <16 x i16>*
  %8380 = load <16 x i16>, <16 x i16>* %8379, align 2, !tbaa !399
  %8381 = add nsw i64 %8084, %.pre-phi3625
  %8382 = getelementptr inbounds i16, i16* %blur_x, i64 %8381
  %8383 = bitcast i16* %8382 to <16 x i16>*
  %8384 = load <16 x i16>, <16 x i16>* %8383, align 2, !tbaa !399
  %8385 = getelementptr inbounds i16, i16* %8382, i64 16
  %8386 = bitcast i16* %8385 to <16 x i16>*
  %8387 = load <16 x i16>, <16 x i16>* %8386, align 2, !tbaa !399
  %8388 = add nsw i64 %8087, %.pre-phi3625
  %8389 = getelementptr inbounds i16, i16* %blur_x, i64 %8388
  %8390 = bitcast i16* %8389 to <16 x i16>*
  %8391 = load <16 x i16>, <16 x i16>* %8390, align 2, !tbaa !399
  %8392 = getelementptr inbounds i16, i16* %8389, i64 16
  %8393 = bitcast i16* %8392 to <16 x i16>*
  %8394 = load <16 x i16>, <16 x i16>* %8393, align 2, !tbaa !399
  %8395 = add nsw i64 %8090, %.pre-phi3625
  %8396 = getelementptr inbounds i16, i16* %blur_x, i64 %8395
  %8397 = bitcast i16* %8396 to <16 x i16>*
  %8398 = load <16 x i16>, <16 x i16>* %8397, align 2, !tbaa !399
  %8399 = getelementptr inbounds i16, i16* %8396, i64 16
  %8400 = bitcast i16* %8399 to <16 x i16>*
  %8401 = load <16 x i16>, <16 x i16>* %8400, align 2, !tbaa !399
  %8402 = add nsw i64 %8093, %.pre-phi3625
  %8403 = getelementptr inbounds i16, i16* %blur_x, i64 %8402
  %8404 = bitcast i16* %8403 to <16 x i16>*
  %8405 = load <16 x i16>, <16 x i16>* %8404, align 2, !tbaa !399
  %8406 = getelementptr inbounds i16, i16* %8403, i64 16
  %8407 = bitcast i16* %8406 to <16 x i16>*
  %8408 = load <16 x i16>, <16 x i16>* %8407, align 2, !tbaa !399
  %8409 = add nsw i64 %8096, %.pre-phi3625
  %8410 = getelementptr inbounds i16, i16* %blur_x, i64 %8409
  %8411 = bitcast i16* %8410 to <16 x i16>*
  %8412 = load <16 x i16>, <16 x i16>* %8411, align 2, !tbaa !399
  %8413 = getelementptr inbounds i16, i16* %8410, i64 16
  %8414 = bitcast i16* %8413 to <16 x i16>*
  %8415 = load <16 x i16>, <16 x i16>* %8414, align 2, !tbaa !399
  %8416 = add nsw i64 %8099, %.pre-phi3625
  %8417 = getelementptr inbounds i16, i16* %blur_x, i64 %8416
  %8418 = bitcast i16* %8417 to <16 x i16>*
  %8419 = load <16 x i16>, <16 x i16>* %8418, align 2, !tbaa !399
  %8420 = getelementptr inbounds i16, i16* %8417, i64 16
  %8421 = bitcast i16* %8420 to <16 x i16>*
  %8422 = load <16 x i16>, <16 x i16>* %8421, align 2, !tbaa !399
  %8423 = add <16 x i16> %8384, %8377
  %8424 = add <16 x i16> %8423, %8391
  %8425 = add <16 x i16> %8424, %8398
  %8426 = add <16 x i16> %8425, %8405
  %8427 = add <16 x i16> %8426, %8412
  %8428 = add <16 x i16> %8427, %8419
  %8429 = add <16 x i16> %8387, %8380
  %8430 = add <16 x i16> %8429, %8394
  %8431 = add <16 x i16> %8430, %8401
  %8432 = add <16 x i16> %8431, %8408
  %8433 = add <16 x i16> %8432, %8415
  %8434 = add <16 x i16> %8433, %8422
  %8435 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8428, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8436 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8434, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8437 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8435, <16 x i16> %8428)
  %8438 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8436, <16 x i16> %8434)
  %8439 = shufflevector <16 x i16> %8437, <16 x i16> %8438, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8440 = lshr <32 x i16> %8439, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8441 = shufflevector <32 x i16> %8440, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8442 = add nsw i64 %8103, %.pre-phi3625
  %8443 = getelementptr inbounds i16, i16* %66, i64 %8442
  %8444 = bitcast i16* %8443 to <16 x i16>*
  store <16 x i16> %8441, <16 x i16>* %8444, align 2, !tbaa !401
  %8445 = shufflevector <32 x i16> %8440, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8446 = getelementptr inbounds i16, i16* %8443, i64 16
  %8447 = bitcast i16* %8446 to <16 x i16>*
  store <16 x i16> %8445, <16 x i16>* %8447, align 2, !tbaa !401
  %indvars.iv.next3420 = add nuw nsw i64 %indvars.iv3419, 1
  %.not2851 = icmp eq i64 %indvars.iv.next3420, %188
  br i1 %.not2851, label %"end for blur_y.s0.x.x.rebased355", label %"for blur_y.s0.x.x.rebased354"

"for blur_y.s0.x.x.rebased362":                   ; preds = %"for blur_y.s0.x.x.rebased362.preheader", %"consume blur_x370"
  %blur_y.s0.x.x.rebased364 = phi i32 [ %8598, %"consume blur_x370" ], [ 0, %"for blur_y.s0.x.x.rebased362.preheader" ]
  %8448 = add nsw i32 %blur_y.s0.x.x.rebased364, %t1670
  %a189 = shl nsw i32 %8448, 5
  %8449 = icmp sgt i32 %a14, %a189
  %b195 = select i1 %8449, i32 %a189, i32 %a14
  %8450 = icmp slt i32 %8448, 1
  %8451 = icmp sgt i32 %4, %a189
  %8452 = or i1 %8450, %8451
  br i1 %8452, label %"produce blur_x368", label %"consume blur_x370"

"end for blur_y.s0.x.x.rebased363":               ; preds = %"consume blur_x370", %"end for blur_y.s0.x.x.rebased355"
  br i1 %34, label %"produce blur_x374", label %after_bb371

"produce blur_x368":                              ; preds = %"for blur_y.s0.x.x.rebased362"
  %8453 = icmp slt i32 %b195, %4
  %blur_x.s0.x.v1.base.s369 = select i1 %8453, i32 %b195, i32 %4
  %t917 = add nsw i32 %blur_x.s0.x.v1.base.s369, %t1921
  %8454 = sext i32 %t917 to i64
  %8455 = getelementptr inbounds i16, i16* %read_input, i64 %8454
  %8456 = getelementptr inbounds i16, i16* %8455, i64 1
  %8457 = bitcast i16* %8456 to <16 x i16>*
  %8458 = load <16 x i16>, <16 x i16>* %8457, align 2, !tbaa !396
  %8459 = getelementptr inbounds i16, i16* %8455, i64 17
  %8460 = bitcast i16* %8459 to <16 x i16>*
  %8461 = load <16 x i16>, <16 x i16>* %8460, align 2, !tbaa !396
  %8462 = bitcast i16* %8455 to <16 x i16>*
  %8463 = load <16 x i16>, <16 x i16>* %8462, align 2, !tbaa !396
  %8464 = getelementptr inbounds i16, i16* %8455, i64 16
  %8465 = bitcast i16* %8464 to <16 x i16>*
  %8466 = load <16 x i16>, <16 x i16>* %8465, align 2, !tbaa !396
  %8467 = getelementptr inbounds i16, i16* %8455, i64 2
  %8468 = bitcast i16* %8467 to <16 x i16>*
  %8469 = load <16 x i16>, <16 x i16>* %8468, align 2, !tbaa !396
  %8470 = getelementptr inbounds i16, i16* %8455, i64 18
  %8471 = bitcast i16* %8470 to <16 x i16>*
  %8472 = load <16 x i16>, <16 x i16>* %8471, align 2, !tbaa !396
  %8473 = getelementptr inbounds i16, i16* %8455, i64 3
  %8474 = bitcast i16* %8473 to <16 x i16>*
  %8475 = load <16 x i16>, <16 x i16>* %8474, align 2, !tbaa !396
  %8476 = getelementptr inbounds i16, i16* %8455, i64 19
  %8477 = bitcast i16* %8476 to <16 x i16>*
  %8478 = load <16 x i16>, <16 x i16>* %8477, align 2, !tbaa !396
  %8479 = getelementptr inbounds i16, i16* %8455, i64 4
  %8480 = bitcast i16* %8479 to <16 x i16>*
  %8481 = load <16 x i16>, <16 x i16>* %8480, align 2, !tbaa !396
  %8482 = getelementptr inbounds i16, i16* %8455, i64 20
  %8483 = bitcast i16* %8482 to <16 x i16>*
  %8484 = load <16 x i16>, <16 x i16>* %8483, align 2, !tbaa !396
  %8485 = getelementptr inbounds i16, i16* %8455, i64 6
  %8486 = bitcast i16* %8485 to <16 x i16>*
  %8487 = load <16 x i16>, <16 x i16>* %8486, align 2, !tbaa !396
  %8488 = getelementptr inbounds i16, i16* %8455, i64 22
  %8489 = bitcast i16* %8488 to <16 x i16>*
  %8490 = load <16 x i16>, <16 x i16>* %8489, align 2, !tbaa !396
  %8491 = getelementptr inbounds i16, i16* %8455, i64 5
  %8492 = bitcast i16* %8491 to <16 x i16>*
  %8493 = load <16 x i16>, <16 x i16>* %8492, align 2, !tbaa !396
  %8494 = getelementptr inbounds i16, i16* %8455, i64 21
  %8495 = bitcast i16* %8494 to <16 x i16>*
  %8496 = load <16 x i16>, <16 x i16>* %8495, align 2, !tbaa !396
  %8497 = add <16 x i16> %8463, %8458
  %8498 = add <16 x i16> %8497, %8469
  %8499 = add <16 x i16> %8498, %8475
  %8500 = add <16 x i16> %8499, %8481
  %8501 = add <16 x i16> %8500, %8487
  %8502 = add <16 x i16> %8501, %8493
  %8503 = add <16 x i16> %8466, %8461
  %8504 = add <16 x i16> %8503, %8472
  %8505 = add <16 x i16> %8504, %8478
  %8506 = add <16 x i16> %8505, %8484
  %8507 = add <16 x i16> %8506, %8490
  %8508 = add <16 x i16> %8507, %8496
  %8509 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8502, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8510 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8508, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8511 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8509, <16 x i16> %8502)
  %8512 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8510, <16 x i16> %8508)
  %8513 = shufflevector <16 x i16> %8511, <16 x i16> %8512, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8514 = lshr <32 x i16> %8513, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8515 = shufflevector <32 x i16> %8514, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8516 = sext i32 %blur_x.s0.x.v1.base.s369 to i64
  %8517 = add nsw i64 %8516, %8279
  %8518 = getelementptr inbounds i16, i16* %blur_x, i64 %8517
  %8519 = bitcast i16* %8518 to <16 x i16>*
  store <16 x i16> %8515, <16 x i16>* %8519, align 2, !tbaa !399
  %8520 = shufflevector <32 x i16> %8514, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8521 = getelementptr inbounds i16, i16* %8518, i64 16
  %8522 = bitcast i16* %8521 to <16 x i16>*
  store <16 x i16> %8520, <16 x i16>* %8522, align 2, !tbaa !399
  br label %"consume blur_x370"

"consume blur_x370":                              ; preds = %"for blur_y.s0.x.x.rebased362", %"produce blur_x368"
  %8523 = sext i32 %b195 to i64
  %8524 = add nsw i64 %8282, %8523
  %8525 = getelementptr inbounds i16, i16* %blur_x, i64 %8524
  %8526 = bitcast i16* %8525 to <16 x i16>*
  %8527 = load <16 x i16>, <16 x i16>* %8526, align 2, !tbaa !399
  %8528 = getelementptr inbounds i16, i16* %8525, i64 16
  %8529 = bitcast i16* %8528 to <16 x i16>*
  %8530 = load <16 x i16>, <16 x i16>* %8529, align 2, !tbaa !399
  %8531 = add nsw i64 %8285, %8523
  %8532 = getelementptr inbounds i16, i16* %blur_x, i64 %8531
  %8533 = bitcast i16* %8532 to <16 x i16>*
  %8534 = load <16 x i16>, <16 x i16>* %8533, align 2, !tbaa !399
  %8535 = getelementptr inbounds i16, i16* %8532, i64 16
  %8536 = bitcast i16* %8535 to <16 x i16>*
  %8537 = load <16 x i16>, <16 x i16>* %8536, align 2, !tbaa !399
  %8538 = add nsw i64 %8288, %8523
  %8539 = getelementptr inbounds i16, i16* %blur_x, i64 %8538
  %8540 = bitcast i16* %8539 to <16 x i16>*
  %8541 = load <16 x i16>, <16 x i16>* %8540, align 2, !tbaa !399
  %8542 = getelementptr inbounds i16, i16* %8539, i64 16
  %8543 = bitcast i16* %8542 to <16 x i16>*
  %8544 = load <16 x i16>, <16 x i16>* %8543, align 2, !tbaa !399
  %8545 = add nsw i64 %8291, %8523
  %8546 = getelementptr inbounds i16, i16* %blur_x, i64 %8545
  %8547 = bitcast i16* %8546 to <16 x i16>*
  %8548 = load <16 x i16>, <16 x i16>* %8547, align 2, !tbaa !399
  %8549 = getelementptr inbounds i16, i16* %8546, i64 16
  %8550 = bitcast i16* %8549 to <16 x i16>*
  %8551 = load <16 x i16>, <16 x i16>* %8550, align 2, !tbaa !399
  %8552 = add nsw i64 %8294, %8523
  %8553 = getelementptr inbounds i16, i16* %blur_x, i64 %8552
  %8554 = bitcast i16* %8553 to <16 x i16>*
  %8555 = load <16 x i16>, <16 x i16>* %8554, align 2, !tbaa !399
  %8556 = getelementptr inbounds i16, i16* %8553, i64 16
  %8557 = bitcast i16* %8556 to <16 x i16>*
  %8558 = load <16 x i16>, <16 x i16>* %8557, align 2, !tbaa !399
  %8559 = add nsw i64 %8297, %8523
  %8560 = getelementptr inbounds i16, i16* %blur_x, i64 %8559
  %8561 = bitcast i16* %8560 to <16 x i16>*
  %8562 = load <16 x i16>, <16 x i16>* %8561, align 2, !tbaa !399
  %8563 = getelementptr inbounds i16, i16* %8560, i64 16
  %8564 = bitcast i16* %8563 to <16 x i16>*
  %8565 = load <16 x i16>, <16 x i16>* %8564, align 2, !tbaa !399
  %8566 = add nsw i64 %8300, %8523
  %8567 = getelementptr inbounds i16, i16* %blur_x, i64 %8566
  %8568 = bitcast i16* %8567 to <16 x i16>*
  %8569 = load <16 x i16>, <16 x i16>* %8568, align 2, !tbaa !399
  %8570 = getelementptr inbounds i16, i16* %8567, i64 16
  %8571 = bitcast i16* %8570 to <16 x i16>*
  %8572 = load <16 x i16>, <16 x i16>* %8571, align 2, !tbaa !399
  %8573 = add <16 x i16> %8534, %8527
  %8574 = add <16 x i16> %8573, %8541
  %8575 = add <16 x i16> %8574, %8548
  %8576 = add <16 x i16> %8575, %8555
  %8577 = add <16 x i16> %8576, %8562
  %8578 = add <16 x i16> %8577, %8569
  %8579 = add <16 x i16> %8537, %8530
  %8580 = add <16 x i16> %8579, %8544
  %8581 = add <16 x i16> %8580, %8551
  %8582 = add <16 x i16> %8581, %8558
  %8583 = add <16 x i16> %8582, %8565
  %8584 = add <16 x i16> %8583, %8572
  %8585 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8578, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8586 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8584, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8587 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8585, <16 x i16> %8578)
  %8588 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8586, <16 x i16> %8584)
  %8589 = shufflevector <16 x i16> %8587, <16 x i16> %8588, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8590 = lshr <32 x i16> %8589, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8591 = shufflevector <32 x i16> %8590, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8592 = add nsw i64 %8304, %8523
  %8593 = getelementptr inbounds i16, i16* %66, i64 %8592
  %8594 = bitcast i16* %8593 to <16 x i16>*
  store <16 x i16> %8591, <16 x i16>* %8594, align 2, !tbaa !401
  %8595 = shufflevector <32 x i16> %8590, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8596 = getelementptr inbounds i16, i16* %8593, i64 16
  %8597 = bitcast i16* %8596 to <16 x i16>*
  store <16 x i16> %8595, <16 x i16>* %8597, align 2, !tbaa !401
  %8598 = add nuw nsw i32 %blur_y.s0.x.x.rebased364, 1
  %.not2850 = icmp eq i32 %8598, %t1727
  br i1 %.not2850, label %"end for blur_y.s0.x.x.rebased363", label %"for blur_y.s0.x.x.rebased362"

after_bb371:                                      ; preds = %"end for blur_y.s0.x.x.rebased363", %"produce blur_x374"
  br i1 %100, label %"for blur_y.s0.x.x.rebased376.preheader", label %"end for blur_y.s0.x.x.rebased377", !prof !386

"for blur_y.s0.x.x.rebased376.preheader":         ; preds = %after_bb371
  %8599 = sext i32 %t1732 to i64
  %8600 = zext i32 %.pre-phi3591 to i64
  %8601 = mul nsw i64 %8600, %116
  %8602 = sub nsw i64 %8601, %96
  %8603 = zext i32 %.pre-phi3587 to i64
  %8604 = mul nsw i64 %8603, %116
  %8605 = sub nsw i64 %8604, %96
  %8606 = zext i32 %.pre-phi3595 to i64
  %8607 = mul nsw i64 %8606, %116
  %8608 = sub nsw i64 %8607, %96
  %8609 = zext i32 %.pre-phi3599 to i64
  %8610 = mul nsw i64 %8609, %116
  %8611 = sub nsw i64 %8610, %96
  %8612 = zext i32 %.pre-phi3605 to i64
  %8613 = mul nsw i64 %8612, %116
  %8614 = sub nsw i64 %8613, %96
  %8615 = zext i32 %.pre-phi3579 to i64
  %8616 = mul nsw i64 %8615, %116
  %8617 = sub nsw i64 %8616, %96
  %8618 = zext i32 %.pre-phi to i64
  %8619 = mul nsw i64 %8618, %116
  %8620 = sub nsw i64 %8619, %96
  %8621 = sext i32 %a26 to i64
  %8622 = add nsw i64 %8621, 11
  %8623 = mul nsw i64 %8622, %117
  %8624 = add nsw i64 %8623, %120
  br label %"for blur_y.s0.x.x.rebased376"

"produce blur_x374":                              ; preds = %"end for blur_y.s0.x.x.rebased363"
  %8625 = getelementptr inbounds i16, i16* %read_input, i64 %141
  %8626 = getelementptr inbounds i16, i16* %8625, i64 -31
  %8627 = bitcast i16* %8626 to <16 x i16>*
  %8628 = load <16 x i16>, <16 x i16>* %8627, align 2, !tbaa !396
  %8629 = getelementptr inbounds i16, i16* %8625, i64 -15
  %8630 = bitcast i16* %8629 to <16 x i16>*
  %8631 = load <16 x i16>, <16 x i16>* %8630, align 2, !tbaa !396
  %8632 = getelementptr inbounds i16, i16* %8625, i64 -32
  %8633 = bitcast i16* %8632 to <16 x i16>*
  %8634 = load <16 x i16>, <16 x i16>* %8633, align 2, !tbaa !396
  %8635 = getelementptr inbounds i16, i16* %8625, i64 -16
  %8636 = bitcast i16* %8635 to <16 x i16>*
  %8637 = load <16 x i16>, <16 x i16>* %8636, align 2, !tbaa !396
  %8638 = getelementptr inbounds i16, i16* %8625, i64 -30
  %8639 = bitcast i16* %8638 to <16 x i16>*
  %8640 = load <16 x i16>, <16 x i16>* %8639, align 2, !tbaa !396
  %8641 = getelementptr inbounds i16, i16* %8625, i64 -14
  %8642 = bitcast i16* %8641 to <16 x i16>*
  %8643 = load <16 x i16>, <16 x i16>* %8642, align 2, !tbaa !396
  %8644 = getelementptr inbounds i16, i16* %8625, i64 -29
  %8645 = bitcast i16* %8644 to <16 x i16>*
  %8646 = load <16 x i16>, <16 x i16>* %8645, align 2, !tbaa !396
  %8647 = getelementptr inbounds i16, i16* %8625, i64 -13
  %8648 = bitcast i16* %8647 to <16 x i16>*
  %8649 = load <16 x i16>, <16 x i16>* %8648, align 2, !tbaa !396
  %8650 = getelementptr inbounds i16, i16* %8625, i64 -28
  %8651 = bitcast i16* %8650 to <16 x i16>*
  %8652 = load <16 x i16>, <16 x i16>* %8651, align 2, !tbaa !396
  %8653 = getelementptr inbounds i16, i16* %8625, i64 -12
  %8654 = bitcast i16* %8653 to <16 x i16>*
  %8655 = load <16 x i16>, <16 x i16>* %8654, align 2, !tbaa !396
  %8656 = getelementptr inbounds i16, i16* %8625, i64 -26
  %8657 = bitcast i16* %8656 to <16 x i16>*
  %8658 = load <16 x i16>, <16 x i16>* %8657, align 2, !tbaa !396
  %8659 = getelementptr inbounds i16, i16* %8625, i64 -10
  %8660 = bitcast i16* %8659 to <16 x i16>*
  %8661 = load <16 x i16>, <16 x i16>* %8660, align 2, !tbaa !396
  %8662 = getelementptr inbounds i16, i16* %8625, i64 -27
  %8663 = bitcast i16* %8662 to <16 x i16>*
  %8664 = load <16 x i16>, <16 x i16>* %8663, align 2, !tbaa !396
  %8665 = getelementptr inbounds i16, i16* %8625, i64 -11
  %8666 = bitcast i16* %8665 to <16 x i16>*
  %8667 = load <16 x i16>, <16 x i16>* %8666, align 2, !tbaa !396
  %8668 = add <16 x i16> %8634, %8628
  %8669 = add <16 x i16> %8668, %8640
  %8670 = add <16 x i16> %8669, %8646
  %8671 = add <16 x i16> %8670, %8652
  %8672 = add <16 x i16> %8671, %8658
  %8673 = add <16 x i16> %8672, %8664
  %8674 = add <16 x i16> %8637, %8631
  %8675 = add <16 x i16> %8674, %8643
  %8676 = add <16 x i16> %8675, %8649
  %8677 = add <16 x i16> %8676, %8655
  %8678 = add <16 x i16> %8677, %8661
  %8679 = add <16 x i16> %8678, %8667
  %8680 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8673, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8681 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8679, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8682 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8680, <16 x i16> %8673)
  %8683 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8681, <16 x i16> %8679)
  %8684 = shufflevector <16 x i16> %8682, <16 x i16> %8683, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8685 = lshr <32 x i16> %8684, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8686 = shufflevector <32 x i16> %8685, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8687 = zext i32 %.pre-phi3579 to i64
  %8688 = mul nsw i64 %97, %8687
  %8689 = add nsw i64 %99, %8688
  %8690 = getelementptr inbounds i16, i16* %blur_x, i64 %8689
  %8691 = getelementptr inbounds i16, i16* %8690, i64 -32
  %8692 = bitcast i16* %8691 to <16 x i16>*
  store <16 x i16> %8686, <16 x i16>* %8692, align 2, !tbaa !399
  %8693 = shufflevector <32 x i16> %8685, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8694 = getelementptr inbounds i16, i16* %8690, i64 -16
  %8695 = bitcast i16* %8694 to <16 x i16>*
  store <16 x i16> %8693, <16 x i16>* %8695, align 2, !tbaa !399
  %8696 = zext i32 %.pre-phi3591 to i64
  %8697 = mul nsw i64 %8696, %116
  %8698 = add nsw i64 %8697, %94
  %8699 = getelementptr inbounds i16, i16* %blur_x, i64 %8698
  %8700 = getelementptr inbounds i16, i16* %8699, i64 -32
  %8701 = bitcast i16* %8700 to <16 x i16>*
  %8702 = load <16 x i16>, <16 x i16>* %8701, align 2, !tbaa !399
  %8703 = getelementptr inbounds i16, i16* %8699, i64 -16
  %8704 = bitcast i16* %8703 to <16 x i16>*
  %8705 = load <16 x i16>, <16 x i16>* %8704, align 2, !tbaa !399
  %8706 = zext i32 %.pre-phi3587 to i64
  %8707 = mul nsw i64 %8706, %116
  %8708 = add nsw i64 %8707, %94
  %8709 = getelementptr inbounds i16, i16* %blur_x, i64 %8708
  %8710 = getelementptr inbounds i16, i16* %8709, i64 -32
  %8711 = bitcast i16* %8710 to <16 x i16>*
  %8712 = load <16 x i16>, <16 x i16>* %8711, align 2, !tbaa !399
  %8713 = getelementptr inbounds i16, i16* %8709, i64 -16
  %8714 = bitcast i16* %8713 to <16 x i16>*
  %8715 = load <16 x i16>, <16 x i16>* %8714, align 2, !tbaa !399
  %8716 = zext i32 %.pre-phi3595 to i64
  %8717 = mul nsw i64 %8716, %116
  %8718 = add nsw i64 %8717, %94
  %8719 = getelementptr inbounds i16, i16* %blur_x, i64 %8718
  %8720 = getelementptr inbounds i16, i16* %8719, i64 -32
  %8721 = bitcast i16* %8720 to <16 x i16>*
  %8722 = load <16 x i16>, <16 x i16>* %8721, align 2, !tbaa !399
  %8723 = getelementptr inbounds i16, i16* %8719, i64 -16
  %8724 = bitcast i16* %8723 to <16 x i16>*
  %8725 = load <16 x i16>, <16 x i16>* %8724, align 2, !tbaa !399
  %8726 = zext i32 %.pre-phi3599 to i64
  %8727 = mul nsw i64 %8726, %116
  %8728 = add nsw i64 %8727, %94
  %8729 = getelementptr inbounds i16, i16* %blur_x, i64 %8728
  %8730 = getelementptr inbounds i16, i16* %8729, i64 -32
  %8731 = bitcast i16* %8730 to <16 x i16>*
  %8732 = load <16 x i16>, <16 x i16>* %8731, align 2, !tbaa !399
  %8733 = getelementptr inbounds i16, i16* %8729, i64 -16
  %8734 = bitcast i16* %8733 to <16 x i16>*
  %8735 = load <16 x i16>, <16 x i16>* %8734, align 2, !tbaa !399
  %8736 = zext i32 %.pre-phi3605 to i64
  %8737 = mul nsw i64 %8736, %116
  %8738 = add nsw i64 %8737, %94
  %8739 = getelementptr inbounds i16, i16* %blur_x, i64 %8738
  %8740 = getelementptr inbounds i16, i16* %8739, i64 -32
  %8741 = bitcast i16* %8740 to <16 x i16>*
  %8742 = load <16 x i16>, <16 x i16>* %8741, align 2, !tbaa !399
  %8743 = getelementptr inbounds i16, i16* %8739, i64 -16
  %8744 = bitcast i16* %8743 to <16 x i16>*
  %8745 = load <16 x i16>, <16 x i16>* %8744, align 2, !tbaa !399
  %8746 = mul nsw i64 %8687, %116
  %8747 = add nsw i64 %8746, %94
  %8748 = getelementptr inbounds i16, i16* %blur_x, i64 %8747
  %8749 = getelementptr inbounds i16, i16* %8748, i64 -32
  %8750 = bitcast i16* %8749 to <16 x i16>*
  %8751 = load <16 x i16>, <16 x i16>* %8750, align 2, !tbaa !399
  %8752 = getelementptr inbounds i16, i16* %8748, i64 -16
  %8753 = bitcast i16* %8752 to <16 x i16>*
  %8754 = load <16 x i16>, <16 x i16>* %8753, align 2, !tbaa !399
  %8755 = zext i32 %.pre-phi to i64
  %8756 = mul nsw i64 %8755, %116
  %8757 = add nsw i64 %8756, %94
  %8758 = getelementptr inbounds i16, i16* %blur_x, i64 %8757
  %8759 = getelementptr inbounds i16, i16* %8758, i64 -32
  %8760 = bitcast i16* %8759 to <16 x i16>*
  %8761 = load <16 x i16>, <16 x i16>* %8760, align 2, !tbaa !399
  %8762 = getelementptr inbounds i16, i16* %8758, i64 -16
  %8763 = bitcast i16* %8762 to <16 x i16>*
  %8764 = load <16 x i16>, <16 x i16>* %8763, align 2, !tbaa !399
  %8765 = add <16 x i16> %8712, %8702
  %8766 = add <16 x i16> %8765, %8722
  %8767 = add <16 x i16> %8766, %8732
  %8768 = add <16 x i16> %8767, %8742
  %8769 = add <16 x i16> %8768, %8751
  %8770 = add <16 x i16> %8769, %8761
  %8771 = add <16 x i16> %8715, %8705
  %8772 = add <16 x i16> %8771, %8725
  %8773 = add <16 x i16> %8772, %8735
  %8774 = add <16 x i16> %8773, %8745
  %8775 = add <16 x i16> %8774, %8754
  %8776 = add <16 x i16> %8775, %8764
  %8777 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8770, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8778 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8776, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8779 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8777, <16 x i16> %8770)
  %8780 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8778, <16 x i16> %8776)
  %8781 = shufflevector <16 x i16> %8779, <16 x i16> %8780, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8782 = lshr <32 x i16> %8781, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8783 = shufflevector <32 x i16> %8782, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8784 = sext i32 %a26 to i64
  %8785 = add nsw i64 %8784, 11
  %8786 = mul nsw i64 %8785, %117
  %8787 = add nsw i64 %119, %8786
  %8788 = getelementptr inbounds i16, i16* %66, i64 %8787
  %8789 = getelementptr inbounds i16, i16* %8788, i64 -32
  %8790 = bitcast i16* %8789 to <16 x i16>*
  store <16 x i16> %8783, <16 x i16>* %8790, align 2, !tbaa !401
  %8791 = shufflevector <32 x i16> %8782, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8792 = getelementptr inbounds i16, i16* %8788, i64 -16
  %8793 = bitcast i16* %8792 to <16 x i16>*
  store <16 x i16> %8791, <16 x i16>* %8793, align 2, !tbaa !401
  br label %after_bb371

"for blur_y.s0.x.x.rebased376":                   ; preds = %"for blur_y.s0.x.x.rebased376.preheader", %"consume blur_x383"
  %indvars.iv3422 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased376.preheader" ], [ %indvars.iv.next3423, %"consume blur_x383" ]
  %8794 = add nsw i64 %indvars.iv3422, %101
  %8795 = icmp slt i64 %8794, 1
  %8796 = trunc i64 %8794 to i32
  %8797 = shl nsw i32 %8796, 5
  %8798 = icmp sgt i32 %4, %8797
  %8799 = or i1 %8795, %8798
  br i1 %8799, label %"produce blur_x382", label %"for blur_y.s0.x.x.rebased376.consume blur_x383_crit_edge"

"for blur_y.s0.x.x.rebased376.consume blur_x383_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased376"
  %.pre3626 = shl nsw i64 %8794, 5
  br label %"consume blur_x383"

"end for blur_y.s0.x.x.rebased377":               ; preds = %"consume blur_x383", %after_bb371
  br i1 %102, label %"for blur_y.s0.x.x.rebased384.preheader", label %"end for blur_y.s0.x.x.rebased385", !prof !386

"for blur_y.s0.x.x.rebased384.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased377"
  %8800 = sext i32 %t1732 to i64
  %8801 = zext i32 %.pre-phi3591 to i64
  %8802 = mul nsw i64 %8801, %116
  %8803 = sub nsw i64 %8802, %96
  %8804 = zext i32 %.pre-phi3587 to i64
  %8805 = mul nsw i64 %8804, %116
  %8806 = sub nsw i64 %8805, %96
  %8807 = zext i32 %.pre-phi3595 to i64
  %8808 = mul nsw i64 %8807, %116
  %8809 = sub nsw i64 %8808, %96
  %8810 = zext i32 %.pre-phi3599 to i64
  %8811 = mul nsw i64 %8810, %116
  %8812 = sub nsw i64 %8811, %96
  %8813 = zext i32 %.pre-phi3605 to i64
  %8814 = mul nsw i64 %8813, %116
  %8815 = sub nsw i64 %8814, %96
  %8816 = zext i32 %.pre-phi3579 to i64
  %8817 = mul nsw i64 %8816, %116
  %8818 = sub nsw i64 %8817, %96
  %8819 = zext i32 %.pre-phi to i64
  %8820 = mul nsw i64 %8819, %116
  %8821 = sub nsw i64 %8820, %96
  %8822 = sext i32 %a26 to i64
  %8823 = add nsw i64 %8822, 11
  %8824 = mul nsw i64 %8823, %117
  %8825 = add nsw i64 %8824, %120
  br label %"for blur_y.s0.x.x.rebased384"

"produce blur_x382":                              ; preds = %"for blur_y.s0.x.x.rebased376"
  %t928 = add nsw i32 %8797, %t1937
  %8826 = sext i32 %t928 to i64
  %8827 = getelementptr inbounds i16, i16* %read_input, i64 %8826
  %8828 = getelementptr inbounds i16, i16* %8827, i64 1
  %8829 = bitcast i16* %8828 to <16 x i16>*
  %8830 = load <16 x i16>, <16 x i16>* %8829, align 2, !tbaa !396
  %8831 = getelementptr inbounds i16, i16* %8827, i64 17
  %8832 = bitcast i16* %8831 to <16 x i16>*
  %8833 = load <16 x i16>, <16 x i16>* %8832, align 2, !tbaa !396
  %8834 = bitcast i16* %8827 to <16 x i16>*
  %8835 = load <16 x i16>, <16 x i16>* %8834, align 2, !tbaa !396
  %8836 = getelementptr inbounds i16, i16* %8827, i64 16
  %8837 = bitcast i16* %8836 to <16 x i16>*
  %8838 = load <16 x i16>, <16 x i16>* %8837, align 2, !tbaa !396
  %8839 = getelementptr inbounds i16, i16* %8827, i64 2
  %8840 = bitcast i16* %8839 to <16 x i16>*
  %8841 = load <16 x i16>, <16 x i16>* %8840, align 2, !tbaa !396
  %8842 = getelementptr inbounds i16, i16* %8827, i64 18
  %8843 = bitcast i16* %8842 to <16 x i16>*
  %8844 = load <16 x i16>, <16 x i16>* %8843, align 2, !tbaa !396
  %8845 = getelementptr inbounds i16, i16* %8827, i64 3
  %8846 = bitcast i16* %8845 to <16 x i16>*
  %8847 = load <16 x i16>, <16 x i16>* %8846, align 2, !tbaa !396
  %8848 = getelementptr inbounds i16, i16* %8827, i64 19
  %8849 = bitcast i16* %8848 to <16 x i16>*
  %8850 = load <16 x i16>, <16 x i16>* %8849, align 2, !tbaa !396
  %8851 = getelementptr inbounds i16, i16* %8827, i64 4
  %8852 = bitcast i16* %8851 to <16 x i16>*
  %8853 = load <16 x i16>, <16 x i16>* %8852, align 2, !tbaa !396
  %8854 = getelementptr inbounds i16, i16* %8827, i64 20
  %8855 = bitcast i16* %8854 to <16 x i16>*
  %8856 = load <16 x i16>, <16 x i16>* %8855, align 2, !tbaa !396
  %8857 = getelementptr inbounds i16, i16* %8827, i64 6
  %8858 = bitcast i16* %8857 to <16 x i16>*
  %8859 = load <16 x i16>, <16 x i16>* %8858, align 2, !tbaa !396
  %8860 = getelementptr inbounds i16, i16* %8827, i64 22
  %8861 = bitcast i16* %8860 to <16 x i16>*
  %8862 = load <16 x i16>, <16 x i16>* %8861, align 2, !tbaa !396
  %8863 = getelementptr inbounds i16, i16* %8827, i64 5
  %8864 = bitcast i16* %8863 to <16 x i16>*
  %8865 = load <16 x i16>, <16 x i16>* %8864, align 2, !tbaa !396
  %8866 = getelementptr inbounds i16, i16* %8827, i64 21
  %8867 = bitcast i16* %8866 to <16 x i16>*
  %8868 = load <16 x i16>, <16 x i16>* %8867, align 2, !tbaa !396
  %8869 = add <16 x i16> %8835, %8830
  %8870 = add <16 x i16> %8869, %8841
  %8871 = add <16 x i16> %8870, %8847
  %8872 = add <16 x i16> %8871, %8853
  %8873 = add <16 x i16> %8872, %8859
  %8874 = add <16 x i16> %8873, %8865
  %8875 = add <16 x i16> %8838, %8833
  %8876 = add <16 x i16> %8875, %8844
  %8877 = add <16 x i16> %8876, %8850
  %8878 = add <16 x i16> %8877, %8856
  %8879 = add <16 x i16> %8878, %8862
  %8880 = add <16 x i16> %8879, %8868
  %8881 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8874, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8882 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8880, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8883 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8881, <16 x i16> %8874)
  %8884 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8882, <16 x i16> %8880)
  %8885 = shufflevector <16 x i16> %8883, <16 x i16> %8884, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8886 = lshr <32 x i16> %8885, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8887 = shufflevector <32 x i16> %8886, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8888 = shl nsw i64 %8794, 5
  %8889 = add nsw i64 %8888, %8599
  %8890 = getelementptr inbounds i16, i16* %blur_x, i64 %8889
  %8891 = bitcast i16* %8890 to <16 x i16>*
  store <16 x i16> %8887, <16 x i16>* %8891, align 2, !tbaa !399
  %8892 = shufflevector <32 x i16> %8886, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8893 = getelementptr inbounds i16, i16* %8890, i64 16
  %8894 = bitcast i16* %8893 to <16 x i16>*
  store <16 x i16> %8892, <16 x i16>* %8894, align 2, !tbaa !399
  br label %"consume blur_x383"

"consume blur_x383":                              ; preds = %"for blur_y.s0.x.x.rebased376.consume blur_x383_crit_edge", %"produce blur_x382"
  %.pre-phi3627 = phi i64 [ %.pre3626, %"for blur_y.s0.x.x.rebased376.consume blur_x383_crit_edge" ], [ %8888, %"produce blur_x382" ]
  %8895 = add nsw i64 %8602, %.pre-phi3627
  %8896 = getelementptr inbounds i16, i16* %blur_x, i64 %8895
  %8897 = bitcast i16* %8896 to <16 x i16>*
  %8898 = load <16 x i16>, <16 x i16>* %8897, align 2, !tbaa !399
  %8899 = getelementptr inbounds i16, i16* %8896, i64 16
  %8900 = bitcast i16* %8899 to <16 x i16>*
  %8901 = load <16 x i16>, <16 x i16>* %8900, align 2, !tbaa !399
  %8902 = add nsw i64 %8605, %.pre-phi3627
  %8903 = getelementptr inbounds i16, i16* %blur_x, i64 %8902
  %8904 = bitcast i16* %8903 to <16 x i16>*
  %8905 = load <16 x i16>, <16 x i16>* %8904, align 2, !tbaa !399
  %8906 = getelementptr inbounds i16, i16* %8903, i64 16
  %8907 = bitcast i16* %8906 to <16 x i16>*
  %8908 = load <16 x i16>, <16 x i16>* %8907, align 2, !tbaa !399
  %8909 = add nsw i64 %8608, %.pre-phi3627
  %8910 = getelementptr inbounds i16, i16* %blur_x, i64 %8909
  %8911 = bitcast i16* %8910 to <16 x i16>*
  %8912 = load <16 x i16>, <16 x i16>* %8911, align 2, !tbaa !399
  %8913 = getelementptr inbounds i16, i16* %8910, i64 16
  %8914 = bitcast i16* %8913 to <16 x i16>*
  %8915 = load <16 x i16>, <16 x i16>* %8914, align 2, !tbaa !399
  %8916 = add nsw i64 %8611, %.pre-phi3627
  %8917 = getelementptr inbounds i16, i16* %blur_x, i64 %8916
  %8918 = bitcast i16* %8917 to <16 x i16>*
  %8919 = load <16 x i16>, <16 x i16>* %8918, align 2, !tbaa !399
  %8920 = getelementptr inbounds i16, i16* %8917, i64 16
  %8921 = bitcast i16* %8920 to <16 x i16>*
  %8922 = load <16 x i16>, <16 x i16>* %8921, align 2, !tbaa !399
  %8923 = add nsw i64 %8614, %.pre-phi3627
  %8924 = getelementptr inbounds i16, i16* %blur_x, i64 %8923
  %8925 = bitcast i16* %8924 to <16 x i16>*
  %8926 = load <16 x i16>, <16 x i16>* %8925, align 2, !tbaa !399
  %8927 = getelementptr inbounds i16, i16* %8924, i64 16
  %8928 = bitcast i16* %8927 to <16 x i16>*
  %8929 = load <16 x i16>, <16 x i16>* %8928, align 2, !tbaa !399
  %8930 = add nsw i64 %8617, %.pre-phi3627
  %8931 = getelementptr inbounds i16, i16* %blur_x, i64 %8930
  %8932 = bitcast i16* %8931 to <16 x i16>*
  %8933 = load <16 x i16>, <16 x i16>* %8932, align 2, !tbaa !399
  %8934 = getelementptr inbounds i16, i16* %8931, i64 16
  %8935 = bitcast i16* %8934 to <16 x i16>*
  %8936 = load <16 x i16>, <16 x i16>* %8935, align 2, !tbaa !399
  %8937 = add nsw i64 %8620, %.pre-phi3627
  %8938 = getelementptr inbounds i16, i16* %blur_x, i64 %8937
  %8939 = bitcast i16* %8938 to <16 x i16>*
  %8940 = load <16 x i16>, <16 x i16>* %8939, align 2, !tbaa !399
  %8941 = getelementptr inbounds i16, i16* %8938, i64 16
  %8942 = bitcast i16* %8941 to <16 x i16>*
  %8943 = load <16 x i16>, <16 x i16>* %8942, align 2, !tbaa !399
  %8944 = add <16 x i16> %8905, %8898
  %8945 = add <16 x i16> %8944, %8912
  %8946 = add <16 x i16> %8945, %8919
  %8947 = add <16 x i16> %8946, %8926
  %8948 = add <16 x i16> %8947, %8933
  %8949 = add <16 x i16> %8948, %8940
  %8950 = add <16 x i16> %8908, %8901
  %8951 = add <16 x i16> %8950, %8915
  %8952 = add <16 x i16> %8951, %8922
  %8953 = add <16 x i16> %8952, %8929
  %8954 = add <16 x i16> %8953, %8936
  %8955 = add <16 x i16> %8954, %8943
  %8956 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8949, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8957 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8955, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8958 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8956, <16 x i16> %8949)
  %8959 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8957, <16 x i16> %8955)
  %8960 = shufflevector <16 x i16> %8958, <16 x i16> %8959, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8961 = lshr <32 x i16> %8960, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8962 = shufflevector <32 x i16> %8961, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8963 = add nsw i64 %8624, %.pre-phi3627
  %8964 = getelementptr inbounds i16, i16* %66, i64 %8963
  %8965 = bitcast i16* %8964 to <16 x i16>*
  store <16 x i16> %8962, <16 x i16>* %8965, align 2, !tbaa !401
  %8966 = shufflevector <32 x i16> %8961, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8967 = getelementptr inbounds i16, i16* %8964, i64 16
  %8968 = bitcast i16* %8967 to <16 x i16>*
  store <16 x i16> %8966, <16 x i16>* %8968, align 2, !tbaa !401
  %indvars.iv.next3423 = add nuw nsw i64 %indvars.iv3422, 1
  %.not2849 = icmp eq i64 %indvars.iv.next3423, %188
  br i1 %.not2849, label %"end for blur_y.s0.x.x.rebased377", label %"for blur_y.s0.x.x.rebased376"

"for blur_y.s0.x.x.rebased384":                   ; preds = %"for blur_y.s0.x.x.rebased384.preheader", %"consume blur_x392"
  %blur_y.s0.x.x.rebased386 = phi i32 [ %9119, %"consume blur_x392" ], [ 0, %"for blur_y.s0.x.x.rebased384.preheader" ]
  %8969 = add nsw i32 %blur_y.s0.x.x.rebased386, %t1670
  %a196 = shl nsw i32 %8969, 5
  %8970 = icmp sgt i32 %a14, %a196
  %b202 = select i1 %8970, i32 %a196, i32 %a14
  %8971 = icmp slt i32 %8969, 1
  %8972 = icmp sgt i32 %4, %a196
  %8973 = or i1 %8971, %8972
  br i1 %8973, label %"produce blur_x390", label %"consume blur_x392"

"end for blur_y.s0.x.x.rebased385":               ; preds = %"consume blur_x392", %"end for blur_y.s0.x.x.rebased377"
  br i1 %34, label %"produce blur_x396", label %after_bb393

"produce blur_x390":                              ; preds = %"for blur_y.s0.x.x.rebased384"
  %8974 = icmp slt i32 %b202, %4
  %blur_x.s0.x.v1.base.s391 = select i1 %8974, i32 %b202, i32 %4
  %t933 = add nsw i32 %blur_x.s0.x.v1.base.s391, %t1937
  %8975 = sext i32 %t933 to i64
  %8976 = getelementptr inbounds i16, i16* %read_input, i64 %8975
  %8977 = getelementptr inbounds i16, i16* %8976, i64 1
  %8978 = bitcast i16* %8977 to <16 x i16>*
  %8979 = load <16 x i16>, <16 x i16>* %8978, align 2, !tbaa !396
  %8980 = getelementptr inbounds i16, i16* %8976, i64 17
  %8981 = bitcast i16* %8980 to <16 x i16>*
  %8982 = load <16 x i16>, <16 x i16>* %8981, align 2, !tbaa !396
  %8983 = bitcast i16* %8976 to <16 x i16>*
  %8984 = load <16 x i16>, <16 x i16>* %8983, align 2, !tbaa !396
  %8985 = getelementptr inbounds i16, i16* %8976, i64 16
  %8986 = bitcast i16* %8985 to <16 x i16>*
  %8987 = load <16 x i16>, <16 x i16>* %8986, align 2, !tbaa !396
  %8988 = getelementptr inbounds i16, i16* %8976, i64 2
  %8989 = bitcast i16* %8988 to <16 x i16>*
  %8990 = load <16 x i16>, <16 x i16>* %8989, align 2, !tbaa !396
  %8991 = getelementptr inbounds i16, i16* %8976, i64 18
  %8992 = bitcast i16* %8991 to <16 x i16>*
  %8993 = load <16 x i16>, <16 x i16>* %8992, align 2, !tbaa !396
  %8994 = getelementptr inbounds i16, i16* %8976, i64 3
  %8995 = bitcast i16* %8994 to <16 x i16>*
  %8996 = load <16 x i16>, <16 x i16>* %8995, align 2, !tbaa !396
  %8997 = getelementptr inbounds i16, i16* %8976, i64 19
  %8998 = bitcast i16* %8997 to <16 x i16>*
  %8999 = load <16 x i16>, <16 x i16>* %8998, align 2, !tbaa !396
  %9000 = getelementptr inbounds i16, i16* %8976, i64 4
  %9001 = bitcast i16* %9000 to <16 x i16>*
  %9002 = load <16 x i16>, <16 x i16>* %9001, align 2, !tbaa !396
  %9003 = getelementptr inbounds i16, i16* %8976, i64 20
  %9004 = bitcast i16* %9003 to <16 x i16>*
  %9005 = load <16 x i16>, <16 x i16>* %9004, align 2, !tbaa !396
  %9006 = getelementptr inbounds i16, i16* %8976, i64 6
  %9007 = bitcast i16* %9006 to <16 x i16>*
  %9008 = load <16 x i16>, <16 x i16>* %9007, align 2, !tbaa !396
  %9009 = getelementptr inbounds i16, i16* %8976, i64 22
  %9010 = bitcast i16* %9009 to <16 x i16>*
  %9011 = load <16 x i16>, <16 x i16>* %9010, align 2, !tbaa !396
  %9012 = getelementptr inbounds i16, i16* %8976, i64 5
  %9013 = bitcast i16* %9012 to <16 x i16>*
  %9014 = load <16 x i16>, <16 x i16>* %9013, align 2, !tbaa !396
  %9015 = getelementptr inbounds i16, i16* %8976, i64 21
  %9016 = bitcast i16* %9015 to <16 x i16>*
  %9017 = load <16 x i16>, <16 x i16>* %9016, align 2, !tbaa !396
  %9018 = add <16 x i16> %8984, %8979
  %9019 = add <16 x i16> %9018, %8990
  %9020 = add <16 x i16> %9019, %8996
  %9021 = add <16 x i16> %9020, %9002
  %9022 = add <16 x i16> %9021, %9008
  %9023 = add <16 x i16> %9022, %9014
  %9024 = add <16 x i16> %8987, %8982
  %9025 = add <16 x i16> %9024, %8993
  %9026 = add <16 x i16> %9025, %8999
  %9027 = add <16 x i16> %9026, %9005
  %9028 = add <16 x i16> %9027, %9011
  %9029 = add <16 x i16> %9028, %9017
  %9030 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9023, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9031 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9029, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9032 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9030, <16 x i16> %9023)
  %9033 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9031, <16 x i16> %9029)
  %9034 = shufflevector <16 x i16> %9032, <16 x i16> %9033, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9035 = lshr <32 x i16> %9034, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9036 = shufflevector <32 x i16> %9035, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9037 = sext i32 %blur_x.s0.x.v1.base.s391 to i64
  %9038 = add nsw i64 %9037, %8800
  %9039 = getelementptr inbounds i16, i16* %blur_x, i64 %9038
  %9040 = bitcast i16* %9039 to <16 x i16>*
  store <16 x i16> %9036, <16 x i16>* %9040, align 2, !tbaa !399
  %9041 = shufflevector <32 x i16> %9035, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9042 = getelementptr inbounds i16, i16* %9039, i64 16
  %9043 = bitcast i16* %9042 to <16 x i16>*
  store <16 x i16> %9041, <16 x i16>* %9043, align 2, !tbaa !399
  br label %"consume blur_x392"

"consume blur_x392":                              ; preds = %"for blur_y.s0.x.x.rebased384", %"produce blur_x390"
  %9044 = sext i32 %b202 to i64
  %9045 = add nsw i64 %8803, %9044
  %9046 = getelementptr inbounds i16, i16* %blur_x, i64 %9045
  %9047 = bitcast i16* %9046 to <16 x i16>*
  %9048 = load <16 x i16>, <16 x i16>* %9047, align 2, !tbaa !399
  %9049 = getelementptr inbounds i16, i16* %9046, i64 16
  %9050 = bitcast i16* %9049 to <16 x i16>*
  %9051 = load <16 x i16>, <16 x i16>* %9050, align 2, !tbaa !399
  %9052 = add nsw i64 %8806, %9044
  %9053 = getelementptr inbounds i16, i16* %blur_x, i64 %9052
  %9054 = bitcast i16* %9053 to <16 x i16>*
  %9055 = load <16 x i16>, <16 x i16>* %9054, align 2, !tbaa !399
  %9056 = getelementptr inbounds i16, i16* %9053, i64 16
  %9057 = bitcast i16* %9056 to <16 x i16>*
  %9058 = load <16 x i16>, <16 x i16>* %9057, align 2, !tbaa !399
  %9059 = add nsw i64 %8809, %9044
  %9060 = getelementptr inbounds i16, i16* %blur_x, i64 %9059
  %9061 = bitcast i16* %9060 to <16 x i16>*
  %9062 = load <16 x i16>, <16 x i16>* %9061, align 2, !tbaa !399
  %9063 = getelementptr inbounds i16, i16* %9060, i64 16
  %9064 = bitcast i16* %9063 to <16 x i16>*
  %9065 = load <16 x i16>, <16 x i16>* %9064, align 2, !tbaa !399
  %9066 = add nsw i64 %8812, %9044
  %9067 = getelementptr inbounds i16, i16* %blur_x, i64 %9066
  %9068 = bitcast i16* %9067 to <16 x i16>*
  %9069 = load <16 x i16>, <16 x i16>* %9068, align 2, !tbaa !399
  %9070 = getelementptr inbounds i16, i16* %9067, i64 16
  %9071 = bitcast i16* %9070 to <16 x i16>*
  %9072 = load <16 x i16>, <16 x i16>* %9071, align 2, !tbaa !399
  %9073 = add nsw i64 %8815, %9044
  %9074 = getelementptr inbounds i16, i16* %blur_x, i64 %9073
  %9075 = bitcast i16* %9074 to <16 x i16>*
  %9076 = load <16 x i16>, <16 x i16>* %9075, align 2, !tbaa !399
  %9077 = getelementptr inbounds i16, i16* %9074, i64 16
  %9078 = bitcast i16* %9077 to <16 x i16>*
  %9079 = load <16 x i16>, <16 x i16>* %9078, align 2, !tbaa !399
  %9080 = add nsw i64 %8818, %9044
  %9081 = getelementptr inbounds i16, i16* %blur_x, i64 %9080
  %9082 = bitcast i16* %9081 to <16 x i16>*
  %9083 = load <16 x i16>, <16 x i16>* %9082, align 2, !tbaa !399
  %9084 = getelementptr inbounds i16, i16* %9081, i64 16
  %9085 = bitcast i16* %9084 to <16 x i16>*
  %9086 = load <16 x i16>, <16 x i16>* %9085, align 2, !tbaa !399
  %9087 = add nsw i64 %8821, %9044
  %9088 = getelementptr inbounds i16, i16* %blur_x, i64 %9087
  %9089 = bitcast i16* %9088 to <16 x i16>*
  %9090 = load <16 x i16>, <16 x i16>* %9089, align 2, !tbaa !399
  %9091 = getelementptr inbounds i16, i16* %9088, i64 16
  %9092 = bitcast i16* %9091 to <16 x i16>*
  %9093 = load <16 x i16>, <16 x i16>* %9092, align 2, !tbaa !399
  %9094 = add <16 x i16> %9055, %9048
  %9095 = add <16 x i16> %9094, %9062
  %9096 = add <16 x i16> %9095, %9069
  %9097 = add <16 x i16> %9096, %9076
  %9098 = add <16 x i16> %9097, %9083
  %9099 = add <16 x i16> %9098, %9090
  %9100 = add <16 x i16> %9058, %9051
  %9101 = add <16 x i16> %9100, %9065
  %9102 = add <16 x i16> %9101, %9072
  %9103 = add <16 x i16> %9102, %9079
  %9104 = add <16 x i16> %9103, %9086
  %9105 = add <16 x i16> %9104, %9093
  %9106 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9099, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9107 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9105, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9108 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9106, <16 x i16> %9099)
  %9109 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9107, <16 x i16> %9105)
  %9110 = shufflevector <16 x i16> %9108, <16 x i16> %9109, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9111 = lshr <32 x i16> %9110, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9112 = shufflevector <32 x i16> %9111, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9113 = add nsw i64 %8825, %9044
  %9114 = getelementptr inbounds i16, i16* %66, i64 %9113
  %9115 = bitcast i16* %9114 to <16 x i16>*
  store <16 x i16> %9112, <16 x i16>* %9115, align 2, !tbaa !401
  %9116 = shufflevector <32 x i16> %9111, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9117 = getelementptr inbounds i16, i16* %9114, i64 16
  %9118 = bitcast i16* %9117 to <16 x i16>*
  store <16 x i16> %9116, <16 x i16>* %9118, align 2, !tbaa !401
  %9119 = add nuw nsw i32 %blur_y.s0.x.x.rebased386, 1
  %.not2848 = icmp eq i32 %9119, %t1727
  br i1 %.not2848, label %"end for blur_y.s0.x.x.rebased385", label %"for blur_y.s0.x.x.rebased384"

after_bb393:                                      ; preds = %"end for blur_y.s0.x.x.rebased385", %"produce blur_x396"
  br i1 %100, label %"for blur_y.s0.x.x.rebased398.preheader", label %"end for blur_y.s0.x.x.rebased399", !prof !386

"for blur_y.s0.x.x.rebased398.preheader":         ; preds = %after_bb393
  %9120 = sext i32 %t1738 to i64
  %9121 = zext i32 %.pre-phi3595 to i64
  %9122 = mul nsw i64 %9121, %116
  %9123 = sub nsw i64 %9122, %96
  %9124 = zext i32 %.pre-phi3591 to i64
  %9125 = mul nsw i64 %9124, %116
  %9126 = sub nsw i64 %9125, %96
  %9127 = zext i32 %.pre-phi3599 to i64
  %9128 = mul nsw i64 %9127, %116
  %9129 = sub nsw i64 %9128, %96
  %9130 = zext i32 %.pre-phi3605 to i64
  %9131 = mul nsw i64 %9130, %116
  %9132 = sub nsw i64 %9131, %96
  %9133 = zext i32 %.pre-phi to i64
  %9134 = mul nsw i64 %9133, %116
  %9135 = sub nsw i64 %9134, %96
  %9136 = zext i32 %.pre-phi3583 to i64
  %9137 = mul nsw i64 %9136, %116
  %9138 = sub nsw i64 %9137, %96
  %9139 = zext i32 %.pre-phi3579 to i64
  %9140 = mul nsw i64 %9139, %116
  %9141 = sub nsw i64 %9140, %96
  %9142 = sext i32 %a26 to i64
  %9143 = add nsw i64 %9142, 12
  %9144 = mul nsw i64 %9143, %117
  %9145 = add nsw i64 %9144, %120
  br label %"for blur_y.s0.x.x.rebased398"

"produce blur_x396":                              ; preds = %"end for blur_y.s0.x.x.rebased385"
  %9146 = getelementptr inbounds i16, i16* %read_input, i64 %143
  %9147 = getelementptr inbounds i16, i16* %9146, i64 -31
  %9148 = bitcast i16* %9147 to <16 x i16>*
  %9149 = load <16 x i16>, <16 x i16>* %9148, align 2, !tbaa !396
  %9150 = getelementptr inbounds i16, i16* %9146, i64 -15
  %9151 = bitcast i16* %9150 to <16 x i16>*
  %9152 = load <16 x i16>, <16 x i16>* %9151, align 2, !tbaa !396
  %9153 = getelementptr inbounds i16, i16* %9146, i64 -32
  %9154 = bitcast i16* %9153 to <16 x i16>*
  %9155 = load <16 x i16>, <16 x i16>* %9154, align 2, !tbaa !396
  %9156 = getelementptr inbounds i16, i16* %9146, i64 -16
  %9157 = bitcast i16* %9156 to <16 x i16>*
  %9158 = load <16 x i16>, <16 x i16>* %9157, align 2, !tbaa !396
  %9159 = getelementptr inbounds i16, i16* %9146, i64 -30
  %9160 = bitcast i16* %9159 to <16 x i16>*
  %9161 = load <16 x i16>, <16 x i16>* %9160, align 2, !tbaa !396
  %9162 = getelementptr inbounds i16, i16* %9146, i64 -14
  %9163 = bitcast i16* %9162 to <16 x i16>*
  %9164 = load <16 x i16>, <16 x i16>* %9163, align 2, !tbaa !396
  %9165 = getelementptr inbounds i16, i16* %9146, i64 -29
  %9166 = bitcast i16* %9165 to <16 x i16>*
  %9167 = load <16 x i16>, <16 x i16>* %9166, align 2, !tbaa !396
  %9168 = getelementptr inbounds i16, i16* %9146, i64 -13
  %9169 = bitcast i16* %9168 to <16 x i16>*
  %9170 = load <16 x i16>, <16 x i16>* %9169, align 2, !tbaa !396
  %9171 = getelementptr inbounds i16, i16* %9146, i64 -28
  %9172 = bitcast i16* %9171 to <16 x i16>*
  %9173 = load <16 x i16>, <16 x i16>* %9172, align 2, !tbaa !396
  %9174 = getelementptr inbounds i16, i16* %9146, i64 -12
  %9175 = bitcast i16* %9174 to <16 x i16>*
  %9176 = load <16 x i16>, <16 x i16>* %9175, align 2, !tbaa !396
  %9177 = getelementptr inbounds i16, i16* %9146, i64 -26
  %9178 = bitcast i16* %9177 to <16 x i16>*
  %9179 = load <16 x i16>, <16 x i16>* %9178, align 2, !tbaa !396
  %9180 = getelementptr inbounds i16, i16* %9146, i64 -10
  %9181 = bitcast i16* %9180 to <16 x i16>*
  %9182 = load <16 x i16>, <16 x i16>* %9181, align 2, !tbaa !396
  %9183 = getelementptr inbounds i16, i16* %9146, i64 -27
  %9184 = bitcast i16* %9183 to <16 x i16>*
  %9185 = load <16 x i16>, <16 x i16>* %9184, align 2, !tbaa !396
  %9186 = getelementptr inbounds i16, i16* %9146, i64 -11
  %9187 = bitcast i16* %9186 to <16 x i16>*
  %9188 = load <16 x i16>, <16 x i16>* %9187, align 2, !tbaa !396
  %9189 = add <16 x i16> %9155, %9149
  %9190 = add <16 x i16> %9189, %9161
  %9191 = add <16 x i16> %9190, %9167
  %9192 = add <16 x i16> %9191, %9173
  %9193 = add <16 x i16> %9192, %9179
  %9194 = add <16 x i16> %9193, %9185
  %9195 = add <16 x i16> %9158, %9152
  %9196 = add <16 x i16> %9195, %9164
  %9197 = add <16 x i16> %9196, %9170
  %9198 = add <16 x i16> %9197, %9176
  %9199 = add <16 x i16> %9198, %9182
  %9200 = add <16 x i16> %9199, %9188
  %9201 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9194, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9202 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9200, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9203 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9201, <16 x i16> %9194)
  %9204 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9202, <16 x i16> %9200)
  %9205 = shufflevector <16 x i16> %9203, <16 x i16> %9204, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9206 = lshr <32 x i16> %9205, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9207 = shufflevector <32 x i16> %9206, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9208 = zext i32 %.pre-phi3583 to i64
  %9209 = mul nsw i64 %97, %9208
  %9210 = add nsw i64 %99, %9209
  %9211 = getelementptr inbounds i16, i16* %blur_x, i64 %9210
  %9212 = getelementptr inbounds i16, i16* %9211, i64 -32
  %9213 = bitcast i16* %9212 to <16 x i16>*
  store <16 x i16> %9207, <16 x i16>* %9213, align 2, !tbaa !399
  %9214 = shufflevector <32 x i16> %9206, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9215 = getelementptr inbounds i16, i16* %9211, i64 -16
  %9216 = bitcast i16* %9215 to <16 x i16>*
  store <16 x i16> %9214, <16 x i16>* %9216, align 2, !tbaa !399
  %9217 = zext i32 %.pre-phi3595 to i64
  %9218 = mul nsw i64 %9217, %116
  %9219 = add nsw i64 %9218, %94
  %9220 = getelementptr inbounds i16, i16* %blur_x, i64 %9219
  %9221 = getelementptr inbounds i16, i16* %9220, i64 -32
  %9222 = bitcast i16* %9221 to <16 x i16>*
  %9223 = load <16 x i16>, <16 x i16>* %9222, align 2, !tbaa !399
  %9224 = getelementptr inbounds i16, i16* %9220, i64 -16
  %9225 = bitcast i16* %9224 to <16 x i16>*
  %9226 = load <16 x i16>, <16 x i16>* %9225, align 2, !tbaa !399
  %9227 = zext i32 %.pre-phi3591 to i64
  %9228 = mul nsw i64 %9227, %116
  %9229 = add nsw i64 %9228, %94
  %9230 = getelementptr inbounds i16, i16* %blur_x, i64 %9229
  %9231 = getelementptr inbounds i16, i16* %9230, i64 -32
  %9232 = bitcast i16* %9231 to <16 x i16>*
  %9233 = load <16 x i16>, <16 x i16>* %9232, align 2, !tbaa !399
  %9234 = getelementptr inbounds i16, i16* %9230, i64 -16
  %9235 = bitcast i16* %9234 to <16 x i16>*
  %9236 = load <16 x i16>, <16 x i16>* %9235, align 2, !tbaa !399
  %9237 = zext i32 %.pre-phi3599 to i64
  %9238 = mul nsw i64 %9237, %116
  %9239 = add nsw i64 %9238, %94
  %9240 = getelementptr inbounds i16, i16* %blur_x, i64 %9239
  %9241 = getelementptr inbounds i16, i16* %9240, i64 -32
  %9242 = bitcast i16* %9241 to <16 x i16>*
  %9243 = load <16 x i16>, <16 x i16>* %9242, align 2, !tbaa !399
  %9244 = getelementptr inbounds i16, i16* %9240, i64 -16
  %9245 = bitcast i16* %9244 to <16 x i16>*
  %9246 = load <16 x i16>, <16 x i16>* %9245, align 2, !tbaa !399
  %9247 = zext i32 %.pre-phi3605 to i64
  %9248 = mul nsw i64 %9247, %116
  %9249 = add nsw i64 %9248, %94
  %9250 = getelementptr inbounds i16, i16* %blur_x, i64 %9249
  %9251 = getelementptr inbounds i16, i16* %9250, i64 -32
  %9252 = bitcast i16* %9251 to <16 x i16>*
  %9253 = load <16 x i16>, <16 x i16>* %9252, align 2, !tbaa !399
  %9254 = getelementptr inbounds i16, i16* %9250, i64 -16
  %9255 = bitcast i16* %9254 to <16 x i16>*
  %9256 = load <16 x i16>, <16 x i16>* %9255, align 2, !tbaa !399
  %9257 = zext i32 %.pre-phi to i64
  %9258 = mul nsw i64 %9257, %116
  %9259 = add nsw i64 %9258, %94
  %9260 = getelementptr inbounds i16, i16* %blur_x, i64 %9259
  %9261 = getelementptr inbounds i16, i16* %9260, i64 -32
  %9262 = bitcast i16* %9261 to <16 x i16>*
  %9263 = load <16 x i16>, <16 x i16>* %9262, align 2, !tbaa !399
  %9264 = getelementptr inbounds i16, i16* %9260, i64 -16
  %9265 = bitcast i16* %9264 to <16 x i16>*
  %9266 = load <16 x i16>, <16 x i16>* %9265, align 2, !tbaa !399
  %9267 = mul nsw i64 %9208, %116
  %9268 = add nsw i64 %9267, %94
  %9269 = getelementptr inbounds i16, i16* %blur_x, i64 %9268
  %9270 = getelementptr inbounds i16, i16* %9269, i64 -32
  %9271 = bitcast i16* %9270 to <16 x i16>*
  %9272 = load <16 x i16>, <16 x i16>* %9271, align 2, !tbaa !399
  %9273 = getelementptr inbounds i16, i16* %9269, i64 -16
  %9274 = bitcast i16* %9273 to <16 x i16>*
  %9275 = load <16 x i16>, <16 x i16>* %9274, align 2, !tbaa !399
  %9276 = zext i32 %.pre-phi3579 to i64
  %9277 = mul nsw i64 %9276, %116
  %9278 = add nsw i64 %9277, %94
  %9279 = getelementptr inbounds i16, i16* %blur_x, i64 %9278
  %9280 = getelementptr inbounds i16, i16* %9279, i64 -32
  %9281 = bitcast i16* %9280 to <16 x i16>*
  %9282 = load <16 x i16>, <16 x i16>* %9281, align 2, !tbaa !399
  %9283 = getelementptr inbounds i16, i16* %9279, i64 -16
  %9284 = bitcast i16* %9283 to <16 x i16>*
  %9285 = load <16 x i16>, <16 x i16>* %9284, align 2, !tbaa !399
  %9286 = add <16 x i16> %9233, %9223
  %9287 = add <16 x i16> %9286, %9243
  %9288 = add <16 x i16> %9287, %9253
  %9289 = add <16 x i16> %9288, %9263
  %9290 = add <16 x i16> %9289, %9272
  %9291 = add <16 x i16> %9290, %9282
  %9292 = add <16 x i16> %9236, %9226
  %9293 = add <16 x i16> %9292, %9246
  %9294 = add <16 x i16> %9293, %9256
  %9295 = add <16 x i16> %9294, %9266
  %9296 = add <16 x i16> %9295, %9275
  %9297 = add <16 x i16> %9296, %9285
  %9298 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9291, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9299 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9297, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9300 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9298, <16 x i16> %9291)
  %9301 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9299, <16 x i16> %9297)
  %9302 = shufflevector <16 x i16> %9300, <16 x i16> %9301, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9303 = lshr <32 x i16> %9302, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9304 = shufflevector <32 x i16> %9303, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9305 = sext i32 %a26 to i64
  %9306 = add nsw i64 %9305, 12
  %9307 = mul nsw i64 %9306, %117
  %9308 = add nsw i64 %119, %9307
  %9309 = getelementptr inbounds i16, i16* %66, i64 %9308
  %9310 = getelementptr inbounds i16, i16* %9309, i64 -32
  %9311 = bitcast i16* %9310 to <16 x i16>*
  store <16 x i16> %9304, <16 x i16>* %9311, align 2, !tbaa !401
  %9312 = shufflevector <32 x i16> %9303, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9313 = getelementptr inbounds i16, i16* %9309, i64 -16
  %9314 = bitcast i16* %9313 to <16 x i16>*
  store <16 x i16> %9312, <16 x i16>* %9314, align 2, !tbaa !401
  br label %after_bb393

"for blur_y.s0.x.x.rebased398":                   ; preds = %"for blur_y.s0.x.x.rebased398.preheader", %"consume blur_x405"
  %indvars.iv3425 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased398.preheader" ], [ %indvars.iv.next3426, %"consume blur_x405" ]
  %9315 = add nsw i64 %indvars.iv3425, %101
  %9316 = icmp slt i64 %9315, 1
  %9317 = trunc i64 %9315 to i32
  %9318 = shl nsw i32 %9317, 5
  %9319 = icmp sgt i32 %4, %9318
  %9320 = or i1 %9316, %9319
  br i1 %9320, label %"produce blur_x404", label %"for blur_y.s0.x.x.rebased398.consume blur_x405_crit_edge"

"for blur_y.s0.x.x.rebased398.consume blur_x405_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased398"
  %.pre3628 = shl nsw i64 %9315, 5
  br label %"consume blur_x405"

"end for blur_y.s0.x.x.rebased399":               ; preds = %"consume blur_x405", %after_bb393
  br i1 %102, label %"for blur_y.s0.x.x.rebased406.preheader", label %"end for blur_y.s0.x.x.rebased407", !prof !386

"for blur_y.s0.x.x.rebased406.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased399"
  %9321 = sext i32 %t1738 to i64
  %9322 = zext i32 %.pre-phi3595 to i64
  %9323 = mul nsw i64 %9322, %116
  %9324 = sub nsw i64 %9323, %96
  %9325 = zext i32 %.pre-phi3591 to i64
  %9326 = mul nsw i64 %9325, %116
  %9327 = sub nsw i64 %9326, %96
  %9328 = zext i32 %.pre-phi3599 to i64
  %9329 = mul nsw i64 %9328, %116
  %9330 = sub nsw i64 %9329, %96
  %9331 = zext i32 %.pre-phi3605 to i64
  %9332 = mul nsw i64 %9331, %116
  %9333 = sub nsw i64 %9332, %96
  %9334 = zext i32 %.pre-phi to i64
  %9335 = mul nsw i64 %9334, %116
  %9336 = sub nsw i64 %9335, %96
  %9337 = zext i32 %.pre-phi3583 to i64
  %9338 = mul nsw i64 %9337, %116
  %9339 = sub nsw i64 %9338, %96
  %9340 = zext i32 %.pre-phi3579 to i64
  %9341 = mul nsw i64 %9340, %116
  %9342 = sub nsw i64 %9341, %96
  %9343 = sext i32 %a26 to i64
  %9344 = add nsw i64 %9343, 12
  %9345 = mul nsw i64 %9344, %117
  %9346 = add nsw i64 %9345, %120
  br label %"for blur_y.s0.x.x.rebased406"

"produce blur_x404":                              ; preds = %"for blur_y.s0.x.x.rebased398"
  %t944 = add nsw i32 %9318, %t1953
  %9347 = sext i32 %t944 to i64
  %9348 = getelementptr inbounds i16, i16* %read_input, i64 %9347
  %9349 = getelementptr inbounds i16, i16* %9348, i64 1
  %9350 = bitcast i16* %9349 to <16 x i16>*
  %9351 = load <16 x i16>, <16 x i16>* %9350, align 2, !tbaa !396
  %9352 = getelementptr inbounds i16, i16* %9348, i64 17
  %9353 = bitcast i16* %9352 to <16 x i16>*
  %9354 = load <16 x i16>, <16 x i16>* %9353, align 2, !tbaa !396
  %9355 = bitcast i16* %9348 to <16 x i16>*
  %9356 = load <16 x i16>, <16 x i16>* %9355, align 2, !tbaa !396
  %9357 = getelementptr inbounds i16, i16* %9348, i64 16
  %9358 = bitcast i16* %9357 to <16 x i16>*
  %9359 = load <16 x i16>, <16 x i16>* %9358, align 2, !tbaa !396
  %9360 = getelementptr inbounds i16, i16* %9348, i64 2
  %9361 = bitcast i16* %9360 to <16 x i16>*
  %9362 = load <16 x i16>, <16 x i16>* %9361, align 2, !tbaa !396
  %9363 = getelementptr inbounds i16, i16* %9348, i64 18
  %9364 = bitcast i16* %9363 to <16 x i16>*
  %9365 = load <16 x i16>, <16 x i16>* %9364, align 2, !tbaa !396
  %9366 = getelementptr inbounds i16, i16* %9348, i64 3
  %9367 = bitcast i16* %9366 to <16 x i16>*
  %9368 = load <16 x i16>, <16 x i16>* %9367, align 2, !tbaa !396
  %9369 = getelementptr inbounds i16, i16* %9348, i64 19
  %9370 = bitcast i16* %9369 to <16 x i16>*
  %9371 = load <16 x i16>, <16 x i16>* %9370, align 2, !tbaa !396
  %9372 = getelementptr inbounds i16, i16* %9348, i64 4
  %9373 = bitcast i16* %9372 to <16 x i16>*
  %9374 = load <16 x i16>, <16 x i16>* %9373, align 2, !tbaa !396
  %9375 = getelementptr inbounds i16, i16* %9348, i64 20
  %9376 = bitcast i16* %9375 to <16 x i16>*
  %9377 = load <16 x i16>, <16 x i16>* %9376, align 2, !tbaa !396
  %9378 = getelementptr inbounds i16, i16* %9348, i64 6
  %9379 = bitcast i16* %9378 to <16 x i16>*
  %9380 = load <16 x i16>, <16 x i16>* %9379, align 2, !tbaa !396
  %9381 = getelementptr inbounds i16, i16* %9348, i64 22
  %9382 = bitcast i16* %9381 to <16 x i16>*
  %9383 = load <16 x i16>, <16 x i16>* %9382, align 2, !tbaa !396
  %9384 = getelementptr inbounds i16, i16* %9348, i64 5
  %9385 = bitcast i16* %9384 to <16 x i16>*
  %9386 = load <16 x i16>, <16 x i16>* %9385, align 2, !tbaa !396
  %9387 = getelementptr inbounds i16, i16* %9348, i64 21
  %9388 = bitcast i16* %9387 to <16 x i16>*
  %9389 = load <16 x i16>, <16 x i16>* %9388, align 2, !tbaa !396
  %9390 = add <16 x i16> %9356, %9351
  %9391 = add <16 x i16> %9390, %9362
  %9392 = add <16 x i16> %9391, %9368
  %9393 = add <16 x i16> %9392, %9374
  %9394 = add <16 x i16> %9393, %9380
  %9395 = add <16 x i16> %9394, %9386
  %9396 = add <16 x i16> %9359, %9354
  %9397 = add <16 x i16> %9396, %9365
  %9398 = add <16 x i16> %9397, %9371
  %9399 = add <16 x i16> %9398, %9377
  %9400 = add <16 x i16> %9399, %9383
  %9401 = add <16 x i16> %9400, %9389
  %9402 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9395, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9403 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9401, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9404 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9402, <16 x i16> %9395)
  %9405 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9403, <16 x i16> %9401)
  %9406 = shufflevector <16 x i16> %9404, <16 x i16> %9405, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9407 = lshr <32 x i16> %9406, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9408 = shufflevector <32 x i16> %9407, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9409 = shl nsw i64 %9315, 5
  %9410 = add nsw i64 %9409, %9120
  %9411 = getelementptr inbounds i16, i16* %blur_x, i64 %9410
  %9412 = bitcast i16* %9411 to <16 x i16>*
  store <16 x i16> %9408, <16 x i16>* %9412, align 2, !tbaa !399
  %9413 = shufflevector <32 x i16> %9407, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9414 = getelementptr inbounds i16, i16* %9411, i64 16
  %9415 = bitcast i16* %9414 to <16 x i16>*
  store <16 x i16> %9413, <16 x i16>* %9415, align 2, !tbaa !399
  br label %"consume blur_x405"

"consume blur_x405":                              ; preds = %"for blur_y.s0.x.x.rebased398.consume blur_x405_crit_edge", %"produce blur_x404"
  %.pre-phi3629 = phi i64 [ %.pre3628, %"for blur_y.s0.x.x.rebased398.consume blur_x405_crit_edge" ], [ %9409, %"produce blur_x404" ]
  %9416 = add nsw i64 %9123, %.pre-phi3629
  %9417 = getelementptr inbounds i16, i16* %blur_x, i64 %9416
  %9418 = bitcast i16* %9417 to <16 x i16>*
  %9419 = load <16 x i16>, <16 x i16>* %9418, align 2, !tbaa !399
  %9420 = getelementptr inbounds i16, i16* %9417, i64 16
  %9421 = bitcast i16* %9420 to <16 x i16>*
  %9422 = load <16 x i16>, <16 x i16>* %9421, align 2, !tbaa !399
  %9423 = add nsw i64 %9126, %.pre-phi3629
  %9424 = getelementptr inbounds i16, i16* %blur_x, i64 %9423
  %9425 = bitcast i16* %9424 to <16 x i16>*
  %9426 = load <16 x i16>, <16 x i16>* %9425, align 2, !tbaa !399
  %9427 = getelementptr inbounds i16, i16* %9424, i64 16
  %9428 = bitcast i16* %9427 to <16 x i16>*
  %9429 = load <16 x i16>, <16 x i16>* %9428, align 2, !tbaa !399
  %9430 = add nsw i64 %9129, %.pre-phi3629
  %9431 = getelementptr inbounds i16, i16* %blur_x, i64 %9430
  %9432 = bitcast i16* %9431 to <16 x i16>*
  %9433 = load <16 x i16>, <16 x i16>* %9432, align 2, !tbaa !399
  %9434 = getelementptr inbounds i16, i16* %9431, i64 16
  %9435 = bitcast i16* %9434 to <16 x i16>*
  %9436 = load <16 x i16>, <16 x i16>* %9435, align 2, !tbaa !399
  %9437 = add nsw i64 %9132, %.pre-phi3629
  %9438 = getelementptr inbounds i16, i16* %blur_x, i64 %9437
  %9439 = bitcast i16* %9438 to <16 x i16>*
  %9440 = load <16 x i16>, <16 x i16>* %9439, align 2, !tbaa !399
  %9441 = getelementptr inbounds i16, i16* %9438, i64 16
  %9442 = bitcast i16* %9441 to <16 x i16>*
  %9443 = load <16 x i16>, <16 x i16>* %9442, align 2, !tbaa !399
  %9444 = add nsw i64 %9135, %.pre-phi3629
  %9445 = getelementptr inbounds i16, i16* %blur_x, i64 %9444
  %9446 = bitcast i16* %9445 to <16 x i16>*
  %9447 = load <16 x i16>, <16 x i16>* %9446, align 2, !tbaa !399
  %9448 = getelementptr inbounds i16, i16* %9445, i64 16
  %9449 = bitcast i16* %9448 to <16 x i16>*
  %9450 = load <16 x i16>, <16 x i16>* %9449, align 2, !tbaa !399
  %9451 = add nsw i64 %9138, %.pre-phi3629
  %9452 = getelementptr inbounds i16, i16* %blur_x, i64 %9451
  %9453 = bitcast i16* %9452 to <16 x i16>*
  %9454 = load <16 x i16>, <16 x i16>* %9453, align 2, !tbaa !399
  %9455 = getelementptr inbounds i16, i16* %9452, i64 16
  %9456 = bitcast i16* %9455 to <16 x i16>*
  %9457 = load <16 x i16>, <16 x i16>* %9456, align 2, !tbaa !399
  %9458 = add nsw i64 %9141, %.pre-phi3629
  %9459 = getelementptr inbounds i16, i16* %blur_x, i64 %9458
  %9460 = bitcast i16* %9459 to <16 x i16>*
  %9461 = load <16 x i16>, <16 x i16>* %9460, align 2, !tbaa !399
  %9462 = getelementptr inbounds i16, i16* %9459, i64 16
  %9463 = bitcast i16* %9462 to <16 x i16>*
  %9464 = load <16 x i16>, <16 x i16>* %9463, align 2, !tbaa !399
  %9465 = add <16 x i16> %9426, %9419
  %9466 = add <16 x i16> %9465, %9433
  %9467 = add <16 x i16> %9466, %9440
  %9468 = add <16 x i16> %9467, %9447
  %9469 = add <16 x i16> %9468, %9454
  %9470 = add <16 x i16> %9469, %9461
  %9471 = add <16 x i16> %9429, %9422
  %9472 = add <16 x i16> %9471, %9436
  %9473 = add <16 x i16> %9472, %9443
  %9474 = add <16 x i16> %9473, %9450
  %9475 = add <16 x i16> %9474, %9457
  %9476 = add <16 x i16> %9475, %9464
  %9477 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9470, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9478 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9476, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9479 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9477, <16 x i16> %9470)
  %9480 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9478, <16 x i16> %9476)
  %9481 = shufflevector <16 x i16> %9479, <16 x i16> %9480, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9482 = lshr <32 x i16> %9481, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9483 = shufflevector <32 x i16> %9482, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9484 = add nsw i64 %9145, %.pre-phi3629
  %9485 = getelementptr inbounds i16, i16* %66, i64 %9484
  %9486 = bitcast i16* %9485 to <16 x i16>*
  store <16 x i16> %9483, <16 x i16>* %9486, align 2, !tbaa !401
  %9487 = shufflevector <32 x i16> %9482, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9488 = getelementptr inbounds i16, i16* %9485, i64 16
  %9489 = bitcast i16* %9488 to <16 x i16>*
  store <16 x i16> %9487, <16 x i16>* %9489, align 2, !tbaa !401
  %indvars.iv.next3426 = add nuw nsw i64 %indvars.iv3425, 1
  %.not2847 = icmp eq i64 %indvars.iv.next3426, %188
  br i1 %.not2847, label %"end for blur_y.s0.x.x.rebased399", label %"for blur_y.s0.x.x.rebased398"

"for blur_y.s0.x.x.rebased406":                   ; preds = %"for blur_y.s0.x.x.rebased406.preheader", %"consume blur_x414"
  %blur_y.s0.x.x.rebased408 = phi i32 [ %9640, %"consume blur_x414" ], [ 0, %"for blur_y.s0.x.x.rebased406.preheader" ]
  %9490 = add nsw i32 %blur_y.s0.x.x.rebased408, %t1670
  %a203 = shl nsw i32 %9490, 5
  %9491 = icmp sgt i32 %a14, %a203
  %b209 = select i1 %9491, i32 %a203, i32 %a14
  %9492 = icmp slt i32 %9490, 1
  %9493 = icmp sgt i32 %4, %a203
  %9494 = or i1 %9492, %9493
  br i1 %9494, label %"produce blur_x412", label %"consume blur_x414"

"end for blur_y.s0.x.x.rebased407":               ; preds = %"consume blur_x414", %"end for blur_y.s0.x.x.rebased399"
  br i1 %34, label %"produce blur_x418", label %after_bb415

"produce blur_x412":                              ; preds = %"for blur_y.s0.x.x.rebased406"
  %9495 = icmp slt i32 %b209, %4
  %blur_x.s0.x.v1.base.s413 = select i1 %9495, i32 %b209, i32 %4
  %t949 = add nsw i32 %blur_x.s0.x.v1.base.s413, %t1953
  %9496 = sext i32 %t949 to i64
  %9497 = getelementptr inbounds i16, i16* %read_input, i64 %9496
  %9498 = getelementptr inbounds i16, i16* %9497, i64 1
  %9499 = bitcast i16* %9498 to <16 x i16>*
  %9500 = load <16 x i16>, <16 x i16>* %9499, align 2, !tbaa !396
  %9501 = getelementptr inbounds i16, i16* %9497, i64 17
  %9502 = bitcast i16* %9501 to <16 x i16>*
  %9503 = load <16 x i16>, <16 x i16>* %9502, align 2, !tbaa !396
  %9504 = bitcast i16* %9497 to <16 x i16>*
  %9505 = load <16 x i16>, <16 x i16>* %9504, align 2, !tbaa !396
  %9506 = getelementptr inbounds i16, i16* %9497, i64 16
  %9507 = bitcast i16* %9506 to <16 x i16>*
  %9508 = load <16 x i16>, <16 x i16>* %9507, align 2, !tbaa !396
  %9509 = getelementptr inbounds i16, i16* %9497, i64 2
  %9510 = bitcast i16* %9509 to <16 x i16>*
  %9511 = load <16 x i16>, <16 x i16>* %9510, align 2, !tbaa !396
  %9512 = getelementptr inbounds i16, i16* %9497, i64 18
  %9513 = bitcast i16* %9512 to <16 x i16>*
  %9514 = load <16 x i16>, <16 x i16>* %9513, align 2, !tbaa !396
  %9515 = getelementptr inbounds i16, i16* %9497, i64 3
  %9516 = bitcast i16* %9515 to <16 x i16>*
  %9517 = load <16 x i16>, <16 x i16>* %9516, align 2, !tbaa !396
  %9518 = getelementptr inbounds i16, i16* %9497, i64 19
  %9519 = bitcast i16* %9518 to <16 x i16>*
  %9520 = load <16 x i16>, <16 x i16>* %9519, align 2, !tbaa !396
  %9521 = getelementptr inbounds i16, i16* %9497, i64 4
  %9522 = bitcast i16* %9521 to <16 x i16>*
  %9523 = load <16 x i16>, <16 x i16>* %9522, align 2, !tbaa !396
  %9524 = getelementptr inbounds i16, i16* %9497, i64 20
  %9525 = bitcast i16* %9524 to <16 x i16>*
  %9526 = load <16 x i16>, <16 x i16>* %9525, align 2, !tbaa !396
  %9527 = getelementptr inbounds i16, i16* %9497, i64 6
  %9528 = bitcast i16* %9527 to <16 x i16>*
  %9529 = load <16 x i16>, <16 x i16>* %9528, align 2, !tbaa !396
  %9530 = getelementptr inbounds i16, i16* %9497, i64 22
  %9531 = bitcast i16* %9530 to <16 x i16>*
  %9532 = load <16 x i16>, <16 x i16>* %9531, align 2, !tbaa !396
  %9533 = getelementptr inbounds i16, i16* %9497, i64 5
  %9534 = bitcast i16* %9533 to <16 x i16>*
  %9535 = load <16 x i16>, <16 x i16>* %9534, align 2, !tbaa !396
  %9536 = getelementptr inbounds i16, i16* %9497, i64 21
  %9537 = bitcast i16* %9536 to <16 x i16>*
  %9538 = load <16 x i16>, <16 x i16>* %9537, align 2, !tbaa !396
  %9539 = add <16 x i16> %9505, %9500
  %9540 = add <16 x i16> %9539, %9511
  %9541 = add <16 x i16> %9540, %9517
  %9542 = add <16 x i16> %9541, %9523
  %9543 = add <16 x i16> %9542, %9529
  %9544 = add <16 x i16> %9543, %9535
  %9545 = add <16 x i16> %9508, %9503
  %9546 = add <16 x i16> %9545, %9514
  %9547 = add <16 x i16> %9546, %9520
  %9548 = add <16 x i16> %9547, %9526
  %9549 = add <16 x i16> %9548, %9532
  %9550 = add <16 x i16> %9549, %9538
  %9551 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9544, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9552 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9550, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9553 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9551, <16 x i16> %9544)
  %9554 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9552, <16 x i16> %9550)
  %9555 = shufflevector <16 x i16> %9553, <16 x i16> %9554, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9556 = lshr <32 x i16> %9555, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9557 = shufflevector <32 x i16> %9556, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9558 = sext i32 %blur_x.s0.x.v1.base.s413 to i64
  %9559 = add nsw i64 %9558, %9321
  %9560 = getelementptr inbounds i16, i16* %blur_x, i64 %9559
  %9561 = bitcast i16* %9560 to <16 x i16>*
  store <16 x i16> %9557, <16 x i16>* %9561, align 2, !tbaa !399
  %9562 = shufflevector <32 x i16> %9556, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9563 = getelementptr inbounds i16, i16* %9560, i64 16
  %9564 = bitcast i16* %9563 to <16 x i16>*
  store <16 x i16> %9562, <16 x i16>* %9564, align 2, !tbaa !399
  br label %"consume blur_x414"

"consume blur_x414":                              ; preds = %"for blur_y.s0.x.x.rebased406", %"produce blur_x412"
  %9565 = sext i32 %b209 to i64
  %9566 = add nsw i64 %9324, %9565
  %9567 = getelementptr inbounds i16, i16* %blur_x, i64 %9566
  %9568 = bitcast i16* %9567 to <16 x i16>*
  %9569 = load <16 x i16>, <16 x i16>* %9568, align 2, !tbaa !399
  %9570 = getelementptr inbounds i16, i16* %9567, i64 16
  %9571 = bitcast i16* %9570 to <16 x i16>*
  %9572 = load <16 x i16>, <16 x i16>* %9571, align 2, !tbaa !399
  %9573 = add nsw i64 %9327, %9565
  %9574 = getelementptr inbounds i16, i16* %blur_x, i64 %9573
  %9575 = bitcast i16* %9574 to <16 x i16>*
  %9576 = load <16 x i16>, <16 x i16>* %9575, align 2, !tbaa !399
  %9577 = getelementptr inbounds i16, i16* %9574, i64 16
  %9578 = bitcast i16* %9577 to <16 x i16>*
  %9579 = load <16 x i16>, <16 x i16>* %9578, align 2, !tbaa !399
  %9580 = add nsw i64 %9330, %9565
  %9581 = getelementptr inbounds i16, i16* %blur_x, i64 %9580
  %9582 = bitcast i16* %9581 to <16 x i16>*
  %9583 = load <16 x i16>, <16 x i16>* %9582, align 2, !tbaa !399
  %9584 = getelementptr inbounds i16, i16* %9581, i64 16
  %9585 = bitcast i16* %9584 to <16 x i16>*
  %9586 = load <16 x i16>, <16 x i16>* %9585, align 2, !tbaa !399
  %9587 = add nsw i64 %9333, %9565
  %9588 = getelementptr inbounds i16, i16* %blur_x, i64 %9587
  %9589 = bitcast i16* %9588 to <16 x i16>*
  %9590 = load <16 x i16>, <16 x i16>* %9589, align 2, !tbaa !399
  %9591 = getelementptr inbounds i16, i16* %9588, i64 16
  %9592 = bitcast i16* %9591 to <16 x i16>*
  %9593 = load <16 x i16>, <16 x i16>* %9592, align 2, !tbaa !399
  %9594 = add nsw i64 %9336, %9565
  %9595 = getelementptr inbounds i16, i16* %blur_x, i64 %9594
  %9596 = bitcast i16* %9595 to <16 x i16>*
  %9597 = load <16 x i16>, <16 x i16>* %9596, align 2, !tbaa !399
  %9598 = getelementptr inbounds i16, i16* %9595, i64 16
  %9599 = bitcast i16* %9598 to <16 x i16>*
  %9600 = load <16 x i16>, <16 x i16>* %9599, align 2, !tbaa !399
  %9601 = add nsw i64 %9339, %9565
  %9602 = getelementptr inbounds i16, i16* %blur_x, i64 %9601
  %9603 = bitcast i16* %9602 to <16 x i16>*
  %9604 = load <16 x i16>, <16 x i16>* %9603, align 2, !tbaa !399
  %9605 = getelementptr inbounds i16, i16* %9602, i64 16
  %9606 = bitcast i16* %9605 to <16 x i16>*
  %9607 = load <16 x i16>, <16 x i16>* %9606, align 2, !tbaa !399
  %9608 = add nsw i64 %9342, %9565
  %9609 = getelementptr inbounds i16, i16* %blur_x, i64 %9608
  %9610 = bitcast i16* %9609 to <16 x i16>*
  %9611 = load <16 x i16>, <16 x i16>* %9610, align 2, !tbaa !399
  %9612 = getelementptr inbounds i16, i16* %9609, i64 16
  %9613 = bitcast i16* %9612 to <16 x i16>*
  %9614 = load <16 x i16>, <16 x i16>* %9613, align 2, !tbaa !399
  %9615 = add <16 x i16> %9576, %9569
  %9616 = add <16 x i16> %9615, %9583
  %9617 = add <16 x i16> %9616, %9590
  %9618 = add <16 x i16> %9617, %9597
  %9619 = add <16 x i16> %9618, %9604
  %9620 = add <16 x i16> %9619, %9611
  %9621 = add <16 x i16> %9579, %9572
  %9622 = add <16 x i16> %9621, %9586
  %9623 = add <16 x i16> %9622, %9593
  %9624 = add <16 x i16> %9623, %9600
  %9625 = add <16 x i16> %9624, %9607
  %9626 = add <16 x i16> %9625, %9614
  %9627 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9620, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9628 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9626, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9629 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9627, <16 x i16> %9620)
  %9630 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9628, <16 x i16> %9626)
  %9631 = shufflevector <16 x i16> %9629, <16 x i16> %9630, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9632 = lshr <32 x i16> %9631, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9633 = shufflevector <32 x i16> %9632, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9634 = add nsw i64 %9346, %9565
  %9635 = getelementptr inbounds i16, i16* %66, i64 %9634
  %9636 = bitcast i16* %9635 to <16 x i16>*
  store <16 x i16> %9633, <16 x i16>* %9636, align 2, !tbaa !401
  %9637 = shufflevector <32 x i16> %9632, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9638 = getelementptr inbounds i16, i16* %9635, i64 16
  %9639 = bitcast i16* %9638 to <16 x i16>*
  store <16 x i16> %9637, <16 x i16>* %9639, align 2, !tbaa !401
  %9640 = add nuw nsw i32 %blur_y.s0.x.x.rebased408, 1
  %.not2846 = icmp eq i32 %9640, %t1727
  br i1 %.not2846, label %"end for blur_y.s0.x.x.rebased407", label %"for blur_y.s0.x.x.rebased406"

after_bb415:                                      ; preds = %"end for blur_y.s0.x.x.rebased407", %"produce blur_x418"
  br i1 %100, label %"for blur_y.s0.x.x.rebased420.preheader", label %"end for blur_y.s0.x.x.rebased421", !prof !386

"for blur_y.s0.x.x.rebased420.preheader":         ; preds = %after_bb415
  %9641 = sext i32 %t1744 to i64
  %9642 = zext i32 %.pre-phi3599 to i64
  %9643 = mul nsw i64 %9642, %116
  %9644 = sub nsw i64 %9643, %96
  %9645 = zext i32 %.pre-phi3595 to i64
  %9646 = mul nsw i64 %9645, %116
  %9647 = sub nsw i64 %9646, %96
  %9648 = zext i32 %.pre-phi3605 to i64
  %9649 = mul nsw i64 %9648, %116
  %9650 = sub nsw i64 %9649, %96
  %9651 = zext i32 %.pre-phi to i64
  %9652 = mul nsw i64 %9651, %116
  %9653 = sub nsw i64 %9652, %96
  %9654 = zext i32 %.pre-phi3579 to i64
  %9655 = mul nsw i64 %9654, %116
  %9656 = sub nsw i64 %9655, %96
  %9657 = zext i32 %.pre-phi3587 to i64
  %9658 = mul nsw i64 %9657, %116
  %9659 = sub nsw i64 %9658, %96
  %9660 = zext i32 %.pre-phi3583 to i64
  %9661 = mul nsw i64 %9660, %116
  %9662 = sub nsw i64 %9661, %96
  %9663 = sext i32 %a26 to i64
  %9664 = add nsw i64 %9663, 13
  %9665 = mul nsw i64 %9664, %117
  %9666 = add nsw i64 %9665, %120
  br label %"for blur_y.s0.x.x.rebased420"

"produce blur_x418":                              ; preds = %"end for blur_y.s0.x.x.rebased407"
  %9667 = getelementptr inbounds i16, i16* %read_input, i64 %145
  %9668 = getelementptr inbounds i16, i16* %9667, i64 -31
  %9669 = bitcast i16* %9668 to <16 x i16>*
  %9670 = load <16 x i16>, <16 x i16>* %9669, align 2, !tbaa !396
  %9671 = getelementptr inbounds i16, i16* %9667, i64 -15
  %9672 = bitcast i16* %9671 to <16 x i16>*
  %9673 = load <16 x i16>, <16 x i16>* %9672, align 2, !tbaa !396
  %9674 = getelementptr inbounds i16, i16* %9667, i64 -32
  %9675 = bitcast i16* %9674 to <16 x i16>*
  %9676 = load <16 x i16>, <16 x i16>* %9675, align 2, !tbaa !396
  %9677 = getelementptr inbounds i16, i16* %9667, i64 -16
  %9678 = bitcast i16* %9677 to <16 x i16>*
  %9679 = load <16 x i16>, <16 x i16>* %9678, align 2, !tbaa !396
  %9680 = getelementptr inbounds i16, i16* %9667, i64 -30
  %9681 = bitcast i16* %9680 to <16 x i16>*
  %9682 = load <16 x i16>, <16 x i16>* %9681, align 2, !tbaa !396
  %9683 = getelementptr inbounds i16, i16* %9667, i64 -14
  %9684 = bitcast i16* %9683 to <16 x i16>*
  %9685 = load <16 x i16>, <16 x i16>* %9684, align 2, !tbaa !396
  %9686 = getelementptr inbounds i16, i16* %9667, i64 -29
  %9687 = bitcast i16* %9686 to <16 x i16>*
  %9688 = load <16 x i16>, <16 x i16>* %9687, align 2, !tbaa !396
  %9689 = getelementptr inbounds i16, i16* %9667, i64 -13
  %9690 = bitcast i16* %9689 to <16 x i16>*
  %9691 = load <16 x i16>, <16 x i16>* %9690, align 2, !tbaa !396
  %9692 = getelementptr inbounds i16, i16* %9667, i64 -28
  %9693 = bitcast i16* %9692 to <16 x i16>*
  %9694 = load <16 x i16>, <16 x i16>* %9693, align 2, !tbaa !396
  %9695 = getelementptr inbounds i16, i16* %9667, i64 -12
  %9696 = bitcast i16* %9695 to <16 x i16>*
  %9697 = load <16 x i16>, <16 x i16>* %9696, align 2, !tbaa !396
  %9698 = getelementptr inbounds i16, i16* %9667, i64 -26
  %9699 = bitcast i16* %9698 to <16 x i16>*
  %9700 = load <16 x i16>, <16 x i16>* %9699, align 2, !tbaa !396
  %9701 = getelementptr inbounds i16, i16* %9667, i64 -10
  %9702 = bitcast i16* %9701 to <16 x i16>*
  %9703 = load <16 x i16>, <16 x i16>* %9702, align 2, !tbaa !396
  %9704 = getelementptr inbounds i16, i16* %9667, i64 -27
  %9705 = bitcast i16* %9704 to <16 x i16>*
  %9706 = load <16 x i16>, <16 x i16>* %9705, align 2, !tbaa !396
  %9707 = getelementptr inbounds i16, i16* %9667, i64 -11
  %9708 = bitcast i16* %9707 to <16 x i16>*
  %9709 = load <16 x i16>, <16 x i16>* %9708, align 2, !tbaa !396
  %9710 = add <16 x i16> %9676, %9670
  %9711 = add <16 x i16> %9710, %9682
  %9712 = add <16 x i16> %9711, %9688
  %9713 = add <16 x i16> %9712, %9694
  %9714 = add <16 x i16> %9713, %9700
  %9715 = add <16 x i16> %9714, %9706
  %9716 = add <16 x i16> %9679, %9673
  %9717 = add <16 x i16> %9716, %9685
  %9718 = add <16 x i16> %9717, %9691
  %9719 = add <16 x i16> %9718, %9697
  %9720 = add <16 x i16> %9719, %9703
  %9721 = add <16 x i16> %9720, %9709
  %9722 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9715, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9723 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9721, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9724 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9722, <16 x i16> %9715)
  %9725 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9723, <16 x i16> %9721)
  %9726 = shufflevector <16 x i16> %9724, <16 x i16> %9725, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9727 = lshr <32 x i16> %9726, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9728 = shufflevector <32 x i16> %9727, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9729 = zext i32 %.pre-phi3587 to i64
  %9730 = mul nsw i64 %97, %9729
  %9731 = add nsw i64 %99, %9730
  %9732 = getelementptr inbounds i16, i16* %blur_x, i64 %9731
  %9733 = getelementptr inbounds i16, i16* %9732, i64 -32
  %9734 = bitcast i16* %9733 to <16 x i16>*
  store <16 x i16> %9728, <16 x i16>* %9734, align 2, !tbaa !399
  %9735 = shufflevector <32 x i16> %9727, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9736 = getelementptr inbounds i16, i16* %9732, i64 -16
  %9737 = bitcast i16* %9736 to <16 x i16>*
  store <16 x i16> %9735, <16 x i16>* %9737, align 2, !tbaa !399
  %9738 = zext i32 %.pre-phi3599 to i64
  %9739 = mul nsw i64 %9738, %116
  %9740 = add nsw i64 %9739, %94
  %9741 = getelementptr inbounds i16, i16* %blur_x, i64 %9740
  %9742 = getelementptr inbounds i16, i16* %9741, i64 -32
  %9743 = bitcast i16* %9742 to <16 x i16>*
  %9744 = load <16 x i16>, <16 x i16>* %9743, align 2, !tbaa !399
  %9745 = getelementptr inbounds i16, i16* %9741, i64 -16
  %9746 = bitcast i16* %9745 to <16 x i16>*
  %9747 = load <16 x i16>, <16 x i16>* %9746, align 2, !tbaa !399
  %9748 = zext i32 %.pre-phi3595 to i64
  %9749 = mul nsw i64 %9748, %116
  %9750 = add nsw i64 %9749, %94
  %9751 = getelementptr inbounds i16, i16* %blur_x, i64 %9750
  %9752 = getelementptr inbounds i16, i16* %9751, i64 -32
  %9753 = bitcast i16* %9752 to <16 x i16>*
  %9754 = load <16 x i16>, <16 x i16>* %9753, align 2, !tbaa !399
  %9755 = getelementptr inbounds i16, i16* %9751, i64 -16
  %9756 = bitcast i16* %9755 to <16 x i16>*
  %9757 = load <16 x i16>, <16 x i16>* %9756, align 2, !tbaa !399
  %9758 = zext i32 %.pre-phi3605 to i64
  %9759 = mul nsw i64 %9758, %116
  %9760 = add nsw i64 %9759, %94
  %9761 = getelementptr inbounds i16, i16* %blur_x, i64 %9760
  %9762 = getelementptr inbounds i16, i16* %9761, i64 -32
  %9763 = bitcast i16* %9762 to <16 x i16>*
  %9764 = load <16 x i16>, <16 x i16>* %9763, align 2, !tbaa !399
  %9765 = getelementptr inbounds i16, i16* %9761, i64 -16
  %9766 = bitcast i16* %9765 to <16 x i16>*
  %9767 = load <16 x i16>, <16 x i16>* %9766, align 2, !tbaa !399
  %9768 = zext i32 %.pre-phi to i64
  %9769 = mul nsw i64 %9768, %116
  %9770 = add nsw i64 %9769, %94
  %9771 = getelementptr inbounds i16, i16* %blur_x, i64 %9770
  %9772 = getelementptr inbounds i16, i16* %9771, i64 -32
  %9773 = bitcast i16* %9772 to <16 x i16>*
  %9774 = load <16 x i16>, <16 x i16>* %9773, align 2, !tbaa !399
  %9775 = getelementptr inbounds i16, i16* %9771, i64 -16
  %9776 = bitcast i16* %9775 to <16 x i16>*
  %9777 = load <16 x i16>, <16 x i16>* %9776, align 2, !tbaa !399
  %9778 = zext i32 %.pre-phi3579 to i64
  %9779 = mul nsw i64 %9778, %116
  %9780 = add nsw i64 %9779, %94
  %9781 = getelementptr inbounds i16, i16* %blur_x, i64 %9780
  %9782 = getelementptr inbounds i16, i16* %9781, i64 -32
  %9783 = bitcast i16* %9782 to <16 x i16>*
  %9784 = load <16 x i16>, <16 x i16>* %9783, align 2, !tbaa !399
  %9785 = getelementptr inbounds i16, i16* %9781, i64 -16
  %9786 = bitcast i16* %9785 to <16 x i16>*
  %9787 = load <16 x i16>, <16 x i16>* %9786, align 2, !tbaa !399
  %9788 = mul nsw i64 %9729, %116
  %9789 = add nsw i64 %9788, %94
  %9790 = getelementptr inbounds i16, i16* %blur_x, i64 %9789
  %9791 = getelementptr inbounds i16, i16* %9790, i64 -32
  %9792 = bitcast i16* %9791 to <16 x i16>*
  %9793 = load <16 x i16>, <16 x i16>* %9792, align 2, !tbaa !399
  %9794 = getelementptr inbounds i16, i16* %9790, i64 -16
  %9795 = bitcast i16* %9794 to <16 x i16>*
  %9796 = load <16 x i16>, <16 x i16>* %9795, align 2, !tbaa !399
  %9797 = zext i32 %.pre-phi3583 to i64
  %9798 = mul nsw i64 %9797, %116
  %9799 = add nsw i64 %9798, %94
  %9800 = getelementptr inbounds i16, i16* %blur_x, i64 %9799
  %9801 = getelementptr inbounds i16, i16* %9800, i64 -32
  %9802 = bitcast i16* %9801 to <16 x i16>*
  %9803 = load <16 x i16>, <16 x i16>* %9802, align 2, !tbaa !399
  %9804 = getelementptr inbounds i16, i16* %9800, i64 -16
  %9805 = bitcast i16* %9804 to <16 x i16>*
  %9806 = load <16 x i16>, <16 x i16>* %9805, align 2, !tbaa !399
  %9807 = add <16 x i16> %9754, %9744
  %9808 = add <16 x i16> %9807, %9764
  %9809 = add <16 x i16> %9808, %9774
  %9810 = add <16 x i16> %9809, %9784
  %9811 = add <16 x i16> %9810, %9793
  %9812 = add <16 x i16> %9811, %9803
  %9813 = add <16 x i16> %9757, %9747
  %9814 = add <16 x i16> %9813, %9767
  %9815 = add <16 x i16> %9814, %9777
  %9816 = add <16 x i16> %9815, %9787
  %9817 = add <16 x i16> %9816, %9796
  %9818 = add <16 x i16> %9817, %9806
  %9819 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9812, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9820 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9818, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9821 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9819, <16 x i16> %9812)
  %9822 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9820, <16 x i16> %9818)
  %9823 = shufflevector <16 x i16> %9821, <16 x i16> %9822, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9824 = lshr <32 x i16> %9823, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9825 = shufflevector <32 x i16> %9824, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9826 = sext i32 %a26 to i64
  %9827 = add nsw i64 %9826, 13
  %9828 = mul nsw i64 %9827, %117
  %9829 = add nsw i64 %119, %9828
  %9830 = getelementptr inbounds i16, i16* %66, i64 %9829
  %9831 = getelementptr inbounds i16, i16* %9830, i64 -32
  %9832 = bitcast i16* %9831 to <16 x i16>*
  store <16 x i16> %9825, <16 x i16>* %9832, align 2, !tbaa !401
  %9833 = shufflevector <32 x i16> %9824, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9834 = getelementptr inbounds i16, i16* %9830, i64 -16
  %9835 = bitcast i16* %9834 to <16 x i16>*
  store <16 x i16> %9833, <16 x i16>* %9835, align 2, !tbaa !401
  br label %after_bb415

"for blur_y.s0.x.x.rebased420":                   ; preds = %"for blur_y.s0.x.x.rebased420.preheader", %"consume blur_x427"
  %indvars.iv3428 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased420.preheader" ], [ %indvars.iv.next3429, %"consume blur_x427" ]
  %9836 = add nsw i64 %indvars.iv3428, %101
  %9837 = icmp slt i64 %9836, 1
  %9838 = trunc i64 %9836 to i32
  %9839 = shl nsw i32 %9838, 5
  %9840 = icmp sgt i32 %4, %9839
  %9841 = or i1 %9837, %9840
  br i1 %9841, label %"produce blur_x426", label %"for blur_y.s0.x.x.rebased420.consume blur_x427_crit_edge"

"for blur_y.s0.x.x.rebased420.consume blur_x427_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased420"
  %.pre3630 = shl nsw i64 %9836, 5
  br label %"consume blur_x427"

"end for blur_y.s0.x.x.rebased421":               ; preds = %"consume blur_x427", %after_bb415
  br i1 %102, label %"for blur_y.s0.x.x.rebased428.preheader", label %"end for blur_y.s0.x.x.rebased429", !prof !386

"for blur_y.s0.x.x.rebased428.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased421"
  %9842 = sext i32 %t1744 to i64
  %9843 = zext i32 %.pre-phi3599 to i64
  %9844 = mul nsw i64 %9843, %116
  %9845 = sub nsw i64 %9844, %96
  %9846 = zext i32 %.pre-phi3595 to i64
  %9847 = mul nsw i64 %9846, %116
  %9848 = sub nsw i64 %9847, %96
  %9849 = zext i32 %.pre-phi3605 to i64
  %9850 = mul nsw i64 %9849, %116
  %9851 = sub nsw i64 %9850, %96
  %9852 = zext i32 %.pre-phi to i64
  %9853 = mul nsw i64 %9852, %116
  %9854 = sub nsw i64 %9853, %96
  %9855 = zext i32 %.pre-phi3579 to i64
  %9856 = mul nsw i64 %9855, %116
  %9857 = sub nsw i64 %9856, %96
  %9858 = zext i32 %.pre-phi3587 to i64
  %9859 = mul nsw i64 %9858, %116
  %9860 = sub nsw i64 %9859, %96
  %9861 = zext i32 %.pre-phi3583 to i64
  %9862 = mul nsw i64 %9861, %116
  %9863 = sub nsw i64 %9862, %96
  %9864 = sext i32 %a26 to i64
  %9865 = add nsw i64 %9864, 13
  %9866 = mul nsw i64 %9865, %117
  %9867 = add nsw i64 %9866, %120
  br label %"for blur_y.s0.x.x.rebased428"

"produce blur_x426":                              ; preds = %"for blur_y.s0.x.x.rebased420"
  %t960 = add nsw i32 %9839, %t1969
  %9868 = sext i32 %t960 to i64
  %9869 = getelementptr inbounds i16, i16* %read_input, i64 %9868
  %9870 = getelementptr inbounds i16, i16* %9869, i64 1
  %9871 = bitcast i16* %9870 to <16 x i16>*
  %9872 = load <16 x i16>, <16 x i16>* %9871, align 2, !tbaa !396
  %9873 = getelementptr inbounds i16, i16* %9869, i64 17
  %9874 = bitcast i16* %9873 to <16 x i16>*
  %9875 = load <16 x i16>, <16 x i16>* %9874, align 2, !tbaa !396
  %9876 = bitcast i16* %9869 to <16 x i16>*
  %9877 = load <16 x i16>, <16 x i16>* %9876, align 2, !tbaa !396
  %9878 = getelementptr inbounds i16, i16* %9869, i64 16
  %9879 = bitcast i16* %9878 to <16 x i16>*
  %9880 = load <16 x i16>, <16 x i16>* %9879, align 2, !tbaa !396
  %9881 = getelementptr inbounds i16, i16* %9869, i64 2
  %9882 = bitcast i16* %9881 to <16 x i16>*
  %9883 = load <16 x i16>, <16 x i16>* %9882, align 2, !tbaa !396
  %9884 = getelementptr inbounds i16, i16* %9869, i64 18
  %9885 = bitcast i16* %9884 to <16 x i16>*
  %9886 = load <16 x i16>, <16 x i16>* %9885, align 2, !tbaa !396
  %9887 = getelementptr inbounds i16, i16* %9869, i64 3
  %9888 = bitcast i16* %9887 to <16 x i16>*
  %9889 = load <16 x i16>, <16 x i16>* %9888, align 2, !tbaa !396
  %9890 = getelementptr inbounds i16, i16* %9869, i64 19
  %9891 = bitcast i16* %9890 to <16 x i16>*
  %9892 = load <16 x i16>, <16 x i16>* %9891, align 2, !tbaa !396
  %9893 = getelementptr inbounds i16, i16* %9869, i64 4
  %9894 = bitcast i16* %9893 to <16 x i16>*
  %9895 = load <16 x i16>, <16 x i16>* %9894, align 2, !tbaa !396
  %9896 = getelementptr inbounds i16, i16* %9869, i64 20
  %9897 = bitcast i16* %9896 to <16 x i16>*
  %9898 = load <16 x i16>, <16 x i16>* %9897, align 2, !tbaa !396
  %9899 = getelementptr inbounds i16, i16* %9869, i64 6
  %9900 = bitcast i16* %9899 to <16 x i16>*
  %9901 = load <16 x i16>, <16 x i16>* %9900, align 2, !tbaa !396
  %9902 = getelementptr inbounds i16, i16* %9869, i64 22
  %9903 = bitcast i16* %9902 to <16 x i16>*
  %9904 = load <16 x i16>, <16 x i16>* %9903, align 2, !tbaa !396
  %9905 = getelementptr inbounds i16, i16* %9869, i64 5
  %9906 = bitcast i16* %9905 to <16 x i16>*
  %9907 = load <16 x i16>, <16 x i16>* %9906, align 2, !tbaa !396
  %9908 = getelementptr inbounds i16, i16* %9869, i64 21
  %9909 = bitcast i16* %9908 to <16 x i16>*
  %9910 = load <16 x i16>, <16 x i16>* %9909, align 2, !tbaa !396
  %9911 = add <16 x i16> %9877, %9872
  %9912 = add <16 x i16> %9911, %9883
  %9913 = add <16 x i16> %9912, %9889
  %9914 = add <16 x i16> %9913, %9895
  %9915 = add <16 x i16> %9914, %9901
  %9916 = add <16 x i16> %9915, %9907
  %9917 = add <16 x i16> %9880, %9875
  %9918 = add <16 x i16> %9917, %9886
  %9919 = add <16 x i16> %9918, %9892
  %9920 = add <16 x i16> %9919, %9898
  %9921 = add <16 x i16> %9920, %9904
  %9922 = add <16 x i16> %9921, %9910
  %9923 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9916, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9924 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9922, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9925 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9923, <16 x i16> %9916)
  %9926 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9924, <16 x i16> %9922)
  %9927 = shufflevector <16 x i16> %9925, <16 x i16> %9926, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9928 = lshr <32 x i16> %9927, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9929 = shufflevector <32 x i16> %9928, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9930 = shl nsw i64 %9836, 5
  %9931 = add nsw i64 %9930, %9641
  %9932 = getelementptr inbounds i16, i16* %blur_x, i64 %9931
  %9933 = bitcast i16* %9932 to <16 x i16>*
  store <16 x i16> %9929, <16 x i16>* %9933, align 2, !tbaa !399
  %9934 = shufflevector <32 x i16> %9928, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9935 = getelementptr inbounds i16, i16* %9932, i64 16
  %9936 = bitcast i16* %9935 to <16 x i16>*
  store <16 x i16> %9934, <16 x i16>* %9936, align 2, !tbaa !399
  br label %"consume blur_x427"

"consume blur_x427":                              ; preds = %"for blur_y.s0.x.x.rebased420.consume blur_x427_crit_edge", %"produce blur_x426"
  %.pre-phi3631 = phi i64 [ %.pre3630, %"for blur_y.s0.x.x.rebased420.consume blur_x427_crit_edge" ], [ %9930, %"produce blur_x426" ]
  %9937 = add nsw i64 %9644, %.pre-phi3631
  %9938 = getelementptr inbounds i16, i16* %blur_x, i64 %9937
  %9939 = bitcast i16* %9938 to <16 x i16>*
  %9940 = load <16 x i16>, <16 x i16>* %9939, align 2, !tbaa !399
  %9941 = getelementptr inbounds i16, i16* %9938, i64 16
  %9942 = bitcast i16* %9941 to <16 x i16>*
  %9943 = load <16 x i16>, <16 x i16>* %9942, align 2, !tbaa !399
  %9944 = add nsw i64 %9647, %.pre-phi3631
  %9945 = getelementptr inbounds i16, i16* %blur_x, i64 %9944
  %9946 = bitcast i16* %9945 to <16 x i16>*
  %9947 = load <16 x i16>, <16 x i16>* %9946, align 2, !tbaa !399
  %9948 = getelementptr inbounds i16, i16* %9945, i64 16
  %9949 = bitcast i16* %9948 to <16 x i16>*
  %9950 = load <16 x i16>, <16 x i16>* %9949, align 2, !tbaa !399
  %9951 = add nsw i64 %9650, %.pre-phi3631
  %9952 = getelementptr inbounds i16, i16* %blur_x, i64 %9951
  %9953 = bitcast i16* %9952 to <16 x i16>*
  %9954 = load <16 x i16>, <16 x i16>* %9953, align 2, !tbaa !399
  %9955 = getelementptr inbounds i16, i16* %9952, i64 16
  %9956 = bitcast i16* %9955 to <16 x i16>*
  %9957 = load <16 x i16>, <16 x i16>* %9956, align 2, !tbaa !399
  %9958 = add nsw i64 %9653, %.pre-phi3631
  %9959 = getelementptr inbounds i16, i16* %blur_x, i64 %9958
  %9960 = bitcast i16* %9959 to <16 x i16>*
  %9961 = load <16 x i16>, <16 x i16>* %9960, align 2, !tbaa !399
  %9962 = getelementptr inbounds i16, i16* %9959, i64 16
  %9963 = bitcast i16* %9962 to <16 x i16>*
  %9964 = load <16 x i16>, <16 x i16>* %9963, align 2, !tbaa !399
  %9965 = add nsw i64 %9656, %.pre-phi3631
  %9966 = getelementptr inbounds i16, i16* %blur_x, i64 %9965
  %9967 = bitcast i16* %9966 to <16 x i16>*
  %9968 = load <16 x i16>, <16 x i16>* %9967, align 2, !tbaa !399
  %9969 = getelementptr inbounds i16, i16* %9966, i64 16
  %9970 = bitcast i16* %9969 to <16 x i16>*
  %9971 = load <16 x i16>, <16 x i16>* %9970, align 2, !tbaa !399
  %9972 = add nsw i64 %9659, %.pre-phi3631
  %9973 = getelementptr inbounds i16, i16* %blur_x, i64 %9972
  %9974 = bitcast i16* %9973 to <16 x i16>*
  %9975 = load <16 x i16>, <16 x i16>* %9974, align 2, !tbaa !399
  %9976 = getelementptr inbounds i16, i16* %9973, i64 16
  %9977 = bitcast i16* %9976 to <16 x i16>*
  %9978 = load <16 x i16>, <16 x i16>* %9977, align 2, !tbaa !399
  %9979 = add nsw i64 %9662, %.pre-phi3631
  %9980 = getelementptr inbounds i16, i16* %blur_x, i64 %9979
  %9981 = bitcast i16* %9980 to <16 x i16>*
  %9982 = load <16 x i16>, <16 x i16>* %9981, align 2, !tbaa !399
  %9983 = getelementptr inbounds i16, i16* %9980, i64 16
  %9984 = bitcast i16* %9983 to <16 x i16>*
  %9985 = load <16 x i16>, <16 x i16>* %9984, align 2, !tbaa !399
  %9986 = add <16 x i16> %9947, %9940
  %9987 = add <16 x i16> %9986, %9954
  %9988 = add <16 x i16> %9987, %9961
  %9989 = add <16 x i16> %9988, %9968
  %9990 = add <16 x i16> %9989, %9975
  %9991 = add <16 x i16> %9990, %9982
  %9992 = add <16 x i16> %9950, %9943
  %9993 = add <16 x i16> %9992, %9957
  %9994 = add <16 x i16> %9993, %9964
  %9995 = add <16 x i16> %9994, %9971
  %9996 = add <16 x i16> %9995, %9978
  %9997 = add <16 x i16> %9996, %9985
  %9998 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9991, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9999 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9997, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10000 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9998, <16 x i16> %9991)
  %10001 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9999, <16 x i16> %9997)
  %10002 = shufflevector <16 x i16> %10000, <16 x i16> %10001, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10003 = lshr <32 x i16> %10002, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10004 = shufflevector <32 x i16> %10003, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10005 = add nsw i64 %9666, %.pre-phi3631
  %10006 = getelementptr inbounds i16, i16* %66, i64 %10005
  %10007 = bitcast i16* %10006 to <16 x i16>*
  store <16 x i16> %10004, <16 x i16>* %10007, align 2, !tbaa !401
  %10008 = shufflevector <32 x i16> %10003, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10009 = getelementptr inbounds i16, i16* %10006, i64 16
  %10010 = bitcast i16* %10009 to <16 x i16>*
  store <16 x i16> %10008, <16 x i16>* %10010, align 2, !tbaa !401
  %indvars.iv.next3429 = add nuw nsw i64 %indvars.iv3428, 1
  %.not2845 = icmp eq i64 %indvars.iv.next3429, %188
  br i1 %.not2845, label %"end for blur_y.s0.x.x.rebased421", label %"for blur_y.s0.x.x.rebased420"

"for blur_y.s0.x.x.rebased428":                   ; preds = %"for blur_y.s0.x.x.rebased428.preheader", %"consume blur_x436"
  %blur_y.s0.x.x.rebased430 = phi i32 [ %10161, %"consume blur_x436" ], [ 0, %"for blur_y.s0.x.x.rebased428.preheader" ]
  %10011 = add nsw i32 %blur_y.s0.x.x.rebased430, %t1670
  %a210 = shl nsw i32 %10011, 5
  %10012 = icmp sgt i32 %a14, %a210
  %b216 = select i1 %10012, i32 %a210, i32 %a14
  %10013 = icmp slt i32 %10011, 1
  %10014 = icmp sgt i32 %4, %a210
  %10015 = or i1 %10013, %10014
  br i1 %10015, label %"produce blur_x434", label %"consume blur_x436"

"end for blur_y.s0.x.x.rebased429":               ; preds = %"consume blur_x436", %"end for blur_y.s0.x.x.rebased421"
  br i1 %34, label %"produce blur_x440", label %after_bb437

"produce blur_x434":                              ; preds = %"for blur_y.s0.x.x.rebased428"
  %10016 = icmp slt i32 %b216, %4
  %blur_x.s0.x.v1.base.s435 = select i1 %10016, i32 %b216, i32 %4
  %t965 = add nsw i32 %blur_x.s0.x.v1.base.s435, %t1969
  %10017 = sext i32 %t965 to i64
  %10018 = getelementptr inbounds i16, i16* %read_input, i64 %10017
  %10019 = getelementptr inbounds i16, i16* %10018, i64 1
  %10020 = bitcast i16* %10019 to <16 x i16>*
  %10021 = load <16 x i16>, <16 x i16>* %10020, align 2, !tbaa !396
  %10022 = getelementptr inbounds i16, i16* %10018, i64 17
  %10023 = bitcast i16* %10022 to <16 x i16>*
  %10024 = load <16 x i16>, <16 x i16>* %10023, align 2, !tbaa !396
  %10025 = bitcast i16* %10018 to <16 x i16>*
  %10026 = load <16 x i16>, <16 x i16>* %10025, align 2, !tbaa !396
  %10027 = getelementptr inbounds i16, i16* %10018, i64 16
  %10028 = bitcast i16* %10027 to <16 x i16>*
  %10029 = load <16 x i16>, <16 x i16>* %10028, align 2, !tbaa !396
  %10030 = getelementptr inbounds i16, i16* %10018, i64 2
  %10031 = bitcast i16* %10030 to <16 x i16>*
  %10032 = load <16 x i16>, <16 x i16>* %10031, align 2, !tbaa !396
  %10033 = getelementptr inbounds i16, i16* %10018, i64 18
  %10034 = bitcast i16* %10033 to <16 x i16>*
  %10035 = load <16 x i16>, <16 x i16>* %10034, align 2, !tbaa !396
  %10036 = getelementptr inbounds i16, i16* %10018, i64 3
  %10037 = bitcast i16* %10036 to <16 x i16>*
  %10038 = load <16 x i16>, <16 x i16>* %10037, align 2, !tbaa !396
  %10039 = getelementptr inbounds i16, i16* %10018, i64 19
  %10040 = bitcast i16* %10039 to <16 x i16>*
  %10041 = load <16 x i16>, <16 x i16>* %10040, align 2, !tbaa !396
  %10042 = getelementptr inbounds i16, i16* %10018, i64 4
  %10043 = bitcast i16* %10042 to <16 x i16>*
  %10044 = load <16 x i16>, <16 x i16>* %10043, align 2, !tbaa !396
  %10045 = getelementptr inbounds i16, i16* %10018, i64 20
  %10046 = bitcast i16* %10045 to <16 x i16>*
  %10047 = load <16 x i16>, <16 x i16>* %10046, align 2, !tbaa !396
  %10048 = getelementptr inbounds i16, i16* %10018, i64 6
  %10049 = bitcast i16* %10048 to <16 x i16>*
  %10050 = load <16 x i16>, <16 x i16>* %10049, align 2, !tbaa !396
  %10051 = getelementptr inbounds i16, i16* %10018, i64 22
  %10052 = bitcast i16* %10051 to <16 x i16>*
  %10053 = load <16 x i16>, <16 x i16>* %10052, align 2, !tbaa !396
  %10054 = getelementptr inbounds i16, i16* %10018, i64 5
  %10055 = bitcast i16* %10054 to <16 x i16>*
  %10056 = load <16 x i16>, <16 x i16>* %10055, align 2, !tbaa !396
  %10057 = getelementptr inbounds i16, i16* %10018, i64 21
  %10058 = bitcast i16* %10057 to <16 x i16>*
  %10059 = load <16 x i16>, <16 x i16>* %10058, align 2, !tbaa !396
  %10060 = add <16 x i16> %10026, %10021
  %10061 = add <16 x i16> %10060, %10032
  %10062 = add <16 x i16> %10061, %10038
  %10063 = add <16 x i16> %10062, %10044
  %10064 = add <16 x i16> %10063, %10050
  %10065 = add <16 x i16> %10064, %10056
  %10066 = add <16 x i16> %10029, %10024
  %10067 = add <16 x i16> %10066, %10035
  %10068 = add <16 x i16> %10067, %10041
  %10069 = add <16 x i16> %10068, %10047
  %10070 = add <16 x i16> %10069, %10053
  %10071 = add <16 x i16> %10070, %10059
  %10072 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10065, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10073 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10071, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10074 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10072, <16 x i16> %10065)
  %10075 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10073, <16 x i16> %10071)
  %10076 = shufflevector <16 x i16> %10074, <16 x i16> %10075, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10077 = lshr <32 x i16> %10076, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10078 = shufflevector <32 x i16> %10077, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10079 = sext i32 %blur_x.s0.x.v1.base.s435 to i64
  %10080 = add nsw i64 %10079, %9842
  %10081 = getelementptr inbounds i16, i16* %blur_x, i64 %10080
  %10082 = bitcast i16* %10081 to <16 x i16>*
  store <16 x i16> %10078, <16 x i16>* %10082, align 2, !tbaa !399
  %10083 = shufflevector <32 x i16> %10077, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10084 = getelementptr inbounds i16, i16* %10081, i64 16
  %10085 = bitcast i16* %10084 to <16 x i16>*
  store <16 x i16> %10083, <16 x i16>* %10085, align 2, !tbaa !399
  br label %"consume blur_x436"

"consume blur_x436":                              ; preds = %"for blur_y.s0.x.x.rebased428", %"produce blur_x434"
  %10086 = sext i32 %b216 to i64
  %10087 = add nsw i64 %9845, %10086
  %10088 = getelementptr inbounds i16, i16* %blur_x, i64 %10087
  %10089 = bitcast i16* %10088 to <16 x i16>*
  %10090 = load <16 x i16>, <16 x i16>* %10089, align 2, !tbaa !399
  %10091 = getelementptr inbounds i16, i16* %10088, i64 16
  %10092 = bitcast i16* %10091 to <16 x i16>*
  %10093 = load <16 x i16>, <16 x i16>* %10092, align 2, !tbaa !399
  %10094 = add nsw i64 %9848, %10086
  %10095 = getelementptr inbounds i16, i16* %blur_x, i64 %10094
  %10096 = bitcast i16* %10095 to <16 x i16>*
  %10097 = load <16 x i16>, <16 x i16>* %10096, align 2, !tbaa !399
  %10098 = getelementptr inbounds i16, i16* %10095, i64 16
  %10099 = bitcast i16* %10098 to <16 x i16>*
  %10100 = load <16 x i16>, <16 x i16>* %10099, align 2, !tbaa !399
  %10101 = add nsw i64 %9851, %10086
  %10102 = getelementptr inbounds i16, i16* %blur_x, i64 %10101
  %10103 = bitcast i16* %10102 to <16 x i16>*
  %10104 = load <16 x i16>, <16 x i16>* %10103, align 2, !tbaa !399
  %10105 = getelementptr inbounds i16, i16* %10102, i64 16
  %10106 = bitcast i16* %10105 to <16 x i16>*
  %10107 = load <16 x i16>, <16 x i16>* %10106, align 2, !tbaa !399
  %10108 = add nsw i64 %9854, %10086
  %10109 = getelementptr inbounds i16, i16* %blur_x, i64 %10108
  %10110 = bitcast i16* %10109 to <16 x i16>*
  %10111 = load <16 x i16>, <16 x i16>* %10110, align 2, !tbaa !399
  %10112 = getelementptr inbounds i16, i16* %10109, i64 16
  %10113 = bitcast i16* %10112 to <16 x i16>*
  %10114 = load <16 x i16>, <16 x i16>* %10113, align 2, !tbaa !399
  %10115 = add nsw i64 %9857, %10086
  %10116 = getelementptr inbounds i16, i16* %blur_x, i64 %10115
  %10117 = bitcast i16* %10116 to <16 x i16>*
  %10118 = load <16 x i16>, <16 x i16>* %10117, align 2, !tbaa !399
  %10119 = getelementptr inbounds i16, i16* %10116, i64 16
  %10120 = bitcast i16* %10119 to <16 x i16>*
  %10121 = load <16 x i16>, <16 x i16>* %10120, align 2, !tbaa !399
  %10122 = add nsw i64 %9860, %10086
  %10123 = getelementptr inbounds i16, i16* %blur_x, i64 %10122
  %10124 = bitcast i16* %10123 to <16 x i16>*
  %10125 = load <16 x i16>, <16 x i16>* %10124, align 2, !tbaa !399
  %10126 = getelementptr inbounds i16, i16* %10123, i64 16
  %10127 = bitcast i16* %10126 to <16 x i16>*
  %10128 = load <16 x i16>, <16 x i16>* %10127, align 2, !tbaa !399
  %10129 = add nsw i64 %9863, %10086
  %10130 = getelementptr inbounds i16, i16* %blur_x, i64 %10129
  %10131 = bitcast i16* %10130 to <16 x i16>*
  %10132 = load <16 x i16>, <16 x i16>* %10131, align 2, !tbaa !399
  %10133 = getelementptr inbounds i16, i16* %10130, i64 16
  %10134 = bitcast i16* %10133 to <16 x i16>*
  %10135 = load <16 x i16>, <16 x i16>* %10134, align 2, !tbaa !399
  %10136 = add <16 x i16> %10097, %10090
  %10137 = add <16 x i16> %10136, %10104
  %10138 = add <16 x i16> %10137, %10111
  %10139 = add <16 x i16> %10138, %10118
  %10140 = add <16 x i16> %10139, %10125
  %10141 = add <16 x i16> %10140, %10132
  %10142 = add <16 x i16> %10100, %10093
  %10143 = add <16 x i16> %10142, %10107
  %10144 = add <16 x i16> %10143, %10114
  %10145 = add <16 x i16> %10144, %10121
  %10146 = add <16 x i16> %10145, %10128
  %10147 = add <16 x i16> %10146, %10135
  %10148 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10141, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10149 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10147, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10150 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10148, <16 x i16> %10141)
  %10151 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10149, <16 x i16> %10147)
  %10152 = shufflevector <16 x i16> %10150, <16 x i16> %10151, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10153 = lshr <32 x i16> %10152, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10154 = shufflevector <32 x i16> %10153, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10155 = add nsw i64 %9867, %10086
  %10156 = getelementptr inbounds i16, i16* %66, i64 %10155
  %10157 = bitcast i16* %10156 to <16 x i16>*
  store <16 x i16> %10154, <16 x i16>* %10157, align 2, !tbaa !401
  %10158 = shufflevector <32 x i16> %10153, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10159 = getelementptr inbounds i16, i16* %10156, i64 16
  %10160 = bitcast i16* %10159 to <16 x i16>*
  store <16 x i16> %10158, <16 x i16>* %10160, align 2, !tbaa !401
  %10161 = add nuw nsw i32 %blur_y.s0.x.x.rebased430, 1
  %.not2844 = icmp eq i32 %10161, %t1727
  br i1 %.not2844, label %"end for blur_y.s0.x.x.rebased429", label %"for blur_y.s0.x.x.rebased428"

after_bb437:                                      ; preds = %"end for blur_y.s0.x.x.rebased429", %"produce blur_x440"
  br i1 %100, label %"for blur_y.s0.x.x.rebased442.preheader", label %"end for blur_y.s0.x.x.rebased443", !prof !386

"for blur_y.s0.x.x.rebased442.preheader":         ; preds = %after_bb437
  %10162 = sext i32 %t1750 to i64
  %10163 = zext i32 %.pre-phi3605 to i64
  %10164 = mul nsw i64 %10163, %116
  %10165 = sub nsw i64 %10164, %96
  %10166 = zext i32 %.pre-phi3599 to i64
  %10167 = mul nsw i64 %10166, %116
  %10168 = sub nsw i64 %10167, %96
  %10169 = zext i32 %.pre-phi to i64
  %10170 = mul nsw i64 %10169, %116
  %10171 = sub nsw i64 %10170, %96
  %10172 = zext i32 %.pre-phi3579 to i64
  %10173 = mul nsw i64 %10172, %116
  %10174 = sub nsw i64 %10173, %96
  %10175 = zext i32 %.pre-phi3583 to i64
  %10176 = mul nsw i64 %10175, %116
  %10177 = sub nsw i64 %10176, %96
  %10178 = zext i32 %.pre-phi3591 to i64
  %10179 = mul nsw i64 %10178, %116
  %10180 = sub nsw i64 %10179, %96
  %10181 = zext i32 %.pre-phi3587 to i64
  %10182 = mul nsw i64 %10181, %116
  %10183 = sub nsw i64 %10182, %96
  %10184 = sext i32 %a26 to i64
  %10185 = add nsw i64 %10184, 14
  %10186 = mul nsw i64 %10185, %117
  %10187 = add nsw i64 %10186, %120
  br label %"for blur_y.s0.x.x.rebased442"

"produce blur_x440":                              ; preds = %"end for blur_y.s0.x.x.rebased429"
  %10188 = getelementptr inbounds i16, i16* %read_input, i64 %147
  %10189 = getelementptr inbounds i16, i16* %10188, i64 -31
  %10190 = bitcast i16* %10189 to <16 x i16>*
  %10191 = load <16 x i16>, <16 x i16>* %10190, align 2, !tbaa !396
  %10192 = getelementptr inbounds i16, i16* %10188, i64 -15
  %10193 = bitcast i16* %10192 to <16 x i16>*
  %10194 = load <16 x i16>, <16 x i16>* %10193, align 2, !tbaa !396
  %10195 = getelementptr inbounds i16, i16* %10188, i64 -32
  %10196 = bitcast i16* %10195 to <16 x i16>*
  %10197 = load <16 x i16>, <16 x i16>* %10196, align 2, !tbaa !396
  %10198 = getelementptr inbounds i16, i16* %10188, i64 -16
  %10199 = bitcast i16* %10198 to <16 x i16>*
  %10200 = load <16 x i16>, <16 x i16>* %10199, align 2, !tbaa !396
  %10201 = getelementptr inbounds i16, i16* %10188, i64 -30
  %10202 = bitcast i16* %10201 to <16 x i16>*
  %10203 = load <16 x i16>, <16 x i16>* %10202, align 2, !tbaa !396
  %10204 = getelementptr inbounds i16, i16* %10188, i64 -14
  %10205 = bitcast i16* %10204 to <16 x i16>*
  %10206 = load <16 x i16>, <16 x i16>* %10205, align 2, !tbaa !396
  %10207 = getelementptr inbounds i16, i16* %10188, i64 -29
  %10208 = bitcast i16* %10207 to <16 x i16>*
  %10209 = load <16 x i16>, <16 x i16>* %10208, align 2, !tbaa !396
  %10210 = getelementptr inbounds i16, i16* %10188, i64 -13
  %10211 = bitcast i16* %10210 to <16 x i16>*
  %10212 = load <16 x i16>, <16 x i16>* %10211, align 2, !tbaa !396
  %10213 = getelementptr inbounds i16, i16* %10188, i64 -28
  %10214 = bitcast i16* %10213 to <16 x i16>*
  %10215 = load <16 x i16>, <16 x i16>* %10214, align 2, !tbaa !396
  %10216 = getelementptr inbounds i16, i16* %10188, i64 -12
  %10217 = bitcast i16* %10216 to <16 x i16>*
  %10218 = load <16 x i16>, <16 x i16>* %10217, align 2, !tbaa !396
  %10219 = getelementptr inbounds i16, i16* %10188, i64 -26
  %10220 = bitcast i16* %10219 to <16 x i16>*
  %10221 = load <16 x i16>, <16 x i16>* %10220, align 2, !tbaa !396
  %10222 = getelementptr inbounds i16, i16* %10188, i64 -10
  %10223 = bitcast i16* %10222 to <16 x i16>*
  %10224 = load <16 x i16>, <16 x i16>* %10223, align 2, !tbaa !396
  %10225 = getelementptr inbounds i16, i16* %10188, i64 -27
  %10226 = bitcast i16* %10225 to <16 x i16>*
  %10227 = load <16 x i16>, <16 x i16>* %10226, align 2, !tbaa !396
  %10228 = getelementptr inbounds i16, i16* %10188, i64 -11
  %10229 = bitcast i16* %10228 to <16 x i16>*
  %10230 = load <16 x i16>, <16 x i16>* %10229, align 2, !tbaa !396
  %10231 = add <16 x i16> %10197, %10191
  %10232 = add <16 x i16> %10231, %10203
  %10233 = add <16 x i16> %10232, %10209
  %10234 = add <16 x i16> %10233, %10215
  %10235 = add <16 x i16> %10234, %10221
  %10236 = add <16 x i16> %10235, %10227
  %10237 = add <16 x i16> %10200, %10194
  %10238 = add <16 x i16> %10237, %10206
  %10239 = add <16 x i16> %10238, %10212
  %10240 = add <16 x i16> %10239, %10218
  %10241 = add <16 x i16> %10240, %10224
  %10242 = add <16 x i16> %10241, %10230
  %10243 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10236, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10244 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10242, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10245 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10243, <16 x i16> %10236)
  %10246 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10244, <16 x i16> %10242)
  %10247 = shufflevector <16 x i16> %10245, <16 x i16> %10246, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10248 = lshr <32 x i16> %10247, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10249 = shufflevector <32 x i16> %10248, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10250 = zext i32 %.pre-phi3591 to i64
  %10251 = mul nsw i64 %97, %10250
  %10252 = add nsw i64 %99, %10251
  %10253 = getelementptr inbounds i16, i16* %blur_x, i64 %10252
  %10254 = getelementptr inbounds i16, i16* %10253, i64 -32
  %10255 = bitcast i16* %10254 to <16 x i16>*
  store <16 x i16> %10249, <16 x i16>* %10255, align 2, !tbaa !399
  %10256 = shufflevector <32 x i16> %10248, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10257 = getelementptr inbounds i16, i16* %10253, i64 -16
  %10258 = bitcast i16* %10257 to <16 x i16>*
  store <16 x i16> %10256, <16 x i16>* %10258, align 2, !tbaa !399
  %10259 = zext i32 %.pre-phi3605 to i64
  %10260 = mul nsw i64 %10259, %116
  %10261 = add nsw i64 %10260, %94
  %10262 = getelementptr inbounds i16, i16* %blur_x, i64 %10261
  %10263 = getelementptr inbounds i16, i16* %10262, i64 -32
  %10264 = bitcast i16* %10263 to <16 x i16>*
  %10265 = load <16 x i16>, <16 x i16>* %10264, align 2, !tbaa !399
  %10266 = getelementptr inbounds i16, i16* %10262, i64 -16
  %10267 = bitcast i16* %10266 to <16 x i16>*
  %10268 = load <16 x i16>, <16 x i16>* %10267, align 2, !tbaa !399
  %10269 = zext i32 %.pre-phi3599 to i64
  %10270 = mul nsw i64 %10269, %116
  %10271 = add nsw i64 %10270, %94
  %10272 = getelementptr inbounds i16, i16* %blur_x, i64 %10271
  %10273 = getelementptr inbounds i16, i16* %10272, i64 -32
  %10274 = bitcast i16* %10273 to <16 x i16>*
  %10275 = load <16 x i16>, <16 x i16>* %10274, align 2, !tbaa !399
  %10276 = getelementptr inbounds i16, i16* %10272, i64 -16
  %10277 = bitcast i16* %10276 to <16 x i16>*
  %10278 = load <16 x i16>, <16 x i16>* %10277, align 2, !tbaa !399
  %10279 = zext i32 %.pre-phi to i64
  %10280 = mul nsw i64 %10279, %116
  %10281 = add nsw i64 %10280, %94
  %10282 = getelementptr inbounds i16, i16* %blur_x, i64 %10281
  %10283 = getelementptr inbounds i16, i16* %10282, i64 -32
  %10284 = bitcast i16* %10283 to <16 x i16>*
  %10285 = load <16 x i16>, <16 x i16>* %10284, align 2, !tbaa !399
  %10286 = getelementptr inbounds i16, i16* %10282, i64 -16
  %10287 = bitcast i16* %10286 to <16 x i16>*
  %10288 = load <16 x i16>, <16 x i16>* %10287, align 2, !tbaa !399
  %10289 = zext i32 %.pre-phi3579 to i64
  %10290 = mul nsw i64 %10289, %116
  %10291 = add nsw i64 %10290, %94
  %10292 = getelementptr inbounds i16, i16* %blur_x, i64 %10291
  %10293 = getelementptr inbounds i16, i16* %10292, i64 -32
  %10294 = bitcast i16* %10293 to <16 x i16>*
  %10295 = load <16 x i16>, <16 x i16>* %10294, align 2, !tbaa !399
  %10296 = getelementptr inbounds i16, i16* %10292, i64 -16
  %10297 = bitcast i16* %10296 to <16 x i16>*
  %10298 = load <16 x i16>, <16 x i16>* %10297, align 2, !tbaa !399
  %10299 = zext i32 %.pre-phi3583 to i64
  %10300 = mul nsw i64 %10299, %116
  %10301 = add nsw i64 %10300, %94
  %10302 = getelementptr inbounds i16, i16* %blur_x, i64 %10301
  %10303 = getelementptr inbounds i16, i16* %10302, i64 -32
  %10304 = bitcast i16* %10303 to <16 x i16>*
  %10305 = load <16 x i16>, <16 x i16>* %10304, align 2, !tbaa !399
  %10306 = getelementptr inbounds i16, i16* %10302, i64 -16
  %10307 = bitcast i16* %10306 to <16 x i16>*
  %10308 = load <16 x i16>, <16 x i16>* %10307, align 2, !tbaa !399
  %10309 = mul nsw i64 %10250, %116
  %10310 = add nsw i64 %10309, %94
  %10311 = getelementptr inbounds i16, i16* %blur_x, i64 %10310
  %10312 = getelementptr inbounds i16, i16* %10311, i64 -32
  %10313 = bitcast i16* %10312 to <16 x i16>*
  %10314 = load <16 x i16>, <16 x i16>* %10313, align 2, !tbaa !399
  %10315 = getelementptr inbounds i16, i16* %10311, i64 -16
  %10316 = bitcast i16* %10315 to <16 x i16>*
  %10317 = load <16 x i16>, <16 x i16>* %10316, align 2, !tbaa !399
  %10318 = zext i32 %.pre-phi3587 to i64
  %10319 = mul nsw i64 %10318, %116
  %10320 = add nsw i64 %10319, %94
  %10321 = getelementptr inbounds i16, i16* %blur_x, i64 %10320
  %10322 = getelementptr inbounds i16, i16* %10321, i64 -32
  %10323 = bitcast i16* %10322 to <16 x i16>*
  %10324 = load <16 x i16>, <16 x i16>* %10323, align 2, !tbaa !399
  %10325 = getelementptr inbounds i16, i16* %10321, i64 -16
  %10326 = bitcast i16* %10325 to <16 x i16>*
  %10327 = load <16 x i16>, <16 x i16>* %10326, align 2, !tbaa !399
  %10328 = add <16 x i16> %10275, %10265
  %10329 = add <16 x i16> %10328, %10285
  %10330 = add <16 x i16> %10329, %10295
  %10331 = add <16 x i16> %10330, %10305
  %10332 = add <16 x i16> %10331, %10314
  %10333 = add <16 x i16> %10332, %10324
  %10334 = add <16 x i16> %10278, %10268
  %10335 = add <16 x i16> %10334, %10288
  %10336 = add <16 x i16> %10335, %10298
  %10337 = add <16 x i16> %10336, %10308
  %10338 = add <16 x i16> %10337, %10317
  %10339 = add <16 x i16> %10338, %10327
  %10340 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10333, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10341 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10339, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10342 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10340, <16 x i16> %10333)
  %10343 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10341, <16 x i16> %10339)
  %10344 = shufflevector <16 x i16> %10342, <16 x i16> %10343, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10345 = lshr <32 x i16> %10344, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10346 = shufflevector <32 x i16> %10345, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10347 = sext i32 %a26 to i64
  %10348 = add nsw i64 %10347, 14
  %10349 = mul nsw i64 %10348, %117
  %10350 = add nsw i64 %119, %10349
  %10351 = getelementptr inbounds i16, i16* %66, i64 %10350
  %10352 = getelementptr inbounds i16, i16* %10351, i64 -32
  %10353 = bitcast i16* %10352 to <16 x i16>*
  store <16 x i16> %10346, <16 x i16>* %10353, align 2, !tbaa !401
  %10354 = shufflevector <32 x i16> %10345, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10355 = getelementptr inbounds i16, i16* %10351, i64 -16
  %10356 = bitcast i16* %10355 to <16 x i16>*
  store <16 x i16> %10354, <16 x i16>* %10356, align 2, !tbaa !401
  br label %after_bb437

"for blur_y.s0.x.x.rebased442":                   ; preds = %"for blur_y.s0.x.x.rebased442.preheader", %"consume blur_x449"
  %indvars.iv3431 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased442.preheader" ], [ %indvars.iv.next3432, %"consume blur_x449" ]
  %10357 = add nsw i64 %indvars.iv3431, %101
  %10358 = icmp slt i64 %10357, 1
  %10359 = trunc i64 %10357 to i32
  %10360 = shl nsw i32 %10359, 5
  %10361 = icmp sgt i32 %4, %10360
  %10362 = or i1 %10358, %10361
  br i1 %10362, label %"produce blur_x448", label %"for blur_y.s0.x.x.rebased442.consume blur_x449_crit_edge"

"for blur_y.s0.x.x.rebased442.consume blur_x449_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased442"
  %.pre3632 = shl nsw i64 %10357, 5
  br label %"consume blur_x449"

"end for blur_y.s0.x.x.rebased443":               ; preds = %"consume blur_x449", %after_bb437
  br i1 %102, label %"for blur_y.s0.x.x.rebased450.preheader", label %"end for blur_y.s0.x.x.rebased451", !prof !386

"for blur_y.s0.x.x.rebased450.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased443"
  %10363 = sext i32 %t1750 to i64
  %10364 = zext i32 %.pre-phi3605 to i64
  %10365 = mul nsw i64 %10364, %116
  %10366 = sub nsw i64 %10365, %96
  %10367 = zext i32 %.pre-phi3599 to i64
  %10368 = mul nsw i64 %10367, %116
  %10369 = sub nsw i64 %10368, %96
  %10370 = zext i32 %.pre-phi to i64
  %10371 = mul nsw i64 %10370, %116
  %10372 = sub nsw i64 %10371, %96
  %10373 = zext i32 %.pre-phi3579 to i64
  %10374 = mul nsw i64 %10373, %116
  %10375 = sub nsw i64 %10374, %96
  %10376 = zext i32 %.pre-phi3583 to i64
  %10377 = mul nsw i64 %10376, %116
  %10378 = sub nsw i64 %10377, %96
  %10379 = zext i32 %.pre-phi3591 to i64
  %10380 = mul nsw i64 %10379, %116
  %10381 = sub nsw i64 %10380, %96
  %10382 = zext i32 %.pre-phi3587 to i64
  %10383 = mul nsw i64 %10382, %116
  %10384 = sub nsw i64 %10383, %96
  %10385 = sext i32 %a26 to i64
  %10386 = add nsw i64 %10385, 14
  %10387 = mul nsw i64 %10386, %117
  %10388 = add nsw i64 %10387, %120
  br label %"for blur_y.s0.x.x.rebased450"

"produce blur_x448":                              ; preds = %"for blur_y.s0.x.x.rebased442"
  %t976 = add nsw i32 %10360, %t1985
  %10389 = sext i32 %t976 to i64
  %10390 = getelementptr inbounds i16, i16* %read_input, i64 %10389
  %10391 = getelementptr inbounds i16, i16* %10390, i64 1
  %10392 = bitcast i16* %10391 to <16 x i16>*
  %10393 = load <16 x i16>, <16 x i16>* %10392, align 2, !tbaa !396
  %10394 = getelementptr inbounds i16, i16* %10390, i64 17
  %10395 = bitcast i16* %10394 to <16 x i16>*
  %10396 = load <16 x i16>, <16 x i16>* %10395, align 2, !tbaa !396
  %10397 = bitcast i16* %10390 to <16 x i16>*
  %10398 = load <16 x i16>, <16 x i16>* %10397, align 2, !tbaa !396
  %10399 = getelementptr inbounds i16, i16* %10390, i64 16
  %10400 = bitcast i16* %10399 to <16 x i16>*
  %10401 = load <16 x i16>, <16 x i16>* %10400, align 2, !tbaa !396
  %10402 = getelementptr inbounds i16, i16* %10390, i64 2
  %10403 = bitcast i16* %10402 to <16 x i16>*
  %10404 = load <16 x i16>, <16 x i16>* %10403, align 2, !tbaa !396
  %10405 = getelementptr inbounds i16, i16* %10390, i64 18
  %10406 = bitcast i16* %10405 to <16 x i16>*
  %10407 = load <16 x i16>, <16 x i16>* %10406, align 2, !tbaa !396
  %10408 = getelementptr inbounds i16, i16* %10390, i64 3
  %10409 = bitcast i16* %10408 to <16 x i16>*
  %10410 = load <16 x i16>, <16 x i16>* %10409, align 2, !tbaa !396
  %10411 = getelementptr inbounds i16, i16* %10390, i64 19
  %10412 = bitcast i16* %10411 to <16 x i16>*
  %10413 = load <16 x i16>, <16 x i16>* %10412, align 2, !tbaa !396
  %10414 = getelementptr inbounds i16, i16* %10390, i64 4
  %10415 = bitcast i16* %10414 to <16 x i16>*
  %10416 = load <16 x i16>, <16 x i16>* %10415, align 2, !tbaa !396
  %10417 = getelementptr inbounds i16, i16* %10390, i64 20
  %10418 = bitcast i16* %10417 to <16 x i16>*
  %10419 = load <16 x i16>, <16 x i16>* %10418, align 2, !tbaa !396
  %10420 = getelementptr inbounds i16, i16* %10390, i64 6
  %10421 = bitcast i16* %10420 to <16 x i16>*
  %10422 = load <16 x i16>, <16 x i16>* %10421, align 2, !tbaa !396
  %10423 = getelementptr inbounds i16, i16* %10390, i64 22
  %10424 = bitcast i16* %10423 to <16 x i16>*
  %10425 = load <16 x i16>, <16 x i16>* %10424, align 2, !tbaa !396
  %10426 = getelementptr inbounds i16, i16* %10390, i64 5
  %10427 = bitcast i16* %10426 to <16 x i16>*
  %10428 = load <16 x i16>, <16 x i16>* %10427, align 2, !tbaa !396
  %10429 = getelementptr inbounds i16, i16* %10390, i64 21
  %10430 = bitcast i16* %10429 to <16 x i16>*
  %10431 = load <16 x i16>, <16 x i16>* %10430, align 2, !tbaa !396
  %10432 = add <16 x i16> %10398, %10393
  %10433 = add <16 x i16> %10432, %10404
  %10434 = add <16 x i16> %10433, %10410
  %10435 = add <16 x i16> %10434, %10416
  %10436 = add <16 x i16> %10435, %10422
  %10437 = add <16 x i16> %10436, %10428
  %10438 = add <16 x i16> %10401, %10396
  %10439 = add <16 x i16> %10438, %10407
  %10440 = add <16 x i16> %10439, %10413
  %10441 = add <16 x i16> %10440, %10419
  %10442 = add <16 x i16> %10441, %10425
  %10443 = add <16 x i16> %10442, %10431
  %10444 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10437, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10445 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10443, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10446 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10444, <16 x i16> %10437)
  %10447 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10445, <16 x i16> %10443)
  %10448 = shufflevector <16 x i16> %10446, <16 x i16> %10447, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10449 = lshr <32 x i16> %10448, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10450 = shufflevector <32 x i16> %10449, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10451 = shl nsw i64 %10357, 5
  %10452 = add nsw i64 %10451, %10162
  %10453 = getelementptr inbounds i16, i16* %blur_x, i64 %10452
  %10454 = bitcast i16* %10453 to <16 x i16>*
  store <16 x i16> %10450, <16 x i16>* %10454, align 2, !tbaa !399
  %10455 = shufflevector <32 x i16> %10449, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10456 = getelementptr inbounds i16, i16* %10453, i64 16
  %10457 = bitcast i16* %10456 to <16 x i16>*
  store <16 x i16> %10455, <16 x i16>* %10457, align 2, !tbaa !399
  br label %"consume blur_x449"

"consume blur_x449":                              ; preds = %"for blur_y.s0.x.x.rebased442.consume blur_x449_crit_edge", %"produce blur_x448"
  %.pre-phi3633 = phi i64 [ %.pre3632, %"for blur_y.s0.x.x.rebased442.consume blur_x449_crit_edge" ], [ %10451, %"produce blur_x448" ]
  %10458 = add nsw i64 %10165, %.pre-phi3633
  %10459 = getelementptr inbounds i16, i16* %blur_x, i64 %10458
  %10460 = bitcast i16* %10459 to <16 x i16>*
  %10461 = load <16 x i16>, <16 x i16>* %10460, align 2, !tbaa !399
  %10462 = getelementptr inbounds i16, i16* %10459, i64 16
  %10463 = bitcast i16* %10462 to <16 x i16>*
  %10464 = load <16 x i16>, <16 x i16>* %10463, align 2, !tbaa !399
  %10465 = add nsw i64 %10168, %.pre-phi3633
  %10466 = getelementptr inbounds i16, i16* %blur_x, i64 %10465
  %10467 = bitcast i16* %10466 to <16 x i16>*
  %10468 = load <16 x i16>, <16 x i16>* %10467, align 2, !tbaa !399
  %10469 = getelementptr inbounds i16, i16* %10466, i64 16
  %10470 = bitcast i16* %10469 to <16 x i16>*
  %10471 = load <16 x i16>, <16 x i16>* %10470, align 2, !tbaa !399
  %10472 = add nsw i64 %10171, %.pre-phi3633
  %10473 = getelementptr inbounds i16, i16* %blur_x, i64 %10472
  %10474 = bitcast i16* %10473 to <16 x i16>*
  %10475 = load <16 x i16>, <16 x i16>* %10474, align 2, !tbaa !399
  %10476 = getelementptr inbounds i16, i16* %10473, i64 16
  %10477 = bitcast i16* %10476 to <16 x i16>*
  %10478 = load <16 x i16>, <16 x i16>* %10477, align 2, !tbaa !399
  %10479 = add nsw i64 %10174, %.pre-phi3633
  %10480 = getelementptr inbounds i16, i16* %blur_x, i64 %10479
  %10481 = bitcast i16* %10480 to <16 x i16>*
  %10482 = load <16 x i16>, <16 x i16>* %10481, align 2, !tbaa !399
  %10483 = getelementptr inbounds i16, i16* %10480, i64 16
  %10484 = bitcast i16* %10483 to <16 x i16>*
  %10485 = load <16 x i16>, <16 x i16>* %10484, align 2, !tbaa !399
  %10486 = add nsw i64 %10177, %.pre-phi3633
  %10487 = getelementptr inbounds i16, i16* %blur_x, i64 %10486
  %10488 = bitcast i16* %10487 to <16 x i16>*
  %10489 = load <16 x i16>, <16 x i16>* %10488, align 2, !tbaa !399
  %10490 = getelementptr inbounds i16, i16* %10487, i64 16
  %10491 = bitcast i16* %10490 to <16 x i16>*
  %10492 = load <16 x i16>, <16 x i16>* %10491, align 2, !tbaa !399
  %10493 = add nsw i64 %10180, %.pre-phi3633
  %10494 = getelementptr inbounds i16, i16* %blur_x, i64 %10493
  %10495 = bitcast i16* %10494 to <16 x i16>*
  %10496 = load <16 x i16>, <16 x i16>* %10495, align 2, !tbaa !399
  %10497 = getelementptr inbounds i16, i16* %10494, i64 16
  %10498 = bitcast i16* %10497 to <16 x i16>*
  %10499 = load <16 x i16>, <16 x i16>* %10498, align 2, !tbaa !399
  %10500 = add nsw i64 %10183, %.pre-phi3633
  %10501 = getelementptr inbounds i16, i16* %blur_x, i64 %10500
  %10502 = bitcast i16* %10501 to <16 x i16>*
  %10503 = load <16 x i16>, <16 x i16>* %10502, align 2, !tbaa !399
  %10504 = getelementptr inbounds i16, i16* %10501, i64 16
  %10505 = bitcast i16* %10504 to <16 x i16>*
  %10506 = load <16 x i16>, <16 x i16>* %10505, align 2, !tbaa !399
  %10507 = add <16 x i16> %10468, %10461
  %10508 = add <16 x i16> %10507, %10475
  %10509 = add <16 x i16> %10508, %10482
  %10510 = add <16 x i16> %10509, %10489
  %10511 = add <16 x i16> %10510, %10496
  %10512 = add <16 x i16> %10511, %10503
  %10513 = add <16 x i16> %10471, %10464
  %10514 = add <16 x i16> %10513, %10478
  %10515 = add <16 x i16> %10514, %10485
  %10516 = add <16 x i16> %10515, %10492
  %10517 = add <16 x i16> %10516, %10499
  %10518 = add <16 x i16> %10517, %10506
  %10519 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10512, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10520 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10518, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10521 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10519, <16 x i16> %10512)
  %10522 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10520, <16 x i16> %10518)
  %10523 = shufflevector <16 x i16> %10521, <16 x i16> %10522, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10524 = lshr <32 x i16> %10523, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10525 = shufflevector <32 x i16> %10524, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10526 = add nsw i64 %10187, %.pre-phi3633
  %10527 = getelementptr inbounds i16, i16* %66, i64 %10526
  %10528 = bitcast i16* %10527 to <16 x i16>*
  store <16 x i16> %10525, <16 x i16>* %10528, align 2, !tbaa !401
  %10529 = shufflevector <32 x i16> %10524, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10530 = getelementptr inbounds i16, i16* %10527, i64 16
  %10531 = bitcast i16* %10530 to <16 x i16>*
  store <16 x i16> %10529, <16 x i16>* %10531, align 2, !tbaa !401
  %indvars.iv.next3432 = add nuw nsw i64 %indvars.iv3431, 1
  %.not2843 = icmp eq i64 %indvars.iv.next3432, %188
  br i1 %.not2843, label %"end for blur_y.s0.x.x.rebased443", label %"for blur_y.s0.x.x.rebased442"

"for blur_y.s0.x.x.rebased450":                   ; preds = %"for blur_y.s0.x.x.rebased450.preheader", %"consume blur_x458"
  %blur_y.s0.x.x.rebased452 = phi i32 [ %10682, %"consume blur_x458" ], [ 0, %"for blur_y.s0.x.x.rebased450.preheader" ]
  %10532 = add nsw i32 %blur_y.s0.x.x.rebased452, %t1670
  %a217 = shl nsw i32 %10532, 5
  %10533 = icmp sgt i32 %a14, %a217
  %b223 = select i1 %10533, i32 %a217, i32 %a14
  %10534 = icmp slt i32 %10532, 1
  %10535 = icmp sgt i32 %4, %a217
  %10536 = or i1 %10534, %10535
  br i1 %10536, label %"produce blur_x456", label %"consume blur_x458"

"end for blur_y.s0.x.x.rebased451":               ; preds = %"consume blur_x458", %"end for blur_y.s0.x.x.rebased443"
  br i1 %34, label %"produce blur_x462", label %after_bb459

"produce blur_x456":                              ; preds = %"for blur_y.s0.x.x.rebased450"
  %10537 = icmp slt i32 %b223, %4
  %blur_x.s0.x.v1.base.s457 = select i1 %10537, i32 %b223, i32 %4
  %t981 = add nsw i32 %blur_x.s0.x.v1.base.s457, %t1985
  %10538 = sext i32 %t981 to i64
  %10539 = getelementptr inbounds i16, i16* %read_input, i64 %10538
  %10540 = getelementptr inbounds i16, i16* %10539, i64 1
  %10541 = bitcast i16* %10540 to <16 x i16>*
  %10542 = load <16 x i16>, <16 x i16>* %10541, align 2, !tbaa !396
  %10543 = getelementptr inbounds i16, i16* %10539, i64 17
  %10544 = bitcast i16* %10543 to <16 x i16>*
  %10545 = load <16 x i16>, <16 x i16>* %10544, align 2, !tbaa !396
  %10546 = bitcast i16* %10539 to <16 x i16>*
  %10547 = load <16 x i16>, <16 x i16>* %10546, align 2, !tbaa !396
  %10548 = getelementptr inbounds i16, i16* %10539, i64 16
  %10549 = bitcast i16* %10548 to <16 x i16>*
  %10550 = load <16 x i16>, <16 x i16>* %10549, align 2, !tbaa !396
  %10551 = getelementptr inbounds i16, i16* %10539, i64 2
  %10552 = bitcast i16* %10551 to <16 x i16>*
  %10553 = load <16 x i16>, <16 x i16>* %10552, align 2, !tbaa !396
  %10554 = getelementptr inbounds i16, i16* %10539, i64 18
  %10555 = bitcast i16* %10554 to <16 x i16>*
  %10556 = load <16 x i16>, <16 x i16>* %10555, align 2, !tbaa !396
  %10557 = getelementptr inbounds i16, i16* %10539, i64 3
  %10558 = bitcast i16* %10557 to <16 x i16>*
  %10559 = load <16 x i16>, <16 x i16>* %10558, align 2, !tbaa !396
  %10560 = getelementptr inbounds i16, i16* %10539, i64 19
  %10561 = bitcast i16* %10560 to <16 x i16>*
  %10562 = load <16 x i16>, <16 x i16>* %10561, align 2, !tbaa !396
  %10563 = getelementptr inbounds i16, i16* %10539, i64 4
  %10564 = bitcast i16* %10563 to <16 x i16>*
  %10565 = load <16 x i16>, <16 x i16>* %10564, align 2, !tbaa !396
  %10566 = getelementptr inbounds i16, i16* %10539, i64 20
  %10567 = bitcast i16* %10566 to <16 x i16>*
  %10568 = load <16 x i16>, <16 x i16>* %10567, align 2, !tbaa !396
  %10569 = getelementptr inbounds i16, i16* %10539, i64 6
  %10570 = bitcast i16* %10569 to <16 x i16>*
  %10571 = load <16 x i16>, <16 x i16>* %10570, align 2, !tbaa !396
  %10572 = getelementptr inbounds i16, i16* %10539, i64 22
  %10573 = bitcast i16* %10572 to <16 x i16>*
  %10574 = load <16 x i16>, <16 x i16>* %10573, align 2, !tbaa !396
  %10575 = getelementptr inbounds i16, i16* %10539, i64 5
  %10576 = bitcast i16* %10575 to <16 x i16>*
  %10577 = load <16 x i16>, <16 x i16>* %10576, align 2, !tbaa !396
  %10578 = getelementptr inbounds i16, i16* %10539, i64 21
  %10579 = bitcast i16* %10578 to <16 x i16>*
  %10580 = load <16 x i16>, <16 x i16>* %10579, align 2, !tbaa !396
  %10581 = add <16 x i16> %10547, %10542
  %10582 = add <16 x i16> %10581, %10553
  %10583 = add <16 x i16> %10582, %10559
  %10584 = add <16 x i16> %10583, %10565
  %10585 = add <16 x i16> %10584, %10571
  %10586 = add <16 x i16> %10585, %10577
  %10587 = add <16 x i16> %10550, %10545
  %10588 = add <16 x i16> %10587, %10556
  %10589 = add <16 x i16> %10588, %10562
  %10590 = add <16 x i16> %10589, %10568
  %10591 = add <16 x i16> %10590, %10574
  %10592 = add <16 x i16> %10591, %10580
  %10593 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10586, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10594 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10592, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10595 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10593, <16 x i16> %10586)
  %10596 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10594, <16 x i16> %10592)
  %10597 = shufflevector <16 x i16> %10595, <16 x i16> %10596, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10598 = lshr <32 x i16> %10597, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10599 = shufflevector <32 x i16> %10598, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10600 = sext i32 %blur_x.s0.x.v1.base.s457 to i64
  %10601 = add nsw i64 %10600, %10363
  %10602 = getelementptr inbounds i16, i16* %blur_x, i64 %10601
  %10603 = bitcast i16* %10602 to <16 x i16>*
  store <16 x i16> %10599, <16 x i16>* %10603, align 2, !tbaa !399
  %10604 = shufflevector <32 x i16> %10598, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10605 = getelementptr inbounds i16, i16* %10602, i64 16
  %10606 = bitcast i16* %10605 to <16 x i16>*
  store <16 x i16> %10604, <16 x i16>* %10606, align 2, !tbaa !399
  br label %"consume blur_x458"

"consume blur_x458":                              ; preds = %"for blur_y.s0.x.x.rebased450", %"produce blur_x456"
  %10607 = sext i32 %b223 to i64
  %10608 = add nsw i64 %10366, %10607
  %10609 = getelementptr inbounds i16, i16* %blur_x, i64 %10608
  %10610 = bitcast i16* %10609 to <16 x i16>*
  %10611 = load <16 x i16>, <16 x i16>* %10610, align 2, !tbaa !399
  %10612 = getelementptr inbounds i16, i16* %10609, i64 16
  %10613 = bitcast i16* %10612 to <16 x i16>*
  %10614 = load <16 x i16>, <16 x i16>* %10613, align 2, !tbaa !399
  %10615 = add nsw i64 %10369, %10607
  %10616 = getelementptr inbounds i16, i16* %blur_x, i64 %10615
  %10617 = bitcast i16* %10616 to <16 x i16>*
  %10618 = load <16 x i16>, <16 x i16>* %10617, align 2, !tbaa !399
  %10619 = getelementptr inbounds i16, i16* %10616, i64 16
  %10620 = bitcast i16* %10619 to <16 x i16>*
  %10621 = load <16 x i16>, <16 x i16>* %10620, align 2, !tbaa !399
  %10622 = add nsw i64 %10372, %10607
  %10623 = getelementptr inbounds i16, i16* %blur_x, i64 %10622
  %10624 = bitcast i16* %10623 to <16 x i16>*
  %10625 = load <16 x i16>, <16 x i16>* %10624, align 2, !tbaa !399
  %10626 = getelementptr inbounds i16, i16* %10623, i64 16
  %10627 = bitcast i16* %10626 to <16 x i16>*
  %10628 = load <16 x i16>, <16 x i16>* %10627, align 2, !tbaa !399
  %10629 = add nsw i64 %10375, %10607
  %10630 = getelementptr inbounds i16, i16* %blur_x, i64 %10629
  %10631 = bitcast i16* %10630 to <16 x i16>*
  %10632 = load <16 x i16>, <16 x i16>* %10631, align 2, !tbaa !399
  %10633 = getelementptr inbounds i16, i16* %10630, i64 16
  %10634 = bitcast i16* %10633 to <16 x i16>*
  %10635 = load <16 x i16>, <16 x i16>* %10634, align 2, !tbaa !399
  %10636 = add nsw i64 %10378, %10607
  %10637 = getelementptr inbounds i16, i16* %blur_x, i64 %10636
  %10638 = bitcast i16* %10637 to <16 x i16>*
  %10639 = load <16 x i16>, <16 x i16>* %10638, align 2, !tbaa !399
  %10640 = getelementptr inbounds i16, i16* %10637, i64 16
  %10641 = bitcast i16* %10640 to <16 x i16>*
  %10642 = load <16 x i16>, <16 x i16>* %10641, align 2, !tbaa !399
  %10643 = add nsw i64 %10381, %10607
  %10644 = getelementptr inbounds i16, i16* %blur_x, i64 %10643
  %10645 = bitcast i16* %10644 to <16 x i16>*
  %10646 = load <16 x i16>, <16 x i16>* %10645, align 2, !tbaa !399
  %10647 = getelementptr inbounds i16, i16* %10644, i64 16
  %10648 = bitcast i16* %10647 to <16 x i16>*
  %10649 = load <16 x i16>, <16 x i16>* %10648, align 2, !tbaa !399
  %10650 = add nsw i64 %10384, %10607
  %10651 = getelementptr inbounds i16, i16* %blur_x, i64 %10650
  %10652 = bitcast i16* %10651 to <16 x i16>*
  %10653 = load <16 x i16>, <16 x i16>* %10652, align 2, !tbaa !399
  %10654 = getelementptr inbounds i16, i16* %10651, i64 16
  %10655 = bitcast i16* %10654 to <16 x i16>*
  %10656 = load <16 x i16>, <16 x i16>* %10655, align 2, !tbaa !399
  %10657 = add <16 x i16> %10618, %10611
  %10658 = add <16 x i16> %10657, %10625
  %10659 = add <16 x i16> %10658, %10632
  %10660 = add <16 x i16> %10659, %10639
  %10661 = add <16 x i16> %10660, %10646
  %10662 = add <16 x i16> %10661, %10653
  %10663 = add <16 x i16> %10621, %10614
  %10664 = add <16 x i16> %10663, %10628
  %10665 = add <16 x i16> %10664, %10635
  %10666 = add <16 x i16> %10665, %10642
  %10667 = add <16 x i16> %10666, %10649
  %10668 = add <16 x i16> %10667, %10656
  %10669 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10662, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10670 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10668, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10671 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10669, <16 x i16> %10662)
  %10672 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10670, <16 x i16> %10668)
  %10673 = shufflevector <16 x i16> %10671, <16 x i16> %10672, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10674 = lshr <32 x i16> %10673, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10675 = shufflevector <32 x i16> %10674, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10676 = add nsw i64 %10388, %10607
  %10677 = getelementptr inbounds i16, i16* %66, i64 %10676
  %10678 = bitcast i16* %10677 to <16 x i16>*
  store <16 x i16> %10675, <16 x i16>* %10678, align 2, !tbaa !401
  %10679 = shufflevector <32 x i16> %10674, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10680 = getelementptr inbounds i16, i16* %10677, i64 16
  %10681 = bitcast i16* %10680 to <16 x i16>*
  store <16 x i16> %10679, <16 x i16>* %10681, align 2, !tbaa !401
  %10682 = add nuw nsw i32 %blur_y.s0.x.x.rebased452, 1
  %.not2842 = icmp eq i32 %10682, %t1727
  br i1 %.not2842, label %"end for blur_y.s0.x.x.rebased451", label %"for blur_y.s0.x.x.rebased450"

after_bb459:                                      ; preds = %"end for blur_y.s0.x.x.rebased451", %"produce blur_x462"
  br i1 %100, label %"for blur_y.s0.x.x.rebased464.preheader", label %"end for blur_y.s0.x.x.rebased465", !prof !386

"for blur_y.s0.x.x.rebased464.preheader":         ; preds = %after_bb459
  %10683 = sext i32 %t1756 to i64
  %10684 = zext i32 %.pre-phi to i64
  %10685 = mul nsw i64 %10684, %116
  %10686 = sub nsw i64 %10685, %96
  %10687 = zext i32 %.pre-phi3605 to i64
  %10688 = mul nsw i64 %10687, %116
  %10689 = sub nsw i64 %10688, %96
  %10690 = zext i32 %.pre-phi3579 to i64
  %10691 = mul nsw i64 %10690, %116
  %10692 = sub nsw i64 %10691, %96
  %10693 = zext i32 %.pre-phi3583 to i64
  %10694 = mul nsw i64 %10693, %116
  %10695 = sub nsw i64 %10694, %96
  %10696 = zext i32 %.pre-phi3587 to i64
  %10697 = mul nsw i64 %10696, %116
  %10698 = sub nsw i64 %10697, %96
  %10699 = zext i32 %.pre-phi3595 to i64
  %10700 = mul nsw i64 %10699, %116
  %10701 = sub nsw i64 %10700, %96
  %10702 = zext i32 %.pre-phi3591 to i64
  %10703 = mul nsw i64 %10702, %116
  %10704 = sub nsw i64 %10703, %96
  %10705 = sext i32 %a26 to i64
  %10706 = add nsw i64 %10705, 15
  %10707 = mul nsw i64 %10706, %117
  %10708 = add nsw i64 %10707, %120
  br label %"for blur_y.s0.x.x.rebased464"

"produce blur_x462":                              ; preds = %"end for blur_y.s0.x.x.rebased451"
  %10709 = getelementptr inbounds i16, i16* %read_input, i64 %149
  %10710 = getelementptr inbounds i16, i16* %10709, i64 -31
  %10711 = bitcast i16* %10710 to <16 x i16>*
  %10712 = load <16 x i16>, <16 x i16>* %10711, align 2, !tbaa !396
  %10713 = getelementptr inbounds i16, i16* %10709, i64 -15
  %10714 = bitcast i16* %10713 to <16 x i16>*
  %10715 = load <16 x i16>, <16 x i16>* %10714, align 2, !tbaa !396
  %10716 = getelementptr inbounds i16, i16* %10709, i64 -32
  %10717 = bitcast i16* %10716 to <16 x i16>*
  %10718 = load <16 x i16>, <16 x i16>* %10717, align 2, !tbaa !396
  %10719 = getelementptr inbounds i16, i16* %10709, i64 -16
  %10720 = bitcast i16* %10719 to <16 x i16>*
  %10721 = load <16 x i16>, <16 x i16>* %10720, align 2, !tbaa !396
  %10722 = getelementptr inbounds i16, i16* %10709, i64 -30
  %10723 = bitcast i16* %10722 to <16 x i16>*
  %10724 = load <16 x i16>, <16 x i16>* %10723, align 2, !tbaa !396
  %10725 = getelementptr inbounds i16, i16* %10709, i64 -14
  %10726 = bitcast i16* %10725 to <16 x i16>*
  %10727 = load <16 x i16>, <16 x i16>* %10726, align 2, !tbaa !396
  %10728 = getelementptr inbounds i16, i16* %10709, i64 -29
  %10729 = bitcast i16* %10728 to <16 x i16>*
  %10730 = load <16 x i16>, <16 x i16>* %10729, align 2, !tbaa !396
  %10731 = getelementptr inbounds i16, i16* %10709, i64 -13
  %10732 = bitcast i16* %10731 to <16 x i16>*
  %10733 = load <16 x i16>, <16 x i16>* %10732, align 2, !tbaa !396
  %10734 = getelementptr inbounds i16, i16* %10709, i64 -28
  %10735 = bitcast i16* %10734 to <16 x i16>*
  %10736 = load <16 x i16>, <16 x i16>* %10735, align 2, !tbaa !396
  %10737 = getelementptr inbounds i16, i16* %10709, i64 -12
  %10738 = bitcast i16* %10737 to <16 x i16>*
  %10739 = load <16 x i16>, <16 x i16>* %10738, align 2, !tbaa !396
  %10740 = getelementptr inbounds i16, i16* %10709, i64 -26
  %10741 = bitcast i16* %10740 to <16 x i16>*
  %10742 = load <16 x i16>, <16 x i16>* %10741, align 2, !tbaa !396
  %10743 = getelementptr inbounds i16, i16* %10709, i64 -10
  %10744 = bitcast i16* %10743 to <16 x i16>*
  %10745 = load <16 x i16>, <16 x i16>* %10744, align 2, !tbaa !396
  %10746 = getelementptr inbounds i16, i16* %10709, i64 -27
  %10747 = bitcast i16* %10746 to <16 x i16>*
  %10748 = load <16 x i16>, <16 x i16>* %10747, align 2, !tbaa !396
  %10749 = getelementptr inbounds i16, i16* %10709, i64 -11
  %10750 = bitcast i16* %10749 to <16 x i16>*
  %10751 = load <16 x i16>, <16 x i16>* %10750, align 2, !tbaa !396
  %10752 = add <16 x i16> %10718, %10712
  %10753 = add <16 x i16> %10752, %10724
  %10754 = add <16 x i16> %10753, %10730
  %10755 = add <16 x i16> %10754, %10736
  %10756 = add <16 x i16> %10755, %10742
  %10757 = add <16 x i16> %10756, %10748
  %10758 = add <16 x i16> %10721, %10715
  %10759 = add <16 x i16> %10758, %10727
  %10760 = add <16 x i16> %10759, %10733
  %10761 = add <16 x i16> %10760, %10739
  %10762 = add <16 x i16> %10761, %10745
  %10763 = add <16 x i16> %10762, %10751
  %10764 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10757, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10765 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10763, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10766 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10764, <16 x i16> %10757)
  %10767 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10765, <16 x i16> %10763)
  %10768 = shufflevector <16 x i16> %10766, <16 x i16> %10767, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10769 = lshr <32 x i16> %10768, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10770 = shufflevector <32 x i16> %10769, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10771 = zext i32 %.pre-phi3595 to i64
  %10772 = mul nsw i64 %97, %10771
  %10773 = add nsw i64 %99, %10772
  %10774 = getelementptr inbounds i16, i16* %blur_x, i64 %10773
  %10775 = getelementptr inbounds i16, i16* %10774, i64 -32
  %10776 = bitcast i16* %10775 to <16 x i16>*
  store <16 x i16> %10770, <16 x i16>* %10776, align 2, !tbaa !399
  %10777 = shufflevector <32 x i16> %10769, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10778 = getelementptr inbounds i16, i16* %10774, i64 -16
  %10779 = bitcast i16* %10778 to <16 x i16>*
  store <16 x i16> %10777, <16 x i16>* %10779, align 2, !tbaa !399
  %10780 = zext i32 %.pre-phi to i64
  %10781 = mul nsw i64 %10780, %116
  %10782 = add nsw i64 %10781, %94
  %10783 = getelementptr inbounds i16, i16* %blur_x, i64 %10782
  %10784 = getelementptr inbounds i16, i16* %10783, i64 -32
  %10785 = bitcast i16* %10784 to <16 x i16>*
  %10786 = load <16 x i16>, <16 x i16>* %10785, align 2, !tbaa !399
  %10787 = getelementptr inbounds i16, i16* %10783, i64 -16
  %10788 = bitcast i16* %10787 to <16 x i16>*
  %10789 = load <16 x i16>, <16 x i16>* %10788, align 2, !tbaa !399
  %10790 = zext i32 %.pre-phi3605 to i64
  %10791 = mul nsw i64 %10790, %116
  %10792 = add nsw i64 %10791, %94
  %10793 = getelementptr inbounds i16, i16* %blur_x, i64 %10792
  %10794 = getelementptr inbounds i16, i16* %10793, i64 -32
  %10795 = bitcast i16* %10794 to <16 x i16>*
  %10796 = load <16 x i16>, <16 x i16>* %10795, align 2, !tbaa !399
  %10797 = getelementptr inbounds i16, i16* %10793, i64 -16
  %10798 = bitcast i16* %10797 to <16 x i16>*
  %10799 = load <16 x i16>, <16 x i16>* %10798, align 2, !tbaa !399
  %10800 = zext i32 %.pre-phi3579 to i64
  %10801 = mul nsw i64 %10800, %116
  %10802 = add nsw i64 %10801, %94
  %10803 = getelementptr inbounds i16, i16* %blur_x, i64 %10802
  %10804 = getelementptr inbounds i16, i16* %10803, i64 -32
  %10805 = bitcast i16* %10804 to <16 x i16>*
  %10806 = load <16 x i16>, <16 x i16>* %10805, align 2, !tbaa !399
  %10807 = getelementptr inbounds i16, i16* %10803, i64 -16
  %10808 = bitcast i16* %10807 to <16 x i16>*
  %10809 = load <16 x i16>, <16 x i16>* %10808, align 2, !tbaa !399
  %10810 = zext i32 %.pre-phi3583 to i64
  %10811 = mul nsw i64 %10810, %116
  %10812 = add nsw i64 %10811, %94
  %10813 = getelementptr inbounds i16, i16* %blur_x, i64 %10812
  %10814 = getelementptr inbounds i16, i16* %10813, i64 -32
  %10815 = bitcast i16* %10814 to <16 x i16>*
  %10816 = load <16 x i16>, <16 x i16>* %10815, align 2, !tbaa !399
  %10817 = getelementptr inbounds i16, i16* %10813, i64 -16
  %10818 = bitcast i16* %10817 to <16 x i16>*
  %10819 = load <16 x i16>, <16 x i16>* %10818, align 2, !tbaa !399
  %10820 = zext i32 %.pre-phi3587 to i64
  %10821 = mul nsw i64 %10820, %116
  %10822 = add nsw i64 %10821, %94
  %10823 = getelementptr inbounds i16, i16* %blur_x, i64 %10822
  %10824 = getelementptr inbounds i16, i16* %10823, i64 -32
  %10825 = bitcast i16* %10824 to <16 x i16>*
  %10826 = load <16 x i16>, <16 x i16>* %10825, align 2, !tbaa !399
  %10827 = getelementptr inbounds i16, i16* %10823, i64 -16
  %10828 = bitcast i16* %10827 to <16 x i16>*
  %10829 = load <16 x i16>, <16 x i16>* %10828, align 2, !tbaa !399
  %10830 = mul nsw i64 %10771, %116
  %10831 = add nsw i64 %10830, %94
  %10832 = getelementptr inbounds i16, i16* %blur_x, i64 %10831
  %10833 = getelementptr inbounds i16, i16* %10832, i64 -32
  %10834 = bitcast i16* %10833 to <16 x i16>*
  %10835 = load <16 x i16>, <16 x i16>* %10834, align 2, !tbaa !399
  %10836 = getelementptr inbounds i16, i16* %10832, i64 -16
  %10837 = bitcast i16* %10836 to <16 x i16>*
  %10838 = load <16 x i16>, <16 x i16>* %10837, align 2, !tbaa !399
  %10839 = zext i32 %.pre-phi3591 to i64
  %10840 = mul nsw i64 %10839, %116
  %10841 = add nsw i64 %10840, %94
  %10842 = getelementptr inbounds i16, i16* %blur_x, i64 %10841
  %10843 = getelementptr inbounds i16, i16* %10842, i64 -32
  %10844 = bitcast i16* %10843 to <16 x i16>*
  %10845 = load <16 x i16>, <16 x i16>* %10844, align 2, !tbaa !399
  %10846 = getelementptr inbounds i16, i16* %10842, i64 -16
  %10847 = bitcast i16* %10846 to <16 x i16>*
  %10848 = load <16 x i16>, <16 x i16>* %10847, align 2, !tbaa !399
  %10849 = add <16 x i16> %10796, %10786
  %10850 = add <16 x i16> %10849, %10806
  %10851 = add <16 x i16> %10850, %10816
  %10852 = add <16 x i16> %10851, %10826
  %10853 = add <16 x i16> %10852, %10835
  %10854 = add <16 x i16> %10853, %10845
  %10855 = add <16 x i16> %10799, %10789
  %10856 = add <16 x i16> %10855, %10809
  %10857 = add <16 x i16> %10856, %10819
  %10858 = add <16 x i16> %10857, %10829
  %10859 = add <16 x i16> %10858, %10838
  %10860 = add <16 x i16> %10859, %10848
  %10861 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10854, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10862 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10860, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10863 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10861, <16 x i16> %10854)
  %10864 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10862, <16 x i16> %10860)
  %10865 = shufflevector <16 x i16> %10863, <16 x i16> %10864, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10866 = lshr <32 x i16> %10865, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10867 = shufflevector <32 x i16> %10866, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10868 = sext i32 %a26 to i64
  %10869 = add nsw i64 %10868, 15
  %10870 = mul nsw i64 %10869, %117
  %10871 = add nsw i64 %119, %10870
  %10872 = getelementptr inbounds i16, i16* %66, i64 %10871
  %10873 = getelementptr inbounds i16, i16* %10872, i64 -32
  %10874 = bitcast i16* %10873 to <16 x i16>*
  store <16 x i16> %10867, <16 x i16>* %10874, align 2, !tbaa !401
  %10875 = shufflevector <32 x i16> %10866, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10876 = getelementptr inbounds i16, i16* %10872, i64 -16
  %10877 = bitcast i16* %10876 to <16 x i16>*
  store <16 x i16> %10875, <16 x i16>* %10877, align 2, !tbaa !401
  br label %after_bb459

"for blur_y.s0.x.x.rebased464":                   ; preds = %"for blur_y.s0.x.x.rebased464.preheader", %"consume blur_x471"
  %indvars.iv3434 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased464.preheader" ], [ %indvars.iv.next3435, %"consume blur_x471" ]
  %10878 = add nsw i64 %indvars.iv3434, %101
  %10879 = icmp slt i64 %10878, 1
  %10880 = trunc i64 %10878 to i32
  %10881 = shl nsw i32 %10880, 5
  %10882 = icmp sgt i32 %4, %10881
  %10883 = or i1 %10879, %10882
  br i1 %10883, label %"produce blur_x470", label %"for blur_y.s0.x.x.rebased464.consume blur_x471_crit_edge"

"for blur_y.s0.x.x.rebased464.consume blur_x471_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased464"
  %.pre3634 = shl nsw i64 %10878, 5
  br label %"consume blur_x471"

"end for blur_y.s0.x.x.rebased465":               ; preds = %"consume blur_x471", %after_bb459
  br i1 %102, label %"for blur_y.s0.x.x.rebased472.preheader", label %"end for blur_y.s0.x.x.rebased473", !prof !386

"for blur_y.s0.x.x.rebased472.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased465"
  %10884 = sext i32 %t1756 to i64
  %10885 = zext i32 %.pre-phi to i64
  %10886 = mul nsw i64 %10885, %116
  %10887 = sub nsw i64 %10886, %96
  %10888 = zext i32 %.pre-phi3605 to i64
  %10889 = mul nsw i64 %10888, %116
  %10890 = sub nsw i64 %10889, %96
  %10891 = zext i32 %.pre-phi3579 to i64
  %10892 = mul nsw i64 %10891, %116
  %10893 = sub nsw i64 %10892, %96
  %10894 = zext i32 %.pre-phi3583 to i64
  %10895 = mul nsw i64 %10894, %116
  %10896 = sub nsw i64 %10895, %96
  %10897 = zext i32 %.pre-phi3587 to i64
  %10898 = mul nsw i64 %10897, %116
  %10899 = sub nsw i64 %10898, %96
  %10900 = zext i32 %.pre-phi3595 to i64
  %10901 = mul nsw i64 %10900, %116
  %10902 = sub nsw i64 %10901, %96
  %10903 = zext i32 %.pre-phi3591 to i64
  %10904 = mul nsw i64 %10903, %116
  %10905 = sub nsw i64 %10904, %96
  %10906 = sext i32 %a26 to i64
  %10907 = add nsw i64 %10906, 15
  %10908 = mul nsw i64 %10907, %117
  %10909 = add nsw i64 %10908, %120
  br label %"for blur_y.s0.x.x.rebased472"

"produce blur_x470":                              ; preds = %"for blur_y.s0.x.x.rebased464"
  %t992 = add nsw i32 %10881, %t2001
  %10910 = sext i32 %t992 to i64
  %10911 = getelementptr inbounds i16, i16* %read_input, i64 %10910
  %10912 = getelementptr inbounds i16, i16* %10911, i64 1
  %10913 = bitcast i16* %10912 to <16 x i16>*
  %10914 = load <16 x i16>, <16 x i16>* %10913, align 2, !tbaa !396
  %10915 = getelementptr inbounds i16, i16* %10911, i64 17
  %10916 = bitcast i16* %10915 to <16 x i16>*
  %10917 = load <16 x i16>, <16 x i16>* %10916, align 2, !tbaa !396
  %10918 = bitcast i16* %10911 to <16 x i16>*
  %10919 = load <16 x i16>, <16 x i16>* %10918, align 2, !tbaa !396
  %10920 = getelementptr inbounds i16, i16* %10911, i64 16
  %10921 = bitcast i16* %10920 to <16 x i16>*
  %10922 = load <16 x i16>, <16 x i16>* %10921, align 2, !tbaa !396
  %10923 = getelementptr inbounds i16, i16* %10911, i64 2
  %10924 = bitcast i16* %10923 to <16 x i16>*
  %10925 = load <16 x i16>, <16 x i16>* %10924, align 2, !tbaa !396
  %10926 = getelementptr inbounds i16, i16* %10911, i64 18
  %10927 = bitcast i16* %10926 to <16 x i16>*
  %10928 = load <16 x i16>, <16 x i16>* %10927, align 2, !tbaa !396
  %10929 = getelementptr inbounds i16, i16* %10911, i64 3
  %10930 = bitcast i16* %10929 to <16 x i16>*
  %10931 = load <16 x i16>, <16 x i16>* %10930, align 2, !tbaa !396
  %10932 = getelementptr inbounds i16, i16* %10911, i64 19
  %10933 = bitcast i16* %10932 to <16 x i16>*
  %10934 = load <16 x i16>, <16 x i16>* %10933, align 2, !tbaa !396
  %10935 = getelementptr inbounds i16, i16* %10911, i64 4
  %10936 = bitcast i16* %10935 to <16 x i16>*
  %10937 = load <16 x i16>, <16 x i16>* %10936, align 2, !tbaa !396
  %10938 = getelementptr inbounds i16, i16* %10911, i64 20
  %10939 = bitcast i16* %10938 to <16 x i16>*
  %10940 = load <16 x i16>, <16 x i16>* %10939, align 2, !tbaa !396
  %10941 = getelementptr inbounds i16, i16* %10911, i64 6
  %10942 = bitcast i16* %10941 to <16 x i16>*
  %10943 = load <16 x i16>, <16 x i16>* %10942, align 2, !tbaa !396
  %10944 = getelementptr inbounds i16, i16* %10911, i64 22
  %10945 = bitcast i16* %10944 to <16 x i16>*
  %10946 = load <16 x i16>, <16 x i16>* %10945, align 2, !tbaa !396
  %10947 = getelementptr inbounds i16, i16* %10911, i64 5
  %10948 = bitcast i16* %10947 to <16 x i16>*
  %10949 = load <16 x i16>, <16 x i16>* %10948, align 2, !tbaa !396
  %10950 = getelementptr inbounds i16, i16* %10911, i64 21
  %10951 = bitcast i16* %10950 to <16 x i16>*
  %10952 = load <16 x i16>, <16 x i16>* %10951, align 2, !tbaa !396
  %10953 = add <16 x i16> %10919, %10914
  %10954 = add <16 x i16> %10953, %10925
  %10955 = add <16 x i16> %10954, %10931
  %10956 = add <16 x i16> %10955, %10937
  %10957 = add <16 x i16> %10956, %10943
  %10958 = add <16 x i16> %10957, %10949
  %10959 = add <16 x i16> %10922, %10917
  %10960 = add <16 x i16> %10959, %10928
  %10961 = add <16 x i16> %10960, %10934
  %10962 = add <16 x i16> %10961, %10940
  %10963 = add <16 x i16> %10962, %10946
  %10964 = add <16 x i16> %10963, %10952
  %10965 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10958, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10966 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10964, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10967 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10965, <16 x i16> %10958)
  %10968 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10966, <16 x i16> %10964)
  %10969 = shufflevector <16 x i16> %10967, <16 x i16> %10968, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10970 = lshr <32 x i16> %10969, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10971 = shufflevector <32 x i16> %10970, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10972 = shl nsw i64 %10878, 5
  %10973 = add nsw i64 %10972, %10683
  %10974 = getelementptr inbounds i16, i16* %blur_x, i64 %10973
  %10975 = bitcast i16* %10974 to <16 x i16>*
  store <16 x i16> %10971, <16 x i16>* %10975, align 2, !tbaa !399
  %10976 = shufflevector <32 x i16> %10970, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10977 = getelementptr inbounds i16, i16* %10974, i64 16
  %10978 = bitcast i16* %10977 to <16 x i16>*
  store <16 x i16> %10976, <16 x i16>* %10978, align 2, !tbaa !399
  br label %"consume blur_x471"

"consume blur_x471":                              ; preds = %"for blur_y.s0.x.x.rebased464.consume blur_x471_crit_edge", %"produce blur_x470"
  %.pre-phi3635 = phi i64 [ %.pre3634, %"for blur_y.s0.x.x.rebased464.consume blur_x471_crit_edge" ], [ %10972, %"produce blur_x470" ]
  %10979 = add nsw i64 %10686, %.pre-phi3635
  %10980 = getelementptr inbounds i16, i16* %blur_x, i64 %10979
  %10981 = bitcast i16* %10980 to <16 x i16>*
  %10982 = load <16 x i16>, <16 x i16>* %10981, align 2, !tbaa !399
  %10983 = getelementptr inbounds i16, i16* %10980, i64 16
  %10984 = bitcast i16* %10983 to <16 x i16>*
  %10985 = load <16 x i16>, <16 x i16>* %10984, align 2, !tbaa !399
  %10986 = add nsw i64 %10689, %.pre-phi3635
  %10987 = getelementptr inbounds i16, i16* %blur_x, i64 %10986
  %10988 = bitcast i16* %10987 to <16 x i16>*
  %10989 = load <16 x i16>, <16 x i16>* %10988, align 2, !tbaa !399
  %10990 = getelementptr inbounds i16, i16* %10987, i64 16
  %10991 = bitcast i16* %10990 to <16 x i16>*
  %10992 = load <16 x i16>, <16 x i16>* %10991, align 2, !tbaa !399
  %10993 = add nsw i64 %10692, %.pre-phi3635
  %10994 = getelementptr inbounds i16, i16* %blur_x, i64 %10993
  %10995 = bitcast i16* %10994 to <16 x i16>*
  %10996 = load <16 x i16>, <16 x i16>* %10995, align 2, !tbaa !399
  %10997 = getelementptr inbounds i16, i16* %10994, i64 16
  %10998 = bitcast i16* %10997 to <16 x i16>*
  %10999 = load <16 x i16>, <16 x i16>* %10998, align 2, !tbaa !399
  %11000 = add nsw i64 %10695, %.pre-phi3635
  %11001 = getelementptr inbounds i16, i16* %blur_x, i64 %11000
  %11002 = bitcast i16* %11001 to <16 x i16>*
  %11003 = load <16 x i16>, <16 x i16>* %11002, align 2, !tbaa !399
  %11004 = getelementptr inbounds i16, i16* %11001, i64 16
  %11005 = bitcast i16* %11004 to <16 x i16>*
  %11006 = load <16 x i16>, <16 x i16>* %11005, align 2, !tbaa !399
  %11007 = add nsw i64 %10698, %.pre-phi3635
  %11008 = getelementptr inbounds i16, i16* %blur_x, i64 %11007
  %11009 = bitcast i16* %11008 to <16 x i16>*
  %11010 = load <16 x i16>, <16 x i16>* %11009, align 2, !tbaa !399
  %11011 = getelementptr inbounds i16, i16* %11008, i64 16
  %11012 = bitcast i16* %11011 to <16 x i16>*
  %11013 = load <16 x i16>, <16 x i16>* %11012, align 2, !tbaa !399
  %11014 = add nsw i64 %10701, %.pre-phi3635
  %11015 = getelementptr inbounds i16, i16* %blur_x, i64 %11014
  %11016 = bitcast i16* %11015 to <16 x i16>*
  %11017 = load <16 x i16>, <16 x i16>* %11016, align 2, !tbaa !399
  %11018 = getelementptr inbounds i16, i16* %11015, i64 16
  %11019 = bitcast i16* %11018 to <16 x i16>*
  %11020 = load <16 x i16>, <16 x i16>* %11019, align 2, !tbaa !399
  %11021 = add nsw i64 %10704, %.pre-phi3635
  %11022 = getelementptr inbounds i16, i16* %blur_x, i64 %11021
  %11023 = bitcast i16* %11022 to <16 x i16>*
  %11024 = load <16 x i16>, <16 x i16>* %11023, align 2, !tbaa !399
  %11025 = getelementptr inbounds i16, i16* %11022, i64 16
  %11026 = bitcast i16* %11025 to <16 x i16>*
  %11027 = load <16 x i16>, <16 x i16>* %11026, align 2, !tbaa !399
  %11028 = add <16 x i16> %10989, %10982
  %11029 = add <16 x i16> %11028, %10996
  %11030 = add <16 x i16> %11029, %11003
  %11031 = add <16 x i16> %11030, %11010
  %11032 = add <16 x i16> %11031, %11017
  %11033 = add <16 x i16> %11032, %11024
  %11034 = add <16 x i16> %10992, %10985
  %11035 = add <16 x i16> %11034, %10999
  %11036 = add <16 x i16> %11035, %11006
  %11037 = add <16 x i16> %11036, %11013
  %11038 = add <16 x i16> %11037, %11020
  %11039 = add <16 x i16> %11038, %11027
  %11040 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11033, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11041 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11039, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11042 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11040, <16 x i16> %11033)
  %11043 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11041, <16 x i16> %11039)
  %11044 = shufflevector <16 x i16> %11042, <16 x i16> %11043, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11045 = lshr <32 x i16> %11044, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11046 = shufflevector <32 x i16> %11045, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11047 = add nsw i64 %10708, %.pre-phi3635
  %11048 = getelementptr inbounds i16, i16* %66, i64 %11047
  %11049 = bitcast i16* %11048 to <16 x i16>*
  store <16 x i16> %11046, <16 x i16>* %11049, align 2, !tbaa !401
  %11050 = shufflevector <32 x i16> %11045, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11051 = getelementptr inbounds i16, i16* %11048, i64 16
  %11052 = bitcast i16* %11051 to <16 x i16>*
  store <16 x i16> %11050, <16 x i16>* %11052, align 2, !tbaa !401
  %indvars.iv.next3435 = add nuw nsw i64 %indvars.iv3434, 1
  %.not2841 = icmp eq i64 %indvars.iv.next3435, %188
  br i1 %.not2841, label %"end for blur_y.s0.x.x.rebased465", label %"for blur_y.s0.x.x.rebased464"

"for blur_y.s0.x.x.rebased472":                   ; preds = %"for blur_y.s0.x.x.rebased472.preheader", %"consume blur_x480"
  %blur_y.s0.x.x.rebased474 = phi i32 [ %11203, %"consume blur_x480" ], [ 0, %"for blur_y.s0.x.x.rebased472.preheader" ]
  %11053 = add nsw i32 %blur_y.s0.x.x.rebased474, %t1670
  %a224 = shl nsw i32 %11053, 5
  %11054 = icmp sgt i32 %a14, %a224
  %b230 = select i1 %11054, i32 %a224, i32 %a14
  %11055 = icmp slt i32 %11053, 1
  %11056 = icmp sgt i32 %4, %a224
  %11057 = or i1 %11055, %11056
  br i1 %11057, label %"produce blur_x478", label %"consume blur_x480"

"end for blur_y.s0.x.x.rebased473":               ; preds = %"consume blur_x480", %"end for blur_y.s0.x.x.rebased465"
  br i1 %34, label %"produce blur_x484", label %after_bb481

"produce blur_x478":                              ; preds = %"for blur_y.s0.x.x.rebased472"
  %11058 = icmp slt i32 %b230, %4
  %blur_x.s0.x.v1.base.s479 = select i1 %11058, i32 %b230, i32 %4
  %t997 = add nsw i32 %blur_x.s0.x.v1.base.s479, %t2001
  %11059 = sext i32 %t997 to i64
  %11060 = getelementptr inbounds i16, i16* %read_input, i64 %11059
  %11061 = getelementptr inbounds i16, i16* %11060, i64 1
  %11062 = bitcast i16* %11061 to <16 x i16>*
  %11063 = load <16 x i16>, <16 x i16>* %11062, align 2, !tbaa !396
  %11064 = getelementptr inbounds i16, i16* %11060, i64 17
  %11065 = bitcast i16* %11064 to <16 x i16>*
  %11066 = load <16 x i16>, <16 x i16>* %11065, align 2, !tbaa !396
  %11067 = bitcast i16* %11060 to <16 x i16>*
  %11068 = load <16 x i16>, <16 x i16>* %11067, align 2, !tbaa !396
  %11069 = getelementptr inbounds i16, i16* %11060, i64 16
  %11070 = bitcast i16* %11069 to <16 x i16>*
  %11071 = load <16 x i16>, <16 x i16>* %11070, align 2, !tbaa !396
  %11072 = getelementptr inbounds i16, i16* %11060, i64 2
  %11073 = bitcast i16* %11072 to <16 x i16>*
  %11074 = load <16 x i16>, <16 x i16>* %11073, align 2, !tbaa !396
  %11075 = getelementptr inbounds i16, i16* %11060, i64 18
  %11076 = bitcast i16* %11075 to <16 x i16>*
  %11077 = load <16 x i16>, <16 x i16>* %11076, align 2, !tbaa !396
  %11078 = getelementptr inbounds i16, i16* %11060, i64 3
  %11079 = bitcast i16* %11078 to <16 x i16>*
  %11080 = load <16 x i16>, <16 x i16>* %11079, align 2, !tbaa !396
  %11081 = getelementptr inbounds i16, i16* %11060, i64 19
  %11082 = bitcast i16* %11081 to <16 x i16>*
  %11083 = load <16 x i16>, <16 x i16>* %11082, align 2, !tbaa !396
  %11084 = getelementptr inbounds i16, i16* %11060, i64 4
  %11085 = bitcast i16* %11084 to <16 x i16>*
  %11086 = load <16 x i16>, <16 x i16>* %11085, align 2, !tbaa !396
  %11087 = getelementptr inbounds i16, i16* %11060, i64 20
  %11088 = bitcast i16* %11087 to <16 x i16>*
  %11089 = load <16 x i16>, <16 x i16>* %11088, align 2, !tbaa !396
  %11090 = getelementptr inbounds i16, i16* %11060, i64 6
  %11091 = bitcast i16* %11090 to <16 x i16>*
  %11092 = load <16 x i16>, <16 x i16>* %11091, align 2, !tbaa !396
  %11093 = getelementptr inbounds i16, i16* %11060, i64 22
  %11094 = bitcast i16* %11093 to <16 x i16>*
  %11095 = load <16 x i16>, <16 x i16>* %11094, align 2, !tbaa !396
  %11096 = getelementptr inbounds i16, i16* %11060, i64 5
  %11097 = bitcast i16* %11096 to <16 x i16>*
  %11098 = load <16 x i16>, <16 x i16>* %11097, align 2, !tbaa !396
  %11099 = getelementptr inbounds i16, i16* %11060, i64 21
  %11100 = bitcast i16* %11099 to <16 x i16>*
  %11101 = load <16 x i16>, <16 x i16>* %11100, align 2, !tbaa !396
  %11102 = add <16 x i16> %11068, %11063
  %11103 = add <16 x i16> %11102, %11074
  %11104 = add <16 x i16> %11103, %11080
  %11105 = add <16 x i16> %11104, %11086
  %11106 = add <16 x i16> %11105, %11092
  %11107 = add <16 x i16> %11106, %11098
  %11108 = add <16 x i16> %11071, %11066
  %11109 = add <16 x i16> %11108, %11077
  %11110 = add <16 x i16> %11109, %11083
  %11111 = add <16 x i16> %11110, %11089
  %11112 = add <16 x i16> %11111, %11095
  %11113 = add <16 x i16> %11112, %11101
  %11114 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11107, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11115 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11113, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11116 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11114, <16 x i16> %11107)
  %11117 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11115, <16 x i16> %11113)
  %11118 = shufflevector <16 x i16> %11116, <16 x i16> %11117, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11119 = lshr <32 x i16> %11118, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11120 = shufflevector <32 x i16> %11119, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11121 = sext i32 %blur_x.s0.x.v1.base.s479 to i64
  %11122 = add nsw i64 %11121, %10884
  %11123 = getelementptr inbounds i16, i16* %blur_x, i64 %11122
  %11124 = bitcast i16* %11123 to <16 x i16>*
  store <16 x i16> %11120, <16 x i16>* %11124, align 2, !tbaa !399
  %11125 = shufflevector <32 x i16> %11119, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11126 = getelementptr inbounds i16, i16* %11123, i64 16
  %11127 = bitcast i16* %11126 to <16 x i16>*
  store <16 x i16> %11125, <16 x i16>* %11127, align 2, !tbaa !399
  br label %"consume blur_x480"

"consume blur_x480":                              ; preds = %"for blur_y.s0.x.x.rebased472", %"produce blur_x478"
  %11128 = sext i32 %b230 to i64
  %11129 = add nsw i64 %10887, %11128
  %11130 = getelementptr inbounds i16, i16* %blur_x, i64 %11129
  %11131 = bitcast i16* %11130 to <16 x i16>*
  %11132 = load <16 x i16>, <16 x i16>* %11131, align 2, !tbaa !399
  %11133 = getelementptr inbounds i16, i16* %11130, i64 16
  %11134 = bitcast i16* %11133 to <16 x i16>*
  %11135 = load <16 x i16>, <16 x i16>* %11134, align 2, !tbaa !399
  %11136 = add nsw i64 %10890, %11128
  %11137 = getelementptr inbounds i16, i16* %blur_x, i64 %11136
  %11138 = bitcast i16* %11137 to <16 x i16>*
  %11139 = load <16 x i16>, <16 x i16>* %11138, align 2, !tbaa !399
  %11140 = getelementptr inbounds i16, i16* %11137, i64 16
  %11141 = bitcast i16* %11140 to <16 x i16>*
  %11142 = load <16 x i16>, <16 x i16>* %11141, align 2, !tbaa !399
  %11143 = add nsw i64 %10893, %11128
  %11144 = getelementptr inbounds i16, i16* %blur_x, i64 %11143
  %11145 = bitcast i16* %11144 to <16 x i16>*
  %11146 = load <16 x i16>, <16 x i16>* %11145, align 2, !tbaa !399
  %11147 = getelementptr inbounds i16, i16* %11144, i64 16
  %11148 = bitcast i16* %11147 to <16 x i16>*
  %11149 = load <16 x i16>, <16 x i16>* %11148, align 2, !tbaa !399
  %11150 = add nsw i64 %10896, %11128
  %11151 = getelementptr inbounds i16, i16* %blur_x, i64 %11150
  %11152 = bitcast i16* %11151 to <16 x i16>*
  %11153 = load <16 x i16>, <16 x i16>* %11152, align 2, !tbaa !399
  %11154 = getelementptr inbounds i16, i16* %11151, i64 16
  %11155 = bitcast i16* %11154 to <16 x i16>*
  %11156 = load <16 x i16>, <16 x i16>* %11155, align 2, !tbaa !399
  %11157 = add nsw i64 %10899, %11128
  %11158 = getelementptr inbounds i16, i16* %blur_x, i64 %11157
  %11159 = bitcast i16* %11158 to <16 x i16>*
  %11160 = load <16 x i16>, <16 x i16>* %11159, align 2, !tbaa !399
  %11161 = getelementptr inbounds i16, i16* %11158, i64 16
  %11162 = bitcast i16* %11161 to <16 x i16>*
  %11163 = load <16 x i16>, <16 x i16>* %11162, align 2, !tbaa !399
  %11164 = add nsw i64 %10902, %11128
  %11165 = getelementptr inbounds i16, i16* %blur_x, i64 %11164
  %11166 = bitcast i16* %11165 to <16 x i16>*
  %11167 = load <16 x i16>, <16 x i16>* %11166, align 2, !tbaa !399
  %11168 = getelementptr inbounds i16, i16* %11165, i64 16
  %11169 = bitcast i16* %11168 to <16 x i16>*
  %11170 = load <16 x i16>, <16 x i16>* %11169, align 2, !tbaa !399
  %11171 = add nsw i64 %10905, %11128
  %11172 = getelementptr inbounds i16, i16* %blur_x, i64 %11171
  %11173 = bitcast i16* %11172 to <16 x i16>*
  %11174 = load <16 x i16>, <16 x i16>* %11173, align 2, !tbaa !399
  %11175 = getelementptr inbounds i16, i16* %11172, i64 16
  %11176 = bitcast i16* %11175 to <16 x i16>*
  %11177 = load <16 x i16>, <16 x i16>* %11176, align 2, !tbaa !399
  %11178 = add <16 x i16> %11139, %11132
  %11179 = add <16 x i16> %11178, %11146
  %11180 = add <16 x i16> %11179, %11153
  %11181 = add <16 x i16> %11180, %11160
  %11182 = add <16 x i16> %11181, %11167
  %11183 = add <16 x i16> %11182, %11174
  %11184 = add <16 x i16> %11142, %11135
  %11185 = add <16 x i16> %11184, %11149
  %11186 = add <16 x i16> %11185, %11156
  %11187 = add <16 x i16> %11186, %11163
  %11188 = add <16 x i16> %11187, %11170
  %11189 = add <16 x i16> %11188, %11177
  %11190 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11183, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11191 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11189, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11192 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11190, <16 x i16> %11183)
  %11193 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11191, <16 x i16> %11189)
  %11194 = shufflevector <16 x i16> %11192, <16 x i16> %11193, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11195 = lshr <32 x i16> %11194, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11196 = shufflevector <32 x i16> %11195, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11197 = add nsw i64 %10909, %11128
  %11198 = getelementptr inbounds i16, i16* %66, i64 %11197
  %11199 = bitcast i16* %11198 to <16 x i16>*
  store <16 x i16> %11196, <16 x i16>* %11199, align 2, !tbaa !401
  %11200 = shufflevector <32 x i16> %11195, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11201 = getelementptr inbounds i16, i16* %11198, i64 16
  %11202 = bitcast i16* %11201 to <16 x i16>*
  store <16 x i16> %11200, <16 x i16>* %11202, align 2, !tbaa !401
  %11203 = add nuw nsw i32 %blur_y.s0.x.x.rebased474, 1
  %.not2840 = icmp eq i32 %11203, %t1727
  br i1 %.not2840, label %"end for blur_y.s0.x.x.rebased473", label %"for blur_y.s0.x.x.rebased472"

after_bb481:                                      ; preds = %"end for blur_y.s0.x.x.rebased473", %"produce blur_x484"
  br i1 %100, label %"for blur_y.s0.x.x.rebased486.preheader", label %"end for blur_y.s0.x.x.rebased487", !prof !386

"for blur_y.s0.x.x.rebased486.preheader":         ; preds = %after_bb481
  %11204 = sext i32 %t1762 to i64
  %11205 = zext i32 %.pre-phi3579 to i64
  %11206 = mul nsw i64 %11205, %116
  %11207 = sub nsw i64 %11206, %96
  %11208 = zext i32 %.pre-phi to i64
  %11209 = mul nsw i64 %11208, %116
  %11210 = sub nsw i64 %11209, %96
  %11211 = zext i32 %.pre-phi3583 to i64
  %11212 = mul nsw i64 %11211, %116
  %11213 = sub nsw i64 %11212, %96
  %11214 = zext i32 %.pre-phi3587 to i64
  %11215 = mul nsw i64 %11214, %116
  %11216 = sub nsw i64 %11215, %96
  %11217 = zext i32 %.pre-phi3591 to i64
  %11218 = mul nsw i64 %11217, %116
  %11219 = sub nsw i64 %11218, %96
  %11220 = zext i32 %.pre-phi3599 to i64
  %11221 = mul nsw i64 %11220, %116
  %11222 = sub nsw i64 %11221, %96
  %11223 = zext i32 %.pre-phi3595 to i64
  %11224 = mul nsw i64 %11223, %116
  %11225 = sub nsw i64 %11224, %96
  %11226 = sext i32 %a26 to i64
  %11227 = add nsw i64 %11226, 16
  %11228 = mul nsw i64 %11227, %117
  %11229 = add nsw i64 %11228, %120
  br label %"for blur_y.s0.x.x.rebased486"

"produce blur_x484":                              ; preds = %"end for blur_y.s0.x.x.rebased473"
  %11230 = getelementptr inbounds i16, i16* %read_input, i64 %151
  %11231 = getelementptr inbounds i16, i16* %11230, i64 -31
  %11232 = bitcast i16* %11231 to <16 x i16>*
  %11233 = load <16 x i16>, <16 x i16>* %11232, align 2, !tbaa !396
  %11234 = getelementptr inbounds i16, i16* %11230, i64 -15
  %11235 = bitcast i16* %11234 to <16 x i16>*
  %11236 = load <16 x i16>, <16 x i16>* %11235, align 2, !tbaa !396
  %11237 = getelementptr inbounds i16, i16* %11230, i64 -32
  %11238 = bitcast i16* %11237 to <16 x i16>*
  %11239 = load <16 x i16>, <16 x i16>* %11238, align 2, !tbaa !396
  %11240 = getelementptr inbounds i16, i16* %11230, i64 -16
  %11241 = bitcast i16* %11240 to <16 x i16>*
  %11242 = load <16 x i16>, <16 x i16>* %11241, align 2, !tbaa !396
  %11243 = getelementptr inbounds i16, i16* %11230, i64 -30
  %11244 = bitcast i16* %11243 to <16 x i16>*
  %11245 = load <16 x i16>, <16 x i16>* %11244, align 2, !tbaa !396
  %11246 = getelementptr inbounds i16, i16* %11230, i64 -14
  %11247 = bitcast i16* %11246 to <16 x i16>*
  %11248 = load <16 x i16>, <16 x i16>* %11247, align 2, !tbaa !396
  %11249 = getelementptr inbounds i16, i16* %11230, i64 -29
  %11250 = bitcast i16* %11249 to <16 x i16>*
  %11251 = load <16 x i16>, <16 x i16>* %11250, align 2, !tbaa !396
  %11252 = getelementptr inbounds i16, i16* %11230, i64 -13
  %11253 = bitcast i16* %11252 to <16 x i16>*
  %11254 = load <16 x i16>, <16 x i16>* %11253, align 2, !tbaa !396
  %11255 = getelementptr inbounds i16, i16* %11230, i64 -28
  %11256 = bitcast i16* %11255 to <16 x i16>*
  %11257 = load <16 x i16>, <16 x i16>* %11256, align 2, !tbaa !396
  %11258 = getelementptr inbounds i16, i16* %11230, i64 -12
  %11259 = bitcast i16* %11258 to <16 x i16>*
  %11260 = load <16 x i16>, <16 x i16>* %11259, align 2, !tbaa !396
  %11261 = getelementptr inbounds i16, i16* %11230, i64 -26
  %11262 = bitcast i16* %11261 to <16 x i16>*
  %11263 = load <16 x i16>, <16 x i16>* %11262, align 2, !tbaa !396
  %11264 = getelementptr inbounds i16, i16* %11230, i64 -10
  %11265 = bitcast i16* %11264 to <16 x i16>*
  %11266 = load <16 x i16>, <16 x i16>* %11265, align 2, !tbaa !396
  %11267 = getelementptr inbounds i16, i16* %11230, i64 -27
  %11268 = bitcast i16* %11267 to <16 x i16>*
  %11269 = load <16 x i16>, <16 x i16>* %11268, align 2, !tbaa !396
  %11270 = getelementptr inbounds i16, i16* %11230, i64 -11
  %11271 = bitcast i16* %11270 to <16 x i16>*
  %11272 = load <16 x i16>, <16 x i16>* %11271, align 2, !tbaa !396
  %11273 = add <16 x i16> %11239, %11233
  %11274 = add <16 x i16> %11273, %11245
  %11275 = add <16 x i16> %11274, %11251
  %11276 = add <16 x i16> %11275, %11257
  %11277 = add <16 x i16> %11276, %11263
  %11278 = add <16 x i16> %11277, %11269
  %11279 = add <16 x i16> %11242, %11236
  %11280 = add <16 x i16> %11279, %11248
  %11281 = add <16 x i16> %11280, %11254
  %11282 = add <16 x i16> %11281, %11260
  %11283 = add <16 x i16> %11282, %11266
  %11284 = add <16 x i16> %11283, %11272
  %11285 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11278, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11286 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11284, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11287 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11285, <16 x i16> %11278)
  %11288 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11286, <16 x i16> %11284)
  %11289 = shufflevector <16 x i16> %11287, <16 x i16> %11288, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11290 = lshr <32 x i16> %11289, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11291 = shufflevector <32 x i16> %11290, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11292 = zext i32 %.pre-phi3599 to i64
  %11293 = mul nsw i64 %97, %11292
  %11294 = add nsw i64 %99, %11293
  %11295 = getelementptr inbounds i16, i16* %blur_x, i64 %11294
  %11296 = getelementptr inbounds i16, i16* %11295, i64 -32
  %11297 = bitcast i16* %11296 to <16 x i16>*
  store <16 x i16> %11291, <16 x i16>* %11297, align 2, !tbaa !399
  %11298 = shufflevector <32 x i16> %11290, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11299 = getelementptr inbounds i16, i16* %11295, i64 -16
  %11300 = bitcast i16* %11299 to <16 x i16>*
  store <16 x i16> %11298, <16 x i16>* %11300, align 2, !tbaa !399
  %11301 = zext i32 %.pre-phi3579 to i64
  %11302 = mul nsw i64 %11301, %116
  %11303 = add nsw i64 %11302, %94
  %11304 = getelementptr inbounds i16, i16* %blur_x, i64 %11303
  %11305 = getelementptr inbounds i16, i16* %11304, i64 -32
  %11306 = bitcast i16* %11305 to <16 x i16>*
  %11307 = load <16 x i16>, <16 x i16>* %11306, align 2, !tbaa !399
  %11308 = getelementptr inbounds i16, i16* %11304, i64 -16
  %11309 = bitcast i16* %11308 to <16 x i16>*
  %11310 = load <16 x i16>, <16 x i16>* %11309, align 2, !tbaa !399
  %11311 = zext i32 %.pre-phi to i64
  %11312 = mul nsw i64 %11311, %116
  %11313 = add nsw i64 %11312, %94
  %11314 = getelementptr inbounds i16, i16* %blur_x, i64 %11313
  %11315 = getelementptr inbounds i16, i16* %11314, i64 -32
  %11316 = bitcast i16* %11315 to <16 x i16>*
  %11317 = load <16 x i16>, <16 x i16>* %11316, align 2, !tbaa !399
  %11318 = getelementptr inbounds i16, i16* %11314, i64 -16
  %11319 = bitcast i16* %11318 to <16 x i16>*
  %11320 = load <16 x i16>, <16 x i16>* %11319, align 2, !tbaa !399
  %11321 = zext i32 %.pre-phi3583 to i64
  %11322 = mul nsw i64 %11321, %116
  %11323 = add nsw i64 %11322, %94
  %11324 = getelementptr inbounds i16, i16* %blur_x, i64 %11323
  %11325 = getelementptr inbounds i16, i16* %11324, i64 -32
  %11326 = bitcast i16* %11325 to <16 x i16>*
  %11327 = load <16 x i16>, <16 x i16>* %11326, align 2, !tbaa !399
  %11328 = getelementptr inbounds i16, i16* %11324, i64 -16
  %11329 = bitcast i16* %11328 to <16 x i16>*
  %11330 = load <16 x i16>, <16 x i16>* %11329, align 2, !tbaa !399
  %11331 = zext i32 %.pre-phi3587 to i64
  %11332 = mul nsw i64 %11331, %116
  %11333 = add nsw i64 %11332, %94
  %11334 = getelementptr inbounds i16, i16* %blur_x, i64 %11333
  %11335 = getelementptr inbounds i16, i16* %11334, i64 -32
  %11336 = bitcast i16* %11335 to <16 x i16>*
  %11337 = load <16 x i16>, <16 x i16>* %11336, align 2, !tbaa !399
  %11338 = getelementptr inbounds i16, i16* %11334, i64 -16
  %11339 = bitcast i16* %11338 to <16 x i16>*
  %11340 = load <16 x i16>, <16 x i16>* %11339, align 2, !tbaa !399
  %11341 = zext i32 %.pre-phi3591 to i64
  %11342 = mul nsw i64 %11341, %116
  %11343 = add nsw i64 %11342, %94
  %11344 = getelementptr inbounds i16, i16* %blur_x, i64 %11343
  %11345 = getelementptr inbounds i16, i16* %11344, i64 -32
  %11346 = bitcast i16* %11345 to <16 x i16>*
  %11347 = load <16 x i16>, <16 x i16>* %11346, align 2, !tbaa !399
  %11348 = getelementptr inbounds i16, i16* %11344, i64 -16
  %11349 = bitcast i16* %11348 to <16 x i16>*
  %11350 = load <16 x i16>, <16 x i16>* %11349, align 2, !tbaa !399
  %11351 = mul nsw i64 %11292, %116
  %11352 = add nsw i64 %11351, %94
  %11353 = getelementptr inbounds i16, i16* %blur_x, i64 %11352
  %11354 = getelementptr inbounds i16, i16* %11353, i64 -32
  %11355 = bitcast i16* %11354 to <16 x i16>*
  %11356 = load <16 x i16>, <16 x i16>* %11355, align 2, !tbaa !399
  %11357 = getelementptr inbounds i16, i16* %11353, i64 -16
  %11358 = bitcast i16* %11357 to <16 x i16>*
  %11359 = load <16 x i16>, <16 x i16>* %11358, align 2, !tbaa !399
  %11360 = zext i32 %.pre-phi3595 to i64
  %11361 = mul nsw i64 %11360, %116
  %11362 = add nsw i64 %11361, %94
  %11363 = getelementptr inbounds i16, i16* %blur_x, i64 %11362
  %11364 = getelementptr inbounds i16, i16* %11363, i64 -32
  %11365 = bitcast i16* %11364 to <16 x i16>*
  %11366 = load <16 x i16>, <16 x i16>* %11365, align 2, !tbaa !399
  %11367 = getelementptr inbounds i16, i16* %11363, i64 -16
  %11368 = bitcast i16* %11367 to <16 x i16>*
  %11369 = load <16 x i16>, <16 x i16>* %11368, align 2, !tbaa !399
  %11370 = add <16 x i16> %11317, %11307
  %11371 = add <16 x i16> %11370, %11327
  %11372 = add <16 x i16> %11371, %11337
  %11373 = add <16 x i16> %11372, %11347
  %11374 = add <16 x i16> %11373, %11356
  %11375 = add <16 x i16> %11374, %11366
  %11376 = add <16 x i16> %11320, %11310
  %11377 = add <16 x i16> %11376, %11330
  %11378 = add <16 x i16> %11377, %11340
  %11379 = add <16 x i16> %11378, %11350
  %11380 = add <16 x i16> %11379, %11359
  %11381 = add <16 x i16> %11380, %11369
  %11382 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11375, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11383 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11381, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11384 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11382, <16 x i16> %11375)
  %11385 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11383, <16 x i16> %11381)
  %11386 = shufflevector <16 x i16> %11384, <16 x i16> %11385, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11387 = lshr <32 x i16> %11386, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11388 = shufflevector <32 x i16> %11387, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11389 = sext i32 %a26 to i64
  %11390 = add nsw i64 %11389, 16
  %11391 = mul nsw i64 %11390, %117
  %11392 = add nsw i64 %119, %11391
  %11393 = getelementptr inbounds i16, i16* %66, i64 %11392
  %11394 = getelementptr inbounds i16, i16* %11393, i64 -32
  %11395 = bitcast i16* %11394 to <16 x i16>*
  store <16 x i16> %11388, <16 x i16>* %11395, align 2, !tbaa !401
  %11396 = shufflevector <32 x i16> %11387, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11397 = getelementptr inbounds i16, i16* %11393, i64 -16
  %11398 = bitcast i16* %11397 to <16 x i16>*
  store <16 x i16> %11396, <16 x i16>* %11398, align 2, !tbaa !401
  br label %after_bb481

"for blur_y.s0.x.x.rebased486":                   ; preds = %"for blur_y.s0.x.x.rebased486.preheader", %"consume blur_x493"
  %indvars.iv3437 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased486.preheader" ], [ %indvars.iv.next3438, %"consume blur_x493" ]
  %11399 = add nsw i64 %indvars.iv3437, %101
  %11400 = icmp slt i64 %11399, 1
  %11401 = trunc i64 %11399 to i32
  %11402 = shl nsw i32 %11401, 5
  %11403 = icmp sgt i32 %4, %11402
  %11404 = or i1 %11400, %11403
  br i1 %11404, label %"produce blur_x492", label %"for blur_y.s0.x.x.rebased486.consume blur_x493_crit_edge"

"for blur_y.s0.x.x.rebased486.consume blur_x493_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased486"
  %.pre3636 = shl nsw i64 %11399, 5
  br label %"consume blur_x493"

"end for blur_y.s0.x.x.rebased487":               ; preds = %"consume blur_x493", %after_bb481
  br i1 %102, label %"for blur_y.s0.x.x.rebased494.preheader", label %"end for blur_y.s0.x.x.rebased495", !prof !386

"for blur_y.s0.x.x.rebased494.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased487"
  %11405 = sext i32 %t1762 to i64
  %11406 = zext i32 %.pre-phi3579 to i64
  %11407 = mul nsw i64 %11406, %116
  %11408 = sub nsw i64 %11407, %96
  %11409 = zext i32 %.pre-phi to i64
  %11410 = mul nsw i64 %11409, %116
  %11411 = sub nsw i64 %11410, %96
  %11412 = zext i32 %.pre-phi3583 to i64
  %11413 = mul nsw i64 %11412, %116
  %11414 = sub nsw i64 %11413, %96
  %11415 = zext i32 %.pre-phi3587 to i64
  %11416 = mul nsw i64 %11415, %116
  %11417 = sub nsw i64 %11416, %96
  %11418 = zext i32 %.pre-phi3591 to i64
  %11419 = mul nsw i64 %11418, %116
  %11420 = sub nsw i64 %11419, %96
  %11421 = zext i32 %.pre-phi3599 to i64
  %11422 = mul nsw i64 %11421, %116
  %11423 = sub nsw i64 %11422, %96
  %11424 = zext i32 %.pre-phi3595 to i64
  %11425 = mul nsw i64 %11424, %116
  %11426 = sub nsw i64 %11425, %96
  %11427 = sext i32 %a26 to i64
  %11428 = add nsw i64 %11427, 16
  %11429 = mul nsw i64 %11428, %117
  %11430 = add nsw i64 %11429, %120
  br label %"for blur_y.s0.x.x.rebased494"

"produce blur_x492":                              ; preds = %"for blur_y.s0.x.x.rebased486"
  %t1008 = add nsw i32 %11402, %t2017
  %11431 = sext i32 %t1008 to i64
  %11432 = getelementptr inbounds i16, i16* %read_input, i64 %11431
  %11433 = getelementptr inbounds i16, i16* %11432, i64 1
  %11434 = bitcast i16* %11433 to <16 x i16>*
  %11435 = load <16 x i16>, <16 x i16>* %11434, align 2, !tbaa !396
  %11436 = getelementptr inbounds i16, i16* %11432, i64 17
  %11437 = bitcast i16* %11436 to <16 x i16>*
  %11438 = load <16 x i16>, <16 x i16>* %11437, align 2, !tbaa !396
  %11439 = bitcast i16* %11432 to <16 x i16>*
  %11440 = load <16 x i16>, <16 x i16>* %11439, align 2, !tbaa !396
  %11441 = getelementptr inbounds i16, i16* %11432, i64 16
  %11442 = bitcast i16* %11441 to <16 x i16>*
  %11443 = load <16 x i16>, <16 x i16>* %11442, align 2, !tbaa !396
  %11444 = getelementptr inbounds i16, i16* %11432, i64 2
  %11445 = bitcast i16* %11444 to <16 x i16>*
  %11446 = load <16 x i16>, <16 x i16>* %11445, align 2, !tbaa !396
  %11447 = getelementptr inbounds i16, i16* %11432, i64 18
  %11448 = bitcast i16* %11447 to <16 x i16>*
  %11449 = load <16 x i16>, <16 x i16>* %11448, align 2, !tbaa !396
  %11450 = getelementptr inbounds i16, i16* %11432, i64 3
  %11451 = bitcast i16* %11450 to <16 x i16>*
  %11452 = load <16 x i16>, <16 x i16>* %11451, align 2, !tbaa !396
  %11453 = getelementptr inbounds i16, i16* %11432, i64 19
  %11454 = bitcast i16* %11453 to <16 x i16>*
  %11455 = load <16 x i16>, <16 x i16>* %11454, align 2, !tbaa !396
  %11456 = getelementptr inbounds i16, i16* %11432, i64 4
  %11457 = bitcast i16* %11456 to <16 x i16>*
  %11458 = load <16 x i16>, <16 x i16>* %11457, align 2, !tbaa !396
  %11459 = getelementptr inbounds i16, i16* %11432, i64 20
  %11460 = bitcast i16* %11459 to <16 x i16>*
  %11461 = load <16 x i16>, <16 x i16>* %11460, align 2, !tbaa !396
  %11462 = getelementptr inbounds i16, i16* %11432, i64 6
  %11463 = bitcast i16* %11462 to <16 x i16>*
  %11464 = load <16 x i16>, <16 x i16>* %11463, align 2, !tbaa !396
  %11465 = getelementptr inbounds i16, i16* %11432, i64 22
  %11466 = bitcast i16* %11465 to <16 x i16>*
  %11467 = load <16 x i16>, <16 x i16>* %11466, align 2, !tbaa !396
  %11468 = getelementptr inbounds i16, i16* %11432, i64 5
  %11469 = bitcast i16* %11468 to <16 x i16>*
  %11470 = load <16 x i16>, <16 x i16>* %11469, align 2, !tbaa !396
  %11471 = getelementptr inbounds i16, i16* %11432, i64 21
  %11472 = bitcast i16* %11471 to <16 x i16>*
  %11473 = load <16 x i16>, <16 x i16>* %11472, align 2, !tbaa !396
  %11474 = add <16 x i16> %11440, %11435
  %11475 = add <16 x i16> %11474, %11446
  %11476 = add <16 x i16> %11475, %11452
  %11477 = add <16 x i16> %11476, %11458
  %11478 = add <16 x i16> %11477, %11464
  %11479 = add <16 x i16> %11478, %11470
  %11480 = add <16 x i16> %11443, %11438
  %11481 = add <16 x i16> %11480, %11449
  %11482 = add <16 x i16> %11481, %11455
  %11483 = add <16 x i16> %11482, %11461
  %11484 = add <16 x i16> %11483, %11467
  %11485 = add <16 x i16> %11484, %11473
  %11486 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11479, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11487 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11485, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11488 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11486, <16 x i16> %11479)
  %11489 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11487, <16 x i16> %11485)
  %11490 = shufflevector <16 x i16> %11488, <16 x i16> %11489, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11491 = lshr <32 x i16> %11490, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11492 = shufflevector <32 x i16> %11491, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11493 = shl nsw i64 %11399, 5
  %11494 = add nsw i64 %11493, %11204
  %11495 = getelementptr inbounds i16, i16* %blur_x, i64 %11494
  %11496 = bitcast i16* %11495 to <16 x i16>*
  store <16 x i16> %11492, <16 x i16>* %11496, align 2, !tbaa !399
  %11497 = shufflevector <32 x i16> %11491, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11498 = getelementptr inbounds i16, i16* %11495, i64 16
  %11499 = bitcast i16* %11498 to <16 x i16>*
  store <16 x i16> %11497, <16 x i16>* %11499, align 2, !tbaa !399
  br label %"consume blur_x493"

"consume blur_x493":                              ; preds = %"for blur_y.s0.x.x.rebased486.consume blur_x493_crit_edge", %"produce blur_x492"
  %.pre-phi3637 = phi i64 [ %.pre3636, %"for blur_y.s0.x.x.rebased486.consume blur_x493_crit_edge" ], [ %11493, %"produce blur_x492" ]
  %11500 = add nsw i64 %11207, %.pre-phi3637
  %11501 = getelementptr inbounds i16, i16* %blur_x, i64 %11500
  %11502 = bitcast i16* %11501 to <16 x i16>*
  %11503 = load <16 x i16>, <16 x i16>* %11502, align 2, !tbaa !399
  %11504 = getelementptr inbounds i16, i16* %11501, i64 16
  %11505 = bitcast i16* %11504 to <16 x i16>*
  %11506 = load <16 x i16>, <16 x i16>* %11505, align 2, !tbaa !399
  %11507 = add nsw i64 %11210, %.pre-phi3637
  %11508 = getelementptr inbounds i16, i16* %blur_x, i64 %11507
  %11509 = bitcast i16* %11508 to <16 x i16>*
  %11510 = load <16 x i16>, <16 x i16>* %11509, align 2, !tbaa !399
  %11511 = getelementptr inbounds i16, i16* %11508, i64 16
  %11512 = bitcast i16* %11511 to <16 x i16>*
  %11513 = load <16 x i16>, <16 x i16>* %11512, align 2, !tbaa !399
  %11514 = add nsw i64 %11213, %.pre-phi3637
  %11515 = getelementptr inbounds i16, i16* %blur_x, i64 %11514
  %11516 = bitcast i16* %11515 to <16 x i16>*
  %11517 = load <16 x i16>, <16 x i16>* %11516, align 2, !tbaa !399
  %11518 = getelementptr inbounds i16, i16* %11515, i64 16
  %11519 = bitcast i16* %11518 to <16 x i16>*
  %11520 = load <16 x i16>, <16 x i16>* %11519, align 2, !tbaa !399
  %11521 = add nsw i64 %11216, %.pre-phi3637
  %11522 = getelementptr inbounds i16, i16* %blur_x, i64 %11521
  %11523 = bitcast i16* %11522 to <16 x i16>*
  %11524 = load <16 x i16>, <16 x i16>* %11523, align 2, !tbaa !399
  %11525 = getelementptr inbounds i16, i16* %11522, i64 16
  %11526 = bitcast i16* %11525 to <16 x i16>*
  %11527 = load <16 x i16>, <16 x i16>* %11526, align 2, !tbaa !399
  %11528 = add nsw i64 %11219, %.pre-phi3637
  %11529 = getelementptr inbounds i16, i16* %blur_x, i64 %11528
  %11530 = bitcast i16* %11529 to <16 x i16>*
  %11531 = load <16 x i16>, <16 x i16>* %11530, align 2, !tbaa !399
  %11532 = getelementptr inbounds i16, i16* %11529, i64 16
  %11533 = bitcast i16* %11532 to <16 x i16>*
  %11534 = load <16 x i16>, <16 x i16>* %11533, align 2, !tbaa !399
  %11535 = add nsw i64 %11222, %.pre-phi3637
  %11536 = getelementptr inbounds i16, i16* %blur_x, i64 %11535
  %11537 = bitcast i16* %11536 to <16 x i16>*
  %11538 = load <16 x i16>, <16 x i16>* %11537, align 2, !tbaa !399
  %11539 = getelementptr inbounds i16, i16* %11536, i64 16
  %11540 = bitcast i16* %11539 to <16 x i16>*
  %11541 = load <16 x i16>, <16 x i16>* %11540, align 2, !tbaa !399
  %11542 = add nsw i64 %11225, %.pre-phi3637
  %11543 = getelementptr inbounds i16, i16* %blur_x, i64 %11542
  %11544 = bitcast i16* %11543 to <16 x i16>*
  %11545 = load <16 x i16>, <16 x i16>* %11544, align 2, !tbaa !399
  %11546 = getelementptr inbounds i16, i16* %11543, i64 16
  %11547 = bitcast i16* %11546 to <16 x i16>*
  %11548 = load <16 x i16>, <16 x i16>* %11547, align 2, !tbaa !399
  %11549 = add <16 x i16> %11510, %11503
  %11550 = add <16 x i16> %11549, %11517
  %11551 = add <16 x i16> %11550, %11524
  %11552 = add <16 x i16> %11551, %11531
  %11553 = add <16 x i16> %11552, %11538
  %11554 = add <16 x i16> %11553, %11545
  %11555 = add <16 x i16> %11513, %11506
  %11556 = add <16 x i16> %11555, %11520
  %11557 = add <16 x i16> %11556, %11527
  %11558 = add <16 x i16> %11557, %11534
  %11559 = add <16 x i16> %11558, %11541
  %11560 = add <16 x i16> %11559, %11548
  %11561 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11554, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11562 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11560, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11563 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11561, <16 x i16> %11554)
  %11564 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11562, <16 x i16> %11560)
  %11565 = shufflevector <16 x i16> %11563, <16 x i16> %11564, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11566 = lshr <32 x i16> %11565, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11567 = shufflevector <32 x i16> %11566, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11568 = add nsw i64 %11229, %.pre-phi3637
  %11569 = getelementptr inbounds i16, i16* %66, i64 %11568
  %11570 = bitcast i16* %11569 to <16 x i16>*
  store <16 x i16> %11567, <16 x i16>* %11570, align 2, !tbaa !401
  %11571 = shufflevector <32 x i16> %11566, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11572 = getelementptr inbounds i16, i16* %11569, i64 16
  %11573 = bitcast i16* %11572 to <16 x i16>*
  store <16 x i16> %11571, <16 x i16>* %11573, align 2, !tbaa !401
  %indvars.iv.next3438 = add nuw nsw i64 %indvars.iv3437, 1
  %.not2839 = icmp eq i64 %indvars.iv.next3438, %188
  br i1 %.not2839, label %"end for blur_y.s0.x.x.rebased487", label %"for blur_y.s0.x.x.rebased486"

"for blur_y.s0.x.x.rebased494":                   ; preds = %"for blur_y.s0.x.x.rebased494.preheader", %"consume blur_x502"
  %blur_y.s0.x.x.rebased496 = phi i32 [ %11724, %"consume blur_x502" ], [ 0, %"for blur_y.s0.x.x.rebased494.preheader" ]
  %11574 = add nsw i32 %blur_y.s0.x.x.rebased496, %t1670
  %a231 = shl nsw i32 %11574, 5
  %11575 = icmp sgt i32 %a14, %a231
  %b237 = select i1 %11575, i32 %a231, i32 %a14
  %11576 = icmp slt i32 %11574, 1
  %11577 = icmp sgt i32 %4, %a231
  %11578 = or i1 %11576, %11577
  br i1 %11578, label %"produce blur_x500", label %"consume blur_x502"

"end for blur_y.s0.x.x.rebased495":               ; preds = %"consume blur_x502", %"end for blur_y.s0.x.x.rebased487"
  br i1 %34, label %"produce blur_x506", label %after_bb503

"produce blur_x500":                              ; preds = %"for blur_y.s0.x.x.rebased494"
  %11579 = icmp slt i32 %b237, %4
  %blur_x.s0.x.v1.base.s501 = select i1 %11579, i32 %b237, i32 %4
  %t1013 = add nsw i32 %blur_x.s0.x.v1.base.s501, %t2017
  %11580 = sext i32 %t1013 to i64
  %11581 = getelementptr inbounds i16, i16* %read_input, i64 %11580
  %11582 = getelementptr inbounds i16, i16* %11581, i64 1
  %11583 = bitcast i16* %11582 to <16 x i16>*
  %11584 = load <16 x i16>, <16 x i16>* %11583, align 2, !tbaa !396
  %11585 = getelementptr inbounds i16, i16* %11581, i64 17
  %11586 = bitcast i16* %11585 to <16 x i16>*
  %11587 = load <16 x i16>, <16 x i16>* %11586, align 2, !tbaa !396
  %11588 = bitcast i16* %11581 to <16 x i16>*
  %11589 = load <16 x i16>, <16 x i16>* %11588, align 2, !tbaa !396
  %11590 = getelementptr inbounds i16, i16* %11581, i64 16
  %11591 = bitcast i16* %11590 to <16 x i16>*
  %11592 = load <16 x i16>, <16 x i16>* %11591, align 2, !tbaa !396
  %11593 = getelementptr inbounds i16, i16* %11581, i64 2
  %11594 = bitcast i16* %11593 to <16 x i16>*
  %11595 = load <16 x i16>, <16 x i16>* %11594, align 2, !tbaa !396
  %11596 = getelementptr inbounds i16, i16* %11581, i64 18
  %11597 = bitcast i16* %11596 to <16 x i16>*
  %11598 = load <16 x i16>, <16 x i16>* %11597, align 2, !tbaa !396
  %11599 = getelementptr inbounds i16, i16* %11581, i64 3
  %11600 = bitcast i16* %11599 to <16 x i16>*
  %11601 = load <16 x i16>, <16 x i16>* %11600, align 2, !tbaa !396
  %11602 = getelementptr inbounds i16, i16* %11581, i64 19
  %11603 = bitcast i16* %11602 to <16 x i16>*
  %11604 = load <16 x i16>, <16 x i16>* %11603, align 2, !tbaa !396
  %11605 = getelementptr inbounds i16, i16* %11581, i64 4
  %11606 = bitcast i16* %11605 to <16 x i16>*
  %11607 = load <16 x i16>, <16 x i16>* %11606, align 2, !tbaa !396
  %11608 = getelementptr inbounds i16, i16* %11581, i64 20
  %11609 = bitcast i16* %11608 to <16 x i16>*
  %11610 = load <16 x i16>, <16 x i16>* %11609, align 2, !tbaa !396
  %11611 = getelementptr inbounds i16, i16* %11581, i64 6
  %11612 = bitcast i16* %11611 to <16 x i16>*
  %11613 = load <16 x i16>, <16 x i16>* %11612, align 2, !tbaa !396
  %11614 = getelementptr inbounds i16, i16* %11581, i64 22
  %11615 = bitcast i16* %11614 to <16 x i16>*
  %11616 = load <16 x i16>, <16 x i16>* %11615, align 2, !tbaa !396
  %11617 = getelementptr inbounds i16, i16* %11581, i64 5
  %11618 = bitcast i16* %11617 to <16 x i16>*
  %11619 = load <16 x i16>, <16 x i16>* %11618, align 2, !tbaa !396
  %11620 = getelementptr inbounds i16, i16* %11581, i64 21
  %11621 = bitcast i16* %11620 to <16 x i16>*
  %11622 = load <16 x i16>, <16 x i16>* %11621, align 2, !tbaa !396
  %11623 = add <16 x i16> %11589, %11584
  %11624 = add <16 x i16> %11623, %11595
  %11625 = add <16 x i16> %11624, %11601
  %11626 = add <16 x i16> %11625, %11607
  %11627 = add <16 x i16> %11626, %11613
  %11628 = add <16 x i16> %11627, %11619
  %11629 = add <16 x i16> %11592, %11587
  %11630 = add <16 x i16> %11629, %11598
  %11631 = add <16 x i16> %11630, %11604
  %11632 = add <16 x i16> %11631, %11610
  %11633 = add <16 x i16> %11632, %11616
  %11634 = add <16 x i16> %11633, %11622
  %11635 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11628, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11636 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11634, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11637 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11635, <16 x i16> %11628)
  %11638 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11636, <16 x i16> %11634)
  %11639 = shufflevector <16 x i16> %11637, <16 x i16> %11638, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11640 = lshr <32 x i16> %11639, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11641 = shufflevector <32 x i16> %11640, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11642 = sext i32 %blur_x.s0.x.v1.base.s501 to i64
  %11643 = add nsw i64 %11642, %11405
  %11644 = getelementptr inbounds i16, i16* %blur_x, i64 %11643
  %11645 = bitcast i16* %11644 to <16 x i16>*
  store <16 x i16> %11641, <16 x i16>* %11645, align 2, !tbaa !399
  %11646 = shufflevector <32 x i16> %11640, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11647 = getelementptr inbounds i16, i16* %11644, i64 16
  %11648 = bitcast i16* %11647 to <16 x i16>*
  store <16 x i16> %11646, <16 x i16>* %11648, align 2, !tbaa !399
  br label %"consume blur_x502"

"consume blur_x502":                              ; preds = %"for blur_y.s0.x.x.rebased494", %"produce blur_x500"
  %11649 = sext i32 %b237 to i64
  %11650 = add nsw i64 %11408, %11649
  %11651 = getelementptr inbounds i16, i16* %blur_x, i64 %11650
  %11652 = bitcast i16* %11651 to <16 x i16>*
  %11653 = load <16 x i16>, <16 x i16>* %11652, align 2, !tbaa !399
  %11654 = getelementptr inbounds i16, i16* %11651, i64 16
  %11655 = bitcast i16* %11654 to <16 x i16>*
  %11656 = load <16 x i16>, <16 x i16>* %11655, align 2, !tbaa !399
  %11657 = add nsw i64 %11411, %11649
  %11658 = getelementptr inbounds i16, i16* %blur_x, i64 %11657
  %11659 = bitcast i16* %11658 to <16 x i16>*
  %11660 = load <16 x i16>, <16 x i16>* %11659, align 2, !tbaa !399
  %11661 = getelementptr inbounds i16, i16* %11658, i64 16
  %11662 = bitcast i16* %11661 to <16 x i16>*
  %11663 = load <16 x i16>, <16 x i16>* %11662, align 2, !tbaa !399
  %11664 = add nsw i64 %11414, %11649
  %11665 = getelementptr inbounds i16, i16* %blur_x, i64 %11664
  %11666 = bitcast i16* %11665 to <16 x i16>*
  %11667 = load <16 x i16>, <16 x i16>* %11666, align 2, !tbaa !399
  %11668 = getelementptr inbounds i16, i16* %11665, i64 16
  %11669 = bitcast i16* %11668 to <16 x i16>*
  %11670 = load <16 x i16>, <16 x i16>* %11669, align 2, !tbaa !399
  %11671 = add nsw i64 %11417, %11649
  %11672 = getelementptr inbounds i16, i16* %blur_x, i64 %11671
  %11673 = bitcast i16* %11672 to <16 x i16>*
  %11674 = load <16 x i16>, <16 x i16>* %11673, align 2, !tbaa !399
  %11675 = getelementptr inbounds i16, i16* %11672, i64 16
  %11676 = bitcast i16* %11675 to <16 x i16>*
  %11677 = load <16 x i16>, <16 x i16>* %11676, align 2, !tbaa !399
  %11678 = add nsw i64 %11420, %11649
  %11679 = getelementptr inbounds i16, i16* %blur_x, i64 %11678
  %11680 = bitcast i16* %11679 to <16 x i16>*
  %11681 = load <16 x i16>, <16 x i16>* %11680, align 2, !tbaa !399
  %11682 = getelementptr inbounds i16, i16* %11679, i64 16
  %11683 = bitcast i16* %11682 to <16 x i16>*
  %11684 = load <16 x i16>, <16 x i16>* %11683, align 2, !tbaa !399
  %11685 = add nsw i64 %11423, %11649
  %11686 = getelementptr inbounds i16, i16* %blur_x, i64 %11685
  %11687 = bitcast i16* %11686 to <16 x i16>*
  %11688 = load <16 x i16>, <16 x i16>* %11687, align 2, !tbaa !399
  %11689 = getelementptr inbounds i16, i16* %11686, i64 16
  %11690 = bitcast i16* %11689 to <16 x i16>*
  %11691 = load <16 x i16>, <16 x i16>* %11690, align 2, !tbaa !399
  %11692 = add nsw i64 %11426, %11649
  %11693 = getelementptr inbounds i16, i16* %blur_x, i64 %11692
  %11694 = bitcast i16* %11693 to <16 x i16>*
  %11695 = load <16 x i16>, <16 x i16>* %11694, align 2, !tbaa !399
  %11696 = getelementptr inbounds i16, i16* %11693, i64 16
  %11697 = bitcast i16* %11696 to <16 x i16>*
  %11698 = load <16 x i16>, <16 x i16>* %11697, align 2, !tbaa !399
  %11699 = add <16 x i16> %11660, %11653
  %11700 = add <16 x i16> %11699, %11667
  %11701 = add <16 x i16> %11700, %11674
  %11702 = add <16 x i16> %11701, %11681
  %11703 = add <16 x i16> %11702, %11688
  %11704 = add <16 x i16> %11703, %11695
  %11705 = add <16 x i16> %11663, %11656
  %11706 = add <16 x i16> %11705, %11670
  %11707 = add <16 x i16> %11706, %11677
  %11708 = add <16 x i16> %11707, %11684
  %11709 = add <16 x i16> %11708, %11691
  %11710 = add <16 x i16> %11709, %11698
  %11711 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11704, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11712 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11710, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11713 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11711, <16 x i16> %11704)
  %11714 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11712, <16 x i16> %11710)
  %11715 = shufflevector <16 x i16> %11713, <16 x i16> %11714, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11716 = lshr <32 x i16> %11715, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11717 = shufflevector <32 x i16> %11716, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11718 = add nsw i64 %11430, %11649
  %11719 = getelementptr inbounds i16, i16* %66, i64 %11718
  %11720 = bitcast i16* %11719 to <16 x i16>*
  store <16 x i16> %11717, <16 x i16>* %11720, align 2, !tbaa !401
  %11721 = shufflevector <32 x i16> %11716, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11722 = getelementptr inbounds i16, i16* %11719, i64 16
  %11723 = bitcast i16* %11722 to <16 x i16>*
  store <16 x i16> %11721, <16 x i16>* %11723, align 2, !tbaa !401
  %11724 = add nuw nsw i32 %blur_y.s0.x.x.rebased496, 1
  %.not2838 = icmp eq i32 %11724, %t1727
  br i1 %.not2838, label %"end for blur_y.s0.x.x.rebased495", label %"for blur_y.s0.x.x.rebased494"

after_bb503:                                      ; preds = %"end for blur_y.s0.x.x.rebased495", %"produce blur_x506"
  br i1 %100, label %"for blur_y.s0.x.x.rebased508.preheader", label %"end for blur_y.s0.x.x.rebased509", !prof !386

"for blur_y.s0.x.x.rebased508.preheader":         ; preds = %after_bb503
  %11725 = sext i32 %t1778 to i64
  %11726 = zext i32 %.pre-phi3583 to i64
  %11727 = mul nsw i64 %11726, %116
  %11728 = sub nsw i64 %11727, %96
  %11729 = zext i32 %.pre-phi3579 to i64
  %11730 = mul nsw i64 %11729, %116
  %11731 = sub nsw i64 %11730, %96
  %11732 = zext i32 %.pre-phi3587 to i64
  %11733 = mul nsw i64 %11732, %116
  %11734 = sub nsw i64 %11733, %96
  %11735 = zext i32 %.pre-phi3591 to i64
  %11736 = mul nsw i64 %11735, %116
  %11737 = sub nsw i64 %11736, %96
  %11738 = zext i32 %.pre-phi3595 to i64
  %11739 = mul nsw i64 %11738, %116
  %11740 = sub nsw i64 %11739, %96
  %11741 = zext i32 %.pre-phi3605 to i64
  %11742 = mul nsw i64 %11741, %116
  %11743 = sub nsw i64 %11742, %96
  %11744 = zext i32 %.pre-phi3599 to i64
  %11745 = mul nsw i64 %11744, %116
  %11746 = sub nsw i64 %11745, %96
  %11747 = sext i32 %a26 to i64
  %11748 = add nsw i64 %11747, 17
  %11749 = mul nsw i64 %11748, %117
  %11750 = add nsw i64 %11749, %120
  br label %"for blur_y.s0.x.x.rebased508"

"produce blur_x506":                              ; preds = %"end for blur_y.s0.x.x.rebased495"
  %11751 = getelementptr inbounds i16, i16* %read_input, i64 %153
  %11752 = getelementptr inbounds i16, i16* %11751, i64 -31
  %11753 = bitcast i16* %11752 to <16 x i16>*
  %11754 = load <16 x i16>, <16 x i16>* %11753, align 2, !tbaa !396
  %11755 = getelementptr inbounds i16, i16* %11751, i64 -15
  %11756 = bitcast i16* %11755 to <16 x i16>*
  %11757 = load <16 x i16>, <16 x i16>* %11756, align 2, !tbaa !396
  %11758 = getelementptr inbounds i16, i16* %11751, i64 -32
  %11759 = bitcast i16* %11758 to <16 x i16>*
  %11760 = load <16 x i16>, <16 x i16>* %11759, align 2, !tbaa !396
  %11761 = getelementptr inbounds i16, i16* %11751, i64 -16
  %11762 = bitcast i16* %11761 to <16 x i16>*
  %11763 = load <16 x i16>, <16 x i16>* %11762, align 2, !tbaa !396
  %11764 = getelementptr inbounds i16, i16* %11751, i64 -30
  %11765 = bitcast i16* %11764 to <16 x i16>*
  %11766 = load <16 x i16>, <16 x i16>* %11765, align 2, !tbaa !396
  %11767 = getelementptr inbounds i16, i16* %11751, i64 -14
  %11768 = bitcast i16* %11767 to <16 x i16>*
  %11769 = load <16 x i16>, <16 x i16>* %11768, align 2, !tbaa !396
  %11770 = getelementptr inbounds i16, i16* %11751, i64 -29
  %11771 = bitcast i16* %11770 to <16 x i16>*
  %11772 = load <16 x i16>, <16 x i16>* %11771, align 2, !tbaa !396
  %11773 = getelementptr inbounds i16, i16* %11751, i64 -13
  %11774 = bitcast i16* %11773 to <16 x i16>*
  %11775 = load <16 x i16>, <16 x i16>* %11774, align 2, !tbaa !396
  %11776 = getelementptr inbounds i16, i16* %11751, i64 -28
  %11777 = bitcast i16* %11776 to <16 x i16>*
  %11778 = load <16 x i16>, <16 x i16>* %11777, align 2, !tbaa !396
  %11779 = getelementptr inbounds i16, i16* %11751, i64 -12
  %11780 = bitcast i16* %11779 to <16 x i16>*
  %11781 = load <16 x i16>, <16 x i16>* %11780, align 2, !tbaa !396
  %11782 = getelementptr inbounds i16, i16* %11751, i64 -26
  %11783 = bitcast i16* %11782 to <16 x i16>*
  %11784 = load <16 x i16>, <16 x i16>* %11783, align 2, !tbaa !396
  %11785 = getelementptr inbounds i16, i16* %11751, i64 -10
  %11786 = bitcast i16* %11785 to <16 x i16>*
  %11787 = load <16 x i16>, <16 x i16>* %11786, align 2, !tbaa !396
  %11788 = getelementptr inbounds i16, i16* %11751, i64 -27
  %11789 = bitcast i16* %11788 to <16 x i16>*
  %11790 = load <16 x i16>, <16 x i16>* %11789, align 2, !tbaa !396
  %11791 = getelementptr inbounds i16, i16* %11751, i64 -11
  %11792 = bitcast i16* %11791 to <16 x i16>*
  %11793 = load <16 x i16>, <16 x i16>* %11792, align 2, !tbaa !396
  %11794 = add <16 x i16> %11760, %11754
  %11795 = add <16 x i16> %11794, %11766
  %11796 = add <16 x i16> %11795, %11772
  %11797 = add <16 x i16> %11796, %11778
  %11798 = add <16 x i16> %11797, %11784
  %11799 = add <16 x i16> %11798, %11790
  %11800 = add <16 x i16> %11763, %11757
  %11801 = add <16 x i16> %11800, %11769
  %11802 = add <16 x i16> %11801, %11775
  %11803 = add <16 x i16> %11802, %11781
  %11804 = add <16 x i16> %11803, %11787
  %11805 = add <16 x i16> %11804, %11793
  %11806 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11799, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11807 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11805, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11808 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11806, <16 x i16> %11799)
  %11809 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11807, <16 x i16> %11805)
  %11810 = shufflevector <16 x i16> %11808, <16 x i16> %11809, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11811 = lshr <32 x i16> %11810, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11812 = shufflevector <32 x i16> %11811, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11813 = zext i32 %.pre-phi3605 to i64
  %11814 = mul nsw i64 %97, %11813
  %11815 = add nsw i64 %99, %11814
  %11816 = getelementptr inbounds i16, i16* %blur_x, i64 %11815
  %11817 = getelementptr inbounds i16, i16* %11816, i64 -32
  %11818 = bitcast i16* %11817 to <16 x i16>*
  store <16 x i16> %11812, <16 x i16>* %11818, align 2, !tbaa !399
  %11819 = shufflevector <32 x i16> %11811, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11820 = getelementptr inbounds i16, i16* %11816, i64 -16
  %11821 = bitcast i16* %11820 to <16 x i16>*
  store <16 x i16> %11819, <16 x i16>* %11821, align 2, !tbaa !399
  %11822 = zext i32 %.pre-phi3583 to i64
  %11823 = mul nsw i64 %11822, %116
  %11824 = add nsw i64 %11823, %94
  %11825 = getelementptr inbounds i16, i16* %blur_x, i64 %11824
  %11826 = getelementptr inbounds i16, i16* %11825, i64 -32
  %11827 = bitcast i16* %11826 to <16 x i16>*
  %11828 = load <16 x i16>, <16 x i16>* %11827, align 2, !tbaa !399
  %11829 = getelementptr inbounds i16, i16* %11825, i64 -16
  %11830 = bitcast i16* %11829 to <16 x i16>*
  %11831 = load <16 x i16>, <16 x i16>* %11830, align 2, !tbaa !399
  %11832 = zext i32 %.pre-phi3579 to i64
  %11833 = mul nsw i64 %11832, %116
  %11834 = add nsw i64 %11833, %94
  %11835 = getelementptr inbounds i16, i16* %blur_x, i64 %11834
  %11836 = getelementptr inbounds i16, i16* %11835, i64 -32
  %11837 = bitcast i16* %11836 to <16 x i16>*
  %11838 = load <16 x i16>, <16 x i16>* %11837, align 2, !tbaa !399
  %11839 = getelementptr inbounds i16, i16* %11835, i64 -16
  %11840 = bitcast i16* %11839 to <16 x i16>*
  %11841 = load <16 x i16>, <16 x i16>* %11840, align 2, !tbaa !399
  %11842 = zext i32 %.pre-phi3587 to i64
  %11843 = mul nsw i64 %11842, %116
  %11844 = add nsw i64 %11843, %94
  %11845 = getelementptr inbounds i16, i16* %blur_x, i64 %11844
  %11846 = getelementptr inbounds i16, i16* %11845, i64 -32
  %11847 = bitcast i16* %11846 to <16 x i16>*
  %11848 = load <16 x i16>, <16 x i16>* %11847, align 2, !tbaa !399
  %11849 = getelementptr inbounds i16, i16* %11845, i64 -16
  %11850 = bitcast i16* %11849 to <16 x i16>*
  %11851 = load <16 x i16>, <16 x i16>* %11850, align 2, !tbaa !399
  %11852 = zext i32 %.pre-phi3591 to i64
  %11853 = mul nsw i64 %11852, %116
  %11854 = add nsw i64 %11853, %94
  %11855 = getelementptr inbounds i16, i16* %blur_x, i64 %11854
  %11856 = getelementptr inbounds i16, i16* %11855, i64 -32
  %11857 = bitcast i16* %11856 to <16 x i16>*
  %11858 = load <16 x i16>, <16 x i16>* %11857, align 2, !tbaa !399
  %11859 = getelementptr inbounds i16, i16* %11855, i64 -16
  %11860 = bitcast i16* %11859 to <16 x i16>*
  %11861 = load <16 x i16>, <16 x i16>* %11860, align 2, !tbaa !399
  %11862 = zext i32 %.pre-phi3595 to i64
  %11863 = mul nsw i64 %11862, %116
  %11864 = add nsw i64 %11863, %94
  %11865 = getelementptr inbounds i16, i16* %blur_x, i64 %11864
  %11866 = getelementptr inbounds i16, i16* %11865, i64 -32
  %11867 = bitcast i16* %11866 to <16 x i16>*
  %11868 = load <16 x i16>, <16 x i16>* %11867, align 2, !tbaa !399
  %11869 = getelementptr inbounds i16, i16* %11865, i64 -16
  %11870 = bitcast i16* %11869 to <16 x i16>*
  %11871 = load <16 x i16>, <16 x i16>* %11870, align 2, !tbaa !399
  %11872 = mul nsw i64 %11813, %116
  %11873 = add nsw i64 %11872, %94
  %11874 = getelementptr inbounds i16, i16* %blur_x, i64 %11873
  %11875 = getelementptr inbounds i16, i16* %11874, i64 -32
  %11876 = bitcast i16* %11875 to <16 x i16>*
  %11877 = load <16 x i16>, <16 x i16>* %11876, align 2, !tbaa !399
  %11878 = getelementptr inbounds i16, i16* %11874, i64 -16
  %11879 = bitcast i16* %11878 to <16 x i16>*
  %11880 = load <16 x i16>, <16 x i16>* %11879, align 2, !tbaa !399
  %11881 = zext i32 %.pre-phi3599 to i64
  %11882 = mul nsw i64 %11881, %116
  %11883 = add nsw i64 %11882, %94
  %11884 = getelementptr inbounds i16, i16* %blur_x, i64 %11883
  %11885 = getelementptr inbounds i16, i16* %11884, i64 -32
  %11886 = bitcast i16* %11885 to <16 x i16>*
  %11887 = load <16 x i16>, <16 x i16>* %11886, align 2, !tbaa !399
  %11888 = getelementptr inbounds i16, i16* %11884, i64 -16
  %11889 = bitcast i16* %11888 to <16 x i16>*
  %11890 = load <16 x i16>, <16 x i16>* %11889, align 2, !tbaa !399
  %11891 = add <16 x i16> %11838, %11828
  %11892 = add <16 x i16> %11891, %11848
  %11893 = add <16 x i16> %11892, %11858
  %11894 = add <16 x i16> %11893, %11868
  %11895 = add <16 x i16> %11894, %11877
  %11896 = add <16 x i16> %11895, %11887
  %11897 = add <16 x i16> %11841, %11831
  %11898 = add <16 x i16> %11897, %11851
  %11899 = add <16 x i16> %11898, %11861
  %11900 = add <16 x i16> %11899, %11871
  %11901 = add <16 x i16> %11900, %11880
  %11902 = add <16 x i16> %11901, %11890
  %11903 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11896, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11904 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11902, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11905 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11903, <16 x i16> %11896)
  %11906 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11904, <16 x i16> %11902)
  %11907 = shufflevector <16 x i16> %11905, <16 x i16> %11906, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11908 = lshr <32 x i16> %11907, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11909 = shufflevector <32 x i16> %11908, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11910 = sext i32 %a26 to i64
  %11911 = add nsw i64 %11910, 17
  %11912 = mul nsw i64 %11911, %117
  %11913 = add nsw i64 %119, %11912
  %11914 = getelementptr inbounds i16, i16* %66, i64 %11913
  %11915 = getelementptr inbounds i16, i16* %11914, i64 -32
  %11916 = bitcast i16* %11915 to <16 x i16>*
  store <16 x i16> %11909, <16 x i16>* %11916, align 2, !tbaa !401
  %11917 = shufflevector <32 x i16> %11908, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11918 = getelementptr inbounds i16, i16* %11914, i64 -16
  %11919 = bitcast i16* %11918 to <16 x i16>*
  store <16 x i16> %11917, <16 x i16>* %11919, align 2, !tbaa !401
  br label %after_bb503

"for blur_y.s0.x.x.rebased508":                   ; preds = %"for blur_y.s0.x.x.rebased508.preheader", %"consume blur_x515"
  %indvars.iv3440 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased508.preheader" ], [ %indvars.iv.next3441, %"consume blur_x515" ]
  %11920 = add nsw i64 %indvars.iv3440, %101
  %11921 = icmp slt i64 %11920, 1
  %11922 = trunc i64 %11920 to i32
  %11923 = shl nsw i32 %11922, 5
  %11924 = icmp sgt i32 %4, %11923
  %11925 = or i1 %11921, %11924
  br i1 %11925, label %"produce blur_x514", label %"for blur_y.s0.x.x.rebased508.consume blur_x515_crit_edge"

"for blur_y.s0.x.x.rebased508.consume blur_x515_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased508"
  %.pre3638 = shl nsw i64 %11920, 5
  br label %"consume blur_x515"

"end for blur_y.s0.x.x.rebased509":               ; preds = %"consume blur_x515", %after_bb503
  br i1 %102, label %"for blur_y.s0.x.x.rebased516.preheader", label %"end for blur_y.s0.x.x.rebased517", !prof !386

"for blur_y.s0.x.x.rebased516.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased509"
  %11926 = sext i32 %t1778 to i64
  %11927 = zext i32 %.pre-phi3583 to i64
  %11928 = mul nsw i64 %11927, %116
  %11929 = sub nsw i64 %11928, %96
  %11930 = zext i32 %.pre-phi3579 to i64
  %11931 = mul nsw i64 %11930, %116
  %11932 = sub nsw i64 %11931, %96
  %11933 = zext i32 %.pre-phi3587 to i64
  %11934 = mul nsw i64 %11933, %116
  %11935 = sub nsw i64 %11934, %96
  %11936 = zext i32 %.pre-phi3591 to i64
  %11937 = mul nsw i64 %11936, %116
  %11938 = sub nsw i64 %11937, %96
  %11939 = zext i32 %.pre-phi3595 to i64
  %11940 = mul nsw i64 %11939, %116
  %11941 = sub nsw i64 %11940, %96
  %11942 = zext i32 %.pre-phi3605 to i64
  %11943 = mul nsw i64 %11942, %116
  %11944 = sub nsw i64 %11943, %96
  %11945 = zext i32 %.pre-phi3599 to i64
  %11946 = mul nsw i64 %11945, %116
  %11947 = sub nsw i64 %11946, %96
  %11948 = sext i32 %a26 to i64
  %11949 = add nsw i64 %11948, 17
  %11950 = mul nsw i64 %11949, %117
  %11951 = add nsw i64 %11950, %120
  br label %"for blur_y.s0.x.x.rebased516"

"produce blur_x514":                              ; preds = %"for blur_y.s0.x.x.rebased508"
  %t1024 = add nsw i32 %11923, %t2033
  %11952 = sext i32 %t1024 to i64
  %11953 = getelementptr inbounds i16, i16* %read_input, i64 %11952
  %11954 = getelementptr inbounds i16, i16* %11953, i64 1
  %11955 = bitcast i16* %11954 to <16 x i16>*
  %11956 = load <16 x i16>, <16 x i16>* %11955, align 2, !tbaa !396
  %11957 = getelementptr inbounds i16, i16* %11953, i64 17
  %11958 = bitcast i16* %11957 to <16 x i16>*
  %11959 = load <16 x i16>, <16 x i16>* %11958, align 2, !tbaa !396
  %11960 = bitcast i16* %11953 to <16 x i16>*
  %11961 = load <16 x i16>, <16 x i16>* %11960, align 2, !tbaa !396
  %11962 = getelementptr inbounds i16, i16* %11953, i64 16
  %11963 = bitcast i16* %11962 to <16 x i16>*
  %11964 = load <16 x i16>, <16 x i16>* %11963, align 2, !tbaa !396
  %11965 = getelementptr inbounds i16, i16* %11953, i64 2
  %11966 = bitcast i16* %11965 to <16 x i16>*
  %11967 = load <16 x i16>, <16 x i16>* %11966, align 2, !tbaa !396
  %11968 = getelementptr inbounds i16, i16* %11953, i64 18
  %11969 = bitcast i16* %11968 to <16 x i16>*
  %11970 = load <16 x i16>, <16 x i16>* %11969, align 2, !tbaa !396
  %11971 = getelementptr inbounds i16, i16* %11953, i64 3
  %11972 = bitcast i16* %11971 to <16 x i16>*
  %11973 = load <16 x i16>, <16 x i16>* %11972, align 2, !tbaa !396
  %11974 = getelementptr inbounds i16, i16* %11953, i64 19
  %11975 = bitcast i16* %11974 to <16 x i16>*
  %11976 = load <16 x i16>, <16 x i16>* %11975, align 2, !tbaa !396
  %11977 = getelementptr inbounds i16, i16* %11953, i64 4
  %11978 = bitcast i16* %11977 to <16 x i16>*
  %11979 = load <16 x i16>, <16 x i16>* %11978, align 2, !tbaa !396
  %11980 = getelementptr inbounds i16, i16* %11953, i64 20
  %11981 = bitcast i16* %11980 to <16 x i16>*
  %11982 = load <16 x i16>, <16 x i16>* %11981, align 2, !tbaa !396
  %11983 = getelementptr inbounds i16, i16* %11953, i64 6
  %11984 = bitcast i16* %11983 to <16 x i16>*
  %11985 = load <16 x i16>, <16 x i16>* %11984, align 2, !tbaa !396
  %11986 = getelementptr inbounds i16, i16* %11953, i64 22
  %11987 = bitcast i16* %11986 to <16 x i16>*
  %11988 = load <16 x i16>, <16 x i16>* %11987, align 2, !tbaa !396
  %11989 = getelementptr inbounds i16, i16* %11953, i64 5
  %11990 = bitcast i16* %11989 to <16 x i16>*
  %11991 = load <16 x i16>, <16 x i16>* %11990, align 2, !tbaa !396
  %11992 = getelementptr inbounds i16, i16* %11953, i64 21
  %11993 = bitcast i16* %11992 to <16 x i16>*
  %11994 = load <16 x i16>, <16 x i16>* %11993, align 2, !tbaa !396
  %11995 = add <16 x i16> %11961, %11956
  %11996 = add <16 x i16> %11995, %11967
  %11997 = add <16 x i16> %11996, %11973
  %11998 = add <16 x i16> %11997, %11979
  %11999 = add <16 x i16> %11998, %11985
  %12000 = add <16 x i16> %11999, %11991
  %12001 = add <16 x i16> %11964, %11959
  %12002 = add <16 x i16> %12001, %11970
  %12003 = add <16 x i16> %12002, %11976
  %12004 = add <16 x i16> %12003, %11982
  %12005 = add <16 x i16> %12004, %11988
  %12006 = add <16 x i16> %12005, %11994
  %12007 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12000, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12008 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12006, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12009 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12007, <16 x i16> %12000)
  %12010 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12008, <16 x i16> %12006)
  %12011 = shufflevector <16 x i16> %12009, <16 x i16> %12010, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12012 = lshr <32 x i16> %12011, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12013 = shufflevector <32 x i16> %12012, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12014 = shl nsw i64 %11920, 5
  %12015 = add nsw i64 %12014, %11725
  %12016 = getelementptr inbounds i16, i16* %blur_x, i64 %12015
  %12017 = bitcast i16* %12016 to <16 x i16>*
  store <16 x i16> %12013, <16 x i16>* %12017, align 2, !tbaa !399
  %12018 = shufflevector <32 x i16> %12012, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12019 = getelementptr inbounds i16, i16* %12016, i64 16
  %12020 = bitcast i16* %12019 to <16 x i16>*
  store <16 x i16> %12018, <16 x i16>* %12020, align 2, !tbaa !399
  br label %"consume blur_x515"

"consume blur_x515":                              ; preds = %"for blur_y.s0.x.x.rebased508.consume blur_x515_crit_edge", %"produce blur_x514"
  %.pre-phi3639 = phi i64 [ %.pre3638, %"for blur_y.s0.x.x.rebased508.consume blur_x515_crit_edge" ], [ %12014, %"produce blur_x514" ]
  %12021 = add nsw i64 %11728, %.pre-phi3639
  %12022 = getelementptr inbounds i16, i16* %blur_x, i64 %12021
  %12023 = bitcast i16* %12022 to <16 x i16>*
  %12024 = load <16 x i16>, <16 x i16>* %12023, align 2, !tbaa !399
  %12025 = getelementptr inbounds i16, i16* %12022, i64 16
  %12026 = bitcast i16* %12025 to <16 x i16>*
  %12027 = load <16 x i16>, <16 x i16>* %12026, align 2, !tbaa !399
  %12028 = add nsw i64 %11731, %.pre-phi3639
  %12029 = getelementptr inbounds i16, i16* %blur_x, i64 %12028
  %12030 = bitcast i16* %12029 to <16 x i16>*
  %12031 = load <16 x i16>, <16 x i16>* %12030, align 2, !tbaa !399
  %12032 = getelementptr inbounds i16, i16* %12029, i64 16
  %12033 = bitcast i16* %12032 to <16 x i16>*
  %12034 = load <16 x i16>, <16 x i16>* %12033, align 2, !tbaa !399
  %12035 = add nsw i64 %11734, %.pre-phi3639
  %12036 = getelementptr inbounds i16, i16* %blur_x, i64 %12035
  %12037 = bitcast i16* %12036 to <16 x i16>*
  %12038 = load <16 x i16>, <16 x i16>* %12037, align 2, !tbaa !399
  %12039 = getelementptr inbounds i16, i16* %12036, i64 16
  %12040 = bitcast i16* %12039 to <16 x i16>*
  %12041 = load <16 x i16>, <16 x i16>* %12040, align 2, !tbaa !399
  %12042 = add nsw i64 %11737, %.pre-phi3639
  %12043 = getelementptr inbounds i16, i16* %blur_x, i64 %12042
  %12044 = bitcast i16* %12043 to <16 x i16>*
  %12045 = load <16 x i16>, <16 x i16>* %12044, align 2, !tbaa !399
  %12046 = getelementptr inbounds i16, i16* %12043, i64 16
  %12047 = bitcast i16* %12046 to <16 x i16>*
  %12048 = load <16 x i16>, <16 x i16>* %12047, align 2, !tbaa !399
  %12049 = add nsw i64 %11740, %.pre-phi3639
  %12050 = getelementptr inbounds i16, i16* %blur_x, i64 %12049
  %12051 = bitcast i16* %12050 to <16 x i16>*
  %12052 = load <16 x i16>, <16 x i16>* %12051, align 2, !tbaa !399
  %12053 = getelementptr inbounds i16, i16* %12050, i64 16
  %12054 = bitcast i16* %12053 to <16 x i16>*
  %12055 = load <16 x i16>, <16 x i16>* %12054, align 2, !tbaa !399
  %12056 = add nsw i64 %11743, %.pre-phi3639
  %12057 = getelementptr inbounds i16, i16* %blur_x, i64 %12056
  %12058 = bitcast i16* %12057 to <16 x i16>*
  %12059 = load <16 x i16>, <16 x i16>* %12058, align 2, !tbaa !399
  %12060 = getelementptr inbounds i16, i16* %12057, i64 16
  %12061 = bitcast i16* %12060 to <16 x i16>*
  %12062 = load <16 x i16>, <16 x i16>* %12061, align 2, !tbaa !399
  %12063 = add nsw i64 %11746, %.pre-phi3639
  %12064 = getelementptr inbounds i16, i16* %blur_x, i64 %12063
  %12065 = bitcast i16* %12064 to <16 x i16>*
  %12066 = load <16 x i16>, <16 x i16>* %12065, align 2, !tbaa !399
  %12067 = getelementptr inbounds i16, i16* %12064, i64 16
  %12068 = bitcast i16* %12067 to <16 x i16>*
  %12069 = load <16 x i16>, <16 x i16>* %12068, align 2, !tbaa !399
  %12070 = add <16 x i16> %12031, %12024
  %12071 = add <16 x i16> %12070, %12038
  %12072 = add <16 x i16> %12071, %12045
  %12073 = add <16 x i16> %12072, %12052
  %12074 = add <16 x i16> %12073, %12059
  %12075 = add <16 x i16> %12074, %12066
  %12076 = add <16 x i16> %12034, %12027
  %12077 = add <16 x i16> %12076, %12041
  %12078 = add <16 x i16> %12077, %12048
  %12079 = add <16 x i16> %12078, %12055
  %12080 = add <16 x i16> %12079, %12062
  %12081 = add <16 x i16> %12080, %12069
  %12082 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12075, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12083 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12081, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12084 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12082, <16 x i16> %12075)
  %12085 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12083, <16 x i16> %12081)
  %12086 = shufflevector <16 x i16> %12084, <16 x i16> %12085, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12087 = lshr <32 x i16> %12086, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12088 = shufflevector <32 x i16> %12087, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12089 = add nsw i64 %11750, %.pre-phi3639
  %12090 = getelementptr inbounds i16, i16* %66, i64 %12089
  %12091 = bitcast i16* %12090 to <16 x i16>*
  store <16 x i16> %12088, <16 x i16>* %12091, align 2, !tbaa !401
  %12092 = shufflevector <32 x i16> %12087, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12093 = getelementptr inbounds i16, i16* %12090, i64 16
  %12094 = bitcast i16* %12093 to <16 x i16>*
  store <16 x i16> %12092, <16 x i16>* %12094, align 2, !tbaa !401
  %indvars.iv.next3441 = add nuw nsw i64 %indvars.iv3440, 1
  %.not2837 = icmp eq i64 %indvars.iv.next3441, %188
  br i1 %.not2837, label %"end for blur_y.s0.x.x.rebased509", label %"for blur_y.s0.x.x.rebased508"

"for blur_y.s0.x.x.rebased516":                   ; preds = %"for blur_y.s0.x.x.rebased516.preheader", %"consume blur_x524"
  %blur_y.s0.x.x.rebased518 = phi i32 [ %12245, %"consume blur_x524" ], [ 0, %"for blur_y.s0.x.x.rebased516.preheader" ]
  %12095 = add nsw i32 %blur_y.s0.x.x.rebased518, %t1670
  %a238 = shl nsw i32 %12095, 5
  %12096 = icmp sgt i32 %a14, %a238
  %b244 = select i1 %12096, i32 %a238, i32 %a14
  %12097 = icmp slt i32 %12095, 1
  %12098 = icmp sgt i32 %4, %a238
  %12099 = or i1 %12097, %12098
  br i1 %12099, label %"produce blur_x522", label %"consume blur_x524"

"end for blur_y.s0.x.x.rebased517":               ; preds = %"consume blur_x524", %"end for blur_y.s0.x.x.rebased509"
  br i1 %34, label %"produce blur_x528", label %after_bb525

"produce blur_x522":                              ; preds = %"for blur_y.s0.x.x.rebased516"
  %12100 = icmp slt i32 %b244, %4
  %blur_x.s0.x.v1.base.s523 = select i1 %12100, i32 %b244, i32 %4
  %t1029 = add nsw i32 %blur_x.s0.x.v1.base.s523, %t2033
  %12101 = sext i32 %t1029 to i64
  %12102 = getelementptr inbounds i16, i16* %read_input, i64 %12101
  %12103 = getelementptr inbounds i16, i16* %12102, i64 1
  %12104 = bitcast i16* %12103 to <16 x i16>*
  %12105 = load <16 x i16>, <16 x i16>* %12104, align 2, !tbaa !396
  %12106 = getelementptr inbounds i16, i16* %12102, i64 17
  %12107 = bitcast i16* %12106 to <16 x i16>*
  %12108 = load <16 x i16>, <16 x i16>* %12107, align 2, !tbaa !396
  %12109 = bitcast i16* %12102 to <16 x i16>*
  %12110 = load <16 x i16>, <16 x i16>* %12109, align 2, !tbaa !396
  %12111 = getelementptr inbounds i16, i16* %12102, i64 16
  %12112 = bitcast i16* %12111 to <16 x i16>*
  %12113 = load <16 x i16>, <16 x i16>* %12112, align 2, !tbaa !396
  %12114 = getelementptr inbounds i16, i16* %12102, i64 2
  %12115 = bitcast i16* %12114 to <16 x i16>*
  %12116 = load <16 x i16>, <16 x i16>* %12115, align 2, !tbaa !396
  %12117 = getelementptr inbounds i16, i16* %12102, i64 18
  %12118 = bitcast i16* %12117 to <16 x i16>*
  %12119 = load <16 x i16>, <16 x i16>* %12118, align 2, !tbaa !396
  %12120 = getelementptr inbounds i16, i16* %12102, i64 3
  %12121 = bitcast i16* %12120 to <16 x i16>*
  %12122 = load <16 x i16>, <16 x i16>* %12121, align 2, !tbaa !396
  %12123 = getelementptr inbounds i16, i16* %12102, i64 19
  %12124 = bitcast i16* %12123 to <16 x i16>*
  %12125 = load <16 x i16>, <16 x i16>* %12124, align 2, !tbaa !396
  %12126 = getelementptr inbounds i16, i16* %12102, i64 4
  %12127 = bitcast i16* %12126 to <16 x i16>*
  %12128 = load <16 x i16>, <16 x i16>* %12127, align 2, !tbaa !396
  %12129 = getelementptr inbounds i16, i16* %12102, i64 20
  %12130 = bitcast i16* %12129 to <16 x i16>*
  %12131 = load <16 x i16>, <16 x i16>* %12130, align 2, !tbaa !396
  %12132 = getelementptr inbounds i16, i16* %12102, i64 6
  %12133 = bitcast i16* %12132 to <16 x i16>*
  %12134 = load <16 x i16>, <16 x i16>* %12133, align 2, !tbaa !396
  %12135 = getelementptr inbounds i16, i16* %12102, i64 22
  %12136 = bitcast i16* %12135 to <16 x i16>*
  %12137 = load <16 x i16>, <16 x i16>* %12136, align 2, !tbaa !396
  %12138 = getelementptr inbounds i16, i16* %12102, i64 5
  %12139 = bitcast i16* %12138 to <16 x i16>*
  %12140 = load <16 x i16>, <16 x i16>* %12139, align 2, !tbaa !396
  %12141 = getelementptr inbounds i16, i16* %12102, i64 21
  %12142 = bitcast i16* %12141 to <16 x i16>*
  %12143 = load <16 x i16>, <16 x i16>* %12142, align 2, !tbaa !396
  %12144 = add <16 x i16> %12110, %12105
  %12145 = add <16 x i16> %12144, %12116
  %12146 = add <16 x i16> %12145, %12122
  %12147 = add <16 x i16> %12146, %12128
  %12148 = add <16 x i16> %12147, %12134
  %12149 = add <16 x i16> %12148, %12140
  %12150 = add <16 x i16> %12113, %12108
  %12151 = add <16 x i16> %12150, %12119
  %12152 = add <16 x i16> %12151, %12125
  %12153 = add <16 x i16> %12152, %12131
  %12154 = add <16 x i16> %12153, %12137
  %12155 = add <16 x i16> %12154, %12143
  %12156 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12149, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12157 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12155, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12158 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12156, <16 x i16> %12149)
  %12159 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12157, <16 x i16> %12155)
  %12160 = shufflevector <16 x i16> %12158, <16 x i16> %12159, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12161 = lshr <32 x i16> %12160, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12162 = shufflevector <32 x i16> %12161, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12163 = sext i32 %blur_x.s0.x.v1.base.s523 to i64
  %12164 = add nsw i64 %12163, %11926
  %12165 = getelementptr inbounds i16, i16* %blur_x, i64 %12164
  %12166 = bitcast i16* %12165 to <16 x i16>*
  store <16 x i16> %12162, <16 x i16>* %12166, align 2, !tbaa !399
  %12167 = shufflevector <32 x i16> %12161, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12168 = getelementptr inbounds i16, i16* %12165, i64 16
  %12169 = bitcast i16* %12168 to <16 x i16>*
  store <16 x i16> %12167, <16 x i16>* %12169, align 2, !tbaa !399
  br label %"consume blur_x524"

"consume blur_x524":                              ; preds = %"for blur_y.s0.x.x.rebased516", %"produce blur_x522"
  %12170 = sext i32 %b244 to i64
  %12171 = add nsw i64 %11929, %12170
  %12172 = getelementptr inbounds i16, i16* %blur_x, i64 %12171
  %12173 = bitcast i16* %12172 to <16 x i16>*
  %12174 = load <16 x i16>, <16 x i16>* %12173, align 2, !tbaa !399
  %12175 = getelementptr inbounds i16, i16* %12172, i64 16
  %12176 = bitcast i16* %12175 to <16 x i16>*
  %12177 = load <16 x i16>, <16 x i16>* %12176, align 2, !tbaa !399
  %12178 = add nsw i64 %11932, %12170
  %12179 = getelementptr inbounds i16, i16* %blur_x, i64 %12178
  %12180 = bitcast i16* %12179 to <16 x i16>*
  %12181 = load <16 x i16>, <16 x i16>* %12180, align 2, !tbaa !399
  %12182 = getelementptr inbounds i16, i16* %12179, i64 16
  %12183 = bitcast i16* %12182 to <16 x i16>*
  %12184 = load <16 x i16>, <16 x i16>* %12183, align 2, !tbaa !399
  %12185 = add nsw i64 %11935, %12170
  %12186 = getelementptr inbounds i16, i16* %blur_x, i64 %12185
  %12187 = bitcast i16* %12186 to <16 x i16>*
  %12188 = load <16 x i16>, <16 x i16>* %12187, align 2, !tbaa !399
  %12189 = getelementptr inbounds i16, i16* %12186, i64 16
  %12190 = bitcast i16* %12189 to <16 x i16>*
  %12191 = load <16 x i16>, <16 x i16>* %12190, align 2, !tbaa !399
  %12192 = add nsw i64 %11938, %12170
  %12193 = getelementptr inbounds i16, i16* %blur_x, i64 %12192
  %12194 = bitcast i16* %12193 to <16 x i16>*
  %12195 = load <16 x i16>, <16 x i16>* %12194, align 2, !tbaa !399
  %12196 = getelementptr inbounds i16, i16* %12193, i64 16
  %12197 = bitcast i16* %12196 to <16 x i16>*
  %12198 = load <16 x i16>, <16 x i16>* %12197, align 2, !tbaa !399
  %12199 = add nsw i64 %11941, %12170
  %12200 = getelementptr inbounds i16, i16* %blur_x, i64 %12199
  %12201 = bitcast i16* %12200 to <16 x i16>*
  %12202 = load <16 x i16>, <16 x i16>* %12201, align 2, !tbaa !399
  %12203 = getelementptr inbounds i16, i16* %12200, i64 16
  %12204 = bitcast i16* %12203 to <16 x i16>*
  %12205 = load <16 x i16>, <16 x i16>* %12204, align 2, !tbaa !399
  %12206 = add nsw i64 %11944, %12170
  %12207 = getelementptr inbounds i16, i16* %blur_x, i64 %12206
  %12208 = bitcast i16* %12207 to <16 x i16>*
  %12209 = load <16 x i16>, <16 x i16>* %12208, align 2, !tbaa !399
  %12210 = getelementptr inbounds i16, i16* %12207, i64 16
  %12211 = bitcast i16* %12210 to <16 x i16>*
  %12212 = load <16 x i16>, <16 x i16>* %12211, align 2, !tbaa !399
  %12213 = add nsw i64 %11947, %12170
  %12214 = getelementptr inbounds i16, i16* %blur_x, i64 %12213
  %12215 = bitcast i16* %12214 to <16 x i16>*
  %12216 = load <16 x i16>, <16 x i16>* %12215, align 2, !tbaa !399
  %12217 = getelementptr inbounds i16, i16* %12214, i64 16
  %12218 = bitcast i16* %12217 to <16 x i16>*
  %12219 = load <16 x i16>, <16 x i16>* %12218, align 2, !tbaa !399
  %12220 = add <16 x i16> %12181, %12174
  %12221 = add <16 x i16> %12220, %12188
  %12222 = add <16 x i16> %12221, %12195
  %12223 = add <16 x i16> %12222, %12202
  %12224 = add <16 x i16> %12223, %12209
  %12225 = add <16 x i16> %12224, %12216
  %12226 = add <16 x i16> %12184, %12177
  %12227 = add <16 x i16> %12226, %12191
  %12228 = add <16 x i16> %12227, %12198
  %12229 = add <16 x i16> %12228, %12205
  %12230 = add <16 x i16> %12229, %12212
  %12231 = add <16 x i16> %12230, %12219
  %12232 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12225, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12233 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12231, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12234 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12232, <16 x i16> %12225)
  %12235 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12233, <16 x i16> %12231)
  %12236 = shufflevector <16 x i16> %12234, <16 x i16> %12235, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12237 = lshr <32 x i16> %12236, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12238 = shufflevector <32 x i16> %12237, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12239 = add nsw i64 %11951, %12170
  %12240 = getelementptr inbounds i16, i16* %66, i64 %12239
  %12241 = bitcast i16* %12240 to <16 x i16>*
  store <16 x i16> %12238, <16 x i16>* %12241, align 2, !tbaa !401
  %12242 = shufflevector <32 x i16> %12237, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12243 = getelementptr inbounds i16, i16* %12240, i64 16
  %12244 = bitcast i16* %12243 to <16 x i16>*
  store <16 x i16> %12242, <16 x i16>* %12244, align 2, !tbaa !401
  %12245 = add nuw nsw i32 %blur_y.s0.x.x.rebased518, 1
  %.not2836 = icmp eq i32 %12245, %t1727
  br i1 %.not2836, label %"end for blur_y.s0.x.x.rebased517", label %"for blur_y.s0.x.x.rebased516"

after_bb525:                                      ; preds = %"end for blur_y.s0.x.x.rebased517", %"produce blur_x528"
  br i1 %100, label %"for blur_y.s0.x.x.rebased530.preheader", label %"end for blur_y.s0.x.x.rebased531", !prof !386

"for blur_y.s0.x.x.rebased530.preheader":         ; preds = %after_bb525
  %12246 = sext i32 %t1726 to i64
  %12247 = zext i32 %.pre-phi3587 to i64
  %12248 = mul nsw i64 %12247, %116
  %12249 = sub nsw i64 %12248, %96
  %12250 = zext i32 %.pre-phi3583 to i64
  %12251 = mul nsw i64 %12250, %116
  %12252 = sub nsw i64 %12251, %96
  %12253 = zext i32 %.pre-phi3591 to i64
  %12254 = mul nsw i64 %12253, %116
  %12255 = sub nsw i64 %12254, %96
  %12256 = zext i32 %.pre-phi3595 to i64
  %12257 = mul nsw i64 %12256, %116
  %12258 = sub nsw i64 %12257, %96
  %12259 = zext i32 %.pre-phi3599 to i64
  %12260 = mul nsw i64 %12259, %116
  %12261 = sub nsw i64 %12260, %96
  %12262 = zext i32 %.pre-phi to i64
  %12263 = mul nsw i64 %12262, %116
  %12264 = sub nsw i64 %12263, %96
  %12265 = zext i32 %.pre-phi3605 to i64
  %12266 = mul nsw i64 %12265, %116
  %12267 = sub nsw i64 %12266, %96
  %12268 = sext i32 %a26 to i64
  %12269 = add nsw i64 %12268, 18
  %12270 = mul nsw i64 %12269, %117
  %12271 = add nsw i64 %12270, %120
  br label %"for blur_y.s0.x.x.rebased530"

"produce blur_x528":                              ; preds = %"end for blur_y.s0.x.x.rebased517"
  %12272 = getelementptr inbounds i16, i16* %read_input, i64 %155
  %12273 = getelementptr inbounds i16, i16* %12272, i64 -31
  %12274 = bitcast i16* %12273 to <16 x i16>*
  %12275 = load <16 x i16>, <16 x i16>* %12274, align 2, !tbaa !396
  %12276 = getelementptr inbounds i16, i16* %12272, i64 -15
  %12277 = bitcast i16* %12276 to <16 x i16>*
  %12278 = load <16 x i16>, <16 x i16>* %12277, align 2, !tbaa !396
  %12279 = getelementptr inbounds i16, i16* %12272, i64 -32
  %12280 = bitcast i16* %12279 to <16 x i16>*
  %12281 = load <16 x i16>, <16 x i16>* %12280, align 2, !tbaa !396
  %12282 = getelementptr inbounds i16, i16* %12272, i64 -16
  %12283 = bitcast i16* %12282 to <16 x i16>*
  %12284 = load <16 x i16>, <16 x i16>* %12283, align 2, !tbaa !396
  %12285 = getelementptr inbounds i16, i16* %12272, i64 -30
  %12286 = bitcast i16* %12285 to <16 x i16>*
  %12287 = load <16 x i16>, <16 x i16>* %12286, align 2, !tbaa !396
  %12288 = getelementptr inbounds i16, i16* %12272, i64 -14
  %12289 = bitcast i16* %12288 to <16 x i16>*
  %12290 = load <16 x i16>, <16 x i16>* %12289, align 2, !tbaa !396
  %12291 = getelementptr inbounds i16, i16* %12272, i64 -29
  %12292 = bitcast i16* %12291 to <16 x i16>*
  %12293 = load <16 x i16>, <16 x i16>* %12292, align 2, !tbaa !396
  %12294 = getelementptr inbounds i16, i16* %12272, i64 -13
  %12295 = bitcast i16* %12294 to <16 x i16>*
  %12296 = load <16 x i16>, <16 x i16>* %12295, align 2, !tbaa !396
  %12297 = getelementptr inbounds i16, i16* %12272, i64 -28
  %12298 = bitcast i16* %12297 to <16 x i16>*
  %12299 = load <16 x i16>, <16 x i16>* %12298, align 2, !tbaa !396
  %12300 = getelementptr inbounds i16, i16* %12272, i64 -12
  %12301 = bitcast i16* %12300 to <16 x i16>*
  %12302 = load <16 x i16>, <16 x i16>* %12301, align 2, !tbaa !396
  %12303 = getelementptr inbounds i16, i16* %12272, i64 -26
  %12304 = bitcast i16* %12303 to <16 x i16>*
  %12305 = load <16 x i16>, <16 x i16>* %12304, align 2, !tbaa !396
  %12306 = getelementptr inbounds i16, i16* %12272, i64 -10
  %12307 = bitcast i16* %12306 to <16 x i16>*
  %12308 = load <16 x i16>, <16 x i16>* %12307, align 2, !tbaa !396
  %12309 = getelementptr inbounds i16, i16* %12272, i64 -27
  %12310 = bitcast i16* %12309 to <16 x i16>*
  %12311 = load <16 x i16>, <16 x i16>* %12310, align 2, !tbaa !396
  %12312 = getelementptr inbounds i16, i16* %12272, i64 -11
  %12313 = bitcast i16* %12312 to <16 x i16>*
  %12314 = load <16 x i16>, <16 x i16>* %12313, align 2, !tbaa !396
  %12315 = add <16 x i16> %12281, %12275
  %12316 = add <16 x i16> %12315, %12287
  %12317 = add <16 x i16> %12316, %12293
  %12318 = add <16 x i16> %12317, %12299
  %12319 = add <16 x i16> %12318, %12305
  %12320 = add <16 x i16> %12319, %12311
  %12321 = add <16 x i16> %12284, %12278
  %12322 = add <16 x i16> %12321, %12290
  %12323 = add <16 x i16> %12322, %12296
  %12324 = add <16 x i16> %12323, %12302
  %12325 = add <16 x i16> %12324, %12308
  %12326 = add <16 x i16> %12325, %12314
  %12327 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12320, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12328 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12326, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12329 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12327, <16 x i16> %12320)
  %12330 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12328, <16 x i16> %12326)
  %12331 = shufflevector <16 x i16> %12329, <16 x i16> %12330, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12332 = lshr <32 x i16> %12331, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12333 = shufflevector <32 x i16> %12332, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12334 = zext i32 %.pre-phi to i64
  %12335 = mul nsw i64 %97, %12334
  %12336 = add nsw i64 %99, %12335
  %12337 = getelementptr inbounds i16, i16* %blur_x, i64 %12336
  %12338 = getelementptr inbounds i16, i16* %12337, i64 -32
  %12339 = bitcast i16* %12338 to <16 x i16>*
  store <16 x i16> %12333, <16 x i16>* %12339, align 2, !tbaa !399
  %12340 = shufflevector <32 x i16> %12332, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12341 = getelementptr inbounds i16, i16* %12337, i64 -16
  %12342 = bitcast i16* %12341 to <16 x i16>*
  store <16 x i16> %12340, <16 x i16>* %12342, align 2, !tbaa !399
  %12343 = zext i32 %.pre-phi3587 to i64
  %12344 = mul nsw i64 %12343, %116
  %12345 = add nsw i64 %12344, %94
  %12346 = getelementptr inbounds i16, i16* %blur_x, i64 %12345
  %12347 = getelementptr inbounds i16, i16* %12346, i64 -32
  %12348 = bitcast i16* %12347 to <16 x i16>*
  %12349 = load <16 x i16>, <16 x i16>* %12348, align 2, !tbaa !399
  %12350 = getelementptr inbounds i16, i16* %12346, i64 -16
  %12351 = bitcast i16* %12350 to <16 x i16>*
  %12352 = load <16 x i16>, <16 x i16>* %12351, align 2, !tbaa !399
  %12353 = zext i32 %.pre-phi3583 to i64
  %12354 = mul nsw i64 %12353, %116
  %12355 = add nsw i64 %12354, %94
  %12356 = getelementptr inbounds i16, i16* %blur_x, i64 %12355
  %12357 = getelementptr inbounds i16, i16* %12356, i64 -32
  %12358 = bitcast i16* %12357 to <16 x i16>*
  %12359 = load <16 x i16>, <16 x i16>* %12358, align 2, !tbaa !399
  %12360 = getelementptr inbounds i16, i16* %12356, i64 -16
  %12361 = bitcast i16* %12360 to <16 x i16>*
  %12362 = load <16 x i16>, <16 x i16>* %12361, align 2, !tbaa !399
  %12363 = zext i32 %.pre-phi3591 to i64
  %12364 = mul nsw i64 %12363, %116
  %12365 = add nsw i64 %12364, %94
  %12366 = getelementptr inbounds i16, i16* %blur_x, i64 %12365
  %12367 = getelementptr inbounds i16, i16* %12366, i64 -32
  %12368 = bitcast i16* %12367 to <16 x i16>*
  %12369 = load <16 x i16>, <16 x i16>* %12368, align 2, !tbaa !399
  %12370 = getelementptr inbounds i16, i16* %12366, i64 -16
  %12371 = bitcast i16* %12370 to <16 x i16>*
  %12372 = load <16 x i16>, <16 x i16>* %12371, align 2, !tbaa !399
  %12373 = zext i32 %.pre-phi3595 to i64
  %12374 = mul nsw i64 %12373, %116
  %12375 = add nsw i64 %12374, %94
  %12376 = getelementptr inbounds i16, i16* %blur_x, i64 %12375
  %12377 = getelementptr inbounds i16, i16* %12376, i64 -32
  %12378 = bitcast i16* %12377 to <16 x i16>*
  %12379 = load <16 x i16>, <16 x i16>* %12378, align 2, !tbaa !399
  %12380 = getelementptr inbounds i16, i16* %12376, i64 -16
  %12381 = bitcast i16* %12380 to <16 x i16>*
  %12382 = load <16 x i16>, <16 x i16>* %12381, align 2, !tbaa !399
  %12383 = zext i32 %.pre-phi3599 to i64
  %12384 = mul nsw i64 %12383, %116
  %12385 = add nsw i64 %12384, %94
  %12386 = getelementptr inbounds i16, i16* %blur_x, i64 %12385
  %12387 = getelementptr inbounds i16, i16* %12386, i64 -32
  %12388 = bitcast i16* %12387 to <16 x i16>*
  %12389 = load <16 x i16>, <16 x i16>* %12388, align 2, !tbaa !399
  %12390 = getelementptr inbounds i16, i16* %12386, i64 -16
  %12391 = bitcast i16* %12390 to <16 x i16>*
  %12392 = load <16 x i16>, <16 x i16>* %12391, align 2, !tbaa !399
  %12393 = mul nsw i64 %12334, %116
  %12394 = add nsw i64 %12393, %94
  %12395 = getelementptr inbounds i16, i16* %blur_x, i64 %12394
  %12396 = getelementptr inbounds i16, i16* %12395, i64 -32
  %12397 = bitcast i16* %12396 to <16 x i16>*
  %12398 = load <16 x i16>, <16 x i16>* %12397, align 2, !tbaa !399
  %12399 = getelementptr inbounds i16, i16* %12395, i64 -16
  %12400 = bitcast i16* %12399 to <16 x i16>*
  %12401 = load <16 x i16>, <16 x i16>* %12400, align 2, !tbaa !399
  %12402 = zext i32 %.pre-phi3605 to i64
  %12403 = mul nsw i64 %12402, %116
  %12404 = add nsw i64 %12403, %94
  %12405 = getelementptr inbounds i16, i16* %blur_x, i64 %12404
  %12406 = getelementptr inbounds i16, i16* %12405, i64 -32
  %12407 = bitcast i16* %12406 to <16 x i16>*
  %12408 = load <16 x i16>, <16 x i16>* %12407, align 2, !tbaa !399
  %12409 = getelementptr inbounds i16, i16* %12405, i64 -16
  %12410 = bitcast i16* %12409 to <16 x i16>*
  %12411 = load <16 x i16>, <16 x i16>* %12410, align 2, !tbaa !399
  %12412 = add <16 x i16> %12359, %12349
  %12413 = add <16 x i16> %12412, %12369
  %12414 = add <16 x i16> %12413, %12379
  %12415 = add <16 x i16> %12414, %12389
  %12416 = add <16 x i16> %12415, %12398
  %12417 = add <16 x i16> %12416, %12408
  %12418 = add <16 x i16> %12362, %12352
  %12419 = add <16 x i16> %12418, %12372
  %12420 = add <16 x i16> %12419, %12382
  %12421 = add <16 x i16> %12420, %12392
  %12422 = add <16 x i16> %12421, %12401
  %12423 = add <16 x i16> %12422, %12411
  %12424 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12417, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12425 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12423, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12426 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12424, <16 x i16> %12417)
  %12427 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12425, <16 x i16> %12423)
  %12428 = shufflevector <16 x i16> %12426, <16 x i16> %12427, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12429 = lshr <32 x i16> %12428, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12430 = shufflevector <32 x i16> %12429, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12431 = sext i32 %a26 to i64
  %12432 = add nsw i64 %12431, 18
  %12433 = mul nsw i64 %12432, %117
  %12434 = add nsw i64 %119, %12433
  %12435 = getelementptr inbounds i16, i16* %66, i64 %12434
  %12436 = getelementptr inbounds i16, i16* %12435, i64 -32
  %12437 = bitcast i16* %12436 to <16 x i16>*
  store <16 x i16> %12430, <16 x i16>* %12437, align 2, !tbaa !401
  %12438 = shufflevector <32 x i16> %12429, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12439 = getelementptr inbounds i16, i16* %12435, i64 -16
  %12440 = bitcast i16* %12439 to <16 x i16>*
  store <16 x i16> %12438, <16 x i16>* %12440, align 2, !tbaa !401
  br label %after_bb525

"for blur_y.s0.x.x.rebased530":                   ; preds = %"for blur_y.s0.x.x.rebased530.preheader", %"consume blur_x537"
  %indvars.iv3443 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased530.preheader" ], [ %indvars.iv.next3444, %"consume blur_x537" ]
  %12441 = add nsw i64 %indvars.iv3443, %101
  %12442 = icmp slt i64 %12441, 1
  %12443 = trunc i64 %12441 to i32
  %12444 = shl nsw i32 %12443, 5
  %12445 = icmp sgt i32 %4, %12444
  %12446 = or i1 %12442, %12445
  br i1 %12446, label %"produce blur_x536", label %"for blur_y.s0.x.x.rebased530.consume blur_x537_crit_edge"

"for blur_y.s0.x.x.rebased530.consume blur_x537_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased530"
  %.pre3640 = shl nsw i64 %12441, 5
  br label %"consume blur_x537"

"end for blur_y.s0.x.x.rebased531":               ; preds = %"consume blur_x537", %after_bb525
  br i1 %102, label %"for blur_y.s0.x.x.rebased538.preheader", label %"end for blur_y.s0.x.x.rebased539", !prof !386

"for blur_y.s0.x.x.rebased538.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased531"
  %12447 = sext i32 %t1726 to i64
  %12448 = zext i32 %.pre-phi3587 to i64
  %12449 = mul nsw i64 %12448, %116
  %12450 = sub nsw i64 %12449, %96
  %12451 = zext i32 %.pre-phi3583 to i64
  %12452 = mul nsw i64 %12451, %116
  %12453 = sub nsw i64 %12452, %96
  %12454 = zext i32 %.pre-phi3591 to i64
  %12455 = mul nsw i64 %12454, %116
  %12456 = sub nsw i64 %12455, %96
  %12457 = zext i32 %.pre-phi3595 to i64
  %12458 = mul nsw i64 %12457, %116
  %12459 = sub nsw i64 %12458, %96
  %12460 = zext i32 %.pre-phi3599 to i64
  %12461 = mul nsw i64 %12460, %116
  %12462 = sub nsw i64 %12461, %96
  %12463 = zext i32 %.pre-phi to i64
  %12464 = mul nsw i64 %12463, %116
  %12465 = sub nsw i64 %12464, %96
  %12466 = zext i32 %.pre-phi3605 to i64
  %12467 = mul nsw i64 %12466, %116
  %12468 = sub nsw i64 %12467, %96
  %12469 = sext i32 %a26 to i64
  %12470 = add nsw i64 %12469, 18
  %12471 = mul nsw i64 %12470, %117
  %12472 = add nsw i64 %12471, %120
  br label %"for blur_y.s0.x.x.rebased538"

"produce blur_x536":                              ; preds = %"for blur_y.s0.x.x.rebased530"
  %t1040 = add nsw i32 %12444, %t2049
  %12473 = sext i32 %t1040 to i64
  %12474 = getelementptr inbounds i16, i16* %read_input, i64 %12473
  %12475 = getelementptr inbounds i16, i16* %12474, i64 1
  %12476 = bitcast i16* %12475 to <16 x i16>*
  %12477 = load <16 x i16>, <16 x i16>* %12476, align 2, !tbaa !396
  %12478 = getelementptr inbounds i16, i16* %12474, i64 17
  %12479 = bitcast i16* %12478 to <16 x i16>*
  %12480 = load <16 x i16>, <16 x i16>* %12479, align 2, !tbaa !396
  %12481 = bitcast i16* %12474 to <16 x i16>*
  %12482 = load <16 x i16>, <16 x i16>* %12481, align 2, !tbaa !396
  %12483 = getelementptr inbounds i16, i16* %12474, i64 16
  %12484 = bitcast i16* %12483 to <16 x i16>*
  %12485 = load <16 x i16>, <16 x i16>* %12484, align 2, !tbaa !396
  %12486 = getelementptr inbounds i16, i16* %12474, i64 2
  %12487 = bitcast i16* %12486 to <16 x i16>*
  %12488 = load <16 x i16>, <16 x i16>* %12487, align 2, !tbaa !396
  %12489 = getelementptr inbounds i16, i16* %12474, i64 18
  %12490 = bitcast i16* %12489 to <16 x i16>*
  %12491 = load <16 x i16>, <16 x i16>* %12490, align 2, !tbaa !396
  %12492 = getelementptr inbounds i16, i16* %12474, i64 3
  %12493 = bitcast i16* %12492 to <16 x i16>*
  %12494 = load <16 x i16>, <16 x i16>* %12493, align 2, !tbaa !396
  %12495 = getelementptr inbounds i16, i16* %12474, i64 19
  %12496 = bitcast i16* %12495 to <16 x i16>*
  %12497 = load <16 x i16>, <16 x i16>* %12496, align 2, !tbaa !396
  %12498 = getelementptr inbounds i16, i16* %12474, i64 4
  %12499 = bitcast i16* %12498 to <16 x i16>*
  %12500 = load <16 x i16>, <16 x i16>* %12499, align 2, !tbaa !396
  %12501 = getelementptr inbounds i16, i16* %12474, i64 20
  %12502 = bitcast i16* %12501 to <16 x i16>*
  %12503 = load <16 x i16>, <16 x i16>* %12502, align 2, !tbaa !396
  %12504 = getelementptr inbounds i16, i16* %12474, i64 6
  %12505 = bitcast i16* %12504 to <16 x i16>*
  %12506 = load <16 x i16>, <16 x i16>* %12505, align 2, !tbaa !396
  %12507 = getelementptr inbounds i16, i16* %12474, i64 22
  %12508 = bitcast i16* %12507 to <16 x i16>*
  %12509 = load <16 x i16>, <16 x i16>* %12508, align 2, !tbaa !396
  %12510 = getelementptr inbounds i16, i16* %12474, i64 5
  %12511 = bitcast i16* %12510 to <16 x i16>*
  %12512 = load <16 x i16>, <16 x i16>* %12511, align 2, !tbaa !396
  %12513 = getelementptr inbounds i16, i16* %12474, i64 21
  %12514 = bitcast i16* %12513 to <16 x i16>*
  %12515 = load <16 x i16>, <16 x i16>* %12514, align 2, !tbaa !396
  %12516 = add <16 x i16> %12482, %12477
  %12517 = add <16 x i16> %12516, %12488
  %12518 = add <16 x i16> %12517, %12494
  %12519 = add <16 x i16> %12518, %12500
  %12520 = add <16 x i16> %12519, %12506
  %12521 = add <16 x i16> %12520, %12512
  %12522 = add <16 x i16> %12485, %12480
  %12523 = add <16 x i16> %12522, %12491
  %12524 = add <16 x i16> %12523, %12497
  %12525 = add <16 x i16> %12524, %12503
  %12526 = add <16 x i16> %12525, %12509
  %12527 = add <16 x i16> %12526, %12515
  %12528 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12521, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12529 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12527, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12530 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12528, <16 x i16> %12521)
  %12531 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12529, <16 x i16> %12527)
  %12532 = shufflevector <16 x i16> %12530, <16 x i16> %12531, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12533 = lshr <32 x i16> %12532, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12534 = shufflevector <32 x i16> %12533, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12535 = shl nsw i64 %12441, 5
  %12536 = add nsw i64 %12535, %12246
  %12537 = getelementptr inbounds i16, i16* %blur_x, i64 %12536
  %12538 = bitcast i16* %12537 to <16 x i16>*
  store <16 x i16> %12534, <16 x i16>* %12538, align 2, !tbaa !399
  %12539 = shufflevector <32 x i16> %12533, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12540 = getelementptr inbounds i16, i16* %12537, i64 16
  %12541 = bitcast i16* %12540 to <16 x i16>*
  store <16 x i16> %12539, <16 x i16>* %12541, align 2, !tbaa !399
  br label %"consume blur_x537"

"consume blur_x537":                              ; preds = %"for blur_y.s0.x.x.rebased530.consume blur_x537_crit_edge", %"produce blur_x536"
  %.pre-phi3641 = phi i64 [ %.pre3640, %"for blur_y.s0.x.x.rebased530.consume blur_x537_crit_edge" ], [ %12535, %"produce blur_x536" ]
  %12542 = add nsw i64 %12249, %.pre-phi3641
  %12543 = getelementptr inbounds i16, i16* %blur_x, i64 %12542
  %12544 = bitcast i16* %12543 to <16 x i16>*
  %12545 = load <16 x i16>, <16 x i16>* %12544, align 2, !tbaa !399
  %12546 = getelementptr inbounds i16, i16* %12543, i64 16
  %12547 = bitcast i16* %12546 to <16 x i16>*
  %12548 = load <16 x i16>, <16 x i16>* %12547, align 2, !tbaa !399
  %12549 = add nsw i64 %12252, %.pre-phi3641
  %12550 = getelementptr inbounds i16, i16* %blur_x, i64 %12549
  %12551 = bitcast i16* %12550 to <16 x i16>*
  %12552 = load <16 x i16>, <16 x i16>* %12551, align 2, !tbaa !399
  %12553 = getelementptr inbounds i16, i16* %12550, i64 16
  %12554 = bitcast i16* %12553 to <16 x i16>*
  %12555 = load <16 x i16>, <16 x i16>* %12554, align 2, !tbaa !399
  %12556 = add nsw i64 %12255, %.pre-phi3641
  %12557 = getelementptr inbounds i16, i16* %blur_x, i64 %12556
  %12558 = bitcast i16* %12557 to <16 x i16>*
  %12559 = load <16 x i16>, <16 x i16>* %12558, align 2, !tbaa !399
  %12560 = getelementptr inbounds i16, i16* %12557, i64 16
  %12561 = bitcast i16* %12560 to <16 x i16>*
  %12562 = load <16 x i16>, <16 x i16>* %12561, align 2, !tbaa !399
  %12563 = add nsw i64 %12258, %.pre-phi3641
  %12564 = getelementptr inbounds i16, i16* %blur_x, i64 %12563
  %12565 = bitcast i16* %12564 to <16 x i16>*
  %12566 = load <16 x i16>, <16 x i16>* %12565, align 2, !tbaa !399
  %12567 = getelementptr inbounds i16, i16* %12564, i64 16
  %12568 = bitcast i16* %12567 to <16 x i16>*
  %12569 = load <16 x i16>, <16 x i16>* %12568, align 2, !tbaa !399
  %12570 = add nsw i64 %12261, %.pre-phi3641
  %12571 = getelementptr inbounds i16, i16* %blur_x, i64 %12570
  %12572 = bitcast i16* %12571 to <16 x i16>*
  %12573 = load <16 x i16>, <16 x i16>* %12572, align 2, !tbaa !399
  %12574 = getelementptr inbounds i16, i16* %12571, i64 16
  %12575 = bitcast i16* %12574 to <16 x i16>*
  %12576 = load <16 x i16>, <16 x i16>* %12575, align 2, !tbaa !399
  %12577 = add nsw i64 %12264, %.pre-phi3641
  %12578 = getelementptr inbounds i16, i16* %blur_x, i64 %12577
  %12579 = bitcast i16* %12578 to <16 x i16>*
  %12580 = load <16 x i16>, <16 x i16>* %12579, align 2, !tbaa !399
  %12581 = getelementptr inbounds i16, i16* %12578, i64 16
  %12582 = bitcast i16* %12581 to <16 x i16>*
  %12583 = load <16 x i16>, <16 x i16>* %12582, align 2, !tbaa !399
  %12584 = add nsw i64 %12267, %.pre-phi3641
  %12585 = getelementptr inbounds i16, i16* %blur_x, i64 %12584
  %12586 = bitcast i16* %12585 to <16 x i16>*
  %12587 = load <16 x i16>, <16 x i16>* %12586, align 2, !tbaa !399
  %12588 = getelementptr inbounds i16, i16* %12585, i64 16
  %12589 = bitcast i16* %12588 to <16 x i16>*
  %12590 = load <16 x i16>, <16 x i16>* %12589, align 2, !tbaa !399
  %12591 = add <16 x i16> %12552, %12545
  %12592 = add <16 x i16> %12591, %12559
  %12593 = add <16 x i16> %12592, %12566
  %12594 = add <16 x i16> %12593, %12573
  %12595 = add <16 x i16> %12594, %12580
  %12596 = add <16 x i16> %12595, %12587
  %12597 = add <16 x i16> %12555, %12548
  %12598 = add <16 x i16> %12597, %12562
  %12599 = add <16 x i16> %12598, %12569
  %12600 = add <16 x i16> %12599, %12576
  %12601 = add <16 x i16> %12600, %12583
  %12602 = add <16 x i16> %12601, %12590
  %12603 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12596, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12604 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12602, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12605 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12603, <16 x i16> %12596)
  %12606 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12604, <16 x i16> %12602)
  %12607 = shufflevector <16 x i16> %12605, <16 x i16> %12606, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12608 = lshr <32 x i16> %12607, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12609 = shufflevector <32 x i16> %12608, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12610 = add nsw i64 %12271, %.pre-phi3641
  %12611 = getelementptr inbounds i16, i16* %66, i64 %12610
  %12612 = bitcast i16* %12611 to <16 x i16>*
  store <16 x i16> %12609, <16 x i16>* %12612, align 2, !tbaa !401
  %12613 = shufflevector <32 x i16> %12608, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12614 = getelementptr inbounds i16, i16* %12611, i64 16
  %12615 = bitcast i16* %12614 to <16 x i16>*
  store <16 x i16> %12613, <16 x i16>* %12615, align 2, !tbaa !401
  %indvars.iv.next3444 = add nuw nsw i64 %indvars.iv3443, 1
  %.not2835 = icmp eq i64 %indvars.iv.next3444, %188
  br i1 %.not2835, label %"end for blur_y.s0.x.x.rebased531", label %"for blur_y.s0.x.x.rebased530"

"for blur_y.s0.x.x.rebased538":                   ; preds = %"for blur_y.s0.x.x.rebased538.preheader", %"consume blur_x546"
  %blur_y.s0.x.x.rebased540 = phi i32 [ %12766, %"consume blur_x546" ], [ 0, %"for blur_y.s0.x.x.rebased538.preheader" ]
  %12616 = add nsw i32 %blur_y.s0.x.x.rebased540, %t1670
  %a245 = shl nsw i32 %12616, 5
  %12617 = icmp sgt i32 %a14, %a245
  %b251 = select i1 %12617, i32 %a245, i32 %a14
  %12618 = icmp slt i32 %12616, 1
  %12619 = icmp sgt i32 %4, %a245
  %12620 = or i1 %12618, %12619
  br i1 %12620, label %"produce blur_x544", label %"consume blur_x546"

"end for blur_y.s0.x.x.rebased539":               ; preds = %"consume blur_x546", %"end for blur_y.s0.x.x.rebased531"
  br i1 %34, label %"produce blur_x550", label %after_bb547

"produce blur_x544":                              ; preds = %"for blur_y.s0.x.x.rebased538"
  %12621 = icmp slt i32 %b251, %4
  %blur_x.s0.x.v1.base.s545 = select i1 %12621, i32 %b251, i32 %4
  %t1045 = add nsw i32 %blur_x.s0.x.v1.base.s545, %t2049
  %12622 = sext i32 %t1045 to i64
  %12623 = getelementptr inbounds i16, i16* %read_input, i64 %12622
  %12624 = getelementptr inbounds i16, i16* %12623, i64 1
  %12625 = bitcast i16* %12624 to <16 x i16>*
  %12626 = load <16 x i16>, <16 x i16>* %12625, align 2, !tbaa !396
  %12627 = getelementptr inbounds i16, i16* %12623, i64 17
  %12628 = bitcast i16* %12627 to <16 x i16>*
  %12629 = load <16 x i16>, <16 x i16>* %12628, align 2, !tbaa !396
  %12630 = bitcast i16* %12623 to <16 x i16>*
  %12631 = load <16 x i16>, <16 x i16>* %12630, align 2, !tbaa !396
  %12632 = getelementptr inbounds i16, i16* %12623, i64 16
  %12633 = bitcast i16* %12632 to <16 x i16>*
  %12634 = load <16 x i16>, <16 x i16>* %12633, align 2, !tbaa !396
  %12635 = getelementptr inbounds i16, i16* %12623, i64 2
  %12636 = bitcast i16* %12635 to <16 x i16>*
  %12637 = load <16 x i16>, <16 x i16>* %12636, align 2, !tbaa !396
  %12638 = getelementptr inbounds i16, i16* %12623, i64 18
  %12639 = bitcast i16* %12638 to <16 x i16>*
  %12640 = load <16 x i16>, <16 x i16>* %12639, align 2, !tbaa !396
  %12641 = getelementptr inbounds i16, i16* %12623, i64 3
  %12642 = bitcast i16* %12641 to <16 x i16>*
  %12643 = load <16 x i16>, <16 x i16>* %12642, align 2, !tbaa !396
  %12644 = getelementptr inbounds i16, i16* %12623, i64 19
  %12645 = bitcast i16* %12644 to <16 x i16>*
  %12646 = load <16 x i16>, <16 x i16>* %12645, align 2, !tbaa !396
  %12647 = getelementptr inbounds i16, i16* %12623, i64 4
  %12648 = bitcast i16* %12647 to <16 x i16>*
  %12649 = load <16 x i16>, <16 x i16>* %12648, align 2, !tbaa !396
  %12650 = getelementptr inbounds i16, i16* %12623, i64 20
  %12651 = bitcast i16* %12650 to <16 x i16>*
  %12652 = load <16 x i16>, <16 x i16>* %12651, align 2, !tbaa !396
  %12653 = getelementptr inbounds i16, i16* %12623, i64 6
  %12654 = bitcast i16* %12653 to <16 x i16>*
  %12655 = load <16 x i16>, <16 x i16>* %12654, align 2, !tbaa !396
  %12656 = getelementptr inbounds i16, i16* %12623, i64 22
  %12657 = bitcast i16* %12656 to <16 x i16>*
  %12658 = load <16 x i16>, <16 x i16>* %12657, align 2, !tbaa !396
  %12659 = getelementptr inbounds i16, i16* %12623, i64 5
  %12660 = bitcast i16* %12659 to <16 x i16>*
  %12661 = load <16 x i16>, <16 x i16>* %12660, align 2, !tbaa !396
  %12662 = getelementptr inbounds i16, i16* %12623, i64 21
  %12663 = bitcast i16* %12662 to <16 x i16>*
  %12664 = load <16 x i16>, <16 x i16>* %12663, align 2, !tbaa !396
  %12665 = add <16 x i16> %12631, %12626
  %12666 = add <16 x i16> %12665, %12637
  %12667 = add <16 x i16> %12666, %12643
  %12668 = add <16 x i16> %12667, %12649
  %12669 = add <16 x i16> %12668, %12655
  %12670 = add <16 x i16> %12669, %12661
  %12671 = add <16 x i16> %12634, %12629
  %12672 = add <16 x i16> %12671, %12640
  %12673 = add <16 x i16> %12672, %12646
  %12674 = add <16 x i16> %12673, %12652
  %12675 = add <16 x i16> %12674, %12658
  %12676 = add <16 x i16> %12675, %12664
  %12677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12670, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12678 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12676, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12679 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12677, <16 x i16> %12670)
  %12680 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12678, <16 x i16> %12676)
  %12681 = shufflevector <16 x i16> %12679, <16 x i16> %12680, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12682 = lshr <32 x i16> %12681, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12683 = shufflevector <32 x i16> %12682, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12684 = sext i32 %blur_x.s0.x.v1.base.s545 to i64
  %12685 = add nsw i64 %12684, %12447
  %12686 = getelementptr inbounds i16, i16* %blur_x, i64 %12685
  %12687 = bitcast i16* %12686 to <16 x i16>*
  store <16 x i16> %12683, <16 x i16>* %12687, align 2, !tbaa !399
  %12688 = shufflevector <32 x i16> %12682, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12689 = getelementptr inbounds i16, i16* %12686, i64 16
  %12690 = bitcast i16* %12689 to <16 x i16>*
  store <16 x i16> %12688, <16 x i16>* %12690, align 2, !tbaa !399
  br label %"consume blur_x546"

"consume blur_x546":                              ; preds = %"for blur_y.s0.x.x.rebased538", %"produce blur_x544"
  %12691 = sext i32 %b251 to i64
  %12692 = add nsw i64 %12450, %12691
  %12693 = getelementptr inbounds i16, i16* %blur_x, i64 %12692
  %12694 = bitcast i16* %12693 to <16 x i16>*
  %12695 = load <16 x i16>, <16 x i16>* %12694, align 2, !tbaa !399
  %12696 = getelementptr inbounds i16, i16* %12693, i64 16
  %12697 = bitcast i16* %12696 to <16 x i16>*
  %12698 = load <16 x i16>, <16 x i16>* %12697, align 2, !tbaa !399
  %12699 = add nsw i64 %12453, %12691
  %12700 = getelementptr inbounds i16, i16* %blur_x, i64 %12699
  %12701 = bitcast i16* %12700 to <16 x i16>*
  %12702 = load <16 x i16>, <16 x i16>* %12701, align 2, !tbaa !399
  %12703 = getelementptr inbounds i16, i16* %12700, i64 16
  %12704 = bitcast i16* %12703 to <16 x i16>*
  %12705 = load <16 x i16>, <16 x i16>* %12704, align 2, !tbaa !399
  %12706 = add nsw i64 %12456, %12691
  %12707 = getelementptr inbounds i16, i16* %blur_x, i64 %12706
  %12708 = bitcast i16* %12707 to <16 x i16>*
  %12709 = load <16 x i16>, <16 x i16>* %12708, align 2, !tbaa !399
  %12710 = getelementptr inbounds i16, i16* %12707, i64 16
  %12711 = bitcast i16* %12710 to <16 x i16>*
  %12712 = load <16 x i16>, <16 x i16>* %12711, align 2, !tbaa !399
  %12713 = add nsw i64 %12459, %12691
  %12714 = getelementptr inbounds i16, i16* %blur_x, i64 %12713
  %12715 = bitcast i16* %12714 to <16 x i16>*
  %12716 = load <16 x i16>, <16 x i16>* %12715, align 2, !tbaa !399
  %12717 = getelementptr inbounds i16, i16* %12714, i64 16
  %12718 = bitcast i16* %12717 to <16 x i16>*
  %12719 = load <16 x i16>, <16 x i16>* %12718, align 2, !tbaa !399
  %12720 = add nsw i64 %12462, %12691
  %12721 = getelementptr inbounds i16, i16* %blur_x, i64 %12720
  %12722 = bitcast i16* %12721 to <16 x i16>*
  %12723 = load <16 x i16>, <16 x i16>* %12722, align 2, !tbaa !399
  %12724 = getelementptr inbounds i16, i16* %12721, i64 16
  %12725 = bitcast i16* %12724 to <16 x i16>*
  %12726 = load <16 x i16>, <16 x i16>* %12725, align 2, !tbaa !399
  %12727 = add nsw i64 %12465, %12691
  %12728 = getelementptr inbounds i16, i16* %blur_x, i64 %12727
  %12729 = bitcast i16* %12728 to <16 x i16>*
  %12730 = load <16 x i16>, <16 x i16>* %12729, align 2, !tbaa !399
  %12731 = getelementptr inbounds i16, i16* %12728, i64 16
  %12732 = bitcast i16* %12731 to <16 x i16>*
  %12733 = load <16 x i16>, <16 x i16>* %12732, align 2, !tbaa !399
  %12734 = add nsw i64 %12468, %12691
  %12735 = getelementptr inbounds i16, i16* %blur_x, i64 %12734
  %12736 = bitcast i16* %12735 to <16 x i16>*
  %12737 = load <16 x i16>, <16 x i16>* %12736, align 2, !tbaa !399
  %12738 = getelementptr inbounds i16, i16* %12735, i64 16
  %12739 = bitcast i16* %12738 to <16 x i16>*
  %12740 = load <16 x i16>, <16 x i16>* %12739, align 2, !tbaa !399
  %12741 = add <16 x i16> %12702, %12695
  %12742 = add <16 x i16> %12741, %12709
  %12743 = add <16 x i16> %12742, %12716
  %12744 = add <16 x i16> %12743, %12723
  %12745 = add <16 x i16> %12744, %12730
  %12746 = add <16 x i16> %12745, %12737
  %12747 = add <16 x i16> %12705, %12698
  %12748 = add <16 x i16> %12747, %12712
  %12749 = add <16 x i16> %12748, %12719
  %12750 = add <16 x i16> %12749, %12726
  %12751 = add <16 x i16> %12750, %12733
  %12752 = add <16 x i16> %12751, %12740
  %12753 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12746, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12754 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12752, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12755 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12753, <16 x i16> %12746)
  %12756 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12754, <16 x i16> %12752)
  %12757 = shufflevector <16 x i16> %12755, <16 x i16> %12756, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12758 = lshr <32 x i16> %12757, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12759 = shufflevector <32 x i16> %12758, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12760 = add nsw i64 %12472, %12691
  %12761 = getelementptr inbounds i16, i16* %66, i64 %12760
  %12762 = bitcast i16* %12761 to <16 x i16>*
  store <16 x i16> %12759, <16 x i16>* %12762, align 2, !tbaa !401
  %12763 = shufflevector <32 x i16> %12758, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12764 = getelementptr inbounds i16, i16* %12761, i64 16
  %12765 = bitcast i16* %12764 to <16 x i16>*
  store <16 x i16> %12763, <16 x i16>* %12765, align 2, !tbaa !401
  %12766 = add nuw nsw i32 %blur_y.s0.x.x.rebased540, 1
  %.not2834 = icmp eq i32 %12766, %t1727
  br i1 %.not2834, label %"end for blur_y.s0.x.x.rebased539", label %"for blur_y.s0.x.x.rebased538"

after_bb547:                                      ; preds = %"end for blur_y.s0.x.x.rebased539", %"produce blur_x550"
  br i1 %100, label %"for blur_y.s0.x.x.rebased552.preheader", label %"end for blur_y.s0.x.x.rebased553", !prof !386

"for blur_y.s0.x.x.rebased552.preheader":         ; preds = %after_bb547
  %12767 = sext i32 %t1732 to i64
  %12768 = zext i32 %.pre-phi3591 to i64
  %12769 = mul nsw i64 %12768, %116
  %12770 = sub nsw i64 %12769, %96
  %12771 = zext i32 %.pre-phi3587 to i64
  %12772 = mul nsw i64 %12771, %116
  %12773 = sub nsw i64 %12772, %96
  %12774 = zext i32 %.pre-phi3595 to i64
  %12775 = mul nsw i64 %12774, %116
  %12776 = sub nsw i64 %12775, %96
  %12777 = zext i32 %.pre-phi3599 to i64
  %12778 = mul nsw i64 %12777, %116
  %12779 = sub nsw i64 %12778, %96
  %12780 = zext i32 %.pre-phi3605 to i64
  %12781 = mul nsw i64 %12780, %116
  %12782 = sub nsw i64 %12781, %96
  %12783 = zext i32 %.pre-phi3579 to i64
  %12784 = mul nsw i64 %12783, %116
  %12785 = sub nsw i64 %12784, %96
  %12786 = zext i32 %.pre-phi to i64
  %12787 = mul nsw i64 %12786, %116
  %12788 = sub nsw i64 %12787, %96
  %12789 = sext i32 %a26 to i64
  %12790 = add nsw i64 %12789, 19
  %12791 = mul nsw i64 %12790, %117
  %12792 = add nsw i64 %12791, %120
  br label %"for blur_y.s0.x.x.rebased552"

"produce blur_x550":                              ; preds = %"end for blur_y.s0.x.x.rebased539"
  %12793 = getelementptr inbounds i16, i16* %read_input, i64 %157
  %12794 = getelementptr inbounds i16, i16* %12793, i64 -31
  %12795 = bitcast i16* %12794 to <16 x i16>*
  %12796 = load <16 x i16>, <16 x i16>* %12795, align 2, !tbaa !396
  %12797 = getelementptr inbounds i16, i16* %12793, i64 -15
  %12798 = bitcast i16* %12797 to <16 x i16>*
  %12799 = load <16 x i16>, <16 x i16>* %12798, align 2, !tbaa !396
  %12800 = getelementptr inbounds i16, i16* %12793, i64 -32
  %12801 = bitcast i16* %12800 to <16 x i16>*
  %12802 = load <16 x i16>, <16 x i16>* %12801, align 2, !tbaa !396
  %12803 = getelementptr inbounds i16, i16* %12793, i64 -16
  %12804 = bitcast i16* %12803 to <16 x i16>*
  %12805 = load <16 x i16>, <16 x i16>* %12804, align 2, !tbaa !396
  %12806 = getelementptr inbounds i16, i16* %12793, i64 -30
  %12807 = bitcast i16* %12806 to <16 x i16>*
  %12808 = load <16 x i16>, <16 x i16>* %12807, align 2, !tbaa !396
  %12809 = getelementptr inbounds i16, i16* %12793, i64 -14
  %12810 = bitcast i16* %12809 to <16 x i16>*
  %12811 = load <16 x i16>, <16 x i16>* %12810, align 2, !tbaa !396
  %12812 = getelementptr inbounds i16, i16* %12793, i64 -29
  %12813 = bitcast i16* %12812 to <16 x i16>*
  %12814 = load <16 x i16>, <16 x i16>* %12813, align 2, !tbaa !396
  %12815 = getelementptr inbounds i16, i16* %12793, i64 -13
  %12816 = bitcast i16* %12815 to <16 x i16>*
  %12817 = load <16 x i16>, <16 x i16>* %12816, align 2, !tbaa !396
  %12818 = getelementptr inbounds i16, i16* %12793, i64 -28
  %12819 = bitcast i16* %12818 to <16 x i16>*
  %12820 = load <16 x i16>, <16 x i16>* %12819, align 2, !tbaa !396
  %12821 = getelementptr inbounds i16, i16* %12793, i64 -12
  %12822 = bitcast i16* %12821 to <16 x i16>*
  %12823 = load <16 x i16>, <16 x i16>* %12822, align 2, !tbaa !396
  %12824 = getelementptr inbounds i16, i16* %12793, i64 -26
  %12825 = bitcast i16* %12824 to <16 x i16>*
  %12826 = load <16 x i16>, <16 x i16>* %12825, align 2, !tbaa !396
  %12827 = getelementptr inbounds i16, i16* %12793, i64 -10
  %12828 = bitcast i16* %12827 to <16 x i16>*
  %12829 = load <16 x i16>, <16 x i16>* %12828, align 2, !tbaa !396
  %12830 = getelementptr inbounds i16, i16* %12793, i64 -27
  %12831 = bitcast i16* %12830 to <16 x i16>*
  %12832 = load <16 x i16>, <16 x i16>* %12831, align 2, !tbaa !396
  %12833 = getelementptr inbounds i16, i16* %12793, i64 -11
  %12834 = bitcast i16* %12833 to <16 x i16>*
  %12835 = load <16 x i16>, <16 x i16>* %12834, align 2, !tbaa !396
  %12836 = add <16 x i16> %12802, %12796
  %12837 = add <16 x i16> %12836, %12808
  %12838 = add <16 x i16> %12837, %12814
  %12839 = add <16 x i16> %12838, %12820
  %12840 = add <16 x i16> %12839, %12826
  %12841 = add <16 x i16> %12840, %12832
  %12842 = add <16 x i16> %12805, %12799
  %12843 = add <16 x i16> %12842, %12811
  %12844 = add <16 x i16> %12843, %12817
  %12845 = add <16 x i16> %12844, %12823
  %12846 = add <16 x i16> %12845, %12829
  %12847 = add <16 x i16> %12846, %12835
  %12848 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12841, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12849 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12847, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12850 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12848, <16 x i16> %12841)
  %12851 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12849, <16 x i16> %12847)
  %12852 = shufflevector <16 x i16> %12850, <16 x i16> %12851, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12853 = lshr <32 x i16> %12852, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12854 = shufflevector <32 x i16> %12853, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12855 = zext i32 %.pre-phi3579 to i64
  %12856 = mul nsw i64 %97, %12855
  %12857 = add nsw i64 %99, %12856
  %12858 = getelementptr inbounds i16, i16* %blur_x, i64 %12857
  %12859 = getelementptr inbounds i16, i16* %12858, i64 -32
  %12860 = bitcast i16* %12859 to <16 x i16>*
  store <16 x i16> %12854, <16 x i16>* %12860, align 2, !tbaa !399
  %12861 = shufflevector <32 x i16> %12853, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12862 = getelementptr inbounds i16, i16* %12858, i64 -16
  %12863 = bitcast i16* %12862 to <16 x i16>*
  store <16 x i16> %12861, <16 x i16>* %12863, align 2, !tbaa !399
  %12864 = zext i32 %.pre-phi3591 to i64
  %12865 = mul nsw i64 %12864, %116
  %12866 = add nsw i64 %12865, %94
  %12867 = getelementptr inbounds i16, i16* %blur_x, i64 %12866
  %12868 = getelementptr inbounds i16, i16* %12867, i64 -32
  %12869 = bitcast i16* %12868 to <16 x i16>*
  %12870 = load <16 x i16>, <16 x i16>* %12869, align 2, !tbaa !399
  %12871 = getelementptr inbounds i16, i16* %12867, i64 -16
  %12872 = bitcast i16* %12871 to <16 x i16>*
  %12873 = load <16 x i16>, <16 x i16>* %12872, align 2, !tbaa !399
  %12874 = zext i32 %.pre-phi3587 to i64
  %12875 = mul nsw i64 %12874, %116
  %12876 = add nsw i64 %12875, %94
  %12877 = getelementptr inbounds i16, i16* %blur_x, i64 %12876
  %12878 = getelementptr inbounds i16, i16* %12877, i64 -32
  %12879 = bitcast i16* %12878 to <16 x i16>*
  %12880 = load <16 x i16>, <16 x i16>* %12879, align 2, !tbaa !399
  %12881 = getelementptr inbounds i16, i16* %12877, i64 -16
  %12882 = bitcast i16* %12881 to <16 x i16>*
  %12883 = load <16 x i16>, <16 x i16>* %12882, align 2, !tbaa !399
  %12884 = zext i32 %.pre-phi3595 to i64
  %12885 = mul nsw i64 %12884, %116
  %12886 = add nsw i64 %12885, %94
  %12887 = getelementptr inbounds i16, i16* %blur_x, i64 %12886
  %12888 = getelementptr inbounds i16, i16* %12887, i64 -32
  %12889 = bitcast i16* %12888 to <16 x i16>*
  %12890 = load <16 x i16>, <16 x i16>* %12889, align 2, !tbaa !399
  %12891 = getelementptr inbounds i16, i16* %12887, i64 -16
  %12892 = bitcast i16* %12891 to <16 x i16>*
  %12893 = load <16 x i16>, <16 x i16>* %12892, align 2, !tbaa !399
  %12894 = zext i32 %.pre-phi3599 to i64
  %12895 = mul nsw i64 %12894, %116
  %12896 = add nsw i64 %12895, %94
  %12897 = getelementptr inbounds i16, i16* %blur_x, i64 %12896
  %12898 = getelementptr inbounds i16, i16* %12897, i64 -32
  %12899 = bitcast i16* %12898 to <16 x i16>*
  %12900 = load <16 x i16>, <16 x i16>* %12899, align 2, !tbaa !399
  %12901 = getelementptr inbounds i16, i16* %12897, i64 -16
  %12902 = bitcast i16* %12901 to <16 x i16>*
  %12903 = load <16 x i16>, <16 x i16>* %12902, align 2, !tbaa !399
  %12904 = zext i32 %.pre-phi3605 to i64
  %12905 = mul nsw i64 %12904, %116
  %12906 = add nsw i64 %12905, %94
  %12907 = getelementptr inbounds i16, i16* %blur_x, i64 %12906
  %12908 = getelementptr inbounds i16, i16* %12907, i64 -32
  %12909 = bitcast i16* %12908 to <16 x i16>*
  %12910 = load <16 x i16>, <16 x i16>* %12909, align 2, !tbaa !399
  %12911 = getelementptr inbounds i16, i16* %12907, i64 -16
  %12912 = bitcast i16* %12911 to <16 x i16>*
  %12913 = load <16 x i16>, <16 x i16>* %12912, align 2, !tbaa !399
  %12914 = mul nsw i64 %12855, %116
  %12915 = add nsw i64 %12914, %94
  %12916 = getelementptr inbounds i16, i16* %blur_x, i64 %12915
  %12917 = getelementptr inbounds i16, i16* %12916, i64 -32
  %12918 = bitcast i16* %12917 to <16 x i16>*
  %12919 = load <16 x i16>, <16 x i16>* %12918, align 2, !tbaa !399
  %12920 = getelementptr inbounds i16, i16* %12916, i64 -16
  %12921 = bitcast i16* %12920 to <16 x i16>*
  %12922 = load <16 x i16>, <16 x i16>* %12921, align 2, !tbaa !399
  %12923 = zext i32 %.pre-phi to i64
  %12924 = mul nsw i64 %12923, %116
  %12925 = add nsw i64 %12924, %94
  %12926 = getelementptr inbounds i16, i16* %blur_x, i64 %12925
  %12927 = getelementptr inbounds i16, i16* %12926, i64 -32
  %12928 = bitcast i16* %12927 to <16 x i16>*
  %12929 = load <16 x i16>, <16 x i16>* %12928, align 2, !tbaa !399
  %12930 = getelementptr inbounds i16, i16* %12926, i64 -16
  %12931 = bitcast i16* %12930 to <16 x i16>*
  %12932 = load <16 x i16>, <16 x i16>* %12931, align 2, !tbaa !399
  %12933 = add <16 x i16> %12880, %12870
  %12934 = add <16 x i16> %12933, %12890
  %12935 = add <16 x i16> %12934, %12900
  %12936 = add <16 x i16> %12935, %12910
  %12937 = add <16 x i16> %12936, %12919
  %12938 = add <16 x i16> %12937, %12929
  %12939 = add <16 x i16> %12883, %12873
  %12940 = add <16 x i16> %12939, %12893
  %12941 = add <16 x i16> %12940, %12903
  %12942 = add <16 x i16> %12941, %12913
  %12943 = add <16 x i16> %12942, %12922
  %12944 = add <16 x i16> %12943, %12932
  %12945 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12938, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12946 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12944, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12947 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12945, <16 x i16> %12938)
  %12948 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12946, <16 x i16> %12944)
  %12949 = shufflevector <16 x i16> %12947, <16 x i16> %12948, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12950 = lshr <32 x i16> %12949, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12951 = shufflevector <32 x i16> %12950, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12952 = sext i32 %a26 to i64
  %12953 = add nsw i64 %12952, 19
  %12954 = mul nsw i64 %12953, %117
  %12955 = add nsw i64 %119, %12954
  %12956 = getelementptr inbounds i16, i16* %66, i64 %12955
  %12957 = getelementptr inbounds i16, i16* %12956, i64 -32
  %12958 = bitcast i16* %12957 to <16 x i16>*
  store <16 x i16> %12951, <16 x i16>* %12958, align 2, !tbaa !401
  %12959 = shufflevector <32 x i16> %12950, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12960 = getelementptr inbounds i16, i16* %12956, i64 -16
  %12961 = bitcast i16* %12960 to <16 x i16>*
  store <16 x i16> %12959, <16 x i16>* %12961, align 2, !tbaa !401
  br label %after_bb547

"for blur_y.s0.x.x.rebased552":                   ; preds = %"for blur_y.s0.x.x.rebased552.preheader", %"consume blur_x559"
  %indvars.iv3446 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased552.preheader" ], [ %indvars.iv.next3447, %"consume blur_x559" ]
  %12962 = add nsw i64 %indvars.iv3446, %101
  %12963 = icmp slt i64 %12962, 1
  %12964 = trunc i64 %12962 to i32
  %12965 = shl nsw i32 %12964, 5
  %12966 = icmp sgt i32 %4, %12965
  %12967 = or i1 %12963, %12966
  br i1 %12967, label %"produce blur_x558", label %"for blur_y.s0.x.x.rebased552.consume blur_x559_crit_edge"

"for blur_y.s0.x.x.rebased552.consume blur_x559_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased552"
  %.pre3642 = shl nsw i64 %12962, 5
  br label %"consume blur_x559"

"end for blur_y.s0.x.x.rebased553":               ; preds = %"consume blur_x559", %after_bb547
  br i1 %102, label %"for blur_y.s0.x.x.rebased560.preheader", label %"end for blur_y.s0.x.x.rebased561", !prof !386

"for blur_y.s0.x.x.rebased560.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased553"
  %12968 = sext i32 %t1732 to i64
  %12969 = zext i32 %.pre-phi3591 to i64
  %12970 = mul nsw i64 %12969, %116
  %12971 = sub nsw i64 %12970, %96
  %12972 = zext i32 %.pre-phi3587 to i64
  %12973 = mul nsw i64 %12972, %116
  %12974 = sub nsw i64 %12973, %96
  %12975 = zext i32 %.pre-phi3595 to i64
  %12976 = mul nsw i64 %12975, %116
  %12977 = sub nsw i64 %12976, %96
  %12978 = zext i32 %.pre-phi3599 to i64
  %12979 = mul nsw i64 %12978, %116
  %12980 = sub nsw i64 %12979, %96
  %12981 = zext i32 %.pre-phi3605 to i64
  %12982 = mul nsw i64 %12981, %116
  %12983 = sub nsw i64 %12982, %96
  %12984 = zext i32 %.pre-phi3579 to i64
  %12985 = mul nsw i64 %12984, %116
  %12986 = sub nsw i64 %12985, %96
  %12987 = zext i32 %.pre-phi to i64
  %12988 = mul nsw i64 %12987, %116
  %12989 = sub nsw i64 %12988, %96
  %12990 = sext i32 %a26 to i64
  %12991 = add nsw i64 %12990, 19
  %12992 = mul nsw i64 %12991, %117
  %12993 = add nsw i64 %12992, %120
  br label %"for blur_y.s0.x.x.rebased560"

"produce blur_x558":                              ; preds = %"for blur_y.s0.x.x.rebased552"
  %t1056 = add nsw i32 %12965, %t2065
  %12994 = sext i32 %t1056 to i64
  %12995 = getelementptr inbounds i16, i16* %read_input, i64 %12994
  %12996 = getelementptr inbounds i16, i16* %12995, i64 1
  %12997 = bitcast i16* %12996 to <16 x i16>*
  %12998 = load <16 x i16>, <16 x i16>* %12997, align 2, !tbaa !396
  %12999 = getelementptr inbounds i16, i16* %12995, i64 17
  %13000 = bitcast i16* %12999 to <16 x i16>*
  %13001 = load <16 x i16>, <16 x i16>* %13000, align 2, !tbaa !396
  %13002 = bitcast i16* %12995 to <16 x i16>*
  %13003 = load <16 x i16>, <16 x i16>* %13002, align 2, !tbaa !396
  %13004 = getelementptr inbounds i16, i16* %12995, i64 16
  %13005 = bitcast i16* %13004 to <16 x i16>*
  %13006 = load <16 x i16>, <16 x i16>* %13005, align 2, !tbaa !396
  %13007 = getelementptr inbounds i16, i16* %12995, i64 2
  %13008 = bitcast i16* %13007 to <16 x i16>*
  %13009 = load <16 x i16>, <16 x i16>* %13008, align 2, !tbaa !396
  %13010 = getelementptr inbounds i16, i16* %12995, i64 18
  %13011 = bitcast i16* %13010 to <16 x i16>*
  %13012 = load <16 x i16>, <16 x i16>* %13011, align 2, !tbaa !396
  %13013 = getelementptr inbounds i16, i16* %12995, i64 3
  %13014 = bitcast i16* %13013 to <16 x i16>*
  %13015 = load <16 x i16>, <16 x i16>* %13014, align 2, !tbaa !396
  %13016 = getelementptr inbounds i16, i16* %12995, i64 19
  %13017 = bitcast i16* %13016 to <16 x i16>*
  %13018 = load <16 x i16>, <16 x i16>* %13017, align 2, !tbaa !396
  %13019 = getelementptr inbounds i16, i16* %12995, i64 4
  %13020 = bitcast i16* %13019 to <16 x i16>*
  %13021 = load <16 x i16>, <16 x i16>* %13020, align 2, !tbaa !396
  %13022 = getelementptr inbounds i16, i16* %12995, i64 20
  %13023 = bitcast i16* %13022 to <16 x i16>*
  %13024 = load <16 x i16>, <16 x i16>* %13023, align 2, !tbaa !396
  %13025 = getelementptr inbounds i16, i16* %12995, i64 6
  %13026 = bitcast i16* %13025 to <16 x i16>*
  %13027 = load <16 x i16>, <16 x i16>* %13026, align 2, !tbaa !396
  %13028 = getelementptr inbounds i16, i16* %12995, i64 22
  %13029 = bitcast i16* %13028 to <16 x i16>*
  %13030 = load <16 x i16>, <16 x i16>* %13029, align 2, !tbaa !396
  %13031 = getelementptr inbounds i16, i16* %12995, i64 5
  %13032 = bitcast i16* %13031 to <16 x i16>*
  %13033 = load <16 x i16>, <16 x i16>* %13032, align 2, !tbaa !396
  %13034 = getelementptr inbounds i16, i16* %12995, i64 21
  %13035 = bitcast i16* %13034 to <16 x i16>*
  %13036 = load <16 x i16>, <16 x i16>* %13035, align 2, !tbaa !396
  %13037 = add <16 x i16> %13003, %12998
  %13038 = add <16 x i16> %13037, %13009
  %13039 = add <16 x i16> %13038, %13015
  %13040 = add <16 x i16> %13039, %13021
  %13041 = add <16 x i16> %13040, %13027
  %13042 = add <16 x i16> %13041, %13033
  %13043 = add <16 x i16> %13006, %13001
  %13044 = add <16 x i16> %13043, %13012
  %13045 = add <16 x i16> %13044, %13018
  %13046 = add <16 x i16> %13045, %13024
  %13047 = add <16 x i16> %13046, %13030
  %13048 = add <16 x i16> %13047, %13036
  %13049 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13042, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13050 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13048, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13051 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13049, <16 x i16> %13042)
  %13052 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13050, <16 x i16> %13048)
  %13053 = shufflevector <16 x i16> %13051, <16 x i16> %13052, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13054 = lshr <32 x i16> %13053, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13055 = shufflevector <32 x i16> %13054, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13056 = shl nsw i64 %12962, 5
  %13057 = add nsw i64 %13056, %12767
  %13058 = getelementptr inbounds i16, i16* %blur_x, i64 %13057
  %13059 = bitcast i16* %13058 to <16 x i16>*
  store <16 x i16> %13055, <16 x i16>* %13059, align 2, !tbaa !399
  %13060 = shufflevector <32 x i16> %13054, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13061 = getelementptr inbounds i16, i16* %13058, i64 16
  %13062 = bitcast i16* %13061 to <16 x i16>*
  store <16 x i16> %13060, <16 x i16>* %13062, align 2, !tbaa !399
  br label %"consume blur_x559"

"consume blur_x559":                              ; preds = %"for blur_y.s0.x.x.rebased552.consume blur_x559_crit_edge", %"produce blur_x558"
  %.pre-phi3643 = phi i64 [ %.pre3642, %"for blur_y.s0.x.x.rebased552.consume blur_x559_crit_edge" ], [ %13056, %"produce blur_x558" ]
  %13063 = add nsw i64 %12770, %.pre-phi3643
  %13064 = getelementptr inbounds i16, i16* %blur_x, i64 %13063
  %13065 = bitcast i16* %13064 to <16 x i16>*
  %13066 = load <16 x i16>, <16 x i16>* %13065, align 2, !tbaa !399
  %13067 = getelementptr inbounds i16, i16* %13064, i64 16
  %13068 = bitcast i16* %13067 to <16 x i16>*
  %13069 = load <16 x i16>, <16 x i16>* %13068, align 2, !tbaa !399
  %13070 = add nsw i64 %12773, %.pre-phi3643
  %13071 = getelementptr inbounds i16, i16* %blur_x, i64 %13070
  %13072 = bitcast i16* %13071 to <16 x i16>*
  %13073 = load <16 x i16>, <16 x i16>* %13072, align 2, !tbaa !399
  %13074 = getelementptr inbounds i16, i16* %13071, i64 16
  %13075 = bitcast i16* %13074 to <16 x i16>*
  %13076 = load <16 x i16>, <16 x i16>* %13075, align 2, !tbaa !399
  %13077 = add nsw i64 %12776, %.pre-phi3643
  %13078 = getelementptr inbounds i16, i16* %blur_x, i64 %13077
  %13079 = bitcast i16* %13078 to <16 x i16>*
  %13080 = load <16 x i16>, <16 x i16>* %13079, align 2, !tbaa !399
  %13081 = getelementptr inbounds i16, i16* %13078, i64 16
  %13082 = bitcast i16* %13081 to <16 x i16>*
  %13083 = load <16 x i16>, <16 x i16>* %13082, align 2, !tbaa !399
  %13084 = add nsw i64 %12779, %.pre-phi3643
  %13085 = getelementptr inbounds i16, i16* %blur_x, i64 %13084
  %13086 = bitcast i16* %13085 to <16 x i16>*
  %13087 = load <16 x i16>, <16 x i16>* %13086, align 2, !tbaa !399
  %13088 = getelementptr inbounds i16, i16* %13085, i64 16
  %13089 = bitcast i16* %13088 to <16 x i16>*
  %13090 = load <16 x i16>, <16 x i16>* %13089, align 2, !tbaa !399
  %13091 = add nsw i64 %12782, %.pre-phi3643
  %13092 = getelementptr inbounds i16, i16* %blur_x, i64 %13091
  %13093 = bitcast i16* %13092 to <16 x i16>*
  %13094 = load <16 x i16>, <16 x i16>* %13093, align 2, !tbaa !399
  %13095 = getelementptr inbounds i16, i16* %13092, i64 16
  %13096 = bitcast i16* %13095 to <16 x i16>*
  %13097 = load <16 x i16>, <16 x i16>* %13096, align 2, !tbaa !399
  %13098 = add nsw i64 %12785, %.pre-phi3643
  %13099 = getelementptr inbounds i16, i16* %blur_x, i64 %13098
  %13100 = bitcast i16* %13099 to <16 x i16>*
  %13101 = load <16 x i16>, <16 x i16>* %13100, align 2, !tbaa !399
  %13102 = getelementptr inbounds i16, i16* %13099, i64 16
  %13103 = bitcast i16* %13102 to <16 x i16>*
  %13104 = load <16 x i16>, <16 x i16>* %13103, align 2, !tbaa !399
  %13105 = add nsw i64 %12788, %.pre-phi3643
  %13106 = getelementptr inbounds i16, i16* %blur_x, i64 %13105
  %13107 = bitcast i16* %13106 to <16 x i16>*
  %13108 = load <16 x i16>, <16 x i16>* %13107, align 2, !tbaa !399
  %13109 = getelementptr inbounds i16, i16* %13106, i64 16
  %13110 = bitcast i16* %13109 to <16 x i16>*
  %13111 = load <16 x i16>, <16 x i16>* %13110, align 2, !tbaa !399
  %13112 = add <16 x i16> %13073, %13066
  %13113 = add <16 x i16> %13112, %13080
  %13114 = add <16 x i16> %13113, %13087
  %13115 = add <16 x i16> %13114, %13094
  %13116 = add <16 x i16> %13115, %13101
  %13117 = add <16 x i16> %13116, %13108
  %13118 = add <16 x i16> %13076, %13069
  %13119 = add <16 x i16> %13118, %13083
  %13120 = add <16 x i16> %13119, %13090
  %13121 = add <16 x i16> %13120, %13097
  %13122 = add <16 x i16> %13121, %13104
  %13123 = add <16 x i16> %13122, %13111
  %13124 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13117, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13125 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13123, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13126 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13124, <16 x i16> %13117)
  %13127 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13125, <16 x i16> %13123)
  %13128 = shufflevector <16 x i16> %13126, <16 x i16> %13127, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13129 = lshr <32 x i16> %13128, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13130 = shufflevector <32 x i16> %13129, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13131 = add nsw i64 %12792, %.pre-phi3643
  %13132 = getelementptr inbounds i16, i16* %66, i64 %13131
  %13133 = bitcast i16* %13132 to <16 x i16>*
  store <16 x i16> %13130, <16 x i16>* %13133, align 2, !tbaa !401
  %13134 = shufflevector <32 x i16> %13129, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13135 = getelementptr inbounds i16, i16* %13132, i64 16
  %13136 = bitcast i16* %13135 to <16 x i16>*
  store <16 x i16> %13134, <16 x i16>* %13136, align 2, !tbaa !401
  %indvars.iv.next3447 = add nuw nsw i64 %indvars.iv3446, 1
  %.not2833 = icmp eq i64 %indvars.iv.next3447, %188
  br i1 %.not2833, label %"end for blur_y.s0.x.x.rebased553", label %"for blur_y.s0.x.x.rebased552"

"for blur_y.s0.x.x.rebased560":                   ; preds = %"for blur_y.s0.x.x.rebased560.preheader", %"consume blur_x568"
  %blur_y.s0.x.x.rebased562 = phi i32 [ %13287, %"consume blur_x568" ], [ 0, %"for blur_y.s0.x.x.rebased560.preheader" ]
  %13137 = add nsw i32 %blur_y.s0.x.x.rebased562, %t1670
  %a252 = shl nsw i32 %13137, 5
  %13138 = icmp sgt i32 %a14, %a252
  %b258 = select i1 %13138, i32 %a252, i32 %a14
  %13139 = icmp slt i32 %13137, 1
  %13140 = icmp sgt i32 %4, %a252
  %13141 = or i1 %13139, %13140
  br i1 %13141, label %"produce blur_x566", label %"consume blur_x568"

"end for blur_y.s0.x.x.rebased561":               ; preds = %"consume blur_x568", %"end for blur_y.s0.x.x.rebased553"
  br i1 %34, label %"produce blur_x572", label %after_bb569

"produce blur_x566":                              ; preds = %"for blur_y.s0.x.x.rebased560"
  %13142 = icmp slt i32 %b258, %4
  %blur_x.s0.x.v1.base.s567 = select i1 %13142, i32 %b258, i32 %4
  %t1061 = add nsw i32 %blur_x.s0.x.v1.base.s567, %t2065
  %13143 = sext i32 %t1061 to i64
  %13144 = getelementptr inbounds i16, i16* %read_input, i64 %13143
  %13145 = getelementptr inbounds i16, i16* %13144, i64 1
  %13146 = bitcast i16* %13145 to <16 x i16>*
  %13147 = load <16 x i16>, <16 x i16>* %13146, align 2, !tbaa !396
  %13148 = getelementptr inbounds i16, i16* %13144, i64 17
  %13149 = bitcast i16* %13148 to <16 x i16>*
  %13150 = load <16 x i16>, <16 x i16>* %13149, align 2, !tbaa !396
  %13151 = bitcast i16* %13144 to <16 x i16>*
  %13152 = load <16 x i16>, <16 x i16>* %13151, align 2, !tbaa !396
  %13153 = getelementptr inbounds i16, i16* %13144, i64 16
  %13154 = bitcast i16* %13153 to <16 x i16>*
  %13155 = load <16 x i16>, <16 x i16>* %13154, align 2, !tbaa !396
  %13156 = getelementptr inbounds i16, i16* %13144, i64 2
  %13157 = bitcast i16* %13156 to <16 x i16>*
  %13158 = load <16 x i16>, <16 x i16>* %13157, align 2, !tbaa !396
  %13159 = getelementptr inbounds i16, i16* %13144, i64 18
  %13160 = bitcast i16* %13159 to <16 x i16>*
  %13161 = load <16 x i16>, <16 x i16>* %13160, align 2, !tbaa !396
  %13162 = getelementptr inbounds i16, i16* %13144, i64 3
  %13163 = bitcast i16* %13162 to <16 x i16>*
  %13164 = load <16 x i16>, <16 x i16>* %13163, align 2, !tbaa !396
  %13165 = getelementptr inbounds i16, i16* %13144, i64 19
  %13166 = bitcast i16* %13165 to <16 x i16>*
  %13167 = load <16 x i16>, <16 x i16>* %13166, align 2, !tbaa !396
  %13168 = getelementptr inbounds i16, i16* %13144, i64 4
  %13169 = bitcast i16* %13168 to <16 x i16>*
  %13170 = load <16 x i16>, <16 x i16>* %13169, align 2, !tbaa !396
  %13171 = getelementptr inbounds i16, i16* %13144, i64 20
  %13172 = bitcast i16* %13171 to <16 x i16>*
  %13173 = load <16 x i16>, <16 x i16>* %13172, align 2, !tbaa !396
  %13174 = getelementptr inbounds i16, i16* %13144, i64 6
  %13175 = bitcast i16* %13174 to <16 x i16>*
  %13176 = load <16 x i16>, <16 x i16>* %13175, align 2, !tbaa !396
  %13177 = getelementptr inbounds i16, i16* %13144, i64 22
  %13178 = bitcast i16* %13177 to <16 x i16>*
  %13179 = load <16 x i16>, <16 x i16>* %13178, align 2, !tbaa !396
  %13180 = getelementptr inbounds i16, i16* %13144, i64 5
  %13181 = bitcast i16* %13180 to <16 x i16>*
  %13182 = load <16 x i16>, <16 x i16>* %13181, align 2, !tbaa !396
  %13183 = getelementptr inbounds i16, i16* %13144, i64 21
  %13184 = bitcast i16* %13183 to <16 x i16>*
  %13185 = load <16 x i16>, <16 x i16>* %13184, align 2, !tbaa !396
  %13186 = add <16 x i16> %13152, %13147
  %13187 = add <16 x i16> %13186, %13158
  %13188 = add <16 x i16> %13187, %13164
  %13189 = add <16 x i16> %13188, %13170
  %13190 = add <16 x i16> %13189, %13176
  %13191 = add <16 x i16> %13190, %13182
  %13192 = add <16 x i16> %13155, %13150
  %13193 = add <16 x i16> %13192, %13161
  %13194 = add <16 x i16> %13193, %13167
  %13195 = add <16 x i16> %13194, %13173
  %13196 = add <16 x i16> %13195, %13179
  %13197 = add <16 x i16> %13196, %13185
  %13198 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13191, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13199 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13197, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13200 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13198, <16 x i16> %13191)
  %13201 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13199, <16 x i16> %13197)
  %13202 = shufflevector <16 x i16> %13200, <16 x i16> %13201, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13203 = lshr <32 x i16> %13202, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13204 = shufflevector <32 x i16> %13203, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13205 = sext i32 %blur_x.s0.x.v1.base.s567 to i64
  %13206 = add nsw i64 %13205, %12968
  %13207 = getelementptr inbounds i16, i16* %blur_x, i64 %13206
  %13208 = bitcast i16* %13207 to <16 x i16>*
  store <16 x i16> %13204, <16 x i16>* %13208, align 2, !tbaa !399
  %13209 = shufflevector <32 x i16> %13203, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13210 = getelementptr inbounds i16, i16* %13207, i64 16
  %13211 = bitcast i16* %13210 to <16 x i16>*
  store <16 x i16> %13209, <16 x i16>* %13211, align 2, !tbaa !399
  br label %"consume blur_x568"

"consume blur_x568":                              ; preds = %"for blur_y.s0.x.x.rebased560", %"produce blur_x566"
  %13212 = sext i32 %b258 to i64
  %13213 = add nsw i64 %12971, %13212
  %13214 = getelementptr inbounds i16, i16* %blur_x, i64 %13213
  %13215 = bitcast i16* %13214 to <16 x i16>*
  %13216 = load <16 x i16>, <16 x i16>* %13215, align 2, !tbaa !399
  %13217 = getelementptr inbounds i16, i16* %13214, i64 16
  %13218 = bitcast i16* %13217 to <16 x i16>*
  %13219 = load <16 x i16>, <16 x i16>* %13218, align 2, !tbaa !399
  %13220 = add nsw i64 %12974, %13212
  %13221 = getelementptr inbounds i16, i16* %blur_x, i64 %13220
  %13222 = bitcast i16* %13221 to <16 x i16>*
  %13223 = load <16 x i16>, <16 x i16>* %13222, align 2, !tbaa !399
  %13224 = getelementptr inbounds i16, i16* %13221, i64 16
  %13225 = bitcast i16* %13224 to <16 x i16>*
  %13226 = load <16 x i16>, <16 x i16>* %13225, align 2, !tbaa !399
  %13227 = add nsw i64 %12977, %13212
  %13228 = getelementptr inbounds i16, i16* %blur_x, i64 %13227
  %13229 = bitcast i16* %13228 to <16 x i16>*
  %13230 = load <16 x i16>, <16 x i16>* %13229, align 2, !tbaa !399
  %13231 = getelementptr inbounds i16, i16* %13228, i64 16
  %13232 = bitcast i16* %13231 to <16 x i16>*
  %13233 = load <16 x i16>, <16 x i16>* %13232, align 2, !tbaa !399
  %13234 = add nsw i64 %12980, %13212
  %13235 = getelementptr inbounds i16, i16* %blur_x, i64 %13234
  %13236 = bitcast i16* %13235 to <16 x i16>*
  %13237 = load <16 x i16>, <16 x i16>* %13236, align 2, !tbaa !399
  %13238 = getelementptr inbounds i16, i16* %13235, i64 16
  %13239 = bitcast i16* %13238 to <16 x i16>*
  %13240 = load <16 x i16>, <16 x i16>* %13239, align 2, !tbaa !399
  %13241 = add nsw i64 %12983, %13212
  %13242 = getelementptr inbounds i16, i16* %blur_x, i64 %13241
  %13243 = bitcast i16* %13242 to <16 x i16>*
  %13244 = load <16 x i16>, <16 x i16>* %13243, align 2, !tbaa !399
  %13245 = getelementptr inbounds i16, i16* %13242, i64 16
  %13246 = bitcast i16* %13245 to <16 x i16>*
  %13247 = load <16 x i16>, <16 x i16>* %13246, align 2, !tbaa !399
  %13248 = add nsw i64 %12986, %13212
  %13249 = getelementptr inbounds i16, i16* %blur_x, i64 %13248
  %13250 = bitcast i16* %13249 to <16 x i16>*
  %13251 = load <16 x i16>, <16 x i16>* %13250, align 2, !tbaa !399
  %13252 = getelementptr inbounds i16, i16* %13249, i64 16
  %13253 = bitcast i16* %13252 to <16 x i16>*
  %13254 = load <16 x i16>, <16 x i16>* %13253, align 2, !tbaa !399
  %13255 = add nsw i64 %12989, %13212
  %13256 = getelementptr inbounds i16, i16* %blur_x, i64 %13255
  %13257 = bitcast i16* %13256 to <16 x i16>*
  %13258 = load <16 x i16>, <16 x i16>* %13257, align 2, !tbaa !399
  %13259 = getelementptr inbounds i16, i16* %13256, i64 16
  %13260 = bitcast i16* %13259 to <16 x i16>*
  %13261 = load <16 x i16>, <16 x i16>* %13260, align 2, !tbaa !399
  %13262 = add <16 x i16> %13223, %13216
  %13263 = add <16 x i16> %13262, %13230
  %13264 = add <16 x i16> %13263, %13237
  %13265 = add <16 x i16> %13264, %13244
  %13266 = add <16 x i16> %13265, %13251
  %13267 = add <16 x i16> %13266, %13258
  %13268 = add <16 x i16> %13226, %13219
  %13269 = add <16 x i16> %13268, %13233
  %13270 = add <16 x i16> %13269, %13240
  %13271 = add <16 x i16> %13270, %13247
  %13272 = add <16 x i16> %13271, %13254
  %13273 = add <16 x i16> %13272, %13261
  %13274 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13267, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13275 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13273, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13276 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13274, <16 x i16> %13267)
  %13277 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13275, <16 x i16> %13273)
  %13278 = shufflevector <16 x i16> %13276, <16 x i16> %13277, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13279 = lshr <32 x i16> %13278, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13280 = shufflevector <32 x i16> %13279, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13281 = add nsw i64 %12993, %13212
  %13282 = getelementptr inbounds i16, i16* %66, i64 %13281
  %13283 = bitcast i16* %13282 to <16 x i16>*
  store <16 x i16> %13280, <16 x i16>* %13283, align 2, !tbaa !401
  %13284 = shufflevector <32 x i16> %13279, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13285 = getelementptr inbounds i16, i16* %13282, i64 16
  %13286 = bitcast i16* %13285 to <16 x i16>*
  store <16 x i16> %13284, <16 x i16>* %13286, align 2, !tbaa !401
  %13287 = add nuw nsw i32 %blur_y.s0.x.x.rebased562, 1
  %.not2832 = icmp eq i32 %13287, %t1727
  br i1 %.not2832, label %"end for blur_y.s0.x.x.rebased561", label %"for blur_y.s0.x.x.rebased560"

after_bb569:                                      ; preds = %"end for blur_y.s0.x.x.rebased561", %"produce blur_x572"
  br i1 %100, label %"for blur_y.s0.x.x.rebased574.preheader", label %"end for blur_y.s0.x.x.rebased575", !prof !386

"for blur_y.s0.x.x.rebased574.preheader":         ; preds = %after_bb569
  %13288 = sext i32 %t1738 to i64
  %13289 = zext i32 %.pre-phi3595 to i64
  %13290 = mul nsw i64 %13289, %116
  %13291 = sub nsw i64 %13290, %96
  %13292 = zext i32 %.pre-phi3591 to i64
  %13293 = mul nsw i64 %13292, %116
  %13294 = sub nsw i64 %13293, %96
  %13295 = zext i32 %.pre-phi3599 to i64
  %13296 = mul nsw i64 %13295, %116
  %13297 = sub nsw i64 %13296, %96
  %13298 = zext i32 %.pre-phi3605 to i64
  %13299 = mul nsw i64 %13298, %116
  %13300 = sub nsw i64 %13299, %96
  %13301 = zext i32 %.pre-phi to i64
  %13302 = mul nsw i64 %13301, %116
  %13303 = sub nsw i64 %13302, %96
  %13304 = zext i32 %.pre-phi3583 to i64
  %13305 = mul nsw i64 %13304, %116
  %13306 = sub nsw i64 %13305, %96
  %13307 = zext i32 %.pre-phi3579 to i64
  %13308 = mul nsw i64 %13307, %116
  %13309 = sub nsw i64 %13308, %96
  %13310 = sext i32 %a26 to i64
  %13311 = add nsw i64 %13310, 20
  %13312 = mul nsw i64 %13311, %117
  %13313 = add nsw i64 %13312, %120
  br label %"for blur_y.s0.x.x.rebased574"

"produce blur_x572":                              ; preds = %"end for blur_y.s0.x.x.rebased561"
  %13314 = getelementptr inbounds i16, i16* %read_input, i64 %159
  %13315 = getelementptr inbounds i16, i16* %13314, i64 -31
  %13316 = bitcast i16* %13315 to <16 x i16>*
  %13317 = load <16 x i16>, <16 x i16>* %13316, align 2, !tbaa !396
  %13318 = getelementptr inbounds i16, i16* %13314, i64 -15
  %13319 = bitcast i16* %13318 to <16 x i16>*
  %13320 = load <16 x i16>, <16 x i16>* %13319, align 2, !tbaa !396
  %13321 = getelementptr inbounds i16, i16* %13314, i64 -32
  %13322 = bitcast i16* %13321 to <16 x i16>*
  %13323 = load <16 x i16>, <16 x i16>* %13322, align 2, !tbaa !396
  %13324 = getelementptr inbounds i16, i16* %13314, i64 -16
  %13325 = bitcast i16* %13324 to <16 x i16>*
  %13326 = load <16 x i16>, <16 x i16>* %13325, align 2, !tbaa !396
  %13327 = getelementptr inbounds i16, i16* %13314, i64 -30
  %13328 = bitcast i16* %13327 to <16 x i16>*
  %13329 = load <16 x i16>, <16 x i16>* %13328, align 2, !tbaa !396
  %13330 = getelementptr inbounds i16, i16* %13314, i64 -14
  %13331 = bitcast i16* %13330 to <16 x i16>*
  %13332 = load <16 x i16>, <16 x i16>* %13331, align 2, !tbaa !396
  %13333 = getelementptr inbounds i16, i16* %13314, i64 -29
  %13334 = bitcast i16* %13333 to <16 x i16>*
  %13335 = load <16 x i16>, <16 x i16>* %13334, align 2, !tbaa !396
  %13336 = getelementptr inbounds i16, i16* %13314, i64 -13
  %13337 = bitcast i16* %13336 to <16 x i16>*
  %13338 = load <16 x i16>, <16 x i16>* %13337, align 2, !tbaa !396
  %13339 = getelementptr inbounds i16, i16* %13314, i64 -28
  %13340 = bitcast i16* %13339 to <16 x i16>*
  %13341 = load <16 x i16>, <16 x i16>* %13340, align 2, !tbaa !396
  %13342 = getelementptr inbounds i16, i16* %13314, i64 -12
  %13343 = bitcast i16* %13342 to <16 x i16>*
  %13344 = load <16 x i16>, <16 x i16>* %13343, align 2, !tbaa !396
  %13345 = getelementptr inbounds i16, i16* %13314, i64 -26
  %13346 = bitcast i16* %13345 to <16 x i16>*
  %13347 = load <16 x i16>, <16 x i16>* %13346, align 2, !tbaa !396
  %13348 = getelementptr inbounds i16, i16* %13314, i64 -10
  %13349 = bitcast i16* %13348 to <16 x i16>*
  %13350 = load <16 x i16>, <16 x i16>* %13349, align 2, !tbaa !396
  %13351 = getelementptr inbounds i16, i16* %13314, i64 -27
  %13352 = bitcast i16* %13351 to <16 x i16>*
  %13353 = load <16 x i16>, <16 x i16>* %13352, align 2, !tbaa !396
  %13354 = getelementptr inbounds i16, i16* %13314, i64 -11
  %13355 = bitcast i16* %13354 to <16 x i16>*
  %13356 = load <16 x i16>, <16 x i16>* %13355, align 2, !tbaa !396
  %13357 = add <16 x i16> %13323, %13317
  %13358 = add <16 x i16> %13357, %13329
  %13359 = add <16 x i16> %13358, %13335
  %13360 = add <16 x i16> %13359, %13341
  %13361 = add <16 x i16> %13360, %13347
  %13362 = add <16 x i16> %13361, %13353
  %13363 = add <16 x i16> %13326, %13320
  %13364 = add <16 x i16> %13363, %13332
  %13365 = add <16 x i16> %13364, %13338
  %13366 = add <16 x i16> %13365, %13344
  %13367 = add <16 x i16> %13366, %13350
  %13368 = add <16 x i16> %13367, %13356
  %13369 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13362, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13370 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13368, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13371 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13369, <16 x i16> %13362)
  %13372 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13370, <16 x i16> %13368)
  %13373 = shufflevector <16 x i16> %13371, <16 x i16> %13372, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13374 = lshr <32 x i16> %13373, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13375 = shufflevector <32 x i16> %13374, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13376 = zext i32 %.pre-phi3583 to i64
  %13377 = mul nsw i64 %97, %13376
  %13378 = add nsw i64 %99, %13377
  %13379 = getelementptr inbounds i16, i16* %blur_x, i64 %13378
  %13380 = getelementptr inbounds i16, i16* %13379, i64 -32
  %13381 = bitcast i16* %13380 to <16 x i16>*
  store <16 x i16> %13375, <16 x i16>* %13381, align 2, !tbaa !399
  %13382 = shufflevector <32 x i16> %13374, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13383 = getelementptr inbounds i16, i16* %13379, i64 -16
  %13384 = bitcast i16* %13383 to <16 x i16>*
  store <16 x i16> %13382, <16 x i16>* %13384, align 2, !tbaa !399
  %13385 = zext i32 %.pre-phi3595 to i64
  %13386 = mul nsw i64 %13385, %116
  %13387 = add nsw i64 %13386, %94
  %13388 = getelementptr inbounds i16, i16* %blur_x, i64 %13387
  %13389 = getelementptr inbounds i16, i16* %13388, i64 -32
  %13390 = bitcast i16* %13389 to <16 x i16>*
  %13391 = load <16 x i16>, <16 x i16>* %13390, align 2, !tbaa !399
  %13392 = getelementptr inbounds i16, i16* %13388, i64 -16
  %13393 = bitcast i16* %13392 to <16 x i16>*
  %13394 = load <16 x i16>, <16 x i16>* %13393, align 2, !tbaa !399
  %13395 = zext i32 %.pre-phi3591 to i64
  %13396 = mul nsw i64 %13395, %116
  %13397 = add nsw i64 %13396, %94
  %13398 = getelementptr inbounds i16, i16* %blur_x, i64 %13397
  %13399 = getelementptr inbounds i16, i16* %13398, i64 -32
  %13400 = bitcast i16* %13399 to <16 x i16>*
  %13401 = load <16 x i16>, <16 x i16>* %13400, align 2, !tbaa !399
  %13402 = getelementptr inbounds i16, i16* %13398, i64 -16
  %13403 = bitcast i16* %13402 to <16 x i16>*
  %13404 = load <16 x i16>, <16 x i16>* %13403, align 2, !tbaa !399
  %13405 = zext i32 %.pre-phi3599 to i64
  %13406 = mul nsw i64 %13405, %116
  %13407 = add nsw i64 %13406, %94
  %13408 = getelementptr inbounds i16, i16* %blur_x, i64 %13407
  %13409 = getelementptr inbounds i16, i16* %13408, i64 -32
  %13410 = bitcast i16* %13409 to <16 x i16>*
  %13411 = load <16 x i16>, <16 x i16>* %13410, align 2, !tbaa !399
  %13412 = getelementptr inbounds i16, i16* %13408, i64 -16
  %13413 = bitcast i16* %13412 to <16 x i16>*
  %13414 = load <16 x i16>, <16 x i16>* %13413, align 2, !tbaa !399
  %13415 = zext i32 %.pre-phi3605 to i64
  %13416 = mul nsw i64 %13415, %116
  %13417 = add nsw i64 %13416, %94
  %13418 = getelementptr inbounds i16, i16* %blur_x, i64 %13417
  %13419 = getelementptr inbounds i16, i16* %13418, i64 -32
  %13420 = bitcast i16* %13419 to <16 x i16>*
  %13421 = load <16 x i16>, <16 x i16>* %13420, align 2, !tbaa !399
  %13422 = getelementptr inbounds i16, i16* %13418, i64 -16
  %13423 = bitcast i16* %13422 to <16 x i16>*
  %13424 = load <16 x i16>, <16 x i16>* %13423, align 2, !tbaa !399
  %13425 = zext i32 %.pre-phi to i64
  %13426 = mul nsw i64 %13425, %116
  %13427 = add nsw i64 %13426, %94
  %13428 = getelementptr inbounds i16, i16* %blur_x, i64 %13427
  %13429 = getelementptr inbounds i16, i16* %13428, i64 -32
  %13430 = bitcast i16* %13429 to <16 x i16>*
  %13431 = load <16 x i16>, <16 x i16>* %13430, align 2, !tbaa !399
  %13432 = getelementptr inbounds i16, i16* %13428, i64 -16
  %13433 = bitcast i16* %13432 to <16 x i16>*
  %13434 = load <16 x i16>, <16 x i16>* %13433, align 2, !tbaa !399
  %13435 = mul nsw i64 %13376, %116
  %13436 = add nsw i64 %13435, %94
  %13437 = getelementptr inbounds i16, i16* %blur_x, i64 %13436
  %13438 = getelementptr inbounds i16, i16* %13437, i64 -32
  %13439 = bitcast i16* %13438 to <16 x i16>*
  %13440 = load <16 x i16>, <16 x i16>* %13439, align 2, !tbaa !399
  %13441 = getelementptr inbounds i16, i16* %13437, i64 -16
  %13442 = bitcast i16* %13441 to <16 x i16>*
  %13443 = load <16 x i16>, <16 x i16>* %13442, align 2, !tbaa !399
  %13444 = zext i32 %.pre-phi3579 to i64
  %13445 = mul nsw i64 %13444, %116
  %13446 = add nsw i64 %13445, %94
  %13447 = getelementptr inbounds i16, i16* %blur_x, i64 %13446
  %13448 = getelementptr inbounds i16, i16* %13447, i64 -32
  %13449 = bitcast i16* %13448 to <16 x i16>*
  %13450 = load <16 x i16>, <16 x i16>* %13449, align 2, !tbaa !399
  %13451 = getelementptr inbounds i16, i16* %13447, i64 -16
  %13452 = bitcast i16* %13451 to <16 x i16>*
  %13453 = load <16 x i16>, <16 x i16>* %13452, align 2, !tbaa !399
  %13454 = add <16 x i16> %13401, %13391
  %13455 = add <16 x i16> %13454, %13411
  %13456 = add <16 x i16> %13455, %13421
  %13457 = add <16 x i16> %13456, %13431
  %13458 = add <16 x i16> %13457, %13440
  %13459 = add <16 x i16> %13458, %13450
  %13460 = add <16 x i16> %13404, %13394
  %13461 = add <16 x i16> %13460, %13414
  %13462 = add <16 x i16> %13461, %13424
  %13463 = add <16 x i16> %13462, %13434
  %13464 = add <16 x i16> %13463, %13443
  %13465 = add <16 x i16> %13464, %13453
  %13466 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13459, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13467 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13465, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13468 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13466, <16 x i16> %13459)
  %13469 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13467, <16 x i16> %13465)
  %13470 = shufflevector <16 x i16> %13468, <16 x i16> %13469, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13471 = lshr <32 x i16> %13470, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13472 = shufflevector <32 x i16> %13471, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13473 = sext i32 %a26 to i64
  %13474 = add nsw i64 %13473, 20
  %13475 = mul nsw i64 %13474, %117
  %13476 = add nsw i64 %119, %13475
  %13477 = getelementptr inbounds i16, i16* %66, i64 %13476
  %13478 = getelementptr inbounds i16, i16* %13477, i64 -32
  %13479 = bitcast i16* %13478 to <16 x i16>*
  store <16 x i16> %13472, <16 x i16>* %13479, align 2, !tbaa !401
  %13480 = shufflevector <32 x i16> %13471, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13481 = getelementptr inbounds i16, i16* %13477, i64 -16
  %13482 = bitcast i16* %13481 to <16 x i16>*
  store <16 x i16> %13480, <16 x i16>* %13482, align 2, !tbaa !401
  br label %after_bb569

"for blur_y.s0.x.x.rebased574":                   ; preds = %"for blur_y.s0.x.x.rebased574.preheader", %"consume blur_x581"
  %indvars.iv3449 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased574.preheader" ], [ %indvars.iv.next3450, %"consume blur_x581" ]
  %13483 = add nsw i64 %indvars.iv3449, %101
  %13484 = icmp slt i64 %13483, 1
  %13485 = trunc i64 %13483 to i32
  %13486 = shl nsw i32 %13485, 5
  %13487 = icmp sgt i32 %4, %13486
  %13488 = or i1 %13484, %13487
  br i1 %13488, label %"produce blur_x580", label %"for blur_y.s0.x.x.rebased574.consume blur_x581_crit_edge"

"for blur_y.s0.x.x.rebased574.consume blur_x581_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased574"
  %.pre3644 = shl nsw i64 %13483, 5
  br label %"consume blur_x581"

"end for blur_y.s0.x.x.rebased575":               ; preds = %"consume blur_x581", %after_bb569
  br i1 %102, label %"for blur_y.s0.x.x.rebased582.preheader", label %"end for blur_y.s0.x.x.rebased583", !prof !386

"for blur_y.s0.x.x.rebased582.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased575"
  %13489 = sext i32 %t1738 to i64
  %13490 = zext i32 %.pre-phi3595 to i64
  %13491 = mul nsw i64 %13490, %116
  %13492 = sub nsw i64 %13491, %96
  %13493 = zext i32 %.pre-phi3591 to i64
  %13494 = mul nsw i64 %13493, %116
  %13495 = sub nsw i64 %13494, %96
  %13496 = zext i32 %.pre-phi3599 to i64
  %13497 = mul nsw i64 %13496, %116
  %13498 = sub nsw i64 %13497, %96
  %13499 = zext i32 %.pre-phi3605 to i64
  %13500 = mul nsw i64 %13499, %116
  %13501 = sub nsw i64 %13500, %96
  %13502 = zext i32 %.pre-phi to i64
  %13503 = mul nsw i64 %13502, %116
  %13504 = sub nsw i64 %13503, %96
  %13505 = zext i32 %.pre-phi3583 to i64
  %13506 = mul nsw i64 %13505, %116
  %13507 = sub nsw i64 %13506, %96
  %13508 = zext i32 %.pre-phi3579 to i64
  %13509 = mul nsw i64 %13508, %116
  %13510 = sub nsw i64 %13509, %96
  %13511 = sext i32 %a26 to i64
  %13512 = add nsw i64 %13511, 20
  %13513 = mul nsw i64 %13512, %117
  %13514 = add nsw i64 %13513, %120
  br label %"for blur_y.s0.x.x.rebased582"

"produce blur_x580":                              ; preds = %"for blur_y.s0.x.x.rebased574"
  %t1072 = add nsw i32 %13486, %t2081
  %13515 = sext i32 %t1072 to i64
  %13516 = getelementptr inbounds i16, i16* %read_input, i64 %13515
  %13517 = getelementptr inbounds i16, i16* %13516, i64 1
  %13518 = bitcast i16* %13517 to <16 x i16>*
  %13519 = load <16 x i16>, <16 x i16>* %13518, align 2, !tbaa !396
  %13520 = getelementptr inbounds i16, i16* %13516, i64 17
  %13521 = bitcast i16* %13520 to <16 x i16>*
  %13522 = load <16 x i16>, <16 x i16>* %13521, align 2, !tbaa !396
  %13523 = bitcast i16* %13516 to <16 x i16>*
  %13524 = load <16 x i16>, <16 x i16>* %13523, align 2, !tbaa !396
  %13525 = getelementptr inbounds i16, i16* %13516, i64 16
  %13526 = bitcast i16* %13525 to <16 x i16>*
  %13527 = load <16 x i16>, <16 x i16>* %13526, align 2, !tbaa !396
  %13528 = getelementptr inbounds i16, i16* %13516, i64 2
  %13529 = bitcast i16* %13528 to <16 x i16>*
  %13530 = load <16 x i16>, <16 x i16>* %13529, align 2, !tbaa !396
  %13531 = getelementptr inbounds i16, i16* %13516, i64 18
  %13532 = bitcast i16* %13531 to <16 x i16>*
  %13533 = load <16 x i16>, <16 x i16>* %13532, align 2, !tbaa !396
  %13534 = getelementptr inbounds i16, i16* %13516, i64 3
  %13535 = bitcast i16* %13534 to <16 x i16>*
  %13536 = load <16 x i16>, <16 x i16>* %13535, align 2, !tbaa !396
  %13537 = getelementptr inbounds i16, i16* %13516, i64 19
  %13538 = bitcast i16* %13537 to <16 x i16>*
  %13539 = load <16 x i16>, <16 x i16>* %13538, align 2, !tbaa !396
  %13540 = getelementptr inbounds i16, i16* %13516, i64 4
  %13541 = bitcast i16* %13540 to <16 x i16>*
  %13542 = load <16 x i16>, <16 x i16>* %13541, align 2, !tbaa !396
  %13543 = getelementptr inbounds i16, i16* %13516, i64 20
  %13544 = bitcast i16* %13543 to <16 x i16>*
  %13545 = load <16 x i16>, <16 x i16>* %13544, align 2, !tbaa !396
  %13546 = getelementptr inbounds i16, i16* %13516, i64 6
  %13547 = bitcast i16* %13546 to <16 x i16>*
  %13548 = load <16 x i16>, <16 x i16>* %13547, align 2, !tbaa !396
  %13549 = getelementptr inbounds i16, i16* %13516, i64 22
  %13550 = bitcast i16* %13549 to <16 x i16>*
  %13551 = load <16 x i16>, <16 x i16>* %13550, align 2, !tbaa !396
  %13552 = getelementptr inbounds i16, i16* %13516, i64 5
  %13553 = bitcast i16* %13552 to <16 x i16>*
  %13554 = load <16 x i16>, <16 x i16>* %13553, align 2, !tbaa !396
  %13555 = getelementptr inbounds i16, i16* %13516, i64 21
  %13556 = bitcast i16* %13555 to <16 x i16>*
  %13557 = load <16 x i16>, <16 x i16>* %13556, align 2, !tbaa !396
  %13558 = add <16 x i16> %13524, %13519
  %13559 = add <16 x i16> %13558, %13530
  %13560 = add <16 x i16> %13559, %13536
  %13561 = add <16 x i16> %13560, %13542
  %13562 = add <16 x i16> %13561, %13548
  %13563 = add <16 x i16> %13562, %13554
  %13564 = add <16 x i16> %13527, %13522
  %13565 = add <16 x i16> %13564, %13533
  %13566 = add <16 x i16> %13565, %13539
  %13567 = add <16 x i16> %13566, %13545
  %13568 = add <16 x i16> %13567, %13551
  %13569 = add <16 x i16> %13568, %13557
  %13570 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13563, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13571 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13569, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13572 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13570, <16 x i16> %13563)
  %13573 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13571, <16 x i16> %13569)
  %13574 = shufflevector <16 x i16> %13572, <16 x i16> %13573, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13575 = lshr <32 x i16> %13574, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13576 = shufflevector <32 x i16> %13575, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13577 = shl nsw i64 %13483, 5
  %13578 = add nsw i64 %13577, %13288
  %13579 = getelementptr inbounds i16, i16* %blur_x, i64 %13578
  %13580 = bitcast i16* %13579 to <16 x i16>*
  store <16 x i16> %13576, <16 x i16>* %13580, align 2, !tbaa !399
  %13581 = shufflevector <32 x i16> %13575, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13582 = getelementptr inbounds i16, i16* %13579, i64 16
  %13583 = bitcast i16* %13582 to <16 x i16>*
  store <16 x i16> %13581, <16 x i16>* %13583, align 2, !tbaa !399
  br label %"consume blur_x581"

"consume blur_x581":                              ; preds = %"for blur_y.s0.x.x.rebased574.consume blur_x581_crit_edge", %"produce blur_x580"
  %.pre-phi3645 = phi i64 [ %.pre3644, %"for blur_y.s0.x.x.rebased574.consume blur_x581_crit_edge" ], [ %13577, %"produce blur_x580" ]
  %13584 = add nsw i64 %13291, %.pre-phi3645
  %13585 = getelementptr inbounds i16, i16* %blur_x, i64 %13584
  %13586 = bitcast i16* %13585 to <16 x i16>*
  %13587 = load <16 x i16>, <16 x i16>* %13586, align 2, !tbaa !399
  %13588 = getelementptr inbounds i16, i16* %13585, i64 16
  %13589 = bitcast i16* %13588 to <16 x i16>*
  %13590 = load <16 x i16>, <16 x i16>* %13589, align 2, !tbaa !399
  %13591 = add nsw i64 %13294, %.pre-phi3645
  %13592 = getelementptr inbounds i16, i16* %blur_x, i64 %13591
  %13593 = bitcast i16* %13592 to <16 x i16>*
  %13594 = load <16 x i16>, <16 x i16>* %13593, align 2, !tbaa !399
  %13595 = getelementptr inbounds i16, i16* %13592, i64 16
  %13596 = bitcast i16* %13595 to <16 x i16>*
  %13597 = load <16 x i16>, <16 x i16>* %13596, align 2, !tbaa !399
  %13598 = add nsw i64 %13297, %.pre-phi3645
  %13599 = getelementptr inbounds i16, i16* %blur_x, i64 %13598
  %13600 = bitcast i16* %13599 to <16 x i16>*
  %13601 = load <16 x i16>, <16 x i16>* %13600, align 2, !tbaa !399
  %13602 = getelementptr inbounds i16, i16* %13599, i64 16
  %13603 = bitcast i16* %13602 to <16 x i16>*
  %13604 = load <16 x i16>, <16 x i16>* %13603, align 2, !tbaa !399
  %13605 = add nsw i64 %13300, %.pre-phi3645
  %13606 = getelementptr inbounds i16, i16* %blur_x, i64 %13605
  %13607 = bitcast i16* %13606 to <16 x i16>*
  %13608 = load <16 x i16>, <16 x i16>* %13607, align 2, !tbaa !399
  %13609 = getelementptr inbounds i16, i16* %13606, i64 16
  %13610 = bitcast i16* %13609 to <16 x i16>*
  %13611 = load <16 x i16>, <16 x i16>* %13610, align 2, !tbaa !399
  %13612 = add nsw i64 %13303, %.pre-phi3645
  %13613 = getelementptr inbounds i16, i16* %blur_x, i64 %13612
  %13614 = bitcast i16* %13613 to <16 x i16>*
  %13615 = load <16 x i16>, <16 x i16>* %13614, align 2, !tbaa !399
  %13616 = getelementptr inbounds i16, i16* %13613, i64 16
  %13617 = bitcast i16* %13616 to <16 x i16>*
  %13618 = load <16 x i16>, <16 x i16>* %13617, align 2, !tbaa !399
  %13619 = add nsw i64 %13306, %.pre-phi3645
  %13620 = getelementptr inbounds i16, i16* %blur_x, i64 %13619
  %13621 = bitcast i16* %13620 to <16 x i16>*
  %13622 = load <16 x i16>, <16 x i16>* %13621, align 2, !tbaa !399
  %13623 = getelementptr inbounds i16, i16* %13620, i64 16
  %13624 = bitcast i16* %13623 to <16 x i16>*
  %13625 = load <16 x i16>, <16 x i16>* %13624, align 2, !tbaa !399
  %13626 = add nsw i64 %13309, %.pre-phi3645
  %13627 = getelementptr inbounds i16, i16* %blur_x, i64 %13626
  %13628 = bitcast i16* %13627 to <16 x i16>*
  %13629 = load <16 x i16>, <16 x i16>* %13628, align 2, !tbaa !399
  %13630 = getelementptr inbounds i16, i16* %13627, i64 16
  %13631 = bitcast i16* %13630 to <16 x i16>*
  %13632 = load <16 x i16>, <16 x i16>* %13631, align 2, !tbaa !399
  %13633 = add <16 x i16> %13594, %13587
  %13634 = add <16 x i16> %13633, %13601
  %13635 = add <16 x i16> %13634, %13608
  %13636 = add <16 x i16> %13635, %13615
  %13637 = add <16 x i16> %13636, %13622
  %13638 = add <16 x i16> %13637, %13629
  %13639 = add <16 x i16> %13597, %13590
  %13640 = add <16 x i16> %13639, %13604
  %13641 = add <16 x i16> %13640, %13611
  %13642 = add <16 x i16> %13641, %13618
  %13643 = add <16 x i16> %13642, %13625
  %13644 = add <16 x i16> %13643, %13632
  %13645 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13638, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13646 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13644, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13647 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13645, <16 x i16> %13638)
  %13648 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13646, <16 x i16> %13644)
  %13649 = shufflevector <16 x i16> %13647, <16 x i16> %13648, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13650 = lshr <32 x i16> %13649, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13651 = shufflevector <32 x i16> %13650, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13652 = add nsw i64 %13313, %.pre-phi3645
  %13653 = getelementptr inbounds i16, i16* %66, i64 %13652
  %13654 = bitcast i16* %13653 to <16 x i16>*
  store <16 x i16> %13651, <16 x i16>* %13654, align 2, !tbaa !401
  %13655 = shufflevector <32 x i16> %13650, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13656 = getelementptr inbounds i16, i16* %13653, i64 16
  %13657 = bitcast i16* %13656 to <16 x i16>*
  store <16 x i16> %13655, <16 x i16>* %13657, align 2, !tbaa !401
  %indvars.iv.next3450 = add nuw nsw i64 %indvars.iv3449, 1
  %.not2831 = icmp eq i64 %indvars.iv.next3450, %188
  br i1 %.not2831, label %"end for blur_y.s0.x.x.rebased575", label %"for blur_y.s0.x.x.rebased574"

"for blur_y.s0.x.x.rebased582":                   ; preds = %"for blur_y.s0.x.x.rebased582.preheader", %"consume blur_x590"
  %blur_y.s0.x.x.rebased584 = phi i32 [ %13808, %"consume blur_x590" ], [ 0, %"for blur_y.s0.x.x.rebased582.preheader" ]
  %13658 = add nsw i32 %blur_y.s0.x.x.rebased584, %t1670
  %a259 = shl nsw i32 %13658, 5
  %13659 = icmp sgt i32 %a14, %a259
  %b265 = select i1 %13659, i32 %a259, i32 %a14
  %13660 = icmp slt i32 %13658, 1
  %13661 = icmp sgt i32 %4, %a259
  %13662 = or i1 %13660, %13661
  br i1 %13662, label %"produce blur_x588", label %"consume blur_x590"

"end for blur_y.s0.x.x.rebased583":               ; preds = %"consume blur_x590", %"end for blur_y.s0.x.x.rebased575"
  br i1 %34, label %"produce blur_x594", label %after_bb591

"produce blur_x588":                              ; preds = %"for blur_y.s0.x.x.rebased582"
  %13663 = icmp slt i32 %b265, %4
  %blur_x.s0.x.v1.base.s589 = select i1 %13663, i32 %b265, i32 %4
  %t1077 = add nsw i32 %blur_x.s0.x.v1.base.s589, %t2081
  %13664 = sext i32 %t1077 to i64
  %13665 = getelementptr inbounds i16, i16* %read_input, i64 %13664
  %13666 = getelementptr inbounds i16, i16* %13665, i64 1
  %13667 = bitcast i16* %13666 to <16 x i16>*
  %13668 = load <16 x i16>, <16 x i16>* %13667, align 2, !tbaa !396
  %13669 = getelementptr inbounds i16, i16* %13665, i64 17
  %13670 = bitcast i16* %13669 to <16 x i16>*
  %13671 = load <16 x i16>, <16 x i16>* %13670, align 2, !tbaa !396
  %13672 = bitcast i16* %13665 to <16 x i16>*
  %13673 = load <16 x i16>, <16 x i16>* %13672, align 2, !tbaa !396
  %13674 = getelementptr inbounds i16, i16* %13665, i64 16
  %13675 = bitcast i16* %13674 to <16 x i16>*
  %13676 = load <16 x i16>, <16 x i16>* %13675, align 2, !tbaa !396
  %13677 = getelementptr inbounds i16, i16* %13665, i64 2
  %13678 = bitcast i16* %13677 to <16 x i16>*
  %13679 = load <16 x i16>, <16 x i16>* %13678, align 2, !tbaa !396
  %13680 = getelementptr inbounds i16, i16* %13665, i64 18
  %13681 = bitcast i16* %13680 to <16 x i16>*
  %13682 = load <16 x i16>, <16 x i16>* %13681, align 2, !tbaa !396
  %13683 = getelementptr inbounds i16, i16* %13665, i64 3
  %13684 = bitcast i16* %13683 to <16 x i16>*
  %13685 = load <16 x i16>, <16 x i16>* %13684, align 2, !tbaa !396
  %13686 = getelementptr inbounds i16, i16* %13665, i64 19
  %13687 = bitcast i16* %13686 to <16 x i16>*
  %13688 = load <16 x i16>, <16 x i16>* %13687, align 2, !tbaa !396
  %13689 = getelementptr inbounds i16, i16* %13665, i64 4
  %13690 = bitcast i16* %13689 to <16 x i16>*
  %13691 = load <16 x i16>, <16 x i16>* %13690, align 2, !tbaa !396
  %13692 = getelementptr inbounds i16, i16* %13665, i64 20
  %13693 = bitcast i16* %13692 to <16 x i16>*
  %13694 = load <16 x i16>, <16 x i16>* %13693, align 2, !tbaa !396
  %13695 = getelementptr inbounds i16, i16* %13665, i64 6
  %13696 = bitcast i16* %13695 to <16 x i16>*
  %13697 = load <16 x i16>, <16 x i16>* %13696, align 2, !tbaa !396
  %13698 = getelementptr inbounds i16, i16* %13665, i64 22
  %13699 = bitcast i16* %13698 to <16 x i16>*
  %13700 = load <16 x i16>, <16 x i16>* %13699, align 2, !tbaa !396
  %13701 = getelementptr inbounds i16, i16* %13665, i64 5
  %13702 = bitcast i16* %13701 to <16 x i16>*
  %13703 = load <16 x i16>, <16 x i16>* %13702, align 2, !tbaa !396
  %13704 = getelementptr inbounds i16, i16* %13665, i64 21
  %13705 = bitcast i16* %13704 to <16 x i16>*
  %13706 = load <16 x i16>, <16 x i16>* %13705, align 2, !tbaa !396
  %13707 = add <16 x i16> %13673, %13668
  %13708 = add <16 x i16> %13707, %13679
  %13709 = add <16 x i16> %13708, %13685
  %13710 = add <16 x i16> %13709, %13691
  %13711 = add <16 x i16> %13710, %13697
  %13712 = add <16 x i16> %13711, %13703
  %13713 = add <16 x i16> %13676, %13671
  %13714 = add <16 x i16> %13713, %13682
  %13715 = add <16 x i16> %13714, %13688
  %13716 = add <16 x i16> %13715, %13694
  %13717 = add <16 x i16> %13716, %13700
  %13718 = add <16 x i16> %13717, %13706
  %13719 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13712, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13720 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13718, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13721 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13719, <16 x i16> %13712)
  %13722 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13720, <16 x i16> %13718)
  %13723 = shufflevector <16 x i16> %13721, <16 x i16> %13722, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13724 = lshr <32 x i16> %13723, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13725 = shufflevector <32 x i16> %13724, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13726 = sext i32 %blur_x.s0.x.v1.base.s589 to i64
  %13727 = add nsw i64 %13726, %13489
  %13728 = getelementptr inbounds i16, i16* %blur_x, i64 %13727
  %13729 = bitcast i16* %13728 to <16 x i16>*
  store <16 x i16> %13725, <16 x i16>* %13729, align 2, !tbaa !399
  %13730 = shufflevector <32 x i16> %13724, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13731 = getelementptr inbounds i16, i16* %13728, i64 16
  %13732 = bitcast i16* %13731 to <16 x i16>*
  store <16 x i16> %13730, <16 x i16>* %13732, align 2, !tbaa !399
  br label %"consume blur_x590"

"consume blur_x590":                              ; preds = %"for blur_y.s0.x.x.rebased582", %"produce blur_x588"
  %13733 = sext i32 %b265 to i64
  %13734 = add nsw i64 %13492, %13733
  %13735 = getelementptr inbounds i16, i16* %blur_x, i64 %13734
  %13736 = bitcast i16* %13735 to <16 x i16>*
  %13737 = load <16 x i16>, <16 x i16>* %13736, align 2, !tbaa !399
  %13738 = getelementptr inbounds i16, i16* %13735, i64 16
  %13739 = bitcast i16* %13738 to <16 x i16>*
  %13740 = load <16 x i16>, <16 x i16>* %13739, align 2, !tbaa !399
  %13741 = add nsw i64 %13495, %13733
  %13742 = getelementptr inbounds i16, i16* %blur_x, i64 %13741
  %13743 = bitcast i16* %13742 to <16 x i16>*
  %13744 = load <16 x i16>, <16 x i16>* %13743, align 2, !tbaa !399
  %13745 = getelementptr inbounds i16, i16* %13742, i64 16
  %13746 = bitcast i16* %13745 to <16 x i16>*
  %13747 = load <16 x i16>, <16 x i16>* %13746, align 2, !tbaa !399
  %13748 = add nsw i64 %13498, %13733
  %13749 = getelementptr inbounds i16, i16* %blur_x, i64 %13748
  %13750 = bitcast i16* %13749 to <16 x i16>*
  %13751 = load <16 x i16>, <16 x i16>* %13750, align 2, !tbaa !399
  %13752 = getelementptr inbounds i16, i16* %13749, i64 16
  %13753 = bitcast i16* %13752 to <16 x i16>*
  %13754 = load <16 x i16>, <16 x i16>* %13753, align 2, !tbaa !399
  %13755 = add nsw i64 %13501, %13733
  %13756 = getelementptr inbounds i16, i16* %blur_x, i64 %13755
  %13757 = bitcast i16* %13756 to <16 x i16>*
  %13758 = load <16 x i16>, <16 x i16>* %13757, align 2, !tbaa !399
  %13759 = getelementptr inbounds i16, i16* %13756, i64 16
  %13760 = bitcast i16* %13759 to <16 x i16>*
  %13761 = load <16 x i16>, <16 x i16>* %13760, align 2, !tbaa !399
  %13762 = add nsw i64 %13504, %13733
  %13763 = getelementptr inbounds i16, i16* %blur_x, i64 %13762
  %13764 = bitcast i16* %13763 to <16 x i16>*
  %13765 = load <16 x i16>, <16 x i16>* %13764, align 2, !tbaa !399
  %13766 = getelementptr inbounds i16, i16* %13763, i64 16
  %13767 = bitcast i16* %13766 to <16 x i16>*
  %13768 = load <16 x i16>, <16 x i16>* %13767, align 2, !tbaa !399
  %13769 = add nsw i64 %13507, %13733
  %13770 = getelementptr inbounds i16, i16* %blur_x, i64 %13769
  %13771 = bitcast i16* %13770 to <16 x i16>*
  %13772 = load <16 x i16>, <16 x i16>* %13771, align 2, !tbaa !399
  %13773 = getelementptr inbounds i16, i16* %13770, i64 16
  %13774 = bitcast i16* %13773 to <16 x i16>*
  %13775 = load <16 x i16>, <16 x i16>* %13774, align 2, !tbaa !399
  %13776 = add nsw i64 %13510, %13733
  %13777 = getelementptr inbounds i16, i16* %blur_x, i64 %13776
  %13778 = bitcast i16* %13777 to <16 x i16>*
  %13779 = load <16 x i16>, <16 x i16>* %13778, align 2, !tbaa !399
  %13780 = getelementptr inbounds i16, i16* %13777, i64 16
  %13781 = bitcast i16* %13780 to <16 x i16>*
  %13782 = load <16 x i16>, <16 x i16>* %13781, align 2, !tbaa !399
  %13783 = add <16 x i16> %13744, %13737
  %13784 = add <16 x i16> %13783, %13751
  %13785 = add <16 x i16> %13784, %13758
  %13786 = add <16 x i16> %13785, %13765
  %13787 = add <16 x i16> %13786, %13772
  %13788 = add <16 x i16> %13787, %13779
  %13789 = add <16 x i16> %13747, %13740
  %13790 = add <16 x i16> %13789, %13754
  %13791 = add <16 x i16> %13790, %13761
  %13792 = add <16 x i16> %13791, %13768
  %13793 = add <16 x i16> %13792, %13775
  %13794 = add <16 x i16> %13793, %13782
  %13795 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13788, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13796 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13794, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13797 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13795, <16 x i16> %13788)
  %13798 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13796, <16 x i16> %13794)
  %13799 = shufflevector <16 x i16> %13797, <16 x i16> %13798, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13800 = lshr <32 x i16> %13799, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13801 = shufflevector <32 x i16> %13800, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13802 = add nsw i64 %13514, %13733
  %13803 = getelementptr inbounds i16, i16* %66, i64 %13802
  %13804 = bitcast i16* %13803 to <16 x i16>*
  store <16 x i16> %13801, <16 x i16>* %13804, align 2, !tbaa !401
  %13805 = shufflevector <32 x i16> %13800, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13806 = getelementptr inbounds i16, i16* %13803, i64 16
  %13807 = bitcast i16* %13806 to <16 x i16>*
  store <16 x i16> %13805, <16 x i16>* %13807, align 2, !tbaa !401
  %13808 = add nuw nsw i32 %blur_y.s0.x.x.rebased584, 1
  %.not2830 = icmp eq i32 %13808, %t1727
  br i1 %.not2830, label %"end for blur_y.s0.x.x.rebased583", label %"for blur_y.s0.x.x.rebased582"

after_bb591:                                      ; preds = %"end for blur_y.s0.x.x.rebased583", %"produce blur_x594"
  br i1 %100, label %"for blur_y.s0.x.x.rebased596.preheader", label %"end for blur_y.s0.x.x.rebased597", !prof !386

"for blur_y.s0.x.x.rebased596.preheader":         ; preds = %after_bb591
  %13809 = sext i32 %t1744 to i64
  %13810 = zext i32 %.pre-phi3599 to i64
  %13811 = mul nsw i64 %13810, %116
  %13812 = sub nsw i64 %13811, %96
  %13813 = zext i32 %.pre-phi3595 to i64
  %13814 = mul nsw i64 %13813, %116
  %13815 = sub nsw i64 %13814, %96
  %13816 = zext i32 %.pre-phi3605 to i64
  %13817 = mul nsw i64 %13816, %116
  %13818 = sub nsw i64 %13817, %96
  %13819 = zext i32 %.pre-phi to i64
  %13820 = mul nsw i64 %13819, %116
  %13821 = sub nsw i64 %13820, %96
  %13822 = zext i32 %.pre-phi3579 to i64
  %13823 = mul nsw i64 %13822, %116
  %13824 = sub nsw i64 %13823, %96
  %13825 = zext i32 %.pre-phi3587 to i64
  %13826 = mul nsw i64 %13825, %116
  %13827 = sub nsw i64 %13826, %96
  %13828 = zext i32 %.pre-phi3583 to i64
  %13829 = mul nsw i64 %13828, %116
  %13830 = sub nsw i64 %13829, %96
  %13831 = sext i32 %a26 to i64
  %13832 = add nsw i64 %13831, 21
  %13833 = mul nsw i64 %13832, %117
  %13834 = add nsw i64 %13833, %120
  br label %"for blur_y.s0.x.x.rebased596"

"produce blur_x594":                              ; preds = %"end for blur_y.s0.x.x.rebased583"
  %13835 = getelementptr inbounds i16, i16* %read_input, i64 %161
  %13836 = getelementptr inbounds i16, i16* %13835, i64 -31
  %13837 = bitcast i16* %13836 to <16 x i16>*
  %13838 = load <16 x i16>, <16 x i16>* %13837, align 2, !tbaa !396
  %13839 = getelementptr inbounds i16, i16* %13835, i64 -15
  %13840 = bitcast i16* %13839 to <16 x i16>*
  %13841 = load <16 x i16>, <16 x i16>* %13840, align 2, !tbaa !396
  %13842 = getelementptr inbounds i16, i16* %13835, i64 -32
  %13843 = bitcast i16* %13842 to <16 x i16>*
  %13844 = load <16 x i16>, <16 x i16>* %13843, align 2, !tbaa !396
  %13845 = getelementptr inbounds i16, i16* %13835, i64 -16
  %13846 = bitcast i16* %13845 to <16 x i16>*
  %13847 = load <16 x i16>, <16 x i16>* %13846, align 2, !tbaa !396
  %13848 = getelementptr inbounds i16, i16* %13835, i64 -30
  %13849 = bitcast i16* %13848 to <16 x i16>*
  %13850 = load <16 x i16>, <16 x i16>* %13849, align 2, !tbaa !396
  %13851 = getelementptr inbounds i16, i16* %13835, i64 -14
  %13852 = bitcast i16* %13851 to <16 x i16>*
  %13853 = load <16 x i16>, <16 x i16>* %13852, align 2, !tbaa !396
  %13854 = getelementptr inbounds i16, i16* %13835, i64 -29
  %13855 = bitcast i16* %13854 to <16 x i16>*
  %13856 = load <16 x i16>, <16 x i16>* %13855, align 2, !tbaa !396
  %13857 = getelementptr inbounds i16, i16* %13835, i64 -13
  %13858 = bitcast i16* %13857 to <16 x i16>*
  %13859 = load <16 x i16>, <16 x i16>* %13858, align 2, !tbaa !396
  %13860 = getelementptr inbounds i16, i16* %13835, i64 -28
  %13861 = bitcast i16* %13860 to <16 x i16>*
  %13862 = load <16 x i16>, <16 x i16>* %13861, align 2, !tbaa !396
  %13863 = getelementptr inbounds i16, i16* %13835, i64 -12
  %13864 = bitcast i16* %13863 to <16 x i16>*
  %13865 = load <16 x i16>, <16 x i16>* %13864, align 2, !tbaa !396
  %13866 = getelementptr inbounds i16, i16* %13835, i64 -26
  %13867 = bitcast i16* %13866 to <16 x i16>*
  %13868 = load <16 x i16>, <16 x i16>* %13867, align 2, !tbaa !396
  %13869 = getelementptr inbounds i16, i16* %13835, i64 -10
  %13870 = bitcast i16* %13869 to <16 x i16>*
  %13871 = load <16 x i16>, <16 x i16>* %13870, align 2, !tbaa !396
  %13872 = getelementptr inbounds i16, i16* %13835, i64 -27
  %13873 = bitcast i16* %13872 to <16 x i16>*
  %13874 = load <16 x i16>, <16 x i16>* %13873, align 2, !tbaa !396
  %13875 = getelementptr inbounds i16, i16* %13835, i64 -11
  %13876 = bitcast i16* %13875 to <16 x i16>*
  %13877 = load <16 x i16>, <16 x i16>* %13876, align 2, !tbaa !396
  %13878 = add <16 x i16> %13844, %13838
  %13879 = add <16 x i16> %13878, %13850
  %13880 = add <16 x i16> %13879, %13856
  %13881 = add <16 x i16> %13880, %13862
  %13882 = add <16 x i16> %13881, %13868
  %13883 = add <16 x i16> %13882, %13874
  %13884 = add <16 x i16> %13847, %13841
  %13885 = add <16 x i16> %13884, %13853
  %13886 = add <16 x i16> %13885, %13859
  %13887 = add <16 x i16> %13886, %13865
  %13888 = add <16 x i16> %13887, %13871
  %13889 = add <16 x i16> %13888, %13877
  %13890 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13883, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13891 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13889, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13892 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13890, <16 x i16> %13883)
  %13893 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13891, <16 x i16> %13889)
  %13894 = shufflevector <16 x i16> %13892, <16 x i16> %13893, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13895 = lshr <32 x i16> %13894, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13896 = shufflevector <32 x i16> %13895, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13897 = zext i32 %.pre-phi3587 to i64
  %13898 = mul nsw i64 %97, %13897
  %13899 = add nsw i64 %99, %13898
  %13900 = getelementptr inbounds i16, i16* %blur_x, i64 %13899
  %13901 = getelementptr inbounds i16, i16* %13900, i64 -32
  %13902 = bitcast i16* %13901 to <16 x i16>*
  store <16 x i16> %13896, <16 x i16>* %13902, align 2, !tbaa !399
  %13903 = shufflevector <32 x i16> %13895, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13904 = getelementptr inbounds i16, i16* %13900, i64 -16
  %13905 = bitcast i16* %13904 to <16 x i16>*
  store <16 x i16> %13903, <16 x i16>* %13905, align 2, !tbaa !399
  %13906 = zext i32 %.pre-phi3599 to i64
  %13907 = mul nsw i64 %13906, %116
  %13908 = add nsw i64 %13907, %94
  %13909 = getelementptr inbounds i16, i16* %blur_x, i64 %13908
  %13910 = getelementptr inbounds i16, i16* %13909, i64 -32
  %13911 = bitcast i16* %13910 to <16 x i16>*
  %13912 = load <16 x i16>, <16 x i16>* %13911, align 2, !tbaa !399
  %13913 = getelementptr inbounds i16, i16* %13909, i64 -16
  %13914 = bitcast i16* %13913 to <16 x i16>*
  %13915 = load <16 x i16>, <16 x i16>* %13914, align 2, !tbaa !399
  %13916 = zext i32 %.pre-phi3595 to i64
  %13917 = mul nsw i64 %13916, %116
  %13918 = add nsw i64 %13917, %94
  %13919 = getelementptr inbounds i16, i16* %blur_x, i64 %13918
  %13920 = getelementptr inbounds i16, i16* %13919, i64 -32
  %13921 = bitcast i16* %13920 to <16 x i16>*
  %13922 = load <16 x i16>, <16 x i16>* %13921, align 2, !tbaa !399
  %13923 = getelementptr inbounds i16, i16* %13919, i64 -16
  %13924 = bitcast i16* %13923 to <16 x i16>*
  %13925 = load <16 x i16>, <16 x i16>* %13924, align 2, !tbaa !399
  %13926 = zext i32 %.pre-phi3605 to i64
  %13927 = mul nsw i64 %13926, %116
  %13928 = add nsw i64 %13927, %94
  %13929 = getelementptr inbounds i16, i16* %blur_x, i64 %13928
  %13930 = getelementptr inbounds i16, i16* %13929, i64 -32
  %13931 = bitcast i16* %13930 to <16 x i16>*
  %13932 = load <16 x i16>, <16 x i16>* %13931, align 2, !tbaa !399
  %13933 = getelementptr inbounds i16, i16* %13929, i64 -16
  %13934 = bitcast i16* %13933 to <16 x i16>*
  %13935 = load <16 x i16>, <16 x i16>* %13934, align 2, !tbaa !399
  %13936 = zext i32 %.pre-phi to i64
  %13937 = mul nsw i64 %13936, %116
  %13938 = add nsw i64 %13937, %94
  %13939 = getelementptr inbounds i16, i16* %blur_x, i64 %13938
  %13940 = getelementptr inbounds i16, i16* %13939, i64 -32
  %13941 = bitcast i16* %13940 to <16 x i16>*
  %13942 = load <16 x i16>, <16 x i16>* %13941, align 2, !tbaa !399
  %13943 = getelementptr inbounds i16, i16* %13939, i64 -16
  %13944 = bitcast i16* %13943 to <16 x i16>*
  %13945 = load <16 x i16>, <16 x i16>* %13944, align 2, !tbaa !399
  %13946 = zext i32 %.pre-phi3579 to i64
  %13947 = mul nsw i64 %13946, %116
  %13948 = add nsw i64 %13947, %94
  %13949 = getelementptr inbounds i16, i16* %blur_x, i64 %13948
  %13950 = getelementptr inbounds i16, i16* %13949, i64 -32
  %13951 = bitcast i16* %13950 to <16 x i16>*
  %13952 = load <16 x i16>, <16 x i16>* %13951, align 2, !tbaa !399
  %13953 = getelementptr inbounds i16, i16* %13949, i64 -16
  %13954 = bitcast i16* %13953 to <16 x i16>*
  %13955 = load <16 x i16>, <16 x i16>* %13954, align 2, !tbaa !399
  %13956 = mul nsw i64 %13897, %116
  %13957 = add nsw i64 %13956, %94
  %13958 = getelementptr inbounds i16, i16* %blur_x, i64 %13957
  %13959 = getelementptr inbounds i16, i16* %13958, i64 -32
  %13960 = bitcast i16* %13959 to <16 x i16>*
  %13961 = load <16 x i16>, <16 x i16>* %13960, align 2, !tbaa !399
  %13962 = getelementptr inbounds i16, i16* %13958, i64 -16
  %13963 = bitcast i16* %13962 to <16 x i16>*
  %13964 = load <16 x i16>, <16 x i16>* %13963, align 2, !tbaa !399
  %13965 = zext i32 %.pre-phi3583 to i64
  %13966 = mul nsw i64 %13965, %116
  %13967 = add nsw i64 %13966, %94
  %13968 = getelementptr inbounds i16, i16* %blur_x, i64 %13967
  %13969 = getelementptr inbounds i16, i16* %13968, i64 -32
  %13970 = bitcast i16* %13969 to <16 x i16>*
  %13971 = load <16 x i16>, <16 x i16>* %13970, align 2, !tbaa !399
  %13972 = getelementptr inbounds i16, i16* %13968, i64 -16
  %13973 = bitcast i16* %13972 to <16 x i16>*
  %13974 = load <16 x i16>, <16 x i16>* %13973, align 2, !tbaa !399
  %13975 = add <16 x i16> %13922, %13912
  %13976 = add <16 x i16> %13975, %13932
  %13977 = add <16 x i16> %13976, %13942
  %13978 = add <16 x i16> %13977, %13952
  %13979 = add <16 x i16> %13978, %13961
  %13980 = add <16 x i16> %13979, %13971
  %13981 = add <16 x i16> %13925, %13915
  %13982 = add <16 x i16> %13981, %13935
  %13983 = add <16 x i16> %13982, %13945
  %13984 = add <16 x i16> %13983, %13955
  %13985 = add <16 x i16> %13984, %13964
  %13986 = add <16 x i16> %13985, %13974
  %13987 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13980, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13988 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13986, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13989 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13987, <16 x i16> %13980)
  %13990 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13988, <16 x i16> %13986)
  %13991 = shufflevector <16 x i16> %13989, <16 x i16> %13990, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13992 = lshr <32 x i16> %13991, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13993 = shufflevector <32 x i16> %13992, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13994 = sext i32 %a26 to i64
  %13995 = add nsw i64 %13994, 21
  %13996 = mul nsw i64 %13995, %117
  %13997 = add nsw i64 %119, %13996
  %13998 = getelementptr inbounds i16, i16* %66, i64 %13997
  %13999 = getelementptr inbounds i16, i16* %13998, i64 -32
  %14000 = bitcast i16* %13999 to <16 x i16>*
  store <16 x i16> %13993, <16 x i16>* %14000, align 2, !tbaa !401
  %14001 = shufflevector <32 x i16> %13992, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14002 = getelementptr inbounds i16, i16* %13998, i64 -16
  %14003 = bitcast i16* %14002 to <16 x i16>*
  store <16 x i16> %14001, <16 x i16>* %14003, align 2, !tbaa !401
  br label %after_bb591

"for blur_y.s0.x.x.rebased596":                   ; preds = %"for blur_y.s0.x.x.rebased596.preheader", %"consume blur_x603"
  %indvars.iv3452 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased596.preheader" ], [ %indvars.iv.next3453, %"consume blur_x603" ]
  %14004 = add nsw i64 %indvars.iv3452, %101
  %14005 = icmp slt i64 %14004, 1
  %14006 = trunc i64 %14004 to i32
  %14007 = shl nsw i32 %14006, 5
  %14008 = icmp sgt i32 %4, %14007
  %14009 = or i1 %14005, %14008
  br i1 %14009, label %"produce blur_x602", label %"for blur_y.s0.x.x.rebased596.consume blur_x603_crit_edge"

"for blur_y.s0.x.x.rebased596.consume blur_x603_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased596"
  %.pre3646 = shl nsw i64 %14004, 5
  br label %"consume blur_x603"

"end for blur_y.s0.x.x.rebased597":               ; preds = %"consume blur_x603", %after_bb591
  br i1 %102, label %"for blur_y.s0.x.x.rebased604.preheader", label %"end for blur_y.s0.x.x.rebased605", !prof !386

"for blur_y.s0.x.x.rebased604.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased597"
  %14010 = sext i32 %t1744 to i64
  %14011 = zext i32 %.pre-phi3599 to i64
  %14012 = mul nsw i64 %14011, %116
  %14013 = sub nsw i64 %14012, %96
  %14014 = zext i32 %.pre-phi3595 to i64
  %14015 = mul nsw i64 %14014, %116
  %14016 = sub nsw i64 %14015, %96
  %14017 = zext i32 %.pre-phi3605 to i64
  %14018 = mul nsw i64 %14017, %116
  %14019 = sub nsw i64 %14018, %96
  %14020 = zext i32 %.pre-phi to i64
  %14021 = mul nsw i64 %14020, %116
  %14022 = sub nsw i64 %14021, %96
  %14023 = zext i32 %.pre-phi3579 to i64
  %14024 = mul nsw i64 %14023, %116
  %14025 = sub nsw i64 %14024, %96
  %14026 = zext i32 %.pre-phi3587 to i64
  %14027 = mul nsw i64 %14026, %116
  %14028 = sub nsw i64 %14027, %96
  %14029 = zext i32 %.pre-phi3583 to i64
  %14030 = mul nsw i64 %14029, %116
  %14031 = sub nsw i64 %14030, %96
  %14032 = sext i32 %a26 to i64
  %14033 = add nsw i64 %14032, 21
  %14034 = mul nsw i64 %14033, %117
  %14035 = add nsw i64 %14034, %120
  br label %"for blur_y.s0.x.x.rebased604"

"produce blur_x602":                              ; preds = %"for blur_y.s0.x.x.rebased596"
  %t1088 = add nsw i32 %14007, %t2097
  %14036 = sext i32 %t1088 to i64
  %14037 = getelementptr inbounds i16, i16* %read_input, i64 %14036
  %14038 = getelementptr inbounds i16, i16* %14037, i64 1
  %14039 = bitcast i16* %14038 to <16 x i16>*
  %14040 = load <16 x i16>, <16 x i16>* %14039, align 2, !tbaa !396
  %14041 = getelementptr inbounds i16, i16* %14037, i64 17
  %14042 = bitcast i16* %14041 to <16 x i16>*
  %14043 = load <16 x i16>, <16 x i16>* %14042, align 2, !tbaa !396
  %14044 = bitcast i16* %14037 to <16 x i16>*
  %14045 = load <16 x i16>, <16 x i16>* %14044, align 2, !tbaa !396
  %14046 = getelementptr inbounds i16, i16* %14037, i64 16
  %14047 = bitcast i16* %14046 to <16 x i16>*
  %14048 = load <16 x i16>, <16 x i16>* %14047, align 2, !tbaa !396
  %14049 = getelementptr inbounds i16, i16* %14037, i64 2
  %14050 = bitcast i16* %14049 to <16 x i16>*
  %14051 = load <16 x i16>, <16 x i16>* %14050, align 2, !tbaa !396
  %14052 = getelementptr inbounds i16, i16* %14037, i64 18
  %14053 = bitcast i16* %14052 to <16 x i16>*
  %14054 = load <16 x i16>, <16 x i16>* %14053, align 2, !tbaa !396
  %14055 = getelementptr inbounds i16, i16* %14037, i64 3
  %14056 = bitcast i16* %14055 to <16 x i16>*
  %14057 = load <16 x i16>, <16 x i16>* %14056, align 2, !tbaa !396
  %14058 = getelementptr inbounds i16, i16* %14037, i64 19
  %14059 = bitcast i16* %14058 to <16 x i16>*
  %14060 = load <16 x i16>, <16 x i16>* %14059, align 2, !tbaa !396
  %14061 = getelementptr inbounds i16, i16* %14037, i64 4
  %14062 = bitcast i16* %14061 to <16 x i16>*
  %14063 = load <16 x i16>, <16 x i16>* %14062, align 2, !tbaa !396
  %14064 = getelementptr inbounds i16, i16* %14037, i64 20
  %14065 = bitcast i16* %14064 to <16 x i16>*
  %14066 = load <16 x i16>, <16 x i16>* %14065, align 2, !tbaa !396
  %14067 = getelementptr inbounds i16, i16* %14037, i64 6
  %14068 = bitcast i16* %14067 to <16 x i16>*
  %14069 = load <16 x i16>, <16 x i16>* %14068, align 2, !tbaa !396
  %14070 = getelementptr inbounds i16, i16* %14037, i64 22
  %14071 = bitcast i16* %14070 to <16 x i16>*
  %14072 = load <16 x i16>, <16 x i16>* %14071, align 2, !tbaa !396
  %14073 = getelementptr inbounds i16, i16* %14037, i64 5
  %14074 = bitcast i16* %14073 to <16 x i16>*
  %14075 = load <16 x i16>, <16 x i16>* %14074, align 2, !tbaa !396
  %14076 = getelementptr inbounds i16, i16* %14037, i64 21
  %14077 = bitcast i16* %14076 to <16 x i16>*
  %14078 = load <16 x i16>, <16 x i16>* %14077, align 2, !tbaa !396
  %14079 = add <16 x i16> %14045, %14040
  %14080 = add <16 x i16> %14079, %14051
  %14081 = add <16 x i16> %14080, %14057
  %14082 = add <16 x i16> %14081, %14063
  %14083 = add <16 x i16> %14082, %14069
  %14084 = add <16 x i16> %14083, %14075
  %14085 = add <16 x i16> %14048, %14043
  %14086 = add <16 x i16> %14085, %14054
  %14087 = add <16 x i16> %14086, %14060
  %14088 = add <16 x i16> %14087, %14066
  %14089 = add <16 x i16> %14088, %14072
  %14090 = add <16 x i16> %14089, %14078
  %14091 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14084, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14092 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14090, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14093 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14091, <16 x i16> %14084)
  %14094 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14092, <16 x i16> %14090)
  %14095 = shufflevector <16 x i16> %14093, <16 x i16> %14094, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14096 = lshr <32 x i16> %14095, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14097 = shufflevector <32 x i16> %14096, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14098 = shl nsw i64 %14004, 5
  %14099 = add nsw i64 %14098, %13809
  %14100 = getelementptr inbounds i16, i16* %blur_x, i64 %14099
  %14101 = bitcast i16* %14100 to <16 x i16>*
  store <16 x i16> %14097, <16 x i16>* %14101, align 2, !tbaa !399
  %14102 = shufflevector <32 x i16> %14096, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14103 = getelementptr inbounds i16, i16* %14100, i64 16
  %14104 = bitcast i16* %14103 to <16 x i16>*
  store <16 x i16> %14102, <16 x i16>* %14104, align 2, !tbaa !399
  br label %"consume blur_x603"

"consume blur_x603":                              ; preds = %"for blur_y.s0.x.x.rebased596.consume blur_x603_crit_edge", %"produce blur_x602"
  %.pre-phi3647 = phi i64 [ %.pre3646, %"for blur_y.s0.x.x.rebased596.consume blur_x603_crit_edge" ], [ %14098, %"produce blur_x602" ]
  %14105 = add nsw i64 %13812, %.pre-phi3647
  %14106 = getelementptr inbounds i16, i16* %blur_x, i64 %14105
  %14107 = bitcast i16* %14106 to <16 x i16>*
  %14108 = load <16 x i16>, <16 x i16>* %14107, align 2, !tbaa !399
  %14109 = getelementptr inbounds i16, i16* %14106, i64 16
  %14110 = bitcast i16* %14109 to <16 x i16>*
  %14111 = load <16 x i16>, <16 x i16>* %14110, align 2, !tbaa !399
  %14112 = add nsw i64 %13815, %.pre-phi3647
  %14113 = getelementptr inbounds i16, i16* %blur_x, i64 %14112
  %14114 = bitcast i16* %14113 to <16 x i16>*
  %14115 = load <16 x i16>, <16 x i16>* %14114, align 2, !tbaa !399
  %14116 = getelementptr inbounds i16, i16* %14113, i64 16
  %14117 = bitcast i16* %14116 to <16 x i16>*
  %14118 = load <16 x i16>, <16 x i16>* %14117, align 2, !tbaa !399
  %14119 = add nsw i64 %13818, %.pre-phi3647
  %14120 = getelementptr inbounds i16, i16* %blur_x, i64 %14119
  %14121 = bitcast i16* %14120 to <16 x i16>*
  %14122 = load <16 x i16>, <16 x i16>* %14121, align 2, !tbaa !399
  %14123 = getelementptr inbounds i16, i16* %14120, i64 16
  %14124 = bitcast i16* %14123 to <16 x i16>*
  %14125 = load <16 x i16>, <16 x i16>* %14124, align 2, !tbaa !399
  %14126 = add nsw i64 %13821, %.pre-phi3647
  %14127 = getelementptr inbounds i16, i16* %blur_x, i64 %14126
  %14128 = bitcast i16* %14127 to <16 x i16>*
  %14129 = load <16 x i16>, <16 x i16>* %14128, align 2, !tbaa !399
  %14130 = getelementptr inbounds i16, i16* %14127, i64 16
  %14131 = bitcast i16* %14130 to <16 x i16>*
  %14132 = load <16 x i16>, <16 x i16>* %14131, align 2, !tbaa !399
  %14133 = add nsw i64 %13824, %.pre-phi3647
  %14134 = getelementptr inbounds i16, i16* %blur_x, i64 %14133
  %14135 = bitcast i16* %14134 to <16 x i16>*
  %14136 = load <16 x i16>, <16 x i16>* %14135, align 2, !tbaa !399
  %14137 = getelementptr inbounds i16, i16* %14134, i64 16
  %14138 = bitcast i16* %14137 to <16 x i16>*
  %14139 = load <16 x i16>, <16 x i16>* %14138, align 2, !tbaa !399
  %14140 = add nsw i64 %13827, %.pre-phi3647
  %14141 = getelementptr inbounds i16, i16* %blur_x, i64 %14140
  %14142 = bitcast i16* %14141 to <16 x i16>*
  %14143 = load <16 x i16>, <16 x i16>* %14142, align 2, !tbaa !399
  %14144 = getelementptr inbounds i16, i16* %14141, i64 16
  %14145 = bitcast i16* %14144 to <16 x i16>*
  %14146 = load <16 x i16>, <16 x i16>* %14145, align 2, !tbaa !399
  %14147 = add nsw i64 %13830, %.pre-phi3647
  %14148 = getelementptr inbounds i16, i16* %blur_x, i64 %14147
  %14149 = bitcast i16* %14148 to <16 x i16>*
  %14150 = load <16 x i16>, <16 x i16>* %14149, align 2, !tbaa !399
  %14151 = getelementptr inbounds i16, i16* %14148, i64 16
  %14152 = bitcast i16* %14151 to <16 x i16>*
  %14153 = load <16 x i16>, <16 x i16>* %14152, align 2, !tbaa !399
  %14154 = add <16 x i16> %14115, %14108
  %14155 = add <16 x i16> %14154, %14122
  %14156 = add <16 x i16> %14155, %14129
  %14157 = add <16 x i16> %14156, %14136
  %14158 = add <16 x i16> %14157, %14143
  %14159 = add <16 x i16> %14158, %14150
  %14160 = add <16 x i16> %14118, %14111
  %14161 = add <16 x i16> %14160, %14125
  %14162 = add <16 x i16> %14161, %14132
  %14163 = add <16 x i16> %14162, %14139
  %14164 = add <16 x i16> %14163, %14146
  %14165 = add <16 x i16> %14164, %14153
  %14166 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14159, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14167 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14165, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14168 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14166, <16 x i16> %14159)
  %14169 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14167, <16 x i16> %14165)
  %14170 = shufflevector <16 x i16> %14168, <16 x i16> %14169, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14171 = lshr <32 x i16> %14170, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14172 = shufflevector <32 x i16> %14171, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14173 = add nsw i64 %13834, %.pre-phi3647
  %14174 = getelementptr inbounds i16, i16* %66, i64 %14173
  %14175 = bitcast i16* %14174 to <16 x i16>*
  store <16 x i16> %14172, <16 x i16>* %14175, align 2, !tbaa !401
  %14176 = shufflevector <32 x i16> %14171, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14177 = getelementptr inbounds i16, i16* %14174, i64 16
  %14178 = bitcast i16* %14177 to <16 x i16>*
  store <16 x i16> %14176, <16 x i16>* %14178, align 2, !tbaa !401
  %indvars.iv.next3453 = add nuw nsw i64 %indvars.iv3452, 1
  %.not2829 = icmp eq i64 %indvars.iv.next3453, %188
  br i1 %.not2829, label %"end for blur_y.s0.x.x.rebased597", label %"for blur_y.s0.x.x.rebased596"

"for blur_y.s0.x.x.rebased604":                   ; preds = %"for blur_y.s0.x.x.rebased604.preheader", %"consume blur_x612"
  %blur_y.s0.x.x.rebased606 = phi i32 [ %14329, %"consume blur_x612" ], [ 0, %"for blur_y.s0.x.x.rebased604.preheader" ]
  %14179 = add nsw i32 %blur_y.s0.x.x.rebased606, %t1670
  %a266 = shl nsw i32 %14179, 5
  %14180 = icmp sgt i32 %a14, %a266
  %b272 = select i1 %14180, i32 %a266, i32 %a14
  %14181 = icmp slt i32 %14179, 1
  %14182 = icmp sgt i32 %4, %a266
  %14183 = or i1 %14181, %14182
  br i1 %14183, label %"produce blur_x610", label %"consume blur_x612"

"end for blur_y.s0.x.x.rebased605":               ; preds = %"consume blur_x612", %"end for blur_y.s0.x.x.rebased597"
  br i1 %34, label %"produce blur_x616", label %after_bb613

"produce blur_x610":                              ; preds = %"for blur_y.s0.x.x.rebased604"
  %14184 = icmp slt i32 %b272, %4
  %blur_x.s0.x.v1.base.s611 = select i1 %14184, i32 %b272, i32 %4
  %t1093 = add nsw i32 %blur_x.s0.x.v1.base.s611, %t2097
  %14185 = sext i32 %t1093 to i64
  %14186 = getelementptr inbounds i16, i16* %read_input, i64 %14185
  %14187 = getelementptr inbounds i16, i16* %14186, i64 1
  %14188 = bitcast i16* %14187 to <16 x i16>*
  %14189 = load <16 x i16>, <16 x i16>* %14188, align 2, !tbaa !396
  %14190 = getelementptr inbounds i16, i16* %14186, i64 17
  %14191 = bitcast i16* %14190 to <16 x i16>*
  %14192 = load <16 x i16>, <16 x i16>* %14191, align 2, !tbaa !396
  %14193 = bitcast i16* %14186 to <16 x i16>*
  %14194 = load <16 x i16>, <16 x i16>* %14193, align 2, !tbaa !396
  %14195 = getelementptr inbounds i16, i16* %14186, i64 16
  %14196 = bitcast i16* %14195 to <16 x i16>*
  %14197 = load <16 x i16>, <16 x i16>* %14196, align 2, !tbaa !396
  %14198 = getelementptr inbounds i16, i16* %14186, i64 2
  %14199 = bitcast i16* %14198 to <16 x i16>*
  %14200 = load <16 x i16>, <16 x i16>* %14199, align 2, !tbaa !396
  %14201 = getelementptr inbounds i16, i16* %14186, i64 18
  %14202 = bitcast i16* %14201 to <16 x i16>*
  %14203 = load <16 x i16>, <16 x i16>* %14202, align 2, !tbaa !396
  %14204 = getelementptr inbounds i16, i16* %14186, i64 3
  %14205 = bitcast i16* %14204 to <16 x i16>*
  %14206 = load <16 x i16>, <16 x i16>* %14205, align 2, !tbaa !396
  %14207 = getelementptr inbounds i16, i16* %14186, i64 19
  %14208 = bitcast i16* %14207 to <16 x i16>*
  %14209 = load <16 x i16>, <16 x i16>* %14208, align 2, !tbaa !396
  %14210 = getelementptr inbounds i16, i16* %14186, i64 4
  %14211 = bitcast i16* %14210 to <16 x i16>*
  %14212 = load <16 x i16>, <16 x i16>* %14211, align 2, !tbaa !396
  %14213 = getelementptr inbounds i16, i16* %14186, i64 20
  %14214 = bitcast i16* %14213 to <16 x i16>*
  %14215 = load <16 x i16>, <16 x i16>* %14214, align 2, !tbaa !396
  %14216 = getelementptr inbounds i16, i16* %14186, i64 6
  %14217 = bitcast i16* %14216 to <16 x i16>*
  %14218 = load <16 x i16>, <16 x i16>* %14217, align 2, !tbaa !396
  %14219 = getelementptr inbounds i16, i16* %14186, i64 22
  %14220 = bitcast i16* %14219 to <16 x i16>*
  %14221 = load <16 x i16>, <16 x i16>* %14220, align 2, !tbaa !396
  %14222 = getelementptr inbounds i16, i16* %14186, i64 5
  %14223 = bitcast i16* %14222 to <16 x i16>*
  %14224 = load <16 x i16>, <16 x i16>* %14223, align 2, !tbaa !396
  %14225 = getelementptr inbounds i16, i16* %14186, i64 21
  %14226 = bitcast i16* %14225 to <16 x i16>*
  %14227 = load <16 x i16>, <16 x i16>* %14226, align 2, !tbaa !396
  %14228 = add <16 x i16> %14194, %14189
  %14229 = add <16 x i16> %14228, %14200
  %14230 = add <16 x i16> %14229, %14206
  %14231 = add <16 x i16> %14230, %14212
  %14232 = add <16 x i16> %14231, %14218
  %14233 = add <16 x i16> %14232, %14224
  %14234 = add <16 x i16> %14197, %14192
  %14235 = add <16 x i16> %14234, %14203
  %14236 = add <16 x i16> %14235, %14209
  %14237 = add <16 x i16> %14236, %14215
  %14238 = add <16 x i16> %14237, %14221
  %14239 = add <16 x i16> %14238, %14227
  %14240 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14233, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14241 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14239, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14242 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14240, <16 x i16> %14233)
  %14243 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14241, <16 x i16> %14239)
  %14244 = shufflevector <16 x i16> %14242, <16 x i16> %14243, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14245 = lshr <32 x i16> %14244, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14246 = shufflevector <32 x i16> %14245, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14247 = sext i32 %blur_x.s0.x.v1.base.s611 to i64
  %14248 = add nsw i64 %14247, %14010
  %14249 = getelementptr inbounds i16, i16* %blur_x, i64 %14248
  %14250 = bitcast i16* %14249 to <16 x i16>*
  store <16 x i16> %14246, <16 x i16>* %14250, align 2, !tbaa !399
  %14251 = shufflevector <32 x i16> %14245, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14252 = getelementptr inbounds i16, i16* %14249, i64 16
  %14253 = bitcast i16* %14252 to <16 x i16>*
  store <16 x i16> %14251, <16 x i16>* %14253, align 2, !tbaa !399
  br label %"consume blur_x612"

"consume blur_x612":                              ; preds = %"for blur_y.s0.x.x.rebased604", %"produce blur_x610"
  %14254 = sext i32 %b272 to i64
  %14255 = add nsw i64 %14013, %14254
  %14256 = getelementptr inbounds i16, i16* %blur_x, i64 %14255
  %14257 = bitcast i16* %14256 to <16 x i16>*
  %14258 = load <16 x i16>, <16 x i16>* %14257, align 2, !tbaa !399
  %14259 = getelementptr inbounds i16, i16* %14256, i64 16
  %14260 = bitcast i16* %14259 to <16 x i16>*
  %14261 = load <16 x i16>, <16 x i16>* %14260, align 2, !tbaa !399
  %14262 = add nsw i64 %14016, %14254
  %14263 = getelementptr inbounds i16, i16* %blur_x, i64 %14262
  %14264 = bitcast i16* %14263 to <16 x i16>*
  %14265 = load <16 x i16>, <16 x i16>* %14264, align 2, !tbaa !399
  %14266 = getelementptr inbounds i16, i16* %14263, i64 16
  %14267 = bitcast i16* %14266 to <16 x i16>*
  %14268 = load <16 x i16>, <16 x i16>* %14267, align 2, !tbaa !399
  %14269 = add nsw i64 %14019, %14254
  %14270 = getelementptr inbounds i16, i16* %blur_x, i64 %14269
  %14271 = bitcast i16* %14270 to <16 x i16>*
  %14272 = load <16 x i16>, <16 x i16>* %14271, align 2, !tbaa !399
  %14273 = getelementptr inbounds i16, i16* %14270, i64 16
  %14274 = bitcast i16* %14273 to <16 x i16>*
  %14275 = load <16 x i16>, <16 x i16>* %14274, align 2, !tbaa !399
  %14276 = add nsw i64 %14022, %14254
  %14277 = getelementptr inbounds i16, i16* %blur_x, i64 %14276
  %14278 = bitcast i16* %14277 to <16 x i16>*
  %14279 = load <16 x i16>, <16 x i16>* %14278, align 2, !tbaa !399
  %14280 = getelementptr inbounds i16, i16* %14277, i64 16
  %14281 = bitcast i16* %14280 to <16 x i16>*
  %14282 = load <16 x i16>, <16 x i16>* %14281, align 2, !tbaa !399
  %14283 = add nsw i64 %14025, %14254
  %14284 = getelementptr inbounds i16, i16* %blur_x, i64 %14283
  %14285 = bitcast i16* %14284 to <16 x i16>*
  %14286 = load <16 x i16>, <16 x i16>* %14285, align 2, !tbaa !399
  %14287 = getelementptr inbounds i16, i16* %14284, i64 16
  %14288 = bitcast i16* %14287 to <16 x i16>*
  %14289 = load <16 x i16>, <16 x i16>* %14288, align 2, !tbaa !399
  %14290 = add nsw i64 %14028, %14254
  %14291 = getelementptr inbounds i16, i16* %blur_x, i64 %14290
  %14292 = bitcast i16* %14291 to <16 x i16>*
  %14293 = load <16 x i16>, <16 x i16>* %14292, align 2, !tbaa !399
  %14294 = getelementptr inbounds i16, i16* %14291, i64 16
  %14295 = bitcast i16* %14294 to <16 x i16>*
  %14296 = load <16 x i16>, <16 x i16>* %14295, align 2, !tbaa !399
  %14297 = add nsw i64 %14031, %14254
  %14298 = getelementptr inbounds i16, i16* %blur_x, i64 %14297
  %14299 = bitcast i16* %14298 to <16 x i16>*
  %14300 = load <16 x i16>, <16 x i16>* %14299, align 2, !tbaa !399
  %14301 = getelementptr inbounds i16, i16* %14298, i64 16
  %14302 = bitcast i16* %14301 to <16 x i16>*
  %14303 = load <16 x i16>, <16 x i16>* %14302, align 2, !tbaa !399
  %14304 = add <16 x i16> %14265, %14258
  %14305 = add <16 x i16> %14304, %14272
  %14306 = add <16 x i16> %14305, %14279
  %14307 = add <16 x i16> %14306, %14286
  %14308 = add <16 x i16> %14307, %14293
  %14309 = add <16 x i16> %14308, %14300
  %14310 = add <16 x i16> %14268, %14261
  %14311 = add <16 x i16> %14310, %14275
  %14312 = add <16 x i16> %14311, %14282
  %14313 = add <16 x i16> %14312, %14289
  %14314 = add <16 x i16> %14313, %14296
  %14315 = add <16 x i16> %14314, %14303
  %14316 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14309, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14317 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14315, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14318 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14316, <16 x i16> %14309)
  %14319 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14317, <16 x i16> %14315)
  %14320 = shufflevector <16 x i16> %14318, <16 x i16> %14319, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14321 = lshr <32 x i16> %14320, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14322 = shufflevector <32 x i16> %14321, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14323 = add nsw i64 %14035, %14254
  %14324 = getelementptr inbounds i16, i16* %66, i64 %14323
  %14325 = bitcast i16* %14324 to <16 x i16>*
  store <16 x i16> %14322, <16 x i16>* %14325, align 2, !tbaa !401
  %14326 = shufflevector <32 x i16> %14321, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14327 = getelementptr inbounds i16, i16* %14324, i64 16
  %14328 = bitcast i16* %14327 to <16 x i16>*
  store <16 x i16> %14326, <16 x i16>* %14328, align 2, !tbaa !401
  %14329 = add nuw nsw i32 %blur_y.s0.x.x.rebased606, 1
  %.not2828 = icmp eq i32 %14329, %t1727
  br i1 %.not2828, label %"end for blur_y.s0.x.x.rebased605", label %"for blur_y.s0.x.x.rebased604"

after_bb613:                                      ; preds = %"end for blur_y.s0.x.x.rebased605", %"produce blur_x616"
  br i1 %100, label %"for blur_y.s0.x.x.rebased618.preheader", label %"end for blur_y.s0.x.x.rebased619", !prof !386

"for blur_y.s0.x.x.rebased618.preheader":         ; preds = %after_bb613
  %14330 = sext i32 %t1750 to i64
  %14331 = zext i32 %.pre-phi3605 to i64
  %14332 = mul nsw i64 %14331, %116
  %14333 = sub nsw i64 %14332, %96
  %14334 = zext i32 %.pre-phi3599 to i64
  %14335 = mul nsw i64 %14334, %116
  %14336 = sub nsw i64 %14335, %96
  %14337 = zext i32 %.pre-phi to i64
  %14338 = mul nsw i64 %14337, %116
  %14339 = sub nsw i64 %14338, %96
  %14340 = zext i32 %.pre-phi3579 to i64
  %14341 = mul nsw i64 %14340, %116
  %14342 = sub nsw i64 %14341, %96
  %14343 = zext i32 %.pre-phi3583 to i64
  %14344 = mul nsw i64 %14343, %116
  %14345 = sub nsw i64 %14344, %96
  %14346 = zext i32 %.pre-phi3591 to i64
  %14347 = mul nsw i64 %14346, %116
  %14348 = sub nsw i64 %14347, %96
  %14349 = zext i32 %.pre-phi3587 to i64
  %14350 = mul nsw i64 %14349, %116
  %14351 = sub nsw i64 %14350, %96
  %14352 = sext i32 %a26 to i64
  %14353 = add nsw i64 %14352, 22
  %14354 = mul nsw i64 %14353, %117
  %14355 = add nsw i64 %14354, %120
  br label %"for blur_y.s0.x.x.rebased618"

"produce blur_x616":                              ; preds = %"end for blur_y.s0.x.x.rebased605"
  %14356 = getelementptr inbounds i16, i16* %read_input, i64 %163
  %14357 = getelementptr inbounds i16, i16* %14356, i64 -31
  %14358 = bitcast i16* %14357 to <16 x i16>*
  %14359 = load <16 x i16>, <16 x i16>* %14358, align 2, !tbaa !396
  %14360 = getelementptr inbounds i16, i16* %14356, i64 -15
  %14361 = bitcast i16* %14360 to <16 x i16>*
  %14362 = load <16 x i16>, <16 x i16>* %14361, align 2, !tbaa !396
  %14363 = getelementptr inbounds i16, i16* %14356, i64 -32
  %14364 = bitcast i16* %14363 to <16 x i16>*
  %14365 = load <16 x i16>, <16 x i16>* %14364, align 2, !tbaa !396
  %14366 = getelementptr inbounds i16, i16* %14356, i64 -16
  %14367 = bitcast i16* %14366 to <16 x i16>*
  %14368 = load <16 x i16>, <16 x i16>* %14367, align 2, !tbaa !396
  %14369 = getelementptr inbounds i16, i16* %14356, i64 -30
  %14370 = bitcast i16* %14369 to <16 x i16>*
  %14371 = load <16 x i16>, <16 x i16>* %14370, align 2, !tbaa !396
  %14372 = getelementptr inbounds i16, i16* %14356, i64 -14
  %14373 = bitcast i16* %14372 to <16 x i16>*
  %14374 = load <16 x i16>, <16 x i16>* %14373, align 2, !tbaa !396
  %14375 = getelementptr inbounds i16, i16* %14356, i64 -29
  %14376 = bitcast i16* %14375 to <16 x i16>*
  %14377 = load <16 x i16>, <16 x i16>* %14376, align 2, !tbaa !396
  %14378 = getelementptr inbounds i16, i16* %14356, i64 -13
  %14379 = bitcast i16* %14378 to <16 x i16>*
  %14380 = load <16 x i16>, <16 x i16>* %14379, align 2, !tbaa !396
  %14381 = getelementptr inbounds i16, i16* %14356, i64 -28
  %14382 = bitcast i16* %14381 to <16 x i16>*
  %14383 = load <16 x i16>, <16 x i16>* %14382, align 2, !tbaa !396
  %14384 = getelementptr inbounds i16, i16* %14356, i64 -12
  %14385 = bitcast i16* %14384 to <16 x i16>*
  %14386 = load <16 x i16>, <16 x i16>* %14385, align 2, !tbaa !396
  %14387 = getelementptr inbounds i16, i16* %14356, i64 -26
  %14388 = bitcast i16* %14387 to <16 x i16>*
  %14389 = load <16 x i16>, <16 x i16>* %14388, align 2, !tbaa !396
  %14390 = getelementptr inbounds i16, i16* %14356, i64 -10
  %14391 = bitcast i16* %14390 to <16 x i16>*
  %14392 = load <16 x i16>, <16 x i16>* %14391, align 2, !tbaa !396
  %14393 = getelementptr inbounds i16, i16* %14356, i64 -27
  %14394 = bitcast i16* %14393 to <16 x i16>*
  %14395 = load <16 x i16>, <16 x i16>* %14394, align 2, !tbaa !396
  %14396 = getelementptr inbounds i16, i16* %14356, i64 -11
  %14397 = bitcast i16* %14396 to <16 x i16>*
  %14398 = load <16 x i16>, <16 x i16>* %14397, align 2, !tbaa !396
  %14399 = add <16 x i16> %14365, %14359
  %14400 = add <16 x i16> %14399, %14371
  %14401 = add <16 x i16> %14400, %14377
  %14402 = add <16 x i16> %14401, %14383
  %14403 = add <16 x i16> %14402, %14389
  %14404 = add <16 x i16> %14403, %14395
  %14405 = add <16 x i16> %14368, %14362
  %14406 = add <16 x i16> %14405, %14374
  %14407 = add <16 x i16> %14406, %14380
  %14408 = add <16 x i16> %14407, %14386
  %14409 = add <16 x i16> %14408, %14392
  %14410 = add <16 x i16> %14409, %14398
  %14411 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14404, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14412 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14410, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14413 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14411, <16 x i16> %14404)
  %14414 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14412, <16 x i16> %14410)
  %14415 = shufflevector <16 x i16> %14413, <16 x i16> %14414, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14416 = lshr <32 x i16> %14415, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14417 = shufflevector <32 x i16> %14416, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14418 = zext i32 %.pre-phi3591 to i64
  %14419 = mul nsw i64 %97, %14418
  %14420 = add nsw i64 %99, %14419
  %14421 = getelementptr inbounds i16, i16* %blur_x, i64 %14420
  %14422 = getelementptr inbounds i16, i16* %14421, i64 -32
  %14423 = bitcast i16* %14422 to <16 x i16>*
  store <16 x i16> %14417, <16 x i16>* %14423, align 2, !tbaa !399
  %14424 = shufflevector <32 x i16> %14416, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14425 = getelementptr inbounds i16, i16* %14421, i64 -16
  %14426 = bitcast i16* %14425 to <16 x i16>*
  store <16 x i16> %14424, <16 x i16>* %14426, align 2, !tbaa !399
  %14427 = zext i32 %.pre-phi3605 to i64
  %14428 = mul nsw i64 %14427, %116
  %14429 = add nsw i64 %14428, %94
  %14430 = getelementptr inbounds i16, i16* %blur_x, i64 %14429
  %14431 = getelementptr inbounds i16, i16* %14430, i64 -32
  %14432 = bitcast i16* %14431 to <16 x i16>*
  %14433 = load <16 x i16>, <16 x i16>* %14432, align 2, !tbaa !399
  %14434 = getelementptr inbounds i16, i16* %14430, i64 -16
  %14435 = bitcast i16* %14434 to <16 x i16>*
  %14436 = load <16 x i16>, <16 x i16>* %14435, align 2, !tbaa !399
  %14437 = zext i32 %.pre-phi3599 to i64
  %14438 = mul nsw i64 %14437, %116
  %14439 = add nsw i64 %14438, %94
  %14440 = getelementptr inbounds i16, i16* %blur_x, i64 %14439
  %14441 = getelementptr inbounds i16, i16* %14440, i64 -32
  %14442 = bitcast i16* %14441 to <16 x i16>*
  %14443 = load <16 x i16>, <16 x i16>* %14442, align 2, !tbaa !399
  %14444 = getelementptr inbounds i16, i16* %14440, i64 -16
  %14445 = bitcast i16* %14444 to <16 x i16>*
  %14446 = load <16 x i16>, <16 x i16>* %14445, align 2, !tbaa !399
  %14447 = zext i32 %.pre-phi to i64
  %14448 = mul nsw i64 %14447, %116
  %14449 = add nsw i64 %14448, %94
  %14450 = getelementptr inbounds i16, i16* %blur_x, i64 %14449
  %14451 = getelementptr inbounds i16, i16* %14450, i64 -32
  %14452 = bitcast i16* %14451 to <16 x i16>*
  %14453 = load <16 x i16>, <16 x i16>* %14452, align 2, !tbaa !399
  %14454 = getelementptr inbounds i16, i16* %14450, i64 -16
  %14455 = bitcast i16* %14454 to <16 x i16>*
  %14456 = load <16 x i16>, <16 x i16>* %14455, align 2, !tbaa !399
  %14457 = zext i32 %.pre-phi3579 to i64
  %14458 = mul nsw i64 %14457, %116
  %14459 = add nsw i64 %14458, %94
  %14460 = getelementptr inbounds i16, i16* %blur_x, i64 %14459
  %14461 = getelementptr inbounds i16, i16* %14460, i64 -32
  %14462 = bitcast i16* %14461 to <16 x i16>*
  %14463 = load <16 x i16>, <16 x i16>* %14462, align 2, !tbaa !399
  %14464 = getelementptr inbounds i16, i16* %14460, i64 -16
  %14465 = bitcast i16* %14464 to <16 x i16>*
  %14466 = load <16 x i16>, <16 x i16>* %14465, align 2, !tbaa !399
  %14467 = zext i32 %.pre-phi3583 to i64
  %14468 = mul nsw i64 %14467, %116
  %14469 = add nsw i64 %14468, %94
  %14470 = getelementptr inbounds i16, i16* %blur_x, i64 %14469
  %14471 = getelementptr inbounds i16, i16* %14470, i64 -32
  %14472 = bitcast i16* %14471 to <16 x i16>*
  %14473 = load <16 x i16>, <16 x i16>* %14472, align 2, !tbaa !399
  %14474 = getelementptr inbounds i16, i16* %14470, i64 -16
  %14475 = bitcast i16* %14474 to <16 x i16>*
  %14476 = load <16 x i16>, <16 x i16>* %14475, align 2, !tbaa !399
  %14477 = mul nsw i64 %14418, %116
  %14478 = add nsw i64 %14477, %94
  %14479 = getelementptr inbounds i16, i16* %blur_x, i64 %14478
  %14480 = getelementptr inbounds i16, i16* %14479, i64 -32
  %14481 = bitcast i16* %14480 to <16 x i16>*
  %14482 = load <16 x i16>, <16 x i16>* %14481, align 2, !tbaa !399
  %14483 = getelementptr inbounds i16, i16* %14479, i64 -16
  %14484 = bitcast i16* %14483 to <16 x i16>*
  %14485 = load <16 x i16>, <16 x i16>* %14484, align 2, !tbaa !399
  %14486 = zext i32 %.pre-phi3587 to i64
  %14487 = mul nsw i64 %14486, %116
  %14488 = add nsw i64 %14487, %94
  %14489 = getelementptr inbounds i16, i16* %blur_x, i64 %14488
  %14490 = getelementptr inbounds i16, i16* %14489, i64 -32
  %14491 = bitcast i16* %14490 to <16 x i16>*
  %14492 = load <16 x i16>, <16 x i16>* %14491, align 2, !tbaa !399
  %14493 = getelementptr inbounds i16, i16* %14489, i64 -16
  %14494 = bitcast i16* %14493 to <16 x i16>*
  %14495 = load <16 x i16>, <16 x i16>* %14494, align 2, !tbaa !399
  %14496 = add <16 x i16> %14443, %14433
  %14497 = add <16 x i16> %14496, %14453
  %14498 = add <16 x i16> %14497, %14463
  %14499 = add <16 x i16> %14498, %14473
  %14500 = add <16 x i16> %14499, %14482
  %14501 = add <16 x i16> %14500, %14492
  %14502 = add <16 x i16> %14446, %14436
  %14503 = add <16 x i16> %14502, %14456
  %14504 = add <16 x i16> %14503, %14466
  %14505 = add <16 x i16> %14504, %14476
  %14506 = add <16 x i16> %14505, %14485
  %14507 = add <16 x i16> %14506, %14495
  %14508 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14501, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14509 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14507, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14510 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14508, <16 x i16> %14501)
  %14511 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14509, <16 x i16> %14507)
  %14512 = shufflevector <16 x i16> %14510, <16 x i16> %14511, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14513 = lshr <32 x i16> %14512, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14514 = shufflevector <32 x i16> %14513, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14515 = sext i32 %a26 to i64
  %14516 = add nsw i64 %14515, 22
  %14517 = mul nsw i64 %14516, %117
  %14518 = add nsw i64 %119, %14517
  %14519 = getelementptr inbounds i16, i16* %66, i64 %14518
  %14520 = getelementptr inbounds i16, i16* %14519, i64 -32
  %14521 = bitcast i16* %14520 to <16 x i16>*
  store <16 x i16> %14514, <16 x i16>* %14521, align 2, !tbaa !401
  %14522 = shufflevector <32 x i16> %14513, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14523 = getelementptr inbounds i16, i16* %14519, i64 -16
  %14524 = bitcast i16* %14523 to <16 x i16>*
  store <16 x i16> %14522, <16 x i16>* %14524, align 2, !tbaa !401
  br label %after_bb613

"for blur_y.s0.x.x.rebased618":                   ; preds = %"for blur_y.s0.x.x.rebased618.preheader", %"consume blur_x625"
  %indvars.iv3455 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased618.preheader" ], [ %indvars.iv.next3456, %"consume blur_x625" ]
  %14525 = add nsw i64 %indvars.iv3455, %101
  %14526 = icmp slt i64 %14525, 1
  %14527 = trunc i64 %14525 to i32
  %14528 = shl nsw i32 %14527, 5
  %14529 = icmp sgt i32 %4, %14528
  %14530 = or i1 %14526, %14529
  br i1 %14530, label %"produce blur_x624", label %"for blur_y.s0.x.x.rebased618.consume blur_x625_crit_edge"

"for blur_y.s0.x.x.rebased618.consume blur_x625_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased618"
  %.pre3648 = shl nsw i64 %14525, 5
  br label %"consume blur_x625"

"end for blur_y.s0.x.x.rebased619":               ; preds = %"consume blur_x625", %after_bb613
  br i1 %102, label %"for blur_y.s0.x.x.rebased626.preheader", label %"end for blur_y.s0.x.x.rebased627", !prof !386

"for blur_y.s0.x.x.rebased626.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased619"
  %14531 = sext i32 %t1750 to i64
  %14532 = zext i32 %.pre-phi3605 to i64
  %14533 = mul nsw i64 %14532, %116
  %14534 = sub nsw i64 %14533, %96
  %14535 = zext i32 %.pre-phi3599 to i64
  %14536 = mul nsw i64 %14535, %116
  %14537 = sub nsw i64 %14536, %96
  %14538 = zext i32 %.pre-phi to i64
  %14539 = mul nsw i64 %14538, %116
  %14540 = sub nsw i64 %14539, %96
  %14541 = zext i32 %.pre-phi3579 to i64
  %14542 = mul nsw i64 %14541, %116
  %14543 = sub nsw i64 %14542, %96
  %14544 = zext i32 %.pre-phi3583 to i64
  %14545 = mul nsw i64 %14544, %116
  %14546 = sub nsw i64 %14545, %96
  %14547 = zext i32 %.pre-phi3591 to i64
  %14548 = mul nsw i64 %14547, %116
  %14549 = sub nsw i64 %14548, %96
  %14550 = zext i32 %.pre-phi3587 to i64
  %14551 = mul nsw i64 %14550, %116
  %14552 = sub nsw i64 %14551, %96
  %14553 = sext i32 %a26 to i64
  %14554 = add nsw i64 %14553, 22
  %14555 = mul nsw i64 %14554, %117
  %14556 = add nsw i64 %14555, %120
  br label %"for blur_y.s0.x.x.rebased626"

"produce blur_x624":                              ; preds = %"for blur_y.s0.x.x.rebased618"
  %t1104 = add nsw i32 %14528, %t2113
  %14557 = sext i32 %t1104 to i64
  %14558 = getelementptr inbounds i16, i16* %read_input, i64 %14557
  %14559 = getelementptr inbounds i16, i16* %14558, i64 1
  %14560 = bitcast i16* %14559 to <16 x i16>*
  %14561 = load <16 x i16>, <16 x i16>* %14560, align 2, !tbaa !396
  %14562 = getelementptr inbounds i16, i16* %14558, i64 17
  %14563 = bitcast i16* %14562 to <16 x i16>*
  %14564 = load <16 x i16>, <16 x i16>* %14563, align 2, !tbaa !396
  %14565 = bitcast i16* %14558 to <16 x i16>*
  %14566 = load <16 x i16>, <16 x i16>* %14565, align 2, !tbaa !396
  %14567 = getelementptr inbounds i16, i16* %14558, i64 16
  %14568 = bitcast i16* %14567 to <16 x i16>*
  %14569 = load <16 x i16>, <16 x i16>* %14568, align 2, !tbaa !396
  %14570 = getelementptr inbounds i16, i16* %14558, i64 2
  %14571 = bitcast i16* %14570 to <16 x i16>*
  %14572 = load <16 x i16>, <16 x i16>* %14571, align 2, !tbaa !396
  %14573 = getelementptr inbounds i16, i16* %14558, i64 18
  %14574 = bitcast i16* %14573 to <16 x i16>*
  %14575 = load <16 x i16>, <16 x i16>* %14574, align 2, !tbaa !396
  %14576 = getelementptr inbounds i16, i16* %14558, i64 3
  %14577 = bitcast i16* %14576 to <16 x i16>*
  %14578 = load <16 x i16>, <16 x i16>* %14577, align 2, !tbaa !396
  %14579 = getelementptr inbounds i16, i16* %14558, i64 19
  %14580 = bitcast i16* %14579 to <16 x i16>*
  %14581 = load <16 x i16>, <16 x i16>* %14580, align 2, !tbaa !396
  %14582 = getelementptr inbounds i16, i16* %14558, i64 4
  %14583 = bitcast i16* %14582 to <16 x i16>*
  %14584 = load <16 x i16>, <16 x i16>* %14583, align 2, !tbaa !396
  %14585 = getelementptr inbounds i16, i16* %14558, i64 20
  %14586 = bitcast i16* %14585 to <16 x i16>*
  %14587 = load <16 x i16>, <16 x i16>* %14586, align 2, !tbaa !396
  %14588 = getelementptr inbounds i16, i16* %14558, i64 6
  %14589 = bitcast i16* %14588 to <16 x i16>*
  %14590 = load <16 x i16>, <16 x i16>* %14589, align 2, !tbaa !396
  %14591 = getelementptr inbounds i16, i16* %14558, i64 22
  %14592 = bitcast i16* %14591 to <16 x i16>*
  %14593 = load <16 x i16>, <16 x i16>* %14592, align 2, !tbaa !396
  %14594 = getelementptr inbounds i16, i16* %14558, i64 5
  %14595 = bitcast i16* %14594 to <16 x i16>*
  %14596 = load <16 x i16>, <16 x i16>* %14595, align 2, !tbaa !396
  %14597 = getelementptr inbounds i16, i16* %14558, i64 21
  %14598 = bitcast i16* %14597 to <16 x i16>*
  %14599 = load <16 x i16>, <16 x i16>* %14598, align 2, !tbaa !396
  %14600 = add <16 x i16> %14566, %14561
  %14601 = add <16 x i16> %14600, %14572
  %14602 = add <16 x i16> %14601, %14578
  %14603 = add <16 x i16> %14602, %14584
  %14604 = add <16 x i16> %14603, %14590
  %14605 = add <16 x i16> %14604, %14596
  %14606 = add <16 x i16> %14569, %14564
  %14607 = add <16 x i16> %14606, %14575
  %14608 = add <16 x i16> %14607, %14581
  %14609 = add <16 x i16> %14608, %14587
  %14610 = add <16 x i16> %14609, %14593
  %14611 = add <16 x i16> %14610, %14599
  %14612 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14605, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14613 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14611, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14614 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14612, <16 x i16> %14605)
  %14615 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14613, <16 x i16> %14611)
  %14616 = shufflevector <16 x i16> %14614, <16 x i16> %14615, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14617 = lshr <32 x i16> %14616, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14618 = shufflevector <32 x i16> %14617, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14619 = shl nsw i64 %14525, 5
  %14620 = add nsw i64 %14619, %14330
  %14621 = getelementptr inbounds i16, i16* %blur_x, i64 %14620
  %14622 = bitcast i16* %14621 to <16 x i16>*
  store <16 x i16> %14618, <16 x i16>* %14622, align 2, !tbaa !399
  %14623 = shufflevector <32 x i16> %14617, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14624 = getelementptr inbounds i16, i16* %14621, i64 16
  %14625 = bitcast i16* %14624 to <16 x i16>*
  store <16 x i16> %14623, <16 x i16>* %14625, align 2, !tbaa !399
  br label %"consume blur_x625"

"consume blur_x625":                              ; preds = %"for blur_y.s0.x.x.rebased618.consume blur_x625_crit_edge", %"produce blur_x624"
  %.pre-phi3649 = phi i64 [ %.pre3648, %"for blur_y.s0.x.x.rebased618.consume blur_x625_crit_edge" ], [ %14619, %"produce blur_x624" ]
  %14626 = add nsw i64 %14333, %.pre-phi3649
  %14627 = getelementptr inbounds i16, i16* %blur_x, i64 %14626
  %14628 = bitcast i16* %14627 to <16 x i16>*
  %14629 = load <16 x i16>, <16 x i16>* %14628, align 2, !tbaa !399
  %14630 = getelementptr inbounds i16, i16* %14627, i64 16
  %14631 = bitcast i16* %14630 to <16 x i16>*
  %14632 = load <16 x i16>, <16 x i16>* %14631, align 2, !tbaa !399
  %14633 = add nsw i64 %14336, %.pre-phi3649
  %14634 = getelementptr inbounds i16, i16* %blur_x, i64 %14633
  %14635 = bitcast i16* %14634 to <16 x i16>*
  %14636 = load <16 x i16>, <16 x i16>* %14635, align 2, !tbaa !399
  %14637 = getelementptr inbounds i16, i16* %14634, i64 16
  %14638 = bitcast i16* %14637 to <16 x i16>*
  %14639 = load <16 x i16>, <16 x i16>* %14638, align 2, !tbaa !399
  %14640 = add nsw i64 %14339, %.pre-phi3649
  %14641 = getelementptr inbounds i16, i16* %blur_x, i64 %14640
  %14642 = bitcast i16* %14641 to <16 x i16>*
  %14643 = load <16 x i16>, <16 x i16>* %14642, align 2, !tbaa !399
  %14644 = getelementptr inbounds i16, i16* %14641, i64 16
  %14645 = bitcast i16* %14644 to <16 x i16>*
  %14646 = load <16 x i16>, <16 x i16>* %14645, align 2, !tbaa !399
  %14647 = add nsw i64 %14342, %.pre-phi3649
  %14648 = getelementptr inbounds i16, i16* %blur_x, i64 %14647
  %14649 = bitcast i16* %14648 to <16 x i16>*
  %14650 = load <16 x i16>, <16 x i16>* %14649, align 2, !tbaa !399
  %14651 = getelementptr inbounds i16, i16* %14648, i64 16
  %14652 = bitcast i16* %14651 to <16 x i16>*
  %14653 = load <16 x i16>, <16 x i16>* %14652, align 2, !tbaa !399
  %14654 = add nsw i64 %14345, %.pre-phi3649
  %14655 = getelementptr inbounds i16, i16* %blur_x, i64 %14654
  %14656 = bitcast i16* %14655 to <16 x i16>*
  %14657 = load <16 x i16>, <16 x i16>* %14656, align 2, !tbaa !399
  %14658 = getelementptr inbounds i16, i16* %14655, i64 16
  %14659 = bitcast i16* %14658 to <16 x i16>*
  %14660 = load <16 x i16>, <16 x i16>* %14659, align 2, !tbaa !399
  %14661 = add nsw i64 %14348, %.pre-phi3649
  %14662 = getelementptr inbounds i16, i16* %blur_x, i64 %14661
  %14663 = bitcast i16* %14662 to <16 x i16>*
  %14664 = load <16 x i16>, <16 x i16>* %14663, align 2, !tbaa !399
  %14665 = getelementptr inbounds i16, i16* %14662, i64 16
  %14666 = bitcast i16* %14665 to <16 x i16>*
  %14667 = load <16 x i16>, <16 x i16>* %14666, align 2, !tbaa !399
  %14668 = add nsw i64 %14351, %.pre-phi3649
  %14669 = getelementptr inbounds i16, i16* %blur_x, i64 %14668
  %14670 = bitcast i16* %14669 to <16 x i16>*
  %14671 = load <16 x i16>, <16 x i16>* %14670, align 2, !tbaa !399
  %14672 = getelementptr inbounds i16, i16* %14669, i64 16
  %14673 = bitcast i16* %14672 to <16 x i16>*
  %14674 = load <16 x i16>, <16 x i16>* %14673, align 2, !tbaa !399
  %14675 = add <16 x i16> %14636, %14629
  %14676 = add <16 x i16> %14675, %14643
  %14677 = add <16 x i16> %14676, %14650
  %14678 = add <16 x i16> %14677, %14657
  %14679 = add <16 x i16> %14678, %14664
  %14680 = add <16 x i16> %14679, %14671
  %14681 = add <16 x i16> %14639, %14632
  %14682 = add <16 x i16> %14681, %14646
  %14683 = add <16 x i16> %14682, %14653
  %14684 = add <16 x i16> %14683, %14660
  %14685 = add <16 x i16> %14684, %14667
  %14686 = add <16 x i16> %14685, %14674
  %14687 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14680, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14688 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14686, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14689 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14687, <16 x i16> %14680)
  %14690 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14688, <16 x i16> %14686)
  %14691 = shufflevector <16 x i16> %14689, <16 x i16> %14690, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14692 = lshr <32 x i16> %14691, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14693 = shufflevector <32 x i16> %14692, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14694 = add nsw i64 %14355, %.pre-phi3649
  %14695 = getelementptr inbounds i16, i16* %66, i64 %14694
  %14696 = bitcast i16* %14695 to <16 x i16>*
  store <16 x i16> %14693, <16 x i16>* %14696, align 2, !tbaa !401
  %14697 = shufflevector <32 x i16> %14692, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14698 = getelementptr inbounds i16, i16* %14695, i64 16
  %14699 = bitcast i16* %14698 to <16 x i16>*
  store <16 x i16> %14697, <16 x i16>* %14699, align 2, !tbaa !401
  %indvars.iv.next3456 = add nuw nsw i64 %indvars.iv3455, 1
  %.not2827 = icmp eq i64 %indvars.iv.next3456, %188
  br i1 %.not2827, label %"end for blur_y.s0.x.x.rebased619", label %"for blur_y.s0.x.x.rebased618"

"for blur_y.s0.x.x.rebased626":                   ; preds = %"for blur_y.s0.x.x.rebased626.preheader", %"consume blur_x634"
  %blur_y.s0.x.x.rebased628 = phi i32 [ %14850, %"consume blur_x634" ], [ 0, %"for blur_y.s0.x.x.rebased626.preheader" ]
  %14700 = add nsw i32 %blur_y.s0.x.x.rebased628, %t1670
  %a273 = shl nsw i32 %14700, 5
  %14701 = icmp sgt i32 %a14, %a273
  %b279 = select i1 %14701, i32 %a273, i32 %a14
  %14702 = icmp slt i32 %14700, 1
  %14703 = icmp sgt i32 %4, %a273
  %14704 = or i1 %14702, %14703
  br i1 %14704, label %"produce blur_x632", label %"consume blur_x634"

"end for blur_y.s0.x.x.rebased627":               ; preds = %"consume blur_x634", %"end for blur_y.s0.x.x.rebased619"
  br i1 %34, label %"produce blur_x638", label %after_bb635

"produce blur_x632":                              ; preds = %"for blur_y.s0.x.x.rebased626"
  %14705 = icmp slt i32 %b279, %4
  %blur_x.s0.x.v1.base.s633 = select i1 %14705, i32 %b279, i32 %4
  %t1109 = add nsw i32 %blur_x.s0.x.v1.base.s633, %t2113
  %14706 = sext i32 %t1109 to i64
  %14707 = getelementptr inbounds i16, i16* %read_input, i64 %14706
  %14708 = getelementptr inbounds i16, i16* %14707, i64 1
  %14709 = bitcast i16* %14708 to <16 x i16>*
  %14710 = load <16 x i16>, <16 x i16>* %14709, align 2, !tbaa !396
  %14711 = getelementptr inbounds i16, i16* %14707, i64 17
  %14712 = bitcast i16* %14711 to <16 x i16>*
  %14713 = load <16 x i16>, <16 x i16>* %14712, align 2, !tbaa !396
  %14714 = bitcast i16* %14707 to <16 x i16>*
  %14715 = load <16 x i16>, <16 x i16>* %14714, align 2, !tbaa !396
  %14716 = getelementptr inbounds i16, i16* %14707, i64 16
  %14717 = bitcast i16* %14716 to <16 x i16>*
  %14718 = load <16 x i16>, <16 x i16>* %14717, align 2, !tbaa !396
  %14719 = getelementptr inbounds i16, i16* %14707, i64 2
  %14720 = bitcast i16* %14719 to <16 x i16>*
  %14721 = load <16 x i16>, <16 x i16>* %14720, align 2, !tbaa !396
  %14722 = getelementptr inbounds i16, i16* %14707, i64 18
  %14723 = bitcast i16* %14722 to <16 x i16>*
  %14724 = load <16 x i16>, <16 x i16>* %14723, align 2, !tbaa !396
  %14725 = getelementptr inbounds i16, i16* %14707, i64 3
  %14726 = bitcast i16* %14725 to <16 x i16>*
  %14727 = load <16 x i16>, <16 x i16>* %14726, align 2, !tbaa !396
  %14728 = getelementptr inbounds i16, i16* %14707, i64 19
  %14729 = bitcast i16* %14728 to <16 x i16>*
  %14730 = load <16 x i16>, <16 x i16>* %14729, align 2, !tbaa !396
  %14731 = getelementptr inbounds i16, i16* %14707, i64 4
  %14732 = bitcast i16* %14731 to <16 x i16>*
  %14733 = load <16 x i16>, <16 x i16>* %14732, align 2, !tbaa !396
  %14734 = getelementptr inbounds i16, i16* %14707, i64 20
  %14735 = bitcast i16* %14734 to <16 x i16>*
  %14736 = load <16 x i16>, <16 x i16>* %14735, align 2, !tbaa !396
  %14737 = getelementptr inbounds i16, i16* %14707, i64 6
  %14738 = bitcast i16* %14737 to <16 x i16>*
  %14739 = load <16 x i16>, <16 x i16>* %14738, align 2, !tbaa !396
  %14740 = getelementptr inbounds i16, i16* %14707, i64 22
  %14741 = bitcast i16* %14740 to <16 x i16>*
  %14742 = load <16 x i16>, <16 x i16>* %14741, align 2, !tbaa !396
  %14743 = getelementptr inbounds i16, i16* %14707, i64 5
  %14744 = bitcast i16* %14743 to <16 x i16>*
  %14745 = load <16 x i16>, <16 x i16>* %14744, align 2, !tbaa !396
  %14746 = getelementptr inbounds i16, i16* %14707, i64 21
  %14747 = bitcast i16* %14746 to <16 x i16>*
  %14748 = load <16 x i16>, <16 x i16>* %14747, align 2, !tbaa !396
  %14749 = add <16 x i16> %14715, %14710
  %14750 = add <16 x i16> %14749, %14721
  %14751 = add <16 x i16> %14750, %14727
  %14752 = add <16 x i16> %14751, %14733
  %14753 = add <16 x i16> %14752, %14739
  %14754 = add <16 x i16> %14753, %14745
  %14755 = add <16 x i16> %14718, %14713
  %14756 = add <16 x i16> %14755, %14724
  %14757 = add <16 x i16> %14756, %14730
  %14758 = add <16 x i16> %14757, %14736
  %14759 = add <16 x i16> %14758, %14742
  %14760 = add <16 x i16> %14759, %14748
  %14761 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14754, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14762 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14760, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14763 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14761, <16 x i16> %14754)
  %14764 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14762, <16 x i16> %14760)
  %14765 = shufflevector <16 x i16> %14763, <16 x i16> %14764, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14766 = lshr <32 x i16> %14765, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14767 = shufflevector <32 x i16> %14766, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14768 = sext i32 %blur_x.s0.x.v1.base.s633 to i64
  %14769 = add nsw i64 %14768, %14531
  %14770 = getelementptr inbounds i16, i16* %blur_x, i64 %14769
  %14771 = bitcast i16* %14770 to <16 x i16>*
  store <16 x i16> %14767, <16 x i16>* %14771, align 2, !tbaa !399
  %14772 = shufflevector <32 x i16> %14766, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14773 = getelementptr inbounds i16, i16* %14770, i64 16
  %14774 = bitcast i16* %14773 to <16 x i16>*
  store <16 x i16> %14772, <16 x i16>* %14774, align 2, !tbaa !399
  br label %"consume blur_x634"

"consume blur_x634":                              ; preds = %"for blur_y.s0.x.x.rebased626", %"produce blur_x632"
  %14775 = sext i32 %b279 to i64
  %14776 = add nsw i64 %14534, %14775
  %14777 = getelementptr inbounds i16, i16* %blur_x, i64 %14776
  %14778 = bitcast i16* %14777 to <16 x i16>*
  %14779 = load <16 x i16>, <16 x i16>* %14778, align 2, !tbaa !399
  %14780 = getelementptr inbounds i16, i16* %14777, i64 16
  %14781 = bitcast i16* %14780 to <16 x i16>*
  %14782 = load <16 x i16>, <16 x i16>* %14781, align 2, !tbaa !399
  %14783 = add nsw i64 %14537, %14775
  %14784 = getelementptr inbounds i16, i16* %blur_x, i64 %14783
  %14785 = bitcast i16* %14784 to <16 x i16>*
  %14786 = load <16 x i16>, <16 x i16>* %14785, align 2, !tbaa !399
  %14787 = getelementptr inbounds i16, i16* %14784, i64 16
  %14788 = bitcast i16* %14787 to <16 x i16>*
  %14789 = load <16 x i16>, <16 x i16>* %14788, align 2, !tbaa !399
  %14790 = add nsw i64 %14540, %14775
  %14791 = getelementptr inbounds i16, i16* %blur_x, i64 %14790
  %14792 = bitcast i16* %14791 to <16 x i16>*
  %14793 = load <16 x i16>, <16 x i16>* %14792, align 2, !tbaa !399
  %14794 = getelementptr inbounds i16, i16* %14791, i64 16
  %14795 = bitcast i16* %14794 to <16 x i16>*
  %14796 = load <16 x i16>, <16 x i16>* %14795, align 2, !tbaa !399
  %14797 = add nsw i64 %14543, %14775
  %14798 = getelementptr inbounds i16, i16* %blur_x, i64 %14797
  %14799 = bitcast i16* %14798 to <16 x i16>*
  %14800 = load <16 x i16>, <16 x i16>* %14799, align 2, !tbaa !399
  %14801 = getelementptr inbounds i16, i16* %14798, i64 16
  %14802 = bitcast i16* %14801 to <16 x i16>*
  %14803 = load <16 x i16>, <16 x i16>* %14802, align 2, !tbaa !399
  %14804 = add nsw i64 %14546, %14775
  %14805 = getelementptr inbounds i16, i16* %blur_x, i64 %14804
  %14806 = bitcast i16* %14805 to <16 x i16>*
  %14807 = load <16 x i16>, <16 x i16>* %14806, align 2, !tbaa !399
  %14808 = getelementptr inbounds i16, i16* %14805, i64 16
  %14809 = bitcast i16* %14808 to <16 x i16>*
  %14810 = load <16 x i16>, <16 x i16>* %14809, align 2, !tbaa !399
  %14811 = add nsw i64 %14549, %14775
  %14812 = getelementptr inbounds i16, i16* %blur_x, i64 %14811
  %14813 = bitcast i16* %14812 to <16 x i16>*
  %14814 = load <16 x i16>, <16 x i16>* %14813, align 2, !tbaa !399
  %14815 = getelementptr inbounds i16, i16* %14812, i64 16
  %14816 = bitcast i16* %14815 to <16 x i16>*
  %14817 = load <16 x i16>, <16 x i16>* %14816, align 2, !tbaa !399
  %14818 = add nsw i64 %14552, %14775
  %14819 = getelementptr inbounds i16, i16* %blur_x, i64 %14818
  %14820 = bitcast i16* %14819 to <16 x i16>*
  %14821 = load <16 x i16>, <16 x i16>* %14820, align 2, !tbaa !399
  %14822 = getelementptr inbounds i16, i16* %14819, i64 16
  %14823 = bitcast i16* %14822 to <16 x i16>*
  %14824 = load <16 x i16>, <16 x i16>* %14823, align 2, !tbaa !399
  %14825 = add <16 x i16> %14786, %14779
  %14826 = add <16 x i16> %14825, %14793
  %14827 = add <16 x i16> %14826, %14800
  %14828 = add <16 x i16> %14827, %14807
  %14829 = add <16 x i16> %14828, %14814
  %14830 = add <16 x i16> %14829, %14821
  %14831 = add <16 x i16> %14789, %14782
  %14832 = add <16 x i16> %14831, %14796
  %14833 = add <16 x i16> %14832, %14803
  %14834 = add <16 x i16> %14833, %14810
  %14835 = add <16 x i16> %14834, %14817
  %14836 = add <16 x i16> %14835, %14824
  %14837 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14830, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14838 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14836, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14839 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14837, <16 x i16> %14830)
  %14840 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14838, <16 x i16> %14836)
  %14841 = shufflevector <16 x i16> %14839, <16 x i16> %14840, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14842 = lshr <32 x i16> %14841, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14843 = shufflevector <32 x i16> %14842, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14844 = add nsw i64 %14556, %14775
  %14845 = getelementptr inbounds i16, i16* %66, i64 %14844
  %14846 = bitcast i16* %14845 to <16 x i16>*
  store <16 x i16> %14843, <16 x i16>* %14846, align 2, !tbaa !401
  %14847 = shufflevector <32 x i16> %14842, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14848 = getelementptr inbounds i16, i16* %14845, i64 16
  %14849 = bitcast i16* %14848 to <16 x i16>*
  store <16 x i16> %14847, <16 x i16>* %14849, align 2, !tbaa !401
  %14850 = add nuw nsw i32 %blur_y.s0.x.x.rebased628, 1
  %.not2826 = icmp eq i32 %14850, %t1727
  br i1 %.not2826, label %"end for blur_y.s0.x.x.rebased627", label %"for blur_y.s0.x.x.rebased626"

after_bb635:                                      ; preds = %"end for blur_y.s0.x.x.rebased627", %"produce blur_x638"
  br i1 %100, label %"for blur_y.s0.x.x.rebased640.preheader", label %"end for blur_y.s0.x.x.rebased641", !prof !386

"for blur_y.s0.x.x.rebased640.preheader":         ; preds = %after_bb635
  %14851 = sext i32 %t1756 to i64
  %14852 = zext i32 %.pre-phi to i64
  %14853 = mul nsw i64 %14852, %116
  %14854 = sub nsw i64 %14853, %96
  %14855 = zext i32 %.pre-phi3605 to i64
  %14856 = mul nsw i64 %14855, %116
  %14857 = sub nsw i64 %14856, %96
  %14858 = zext i32 %.pre-phi3579 to i64
  %14859 = mul nsw i64 %14858, %116
  %14860 = sub nsw i64 %14859, %96
  %14861 = zext i32 %.pre-phi3583 to i64
  %14862 = mul nsw i64 %14861, %116
  %14863 = sub nsw i64 %14862, %96
  %14864 = zext i32 %.pre-phi3587 to i64
  %14865 = mul nsw i64 %14864, %116
  %14866 = sub nsw i64 %14865, %96
  %14867 = zext i32 %.pre-phi3595 to i64
  %14868 = mul nsw i64 %14867, %116
  %14869 = sub nsw i64 %14868, %96
  %14870 = zext i32 %.pre-phi3591 to i64
  %14871 = mul nsw i64 %14870, %116
  %14872 = sub nsw i64 %14871, %96
  %14873 = sext i32 %a26 to i64
  %14874 = add nsw i64 %14873, 23
  %14875 = mul nsw i64 %14874, %117
  %14876 = add nsw i64 %14875, %120
  br label %"for blur_y.s0.x.x.rebased640"

"produce blur_x638":                              ; preds = %"end for blur_y.s0.x.x.rebased627"
  %14877 = getelementptr inbounds i16, i16* %read_input, i64 %165
  %14878 = getelementptr inbounds i16, i16* %14877, i64 -31
  %14879 = bitcast i16* %14878 to <16 x i16>*
  %14880 = load <16 x i16>, <16 x i16>* %14879, align 2, !tbaa !396
  %14881 = getelementptr inbounds i16, i16* %14877, i64 -15
  %14882 = bitcast i16* %14881 to <16 x i16>*
  %14883 = load <16 x i16>, <16 x i16>* %14882, align 2, !tbaa !396
  %14884 = getelementptr inbounds i16, i16* %14877, i64 -32
  %14885 = bitcast i16* %14884 to <16 x i16>*
  %14886 = load <16 x i16>, <16 x i16>* %14885, align 2, !tbaa !396
  %14887 = getelementptr inbounds i16, i16* %14877, i64 -16
  %14888 = bitcast i16* %14887 to <16 x i16>*
  %14889 = load <16 x i16>, <16 x i16>* %14888, align 2, !tbaa !396
  %14890 = getelementptr inbounds i16, i16* %14877, i64 -30
  %14891 = bitcast i16* %14890 to <16 x i16>*
  %14892 = load <16 x i16>, <16 x i16>* %14891, align 2, !tbaa !396
  %14893 = getelementptr inbounds i16, i16* %14877, i64 -14
  %14894 = bitcast i16* %14893 to <16 x i16>*
  %14895 = load <16 x i16>, <16 x i16>* %14894, align 2, !tbaa !396
  %14896 = getelementptr inbounds i16, i16* %14877, i64 -29
  %14897 = bitcast i16* %14896 to <16 x i16>*
  %14898 = load <16 x i16>, <16 x i16>* %14897, align 2, !tbaa !396
  %14899 = getelementptr inbounds i16, i16* %14877, i64 -13
  %14900 = bitcast i16* %14899 to <16 x i16>*
  %14901 = load <16 x i16>, <16 x i16>* %14900, align 2, !tbaa !396
  %14902 = getelementptr inbounds i16, i16* %14877, i64 -28
  %14903 = bitcast i16* %14902 to <16 x i16>*
  %14904 = load <16 x i16>, <16 x i16>* %14903, align 2, !tbaa !396
  %14905 = getelementptr inbounds i16, i16* %14877, i64 -12
  %14906 = bitcast i16* %14905 to <16 x i16>*
  %14907 = load <16 x i16>, <16 x i16>* %14906, align 2, !tbaa !396
  %14908 = getelementptr inbounds i16, i16* %14877, i64 -26
  %14909 = bitcast i16* %14908 to <16 x i16>*
  %14910 = load <16 x i16>, <16 x i16>* %14909, align 2, !tbaa !396
  %14911 = getelementptr inbounds i16, i16* %14877, i64 -10
  %14912 = bitcast i16* %14911 to <16 x i16>*
  %14913 = load <16 x i16>, <16 x i16>* %14912, align 2, !tbaa !396
  %14914 = getelementptr inbounds i16, i16* %14877, i64 -27
  %14915 = bitcast i16* %14914 to <16 x i16>*
  %14916 = load <16 x i16>, <16 x i16>* %14915, align 2, !tbaa !396
  %14917 = getelementptr inbounds i16, i16* %14877, i64 -11
  %14918 = bitcast i16* %14917 to <16 x i16>*
  %14919 = load <16 x i16>, <16 x i16>* %14918, align 2, !tbaa !396
  %14920 = add <16 x i16> %14886, %14880
  %14921 = add <16 x i16> %14920, %14892
  %14922 = add <16 x i16> %14921, %14898
  %14923 = add <16 x i16> %14922, %14904
  %14924 = add <16 x i16> %14923, %14910
  %14925 = add <16 x i16> %14924, %14916
  %14926 = add <16 x i16> %14889, %14883
  %14927 = add <16 x i16> %14926, %14895
  %14928 = add <16 x i16> %14927, %14901
  %14929 = add <16 x i16> %14928, %14907
  %14930 = add <16 x i16> %14929, %14913
  %14931 = add <16 x i16> %14930, %14919
  %14932 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14925, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14933 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14931, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14934 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14932, <16 x i16> %14925)
  %14935 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14933, <16 x i16> %14931)
  %14936 = shufflevector <16 x i16> %14934, <16 x i16> %14935, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14937 = lshr <32 x i16> %14936, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14938 = shufflevector <32 x i16> %14937, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14939 = zext i32 %.pre-phi3595 to i64
  %14940 = mul nsw i64 %97, %14939
  %14941 = add nsw i64 %99, %14940
  %14942 = getelementptr inbounds i16, i16* %blur_x, i64 %14941
  %14943 = getelementptr inbounds i16, i16* %14942, i64 -32
  %14944 = bitcast i16* %14943 to <16 x i16>*
  store <16 x i16> %14938, <16 x i16>* %14944, align 2, !tbaa !399
  %14945 = shufflevector <32 x i16> %14937, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14946 = getelementptr inbounds i16, i16* %14942, i64 -16
  %14947 = bitcast i16* %14946 to <16 x i16>*
  store <16 x i16> %14945, <16 x i16>* %14947, align 2, !tbaa !399
  %14948 = zext i32 %.pre-phi to i64
  %14949 = mul nsw i64 %14948, %116
  %14950 = add nsw i64 %14949, %94
  %14951 = getelementptr inbounds i16, i16* %blur_x, i64 %14950
  %14952 = getelementptr inbounds i16, i16* %14951, i64 -32
  %14953 = bitcast i16* %14952 to <16 x i16>*
  %14954 = load <16 x i16>, <16 x i16>* %14953, align 2, !tbaa !399
  %14955 = getelementptr inbounds i16, i16* %14951, i64 -16
  %14956 = bitcast i16* %14955 to <16 x i16>*
  %14957 = load <16 x i16>, <16 x i16>* %14956, align 2, !tbaa !399
  %14958 = zext i32 %.pre-phi3605 to i64
  %14959 = mul nsw i64 %14958, %116
  %14960 = add nsw i64 %14959, %94
  %14961 = getelementptr inbounds i16, i16* %blur_x, i64 %14960
  %14962 = getelementptr inbounds i16, i16* %14961, i64 -32
  %14963 = bitcast i16* %14962 to <16 x i16>*
  %14964 = load <16 x i16>, <16 x i16>* %14963, align 2, !tbaa !399
  %14965 = getelementptr inbounds i16, i16* %14961, i64 -16
  %14966 = bitcast i16* %14965 to <16 x i16>*
  %14967 = load <16 x i16>, <16 x i16>* %14966, align 2, !tbaa !399
  %14968 = zext i32 %.pre-phi3579 to i64
  %14969 = mul nsw i64 %14968, %116
  %14970 = add nsw i64 %14969, %94
  %14971 = getelementptr inbounds i16, i16* %blur_x, i64 %14970
  %14972 = getelementptr inbounds i16, i16* %14971, i64 -32
  %14973 = bitcast i16* %14972 to <16 x i16>*
  %14974 = load <16 x i16>, <16 x i16>* %14973, align 2, !tbaa !399
  %14975 = getelementptr inbounds i16, i16* %14971, i64 -16
  %14976 = bitcast i16* %14975 to <16 x i16>*
  %14977 = load <16 x i16>, <16 x i16>* %14976, align 2, !tbaa !399
  %14978 = zext i32 %.pre-phi3583 to i64
  %14979 = mul nsw i64 %14978, %116
  %14980 = add nsw i64 %14979, %94
  %14981 = getelementptr inbounds i16, i16* %blur_x, i64 %14980
  %14982 = getelementptr inbounds i16, i16* %14981, i64 -32
  %14983 = bitcast i16* %14982 to <16 x i16>*
  %14984 = load <16 x i16>, <16 x i16>* %14983, align 2, !tbaa !399
  %14985 = getelementptr inbounds i16, i16* %14981, i64 -16
  %14986 = bitcast i16* %14985 to <16 x i16>*
  %14987 = load <16 x i16>, <16 x i16>* %14986, align 2, !tbaa !399
  %14988 = zext i32 %.pre-phi3587 to i64
  %14989 = mul nsw i64 %14988, %116
  %14990 = add nsw i64 %14989, %94
  %14991 = getelementptr inbounds i16, i16* %blur_x, i64 %14990
  %14992 = getelementptr inbounds i16, i16* %14991, i64 -32
  %14993 = bitcast i16* %14992 to <16 x i16>*
  %14994 = load <16 x i16>, <16 x i16>* %14993, align 2, !tbaa !399
  %14995 = getelementptr inbounds i16, i16* %14991, i64 -16
  %14996 = bitcast i16* %14995 to <16 x i16>*
  %14997 = load <16 x i16>, <16 x i16>* %14996, align 2, !tbaa !399
  %14998 = mul nsw i64 %14939, %116
  %14999 = add nsw i64 %14998, %94
  %15000 = getelementptr inbounds i16, i16* %blur_x, i64 %14999
  %15001 = getelementptr inbounds i16, i16* %15000, i64 -32
  %15002 = bitcast i16* %15001 to <16 x i16>*
  %15003 = load <16 x i16>, <16 x i16>* %15002, align 2, !tbaa !399
  %15004 = getelementptr inbounds i16, i16* %15000, i64 -16
  %15005 = bitcast i16* %15004 to <16 x i16>*
  %15006 = load <16 x i16>, <16 x i16>* %15005, align 2, !tbaa !399
  %15007 = zext i32 %.pre-phi3591 to i64
  %15008 = mul nsw i64 %15007, %116
  %15009 = add nsw i64 %15008, %94
  %15010 = getelementptr inbounds i16, i16* %blur_x, i64 %15009
  %15011 = getelementptr inbounds i16, i16* %15010, i64 -32
  %15012 = bitcast i16* %15011 to <16 x i16>*
  %15013 = load <16 x i16>, <16 x i16>* %15012, align 2, !tbaa !399
  %15014 = getelementptr inbounds i16, i16* %15010, i64 -16
  %15015 = bitcast i16* %15014 to <16 x i16>*
  %15016 = load <16 x i16>, <16 x i16>* %15015, align 2, !tbaa !399
  %15017 = add <16 x i16> %14964, %14954
  %15018 = add <16 x i16> %15017, %14974
  %15019 = add <16 x i16> %15018, %14984
  %15020 = add <16 x i16> %15019, %14994
  %15021 = add <16 x i16> %15020, %15003
  %15022 = add <16 x i16> %15021, %15013
  %15023 = add <16 x i16> %14967, %14957
  %15024 = add <16 x i16> %15023, %14977
  %15025 = add <16 x i16> %15024, %14987
  %15026 = add <16 x i16> %15025, %14997
  %15027 = add <16 x i16> %15026, %15006
  %15028 = add <16 x i16> %15027, %15016
  %15029 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15022, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15030 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15028, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15031 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15029, <16 x i16> %15022)
  %15032 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15030, <16 x i16> %15028)
  %15033 = shufflevector <16 x i16> %15031, <16 x i16> %15032, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15034 = lshr <32 x i16> %15033, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15035 = shufflevector <32 x i16> %15034, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15036 = sext i32 %a26 to i64
  %15037 = add nsw i64 %15036, 23
  %15038 = mul nsw i64 %15037, %117
  %15039 = add nsw i64 %119, %15038
  %15040 = getelementptr inbounds i16, i16* %66, i64 %15039
  %15041 = getelementptr inbounds i16, i16* %15040, i64 -32
  %15042 = bitcast i16* %15041 to <16 x i16>*
  store <16 x i16> %15035, <16 x i16>* %15042, align 2, !tbaa !401
  %15043 = shufflevector <32 x i16> %15034, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15044 = getelementptr inbounds i16, i16* %15040, i64 -16
  %15045 = bitcast i16* %15044 to <16 x i16>*
  store <16 x i16> %15043, <16 x i16>* %15045, align 2, !tbaa !401
  br label %after_bb635

"for blur_y.s0.x.x.rebased640":                   ; preds = %"for blur_y.s0.x.x.rebased640.preheader", %"consume blur_x647"
  %indvars.iv3458 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased640.preheader" ], [ %indvars.iv.next3459, %"consume blur_x647" ]
  %15046 = add nsw i64 %indvars.iv3458, %101
  %15047 = icmp slt i64 %15046, 1
  %15048 = trunc i64 %15046 to i32
  %15049 = shl nsw i32 %15048, 5
  %15050 = icmp sgt i32 %4, %15049
  %15051 = or i1 %15047, %15050
  br i1 %15051, label %"produce blur_x646", label %"for blur_y.s0.x.x.rebased640.consume blur_x647_crit_edge"

"for blur_y.s0.x.x.rebased640.consume blur_x647_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased640"
  %.pre3650 = shl nsw i64 %15046, 5
  br label %"consume blur_x647"

"end for blur_y.s0.x.x.rebased641":               ; preds = %"consume blur_x647", %after_bb635
  br i1 %102, label %"for blur_y.s0.x.x.rebased648.preheader", label %"end for blur_y.s0.x.x.rebased649", !prof !386

"for blur_y.s0.x.x.rebased648.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased641"
  %15052 = sext i32 %t1756 to i64
  %15053 = zext i32 %.pre-phi to i64
  %15054 = mul nsw i64 %15053, %116
  %15055 = sub nsw i64 %15054, %96
  %15056 = zext i32 %.pre-phi3605 to i64
  %15057 = mul nsw i64 %15056, %116
  %15058 = sub nsw i64 %15057, %96
  %15059 = zext i32 %.pre-phi3579 to i64
  %15060 = mul nsw i64 %15059, %116
  %15061 = sub nsw i64 %15060, %96
  %15062 = zext i32 %.pre-phi3583 to i64
  %15063 = mul nsw i64 %15062, %116
  %15064 = sub nsw i64 %15063, %96
  %15065 = zext i32 %.pre-phi3587 to i64
  %15066 = mul nsw i64 %15065, %116
  %15067 = sub nsw i64 %15066, %96
  %15068 = zext i32 %.pre-phi3595 to i64
  %15069 = mul nsw i64 %15068, %116
  %15070 = sub nsw i64 %15069, %96
  %15071 = zext i32 %.pre-phi3591 to i64
  %15072 = mul nsw i64 %15071, %116
  %15073 = sub nsw i64 %15072, %96
  %15074 = sext i32 %a26 to i64
  %15075 = add nsw i64 %15074, 23
  %15076 = mul nsw i64 %15075, %117
  %15077 = add nsw i64 %15076, %120
  br label %"for blur_y.s0.x.x.rebased648"

"produce blur_x646":                              ; preds = %"for blur_y.s0.x.x.rebased640"
  %t1120 = add nsw i32 %15049, %t2129
  %15078 = sext i32 %t1120 to i64
  %15079 = getelementptr inbounds i16, i16* %read_input, i64 %15078
  %15080 = getelementptr inbounds i16, i16* %15079, i64 1
  %15081 = bitcast i16* %15080 to <16 x i16>*
  %15082 = load <16 x i16>, <16 x i16>* %15081, align 2, !tbaa !396
  %15083 = getelementptr inbounds i16, i16* %15079, i64 17
  %15084 = bitcast i16* %15083 to <16 x i16>*
  %15085 = load <16 x i16>, <16 x i16>* %15084, align 2, !tbaa !396
  %15086 = bitcast i16* %15079 to <16 x i16>*
  %15087 = load <16 x i16>, <16 x i16>* %15086, align 2, !tbaa !396
  %15088 = getelementptr inbounds i16, i16* %15079, i64 16
  %15089 = bitcast i16* %15088 to <16 x i16>*
  %15090 = load <16 x i16>, <16 x i16>* %15089, align 2, !tbaa !396
  %15091 = getelementptr inbounds i16, i16* %15079, i64 2
  %15092 = bitcast i16* %15091 to <16 x i16>*
  %15093 = load <16 x i16>, <16 x i16>* %15092, align 2, !tbaa !396
  %15094 = getelementptr inbounds i16, i16* %15079, i64 18
  %15095 = bitcast i16* %15094 to <16 x i16>*
  %15096 = load <16 x i16>, <16 x i16>* %15095, align 2, !tbaa !396
  %15097 = getelementptr inbounds i16, i16* %15079, i64 3
  %15098 = bitcast i16* %15097 to <16 x i16>*
  %15099 = load <16 x i16>, <16 x i16>* %15098, align 2, !tbaa !396
  %15100 = getelementptr inbounds i16, i16* %15079, i64 19
  %15101 = bitcast i16* %15100 to <16 x i16>*
  %15102 = load <16 x i16>, <16 x i16>* %15101, align 2, !tbaa !396
  %15103 = getelementptr inbounds i16, i16* %15079, i64 4
  %15104 = bitcast i16* %15103 to <16 x i16>*
  %15105 = load <16 x i16>, <16 x i16>* %15104, align 2, !tbaa !396
  %15106 = getelementptr inbounds i16, i16* %15079, i64 20
  %15107 = bitcast i16* %15106 to <16 x i16>*
  %15108 = load <16 x i16>, <16 x i16>* %15107, align 2, !tbaa !396
  %15109 = getelementptr inbounds i16, i16* %15079, i64 6
  %15110 = bitcast i16* %15109 to <16 x i16>*
  %15111 = load <16 x i16>, <16 x i16>* %15110, align 2, !tbaa !396
  %15112 = getelementptr inbounds i16, i16* %15079, i64 22
  %15113 = bitcast i16* %15112 to <16 x i16>*
  %15114 = load <16 x i16>, <16 x i16>* %15113, align 2, !tbaa !396
  %15115 = getelementptr inbounds i16, i16* %15079, i64 5
  %15116 = bitcast i16* %15115 to <16 x i16>*
  %15117 = load <16 x i16>, <16 x i16>* %15116, align 2, !tbaa !396
  %15118 = getelementptr inbounds i16, i16* %15079, i64 21
  %15119 = bitcast i16* %15118 to <16 x i16>*
  %15120 = load <16 x i16>, <16 x i16>* %15119, align 2, !tbaa !396
  %15121 = add <16 x i16> %15087, %15082
  %15122 = add <16 x i16> %15121, %15093
  %15123 = add <16 x i16> %15122, %15099
  %15124 = add <16 x i16> %15123, %15105
  %15125 = add <16 x i16> %15124, %15111
  %15126 = add <16 x i16> %15125, %15117
  %15127 = add <16 x i16> %15090, %15085
  %15128 = add <16 x i16> %15127, %15096
  %15129 = add <16 x i16> %15128, %15102
  %15130 = add <16 x i16> %15129, %15108
  %15131 = add <16 x i16> %15130, %15114
  %15132 = add <16 x i16> %15131, %15120
  %15133 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15126, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15134 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15132, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15135 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15133, <16 x i16> %15126)
  %15136 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15134, <16 x i16> %15132)
  %15137 = shufflevector <16 x i16> %15135, <16 x i16> %15136, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15138 = lshr <32 x i16> %15137, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15139 = shufflevector <32 x i16> %15138, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15140 = shl nsw i64 %15046, 5
  %15141 = add nsw i64 %15140, %14851
  %15142 = getelementptr inbounds i16, i16* %blur_x, i64 %15141
  %15143 = bitcast i16* %15142 to <16 x i16>*
  store <16 x i16> %15139, <16 x i16>* %15143, align 2, !tbaa !399
  %15144 = shufflevector <32 x i16> %15138, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15145 = getelementptr inbounds i16, i16* %15142, i64 16
  %15146 = bitcast i16* %15145 to <16 x i16>*
  store <16 x i16> %15144, <16 x i16>* %15146, align 2, !tbaa !399
  br label %"consume blur_x647"

"consume blur_x647":                              ; preds = %"for blur_y.s0.x.x.rebased640.consume blur_x647_crit_edge", %"produce blur_x646"
  %.pre-phi3651 = phi i64 [ %.pre3650, %"for blur_y.s0.x.x.rebased640.consume blur_x647_crit_edge" ], [ %15140, %"produce blur_x646" ]
  %15147 = add nsw i64 %14854, %.pre-phi3651
  %15148 = getelementptr inbounds i16, i16* %blur_x, i64 %15147
  %15149 = bitcast i16* %15148 to <16 x i16>*
  %15150 = load <16 x i16>, <16 x i16>* %15149, align 2, !tbaa !399
  %15151 = getelementptr inbounds i16, i16* %15148, i64 16
  %15152 = bitcast i16* %15151 to <16 x i16>*
  %15153 = load <16 x i16>, <16 x i16>* %15152, align 2, !tbaa !399
  %15154 = add nsw i64 %14857, %.pre-phi3651
  %15155 = getelementptr inbounds i16, i16* %blur_x, i64 %15154
  %15156 = bitcast i16* %15155 to <16 x i16>*
  %15157 = load <16 x i16>, <16 x i16>* %15156, align 2, !tbaa !399
  %15158 = getelementptr inbounds i16, i16* %15155, i64 16
  %15159 = bitcast i16* %15158 to <16 x i16>*
  %15160 = load <16 x i16>, <16 x i16>* %15159, align 2, !tbaa !399
  %15161 = add nsw i64 %14860, %.pre-phi3651
  %15162 = getelementptr inbounds i16, i16* %blur_x, i64 %15161
  %15163 = bitcast i16* %15162 to <16 x i16>*
  %15164 = load <16 x i16>, <16 x i16>* %15163, align 2, !tbaa !399
  %15165 = getelementptr inbounds i16, i16* %15162, i64 16
  %15166 = bitcast i16* %15165 to <16 x i16>*
  %15167 = load <16 x i16>, <16 x i16>* %15166, align 2, !tbaa !399
  %15168 = add nsw i64 %14863, %.pre-phi3651
  %15169 = getelementptr inbounds i16, i16* %blur_x, i64 %15168
  %15170 = bitcast i16* %15169 to <16 x i16>*
  %15171 = load <16 x i16>, <16 x i16>* %15170, align 2, !tbaa !399
  %15172 = getelementptr inbounds i16, i16* %15169, i64 16
  %15173 = bitcast i16* %15172 to <16 x i16>*
  %15174 = load <16 x i16>, <16 x i16>* %15173, align 2, !tbaa !399
  %15175 = add nsw i64 %14866, %.pre-phi3651
  %15176 = getelementptr inbounds i16, i16* %blur_x, i64 %15175
  %15177 = bitcast i16* %15176 to <16 x i16>*
  %15178 = load <16 x i16>, <16 x i16>* %15177, align 2, !tbaa !399
  %15179 = getelementptr inbounds i16, i16* %15176, i64 16
  %15180 = bitcast i16* %15179 to <16 x i16>*
  %15181 = load <16 x i16>, <16 x i16>* %15180, align 2, !tbaa !399
  %15182 = add nsw i64 %14869, %.pre-phi3651
  %15183 = getelementptr inbounds i16, i16* %blur_x, i64 %15182
  %15184 = bitcast i16* %15183 to <16 x i16>*
  %15185 = load <16 x i16>, <16 x i16>* %15184, align 2, !tbaa !399
  %15186 = getelementptr inbounds i16, i16* %15183, i64 16
  %15187 = bitcast i16* %15186 to <16 x i16>*
  %15188 = load <16 x i16>, <16 x i16>* %15187, align 2, !tbaa !399
  %15189 = add nsw i64 %14872, %.pre-phi3651
  %15190 = getelementptr inbounds i16, i16* %blur_x, i64 %15189
  %15191 = bitcast i16* %15190 to <16 x i16>*
  %15192 = load <16 x i16>, <16 x i16>* %15191, align 2, !tbaa !399
  %15193 = getelementptr inbounds i16, i16* %15190, i64 16
  %15194 = bitcast i16* %15193 to <16 x i16>*
  %15195 = load <16 x i16>, <16 x i16>* %15194, align 2, !tbaa !399
  %15196 = add <16 x i16> %15157, %15150
  %15197 = add <16 x i16> %15196, %15164
  %15198 = add <16 x i16> %15197, %15171
  %15199 = add <16 x i16> %15198, %15178
  %15200 = add <16 x i16> %15199, %15185
  %15201 = add <16 x i16> %15200, %15192
  %15202 = add <16 x i16> %15160, %15153
  %15203 = add <16 x i16> %15202, %15167
  %15204 = add <16 x i16> %15203, %15174
  %15205 = add <16 x i16> %15204, %15181
  %15206 = add <16 x i16> %15205, %15188
  %15207 = add <16 x i16> %15206, %15195
  %15208 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15201, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15209 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15207, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15210 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15208, <16 x i16> %15201)
  %15211 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15209, <16 x i16> %15207)
  %15212 = shufflevector <16 x i16> %15210, <16 x i16> %15211, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15213 = lshr <32 x i16> %15212, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15214 = shufflevector <32 x i16> %15213, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15215 = add nsw i64 %14876, %.pre-phi3651
  %15216 = getelementptr inbounds i16, i16* %66, i64 %15215
  %15217 = bitcast i16* %15216 to <16 x i16>*
  store <16 x i16> %15214, <16 x i16>* %15217, align 2, !tbaa !401
  %15218 = shufflevector <32 x i16> %15213, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15219 = getelementptr inbounds i16, i16* %15216, i64 16
  %15220 = bitcast i16* %15219 to <16 x i16>*
  store <16 x i16> %15218, <16 x i16>* %15220, align 2, !tbaa !401
  %indvars.iv.next3459 = add nuw nsw i64 %indvars.iv3458, 1
  %.not2825 = icmp eq i64 %indvars.iv.next3459, %188
  br i1 %.not2825, label %"end for blur_y.s0.x.x.rebased641", label %"for blur_y.s0.x.x.rebased640"

"for blur_y.s0.x.x.rebased648":                   ; preds = %"for blur_y.s0.x.x.rebased648.preheader", %"consume blur_x656"
  %blur_y.s0.x.x.rebased650 = phi i32 [ %15371, %"consume blur_x656" ], [ 0, %"for blur_y.s0.x.x.rebased648.preheader" ]
  %15221 = add nsw i32 %blur_y.s0.x.x.rebased650, %t1670
  %a280 = shl nsw i32 %15221, 5
  %15222 = icmp sgt i32 %a14, %a280
  %b286 = select i1 %15222, i32 %a280, i32 %a14
  %15223 = icmp slt i32 %15221, 1
  %15224 = icmp sgt i32 %4, %a280
  %15225 = or i1 %15223, %15224
  br i1 %15225, label %"produce blur_x654", label %"consume blur_x656"

"end for blur_y.s0.x.x.rebased649":               ; preds = %"consume blur_x656", %"end for blur_y.s0.x.x.rebased641"
  br i1 %34, label %"produce blur_x660", label %after_bb657

"produce blur_x654":                              ; preds = %"for blur_y.s0.x.x.rebased648"
  %15226 = icmp slt i32 %b286, %4
  %blur_x.s0.x.v1.base.s655 = select i1 %15226, i32 %b286, i32 %4
  %t1125 = add nsw i32 %blur_x.s0.x.v1.base.s655, %t2129
  %15227 = sext i32 %t1125 to i64
  %15228 = getelementptr inbounds i16, i16* %read_input, i64 %15227
  %15229 = getelementptr inbounds i16, i16* %15228, i64 1
  %15230 = bitcast i16* %15229 to <16 x i16>*
  %15231 = load <16 x i16>, <16 x i16>* %15230, align 2, !tbaa !396
  %15232 = getelementptr inbounds i16, i16* %15228, i64 17
  %15233 = bitcast i16* %15232 to <16 x i16>*
  %15234 = load <16 x i16>, <16 x i16>* %15233, align 2, !tbaa !396
  %15235 = bitcast i16* %15228 to <16 x i16>*
  %15236 = load <16 x i16>, <16 x i16>* %15235, align 2, !tbaa !396
  %15237 = getelementptr inbounds i16, i16* %15228, i64 16
  %15238 = bitcast i16* %15237 to <16 x i16>*
  %15239 = load <16 x i16>, <16 x i16>* %15238, align 2, !tbaa !396
  %15240 = getelementptr inbounds i16, i16* %15228, i64 2
  %15241 = bitcast i16* %15240 to <16 x i16>*
  %15242 = load <16 x i16>, <16 x i16>* %15241, align 2, !tbaa !396
  %15243 = getelementptr inbounds i16, i16* %15228, i64 18
  %15244 = bitcast i16* %15243 to <16 x i16>*
  %15245 = load <16 x i16>, <16 x i16>* %15244, align 2, !tbaa !396
  %15246 = getelementptr inbounds i16, i16* %15228, i64 3
  %15247 = bitcast i16* %15246 to <16 x i16>*
  %15248 = load <16 x i16>, <16 x i16>* %15247, align 2, !tbaa !396
  %15249 = getelementptr inbounds i16, i16* %15228, i64 19
  %15250 = bitcast i16* %15249 to <16 x i16>*
  %15251 = load <16 x i16>, <16 x i16>* %15250, align 2, !tbaa !396
  %15252 = getelementptr inbounds i16, i16* %15228, i64 4
  %15253 = bitcast i16* %15252 to <16 x i16>*
  %15254 = load <16 x i16>, <16 x i16>* %15253, align 2, !tbaa !396
  %15255 = getelementptr inbounds i16, i16* %15228, i64 20
  %15256 = bitcast i16* %15255 to <16 x i16>*
  %15257 = load <16 x i16>, <16 x i16>* %15256, align 2, !tbaa !396
  %15258 = getelementptr inbounds i16, i16* %15228, i64 6
  %15259 = bitcast i16* %15258 to <16 x i16>*
  %15260 = load <16 x i16>, <16 x i16>* %15259, align 2, !tbaa !396
  %15261 = getelementptr inbounds i16, i16* %15228, i64 22
  %15262 = bitcast i16* %15261 to <16 x i16>*
  %15263 = load <16 x i16>, <16 x i16>* %15262, align 2, !tbaa !396
  %15264 = getelementptr inbounds i16, i16* %15228, i64 5
  %15265 = bitcast i16* %15264 to <16 x i16>*
  %15266 = load <16 x i16>, <16 x i16>* %15265, align 2, !tbaa !396
  %15267 = getelementptr inbounds i16, i16* %15228, i64 21
  %15268 = bitcast i16* %15267 to <16 x i16>*
  %15269 = load <16 x i16>, <16 x i16>* %15268, align 2, !tbaa !396
  %15270 = add <16 x i16> %15236, %15231
  %15271 = add <16 x i16> %15270, %15242
  %15272 = add <16 x i16> %15271, %15248
  %15273 = add <16 x i16> %15272, %15254
  %15274 = add <16 x i16> %15273, %15260
  %15275 = add <16 x i16> %15274, %15266
  %15276 = add <16 x i16> %15239, %15234
  %15277 = add <16 x i16> %15276, %15245
  %15278 = add <16 x i16> %15277, %15251
  %15279 = add <16 x i16> %15278, %15257
  %15280 = add <16 x i16> %15279, %15263
  %15281 = add <16 x i16> %15280, %15269
  %15282 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15275, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15283 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15281, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15284 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15282, <16 x i16> %15275)
  %15285 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15283, <16 x i16> %15281)
  %15286 = shufflevector <16 x i16> %15284, <16 x i16> %15285, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15287 = lshr <32 x i16> %15286, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15288 = shufflevector <32 x i16> %15287, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15289 = sext i32 %blur_x.s0.x.v1.base.s655 to i64
  %15290 = add nsw i64 %15289, %15052
  %15291 = getelementptr inbounds i16, i16* %blur_x, i64 %15290
  %15292 = bitcast i16* %15291 to <16 x i16>*
  store <16 x i16> %15288, <16 x i16>* %15292, align 2, !tbaa !399
  %15293 = shufflevector <32 x i16> %15287, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15294 = getelementptr inbounds i16, i16* %15291, i64 16
  %15295 = bitcast i16* %15294 to <16 x i16>*
  store <16 x i16> %15293, <16 x i16>* %15295, align 2, !tbaa !399
  br label %"consume blur_x656"

"consume blur_x656":                              ; preds = %"for blur_y.s0.x.x.rebased648", %"produce blur_x654"
  %15296 = sext i32 %b286 to i64
  %15297 = add nsw i64 %15055, %15296
  %15298 = getelementptr inbounds i16, i16* %blur_x, i64 %15297
  %15299 = bitcast i16* %15298 to <16 x i16>*
  %15300 = load <16 x i16>, <16 x i16>* %15299, align 2, !tbaa !399
  %15301 = getelementptr inbounds i16, i16* %15298, i64 16
  %15302 = bitcast i16* %15301 to <16 x i16>*
  %15303 = load <16 x i16>, <16 x i16>* %15302, align 2, !tbaa !399
  %15304 = add nsw i64 %15058, %15296
  %15305 = getelementptr inbounds i16, i16* %blur_x, i64 %15304
  %15306 = bitcast i16* %15305 to <16 x i16>*
  %15307 = load <16 x i16>, <16 x i16>* %15306, align 2, !tbaa !399
  %15308 = getelementptr inbounds i16, i16* %15305, i64 16
  %15309 = bitcast i16* %15308 to <16 x i16>*
  %15310 = load <16 x i16>, <16 x i16>* %15309, align 2, !tbaa !399
  %15311 = add nsw i64 %15061, %15296
  %15312 = getelementptr inbounds i16, i16* %blur_x, i64 %15311
  %15313 = bitcast i16* %15312 to <16 x i16>*
  %15314 = load <16 x i16>, <16 x i16>* %15313, align 2, !tbaa !399
  %15315 = getelementptr inbounds i16, i16* %15312, i64 16
  %15316 = bitcast i16* %15315 to <16 x i16>*
  %15317 = load <16 x i16>, <16 x i16>* %15316, align 2, !tbaa !399
  %15318 = add nsw i64 %15064, %15296
  %15319 = getelementptr inbounds i16, i16* %blur_x, i64 %15318
  %15320 = bitcast i16* %15319 to <16 x i16>*
  %15321 = load <16 x i16>, <16 x i16>* %15320, align 2, !tbaa !399
  %15322 = getelementptr inbounds i16, i16* %15319, i64 16
  %15323 = bitcast i16* %15322 to <16 x i16>*
  %15324 = load <16 x i16>, <16 x i16>* %15323, align 2, !tbaa !399
  %15325 = add nsw i64 %15067, %15296
  %15326 = getelementptr inbounds i16, i16* %blur_x, i64 %15325
  %15327 = bitcast i16* %15326 to <16 x i16>*
  %15328 = load <16 x i16>, <16 x i16>* %15327, align 2, !tbaa !399
  %15329 = getelementptr inbounds i16, i16* %15326, i64 16
  %15330 = bitcast i16* %15329 to <16 x i16>*
  %15331 = load <16 x i16>, <16 x i16>* %15330, align 2, !tbaa !399
  %15332 = add nsw i64 %15070, %15296
  %15333 = getelementptr inbounds i16, i16* %blur_x, i64 %15332
  %15334 = bitcast i16* %15333 to <16 x i16>*
  %15335 = load <16 x i16>, <16 x i16>* %15334, align 2, !tbaa !399
  %15336 = getelementptr inbounds i16, i16* %15333, i64 16
  %15337 = bitcast i16* %15336 to <16 x i16>*
  %15338 = load <16 x i16>, <16 x i16>* %15337, align 2, !tbaa !399
  %15339 = add nsw i64 %15073, %15296
  %15340 = getelementptr inbounds i16, i16* %blur_x, i64 %15339
  %15341 = bitcast i16* %15340 to <16 x i16>*
  %15342 = load <16 x i16>, <16 x i16>* %15341, align 2, !tbaa !399
  %15343 = getelementptr inbounds i16, i16* %15340, i64 16
  %15344 = bitcast i16* %15343 to <16 x i16>*
  %15345 = load <16 x i16>, <16 x i16>* %15344, align 2, !tbaa !399
  %15346 = add <16 x i16> %15307, %15300
  %15347 = add <16 x i16> %15346, %15314
  %15348 = add <16 x i16> %15347, %15321
  %15349 = add <16 x i16> %15348, %15328
  %15350 = add <16 x i16> %15349, %15335
  %15351 = add <16 x i16> %15350, %15342
  %15352 = add <16 x i16> %15310, %15303
  %15353 = add <16 x i16> %15352, %15317
  %15354 = add <16 x i16> %15353, %15324
  %15355 = add <16 x i16> %15354, %15331
  %15356 = add <16 x i16> %15355, %15338
  %15357 = add <16 x i16> %15356, %15345
  %15358 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15351, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15359 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15357, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15360 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15358, <16 x i16> %15351)
  %15361 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15359, <16 x i16> %15357)
  %15362 = shufflevector <16 x i16> %15360, <16 x i16> %15361, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15363 = lshr <32 x i16> %15362, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15364 = shufflevector <32 x i16> %15363, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15365 = add nsw i64 %15077, %15296
  %15366 = getelementptr inbounds i16, i16* %66, i64 %15365
  %15367 = bitcast i16* %15366 to <16 x i16>*
  store <16 x i16> %15364, <16 x i16>* %15367, align 2, !tbaa !401
  %15368 = shufflevector <32 x i16> %15363, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15369 = getelementptr inbounds i16, i16* %15366, i64 16
  %15370 = bitcast i16* %15369 to <16 x i16>*
  store <16 x i16> %15368, <16 x i16>* %15370, align 2, !tbaa !401
  %15371 = add nuw nsw i32 %blur_y.s0.x.x.rebased650, 1
  %.not2824 = icmp eq i32 %15371, %t1727
  br i1 %.not2824, label %"end for blur_y.s0.x.x.rebased649", label %"for blur_y.s0.x.x.rebased648"

after_bb657:                                      ; preds = %"end for blur_y.s0.x.x.rebased649", %"produce blur_x660"
  br i1 %100, label %"for blur_y.s0.x.x.rebased662.preheader", label %"end for blur_y.s0.x.x.rebased663", !prof !386

"for blur_y.s0.x.x.rebased662.preheader":         ; preds = %after_bb657
  %15372 = sext i32 %t1762 to i64
  %15373 = zext i32 %.pre-phi3579 to i64
  %15374 = mul nsw i64 %15373, %116
  %15375 = sub nsw i64 %15374, %96
  %15376 = zext i32 %.pre-phi to i64
  %15377 = mul nsw i64 %15376, %116
  %15378 = sub nsw i64 %15377, %96
  %15379 = zext i32 %.pre-phi3583 to i64
  %15380 = mul nsw i64 %15379, %116
  %15381 = sub nsw i64 %15380, %96
  %15382 = zext i32 %.pre-phi3587 to i64
  %15383 = mul nsw i64 %15382, %116
  %15384 = sub nsw i64 %15383, %96
  %15385 = zext i32 %.pre-phi3591 to i64
  %15386 = mul nsw i64 %15385, %116
  %15387 = sub nsw i64 %15386, %96
  %15388 = zext i32 %.pre-phi3599 to i64
  %15389 = mul nsw i64 %15388, %116
  %15390 = sub nsw i64 %15389, %96
  %15391 = zext i32 %.pre-phi3595 to i64
  %15392 = mul nsw i64 %15391, %116
  %15393 = sub nsw i64 %15392, %96
  %15394 = sext i32 %a26 to i64
  %15395 = add nsw i64 %15394, 24
  %15396 = mul nsw i64 %15395, %117
  %15397 = add nsw i64 %15396, %120
  br label %"for blur_y.s0.x.x.rebased662"

"produce blur_x660":                              ; preds = %"end for blur_y.s0.x.x.rebased649"
  %15398 = getelementptr inbounds i16, i16* %read_input, i64 %167
  %15399 = getelementptr inbounds i16, i16* %15398, i64 -31
  %15400 = bitcast i16* %15399 to <16 x i16>*
  %15401 = load <16 x i16>, <16 x i16>* %15400, align 2, !tbaa !396
  %15402 = getelementptr inbounds i16, i16* %15398, i64 -15
  %15403 = bitcast i16* %15402 to <16 x i16>*
  %15404 = load <16 x i16>, <16 x i16>* %15403, align 2, !tbaa !396
  %15405 = getelementptr inbounds i16, i16* %15398, i64 -32
  %15406 = bitcast i16* %15405 to <16 x i16>*
  %15407 = load <16 x i16>, <16 x i16>* %15406, align 2, !tbaa !396
  %15408 = getelementptr inbounds i16, i16* %15398, i64 -16
  %15409 = bitcast i16* %15408 to <16 x i16>*
  %15410 = load <16 x i16>, <16 x i16>* %15409, align 2, !tbaa !396
  %15411 = getelementptr inbounds i16, i16* %15398, i64 -30
  %15412 = bitcast i16* %15411 to <16 x i16>*
  %15413 = load <16 x i16>, <16 x i16>* %15412, align 2, !tbaa !396
  %15414 = getelementptr inbounds i16, i16* %15398, i64 -14
  %15415 = bitcast i16* %15414 to <16 x i16>*
  %15416 = load <16 x i16>, <16 x i16>* %15415, align 2, !tbaa !396
  %15417 = getelementptr inbounds i16, i16* %15398, i64 -29
  %15418 = bitcast i16* %15417 to <16 x i16>*
  %15419 = load <16 x i16>, <16 x i16>* %15418, align 2, !tbaa !396
  %15420 = getelementptr inbounds i16, i16* %15398, i64 -13
  %15421 = bitcast i16* %15420 to <16 x i16>*
  %15422 = load <16 x i16>, <16 x i16>* %15421, align 2, !tbaa !396
  %15423 = getelementptr inbounds i16, i16* %15398, i64 -28
  %15424 = bitcast i16* %15423 to <16 x i16>*
  %15425 = load <16 x i16>, <16 x i16>* %15424, align 2, !tbaa !396
  %15426 = getelementptr inbounds i16, i16* %15398, i64 -12
  %15427 = bitcast i16* %15426 to <16 x i16>*
  %15428 = load <16 x i16>, <16 x i16>* %15427, align 2, !tbaa !396
  %15429 = getelementptr inbounds i16, i16* %15398, i64 -26
  %15430 = bitcast i16* %15429 to <16 x i16>*
  %15431 = load <16 x i16>, <16 x i16>* %15430, align 2, !tbaa !396
  %15432 = getelementptr inbounds i16, i16* %15398, i64 -10
  %15433 = bitcast i16* %15432 to <16 x i16>*
  %15434 = load <16 x i16>, <16 x i16>* %15433, align 2, !tbaa !396
  %15435 = getelementptr inbounds i16, i16* %15398, i64 -27
  %15436 = bitcast i16* %15435 to <16 x i16>*
  %15437 = load <16 x i16>, <16 x i16>* %15436, align 2, !tbaa !396
  %15438 = getelementptr inbounds i16, i16* %15398, i64 -11
  %15439 = bitcast i16* %15438 to <16 x i16>*
  %15440 = load <16 x i16>, <16 x i16>* %15439, align 2, !tbaa !396
  %15441 = add <16 x i16> %15407, %15401
  %15442 = add <16 x i16> %15441, %15413
  %15443 = add <16 x i16> %15442, %15419
  %15444 = add <16 x i16> %15443, %15425
  %15445 = add <16 x i16> %15444, %15431
  %15446 = add <16 x i16> %15445, %15437
  %15447 = add <16 x i16> %15410, %15404
  %15448 = add <16 x i16> %15447, %15416
  %15449 = add <16 x i16> %15448, %15422
  %15450 = add <16 x i16> %15449, %15428
  %15451 = add <16 x i16> %15450, %15434
  %15452 = add <16 x i16> %15451, %15440
  %15453 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15446, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15454 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15452, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15455 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15453, <16 x i16> %15446)
  %15456 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15454, <16 x i16> %15452)
  %15457 = shufflevector <16 x i16> %15455, <16 x i16> %15456, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15458 = lshr <32 x i16> %15457, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15459 = shufflevector <32 x i16> %15458, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15460 = zext i32 %.pre-phi3599 to i64
  %15461 = mul nsw i64 %97, %15460
  %15462 = add nsw i64 %99, %15461
  %15463 = getelementptr inbounds i16, i16* %blur_x, i64 %15462
  %15464 = getelementptr inbounds i16, i16* %15463, i64 -32
  %15465 = bitcast i16* %15464 to <16 x i16>*
  store <16 x i16> %15459, <16 x i16>* %15465, align 2, !tbaa !399
  %15466 = shufflevector <32 x i16> %15458, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15467 = getelementptr inbounds i16, i16* %15463, i64 -16
  %15468 = bitcast i16* %15467 to <16 x i16>*
  store <16 x i16> %15466, <16 x i16>* %15468, align 2, !tbaa !399
  %15469 = zext i32 %.pre-phi3579 to i64
  %15470 = mul nsw i64 %15469, %116
  %15471 = add nsw i64 %15470, %94
  %15472 = getelementptr inbounds i16, i16* %blur_x, i64 %15471
  %15473 = getelementptr inbounds i16, i16* %15472, i64 -32
  %15474 = bitcast i16* %15473 to <16 x i16>*
  %15475 = load <16 x i16>, <16 x i16>* %15474, align 2, !tbaa !399
  %15476 = getelementptr inbounds i16, i16* %15472, i64 -16
  %15477 = bitcast i16* %15476 to <16 x i16>*
  %15478 = load <16 x i16>, <16 x i16>* %15477, align 2, !tbaa !399
  %15479 = zext i32 %.pre-phi to i64
  %15480 = mul nsw i64 %15479, %116
  %15481 = add nsw i64 %15480, %94
  %15482 = getelementptr inbounds i16, i16* %blur_x, i64 %15481
  %15483 = getelementptr inbounds i16, i16* %15482, i64 -32
  %15484 = bitcast i16* %15483 to <16 x i16>*
  %15485 = load <16 x i16>, <16 x i16>* %15484, align 2, !tbaa !399
  %15486 = getelementptr inbounds i16, i16* %15482, i64 -16
  %15487 = bitcast i16* %15486 to <16 x i16>*
  %15488 = load <16 x i16>, <16 x i16>* %15487, align 2, !tbaa !399
  %15489 = zext i32 %.pre-phi3583 to i64
  %15490 = mul nsw i64 %15489, %116
  %15491 = add nsw i64 %15490, %94
  %15492 = getelementptr inbounds i16, i16* %blur_x, i64 %15491
  %15493 = getelementptr inbounds i16, i16* %15492, i64 -32
  %15494 = bitcast i16* %15493 to <16 x i16>*
  %15495 = load <16 x i16>, <16 x i16>* %15494, align 2, !tbaa !399
  %15496 = getelementptr inbounds i16, i16* %15492, i64 -16
  %15497 = bitcast i16* %15496 to <16 x i16>*
  %15498 = load <16 x i16>, <16 x i16>* %15497, align 2, !tbaa !399
  %15499 = zext i32 %.pre-phi3587 to i64
  %15500 = mul nsw i64 %15499, %116
  %15501 = add nsw i64 %15500, %94
  %15502 = getelementptr inbounds i16, i16* %blur_x, i64 %15501
  %15503 = getelementptr inbounds i16, i16* %15502, i64 -32
  %15504 = bitcast i16* %15503 to <16 x i16>*
  %15505 = load <16 x i16>, <16 x i16>* %15504, align 2, !tbaa !399
  %15506 = getelementptr inbounds i16, i16* %15502, i64 -16
  %15507 = bitcast i16* %15506 to <16 x i16>*
  %15508 = load <16 x i16>, <16 x i16>* %15507, align 2, !tbaa !399
  %15509 = zext i32 %.pre-phi3591 to i64
  %15510 = mul nsw i64 %15509, %116
  %15511 = add nsw i64 %15510, %94
  %15512 = getelementptr inbounds i16, i16* %blur_x, i64 %15511
  %15513 = getelementptr inbounds i16, i16* %15512, i64 -32
  %15514 = bitcast i16* %15513 to <16 x i16>*
  %15515 = load <16 x i16>, <16 x i16>* %15514, align 2, !tbaa !399
  %15516 = getelementptr inbounds i16, i16* %15512, i64 -16
  %15517 = bitcast i16* %15516 to <16 x i16>*
  %15518 = load <16 x i16>, <16 x i16>* %15517, align 2, !tbaa !399
  %15519 = mul nsw i64 %15460, %116
  %15520 = add nsw i64 %15519, %94
  %15521 = getelementptr inbounds i16, i16* %blur_x, i64 %15520
  %15522 = getelementptr inbounds i16, i16* %15521, i64 -32
  %15523 = bitcast i16* %15522 to <16 x i16>*
  %15524 = load <16 x i16>, <16 x i16>* %15523, align 2, !tbaa !399
  %15525 = getelementptr inbounds i16, i16* %15521, i64 -16
  %15526 = bitcast i16* %15525 to <16 x i16>*
  %15527 = load <16 x i16>, <16 x i16>* %15526, align 2, !tbaa !399
  %15528 = zext i32 %.pre-phi3595 to i64
  %15529 = mul nsw i64 %15528, %116
  %15530 = add nsw i64 %15529, %94
  %15531 = getelementptr inbounds i16, i16* %blur_x, i64 %15530
  %15532 = getelementptr inbounds i16, i16* %15531, i64 -32
  %15533 = bitcast i16* %15532 to <16 x i16>*
  %15534 = load <16 x i16>, <16 x i16>* %15533, align 2, !tbaa !399
  %15535 = getelementptr inbounds i16, i16* %15531, i64 -16
  %15536 = bitcast i16* %15535 to <16 x i16>*
  %15537 = load <16 x i16>, <16 x i16>* %15536, align 2, !tbaa !399
  %15538 = add <16 x i16> %15485, %15475
  %15539 = add <16 x i16> %15538, %15495
  %15540 = add <16 x i16> %15539, %15505
  %15541 = add <16 x i16> %15540, %15515
  %15542 = add <16 x i16> %15541, %15524
  %15543 = add <16 x i16> %15542, %15534
  %15544 = add <16 x i16> %15488, %15478
  %15545 = add <16 x i16> %15544, %15498
  %15546 = add <16 x i16> %15545, %15508
  %15547 = add <16 x i16> %15546, %15518
  %15548 = add <16 x i16> %15547, %15527
  %15549 = add <16 x i16> %15548, %15537
  %15550 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15543, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15551 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15549, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15552 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15550, <16 x i16> %15543)
  %15553 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15551, <16 x i16> %15549)
  %15554 = shufflevector <16 x i16> %15552, <16 x i16> %15553, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15555 = lshr <32 x i16> %15554, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15556 = shufflevector <32 x i16> %15555, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15557 = sext i32 %a26 to i64
  %15558 = add nsw i64 %15557, 24
  %15559 = mul nsw i64 %15558, %117
  %15560 = add nsw i64 %119, %15559
  %15561 = getelementptr inbounds i16, i16* %66, i64 %15560
  %15562 = getelementptr inbounds i16, i16* %15561, i64 -32
  %15563 = bitcast i16* %15562 to <16 x i16>*
  store <16 x i16> %15556, <16 x i16>* %15563, align 2, !tbaa !401
  %15564 = shufflevector <32 x i16> %15555, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15565 = getelementptr inbounds i16, i16* %15561, i64 -16
  %15566 = bitcast i16* %15565 to <16 x i16>*
  store <16 x i16> %15564, <16 x i16>* %15566, align 2, !tbaa !401
  br label %after_bb657

"for blur_y.s0.x.x.rebased662":                   ; preds = %"for blur_y.s0.x.x.rebased662.preheader", %"consume blur_x669"
  %indvars.iv3461 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased662.preheader" ], [ %indvars.iv.next3462, %"consume blur_x669" ]
  %15567 = add nsw i64 %indvars.iv3461, %101
  %15568 = icmp slt i64 %15567, 1
  %15569 = trunc i64 %15567 to i32
  %15570 = shl nsw i32 %15569, 5
  %15571 = icmp sgt i32 %4, %15570
  %15572 = or i1 %15568, %15571
  br i1 %15572, label %"produce blur_x668", label %"for blur_y.s0.x.x.rebased662.consume blur_x669_crit_edge"

"for blur_y.s0.x.x.rebased662.consume blur_x669_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased662"
  %.pre3652 = shl nsw i64 %15567, 5
  br label %"consume blur_x669"

"end for blur_y.s0.x.x.rebased663":               ; preds = %"consume blur_x669", %after_bb657
  br i1 %102, label %"for blur_y.s0.x.x.rebased670.preheader", label %"end for blur_y.s0.x.x.rebased671", !prof !386

"for blur_y.s0.x.x.rebased670.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased663"
  %15573 = sext i32 %t1762 to i64
  %15574 = zext i32 %.pre-phi3579 to i64
  %15575 = mul nsw i64 %15574, %116
  %15576 = sub nsw i64 %15575, %96
  %15577 = zext i32 %.pre-phi to i64
  %15578 = mul nsw i64 %15577, %116
  %15579 = sub nsw i64 %15578, %96
  %15580 = zext i32 %.pre-phi3583 to i64
  %15581 = mul nsw i64 %15580, %116
  %15582 = sub nsw i64 %15581, %96
  %15583 = zext i32 %.pre-phi3587 to i64
  %15584 = mul nsw i64 %15583, %116
  %15585 = sub nsw i64 %15584, %96
  %15586 = zext i32 %.pre-phi3591 to i64
  %15587 = mul nsw i64 %15586, %116
  %15588 = sub nsw i64 %15587, %96
  %15589 = zext i32 %.pre-phi3599 to i64
  %15590 = mul nsw i64 %15589, %116
  %15591 = sub nsw i64 %15590, %96
  %15592 = zext i32 %.pre-phi3595 to i64
  %15593 = mul nsw i64 %15592, %116
  %15594 = sub nsw i64 %15593, %96
  %15595 = sext i32 %a26 to i64
  %15596 = add nsw i64 %15595, 24
  %15597 = mul nsw i64 %15596, %117
  %15598 = add nsw i64 %15597, %120
  br label %"for blur_y.s0.x.x.rebased670"

"produce blur_x668":                              ; preds = %"for blur_y.s0.x.x.rebased662"
  %t1136 = add nsw i32 %15570, %t2145
  %15599 = sext i32 %t1136 to i64
  %15600 = getelementptr inbounds i16, i16* %read_input, i64 %15599
  %15601 = getelementptr inbounds i16, i16* %15600, i64 1
  %15602 = bitcast i16* %15601 to <16 x i16>*
  %15603 = load <16 x i16>, <16 x i16>* %15602, align 2, !tbaa !396
  %15604 = getelementptr inbounds i16, i16* %15600, i64 17
  %15605 = bitcast i16* %15604 to <16 x i16>*
  %15606 = load <16 x i16>, <16 x i16>* %15605, align 2, !tbaa !396
  %15607 = bitcast i16* %15600 to <16 x i16>*
  %15608 = load <16 x i16>, <16 x i16>* %15607, align 2, !tbaa !396
  %15609 = getelementptr inbounds i16, i16* %15600, i64 16
  %15610 = bitcast i16* %15609 to <16 x i16>*
  %15611 = load <16 x i16>, <16 x i16>* %15610, align 2, !tbaa !396
  %15612 = getelementptr inbounds i16, i16* %15600, i64 2
  %15613 = bitcast i16* %15612 to <16 x i16>*
  %15614 = load <16 x i16>, <16 x i16>* %15613, align 2, !tbaa !396
  %15615 = getelementptr inbounds i16, i16* %15600, i64 18
  %15616 = bitcast i16* %15615 to <16 x i16>*
  %15617 = load <16 x i16>, <16 x i16>* %15616, align 2, !tbaa !396
  %15618 = getelementptr inbounds i16, i16* %15600, i64 3
  %15619 = bitcast i16* %15618 to <16 x i16>*
  %15620 = load <16 x i16>, <16 x i16>* %15619, align 2, !tbaa !396
  %15621 = getelementptr inbounds i16, i16* %15600, i64 19
  %15622 = bitcast i16* %15621 to <16 x i16>*
  %15623 = load <16 x i16>, <16 x i16>* %15622, align 2, !tbaa !396
  %15624 = getelementptr inbounds i16, i16* %15600, i64 4
  %15625 = bitcast i16* %15624 to <16 x i16>*
  %15626 = load <16 x i16>, <16 x i16>* %15625, align 2, !tbaa !396
  %15627 = getelementptr inbounds i16, i16* %15600, i64 20
  %15628 = bitcast i16* %15627 to <16 x i16>*
  %15629 = load <16 x i16>, <16 x i16>* %15628, align 2, !tbaa !396
  %15630 = getelementptr inbounds i16, i16* %15600, i64 6
  %15631 = bitcast i16* %15630 to <16 x i16>*
  %15632 = load <16 x i16>, <16 x i16>* %15631, align 2, !tbaa !396
  %15633 = getelementptr inbounds i16, i16* %15600, i64 22
  %15634 = bitcast i16* %15633 to <16 x i16>*
  %15635 = load <16 x i16>, <16 x i16>* %15634, align 2, !tbaa !396
  %15636 = getelementptr inbounds i16, i16* %15600, i64 5
  %15637 = bitcast i16* %15636 to <16 x i16>*
  %15638 = load <16 x i16>, <16 x i16>* %15637, align 2, !tbaa !396
  %15639 = getelementptr inbounds i16, i16* %15600, i64 21
  %15640 = bitcast i16* %15639 to <16 x i16>*
  %15641 = load <16 x i16>, <16 x i16>* %15640, align 2, !tbaa !396
  %15642 = add <16 x i16> %15608, %15603
  %15643 = add <16 x i16> %15642, %15614
  %15644 = add <16 x i16> %15643, %15620
  %15645 = add <16 x i16> %15644, %15626
  %15646 = add <16 x i16> %15645, %15632
  %15647 = add <16 x i16> %15646, %15638
  %15648 = add <16 x i16> %15611, %15606
  %15649 = add <16 x i16> %15648, %15617
  %15650 = add <16 x i16> %15649, %15623
  %15651 = add <16 x i16> %15650, %15629
  %15652 = add <16 x i16> %15651, %15635
  %15653 = add <16 x i16> %15652, %15641
  %15654 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15647, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15655 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15653, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15656 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15654, <16 x i16> %15647)
  %15657 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15655, <16 x i16> %15653)
  %15658 = shufflevector <16 x i16> %15656, <16 x i16> %15657, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15659 = lshr <32 x i16> %15658, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15660 = shufflevector <32 x i16> %15659, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15661 = shl nsw i64 %15567, 5
  %15662 = add nsw i64 %15661, %15372
  %15663 = getelementptr inbounds i16, i16* %blur_x, i64 %15662
  %15664 = bitcast i16* %15663 to <16 x i16>*
  store <16 x i16> %15660, <16 x i16>* %15664, align 2, !tbaa !399
  %15665 = shufflevector <32 x i16> %15659, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15666 = getelementptr inbounds i16, i16* %15663, i64 16
  %15667 = bitcast i16* %15666 to <16 x i16>*
  store <16 x i16> %15665, <16 x i16>* %15667, align 2, !tbaa !399
  br label %"consume blur_x669"

"consume blur_x669":                              ; preds = %"for blur_y.s0.x.x.rebased662.consume blur_x669_crit_edge", %"produce blur_x668"
  %.pre-phi3653 = phi i64 [ %.pre3652, %"for blur_y.s0.x.x.rebased662.consume blur_x669_crit_edge" ], [ %15661, %"produce blur_x668" ]
  %15668 = add nsw i64 %15375, %.pre-phi3653
  %15669 = getelementptr inbounds i16, i16* %blur_x, i64 %15668
  %15670 = bitcast i16* %15669 to <16 x i16>*
  %15671 = load <16 x i16>, <16 x i16>* %15670, align 2, !tbaa !399
  %15672 = getelementptr inbounds i16, i16* %15669, i64 16
  %15673 = bitcast i16* %15672 to <16 x i16>*
  %15674 = load <16 x i16>, <16 x i16>* %15673, align 2, !tbaa !399
  %15675 = add nsw i64 %15378, %.pre-phi3653
  %15676 = getelementptr inbounds i16, i16* %blur_x, i64 %15675
  %15677 = bitcast i16* %15676 to <16 x i16>*
  %15678 = load <16 x i16>, <16 x i16>* %15677, align 2, !tbaa !399
  %15679 = getelementptr inbounds i16, i16* %15676, i64 16
  %15680 = bitcast i16* %15679 to <16 x i16>*
  %15681 = load <16 x i16>, <16 x i16>* %15680, align 2, !tbaa !399
  %15682 = add nsw i64 %15381, %.pre-phi3653
  %15683 = getelementptr inbounds i16, i16* %blur_x, i64 %15682
  %15684 = bitcast i16* %15683 to <16 x i16>*
  %15685 = load <16 x i16>, <16 x i16>* %15684, align 2, !tbaa !399
  %15686 = getelementptr inbounds i16, i16* %15683, i64 16
  %15687 = bitcast i16* %15686 to <16 x i16>*
  %15688 = load <16 x i16>, <16 x i16>* %15687, align 2, !tbaa !399
  %15689 = add nsw i64 %15384, %.pre-phi3653
  %15690 = getelementptr inbounds i16, i16* %blur_x, i64 %15689
  %15691 = bitcast i16* %15690 to <16 x i16>*
  %15692 = load <16 x i16>, <16 x i16>* %15691, align 2, !tbaa !399
  %15693 = getelementptr inbounds i16, i16* %15690, i64 16
  %15694 = bitcast i16* %15693 to <16 x i16>*
  %15695 = load <16 x i16>, <16 x i16>* %15694, align 2, !tbaa !399
  %15696 = add nsw i64 %15387, %.pre-phi3653
  %15697 = getelementptr inbounds i16, i16* %blur_x, i64 %15696
  %15698 = bitcast i16* %15697 to <16 x i16>*
  %15699 = load <16 x i16>, <16 x i16>* %15698, align 2, !tbaa !399
  %15700 = getelementptr inbounds i16, i16* %15697, i64 16
  %15701 = bitcast i16* %15700 to <16 x i16>*
  %15702 = load <16 x i16>, <16 x i16>* %15701, align 2, !tbaa !399
  %15703 = add nsw i64 %15390, %.pre-phi3653
  %15704 = getelementptr inbounds i16, i16* %blur_x, i64 %15703
  %15705 = bitcast i16* %15704 to <16 x i16>*
  %15706 = load <16 x i16>, <16 x i16>* %15705, align 2, !tbaa !399
  %15707 = getelementptr inbounds i16, i16* %15704, i64 16
  %15708 = bitcast i16* %15707 to <16 x i16>*
  %15709 = load <16 x i16>, <16 x i16>* %15708, align 2, !tbaa !399
  %15710 = add nsw i64 %15393, %.pre-phi3653
  %15711 = getelementptr inbounds i16, i16* %blur_x, i64 %15710
  %15712 = bitcast i16* %15711 to <16 x i16>*
  %15713 = load <16 x i16>, <16 x i16>* %15712, align 2, !tbaa !399
  %15714 = getelementptr inbounds i16, i16* %15711, i64 16
  %15715 = bitcast i16* %15714 to <16 x i16>*
  %15716 = load <16 x i16>, <16 x i16>* %15715, align 2, !tbaa !399
  %15717 = add <16 x i16> %15678, %15671
  %15718 = add <16 x i16> %15717, %15685
  %15719 = add <16 x i16> %15718, %15692
  %15720 = add <16 x i16> %15719, %15699
  %15721 = add <16 x i16> %15720, %15706
  %15722 = add <16 x i16> %15721, %15713
  %15723 = add <16 x i16> %15681, %15674
  %15724 = add <16 x i16> %15723, %15688
  %15725 = add <16 x i16> %15724, %15695
  %15726 = add <16 x i16> %15725, %15702
  %15727 = add <16 x i16> %15726, %15709
  %15728 = add <16 x i16> %15727, %15716
  %15729 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15722, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15730 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15728, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15731 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15729, <16 x i16> %15722)
  %15732 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15730, <16 x i16> %15728)
  %15733 = shufflevector <16 x i16> %15731, <16 x i16> %15732, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15734 = lshr <32 x i16> %15733, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15735 = shufflevector <32 x i16> %15734, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15736 = add nsw i64 %15397, %.pre-phi3653
  %15737 = getelementptr inbounds i16, i16* %66, i64 %15736
  %15738 = bitcast i16* %15737 to <16 x i16>*
  store <16 x i16> %15735, <16 x i16>* %15738, align 2, !tbaa !401
  %15739 = shufflevector <32 x i16> %15734, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15740 = getelementptr inbounds i16, i16* %15737, i64 16
  %15741 = bitcast i16* %15740 to <16 x i16>*
  store <16 x i16> %15739, <16 x i16>* %15741, align 2, !tbaa !401
  %indvars.iv.next3462 = add nuw nsw i64 %indvars.iv3461, 1
  %.not2823 = icmp eq i64 %indvars.iv.next3462, %188
  br i1 %.not2823, label %"end for blur_y.s0.x.x.rebased663", label %"for blur_y.s0.x.x.rebased662"

"for blur_y.s0.x.x.rebased670":                   ; preds = %"for blur_y.s0.x.x.rebased670.preheader", %"consume blur_x678"
  %blur_y.s0.x.x.rebased672 = phi i32 [ %15892, %"consume blur_x678" ], [ 0, %"for blur_y.s0.x.x.rebased670.preheader" ]
  %15742 = add nsw i32 %blur_y.s0.x.x.rebased672, %t1670
  %a287 = shl nsw i32 %15742, 5
  %15743 = icmp sgt i32 %a14, %a287
  %b293 = select i1 %15743, i32 %a287, i32 %a14
  %15744 = icmp slt i32 %15742, 1
  %15745 = icmp sgt i32 %4, %a287
  %15746 = or i1 %15744, %15745
  br i1 %15746, label %"produce blur_x676", label %"consume blur_x678"

"end for blur_y.s0.x.x.rebased671":               ; preds = %"consume blur_x678", %"end for blur_y.s0.x.x.rebased663"
  br i1 %34, label %"produce blur_x682", label %after_bb679

"produce blur_x676":                              ; preds = %"for blur_y.s0.x.x.rebased670"
  %15747 = icmp slt i32 %b293, %4
  %blur_x.s0.x.v1.base.s677 = select i1 %15747, i32 %b293, i32 %4
  %t1141 = add nsw i32 %blur_x.s0.x.v1.base.s677, %t2145
  %15748 = sext i32 %t1141 to i64
  %15749 = getelementptr inbounds i16, i16* %read_input, i64 %15748
  %15750 = getelementptr inbounds i16, i16* %15749, i64 1
  %15751 = bitcast i16* %15750 to <16 x i16>*
  %15752 = load <16 x i16>, <16 x i16>* %15751, align 2, !tbaa !396
  %15753 = getelementptr inbounds i16, i16* %15749, i64 17
  %15754 = bitcast i16* %15753 to <16 x i16>*
  %15755 = load <16 x i16>, <16 x i16>* %15754, align 2, !tbaa !396
  %15756 = bitcast i16* %15749 to <16 x i16>*
  %15757 = load <16 x i16>, <16 x i16>* %15756, align 2, !tbaa !396
  %15758 = getelementptr inbounds i16, i16* %15749, i64 16
  %15759 = bitcast i16* %15758 to <16 x i16>*
  %15760 = load <16 x i16>, <16 x i16>* %15759, align 2, !tbaa !396
  %15761 = getelementptr inbounds i16, i16* %15749, i64 2
  %15762 = bitcast i16* %15761 to <16 x i16>*
  %15763 = load <16 x i16>, <16 x i16>* %15762, align 2, !tbaa !396
  %15764 = getelementptr inbounds i16, i16* %15749, i64 18
  %15765 = bitcast i16* %15764 to <16 x i16>*
  %15766 = load <16 x i16>, <16 x i16>* %15765, align 2, !tbaa !396
  %15767 = getelementptr inbounds i16, i16* %15749, i64 3
  %15768 = bitcast i16* %15767 to <16 x i16>*
  %15769 = load <16 x i16>, <16 x i16>* %15768, align 2, !tbaa !396
  %15770 = getelementptr inbounds i16, i16* %15749, i64 19
  %15771 = bitcast i16* %15770 to <16 x i16>*
  %15772 = load <16 x i16>, <16 x i16>* %15771, align 2, !tbaa !396
  %15773 = getelementptr inbounds i16, i16* %15749, i64 4
  %15774 = bitcast i16* %15773 to <16 x i16>*
  %15775 = load <16 x i16>, <16 x i16>* %15774, align 2, !tbaa !396
  %15776 = getelementptr inbounds i16, i16* %15749, i64 20
  %15777 = bitcast i16* %15776 to <16 x i16>*
  %15778 = load <16 x i16>, <16 x i16>* %15777, align 2, !tbaa !396
  %15779 = getelementptr inbounds i16, i16* %15749, i64 6
  %15780 = bitcast i16* %15779 to <16 x i16>*
  %15781 = load <16 x i16>, <16 x i16>* %15780, align 2, !tbaa !396
  %15782 = getelementptr inbounds i16, i16* %15749, i64 22
  %15783 = bitcast i16* %15782 to <16 x i16>*
  %15784 = load <16 x i16>, <16 x i16>* %15783, align 2, !tbaa !396
  %15785 = getelementptr inbounds i16, i16* %15749, i64 5
  %15786 = bitcast i16* %15785 to <16 x i16>*
  %15787 = load <16 x i16>, <16 x i16>* %15786, align 2, !tbaa !396
  %15788 = getelementptr inbounds i16, i16* %15749, i64 21
  %15789 = bitcast i16* %15788 to <16 x i16>*
  %15790 = load <16 x i16>, <16 x i16>* %15789, align 2, !tbaa !396
  %15791 = add <16 x i16> %15757, %15752
  %15792 = add <16 x i16> %15791, %15763
  %15793 = add <16 x i16> %15792, %15769
  %15794 = add <16 x i16> %15793, %15775
  %15795 = add <16 x i16> %15794, %15781
  %15796 = add <16 x i16> %15795, %15787
  %15797 = add <16 x i16> %15760, %15755
  %15798 = add <16 x i16> %15797, %15766
  %15799 = add <16 x i16> %15798, %15772
  %15800 = add <16 x i16> %15799, %15778
  %15801 = add <16 x i16> %15800, %15784
  %15802 = add <16 x i16> %15801, %15790
  %15803 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15796, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15804 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15802, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15805 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15803, <16 x i16> %15796)
  %15806 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15804, <16 x i16> %15802)
  %15807 = shufflevector <16 x i16> %15805, <16 x i16> %15806, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15808 = lshr <32 x i16> %15807, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15809 = shufflevector <32 x i16> %15808, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15810 = sext i32 %blur_x.s0.x.v1.base.s677 to i64
  %15811 = add nsw i64 %15810, %15573
  %15812 = getelementptr inbounds i16, i16* %blur_x, i64 %15811
  %15813 = bitcast i16* %15812 to <16 x i16>*
  store <16 x i16> %15809, <16 x i16>* %15813, align 2, !tbaa !399
  %15814 = shufflevector <32 x i16> %15808, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15815 = getelementptr inbounds i16, i16* %15812, i64 16
  %15816 = bitcast i16* %15815 to <16 x i16>*
  store <16 x i16> %15814, <16 x i16>* %15816, align 2, !tbaa !399
  br label %"consume blur_x678"

"consume blur_x678":                              ; preds = %"for blur_y.s0.x.x.rebased670", %"produce blur_x676"
  %15817 = sext i32 %b293 to i64
  %15818 = add nsw i64 %15576, %15817
  %15819 = getelementptr inbounds i16, i16* %blur_x, i64 %15818
  %15820 = bitcast i16* %15819 to <16 x i16>*
  %15821 = load <16 x i16>, <16 x i16>* %15820, align 2, !tbaa !399
  %15822 = getelementptr inbounds i16, i16* %15819, i64 16
  %15823 = bitcast i16* %15822 to <16 x i16>*
  %15824 = load <16 x i16>, <16 x i16>* %15823, align 2, !tbaa !399
  %15825 = add nsw i64 %15579, %15817
  %15826 = getelementptr inbounds i16, i16* %blur_x, i64 %15825
  %15827 = bitcast i16* %15826 to <16 x i16>*
  %15828 = load <16 x i16>, <16 x i16>* %15827, align 2, !tbaa !399
  %15829 = getelementptr inbounds i16, i16* %15826, i64 16
  %15830 = bitcast i16* %15829 to <16 x i16>*
  %15831 = load <16 x i16>, <16 x i16>* %15830, align 2, !tbaa !399
  %15832 = add nsw i64 %15582, %15817
  %15833 = getelementptr inbounds i16, i16* %blur_x, i64 %15832
  %15834 = bitcast i16* %15833 to <16 x i16>*
  %15835 = load <16 x i16>, <16 x i16>* %15834, align 2, !tbaa !399
  %15836 = getelementptr inbounds i16, i16* %15833, i64 16
  %15837 = bitcast i16* %15836 to <16 x i16>*
  %15838 = load <16 x i16>, <16 x i16>* %15837, align 2, !tbaa !399
  %15839 = add nsw i64 %15585, %15817
  %15840 = getelementptr inbounds i16, i16* %blur_x, i64 %15839
  %15841 = bitcast i16* %15840 to <16 x i16>*
  %15842 = load <16 x i16>, <16 x i16>* %15841, align 2, !tbaa !399
  %15843 = getelementptr inbounds i16, i16* %15840, i64 16
  %15844 = bitcast i16* %15843 to <16 x i16>*
  %15845 = load <16 x i16>, <16 x i16>* %15844, align 2, !tbaa !399
  %15846 = add nsw i64 %15588, %15817
  %15847 = getelementptr inbounds i16, i16* %blur_x, i64 %15846
  %15848 = bitcast i16* %15847 to <16 x i16>*
  %15849 = load <16 x i16>, <16 x i16>* %15848, align 2, !tbaa !399
  %15850 = getelementptr inbounds i16, i16* %15847, i64 16
  %15851 = bitcast i16* %15850 to <16 x i16>*
  %15852 = load <16 x i16>, <16 x i16>* %15851, align 2, !tbaa !399
  %15853 = add nsw i64 %15591, %15817
  %15854 = getelementptr inbounds i16, i16* %blur_x, i64 %15853
  %15855 = bitcast i16* %15854 to <16 x i16>*
  %15856 = load <16 x i16>, <16 x i16>* %15855, align 2, !tbaa !399
  %15857 = getelementptr inbounds i16, i16* %15854, i64 16
  %15858 = bitcast i16* %15857 to <16 x i16>*
  %15859 = load <16 x i16>, <16 x i16>* %15858, align 2, !tbaa !399
  %15860 = add nsw i64 %15594, %15817
  %15861 = getelementptr inbounds i16, i16* %blur_x, i64 %15860
  %15862 = bitcast i16* %15861 to <16 x i16>*
  %15863 = load <16 x i16>, <16 x i16>* %15862, align 2, !tbaa !399
  %15864 = getelementptr inbounds i16, i16* %15861, i64 16
  %15865 = bitcast i16* %15864 to <16 x i16>*
  %15866 = load <16 x i16>, <16 x i16>* %15865, align 2, !tbaa !399
  %15867 = add <16 x i16> %15828, %15821
  %15868 = add <16 x i16> %15867, %15835
  %15869 = add <16 x i16> %15868, %15842
  %15870 = add <16 x i16> %15869, %15849
  %15871 = add <16 x i16> %15870, %15856
  %15872 = add <16 x i16> %15871, %15863
  %15873 = add <16 x i16> %15831, %15824
  %15874 = add <16 x i16> %15873, %15838
  %15875 = add <16 x i16> %15874, %15845
  %15876 = add <16 x i16> %15875, %15852
  %15877 = add <16 x i16> %15876, %15859
  %15878 = add <16 x i16> %15877, %15866
  %15879 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15872, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15880 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15878, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15881 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15879, <16 x i16> %15872)
  %15882 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15880, <16 x i16> %15878)
  %15883 = shufflevector <16 x i16> %15881, <16 x i16> %15882, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15884 = lshr <32 x i16> %15883, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15885 = shufflevector <32 x i16> %15884, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15886 = add nsw i64 %15598, %15817
  %15887 = getelementptr inbounds i16, i16* %66, i64 %15886
  %15888 = bitcast i16* %15887 to <16 x i16>*
  store <16 x i16> %15885, <16 x i16>* %15888, align 2, !tbaa !401
  %15889 = shufflevector <32 x i16> %15884, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15890 = getelementptr inbounds i16, i16* %15887, i64 16
  %15891 = bitcast i16* %15890 to <16 x i16>*
  store <16 x i16> %15889, <16 x i16>* %15891, align 2, !tbaa !401
  %15892 = add nuw nsw i32 %blur_y.s0.x.x.rebased672, 1
  %.not2822 = icmp eq i32 %15892, %t1727
  br i1 %.not2822, label %"end for blur_y.s0.x.x.rebased671", label %"for blur_y.s0.x.x.rebased670"

after_bb679:                                      ; preds = %"end for blur_y.s0.x.x.rebased671", %"produce blur_x682"
  br i1 %100, label %"for blur_y.s0.x.x.rebased684.preheader", label %"end for blur_y.s0.x.x.rebased685", !prof !386

"for blur_y.s0.x.x.rebased684.preheader":         ; preds = %after_bb679
  %15893 = sext i32 %t1778 to i64
  %15894 = zext i32 %.pre-phi3583 to i64
  %15895 = mul nsw i64 %15894, %116
  %15896 = sub nsw i64 %15895, %96
  %15897 = zext i32 %.pre-phi3579 to i64
  %15898 = mul nsw i64 %15897, %116
  %15899 = sub nsw i64 %15898, %96
  %15900 = zext i32 %.pre-phi3587 to i64
  %15901 = mul nsw i64 %15900, %116
  %15902 = sub nsw i64 %15901, %96
  %15903 = zext i32 %.pre-phi3591 to i64
  %15904 = mul nsw i64 %15903, %116
  %15905 = sub nsw i64 %15904, %96
  %15906 = zext i32 %.pre-phi3595 to i64
  %15907 = mul nsw i64 %15906, %116
  %15908 = sub nsw i64 %15907, %96
  %15909 = zext i32 %.pre-phi3605 to i64
  %15910 = mul nsw i64 %15909, %116
  %15911 = sub nsw i64 %15910, %96
  %15912 = zext i32 %.pre-phi3599 to i64
  %15913 = mul nsw i64 %15912, %116
  %15914 = sub nsw i64 %15913, %96
  %15915 = sext i32 %a26 to i64
  %15916 = add nsw i64 %15915, 25
  %15917 = mul nsw i64 %15916, %117
  %15918 = add nsw i64 %15917, %120
  br label %"for blur_y.s0.x.x.rebased684"

"produce blur_x682":                              ; preds = %"end for blur_y.s0.x.x.rebased671"
  %15919 = getelementptr inbounds i16, i16* %read_input, i64 %169
  %15920 = getelementptr inbounds i16, i16* %15919, i64 -31
  %15921 = bitcast i16* %15920 to <16 x i16>*
  %15922 = load <16 x i16>, <16 x i16>* %15921, align 2, !tbaa !396
  %15923 = getelementptr inbounds i16, i16* %15919, i64 -15
  %15924 = bitcast i16* %15923 to <16 x i16>*
  %15925 = load <16 x i16>, <16 x i16>* %15924, align 2, !tbaa !396
  %15926 = getelementptr inbounds i16, i16* %15919, i64 -32
  %15927 = bitcast i16* %15926 to <16 x i16>*
  %15928 = load <16 x i16>, <16 x i16>* %15927, align 2, !tbaa !396
  %15929 = getelementptr inbounds i16, i16* %15919, i64 -16
  %15930 = bitcast i16* %15929 to <16 x i16>*
  %15931 = load <16 x i16>, <16 x i16>* %15930, align 2, !tbaa !396
  %15932 = getelementptr inbounds i16, i16* %15919, i64 -30
  %15933 = bitcast i16* %15932 to <16 x i16>*
  %15934 = load <16 x i16>, <16 x i16>* %15933, align 2, !tbaa !396
  %15935 = getelementptr inbounds i16, i16* %15919, i64 -14
  %15936 = bitcast i16* %15935 to <16 x i16>*
  %15937 = load <16 x i16>, <16 x i16>* %15936, align 2, !tbaa !396
  %15938 = getelementptr inbounds i16, i16* %15919, i64 -29
  %15939 = bitcast i16* %15938 to <16 x i16>*
  %15940 = load <16 x i16>, <16 x i16>* %15939, align 2, !tbaa !396
  %15941 = getelementptr inbounds i16, i16* %15919, i64 -13
  %15942 = bitcast i16* %15941 to <16 x i16>*
  %15943 = load <16 x i16>, <16 x i16>* %15942, align 2, !tbaa !396
  %15944 = getelementptr inbounds i16, i16* %15919, i64 -28
  %15945 = bitcast i16* %15944 to <16 x i16>*
  %15946 = load <16 x i16>, <16 x i16>* %15945, align 2, !tbaa !396
  %15947 = getelementptr inbounds i16, i16* %15919, i64 -12
  %15948 = bitcast i16* %15947 to <16 x i16>*
  %15949 = load <16 x i16>, <16 x i16>* %15948, align 2, !tbaa !396
  %15950 = getelementptr inbounds i16, i16* %15919, i64 -26
  %15951 = bitcast i16* %15950 to <16 x i16>*
  %15952 = load <16 x i16>, <16 x i16>* %15951, align 2, !tbaa !396
  %15953 = getelementptr inbounds i16, i16* %15919, i64 -10
  %15954 = bitcast i16* %15953 to <16 x i16>*
  %15955 = load <16 x i16>, <16 x i16>* %15954, align 2, !tbaa !396
  %15956 = getelementptr inbounds i16, i16* %15919, i64 -27
  %15957 = bitcast i16* %15956 to <16 x i16>*
  %15958 = load <16 x i16>, <16 x i16>* %15957, align 2, !tbaa !396
  %15959 = getelementptr inbounds i16, i16* %15919, i64 -11
  %15960 = bitcast i16* %15959 to <16 x i16>*
  %15961 = load <16 x i16>, <16 x i16>* %15960, align 2, !tbaa !396
  %15962 = add <16 x i16> %15928, %15922
  %15963 = add <16 x i16> %15962, %15934
  %15964 = add <16 x i16> %15963, %15940
  %15965 = add <16 x i16> %15964, %15946
  %15966 = add <16 x i16> %15965, %15952
  %15967 = add <16 x i16> %15966, %15958
  %15968 = add <16 x i16> %15931, %15925
  %15969 = add <16 x i16> %15968, %15937
  %15970 = add <16 x i16> %15969, %15943
  %15971 = add <16 x i16> %15970, %15949
  %15972 = add <16 x i16> %15971, %15955
  %15973 = add <16 x i16> %15972, %15961
  %15974 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15967, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15975 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15973, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15976 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15974, <16 x i16> %15967)
  %15977 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15975, <16 x i16> %15973)
  %15978 = shufflevector <16 x i16> %15976, <16 x i16> %15977, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15979 = lshr <32 x i16> %15978, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15980 = shufflevector <32 x i16> %15979, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15981 = zext i32 %.pre-phi3605 to i64
  %15982 = mul nsw i64 %97, %15981
  %15983 = add nsw i64 %99, %15982
  %15984 = getelementptr inbounds i16, i16* %blur_x, i64 %15983
  %15985 = getelementptr inbounds i16, i16* %15984, i64 -32
  %15986 = bitcast i16* %15985 to <16 x i16>*
  store <16 x i16> %15980, <16 x i16>* %15986, align 2, !tbaa !399
  %15987 = shufflevector <32 x i16> %15979, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15988 = getelementptr inbounds i16, i16* %15984, i64 -16
  %15989 = bitcast i16* %15988 to <16 x i16>*
  store <16 x i16> %15987, <16 x i16>* %15989, align 2, !tbaa !399
  %15990 = zext i32 %.pre-phi3583 to i64
  %15991 = mul nsw i64 %15990, %116
  %15992 = add nsw i64 %15991, %94
  %15993 = getelementptr inbounds i16, i16* %blur_x, i64 %15992
  %15994 = getelementptr inbounds i16, i16* %15993, i64 -32
  %15995 = bitcast i16* %15994 to <16 x i16>*
  %15996 = load <16 x i16>, <16 x i16>* %15995, align 2, !tbaa !399
  %15997 = getelementptr inbounds i16, i16* %15993, i64 -16
  %15998 = bitcast i16* %15997 to <16 x i16>*
  %15999 = load <16 x i16>, <16 x i16>* %15998, align 2, !tbaa !399
  %16000 = zext i32 %.pre-phi3579 to i64
  %16001 = mul nsw i64 %16000, %116
  %16002 = add nsw i64 %16001, %94
  %16003 = getelementptr inbounds i16, i16* %blur_x, i64 %16002
  %16004 = getelementptr inbounds i16, i16* %16003, i64 -32
  %16005 = bitcast i16* %16004 to <16 x i16>*
  %16006 = load <16 x i16>, <16 x i16>* %16005, align 2, !tbaa !399
  %16007 = getelementptr inbounds i16, i16* %16003, i64 -16
  %16008 = bitcast i16* %16007 to <16 x i16>*
  %16009 = load <16 x i16>, <16 x i16>* %16008, align 2, !tbaa !399
  %16010 = zext i32 %.pre-phi3587 to i64
  %16011 = mul nsw i64 %16010, %116
  %16012 = add nsw i64 %16011, %94
  %16013 = getelementptr inbounds i16, i16* %blur_x, i64 %16012
  %16014 = getelementptr inbounds i16, i16* %16013, i64 -32
  %16015 = bitcast i16* %16014 to <16 x i16>*
  %16016 = load <16 x i16>, <16 x i16>* %16015, align 2, !tbaa !399
  %16017 = getelementptr inbounds i16, i16* %16013, i64 -16
  %16018 = bitcast i16* %16017 to <16 x i16>*
  %16019 = load <16 x i16>, <16 x i16>* %16018, align 2, !tbaa !399
  %16020 = zext i32 %.pre-phi3591 to i64
  %16021 = mul nsw i64 %16020, %116
  %16022 = add nsw i64 %16021, %94
  %16023 = getelementptr inbounds i16, i16* %blur_x, i64 %16022
  %16024 = getelementptr inbounds i16, i16* %16023, i64 -32
  %16025 = bitcast i16* %16024 to <16 x i16>*
  %16026 = load <16 x i16>, <16 x i16>* %16025, align 2, !tbaa !399
  %16027 = getelementptr inbounds i16, i16* %16023, i64 -16
  %16028 = bitcast i16* %16027 to <16 x i16>*
  %16029 = load <16 x i16>, <16 x i16>* %16028, align 2, !tbaa !399
  %16030 = zext i32 %.pre-phi3595 to i64
  %16031 = mul nsw i64 %16030, %116
  %16032 = add nsw i64 %16031, %94
  %16033 = getelementptr inbounds i16, i16* %blur_x, i64 %16032
  %16034 = getelementptr inbounds i16, i16* %16033, i64 -32
  %16035 = bitcast i16* %16034 to <16 x i16>*
  %16036 = load <16 x i16>, <16 x i16>* %16035, align 2, !tbaa !399
  %16037 = getelementptr inbounds i16, i16* %16033, i64 -16
  %16038 = bitcast i16* %16037 to <16 x i16>*
  %16039 = load <16 x i16>, <16 x i16>* %16038, align 2, !tbaa !399
  %16040 = mul nsw i64 %15981, %116
  %16041 = add nsw i64 %16040, %94
  %16042 = getelementptr inbounds i16, i16* %blur_x, i64 %16041
  %16043 = getelementptr inbounds i16, i16* %16042, i64 -32
  %16044 = bitcast i16* %16043 to <16 x i16>*
  %16045 = load <16 x i16>, <16 x i16>* %16044, align 2, !tbaa !399
  %16046 = getelementptr inbounds i16, i16* %16042, i64 -16
  %16047 = bitcast i16* %16046 to <16 x i16>*
  %16048 = load <16 x i16>, <16 x i16>* %16047, align 2, !tbaa !399
  %16049 = zext i32 %.pre-phi3599 to i64
  %16050 = mul nsw i64 %16049, %116
  %16051 = add nsw i64 %16050, %94
  %16052 = getelementptr inbounds i16, i16* %blur_x, i64 %16051
  %16053 = getelementptr inbounds i16, i16* %16052, i64 -32
  %16054 = bitcast i16* %16053 to <16 x i16>*
  %16055 = load <16 x i16>, <16 x i16>* %16054, align 2, !tbaa !399
  %16056 = getelementptr inbounds i16, i16* %16052, i64 -16
  %16057 = bitcast i16* %16056 to <16 x i16>*
  %16058 = load <16 x i16>, <16 x i16>* %16057, align 2, !tbaa !399
  %16059 = add <16 x i16> %16006, %15996
  %16060 = add <16 x i16> %16059, %16016
  %16061 = add <16 x i16> %16060, %16026
  %16062 = add <16 x i16> %16061, %16036
  %16063 = add <16 x i16> %16062, %16045
  %16064 = add <16 x i16> %16063, %16055
  %16065 = add <16 x i16> %16009, %15999
  %16066 = add <16 x i16> %16065, %16019
  %16067 = add <16 x i16> %16066, %16029
  %16068 = add <16 x i16> %16067, %16039
  %16069 = add <16 x i16> %16068, %16048
  %16070 = add <16 x i16> %16069, %16058
  %16071 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16064, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16072 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16070, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16073 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16071, <16 x i16> %16064)
  %16074 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16072, <16 x i16> %16070)
  %16075 = shufflevector <16 x i16> %16073, <16 x i16> %16074, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16076 = lshr <32 x i16> %16075, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16077 = shufflevector <32 x i16> %16076, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16078 = sext i32 %a26 to i64
  %16079 = add nsw i64 %16078, 25
  %16080 = mul nsw i64 %16079, %117
  %16081 = add nsw i64 %119, %16080
  %16082 = getelementptr inbounds i16, i16* %66, i64 %16081
  %16083 = getelementptr inbounds i16, i16* %16082, i64 -32
  %16084 = bitcast i16* %16083 to <16 x i16>*
  store <16 x i16> %16077, <16 x i16>* %16084, align 2, !tbaa !401
  %16085 = shufflevector <32 x i16> %16076, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16086 = getelementptr inbounds i16, i16* %16082, i64 -16
  %16087 = bitcast i16* %16086 to <16 x i16>*
  store <16 x i16> %16085, <16 x i16>* %16087, align 2, !tbaa !401
  br label %after_bb679

"for blur_y.s0.x.x.rebased684":                   ; preds = %"for blur_y.s0.x.x.rebased684.preheader", %"consume blur_x691"
  %indvars.iv3464 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased684.preheader" ], [ %indvars.iv.next3465, %"consume blur_x691" ]
  %16088 = add nsw i64 %indvars.iv3464, %101
  %16089 = icmp slt i64 %16088, 1
  %16090 = trunc i64 %16088 to i32
  %16091 = shl nsw i32 %16090, 5
  %16092 = icmp sgt i32 %4, %16091
  %16093 = or i1 %16089, %16092
  br i1 %16093, label %"produce blur_x690", label %"for blur_y.s0.x.x.rebased684.consume blur_x691_crit_edge"

"for blur_y.s0.x.x.rebased684.consume blur_x691_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased684"
  %.pre3654 = shl nsw i64 %16088, 5
  br label %"consume blur_x691"

"end for blur_y.s0.x.x.rebased685":               ; preds = %"consume blur_x691", %after_bb679
  br i1 %102, label %"for blur_y.s0.x.x.rebased692.preheader", label %"end for blur_y.s0.x.x.rebased693", !prof !386

"for blur_y.s0.x.x.rebased692.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased685"
  %16094 = sext i32 %t1778 to i64
  %16095 = zext i32 %.pre-phi3583 to i64
  %16096 = mul nsw i64 %16095, %116
  %16097 = sub nsw i64 %16096, %96
  %16098 = zext i32 %.pre-phi3579 to i64
  %16099 = mul nsw i64 %16098, %116
  %16100 = sub nsw i64 %16099, %96
  %16101 = zext i32 %.pre-phi3587 to i64
  %16102 = mul nsw i64 %16101, %116
  %16103 = sub nsw i64 %16102, %96
  %16104 = zext i32 %.pre-phi3591 to i64
  %16105 = mul nsw i64 %16104, %116
  %16106 = sub nsw i64 %16105, %96
  %16107 = zext i32 %.pre-phi3595 to i64
  %16108 = mul nsw i64 %16107, %116
  %16109 = sub nsw i64 %16108, %96
  %16110 = zext i32 %.pre-phi3605 to i64
  %16111 = mul nsw i64 %16110, %116
  %16112 = sub nsw i64 %16111, %96
  %16113 = zext i32 %.pre-phi3599 to i64
  %16114 = mul nsw i64 %16113, %116
  %16115 = sub nsw i64 %16114, %96
  %16116 = sext i32 %a26 to i64
  %16117 = add nsw i64 %16116, 25
  %16118 = mul nsw i64 %16117, %117
  %16119 = add nsw i64 %16118, %120
  br label %"for blur_y.s0.x.x.rebased692"

"produce blur_x690":                              ; preds = %"for blur_y.s0.x.x.rebased684"
  %t1152 = add nsw i32 %16091, %t2161
  %16120 = sext i32 %t1152 to i64
  %16121 = getelementptr inbounds i16, i16* %read_input, i64 %16120
  %16122 = getelementptr inbounds i16, i16* %16121, i64 1
  %16123 = bitcast i16* %16122 to <16 x i16>*
  %16124 = load <16 x i16>, <16 x i16>* %16123, align 2, !tbaa !396
  %16125 = getelementptr inbounds i16, i16* %16121, i64 17
  %16126 = bitcast i16* %16125 to <16 x i16>*
  %16127 = load <16 x i16>, <16 x i16>* %16126, align 2, !tbaa !396
  %16128 = bitcast i16* %16121 to <16 x i16>*
  %16129 = load <16 x i16>, <16 x i16>* %16128, align 2, !tbaa !396
  %16130 = getelementptr inbounds i16, i16* %16121, i64 16
  %16131 = bitcast i16* %16130 to <16 x i16>*
  %16132 = load <16 x i16>, <16 x i16>* %16131, align 2, !tbaa !396
  %16133 = getelementptr inbounds i16, i16* %16121, i64 2
  %16134 = bitcast i16* %16133 to <16 x i16>*
  %16135 = load <16 x i16>, <16 x i16>* %16134, align 2, !tbaa !396
  %16136 = getelementptr inbounds i16, i16* %16121, i64 18
  %16137 = bitcast i16* %16136 to <16 x i16>*
  %16138 = load <16 x i16>, <16 x i16>* %16137, align 2, !tbaa !396
  %16139 = getelementptr inbounds i16, i16* %16121, i64 3
  %16140 = bitcast i16* %16139 to <16 x i16>*
  %16141 = load <16 x i16>, <16 x i16>* %16140, align 2, !tbaa !396
  %16142 = getelementptr inbounds i16, i16* %16121, i64 19
  %16143 = bitcast i16* %16142 to <16 x i16>*
  %16144 = load <16 x i16>, <16 x i16>* %16143, align 2, !tbaa !396
  %16145 = getelementptr inbounds i16, i16* %16121, i64 4
  %16146 = bitcast i16* %16145 to <16 x i16>*
  %16147 = load <16 x i16>, <16 x i16>* %16146, align 2, !tbaa !396
  %16148 = getelementptr inbounds i16, i16* %16121, i64 20
  %16149 = bitcast i16* %16148 to <16 x i16>*
  %16150 = load <16 x i16>, <16 x i16>* %16149, align 2, !tbaa !396
  %16151 = getelementptr inbounds i16, i16* %16121, i64 6
  %16152 = bitcast i16* %16151 to <16 x i16>*
  %16153 = load <16 x i16>, <16 x i16>* %16152, align 2, !tbaa !396
  %16154 = getelementptr inbounds i16, i16* %16121, i64 22
  %16155 = bitcast i16* %16154 to <16 x i16>*
  %16156 = load <16 x i16>, <16 x i16>* %16155, align 2, !tbaa !396
  %16157 = getelementptr inbounds i16, i16* %16121, i64 5
  %16158 = bitcast i16* %16157 to <16 x i16>*
  %16159 = load <16 x i16>, <16 x i16>* %16158, align 2, !tbaa !396
  %16160 = getelementptr inbounds i16, i16* %16121, i64 21
  %16161 = bitcast i16* %16160 to <16 x i16>*
  %16162 = load <16 x i16>, <16 x i16>* %16161, align 2, !tbaa !396
  %16163 = add <16 x i16> %16129, %16124
  %16164 = add <16 x i16> %16163, %16135
  %16165 = add <16 x i16> %16164, %16141
  %16166 = add <16 x i16> %16165, %16147
  %16167 = add <16 x i16> %16166, %16153
  %16168 = add <16 x i16> %16167, %16159
  %16169 = add <16 x i16> %16132, %16127
  %16170 = add <16 x i16> %16169, %16138
  %16171 = add <16 x i16> %16170, %16144
  %16172 = add <16 x i16> %16171, %16150
  %16173 = add <16 x i16> %16172, %16156
  %16174 = add <16 x i16> %16173, %16162
  %16175 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16168, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16176 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16174, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16177 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16175, <16 x i16> %16168)
  %16178 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16176, <16 x i16> %16174)
  %16179 = shufflevector <16 x i16> %16177, <16 x i16> %16178, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16180 = lshr <32 x i16> %16179, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16181 = shufflevector <32 x i16> %16180, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16182 = shl nsw i64 %16088, 5
  %16183 = add nsw i64 %16182, %15893
  %16184 = getelementptr inbounds i16, i16* %blur_x, i64 %16183
  %16185 = bitcast i16* %16184 to <16 x i16>*
  store <16 x i16> %16181, <16 x i16>* %16185, align 2, !tbaa !399
  %16186 = shufflevector <32 x i16> %16180, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16187 = getelementptr inbounds i16, i16* %16184, i64 16
  %16188 = bitcast i16* %16187 to <16 x i16>*
  store <16 x i16> %16186, <16 x i16>* %16188, align 2, !tbaa !399
  br label %"consume blur_x691"

"consume blur_x691":                              ; preds = %"for blur_y.s0.x.x.rebased684.consume blur_x691_crit_edge", %"produce blur_x690"
  %.pre-phi3655 = phi i64 [ %.pre3654, %"for blur_y.s0.x.x.rebased684.consume blur_x691_crit_edge" ], [ %16182, %"produce blur_x690" ]
  %16189 = add nsw i64 %15896, %.pre-phi3655
  %16190 = getelementptr inbounds i16, i16* %blur_x, i64 %16189
  %16191 = bitcast i16* %16190 to <16 x i16>*
  %16192 = load <16 x i16>, <16 x i16>* %16191, align 2, !tbaa !399
  %16193 = getelementptr inbounds i16, i16* %16190, i64 16
  %16194 = bitcast i16* %16193 to <16 x i16>*
  %16195 = load <16 x i16>, <16 x i16>* %16194, align 2, !tbaa !399
  %16196 = add nsw i64 %15899, %.pre-phi3655
  %16197 = getelementptr inbounds i16, i16* %blur_x, i64 %16196
  %16198 = bitcast i16* %16197 to <16 x i16>*
  %16199 = load <16 x i16>, <16 x i16>* %16198, align 2, !tbaa !399
  %16200 = getelementptr inbounds i16, i16* %16197, i64 16
  %16201 = bitcast i16* %16200 to <16 x i16>*
  %16202 = load <16 x i16>, <16 x i16>* %16201, align 2, !tbaa !399
  %16203 = add nsw i64 %15902, %.pre-phi3655
  %16204 = getelementptr inbounds i16, i16* %blur_x, i64 %16203
  %16205 = bitcast i16* %16204 to <16 x i16>*
  %16206 = load <16 x i16>, <16 x i16>* %16205, align 2, !tbaa !399
  %16207 = getelementptr inbounds i16, i16* %16204, i64 16
  %16208 = bitcast i16* %16207 to <16 x i16>*
  %16209 = load <16 x i16>, <16 x i16>* %16208, align 2, !tbaa !399
  %16210 = add nsw i64 %15905, %.pre-phi3655
  %16211 = getelementptr inbounds i16, i16* %blur_x, i64 %16210
  %16212 = bitcast i16* %16211 to <16 x i16>*
  %16213 = load <16 x i16>, <16 x i16>* %16212, align 2, !tbaa !399
  %16214 = getelementptr inbounds i16, i16* %16211, i64 16
  %16215 = bitcast i16* %16214 to <16 x i16>*
  %16216 = load <16 x i16>, <16 x i16>* %16215, align 2, !tbaa !399
  %16217 = add nsw i64 %15908, %.pre-phi3655
  %16218 = getelementptr inbounds i16, i16* %blur_x, i64 %16217
  %16219 = bitcast i16* %16218 to <16 x i16>*
  %16220 = load <16 x i16>, <16 x i16>* %16219, align 2, !tbaa !399
  %16221 = getelementptr inbounds i16, i16* %16218, i64 16
  %16222 = bitcast i16* %16221 to <16 x i16>*
  %16223 = load <16 x i16>, <16 x i16>* %16222, align 2, !tbaa !399
  %16224 = add nsw i64 %15911, %.pre-phi3655
  %16225 = getelementptr inbounds i16, i16* %blur_x, i64 %16224
  %16226 = bitcast i16* %16225 to <16 x i16>*
  %16227 = load <16 x i16>, <16 x i16>* %16226, align 2, !tbaa !399
  %16228 = getelementptr inbounds i16, i16* %16225, i64 16
  %16229 = bitcast i16* %16228 to <16 x i16>*
  %16230 = load <16 x i16>, <16 x i16>* %16229, align 2, !tbaa !399
  %16231 = add nsw i64 %15914, %.pre-phi3655
  %16232 = getelementptr inbounds i16, i16* %blur_x, i64 %16231
  %16233 = bitcast i16* %16232 to <16 x i16>*
  %16234 = load <16 x i16>, <16 x i16>* %16233, align 2, !tbaa !399
  %16235 = getelementptr inbounds i16, i16* %16232, i64 16
  %16236 = bitcast i16* %16235 to <16 x i16>*
  %16237 = load <16 x i16>, <16 x i16>* %16236, align 2, !tbaa !399
  %16238 = add <16 x i16> %16199, %16192
  %16239 = add <16 x i16> %16238, %16206
  %16240 = add <16 x i16> %16239, %16213
  %16241 = add <16 x i16> %16240, %16220
  %16242 = add <16 x i16> %16241, %16227
  %16243 = add <16 x i16> %16242, %16234
  %16244 = add <16 x i16> %16202, %16195
  %16245 = add <16 x i16> %16244, %16209
  %16246 = add <16 x i16> %16245, %16216
  %16247 = add <16 x i16> %16246, %16223
  %16248 = add <16 x i16> %16247, %16230
  %16249 = add <16 x i16> %16248, %16237
  %16250 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16243, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16251 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16249, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16252 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16250, <16 x i16> %16243)
  %16253 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16251, <16 x i16> %16249)
  %16254 = shufflevector <16 x i16> %16252, <16 x i16> %16253, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16255 = lshr <32 x i16> %16254, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16256 = shufflevector <32 x i16> %16255, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16257 = add nsw i64 %15918, %.pre-phi3655
  %16258 = getelementptr inbounds i16, i16* %66, i64 %16257
  %16259 = bitcast i16* %16258 to <16 x i16>*
  store <16 x i16> %16256, <16 x i16>* %16259, align 2, !tbaa !401
  %16260 = shufflevector <32 x i16> %16255, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16261 = getelementptr inbounds i16, i16* %16258, i64 16
  %16262 = bitcast i16* %16261 to <16 x i16>*
  store <16 x i16> %16260, <16 x i16>* %16262, align 2, !tbaa !401
  %indvars.iv.next3465 = add nuw nsw i64 %indvars.iv3464, 1
  %.not2821 = icmp eq i64 %indvars.iv.next3465, %188
  br i1 %.not2821, label %"end for blur_y.s0.x.x.rebased685", label %"for blur_y.s0.x.x.rebased684"

"for blur_y.s0.x.x.rebased692":                   ; preds = %"for blur_y.s0.x.x.rebased692.preheader", %"consume blur_x700"
  %blur_y.s0.x.x.rebased694 = phi i32 [ %16413, %"consume blur_x700" ], [ 0, %"for blur_y.s0.x.x.rebased692.preheader" ]
  %16263 = add nsw i32 %blur_y.s0.x.x.rebased694, %t1670
  %a294 = shl nsw i32 %16263, 5
  %16264 = icmp sgt i32 %a14, %a294
  %b300 = select i1 %16264, i32 %a294, i32 %a14
  %16265 = icmp slt i32 %16263, 1
  %16266 = icmp sgt i32 %4, %a294
  %16267 = or i1 %16265, %16266
  br i1 %16267, label %"produce blur_x698", label %"consume blur_x700"

"end for blur_y.s0.x.x.rebased693":               ; preds = %"consume blur_x700", %"end for blur_y.s0.x.x.rebased685"
  br i1 %34, label %"produce blur_x704", label %after_bb701

"produce blur_x698":                              ; preds = %"for blur_y.s0.x.x.rebased692"
  %16268 = icmp slt i32 %b300, %4
  %blur_x.s0.x.v1.base.s699 = select i1 %16268, i32 %b300, i32 %4
  %t1157 = add nsw i32 %blur_x.s0.x.v1.base.s699, %t2161
  %16269 = sext i32 %t1157 to i64
  %16270 = getelementptr inbounds i16, i16* %read_input, i64 %16269
  %16271 = getelementptr inbounds i16, i16* %16270, i64 1
  %16272 = bitcast i16* %16271 to <16 x i16>*
  %16273 = load <16 x i16>, <16 x i16>* %16272, align 2, !tbaa !396
  %16274 = getelementptr inbounds i16, i16* %16270, i64 17
  %16275 = bitcast i16* %16274 to <16 x i16>*
  %16276 = load <16 x i16>, <16 x i16>* %16275, align 2, !tbaa !396
  %16277 = bitcast i16* %16270 to <16 x i16>*
  %16278 = load <16 x i16>, <16 x i16>* %16277, align 2, !tbaa !396
  %16279 = getelementptr inbounds i16, i16* %16270, i64 16
  %16280 = bitcast i16* %16279 to <16 x i16>*
  %16281 = load <16 x i16>, <16 x i16>* %16280, align 2, !tbaa !396
  %16282 = getelementptr inbounds i16, i16* %16270, i64 2
  %16283 = bitcast i16* %16282 to <16 x i16>*
  %16284 = load <16 x i16>, <16 x i16>* %16283, align 2, !tbaa !396
  %16285 = getelementptr inbounds i16, i16* %16270, i64 18
  %16286 = bitcast i16* %16285 to <16 x i16>*
  %16287 = load <16 x i16>, <16 x i16>* %16286, align 2, !tbaa !396
  %16288 = getelementptr inbounds i16, i16* %16270, i64 3
  %16289 = bitcast i16* %16288 to <16 x i16>*
  %16290 = load <16 x i16>, <16 x i16>* %16289, align 2, !tbaa !396
  %16291 = getelementptr inbounds i16, i16* %16270, i64 19
  %16292 = bitcast i16* %16291 to <16 x i16>*
  %16293 = load <16 x i16>, <16 x i16>* %16292, align 2, !tbaa !396
  %16294 = getelementptr inbounds i16, i16* %16270, i64 4
  %16295 = bitcast i16* %16294 to <16 x i16>*
  %16296 = load <16 x i16>, <16 x i16>* %16295, align 2, !tbaa !396
  %16297 = getelementptr inbounds i16, i16* %16270, i64 20
  %16298 = bitcast i16* %16297 to <16 x i16>*
  %16299 = load <16 x i16>, <16 x i16>* %16298, align 2, !tbaa !396
  %16300 = getelementptr inbounds i16, i16* %16270, i64 6
  %16301 = bitcast i16* %16300 to <16 x i16>*
  %16302 = load <16 x i16>, <16 x i16>* %16301, align 2, !tbaa !396
  %16303 = getelementptr inbounds i16, i16* %16270, i64 22
  %16304 = bitcast i16* %16303 to <16 x i16>*
  %16305 = load <16 x i16>, <16 x i16>* %16304, align 2, !tbaa !396
  %16306 = getelementptr inbounds i16, i16* %16270, i64 5
  %16307 = bitcast i16* %16306 to <16 x i16>*
  %16308 = load <16 x i16>, <16 x i16>* %16307, align 2, !tbaa !396
  %16309 = getelementptr inbounds i16, i16* %16270, i64 21
  %16310 = bitcast i16* %16309 to <16 x i16>*
  %16311 = load <16 x i16>, <16 x i16>* %16310, align 2, !tbaa !396
  %16312 = add <16 x i16> %16278, %16273
  %16313 = add <16 x i16> %16312, %16284
  %16314 = add <16 x i16> %16313, %16290
  %16315 = add <16 x i16> %16314, %16296
  %16316 = add <16 x i16> %16315, %16302
  %16317 = add <16 x i16> %16316, %16308
  %16318 = add <16 x i16> %16281, %16276
  %16319 = add <16 x i16> %16318, %16287
  %16320 = add <16 x i16> %16319, %16293
  %16321 = add <16 x i16> %16320, %16299
  %16322 = add <16 x i16> %16321, %16305
  %16323 = add <16 x i16> %16322, %16311
  %16324 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16317, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16325 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16323, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16326 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16324, <16 x i16> %16317)
  %16327 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16325, <16 x i16> %16323)
  %16328 = shufflevector <16 x i16> %16326, <16 x i16> %16327, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16329 = lshr <32 x i16> %16328, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16330 = shufflevector <32 x i16> %16329, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16331 = sext i32 %blur_x.s0.x.v1.base.s699 to i64
  %16332 = add nsw i64 %16331, %16094
  %16333 = getelementptr inbounds i16, i16* %blur_x, i64 %16332
  %16334 = bitcast i16* %16333 to <16 x i16>*
  store <16 x i16> %16330, <16 x i16>* %16334, align 2, !tbaa !399
  %16335 = shufflevector <32 x i16> %16329, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16336 = getelementptr inbounds i16, i16* %16333, i64 16
  %16337 = bitcast i16* %16336 to <16 x i16>*
  store <16 x i16> %16335, <16 x i16>* %16337, align 2, !tbaa !399
  br label %"consume blur_x700"

"consume blur_x700":                              ; preds = %"for blur_y.s0.x.x.rebased692", %"produce blur_x698"
  %16338 = sext i32 %b300 to i64
  %16339 = add nsw i64 %16097, %16338
  %16340 = getelementptr inbounds i16, i16* %blur_x, i64 %16339
  %16341 = bitcast i16* %16340 to <16 x i16>*
  %16342 = load <16 x i16>, <16 x i16>* %16341, align 2, !tbaa !399
  %16343 = getelementptr inbounds i16, i16* %16340, i64 16
  %16344 = bitcast i16* %16343 to <16 x i16>*
  %16345 = load <16 x i16>, <16 x i16>* %16344, align 2, !tbaa !399
  %16346 = add nsw i64 %16100, %16338
  %16347 = getelementptr inbounds i16, i16* %blur_x, i64 %16346
  %16348 = bitcast i16* %16347 to <16 x i16>*
  %16349 = load <16 x i16>, <16 x i16>* %16348, align 2, !tbaa !399
  %16350 = getelementptr inbounds i16, i16* %16347, i64 16
  %16351 = bitcast i16* %16350 to <16 x i16>*
  %16352 = load <16 x i16>, <16 x i16>* %16351, align 2, !tbaa !399
  %16353 = add nsw i64 %16103, %16338
  %16354 = getelementptr inbounds i16, i16* %blur_x, i64 %16353
  %16355 = bitcast i16* %16354 to <16 x i16>*
  %16356 = load <16 x i16>, <16 x i16>* %16355, align 2, !tbaa !399
  %16357 = getelementptr inbounds i16, i16* %16354, i64 16
  %16358 = bitcast i16* %16357 to <16 x i16>*
  %16359 = load <16 x i16>, <16 x i16>* %16358, align 2, !tbaa !399
  %16360 = add nsw i64 %16106, %16338
  %16361 = getelementptr inbounds i16, i16* %blur_x, i64 %16360
  %16362 = bitcast i16* %16361 to <16 x i16>*
  %16363 = load <16 x i16>, <16 x i16>* %16362, align 2, !tbaa !399
  %16364 = getelementptr inbounds i16, i16* %16361, i64 16
  %16365 = bitcast i16* %16364 to <16 x i16>*
  %16366 = load <16 x i16>, <16 x i16>* %16365, align 2, !tbaa !399
  %16367 = add nsw i64 %16109, %16338
  %16368 = getelementptr inbounds i16, i16* %blur_x, i64 %16367
  %16369 = bitcast i16* %16368 to <16 x i16>*
  %16370 = load <16 x i16>, <16 x i16>* %16369, align 2, !tbaa !399
  %16371 = getelementptr inbounds i16, i16* %16368, i64 16
  %16372 = bitcast i16* %16371 to <16 x i16>*
  %16373 = load <16 x i16>, <16 x i16>* %16372, align 2, !tbaa !399
  %16374 = add nsw i64 %16112, %16338
  %16375 = getelementptr inbounds i16, i16* %blur_x, i64 %16374
  %16376 = bitcast i16* %16375 to <16 x i16>*
  %16377 = load <16 x i16>, <16 x i16>* %16376, align 2, !tbaa !399
  %16378 = getelementptr inbounds i16, i16* %16375, i64 16
  %16379 = bitcast i16* %16378 to <16 x i16>*
  %16380 = load <16 x i16>, <16 x i16>* %16379, align 2, !tbaa !399
  %16381 = add nsw i64 %16115, %16338
  %16382 = getelementptr inbounds i16, i16* %blur_x, i64 %16381
  %16383 = bitcast i16* %16382 to <16 x i16>*
  %16384 = load <16 x i16>, <16 x i16>* %16383, align 2, !tbaa !399
  %16385 = getelementptr inbounds i16, i16* %16382, i64 16
  %16386 = bitcast i16* %16385 to <16 x i16>*
  %16387 = load <16 x i16>, <16 x i16>* %16386, align 2, !tbaa !399
  %16388 = add <16 x i16> %16349, %16342
  %16389 = add <16 x i16> %16388, %16356
  %16390 = add <16 x i16> %16389, %16363
  %16391 = add <16 x i16> %16390, %16370
  %16392 = add <16 x i16> %16391, %16377
  %16393 = add <16 x i16> %16392, %16384
  %16394 = add <16 x i16> %16352, %16345
  %16395 = add <16 x i16> %16394, %16359
  %16396 = add <16 x i16> %16395, %16366
  %16397 = add <16 x i16> %16396, %16373
  %16398 = add <16 x i16> %16397, %16380
  %16399 = add <16 x i16> %16398, %16387
  %16400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16393, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16399, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16402 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16400, <16 x i16> %16393)
  %16403 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16401, <16 x i16> %16399)
  %16404 = shufflevector <16 x i16> %16402, <16 x i16> %16403, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16405 = lshr <32 x i16> %16404, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16406 = shufflevector <32 x i16> %16405, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16407 = add nsw i64 %16119, %16338
  %16408 = getelementptr inbounds i16, i16* %66, i64 %16407
  %16409 = bitcast i16* %16408 to <16 x i16>*
  store <16 x i16> %16406, <16 x i16>* %16409, align 2, !tbaa !401
  %16410 = shufflevector <32 x i16> %16405, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16411 = getelementptr inbounds i16, i16* %16408, i64 16
  %16412 = bitcast i16* %16411 to <16 x i16>*
  store <16 x i16> %16410, <16 x i16>* %16412, align 2, !tbaa !401
  %16413 = add nuw nsw i32 %blur_y.s0.x.x.rebased694, 1
  %.not2820 = icmp eq i32 %16413, %t1727
  br i1 %.not2820, label %"end for blur_y.s0.x.x.rebased693", label %"for blur_y.s0.x.x.rebased692"

after_bb701:                                      ; preds = %"end for blur_y.s0.x.x.rebased693", %"produce blur_x704"
  br i1 %100, label %"for blur_y.s0.x.x.rebased706.preheader", label %"end for blur_y.s0.x.x.rebased707", !prof !386

"for blur_y.s0.x.x.rebased706.preheader":         ; preds = %after_bb701
  %16414 = sext i32 %t1726 to i64
  %16415 = zext i32 %.pre-phi3587 to i64
  %16416 = mul nsw i64 %16415, %116
  %16417 = sub nsw i64 %16416, %96
  %16418 = zext i32 %.pre-phi3583 to i64
  %16419 = mul nsw i64 %16418, %116
  %16420 = sub nsw i64 %16419, %96
  %16421 = zext i32 %.pre-phi3591 to i64
  %16422 = mul nsw i64 %16421, %116
  %16423 = sub nsw i64 %16422, %96
  %16424 = zext i32 %.pre-phi3595 to i64
  %16425 = mul nsw i64 %16424, %116
  %16426 = sub nsw i64 %16425, %96
  %16427 = zext i32 %.pre-phi3599 to i64
  %16428 = mul nsw i64 %16427, %116
  %16429 = sub nsw i64 %16428, %96
  %16430 = zext i32 %.pre-phi to i64
  %16431 = mul nsw i64 %16430, %116
  %16432 = sub nsw i64 %16431, %96
  %16433 = zext i32 %.pre-phi3605 to i64
  %16434 = mul nsw i64 %16433, %116
  %16435 = sub nsw i64 %16434, %96
  %16436 = sext i32 %a26 to i64
  %16437 = add nsw i64 %16436, 26
  %16438 = mul nsw i64 %16437, %117
  %16439 = add nsw i64 %16438, %120
  br label %"for blur_y.s0.x.x.rebased706"

"produce blur_x704":                              ; preds = %"end for blur_y.s0.x.x.rebased693"
  %16440 = getelementptr inbounds i16, i16* %read_input, i64 %171
  %16441 = getelementptr inbounds i16, i16* %16440, i64 -31
  %16442 = bitcast i16* %16441 to <16 x i16>*
  %16443 = load <16 x i16>, <16 x i16>* %16442, align 2, !tbaa !396
  %16444 = getelementptr inbounds i16, i16* %16440, i64 -15
  %16445 = bitcast i16* %16444 to <16 x i16>*
  %16446 = load <16 x i16>, <16 x i16>* %16445, align 2, !tbaa !396
  %16447 = getelementptr inbounds i16, i16* %16440, i64 -32
  %16448 = bitcast i16* %16447 to <16 x i16>*
  %16449 = load <16 x i16>, <16 x i16>* %16448, align 2, !tbaa !396
  %16450 = getelementptr inbounds i16, i16* %16440, i64 -16
  %16451 = bitcast i16* %16450 to <16 x i16>*
  %16452 = load <16 x i16>, <16 x i16>* %16451, align 2, !tbaa !396
  %16453 = getelementptr inbounds i16, i16* %16440, i64 -30
  %16454 = bitcast i16* %16453 to <16 x i16>*
  %16455 = load <16 x i16>, <16 x i16>* %16454, align 2, !tbaa !396
  %16456 = getelementptr inbounds i16, i16* %16440, i64 -14
  %16457 = bitcast i16* %16456 to <16 x i16>*
  %16458 = load <16 x i16>, <16 x i16>* %16457, align 2, !tbaa !396
  %16459 = getelementptr inbounds i16, i16* %16440, i64 -29
  %16460 = bitcast i16* %16459 to <16 x i16>*
  %16461 = load <16 x i16>, <16 x i16>* %16460, align 2, !tbaa !396
  %16462 = getelementptr inbounds i16, i16* %16440, i64 -13
  %16463 = bitcast i16* %16462 to <16 x i16>*
  %16464 = load <16 x i16>, <16 x i16>* %16463, align 2, !tbaa !396
  %16465 = getelementptr inbounds i16, i16* %16440, i64 -28
  %16466 = bitcast i16* %16465 to <16 x i16>*
  %16467 = load <16 x i16>, <16 x i16>* %16466, align 2, !tbaa !396
  %16468 = getelementptr inbounds i16, i16* %16440, i64 -12
  %16469 = bitcast i16* %16468 to <16 x i16>*
  %16470 = load <16 x i16>, <16 x i16>* %16469, align 2, !tbaa !396
  %16471 = getelementptr inbounds i16, i16* %16440, i64 -26
  %16472 = bitcast i16* %16471 to <16 x i16>*
  %16473 = load <16 x i16>, <16 x i16>* %16472, align 2, !tbaa !396
  %16474 = getelementptr inbounds i16, i16* %16440, i64 -10
  %16475 = bitcast i16* %16474 to <16 x i16>*
  %16476 = load <16 x i16>, <16 x i16>* %16475, align 2, !tbaa !396
  %16477 = getelementptr inbounds i16, i16* %16440, i64 -27
  %16478 = bitcast i16* %16477 to <16 x i16>*
  %16479 = load <16 x i16>, <16 x i16>* %16478, align 2, !tbaa !396
  %16480 = getelementptr inbounds i16, i16* %16440, i64 -11
  %16481 = bitcast i16* %16480 to <16 x i16>*
  %16482 = load <16 x i16>, <16 x i16>* %16481, align 2, !tbaa !396
  %16483 = add <16 x i16> %16449, %16443
  %16484 = add <16 x i16> %16483, %16455
  %16485 = add <16 x i16> %16484, %16461
  %16486 = add <16 x i16> %16485, %16467
  %16487 = add <16 x i16> %16486, %16473
  %16488 = add <16 x i16> %16487, %16479
  %16489 = add <16 x i16> %16452, %16446
  %16490 = add <16 x i16> %16489, %16458
  %16491 = add <16 x i16> %16490, %16464
  %16492 = add <16 x i16> %16491, %16470
  %16493 = add <16 x i16> %16492, %16476
  %16494 = add <16 x i16> %16493, %16482
  %16495 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16488, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16496 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16494, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16497 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16495, <16 x i16> %16488)
  %16498 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16496, <16 x i16> %16494)
  %16499 = shufflevector <16 x i16> %16497, <16 x i16> %16498, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16500 = lshr <32 x i16> %16499, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16501 = shufflevector <32 x i16> %16500, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16502 = zext i32 %.pre-phi to i64
  %16503 = mul nsw i64 %97, %16502
  %16504 = add nsw i64 %99, %16503
  %16505 = getelementptr inbounds i16, i16* %blur_x, i64 %16504
  %16506 = getelementptr inbounds i16, i16* %16505, i64 -32
  %16507 = bitcast i16* %16506 to <16 x i16>*
  store <16 x i16> %16501, <16 x i16>* %16507, align 2, !tbaa !399
  %16508 = shufflevector <32 x i16> %16500, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16509 = getelementptr inbounds i16, i16* %16505, i64 -16
  %16510 = bitcast i16* %16509 to <16 x i16>*
  store <16 x i16> %16508, <16 x i16>* %16510, align 2, !tbaa !399
  %16511 = zext i32 %.pre-phi3587 to i64
  %16512 = mul nsw i64 %16511, %116
  %16513 = add nsw i64 %16512, %94
  %16514 = getelementptr inbounds i16, i16* %blur_x, i64 %16513
  %16515 = getelementptr inbounds i16, i16* %16514, i64 -32
  %16516 = bitcast i16* %16515 to <16 x i16>*
  %16517 = load <16 x i16>, <16 x i16>* %16516, align 2, !tbaa !399
  %16518 = getelementptr inbounds i16, i16* %16514, i64 -16
  %16519 = bitcast i16* %16518 to <16 x i16>*
  %16520 = load <16 x i16>, <16 x i16>* %16519, align 2, !tbaa !399
  %16521 = zext i32 %.pre-phi3583 to i64
  %16522 = mul nsw i64 %16521, %116
  %16523 = add nsw i64 %16522, %94
  %16524 = getelementptr inbounds i16, i16* %blur_x, i64 %16523
  %16525 = getelementptr inbounds i16, i16* %16524, i64 -32
  %16526 = bitcast i16* %16525 to <16 x i16>*
  %16527 = load <16 x i16>, <16 x i16>* %16526, align 2, !tbaa !399
  %16528 = getelementptr inbounds i16, i16* %16524, i64 -16
  %16529 = bitcast i16* %16528 to <16 x i16>*
  %16530 = load <16 x i16>, <16 x i16>* %16529, align 2, !tbaa !399
  %16531 = zext i32 %.pre-phi3591 to i64
  %16532 = mul nsw i64 %16531, %116
  %16533 = add nsw i64 %16532, %94
  %16534 = getelementptr inbounds i16, i16* %blur_x, i64 %16533
  %16535 = getelementptr inbounds i16, i16* %16534, i64 -32
  %16536 = bitcast i16* %16535 to <16 x i16>*
  %16537 = load <16 x i16>, <16 x i16>* %16536, align 2, !tbaa !399
  %16538 = getelementptr inbounds i16, i16* %16534, i64 -16
  %16539 = bitcast i16* %16538 to <16 x i16>*
  %16540 = load <16 x i16>, <16 x i16>* %16539, align 2, !tbaa !399
  %16541 = zext i32 %.pre-phi3595 to i64
  %16542 = mul nsw i64 %16541, %116
  %16543 = add nsw i64 %16542, %94
  %16544 = getelementptr inbounds i16, i16* %blur_x, i64 %16543
  %16545 = getelementptr inbounds i16, i16* %16544, i64 -32
  %16546 = bitcast i16* %16545 to <16 x i16>*
  %16547 = load <16 x i16>, <16 x i16>* %16546, align 2, !tbaa !399
  %16548 = getelementptr inbounds i16, i16* %16544, i64 -16
  %16549 = bitcast i16* %16548 to <16 x i16>*
  %16550 = load <16 x i16>, <16 x i16>* %16549, align 2, !tbaa !399
  %16551 = zext i32 %.pre-phi3599 to i64
  %16552 = mul nsw i64 %16551, %116
  %16553 = add nsw i64 %16552, %94
  %16554 = getelementptr inbounds i16, i16* %blur_x, i64 %16553
  %16555 = getelementptr inbounds i16, i16* %16554, i64 -32
  %16556 = bitcast i16* %16555 to <16 x i16>*
  %16557 = load <16 x i16>, <16 x i16>* %16556, align 2, !tbaa !399
  %16558 = getelementptr inbounds i16, i16* %16554, i64 -16
  %16559 = bitcast i16* %16558 to <16 x i16>*
  %16560 = load <16 x i16>, <16 x i16>* %16559, align 2, !tbaa !399
  %16561 = mul nsw i64 %16502, %116
  %16562 = add nsw i64 %16561, %94
  %16563 = getelementptr inbounds i16, i16* %blur_x, i64 %16562
  %16564 = getelementptr inbounds i16, i16* %16563, i64 -32
  %16565 = bitcast i16* %16564 to <16 x i16>*
  %16566 = load <16 x i16>, <16 x i16>* %16565, align 2, !tbaa !399
  %16567 = getelementptr inbounds i16, i16* %16563, i64 -16
  %16568 = bitcast i16* %16567 to <16 x i16>*
  %16569 = load <16 x i16>, <16 x i16>* %16568, align 2, !tbaa !399
  %16570 = zext i32 %.pre-phi3605 to i64
  %16571 = mul nsw i64 %16570, %116
  %16572 = add nsw i64 %16571, %94
  %16573 = getelementptr inbounds i16, i16* %blur_x, i64 %16572
  %16574 = getelementptr inbounds i16, i16* %16573, i64 -32
  %16575 = bitcast i16* %16574 to <16 x i16>*
  %16576 = load <16 x i16>, <16 x i16>* %16575, align 2, !tbaa !399
  %16577 = getelementptr inbounds i16, i16* %16573, i64 -16
  %16578 = bitcast i16* %16577 to <16 x i16>*
  %16579 = load <16 x i16>, <16 x i16>* %16578, align 2, !tbaa !399
  %16580 = add <16 x i16> %16527, %16517
  %16581 = add <16 x i16> %16580, %16537
  %16582 = add <16 x i16> %16581, %16547
  %16583 = add <16 x i16> %16582, %16557
  %16584 = add <16 x i16> %16583, %16566
  %16585 = add <16 x i16> %16584, %16576
  %16586 = add <16 x i16> %16530, %16520
  %16587 = add <16 x i16> %16586, %16540
  %16588 = add <16 x i16> %16587, %16550
  %16589 = add <16 x i16> %16588, %16560
  %16590 = add <16 x i16> %16589, %16569
  %16591 = add <16 x i16> %16590, %16579
  %16592 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16585, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16593 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16591, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16594 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16592, <16 x i16> %16585)
  %16595 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16593, <16 x i16> %16591)
  %16596 = shufflevector <16 x i16> %16594, <16 x i16> %16595, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16597 = lshr <32 x i16> %16596, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16598 = shufflevector <32 x i16> %16597, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16599 = sext i32 %a26 to i64
  %16600 = add nsw i64 %16599, 26
  %16601 = mul nsw i64 %16600, %117
  %16602 = add nsw i64 %119, %16601
  %16603 = getelementptr inbounds i16, i16* %66, i64 %16602
  %16604 = getelementptr inbounds i16, i16* %16603, i64 -32
  %16605 = bitcast i16* %16604 to <16 x i16>*
  store <16 x i16> %16598, <16 x i16>* %16605, align 2, !tbaa !401
  %16606 = shufflevector <32 x i16> %16597, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16607 = getelementptr inbounds i16, i16* %16603, i64 -16
  %16608 = bitcast i16* %16607 to <16 x i16>*
  store <16 x i16> %16606, <16 x i16>* %16608, align 2, !tbaa !401
  br label %after_bb701

"for blur_y.s0.x.x.rebased706":                   ; preds = %"for blur_y.s0.x.x.rebased706.preheader", %"consume blur_x713"
  %indvars.iv3467 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased706.preheader" ], [ %indvars.iv.next3468, %"consume blur_x713" ]
  %16609 = add nsw i64 %indvars.iv3467, %101
  %16610 = icmp slt i64 %16609, 1
  %16611 = trunc i64 %16609 to i32
  %16612 = shl nsw i32 %16611, 5
  %16613 = icmp sgt i32 %4, %16612
  %16614 = or i1 %16610, %16613
  br i1 %16614, label %"produce blur_x712", label %"for blur_y.s0.x.x.rebased706.consume blur_x713_crit_edge"

"for blur_y.s0.x.x.rebased706.consume blur_x713_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased706"
  %.pre3656 = shl nsw i64 %16609, 5
  br label %"consume blur_x713"

"end for blur_y.s0.x.x.rebased707":               ; preds = %"consume blur_x713", %after_bb701
  br i1 %102, label %"for blur_y.s0.x.x.rebased714.preheader", label %"end for blur_y.s0.x.x.rebased715", !prof !386

"for blur_y.s0.x.x.rebased714.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased707"
  %16615 = sext i32 %t1726 to i64
  %16616 = zext i32 %.pre-phi3587 to i64
  %16617 = mul nsw i64 %16616, %116
  %16618 = sub nsw i64 %16617, %96
  %16619 = zext i32 %.pre-phi3583 to i64
  %16620 = mul nsw i64 %16619, %116
  %16621 = sub nsw i64 %16620, %96
  %16622 = zext i32 %.pre-phi3591 to i64
  %16623 = mul nsw i64 %16622, %116
  %16624 = sub nsw i64 %16623, %96
  %16625 = zext i32 %.pre-phi3595 to i64
  %16626 = mul nsw i64 %16625, %116
  %16627 = sub nsw i64 %16626, %96
  %16628 = zext i32 %.pre-phi3599 to i64
  %16629 = mul nsw i64 %16628, %116
  %16630 = sub nsw i64 %16629, %96
  %16631 = zext i32 %.pre-phi to i64
  %16632 = mul nsw i64 %16631, %116
  %16633 = sub nsw i64 %16632, %96
  %16634 = zext i32 %.pre-phi3605 to i64
  %16635 = mul nsw i64 %16634, %116
  %16636 = sub nsw i64 %16635, %96
  %16637 = sext i32 %a26 to i64
  %16638 = add nsw i64 %16637, 26
  %16639 = mul nsw i64 %16638, %117
  %16640 = add nsw i64 %16639, %120
  br label %"for blur_y.s0.x.x.rebased714"

"produce blur_x712":                              ; preds = %"for blur_y.s0.x.x.rebased706"
  %t1168 = add nsw i32 %16612, %t2177
  %16641 = sext i32 %t1168 to i64
  %16642 = getelementptr inbounds i16, i16* %read_input, i64 %16641
  %16643 = getelementptr inbounds i16, i16* %16642, i64 1
  %16644 = bitcast i16* %16643 to <16 x i16>*
  %16645 = load <16 x i16>, <16 x i16>* %16644, align 2, !tbaa !396
  %16646 = getelementptr inbounds i16, i16* %16642, i64 17
  %16647 = bitcast i16* %16646 to <16 x i16>*
  %16648 = load <16 x i16>, <16 x i16>* %16647, align 2, !tbaa !396
  %16649 = bitcast i16* %16642 to <16 x i16>*
  %16650 = load <16 x i16>, <16 x i16>* %16649, align 2, !tbaa !396
  %16651 = getelementptr inbounds i16, i16* %16642, i64 16
  %16652 = bitcast i16* %16651 to <16 x i16>*
  %16653 = load <16 x i16>, <16 x i16>* %16652, align 2, !tbaa !396
  %16654 = getelementptr inbounds i16, i16* %16642, i64 2
  %16655 = bitcast i16* %16654 to <16 x i16>*
  %16656 = load <16 x i16>, <16 x i16>* %16655, align 2, !tbaa !396
  %16657 = getelementptr inbounds i16, i16* %16642, i64 18
  %16658 = bitcast i16* %16657 to <16 x i16>*
  %16659 = load <16 x i16>, <16 x i16>* %16658, align 2, !tbaa !396
  %16660 = getelementptr inbounds i16, i16* %16642, i64 3
  %16661 = bitcast i16* %16660 to <16 x i16>*
  %16662 = load <16 x i16>, <16 x i16>* %16661, align 2, !tbaa !396
  %16663 = getelementptr inbounds i16, i16* %16642, i64 19
  %16664 = bitcast i16* %16663 to <16 x i16>*
  %16665 = load <16 x i16>, <16 x i16>* %16664, align 2, !tbaa !396
  %16666 = getelementptr inbounds i16, i16* %16642, i64 4
  %16667 = bitcast i16* %16666 to <16 x i16>*
  %16668 = load <16 x i16>, <16 x i16>* %16667, align 2, !tbaa !396
  %16669 = getelementptr inbounds i16, i16* %16642, i64 20
  %16670 = bitcast i16* %16669 to <16 x i16>*
  %16671 = load <16 x i16>, <16 x i16>* %16670, align 2, !tbaa !396
  %16672 = getelementptr inbounds i16, i16* %16642, i64 6
  %16673 = bitcast i16* %16672 to <16 x i16>*
  %16674 = load <16 x i16>, <16 x i16>* %16673, align 2, !tbaa !396
  %16675 = getelementptr inbounds i16, i16* %16642, i64 22
  %16676 = bitcast i16* %16675 to <16 x i16>*
  %16677 = load <16 x i16>, <16 x i16>* %16676, align 2, !tbaa !396
  %16678 = getelementptr inbounds i16, i16* %16642, i64 5
  %16679 = bitcast i16* %16678 to <16 x i16>*
  %16680 = load <16 x i16>, <16 x i16>* %16679, align 2, !tbaa !396
  %16681 = getelementptr inbounds i16, i16* %16642, i64 21
  %16682 = bitcast i16* %16681 to <16 x i16>*
  %16683 = load <16 x i16>, <16 x i16>* %16682, align 2, !tbaa !396
  %16684 = add <16 x i16> %16650, %16645
  %16685 = add <16 x i16> %16684, %16656
  %16686 = add <16 x i16> %16685, %16662
  %16687 = add <16 x i16> %16686, %16668
  %16688 = add <16 x i16> %16687, %16674
  %16689 = add <16 x i16> %16688, %16680
  %16690 = add <16 x i16> %16653, %16648
  %16691 = add <16 x i16> %16690, %16659
  %16692 = add <16 x i16> %16691, %16665
  %16693 = add <16 x i16> %16692, %16671
  %16694 = add <16 x i16> %16693, %16677
  %16695 = add <16 x i16> %16694, %16683
  %16696 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16689, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16697 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16695, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16698 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16696, <16 x i16> %16689)
  %16699 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16697, <16 x i16> %16695)
  %16700 = shufflevector <16 x i16> %16698, <16 x i16> %16699, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16701 = lshr <32 x i16> %16700, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16702 = shufflevector <32 x i16> %16701, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16703 = shl nsw i64 %16609, 5
  %16704 = add nsw i64 %16703, %16414
  %16705 = getelementptr inbounds i16, i16* %blur_x, i64 %16704
  %16706 = bitcast i16* %16705 to <16 x i16>*
  store <16 x i16> %16702, <16 x i16>* %16706, align 2, !tbaa !399
  %16707 = shufflevector <32 x i16> %16701, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16708 = getelementptr inbounds i16, i16* %16705, i64 16
  %16709 = bitcast i16* %16708 to <16 x i16>*
  store <16 x i16> %16707, <16 x i16>* %16709, align 2, !tbaa !399
  br label %"consume blur_x713"

"consume blur_x713":                              ; preds = %"for blur_y.s0.x.x.rebased706.consume blur_x713_crit_edge", %"produce blur_x712"
  %.pre-phi3657 = phi i64 [ %.pre3656, %"for blur_y.s0.x.x.rebased706.consume blur_x713_crit_edge" ], [ %16703, %"produce blur_x712" ]
  %16710 = add nsw i64 %16417, %.pre-phi3657
  %16711 = getelementptr inbounds i16, i16* %blur_x, i64 %16710
  %16712 = bitcast i16* %16711 to <16 x i16>*
  %16713 = load <16 x i16>, <16 x i16>* %16712, align 2, !tbaa !399
  %16714 = getelementptr inbounds i16, i16* %16711, i64 16
  %16715 = bitcast i16* %16714 to <16 x i16>*
  %16716 = load <16 x i16>, <16 x i16>* %16715, align 2, !tbaa !399
  %16717 = add nsw i64 %16420, %.pre-phi3657
  %16718 = getelementptr inbounds i16, i16* %blur_x, i64 %16717
  %16719 = bitcast i16* %16718 to <16 x i16>*
  %16720 = load <16 x i16>, <16 x i16>* %16719, align 2, !tbaa !399
  %16721 = getelementptr inbounds i16, i16* %16718, i64 16
  %16722 = bitcast i16* %16721 to <16 x i16>*
  %16723 = load <16 x i16>, <16 x i16>* %16722, align 2, !tbaa !399
  %16724 = add nsw i64 %16423, %.pre-phi3657
  %16725 = getelementptr inbounds i16, i16* %blur_x, i64 %16724
  %16726 = bitcast i16* %16725 to <16 x i16>*
  %16727 = load <16 x i16>, <16 x i16>* %16726, align 2, !tbaa !399
  %16728 = getelementptr inbounds i16, i16* %16725, i64 16
  %16729 = bitcast i16* %16728 to <16 x i16>*
  %16730 = load <16 x i16>, <16 x i16>* %16729, align 2, !tbaa !399
  %16731 = add nsw i64 %16426, %.pre-phi3657
  %16732 = getelementptr inbounds i16, i16* %blur_x, i64 %16731
  %16733 = bitcast i16* %16732 to <16 x i16>*
  %16734 = load <16 x i16>, <16 x i16>* %16733, align 2, !tbaa !399
  %16735 = getelementptr inbounds i16, i16* %16732, i64 16
  %16736 = bitcast i16* %16735 to <16 x i16>*
  %16737 = load <16 x i16>, <16 x i16>* %16736, align 2, !tbaa !399
  %16738 = add nsw i64 %16429, %.pre-phi3657
  %16739 = getelementptr inbounds i16, i16* %blur_x, i64 %16738
  %16740 = bitcast i16* %16739 to <16 x i16>*
  %16741 = load <16 x i16>, <16 x i16>* %16740, align 2, !tbaa !399
  %16742 = getelementptr inbounds i16, i16* %16739, i64 16
  %16743 = bitcast i16* %16742 to <16 x i16>*
  %16744 = load <16 x i16>, <16 x i16>* %16743, align 2, !tbaa !399
  %16745 = add nsw i64 %16432, %.pre-phi3657
  %16746 = getelementptr inbounds i16, i16* %blur_x, i64 %16745
  %16747 = bitcast i16* %16746 to <16 x i16>*
  %16748 = load <16 x i16>, <16 x i16>* %16747, align 2, !tbaa !399
  %16749 = getelementptr inbounds i16, i16* %16746, i64 16
  %16750 = bitcast i16* %16749 to <16 x i16>*
  %16751 = load <16 x i16>, <16 x i16>* %16750, align 2, !tbaa !399
  %16752 = add nsw i64 %16435, %.pre-phi3657
  %16753 = getelementptr inbounds i16, i16* %blur_x, i64 %16752
  %16754 = bitcast i16* %16753 to <16 x i16>*
  %16755 = load <16 x i16>, <16 x i16>* %16754, align 2, !tbaa !399
  %16756 = getelementptr inbounds i16, i16* %16753, i64 16
  %16757 = bitcast i16* %16756 to <16 x i16>*
  %16758 = load <16 x i16>, <16 x i16>* %16757, align 2, !tbaa !399
  %16759 = add <16 x i16> %16720, %16713
  %16760 = add <16 x i16> %16759, %16727
  %16761 = add <16 x i16> %16760, %16734
  %16762 = add <16 x i16> %16761, %16741
  %16763 = add <16 x i16> %16762, %16748
  %16764 = add <16 x i16> %16763, %16755
  %16765 = add <16 x i16> %16723, %16716
  %16766 = add <16 x i16> %16765, %16730
  %16767 = add <16 x i16> %16766, %16737
  %16768 = add <16 x i16> %16767, %16744
  %16769 = add <16 x i16> %16768, %16751
  %16770 = add <16 x i16> %16769, %16758
  %16771 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16764, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16772 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16770, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16773 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16771, <16 x i16> %16764)
  %16774 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16772, <16 x i16> %16770)
  %16775 = shufflevector <16 x i16> %16773, <16 x i16> %16774, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16776 = lshr <32 x i16> %16775, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16777 = shufflevector <32 x i16> %16776, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16778 = add nsw i64 %16439, %.pre-phi3657
  %16779 = getelementptr inbounds i16, i16* %66, i64 %16778
  %16780 = bitcast i16* %16779 to <16 x i16>*
  store <16 x i16> %16777, <16 x i16>* %16780, align 2, !tbaa !401
  %16781 = shufflevector <32 x i16> %16776, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16782 = getelementptr inbounds i16, i16* %16779, i64 16
  %16783 = bitcast i16* %16782 to <16 x i16>*
  store <16 x i16> %16781, <16 x i16>* %16783, align 2, !tbaa !401
  %indvars.iv.next3468 = add nuw nsw i64 %indvars.iv3467, 1
  %.not2819 = icmp eq i64 %indvars.iv.next3468, %188
  br i1 %.not2819, label %"end for blur_y.s0.x.x.rebased707", label %"for blur_y.s0.x.x.rebased706"

"for blur_y.s0.x.x.rebased714":                   ; preds = %"for blur_y.s0.x.x.rebased714.preheader", %"consume blur_x722"
  %blur_y.s0.x.x.rebased716 = phi i32 [ %16934, %"consume blur_x722" ], [ 0, %"for blur_y.s0.x.x.rebased714.preheader" ]
  %16784 = add nsw i32 %blur_y.s0.x.x.rebased716, %t1670
  %a301 = shl nsw i32 %16784, 5
  %16785 = icmp sgt i32 %a14, %a301
  %b307 = select i1 %16785, i32 %a301, i32 %a14
  %16786 = icmp slt i32 %16784, 1
  %16787 = icmp sgt i32 %4, %a301
  %16788 = or i1 %16786, %16787
  br i1 %16788, label %"produce blur_x720", label %"consume blur_x722"

"end for blur_y.s0.x.x.rebased715":               ; preds = %"consume blur_x722", %"end for blur_y.s0.x.x.rebased707"
  br i1 %34, label %"produce blur_x726", label %after_bb723

"produce blur_x720":                              ; preds = %"for blur_y.s0.x.x.rebased714"
  %16789 = icmp slt i32 %b307, %4
  %blur_x.s0.x.v1.base.s721 = select i1 %16789, i32 %b307, i32 %4
  %t1173 = add nsw i32 %blur_x.s0.x.v1.base.s721, %t2177
  %16790 = sext i32 %t1173 to i64
  %16791 = getelementptr inbounds i16, i16* %read_input, i64 %16790
  %16792 = getelementptr inbounds i16, i16* %16791, i64 1
  %16793 = bitcast i16* %16792 to <16 x i16>*
  %16794 = load <16 x i16>, <16 x i16>* %16793, align 2, !tbaa !396
  %16795 = getelementptr inbounds i16, i16* %16791, i64 17
  %16796 = bitcast i16* %16795 to <16 x i16>*
  %16797 = load <16 x i16>, <16 x i16>* %16796, align 2, !tbaa !396
  %16798 = bitcast i16* %16791 to <16 x i16>*
  %16799 = load <16 x i16>, <16 x i16>* %16798, align 2, !tbaa !396
  %16800 = getelementptr inbounds i16, i16* %16791, i64 16
  %16801 = bitcast i16* %16800 to <16 x i16>*
  %16802 = load <16 x i16>, <16 x i16>* %16801, align 2, !tbaa !396
  %16803 = getelementptr inbounds i16, i16* %16791, i64 2
  %16804 = bitcast i16* %16803 to <16 x i16>*
  %16805 = load <16 x i16>, <16 x i16>* %16804, align 2, !tbaa !396
  %16806 = getelementptr inbounds i16, i16* %16791, i64 18
  %16807 = bitcast i16* %16806 to <16 x i16>*
  %16808 = load <16 x i16>, <16 x i16>* %16807, align 2, !tbaa !396
  %16809 = getelementptr inbounds i16, i16* %16791, i64 3
  %16810 = bitcast i16* %16809 to <16 x i16>*
  %16811 = load <16 x i16>, <16 x i16>* %16810, align 2, !tbaa !396
  %16812 = getelementptr inbounds i16, i16* %16791, i64 19
  %16813 = bitcast i16* %16812 to <16 x i16>*
  %16814 = load <16 x i16>, <16 x i16>* %16813, align 2, !tbaa !396
  %16815 = getelementptr inbounds i16, i16* %16791, i64 4
  %16816 = bitcast i16* %16815 to <16 x i16>*
  %16817 = load <16 x i16>, <16 x i16>* %16816, align 2, !tbaa !396
  %16818 = getelementptr inbounds i16, i16* %16791, i64 20
  %16819 = bitcast i16* %16818 to <16 x i16>*
  %16820 = load <16 x i16>, <16 x i16>* %16819, align 2, !tbaa !396
  %16821 = getelementptr inbounds i16, i16* %16791, i64 6
  %16822 = bitcast i16* %16821 to <16 x i16>*
  %16823 = load <16 x i16>, <16 x i16>* %16822, align 2, !tbaa !396
  %16824 = getelementptr inbounds i16, i16* %16791, i64 22
  %16825 = bitcast i16* %16824 to <16 x i16>*
  %16826 = load <16 x i16>, <16 x i16>* %16825, align 2, !tbaa !396
  %16827 = getelementptr inbounds i16, i16* %16791, i64 5
  %16828 = bitcast i16* %16827 to <16 x i16>*
  %16829 = load <16 x i16>, <16 x i16>* %16828, align 2, !tbaa !396
  %16830 = getelementptr inbounds i16, i16* %16791, i64 21
  %16831 = bitcast i16* %16830 to <16 x i16>*
  %16832 = load <16 x i16>, <16 x i16>* %16831, align 2, !tbaa !396
  %16833 = add <16 x i16> %16799, %16794
  %16834 = add <16 x i16> %16833, %16805
  %16835 = add <16 x i16> %16834, %16811
  %16836 = add <16 x i16> %16835, %16817
  %16837 = add <16 x i16> %16836, %16823
  %16838 = add <16 x i16> %16837, %16829
  %16839 = add <16 x i16> %16802, %16797
  %16840 = add <16 x i16> %16839, %16808
  %16841 = add <16 x i16> %16840, %16814
  %16842 = add <16 x i16> %16841, %16820
  %16843 = add <16 x i16> %16842, %16826
  %16844 = add <16 x i16> %16843, %16832
  %16845 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16838, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16846 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16844, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16847 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16845, <16 x i16> %16838)
  %16848 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16846, <16 x i16> %16844)
  %16849 = shufflevector <16 x i16> %16847, <16 x i16> %16848, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16850 = lshr <32 x i16> %16849, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16851 = shufflevector <32 x i16> %16850, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16852 = sext i32 %blur_x.s0.x.v1.base.s721 to i64
  %16853 = add nsw i64 %16852, %16615
  %16854 = getelementptr inbounds i16, i16* %blur_x, i64 %16853
  %16855 = bitcast i16* %16854 to <16 x i16>*
  store <16 x i16> %16851, <16 x i16>* %16855, align 2, !tbaa !399
  %16856 = shufflevector <32 x i16> %16850, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16857 = getelementptr inbounds i16, i16* %16854, i64 16
  %16858 = bitcast i16* %16857 to <16 x i16>*
  store <16 x i16> %16856, <16 x i16>* %16858, align 2, !tbaa !399
  br label %"consume blur_x722"

"consume blur_x722":                              ; preds = %"for blur_y.s0.x.x.rebased714", %"produce blur_x720"
  %16859 = sext i32 %b307 to i64
  %16860 = add nsw i64 %16618, %16859
  %16861 = getelementptr inbounds i16, i16* %blur_x, i64 %16860
  %16862 = bitcast i16* %16861 to <16 x i16>*
  %16863 = load <16 x i16>, <16 x i16>* %16862, align 2, !tbaa !399
  %16864 = getelementptr inbounds i16, i16* %16861, i64 16
  %16865 = bitcast i16* %16864 to <16 x i16>*
  %16866 = load <16 x i16>, <16 x i16>* %16865, align 2, !tbaa !399
  %16867 = add nsw i64 %16621, %16859
  %16868 = getelementptr inbounds i16, i16* %blur_x, i64 %16867
  %16869 = bitcast i16* %16868 to <16 x i16>*
  %16870 = load <16 x i16>, <16 x i16>* %16869, align 2, !tbaa !399
  %16871 = getelementptr inbounds i16, i16* %16868, i64 16
  %16872 = bitcast i16* %16871 to <16 x i16>*
  %16873 = load <16 x i16>, <16 x i16>* %16872, align 2, !tbaa !399
  %16874 = add nsw i64 %16624, %16859
  %16875 = getelementptr inbounds i16, i16* %blur_x, i64 %16874
  %16876 = bitcast i16* %16875 to <16 x i16>*
  %16877 = load <16 x i16>, <16 x i16>* %16876, align 2, !tbaa !399
  %16878 = getelementptr inbounds i16, i16* %16875, i64 16
  %16879 = bitcast i16* %16878 to <16 x i16>*
  %16880 = load <16 x i16>, <16 x i16>* %16879, align 2, !tbaa !399
  %16881 = add nsw i64 %16627, %16859
  %16882 = getelementptr inbounds i16, i16* %blur_x, i64 %16881
  %16883 = bitcast i16* %16882 to <16 x i16>*
  %16884 = load <16 x i16>, <16 x i16>* %16883, align 2, !tbaa !399
  %16885 = getelementptr inbounds i16, i16* %16882, i64 16
  %16886 = bitcast i16* %16885 to <16 x i16>*
  %16887 = load <16 x i16>, <16 x i16>* %16886, align 2, !tbaa !399
  %16888 = add nsw i64 %16630, %16859
  %16889 = getelementptr inbounds i16, i16* %blur_x, i64 %16888
  %16890 = bitcast i16* %16889 to <16 x i16>*
  %16891 = load <16 x i16>, <16 x i16>* %16890, align 2, !tbaa !399
  %16892 = getelementptr inbounds i16, i16* %16889, i64 16
  %16893 = bitcast i16* %16892 to <16 x i16>*
  %16894 = load <16 x i16>, <16 x i16>* %16893, align 2, !tbaa !399
  %16895 = add nsw i64 %16633, %16859
  %16896 = getelementptr inbounds i16, i16* %blur_x, i64 %16895
  %16897 = bitcast i16* %16896 to <16 x i16>*
  %16898 = load <16 x i16>, <16 x i16>* %16897, align 2, !tbaa !399
  %16899 = getelementptr inbounds i16, i16* %16896, i64 16
  %16900 = bitcast i16* %16899 to <16 x i16>*
  %16901 = load <16 x i16>, <16 x i16>* %16900, align 2, !tbaa !399
  %16902 = add nsw i64 %16636, %16859
  %16903 = getelementptr inbounds i16, i16* %blur_x, i64 %16902
  %16904 = bitcast i16* %16903 to <16 x i16>*
  %16905 = load <16 x i16>, <16 x i16>* %16904, align 2, !tbaa !399
  %16906 = getelementptr inbounds i16, i16* %16903, i64 16
  %16907 = bitcast i16* %16906 to <16 x i16>*
  %16908 = load <16 x i16>, <16 x i16>* %16907, align 2, !tbaa !399
  %16909 = add <16 x i16> %16870, %16863
  %16910 = add <16 x i16> %16909, %16877
  %16911 = add <16 x i16> %16910, %16884
  %16912 = add <16 x i16> %16911, %16891
  %16913 = add <16 x i16> %16912, %16898
  %16914 = add <16 x i16> %16913, %16905
  %16915 = add <16 x i16> %16873, %16866
  %16916 = add <16 x i16> %16915, %16880
  %16917 = add <16 x i16> %16916, %16887
  %16918 = add <16 x i16> %16917, %16894
  %16919 = add <16 x i16> %16918, %16901
  %16920 = add <16 x i16> %16919, %16908
  %16921 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16914, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16922 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16920, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16923 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16921, <16 x i16> %16914)
  %16924 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16922, <16 x i16> %16920)
  %16925 = shufflevector <16 x i16> %16923, <16 x i16> %16924, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16926 = lshr <32 x i16> %16925, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16927 = shufflevector <32 x i16> %16926, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16928 = add nsw i64 %16640, %16859
  %16929 = getelementptr inbounds i16, i16* %66, i64 %16928
  %16930 = bitcast i16* %16929 to <16 x i16>*
  store <16 x i16> %16927, <16 x i16>* %16930, align 2, !tbaa !401
  %16931 = shufflevector <32 x i16> %16926, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16932 = getelementptr inbounds i16, i16* %16929, i64 16
  %16933 = bitcast i16* %16932 to <16 x i16>*
  store <16 x i16> %16931, <16 x i16>* %16933, align 2, !tbaa !401
  %16934 = add nuw nsw i32 %blur_y.s0.x.x.rebased716, 1
  %.not2818 = icmp eq i32 %16934, %t1727
  br i1 %.not2818, label %"end for blur_y.s0.x.x.rebased715", label %"for blur_y.s0.x.x.rebased714"

after_bb723:                                      ; preds = %"end for blur_y.s0.x.x.rebased715", %"produce blur_x726"
  br i1 %100, label %"for blur_y.s0.x.x.rebased728.preheader", label %"end for blur_y.s0.x.x.rebased729", !prof !386

"for blur_y.s0.x.x.rebased728.preheader":         ; preds = %after_bb723
  %16935 = sext i32 %t1732 to i64
  %16936 = zext i32 %.pre-phi3591 to i64
  %16937 = mul nsw i64 %16936, %116
  %16938 = sub nsw i64 %16937, %96
  %16939 = zext i32 %.pre-phi3587 to i64
  %16940 = mul nsw i64 %16939, %116
  %16941 = sub nsw i64 %16940, %96
  %16942 = zext i32 %.pre-phi3595 to i64
  %16943 = mul nsw i64 %16942, %116
  %16944 = sub nsw i64 %16943, %96
  %16945 = zext i32 %.pre-phi3599 to i64
  %16946 = mul nsw i64 %16945, %116
  %16947 = sub nsw i64 %16946, %96
  %16948 = zext i32 %.pre-phi3605 to i64
  %16949 = mul nsw i64 %16948, %116
  %16950 = sub nsw i64 %16949, %96
  %16951 = zext i32 %.pre-phi3579 to i64
  %16952 = mul nsw i64 %16951, %116
  %16953 = sub nsw i64 %16952, %96
  %16954 = zext i32 %.pre-phi to i64
  %16955 = mul nsw i64 %16954, %116
  %16956 = sub nsw i64 %16955, %96
  %16957 = sext i32 %a26 to i64
  %16958 = add nsw i64 %16957, 27
  %16959 = mul nsw i64 %16958, %117
  %16960 = add nsw i64 %16959, %120
  br label %"for blur_y.s0.x.x.rebased728"

"produce blur_x726":                              ; preds = %"end for blur_y.s0.x.x.rebased715"
  %16961 = getelementptr inbounds i16, i16* %read_input, i64 %173
  %16962 = getelementptr inbounds i16, i16* %16961, i64 -31
  %16963 = bitcast i16* %16962 to <16 x i16>*
  %16964 = load <16 x i16>, <16 x i16>* %16963, align 2, !tbaa !396
  %16965 = getelementptr inbounds i16, i16* %16961, i64 -15
  %16966 = bitcast i16* %16965 to <16 x i16>*
  %16967 = load <16 x i16>, <16 x i16>* %16966, align 2, !tbaa !396
  %16968 = getelementptr inbounds i16, i16* %16961, i64 -32
  %16969 = bitcast i16* %16968 to <16 x i16>*
  %16970 = load <16 x i16>, <16 x i16>* %16969, align 2, !tbaa !396
  %16971 = getelementptr inbounds i16, i16* %16961, i64 -16
  %16972 = bitcast i16* %16971 to <16 x i16>*
  %16973 = load <16 x i16>, <16 x i16>* %16972, align 2, !tbaa !396
  %16974 = getelementptr inbounds i16, i16* %16961, i64 -30
  %16975 = bitcast i16* %16974 to <16 x i16>*
  %16976 = load <16 x i16>, <16 x i16>* %16975, align 2, !tbaa !396
  %16977 = getelementptr inbounds i16, i16* %16961, i64 -14
  %16978 = bitcast i16* %16977 to <16 x i16>*
  %16979 = load <16 x i16>, <16 x i16>* %16978, align 2, !tbaa !396
  %16980 = getelementptr inbounds i16, i16* %16961, i64 -29
  %16981 = bitcast i16* %16980 to <16 x i16>*
  %16982 = load <16 x i16>, <16 x i16>* %16981, align 2, !tbaa !396
  %16983 = getelementptr inbounds i16, i16* %16961, i64 -13
  %16984 = bitcast i16* %16983 to <16 x i16>*
  %16985 = load <16 x i16>, <16 x i16>* %16984, align 2, !tbaa !396
  %16986 = getelementptr inbounds i16, i16* %16961, i64 -28
  %16987 = bitcast i16* %16986 to <16 x i16>*
  %16988 = load <16 x i16>, <16 x i16>* %16987, align 2, !tbaa !396
  %16989 = getelementptr inbounds i16, i16* %16961, i64 -12
  %16990 = bitcast i16* %16989 to <16 x i16>*
  %16991 = load <16 x i16>, <16 x i16>* %16990, align 2, !tbaa !396
  %16992 = getelementptr inbounds i16, i16* %16961, i64 -26
  %16993 = bitcast i16* %16992 to <16 x i16>*
  %16994 = load <16 x i16>, <16 x i16>* %16993, align 2, !tbaa !396
  %16995 = getelementptr inbounds i16, i16* %16961, i64 -10
  %16996 = bitcast i16* %16995 to <16 x i16>*
  %16997 = load <16 x i16>, <16 x i16>* %16996, align 2, !tbaa !396
  %16998 = getelementptr inbounds i16, i16* %16961, i64 -27
  %16999 = bitcast i16* %16998 to <16 x i16>*
  %17000 = load <16 x i16>, <16 x i16>* %16999, align 2, !tbaa !396
  %17001 = getelementptr inbounds i16, i16* %16961, i64 -11
  %17002 = bitcast i16* %17001 to <16 x i16>*
  %17003 = load <16 x i16>, <16 x i16>* %17002, align 2, !tbaa !396
  %17004 = add <16 x i16> %16970, %16964
  %17005 = add <16 x i16> %17004, %16976
  %17006 = add <16 x i16> %17005, %16982
  %17007 = add <16 x i16> %17006, %16988
  %17008 = add <16 x i16> %17007, %16994
  %17009 = add <16 x i16> %17008, %17000
  %17010 = add <16 x i16> %16973, %16967
  %17011 = add <16 x i16> %17010, %16979
  %17012 = add <16 x i16> %17011, %16985
  %17013 = add <16 x i16> %17012, %16991
  %17014 = add <16 x i16> %17013, %16997
  %17015 = add <16 x i16> %17014, %17003
  %17016 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17009, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17017 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17015, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17018 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17016, <16 x i16> %17009)
  %17019 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17017, <16 x i16> %17015)
  %17020 = shufflevector <16 x i16> %17018, <16 x i16> %17019, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17021 = lshr <32 x i16> %17020, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17022 = shufflevector <32 x i16> %17021, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17023 = zext i32 %.pre-phi3579 to i64
  %17024 = mul nsw i64 %97, %17023
  %17025 = add nsw i64 %99, %17024
  %17026 = getelementptr inbounds i16, i16* %blur_x, i64 %17025
  %17027 = getelementptr inbounds i16, i16* %17026, i64 -32
  %17028 = bitcast i16* %17027 to <16 x i16>*
  store <16 x i16> %17022, <16 x i16>* %17028, align 2, !tbaa !399
  %17029 = shufflevector <32 x i16> %17021, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17030 = getelementptr inbounds i16, i16* %17026, i64 -16
  %17031 = bitcast i16* %17030 to <16 x i16>*
  store <16 x i16> %17029, <16 x i16>* %17031, align 2, !tbaa !399
  %17032 = zext i32 %.pre-phi3591 to i64
  %17033 = mul nsw i64 %17032, %116
  %17034 = add nsw i64 %17033, %94
  %17035 = getelementptr inbounds i16, i16* %blur_x, i64 %17034
  %17036 = getelementptr inbounds i16, i16* %17035, i64 -32
  %17037 = bitcast i16* %17036 to <16 x i16>*
  %17038 = load <16 x i16>, <16 x i16>* %17037, align 2, !tbaa !399
  %17039 = getelementptr inbounds i16, i16* %17035, i64 -16
  %17040 = bitcast i16* %17039 to <16 x i16>*
  %17041 = load <16 x i16>, <16 x i16>* %17040, align 2, !tbaa !399
  %17042 = zext i32 %.pre-phi3587 to i64
  %17043 = mul nsw i64 %17042, %116
  %17044 = add nsw i64 %17043, %94
  %17045 = getelementptr inbounds i16, i16* %blur_x, i64 %17044
  %17046 = getelementptr inbounds i16, i16* %17045, i64 -32
  %17047 = bitcast i16* %17046 to <16 x i16>*
  %17048 = load <16 x i16>, <16 x i16>* %17047, align 2, !tbaa !399
  %17049 = getelementptr inbounds i16, i16* %17045, i64 -16
  %17050 = bitcast i16* %17049 to <16 x i16>*
  %17051 = load <16 x i16>, <16 x i16>* %17050, align 2, !tbaa !399
  %17052 = zext i32 %.pre-phi3595 to i64
  %17053 = mul nsw i64 %17052, %116
  %17054 = add nsw i64 %17053, %94
  %17055 = getelementptr inbounds i16, i16* %blur_x, i64 %17054
  %17056 = getelementptr inbounds i16, i16* %17055, i64 -32
  %17057 = bitcast i16* %17056 to <16 x i16>*
  %17058 = load <16 x i16>, <16 x i16>* %17057, align 2, !tbaa !399
  %17059 = getelementptr inbounds i16, i16* %17055, i64 -16
  %17060 = bitcast i16* %17059 to <16 x i16>*
  %17061 = load <16 x i16>, <16 x i16>* %17060, align 2, !tbaa !399
  %17062 = zext i32 %.pre-phi3599 to i64
  %17063 = mul nsw i64 %17062, %116
  %17064 = add nsw i64 %17063, %94
  %17065 = getelementptr inbounds i16, i16* %blur_x, i64 %17064
  %17066 = getelementptr inbounds i16, i16* %17065, i64 -32
  %17067 = bitcast i16* %17066 to <16 x i16>*
  %17068 = load <16 x i16>, <16 x i16>* %17067, align 2, !tbaa !399
  %17069 = getelementptr inbounds i16, i16* %17065, i64 -16
  %17070 = bitcast i16* %17069 to <16 x i16>*
  %17071 = load <16 x i16>, <16 x i16>* %17070, align 2, !tbaa !399
  %17072 = zext i32 %.pre-phi3605 to i64
  %17073 = mul nsw i64 %17072, %116
  %17074 = add nsw i64 %17073, %94
  %17075 = getelementptr inbounds i16, i16* %blur_x, i64 %17074
  %17076 = getelementptr inbounds i16, i16* %17075, i64 -32
  %17077 = bitcast i16* %17076 to <16 x i16>*
  %17078 = load <16 x i16>, <16 x i16>* %17077, align 2, !tbaa !399
  %17079 = getelementptr inbounds i16, i16* %17075, i64 -16
  %17080 = bitcast i16* %17079 to <16 x i16>*
  %17081 = load <16 x i16>, <16 x i16>* %17080, align 2, !tbaa !399
  %17082 = mul nsw i64 %17023, %116
  %17083 = add nsw i64 %17082, %94
  %17084 = getelementptr inbounds i16, i16* %blur_x, i64 %17083
  %17085 = getelementptr inbounds i16, i16* %17084, i64 -32
  %17086 = bitcast i16* %17085 to <16 x i16>*
  %17087 = load <16 x i16>, <16 x i16>* %17086, align 2, !tbaa !399
  %17088 = getelementptr inbounds i16, i16* %17084, i64 -16
  %17089 = bitcast i16* %17088 to <16 x i16>*
  %17090 = load <16 x i16>, <16 x i16>* %17089, align 2, !tbaa !399
  %17091 = zext i32 %.pre-phi to i64
  %17092 = mul nsw i64 %17091, %116
  %17093 = add nsw i64 %17092, %94
  %17094 = getelementptr inbounds i16, i16* %blur_x, i64 %17093
  %17095 = getelementptr inbounds i16, i16* %17094, i64 -32
  %17096 = bitcast i16* %17095 to <16 x i16>*
  %17097 = load <16 x i16>, <16 x i16>* %17096, align 2, !tbaa !399
  %17098 = getelementptr inbounds i16, i16* %17094, i64 -16
  %17099 = bitcast i16* %17098 to <16 x i16>*
  %17100 = load <16 x i16>, <16 x i16>* %17099, align 2, !tbaa !399
  %17101 = add <16 x i16> %17048, %17038
  %17102 = add <16 x i16> %17101, %17058
  %17103 = add <16 x i16> %17102, %17068
  %17104 = add <16 x i16> %17103, %17078
  %17105 = add <16 x i16> %17104, %17087
  %17106 = add <16 x i16> %17105, %17097
  %17107 = add <16 x i16> %17051, %17041
  %17108 = add <16 x i16> %17107, %17061
  %17109 = add <16 x i16> %17108, %17071
  %17110 = add <16 x i16> %17109, %17081
  %17111 = add <16 x i16> %17110, %17090
  %17112 = add <16 x i16> %17111, %17100
  %17113 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17106, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17114 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17112, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17115 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17113, <16 x i16> %17106)
  %17116 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17114, <16 x i16> %17112)
  %17117 = shufflevector <16 x i16> %17115, <16 x i16> %17116, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17118 = lshr <32 x i16> %17117, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17119 = shufflevector <32 x i16> %17118, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17120 = sext i32 %a26 to i64
  %17121 = add nsw i64 %17120, 27
  %17122 = mul nsw i64 %17121, %117
  %17123 = add nsw i64 %119, %17122
  %17124 = getelementptr inbounds i16, i16* %66, i64 %17123
  %17125 = getelementptr inbounds i16, i16* %17124, i64 -32
  %17126 = bitcast i16* %17125 to <16 x i16>*
  store <16 x i16> %17119, <16 x i16>* %17126, align 2, !tbaa !401
  %17127 = shufflevector <32 x i16> %17118, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17128 = getelementptr inbounds i16, i16* %17124, i64 -16
  %17129 = bitcast i16* %17128 to <16 x i16>*
  store <16 x i16> %17127, <16 x i16>* %17129, align 2, !tbaa !401
  br label %after_bb723

"for blur_y.s0.x.x.rebased728":                   ; preds = %"for blur_y.s0.x.x.rebased728.preheader", %"consume blur_x735"
  %indvars.iv3470 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased728.preheader" ], [ %indvars.iv.next3471, %"consume blur_x735" ]
  %17130 = add nsw i64 %indvars.iv3470, %101
  %17131 = icmp slt i64 %17130, 1
  %17132 = trunc i64 %17130 to i32
  %17133 = shl nsw i32 %17132, 5
  %17134 = icmp sgt i32 %4, %17133
  %17135 = or i1 %17131, %17134
  br i1 %17135, label %"produce blur_x734", label %"for blur_y.s0.x.x.rebased728.consume blur_x735_crit_edge"

"for blur_y.s0.x.x.rebased728.consume blur_x735_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased728"
  %.pre3658 = shl nsw i64 %17130, 5
  br label %"consume blur_x735"

"end for blur_y.s0.x.x.rebased729":               ; preds = %"consume blur_x735", %after_bb723
  br i1 %102, label %"for blur_y.s0.x.x.rebased736.preheader", label %"end for blur_y.s0.x.x.rebased737", !prof !386

"for blur_y.s0.x.x.rebased736.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased729"
  %17136 = sext i32 %t1732 to i64
  %17137 = zext i32 %.pre-phi3591 to i64
  %17138 = mul nsw i64 %17137, %116
  %17139 = sub nsw i64 %17138, %96
  %17140 = zext i32 %.pre-phi3587 to i64
  %17141 = mul nsw i64 %17140, %116
  %17142 = sub nsw i64 %17141, %96
  %17143 = zext i32 %.pre-phi3595 to i64
  %17144 = mul nsw i64 %17143, %116
  %17145 = sub nsw i64 %17144, %96
  %17146 = zext i32 %.pre-phi3599 to i64
  %17147 = mul nsw i64 %17146, %116
  %17148 = sub nsw i64 %17147, %96
  %17149 = zext i32 %.pre-phi3605 to i64
  %17150 = mul nsw i64 %17149, %116
  %17151 = sub nsw i64 %17150, %96
  %17152 = zext i32 %.pre-phi3579 to i64
  %17153 = mul nsw i64 %17152, %116
  %17154 = sub nsw i64 %17153, %96
  %17155 = zext i32 %.pre-phi to i64
  %17156 = mul nsw i64 %17155, %116
  %17157 = sub nsw i64 %17156, %96
  %17158 = sext i32 %a26 to i64
  %17159 = add nsw i64 %17158, 27
  %17160 = mul nsw i64 %17159, %117
  %17161 = add nsw i64 %17160, %120
  br label %"for blur_y.s0.x.x.rebased736"

"produce blur_x734":                              ; preds = %"for blur_y.s0.x.x.rebased728"
  %t1184 = add nsw i32 %17133, %t2193
  %17162 = sext i32 %t1184 to i64
  %17163 = getelementptr inbounds i16, i16* %read_input, i64 %17162
  %17164 = getelementptr inbounds i16, i16* %17163, i64 1
  %17165 = bitcast i16* %17164 to <16 x i16>*
  %17166 = load <16 x i16>, <16 x i16>* %17165, align 2, !tbaa !396
  %17167 = getelementptr inbounds i16, i16* %17163, i64 17
  %17168 = bitcast i16* %17167 to <16 x i16>*
  %17169 = load <16 x i16>, <16 x i16>* %17168, align 2, !tbaa !396
  %17170 = bitcast i16* %17163 to <16 x i16>*
  %17171 = load <16 x i16>, <16 x i16>* %17170, align 2, !tbaa !396
  %17172 = getelementptr inbounds i16, i16* %17163, i64 16
  %17173 = bitcast i16* %17172 to <16 x i16>*
  %17174 = load <16 x i16>, <16 x i16>* %17173, align 2, !tbaa !396
  %17175 = getelementptr inbounds i16, i16* %17163, i64 2
  %17176 = bitcast i16* %17175 to <16 x i16>*
  %17177 = load <16 x i16>, <16 x i16>* %17176, align 2, !tbaa !396
  %17178 = getelementptr inbounds i16, i16* %17163, i64 18
  %17179 = bitcast i16* %17178 to <16 x i16>*
  %17180 = load <16 x i16>, <16 x i16>* %17179, align 2, !tbaa !396
  %17181 = getelementptr inbounds i16, i16* %17163, i64 3
  %17182 = bitcast i16* %17181 to <16 x i16>*
  %17183 = load <16 x i16>, <16 x i16>* %17182, align 2, !tbaa !396
  %17184 = getelementptr inbounds i16, i16* %17163, i64 19
  %17185 = bitcast i16* %17184 to <16 x i16>*
  %17186 = load <16 x i16>, <16 x i16>* %17185, align 2, !tbaa !396
  %17187 = getelementptr inbounds i16, i16* %17163, i64 4
  %17188 = bitcast i16* %17187 to <16 x i16>*
  %17189 = load <16 x i16>, <16 x i16>* %17188, align 2, !tbaa !396
  %17190 = getelementptr inbounds i16, i16* %17163, i64 20
  %17191 = bitcast i16* %17190 to <16 x i16>*
  %17192 = load <16 x i16>, <16 x i16>* %17191, align 2, !tbaa !396
  %17193 = getelementptr inbounds i16, i16* %17163, i64 6
  %17194 = bitcast i16* %17193 to <16 x i16>*
  %17195 = load <16 x i16>, <16 x i16>* %17194, align 2, !tbaa !396
  %17196 = getelementptr inbounds i16, i16* %17163, i64 22
  %17197 = bitcast i16* %17196 to <16 x i16>*
  %17198 = load <16 x i16>, <16 x i16>* %17197, align 2, !tbaa !396
  %17199 = getelementptr inbounds i16, i16* %17163, i64 5
  %17200 = bitcast i16* %17199 to <16 x i16>*
  %17201 = load <16 x i16>, <16 x i16>* %17200, align 2, !tbaa !396
  %17202 = getelementptr inbounds i16, i16* %17163, i64 21
  %17203 = bitcast i16* %17202 to <16 x i16>*
  %17204 = load <16 x i16>, <16 x i16>* %17203, align 2, !tbaa !396
  %17205 = add <16 x i16> %17171, %17166
  %17206 = add <16 x i16> %17205, %17177
  %17207 = add <16 x i16> %17206, %17183
  %17208 = add <16 x i16> %17207, %17189
  %17209 = add <16 x i16> %17208, %17195
  %17210 = add <16 x i16> %17209, %17201
  %17211 = add <16 x i16> %17174, %17169
  %17212 = add <16 x i16> %17211, %17180
  %17213 = add <16 x i16> %17212, %17186
  %17214 = add <16 x i16> %17213, %17192
  %17215 = add <16 x i16> %17214, %17198
  %17216 = add <16 x i16> %17215, %17204
  %17217 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17210, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17218 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17216, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17219 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17217, <16 x i16> %17210)
  %17220 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17218, <16 x i16> %17216)
  %17221 = shufflevector <16 x i16> %17219, <16 x i16> %17220, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17222 = lshr <32 x i16> %17221, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17223 = shufflevector <32 x i16> %17222, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17224 = shl nsw i64 %17130, 5
  %17225 = add nsw i64 %17224, %16935
  %17226 = getelementptr inbounds i16, i16* %blur_x, i64 %17225
  %17227 = bitcast i16* %17226 to <16 x i16>*
  store <16 x i16> %17223, <16 x i16>* %17227, align 2, !tbaa !399
  %17228 = shufflevector <32 x i16> %17222, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17229 = getelementptr inbounds i16, i16* %17226, i64 16
  %17230 = bitcast i16* %17229 to <16 x i16>*
  store <16 x i16> %17228, <16 x i16>* %17230, align 2, !tbaa !399
  br label %"consume blur_x735"

"consume blur_x735":                              ; preds = %"for blur_y.s0.x.x.rebased728.consume blur_x735_crit_edge", %"produce blur_x734"
  %.pre-phi3659 = phi i64 [ %.pre3658, %"for blur_y.s0.x.x.rebased728.consume blur_x735_crit_edge" ], [ %17224, %"produce blur_x734" ]
  %17231 = add nsw i64 %16938, %.pre-phi3659
  %17232 = getelementptr inbounds i16, i16* %blur_x, i64 %17231
  %17233 = bitcast i16* %17232 to <16 x i16>*
  %17234 = load <16 x i16>, <16 x i16>* %17233, align 2, !tbaa !399
  %17235 = getelementptr inbounds i16, i16* %17232, i64 16
  %17236 = bitcast i16* %17235 to <16 x i16>*
  %17237 = load <16 x i16>, <16 x i16>* %17236, align 2, !tbaa !399
  %17238 = add nsw i64 %16941, %.pre-phi3659
  %17239 = getelementptr inbounds i16, i16* %blur_x, i64 %17238
  %17240 = bitcast i16* %17239 to <16 x i16>*
  %17241 = load <16 x i16>, <16 x i16>* %17240, align 2, !tbaa !399
  %17242 = getelementptr inbounds i16, i16* %17239, i64 16
  %17243 = bitcast i16* %17242 to <16 x i16>*
  %17244 = load <16 x i16>, <16 x i16>* %17243, align 2, !tbaa !399
  %17245 = add nsw i64 %16944, %.pre-phi3659
  %17246 = getelementptr inbounds i16, i16* %blur_x, i64 %17245
  %17247 = bitcast i16* %17246 to <16 x i16>*
  %17248 = load <16 x i16>, <16 x i16>* %17247, align 2, !tbaa !399
  %17249 = getelementptr inbounds i16, i16* %17246, i64 16
  %17250 = bitcast i16* %17249 to <16 x i16>*
  %17251 = load <16 x i16>, <16 x i16>* %17250, align 2, !tbaa !399
  %17252 = add nsw i64 %16947, %.pre-phi3659
  %17253 = getelementptr inbounds i16, i16* %blur_x, i64 %17252
  %17254 = bitcast i16* %17253 to <16 x i16>*
  %17255 = load <16 x i16>, <16 x i16>* %17254, align 2, !tbaa !399
  %17256 = getelementptr inbounds i16, i16* %17253, i64 16
  %17257 = bitcast i16* %17256 to <16 x i16>*
  %17258 = load <16 x i16>, <16 x i16>* %17257, align 2, !tbaa !399
  %17259 = add nsw i64 %16950, %.pre-phi3659
  %17260 = getelementptr inbounds i16, i16* %blur_x, i64 %17259
  %17261 = bitcast i16* %17260 to <16 x i16>*
  %17262 = load <16 x i16>, <16 x i16>* %17261, align 2, !tbaa !399
  %17263 = getelementptr inbounds i16, i16* %17260, i64 16
  %17264 = bitcast i16* %17263 to <16 x i16>*
  %17265 = load <16 x i16>, <16 x i16>* %17264, align 2, !tbaa !399
  %17266 = add nsw i64 %16953, %.pre-phi3659
  %17267 = getelementptr inbounds i16, i16* %blur_x, i64 %17266
  %17268 = bitcast i16* %17267 to <16 x i16>*
  %17269 = load <16 x i16>, <16 x i16>* %17268, align 2, !tbaa !399
  %17270 = getelementptr inbounds i16, i16* %17267, i64 16
  %17271 = bitcast i16* %17270 to <16 x i16>*
  %17272 = load <16 x i16>, <16 x i16>* %17271, align 2, !tbaa !399
  %17273 = add nsw i64 %16956, %.pre-phi3659
  %17274 = getelementptr inbounds i16, i16* %blur_x, i64 %17273
  %17275 = bitcast i16* %17274 to <16 x i16>*
  %17276 = load <16 x i16>, <16 x i16>* %17275, align 2, !tbaa !399
  %17277 = getelementptr inbounds i16, i16* %17274, i64 16
  %17278 = bitcast i16* %17277 to <16 x i16>*
  %17279 = load <16 x i16>, <16 x i16>* %17278, align 2, !tbaa !399
  %17280 = add <16 x i16> %17241, %17234
  %17281 = add <16 x i16> %17280, %17248
  %17282 = add <16 x i16> %17281, %17255
  %17283 = add <16 x i16> %17282, %17262
  %17284 = add <16 x i16> %17283, %17269
  %17285 = add <16 x i16> %17284, %17276
  %17286 = add <16 x i16> %17244, %17237
  %17287 = add <16 x i16> %17286, %17251
  %17288 = add <16 x i16> %17287, %17258
  %17289 = add <16 x i16> %17288, %17265
  %17290 = add <16 x i16> %17289, %17272
  %17291 = add <16 x i16> %17290, %17279
  %17292 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17285, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17293 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17291, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17294 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17292, <16 x i16> %17285)
  %17295 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17293, <16 x i16> %17291)
  %17296 = shufflevector <16 x i16> %17294, <16 x i16> %17295, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17297 = lshr <32 x i16> %17296, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17298 = shufflevector <32 x i16> %17297, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17299 = add nsw i64 %16960, %.pre-phi3659
  %17300 = getelementptr inbounds i16, i16* %66, i64 %17299
  %17301 = bitcast i16* %17300 to <16 x i16>*
  store <16 x i16> %17298, <16 x i16>* %17301, align 2, !tbaa !401
  %17302 = shufflevector <32 x i16> %17297, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17303 = getelementptr inbounds i16, i16* %17300, i64 16
  %17304 = bitcast i16* %17303 to <16 x i16>*
  store <16 x i16> %17302, <16 x i16>* %17304, align 2, !tbaa !401
  %indvars.iv.next3471 = add nuw nsw i64 %indvars.iv3470, 1
  %.not2817 = icmp eq i64 %indvars.iv.next3471, %188
  br i1 %.not2817, label %"end for blur_y.s0.x.x.rebased729", label %"for blur_y.s0.x.x.rebased728"

"for blur_y.s0.x.x.rebased736":                   ; preds = %"for blur_y.s0.x.x.rebased736.preheader", %"consume blur_x744"
  %blur_y.s0.x.x.rebased738 = phi i32 [ %17455, %"consume blur_x744" ], [ 0, %"for blur_y.s0.x.x.rebased736.preheader" ]
  %17305 = add nsw i32 %blur_y.s0.x.x.rebased738, %t1670
  %a308 = shl nsw i32 %17305, 5
  %17306 = icmp sgt i32 %a14, %a308
  %b314 = select i1 %17306, i32 %a308, i32 %a14
  %17307 = icmp slt i32 %17305, 1
  %17308 = icmp sgt i32 %4, %a308
  %17309 = or i1 %17307, %17308
  br i1 %17309, label %"produce blur_x742", label %"consume blur_x744"

"end for blur_y.s0.x.x.rebased737":               ; preds = %"consume blur_x744", %"end for blur_y.s0.x.x.rebased729"
  br i1 %34, label %"produce blur_x748", label %after_bb745

"produce blur_x742":                              ; preds = %"for blur_y.s0.x.x.rebased736"
  %17310 = icmp slt i32 %b314, %4
  %blur_x.s0.x.v1.base.s743 = select i1 %17310, i32 %b314, i32 %4
  %t1189 = add nsw i32 %blur_x.s0.x.v1.base.s743, %t2193
  %17311 = sext i32 %t1189 to i64
  %17312 = getelementptr inbounds i16, i16* %read_input, i64 %17311
  %17313 = getelementptr inbounds i16, i16* %17312, i64 1
  %17314 = bitcast i16* %17313 to <16 x i16>*
  %17315 = load <16 x i16>, <16 x i16>* %17314, align 2, !tbaa !396
  %17316 = getelementptr inbounds i16, i16* %17312, i64 17
  %17317 = bitcast i16* %17316 to <16 x i16>*
  %17318 = load <16 x i16>, <16 x i16>* %17317, align 2, !tbaa !396
  %17319 = bitcast i16* %17312 to <16 x i16>*
  %17320 = load <16 x i16>, <16 x i16>* %17319, align 2, !tbaa !396
  %17321 = getelementptr inbounds i16, i16* %17312, i64 16
  %17322 = bitcast i16* %17321 to <16 x i16>*
  %17323 = load <16 x i16>, <16 x i16>* %17322, align 2, !tbaa !396
  %17324 = getelementptr inbounds i16, i16* %17312, i64 2
  %17325 = bitcast i16* %17324 to <16 x i16>*
  %17326 = load <16 x i16>, <16 x i16>* %17325, align 2, !tbaa !396
  %17327 = getelementptr inbounds i16, i16* %17312, i64 18
  %17328 = bitcast i16* %17327 to <16 x i16>*
  %17329 = load <16 x i16>, <16 x i16>* %17328, align 2, !tbaa !396
  %17330 = getelementptr inbounds i16, i16* %17312, i64 3
  %17331 = bitcast i16* %17330 to <16 x i16>*
  %17332 = load <16 x i16>, <16 x i16>* %17331, align 2, !tbaa !396
  %17333 = getelementptr inbounds i16, i16* %17312, i64 19
  %17334 = bitcast i16* %17333 to <16 x i16>*
  %17335 = load <16 x i16>, <16 x i16>* %17334, align 2, !tbaa !396
  %17336 = getelementptr inbounds i16, i16* %17312, i64 4
  %17337 = bitcast i16* %17336 to <16 x i16>*
  %17338 = load <16 x i16>, <16 x i16>* %17337, align 2, !tbaa !396
  %17339 = getelementptr inbounds i16, i16* %17312, i64 20
  %17340 = bitcast i16* %17339 to <16 x i16>*
  %17341 = load <16 x i16>, <16 x i16>* %17340, align 2, !tbaa !396
  %17342 = getelementptr inbounds i16, i16* %17312, i64 6
  %17343 = bitcast i16* %17342 to <16 x i16>*
  %17344 = load <16 x i16>, <16 x i16>* %17343, align 2, !tbaa !396
  %17345 = getelementptr inbounds i16, i16* %17312, i64 22
  %17346 = bitcast i16* %17345 to <16 x i16>*
  %17347 = load <16 x i16>, <16 x i16>* %17346, align 2, !tbaa !396
  %17348 = getelementptr inbounds i16, i16* %17312, i64 5
  %17349 = bitcast i16* %17348 to <16 x i16>*
  %17350 = load <16 x i16>, <16 x i16>* %17349, align 2, !tbaa !396
  %17351 = getelementptr inbounds i16, i16* %17312, i64 21
  %17352 = bitcast i16* %17351 to <16 x i16>*
  %17353 = load <16 x i16>, <16 x i16>* %17352, align 2, !tbaa !396
  %17354 = add <16 x i16> %17320, %17315
  %17355 = add <16 x i16> %17354, %17326
  %17356 = add <16 x i16> %17355, %17332
  %17357 = add <16 x i16> %17356, %17338
  %17358 = add <16 x i16> %17357, %17344
  %17359 = add <16 x i16> %17358, %17350
  %17360 = add <16 x i16> %17323, %17318
  %17361 = add <16 x i16> %17360, %17329
  %17362 = add <16 x i16> %17361, %17335
  %17363 = add <16 x i16> %17362, %17341
  %17364 = add <16 x i16> %17363, %17347
  %17365 = add <16 x i16> %17364, %17353
  %17366 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17359, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17367 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17365, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17368 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17366, <16 x i16> %17359)
  %17369 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17367, <16 x i16> %17365)
  %17370 = shufflevector <16 x i16> %17368, <16 x i16> %17369, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17371 = lshr <32 x i16> %17370, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17372 = shufflevector <32 x i16> %17371, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17373 = sext i32 %blur_x.s0.x.v1.base.s743 to i64
  %17374 = add nsw i64 %17373, %17136
  %17375 = getelementptr inbounds i16, i16* %blur_x, i64 %17374
  %17376 = bitcast i16* %17375 to <16 x i16>*
  store <16 x i16> %17372, <16 x i16>* %17376, align 2, !tbaa !399
  %17377 = shufflevector <32 x i16> %17371, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17378 = getelementptr inbounds i16, i16* %17375, i64 16
  %17379 = bitcast i16* %17378 to <16 x i16>*
  store <16 x i16> %17377, <16 x i16>* %17379, align 2, !tbaa !399
  br label %"consume blur_x744"

"consume blur_x744":                              ; preds = %"for blur_y.s0.x.x.rebased736", %"produce blur_x742"
  %17380 = sext i32 %b314 to i64
  %17381 = add nsw i64 %17139, %17380
  %17382 = getelementptr inbounds i16, i16* %blur_x, i64 %17381
  %17383 = bitcast i16* %17382 to <16 x i16>*
  %17384 = load <16 x i16>, <16 x i16>* %17383, align 2, !tbaa !399
  %17385 = getelementptr inbounds i16, i16* %17382, i64 16
  %17386 = bitcast i16* %17385 to <16 x i16>*
  %17387 = load <16 x i16>, <16 x i16>* %17386, align 2, !tbaa !399
  %17388 = add nsw i64 %17142, %17380
  %17389 = getelementptr inbounds i16, i16* %blur_x, i64 %17388
  %17390 = bitcast i16* %17389 to <16 x i16>*
  %17391 = load <16 x i16>, <16 x i16>* %17390, align 2, !tbaa !399
  %17392 = getelementptr inbounds i16, i16* %17389, i64 16
  %17393 = bitcast i16* %17392 to <16 x i16>*
  %17394 = load <16 x i16>, <16 x i16>* %17393, align 2, !tbaa !399
  %17395 = add nsw i64 %17145, %17380
  %17396 = getelementptr inbounds i16, i16* %blur_x, i64 %17395
  %17397 = bitcast i16* %17396 to <16 x i16>*
  %17398 = load <16 x i16>, <16 x i16>* %17397, align 2, !tbaa !399
  %17399 = getelementptr inbounds i16, i16* %17396, i64 16
  %17400 = bitcast i16* %17399 to <16 x i16>*
  %17401 = load <16 x i16>, <16 x i16>* %17400, align 2, !tbaa !399
  %17402 = add nsw i64 %17148, %17380
  %17403 = getelementptr inbounds i16, i16* %blur_x, i64 %17402
  %17404 = bitcast i16* %17403 to <16 x i16>*
  %17405 = load <16 x i16>, <16 x i16>* %17404, align 2, !tbaa !399
  %17406 = getelementptr inbounds i16, i16* %17403, i64 16
  %17407 = bitcast i16* %17406 to <16 x i16>*
  %17408 = load <16 x i16>, <16 x i16>* %17407, align 2, !tbaa !399
  %17409 = add nsw i64 %17151, %17380
  %17410 = getelementptr inbounds i16, i16* %blur_x, i64 %17409
  %17411 = bitcast i16* %17410 to <16 x i16>*
  %17412 = load <16 x i16>, <16 x i16>* %17411, align 2, !tbaa !399
  %17413 = getelementptr inbounds i16, i16* %17410, i64 16
  %17414 = bitcast i16* %17413 to <16 x i16>*
  %17415 = load <16 x i16>, <16 x i16>* %17414, align 2, !tbaa !399
  %17416 = add nsw i64 %17154, %17380
  %17417 = getelementptr inbounds i16, i16* %blur_x, i64 %17416
  %17418 = bitcast i16* %17417 to <16 x i16>*
  %17419 = load <16 x i16>, <16 x i16>* %17418, align 2, !tbaa !399
  %17420 = getelementptr inbounds i16, i16* %17417, i64 16
  %17421 = bitcast i16* %17420 to <16 x i16>*
  %17422 = load <16 x i16>, <16 x i16>* %17421, align 2, !tbaa !399
  %17423 = add nsw i64 %17157, %17380
  %17424 = getelementptr inbounds i16, i16* %blur_x, i64 %17423
  %17425 = bitcast i16* %17424 to <16 x i16>*
  %17426 = load <16 x i16>, <16 x i16>* %17425, align 2, !tbaa !399
  %17427 = getelementptr inbounds i16, i16* %17424, i64 16
  %17428 = bitcast i16* %17427 to <16 x i16>*
  %17429 = load <16 x i16>, <16 x i16>* %17428, align 2, !tbaa !399
  %17430 = add <16 x i16> %17391, %17384
  %17431 = add <16 x i16> %17430, %17398
  %17432 = add <16 x i16> %17431, %17405
  %17433 = add <16 x i16> %17432, %17412
  %17434 = add <16 x i16> %17433, %17419
  %17435 = add <16 x i16> %17434, %17426
  %17436 = add <16 x i16> %17394, %17387
  %17437 = add <16 x i16> %17436, %17401
  %17438 = add <16 x i16> %17437, %17408
  %17439 = add <16 x i16> %17438, %17415
  %17440 = add <16 x i16> %17439, %17422
  %17441 = add <16 x i16> %17440, %17429
  %17442 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17435, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17443 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17441, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17444 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17442, <16 x i16> %17435)
  %17445 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17443, <16 x i16> %17441)
  %17446 = shufflevector <16 x i16> %17444, <16 x i16> %17445, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17447 = lshr <32 x i16> %17446, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17448 = shufflevector <32 x i16> %17447, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17449 = add nsw i64 %17161, %17380
  %17450 = getelementptr inbounds i16, i16* %66, i64 %17449
  %17451 = bitcast i16* %17450 to <16 x i16>*
  store <16 x i16> %17448, <16 x i16>* %17451, align 2, !tbaa !401
  %17452 = shufflevector <32 x i16> %17447, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17453 = getelementptr inbounds i16, i16* %17450, i64 16
  %17454 = bitcast i16* %17453 to <16 x i16>*
  store <16 x i16> %17452, <16 x i16>* %17454, align 2, !tbaa !401
  %17455 = add nuw nsw i32 %blur_y.s0.x.x.rebased738, 1
  %.not2816 = icmp eq i32 %17455, %t1727
  br i1 %.not2816, label %"end for blur_y.s0.x.x.rebased737", label %"for blur_y.s0.x.x.rebased736"

after_bb745:                                      ; preds = %"end for blur_y.s0.x.x.rebased737", %"produce blur_x748"
  br i1 %100, label %"for blur_y.s0.x.x.rebased750.preheader", label %"end for blur_y.s0.x.x.rebased751", !prof !386

"for blur_y.s0.x.x.rebased750.preheader":         ; preds = %after_bb745
  %17456 = sext i32 %t1738 to i64
  %17457 = zext i32 %.pre-phi3595 to i64
  %17458 = mul nsw i64 %17457, %116
  %17459 = sub nsw i64 %17458, %96
  %17460 = zext i32 %.pre-phi3591 to i64
  %17461 = mul nsw i64 %17460, %116
  %17462 = sub nsw i64 %17461, %96
  %17463 = zext i32 %.pre-phi3599 to i64
  %17464 = mul nsw i64 %17463, %116
  %17465 = sub nsw i64 %17464, %96
  %17466 = zext i32 %.pre-phi3605 to i64
  %17467 = mul nsw i64 %17466, %116
  %17468 = sub nsw i64 %17467, %96
  %17469 = zext i32 %.pre-phi to i64
  %17470 = mul nsw i64 %17469, %116
  %17471 = sub nsw i64 %17470, %96
  %17472 = zext i32 %.pre-phi3583 to i64
  %17473 = mul nsw i64 %17472, %116
  %17474 = sub nsw i64 %17473, %96
  %17475 = zext i32 %.pre-phi3579 to i64
  %17476 = mul nsw i64 %17475, %116
  %17477 = sub nsw i64 %17476, %96
  %17478 = sext i32 %a26 to i64
  %17479 = add nsw i64 %17478, 28
  %17480 = mul nsw i64 %17479, %117
  %17481 = add nsw i64 %17480, %120
  br label %"for blur_y.s0.x.x.rebased750"

"produce blur_x748":                              ; preds = %"end for blur_y.s0.x.x.rebased737"
  %17482 = getelementptr inbounds i16, i16* %read_input, i64 %175
  %17483 = getelementptr inbounds i16, i16* %17482, i64 -31
  %17484 = bitcast i16* %17483 to <16 x i16>*
  %17485 = load <16 x i16>, <16 x i16>* %17484, align 2, !tbaa !396
  %17486 = getelementptr inbounds i16, i16* %17482, i64 -15
  %17487 = bitcast i16* %17486 to <16 x i16>*
  %17488 = load <16 x i16>, <16 x i16>* %17487, align 2, !tbaa !396
  %17489 = getelementptr inbounds i16, i16* %17482, i64 -32
  %17490 = bitcast i16* %17489 to <16 x i16>*
  %17491 = load <16 x i16>, <16 x i16>* %17490, align 2, !tbaa !396
  %17492 = getelementptr inbounds i16, i16* %17482, i64 -16
  %17493 = bitcast i16* %17492 to <16 x i16>*
  %17494 = load <16 x i16>, <16 x i16>* %17493, align 2, !tbaa !396
  %17495 = getelementptr inbounds i16, i16* %17482, i64 -30
  %17496 = bitcast i16* %17495 to <16 x i16>*
  %17497 = load <16 x i16>, <16 x i16>* %17496, align 2, !tbaa !396
  %17498 = getelementptr inbounds i16, i16* %17482, i64 -14
  %17499 = bitcast i16* %17498 to <16 x i16>*
  %17500 = load <16 x i16>, <16 x i16>* %17499, align 2, !tbaa !396
  %17501 = getelementptr inbounds i16, i16* %17482, i64 -29
  %17502 = bitcast i16* %17501 to <16 x i16>*
  %17503 = load <16 x i16>, <16 x i16>* %17502, align 2, !tbaa !396
  %17504 = getelementptr inbounds i16, i16* %17482, i64 -13
  %17505 = bitcast i16* %17504 to <16 x i16>*
  %17506 = load <16 x i16>, <16 x i16>* %17505, align 2, !tbaa !396
  %17507 = getelementptr inbounds i16, i16* %17482, i64 -28
  %17508 = bitcast i16* %17507 to <16 x i16>*
  %17509 = load <16 x i16>, <16 x i16>* %17508, align 2, !tbaa !396
  %17510 = getelementptr inbounds i16, i16* %17482, i64 -12
  %17511 = bitcast i16* %17510 to <16 x i16>*
  %17512 = load <16 x i16>, <16 x i16>* %17511, align 2, !tbaa !396
  %17513 = getelementptr inbounds i16, i16* %17482, i64 -26
  %17514 = bitcast i16* %17513 to <16 x i16>*
  %17515 = load <16 x i16>, <16 x i16>* %17514, align 2, !tbaa !396
  %17516 = getelementptr inbounds i16, i16* %17482, i64 -10
  %17517 = bitcast i16* %17516 to <16 x i16>*
  %17518 = load <16 x i16>, <16 x i16>* %17517, align 2, !tbaa !396
  %17519 = getelementptr inbounds i16, i16* %17482, i64 -27
  %17520 = bitcast i16* %17519 to <16 x i16>*
  %17521 = load <16 x i16>, <16 x i16>* %17520, align 2, !tbaa !396
  %17522 = getelementptr inbounds i16, i16* %17482, i64 -11
  %17523 = bitcast i16* %17522 to <16 x i16>*
  %17524 = load <16 x i16>, <16 x i16>* %17523, align 2, !tbaa !396
  %17525 = add <16 x i16> %17491, %17485
  %17526 = add <16 x i16> %17525, %17497
  %17527 = add <16 x i16> %17526, %17503
  %17528 = add <16 x i16> %17527, %17509
  %17529 = add <16 x i16> %17528, %17515
  %17530 = add <16 x i16> %17529, %17521
  %17531 = add <16 x i16> %17494, %17488
  %17532 = add <16 x i16> %17531, %17500
  %17533 = add <16 x i16> %17532, %17506
  %17534 = add <16 x i16> %17533, %17512
  %17535 = add <16 x i16> %17534, %17518
  %17536 = add <16 x i16> %17535, %17524
  %17537 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17530, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17538 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17536, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17539 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17537, <16 x i16> %17530)
  %17540 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17538, <16 x i16> %17536)
  %17541 = shufflevector <16 x i16> %17539, <16 x i16> %17540, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17542 = lshr <32 x i16> %17541, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17543 = shufflevector <32 x i16> %17542, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17544 = zext i32 %.pre-phi3583 to i64
  %17545 = mul nsw i64 %97, %17544
  %17546 = add nsw i64 %99, %17545
  %17547 = getelementptr inbounds i16, i16* %blur_x, i64 %17546
  %17548 = getelementptr inbounds i16, i16* %17547, i64 -32
  %17549 = bitcast i16* %17548 to <16 x i16>*
  store <16 x i16> %17543, <16 x i16>* %17549, align 2, !tbaa !399
  %17550 = shufflevector <32 x i16> %17542, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17551 = getelementptr inbounds i16, i16* %17547, i64 -16
  %17552 = bitcast i16* %17551 to <16 x i16>*
  store <16 x i16> %17550, <16 x i16>* %17552, align 2, !tbaa !399
  %17553 = zext i32 %.pre-phi3595 to i64
  %17554 = mul nsw i64 %17553, %116
  %17555 = add nsw i64 %17554, %94
  %17556 = getelementptr inbounds i16, i16* %blur_x, i64 %17555
  %17557 = getelementptr inbounds i16, i16* %17556, i64 -32
  %17558 = bitcast i16* %17557 to <16 x i16>*
  %17559 = load <16 x i16>, <16 x i16>* %17558, align 2, !tbaa !399
  %17560 = getelementptr inbounds i16, i16* %17556, i64 -16
  %17561 = bitcast i16* %17560 to <16 x i16>*
  %17562 = load <16 x i16>, <16 x i16>* %17561, align 2, !tbaa !399
  %17563 = zext i32 %.pre-phi3591 to i64
  %17564 = mul nsw i64 %17563, %116
  %17565 = add nsw i64 %17564, %94
  %17566 = getelementptr inbounds i16, i16* %blur_x, i64 %17565
  %17567 = getelementptr inbounds i16, i16* %17566, i64 -32
  %17568 = bitcast i16* %17567 to <16 x i16>*
  %17569 = load <16 x i16>, <16 x i16>* %17568, align 2, !tbaa !399
  %17570 = getelementptr inbounds i16, i16* %17566, i64 -16
  %17571 = bitcast i16* %17570 to <16 x i16>*
  %17572 = load <16 x i16>, <16 x i16>* %17571, align 2, !tbaa !399
  %17573 = zext i32 %.pre-phi3599 to i64
  %17574 = mul nsw i64 %17573, %116
  %17575 = add nsw i64 %17574, %94
  %17576 = getelementptr inbounds i16, i16* %blur_x, i64 %17575
  %17577 = getelementptr inbounds i16, i16* %17576, i64 -32
  %17578 = bitcast i16* %17577 to <16 x i16>*
  %17579 = load <16 x i16>, <16 x i16>* %17578, align 2, !tbaa !399
  %17580 = getelementptr inbounds i16, i16* %17576, i64 -16
  %17581 = bitcast i16* %17580 to <16 x i16>*
  %17582 = load <16 x i16>, <16 x i16>* %17581, align 2, !tbaa !399
  %17583 = zext i32 %.pre-phi3605 to i64
  %17584 = mul nsw i64 %17583, %116
  %17585 = add nsw i64 %17584, %94
  %17586 = getelementptr inbounds i16, i16* %blur_x, i64 %17585
  %17587 = getelementptr inbounds i16, i16* %17586, i64 -32
  %17588 = bitcast i16* %17587 to <16 x i16>*
  %17589 = load <16 x i16>, <16 x i16>* %17588, align 2, !tbaa !399
  %17590 = getelementptr inbounds i16, i16* %17586, i64 -16
  %17591 = bitcast i16* %17590 to <16 x i16>*
  %17592 = load <16 x i16>, <16 x i16>* %17591, align 2, !tbaa !399
  %17593 = zext i32 %.pre-phi to i64
  %17594 = mul nsw i64 %17593, %116
  %17595 = add nsw i64 %17594, %94
  %17596 = getelementptr inbounds i16, i16* %blur_x, i64 %17595
  %17597 = getelementptr inbounds i16, i16* %17596, i64 -32
  %17598 = bitcast i16* %17597 to <16 x i16>*
  %17599 = load <16 x i16>, <16 x i16>* %17598, align 2, !tbaa !399
  %17600 = getelementptr inbounds i16, i16* %17596, i64 -16
  %17601 = bitcast i16* %17600 to <16 x i16>*
  %17602 = load <16 x i16>, <16 x i16>* %17601, align 2, !tbaa !399
  %17603 = mul nsw i64 %17544, %116
  %17604 = add nsw i64 %17603, %94
  %17605 = getelementptr inbounds i16, i16* %blur_x, i64 %17604
  %17606 = getelementptr inbounds i16, i16* %17605, i64 -32
  %17607 = bitcast i16* %17606 to <16 x i16>*
  %17608 = load <16 x i16>, <16 x i16>* %17607, align 2, !tbaa !399
  %17609 = getelementptr inbounds i16, i16* %17605, i64 -16
  %17610 = bitcast i16* %17609 to <16 x i16>*
  %17611 = load <16 x i16>, <16 x i16>* %17610, align 2, !tbaa !399
  %17612 = zext i32 %.pre-phi3579 to i64
  %17613 = mul nsw i64 %17612, %116
  %17614 = add nsw i64 %17613, %94
  %17615 = getelementptr inbounds i16, i16* %blur_x, i64 %17614
  %17616 = getelementptr inbounds i16, i16* %17615, i64 -32
  %17617 = bitcast i16* %17616 to <16 x i16>*
  %17618 = load <16 x i16>, <16 x i16>* %17617, align 2, !tbaa !399
  %17619 = getelementptr inbounds i16, i16* %17615, i64 -16
  %17620 = bitcast i16* %17619 to <16 x i16>*
  %17621 = load <16 x i16>, <16 x i16>* %17620, align 2, !tbaa !399
  %17622 = add <16 x i16> %17569, %17559
  %17623 = add <16 x i16> %17622, %17579
  %17624 = add <16 x i16> %17623, %17589
  %17625 = add <16 x i16> %17624, %17599
  %17626 = add <16 x i16> %17625, %17608
  %17627 = add <16 x i16> %17626, %17618
  %17628 = add <16 x i16> %17572, %17562
  %17629 = add <16 x i16> %17628, %17582
  %17630 = add <16 x i16> %17629, %17592
  %17631 = add <16 x i16> %17630, %17602
  %17632 = add <16 x i16> %17631, %17611
  %17633 = add <16 x i16> %17632, %17621
  %17634 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17627, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17635 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17633, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17636 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17634, <16 x i16> %17627)
  %17637 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17635, <16 x i16> %17633)
  %17638 = shufflevector <16 x i16> %17636, <16 x i16> %17637, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17639 = lshr <32 x i16> %17638, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17640 = shufflevector <32 x i16> %17639, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17641 = sext i32 %a26 to i64
  %17642 = add nsw i64 %17641, 28
  %17643 = mul nsw i64 %17642, %117
  %17644 = add nsw i64 %119, %17643
  %17645 = getelementptr inbounds i16, i16* %66, i64 %17644
  %17646 = getelementptr inbounds i16, i16* %17645, i64 -32
  %17647 = bitcast i16* %17646 to <16 x i16>*
  store <16 x i16> %17640, <16 x i16>* %17647, align 2, !tbaa !401
  %17648 = shufflevector <32 x i16> %17639, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17649 = getelementptr inbounds i16, i16* %17645, i64 -16
  %17650 = bitcast i16* %17649 to <16 x i16>*
  store <16 x i16> %17648, <16 x i16>* %17650, align 2, !tbaa !401
  br label %after_bb745

"for blur_y.s0.x.x.rebased750":                   ; preds = %"for blur_y.s0.x.x.rebased750.preheader", %"consume blur_x757"
  %indvars.iv3473 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased750.preheader" ], [ %indvars.iv.next3474, %"consume blur_x757" ]
  %17651 = add nsw i64 %indvars.iv3473, %101
  %17652 = icmp slt i64 %17651, 1
  %17653 = trunc i64 %17651 to i32
  %17654 = shl nsw i32 %17653, 5
  %17655 = icmp sgt i32 %4, %17654
  %17656 = or i1 %17652, %17655
  br i1 %17656, label %"produce blur_x756", label %"for blur_y.s0.x.x.rebased750.consume blur_x757_crit_edge"

"for blur_y.s0.x.x.rebased750.consume blur_x757_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased750"
  %.pre3660 = shl nsw i64 %17651, 5
  br label %"consume blur_x757"

"end for blur_y.s0.x.x.rebased751":               ; preds = %"consume blur_x757", %after_bb745
  br i1 %102, label %"for blur_y.s0.x.x.rebased758.preheader", label %"end for blur_y.s0.x.x.rebased759", !prof !386

"for blur_y.s0.x.x.rebased758.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased751"
  %17657 = sext i32 %t1738 to i64
  %17658 = zext i32 %.pre-phi3595 to i64
  %17659 = mul nsw i64 %17658, %116
  %17660 = sub nsw i64 %17659, %96
  %17661 = zext i32 %.pre-phi3591 to i64
  %17662 = mul nsw i64 %17661, %116
  %17663 = sub nsw i64 %17662, %96
  %17664 = zext i32 %.pre-phi3599 to i64
  %17665 = mul nsw i64 %17664, %116
  %17666 = sub nsw i64 %17665, %96
  %17667 = zext i32 %.pre-phi3605 to i64
  %17668 = mul nsw i64 %17667, %116
  %17669 = sub nsw i64 %17668, %96
  %17670 = zext i32 %.pre-phi to i64
  %17671 = mul nsw i64 %17670, %116
  %17672 = sub nsw i64 %17671, %96
  %17673 = zext i32 %.pre-phi3583 to i64
  %17674 = mul nsw i64 %17673, %116
  %17675 = sub nsw i64 %17674, %96
  %17676 = zext i32 %.pre-phi3579 to i64
  %17677 = mul nsw i64 %17676, %116
  %17678 = sub nsw i64 %17677, %96
  %17679 = sext i32 %a26 to i64
  %17680 = add nsw i64 %17679, 28
  %17681 = mul nsw i64 %17680, %117
  %17682 = add nsw i64 %17681, %120
  br label %"for blur_y.s0.x.x.rebased758"

"produce blur_x756":                              ; preds = %"for blur_y.s0.x.x.rebased750"
  %t1200 = add nsw i32 %17654, %t2209
  %17683 = sext i32 %t1200 to i64
  %17684 = getelementptr inbounds i16, i16* %read_input, i64 %17683
  %17685 = getelementptr inbounds i16, i16* %17684, i64 1
  %17686 = bitcast i16* %17685 to <16 x i16>*
  %17687 = load <16 x i16>, <16 x i16>* %17686, align 2, !tbaa !396
  %17688 = getelementptr inbounds i16, i16* %17684, i64 17
  %17689 = bitcast i16* %17688 to <16 x i16>*
  %17690 = load <16 x i16>, <16 x i16>* %17689, align 2, !tbaa !396
  %17691 = bitcast i16* %17684 to <16 x i16>*
  %17692 = load <16 x i16>, <16 x i16>* %17691, align 2, !tbaa !396
  %17693 = getelementptr inbounds i16, i16* %17684, i64 16
  %17694 = bitcast i16* %17693 to <16 x i16>*
  %17695 = load <16 x i16>, <16 x i16>* %17694, align 2, !tbaa !396
  %17696 = getelementptr inbounds i16, i16* %17684, i64 2
  %17697 = bitcast i16* %17696 to <16 x i16>*
  %17698 = load <16 x i16>, <16 x i16>* %17697, align 2, !tbaa !396
  %17699 = getelementptr inbounds i16, i16* %17684, i64 18
  %17700 = bitcast i16* %17699 to <16 x i16>*
  %17701 = load <16 x i16>, <16 x i16>* %17700, align 2, !tbaa !396
  %17702 = getelementptr inbounds i16, i16* %17684, i64 3
  %17703 = bitcast i16* %17702 to <16 x i16>*
  %17704 = load <16 x i16>, <16 x i16>* %17703, align 2, !tbaa !396
  %17705 = getelementptr inbounds i16, i16* %17684, i64 19
  %17706 = bitcast i16* %17705 to <16 x i16>*
  %17707 = load <16 x i16>, <16 x i16>* %17706, align 2, !tbaa !396
  %17708 = getelementptr inbounds i16, i16* %17684, i64 4
  %17709 = bitcast i16* %17708 to <16 x i16>*
  %17710 = load <16 x i16>, <16 x i16>* %17709, align 2, !tbaa !396
  %17711 = getelementptr inbounds i16, i16* %17684, i64 20
  %17712 = bitcast i16* %17711 to <16 x i16>*
  %17713 = load <16 x i16>, <16 x i16>* %17712, align 2, !tbaa !396
  %17714 = getelementptr inbounds i16, i16* %17684, i64 6
  %17715 = bitcast i16* %17714 to <16 x i16>*
  %17716 = load <16 x i16>, <16 x i16>* %17715, align 2, !tbaa !396
  %17717 = getelementptr inbounds i16, i16* %17684, i64 22
  %17718 = bitcast i16* %17717 to <16 x i16>*
  %17719 = load <16 x i16>, <16 x i16>* %17718, align 2, !tbaa !396
  %17720 = getelementptr inbounds i16, i16* %17684, i64 5
  %17721 = bitcast i16* %17720 to <16 x i16>*
  %17722 = load <16 x i16>, <16 x i16>* %17721, align 2, !tbaa !396
  %17723 = getelementptr inbounds i16, i16* %17684, i64 21
  %17724 = bitcast i16* %17723 to <16 x i16>*
  %17725 = load <16 x i16>, <16 x i16>* %17724, align 2, !tbaa !396
  %17726 = add <16 x i16> %17692, %17687
  %17727 = add <16 x i16> %17726, %17698
  %17728 = add <16 x i16> %17727, %17704
  %17729 = add <16 x i16> %17728, %17710
  %17730 = add <16 x i16> %17729, %17716
  %17731 = add <16 x i16> %17730, %17722
  %17732 = add <16 x i16> %17695, %17690
  %17733 = add <16 x i16> %17732, %17701
  %17734 = add <16 x i16> %17733, %17707
  %17735 = add <16 x i16> %17734, %17713
  %17736 = add <16 x i16> %17735, %17719
  %17737 = add <16 x i16> %17736, %17725
  %17738 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17731, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17739 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17737, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17740 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17738, <16 x i16> %17731)
  %17741 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17739, <16 x i16> %17737)
  %17742 = shufflevector <16 x i16> %17740, <16 x i16> %17741, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17743 = lshr <32 x i16> %17742, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17744 = shufflevector <32 x i16> %17743, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17745 = shl nsw i64 %17651, 5
  %17746 = add nsw i64 %17745, %17456
  %17747 = getelementptr inbounds i16, i16* %blur_x, i64 %17746
  %17748 = bitcast i16* %17747 to <16 x i16>*
  store <16 x i16> %17744, <16 x i16>* %17748, align 2, !tbaa !399
  %17749 = shufflevector <32 x i16> %17743, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17750 = getelementptr inbounds i16, i16* %17747, i64 16
  %17751 = bitcast i16* %17750 to <16 x i16>*
  store <16 x i16> %17749, <16 x i16>* %17751, align 2, !tbaa !399
  br label %"consume blur_x757"

"consume blur_x757":                              ; preds = %"for blur_y.s0.x.x.rebased750.consume blur_x757_crit_edge", %"produce blur_x756"
  %.pre-phi3661 = phi i64 [ %.pre3660, %"for blur_y.s0.x.x.rebased750.consume blur_x757_crit_edge" ], [ %17745, %"produce blur_x756" ]
  %17752 = add nsw i64 %17459, %.pre-phi3661
  %17753 = getelementptr inbounds i16, i16* %blur_x, i64 %17752
  %17754 = bitcast i16* %17753 to <16 x i16>*
  %17755 = load <16 x i16>, <16 x i16>* %17754, align 2, !tbaa !399
  %17756 = getelementptr inbounds i16, i16* %17753, i64 16
  %17757 = bitcast i16* %17756 to <16 x i16>*
  %17758 = load <16 x i16>, <16 x i16>* %17757, align 2, !tbaa !399
  %17759 = add nsw i64 %17462, %.pre-phi3661
  %17760 = getelementptr inbounds i16, i16* %blur_x, i64 %17759
  %17761 = bitcast i16* %17760 to <16 x i16>*
  %17762 = load <16 x i16>, <16 x i16>* %17761, align 2, !tbaa !399
  %17763 = getelementptr inbounds i16, i16* %17760, i64 16
  %17764 = bitcast i16* %17763 to <16 x i16>*
  %17765 = load <16 x i16>, <16 x i16>* %17764, align 2, !tbaa !399
  %17766 = add nsw i64 %17465, %.pre-phi3661
  %17767 = getelementptr inbounds i16, i16* %blur_x, i64 %17766
  %17768 = bitcast i16* %17767 to <16 x i16>*
  %17769 = load <16 x i16>, <16 x i16>* %17768, align 2, !tbaa !399
  %17770 = getelementptr inbounds i16, i16* %17767, i64 16
  %17771 = bitcast i16* %17770 to <16 x i16>*
  %17772 = load <16 x i16>, <16 x i16>* %17771, align 2, !tbaa !399
  %17773 = add nsw i64 %17468, %.pre-phi3661
  %17774 = getelementptr inbounds i16, i16* %blur_x, i64 %17773
  %17775 = bitcast i16* %17774 to <16 x i16>*
  %17776 = load <16 x i16>, <16 x i16>* %17775, align 2, !tbaa !399
  %17777 = getelementptr inbounds i16, i16* %17774, i64 16
  %17778 = bitcast i16* %17777 to <16 x i16>*
  %17779 = load <16 x i16>, <16 x i16>* %17778, align 2, !tbaa !399
  %17780 = add nsw i64 %17471, %.pre-phi3661
  %17781 = getelementptr inbounds i16, i16* %blur_x, i64 %17780
  %17782 = bitcast i16* %17781 to <16 x i16>*
  %17783 = load <16 x i16>, <16 x i16>* %17782, align 2, !tbaa !399
  %17784 = getelementptr inbounds i16, i16* %17781, i64 16
  %17785 = bitcast i16* %17784 to <16 x i16>*
  %17786 = load <16 x i16>, <16 x i16>* %17785, align 2, !tbaa !399
  %17787 = add nsw i64 %17474, %.pre-phi3661
  %17788 = getelementptr inbounds i16, i16* %blur_x, i64 %17787
  %17789 = bitcast i16* %17788 to <16 x i16>*
  %17790 = load <16 x i16>, <16 x i16>* %17789, align 2, !tbaa !399
  %17791 = getelementptr inbounds i16, i16* %17788, i64 16
  %17792 = bitcast i16* %17791 to <16 x i16>*
  %17793 = load <16 x i16>, <16 x i16>* %17792, align 2, !tbaa !399
  %17794 = add nsw i64 %17477, %.pre-phi3661
  %17795 = getelementptr inbounds i16, i16* %blur_x, i64 %17794
  %17796 = bitcast i16* %17795 to <16 x i16>*
  %17797 = load <16 x i16>, <16 x i16>* %17796, align 2, !tbaa !399
  %17798 = getelementptr inbounds i16, i16* %17795, i64 16
  %17799 = bitcast i16* %17798 to <16 x i16>*
  %17800 = load <16 x i16>, <16 x i16>* %17799, align 2, !tbaa !399
  %17801 = add <16 x i16> %17762, %17755
  %17802 = add <16 x i16> %17801, %17769
  %17803 = add <16 x i16> %17802, %17776
  %17804 = add <16 x i16> %17803, %17783
  %17805 = add <16 x i16> %17804, %17790
  %17806 = add <16 x i16> %17805, %17797
  %17807 = add <16 x i16> %17765, %17758
  %17808 = add <16 x i16> %17807, %17772
  %17809 = add <16 x i16> %17808, %17779
  %17810 = add <16 x i16> %17809, %17786
  %17811 = add <16 x i16> %17810, %17793
  %17812 = add <16 x i16> %17811, %17800
  %17813 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17806, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17814 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17812, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17815 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17813, <16 x i16> %17806)
  %17816 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17814, <16 x i16> %17812)
  %17817 = shufflevector <16 x i16> %17815, <16 x i16> %17816, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17818 = lshr <32 x i16> %17817, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17819 = shufflevector <32 x i16> %17818, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17820 = add nsw i64 %17481, %.pre-phi3661
  %17821 = getelementptr inbounds i16, i16* %66, i64 %17820
  %17822 = bitcast i16* %17821 to <16 x i16>*
  store <16 x i16> %17819, <16 x i16>* %17822, align 2, !tbaa !401
  %17823 = shufflevector <32 x i16> %17818, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17824 = getelementptr inbounds i16, i16* %17821, i64 16
  %17825 = bitcast i16* %17824 to <16 x i16>*
  store <16 x i16> %17823, <16 x i16>* %17825, align 2, !tbaa !401
  %indvars.iv.next3474 = add nuw nsw i64 %indvars.iv3473, 1
  %.not2815 = icmp eq i64 %indvars.iv.next3474, %188
  br i1 %.not2815, label %"end for blur_y.s0.x.x.rebased751", label %"for blur_y.s0.x.x.rebased750"

"for blur_y.s0.x.x.rebased758":                   ; preds = %"for blur_y.s0.x.x.rebased758.preheader", %"consume blur_x766"
  %blur_y.s0.x.x.rebased760 = phi i32 [ %17976, %"consume blur_x766" ], [ 0, %"for blur_y.s0.x.x.rebased758.preheader" ]
  %17826 = add nsw i32 %blur_y.s0.x.x.rebased760, %t1670
  %a315 = shl nsw i32 %17826, 5
  %17827 = icmp sgt i32 %a14, %a315
  %b321 = select i1 %17827, i32 %a315, i32 %a14
  %17828 = icmp slt i32 %17826, 1
  %17829 = icmp sgt i32 %4, %a315
  %17830 = or i1 %17828, %17829
  br i1 %17830, label %"produce blur_x764", label %"consume blur_x766"

"end for blur_y.s0.x.x.rebased759":               ; preds = %"consume blur_x766", %"end for blur_y.s0.x.x.rebased751"
  br i1 %34, label %"produce blur_x770", label %after_bb767

"produce blur_x764":                              ; preds = %"for blur_y.s0.x.x.rebased758"
  %17831 = icmp slt i32 %b321, %4
  %blur_x.s0.x.v1.base.s765 = select i1 %17831, i32 %b321, i32 %4
  %t1205 = add nsw i32 %blur_x.s0.x.v1.base.s765, %t2209
  %17832 = sext i32 %t1205 to i64
  %17833 = getelementptr inbounds i16, i16* %read_input, i64 %17832
  %17834 = getelementptr inbounds i16, i16* %17833, i64 1
  %17835 = bitcast i16* %17834 to <16 x i16>*
  %17836 = load <16 x i16>, <16 x i16>* %17835, align 2, !tbaa !396
  %17837 = getelementptr inbounds i16, i16* %17833, i64 17
  %17838 = bitcast i16* %17837 to <16 x i16>*
  %17839 = load <16 x i16>, <16 x i16>* %17838, align 2, !tbaa !396
  %17840 = bitcast i16* %17833 to <16 x i16>*
  %17841 = load <16 x i16>, <16 x i16>* %17840, align 2, !tbaa !396
  %17842 = getelementptr inbounds i16, i16* %17833, i64 16
  %17843 = bitcast i16* %17842 to <16 x i16>*
  %17844 = load <16 x i16>, <16 x i16>* %17843, align 2, !tbaa !396
  %17845 = getelementptr inbounds i16, i16* %17833, i64 2
  %17846 = bitcast i16* %17845 to <16 x i16>*
  %17847 = load <16 x i16>, <16 x i16>* %17846, align 2, !tbaa !396
  %17848 = getelementptr inbounds i16, i16* %17833, i64 18
  %17849 = bitcast i16* %17848 to <16 x i16>*
  %17850 = load <16 x i16>, <16 x i16>* %17849, align 2, !tbaa !396
  %17851 = getelementptr inbounds i16, i16* %17833, i64 3
  %17852 = bitcast i16* %17851 to <16 x i16>*
  %17853 = load <16 x i16>, <16 x i16>* %17852, align 2, !tbaa !396
  %17854 = getelementptr inbounds i16, i16* %17833, i64 19
  %17855 = bitcast i16* %17854 to <16 x i16>*
  %17856 = load <16 x i16>, <16 x i16>* %17855, align 2, !tbaa !396
  %17857 = getelementptr inbounds i16, i16* %17833, i64 4
  %17858 = bitcast i16* %17857 to <16 x i16>*
  %17859 = load <16 x i16>, <16 x i16>* %17858, align 2, !tbaa !396
  %17860 = getelementptr inbounds i16, i16* %17833, i64 20
  %17861 = bitcast i16* %17860 to <16 x i16>*
  %17862 = load <16 x i16>, <16 x i16>* %17861, align 2, !tbaa !396
  %17863 = getelementptr inbounds i16, i16* %17833, i64 6
  %17864 = bitcast i16* %17863 to <16 x i16>*
  %17865 = load <16 x i16>, <16 x i16>* %17864, align 2, !tbaa !396
  %17866 = getelementptr inbounds i16, i16* %17833, i64 22
  %17867 = bitcast i16* %17866 to <16 x i16>*
  %17868 = load <16 x i16>, <16 x i16>* %17867, align 2, !tbaa !396
  %17869 = getelementptr inbounds i16, i16* %17833, i64 5
  %17870 = bitcast i16* %17869 to <16 x i16>*
  %17871 = load <16 x i16>, <16 x i16>* %17870, align 2, !tbaa !396
  %17872 = getelementptr inbounds i16, i16* %17833, i64 21
  %17873 = bitcast i16* %17872 to <16 x i16>*
  %17874 = load <16 x i16>, <16 x i16>* %17873, align 2, !tbaa !396
  %17875 = add <16 x i16> %17841, %17836
  %17876 = add <16 x i16> %17875, %17847
  %17877 = add <16 x i16> %17876, %17853
  %17878 = add <16 x i16> %17877, %17859
  %17879 = add <16 x i16> %17878, %17865
  %17880 = add <16 x i16> %17879, %17871
  %17881 = add <16 x i16> %17844, %17839
  %17882 = add <16 x i16> %17881, %17850
  %17883 = add <16 x i16> %17882, %17856
  %17884 = add <16 x i16> %17883, %17862
  %17885 = add <16 x i16> %17884, %17868
  %17886 = add <16 x i16> %17885, %17874
  %17887 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17880, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17888 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17886, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17889 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17887, <16 x i16> %17880)
  %17890 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17888, <16 x i16> %17886)
  %17891 = shufflevector <16 x i16> %17889, <16 x i16> %17890, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17892 = lshr <32 x i16> %17891, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17893 = shufflevector <32 x i16> %17892, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17894 = sext i32 %blur_x.s0.x.v1.base.s765 to i64
  %17895 = add nsw i64 %17894, %17657
  %17896 = getelementptr inbounds i16, i16* %blur_x, i64 %17895
  %17897 = bitcast i16* %17896 to <16 x i16>*
  store <16 x i16> %17893, <16 x i16>* %17897, align 2, !tbaa !399
  %17898 = shufflevector <32 x i16> %17892, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17899 = getelementptr inbounds i16, i16* %17896, i64 16
  %17900 = bitcast i16* %17899 to <16 x i16>*
  store <16 x i16> %17898, <16 x i16>* %17900, align 2, !tbaa !399
  br label %"consume blur_x766"

"consume blur_x766":                              ; preds = %"for blur_y.s0.x.x.rebased758", %"produce blur_x764"
  %17901 = sext i32 %b321 to i64
  %17902 = add nsw i64 %17660, %17901
  %17903 = getelementptr inbounds i16, i16* %blur_x, i64 %17902
  %17904 = bitcast i16* %17903 to <16 x i16>*
  %17905 = load <16 x i16>, <16 x i16>* %17904, align 2, !tbaa !399
  %17906 = getelementptr inbounds i16, i16* %17903, i64 16
  %17907 = bitcast i16* %17906 to <16 x i16>*
  %17908 = load <16 x i16>, <16 x i16>* %17907, align 2, !tbaa !399
  %17909 = add nsw i64 %17663, %17901
  %17910 = getelementptr inbounds i16, i16* %blur_x, i64 %17909
  %17911 = bitcast i16* %17910 to <16 x i16>*
  %17912 = load <16 x i16>, <16 x i16>* %17911, align 2, !tbaa !399
  %17913 = getelementptr inbounds i16, i16* %17910, i64 16
  %17914 = bitcast i16* %17913 to <16 x i16>*
  %17915 = load <16 x i16>, <16 x i16>* %17914, align 2, !tbaa !399
  %17916 = add nsw i64 %17666, %17901
  %17917 = getelementptr inbounds i16, i16* %blur_x, i64 %17916
  %17918 = bitcast i16* %17917 to <16 x i16>*
  %17919 = load <16 x i16>, <16 x i16>* %17918, align 2, !tbaa !399
  %17920 = getelementptr inbounds i16, i16* %17917, i64 16
  %17921 = bitcast i16* %17920 to <16 x i16>*
  %17922 = load <16 x i16>, <16 x i16>* %17921, align 2, !tbaa !399
  %17923 = add nsw i64 %17669, %17901
  %17924 = getelementptr inbounds i16, i16* %blur_x, i64 %17923
  %17925 = bitcast i16* %17924 to <16 x i16>*
  %17926 = load <16 x i16>, <16 x i16>* %17925, align 2, !tbaa !399
  %17927 = getelementptr inbounds i16, i16* %17924, i64 16
  %17928 = bitcast i16* %17927 to <16 x i16>*
  %17929 = load <16 x i16>, <16 x i16>* %17928, align 2, !tbaa !399
  %17930 = add nsw i64 %17672, %17901
  %17931 = getelementptr inbounds i16, i16* %blur_x, i64 %17930
  %17932 = bitcast i16* %17931 to <16 x i16>*
  %17933 = load <16 x i16>, <16 x i16>* %17932, align 2, !tbaa !399
  %17934 = getelementptr inbounds i16, i16* %17931, i64 16
  %17935 = bitcast i16* %17934 to <16 x i16>*
  %17936 = load <16 x i16>, <16 x i16>* %17935, align 2, !tbaa !399
  %17937 = add nsw i64 %17675, %17901
  %17938 = getelementptr inbounds i16, i16* %blur_x, i64 %17937
  %17939 = bitcast i16* %17938 to <16 x i16>*
  %17940 = load <16 x i16>, <16 x i16>* %17939, align 2, !tbaa !399
  %17941 = getelementptr inbounds i16, i16* %17938, i64 16
  %17942 = bitcast i16* %17941 to <16 x i16>*
  %17943 = load <16 x i16>, <16 x i16>* %17942, align 2, !tbaa !399
  %17944 = add nsw i64 %17678, %17901
  %17945 = getelementptr inbounds i16, i16* %blur_x, i64 %17944
  %17946 = bitcast i16* %17945 to <16 x i16>*
  %17947 = load <16 x i16>, <16 x i16>* %17946, align 2, !tbaa !399
  %17948 = getelementptr inbounds i16, i16* %17945, i64 16
  %17949 = bitcast i16* %17948 to <16 x i16>*
  %17950 = load <16 x i16>, <16 x i16>* %17949, align 2, !tbaa !399
  %17951 = add <16 x i16> %17912, %17905
  %17952 = add <16 x i16> %17951, %17919
  %17953 = add <16 x i16> %17952, %17926
  %17954 = add <16 x i16> %17953, %17933
  %17955 = add <16 x i16> %17954, %17940
  %17956 = add <16 x i16> %17955, %17947
  %17957 = add <16 x i16> %17915, %17908
  %17958 = add <16 x i16> %17957, %17922
  %17959 = add <16 x i16> %17958, %17929
  %17960 = add <16 x i16> %17959, %17936
  %17961 = add <16 x i16> %17960, %17943
  %17962 = add <16 x i16> %17961, %17950
  %17963 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17956, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17964 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17962, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17965 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17963, <16 x i16> %17956)
  %17966 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17964, <16 x i16> %17962)
  %17967 = shufflevector <16 x i16> %17965, <16 x i16> %17966, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17968 = lshr <32 x i16> %17967, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17969 = shufflevector <32 x i16> %17968, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17970 = add nsw i64 %17682, %17901
  %17971 = getelementptr inbounds i16, i16* %66, i64 %17970
  %17972 = bitcast i16* %17971 to <16 x i16>*
  store <16 x i16> %17969, <16 x i16>* %17972, align 2, !tbaa !401
  %17973 = shufflevector <32 x i16> %17968, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17974 = getelementptr inbounds i16, i16* %17971, i64 16
  %17975 = bitcast i16* %17974 to <16 x i16>*
  store <16 x i16> %17973, <16 x i16>* %17975, align 2, !tbaa !401
  %17976 = add nuw nsw i32 %blur_y.s0.x.x.rebased760, 1
  %.not2814 = icmp eq i32 %17976, %t1727
  br i1 %.not2814, label %"end for blur_y.s0.x.x.rebased759", label %"for blur_y.s0.x.x.rebased758"

after_bb767:                                      ; preds = %"end for blur_y.s0.x.x.rebased759", %"produce blur_x770"
  br i1 %100, label %"for blur_y.s0.x.x.rebased772.preheader", label %"end for blur_y.s0.x.x.rebased773", !prof !386

"for blur_y.s0.x.x.rebased772.preheader":         ; preds = %after_bb767
  %17977 = sext i32 %t1744 to i64
  %17978 = zext i32 %.pre-phi3599 to i64
  %17979 = mul nsw i64 %17978, %116
  %17980 = sub nsw i64 %17979, %96
  %17981 = zext i32 %.pre-phi3595 to i64
  %17982 = mul nsw i64 %17981, %116
  %17983 = sub nsw i64 %17982, %96
  %17984 = zext i32 %.pre-phi3605 to i64
  %17985 = mul nsw i64 %17984, %116
  %17986 = sub nsw i64 %17985, %96
  %17987 = zext i32 %.pre-phi to i64
  %17988 = mul nsw i64 %17987, %116
  %17989 = sub nsw i64 %17988, %96
  %17990 = zext i32 %.pre-phi3579 to i64
  %17991 = mul nsw i64 %17990, %116
  %17992 = sub nsw i64 %17991, %96
  %17993 = zext i32 %.pre-phi3587 to i64
  %17994 = mul nsw i64 %17993, %116
  %17995 = sub nsw i64 %17994, %96
  %17996 = zext i32 %.pre-phi3583 to i64
  %17997 = mul nsw i64 %17996, %116
  %17998 = sub nsw i64 %17997, %96
  %17999 = sext i32 %a26 to i64
  %18000 = add nsw i64 %17999, 29
  %18001 = mul nsw i64 %18000, %117
  %18002 = add nsw i64 %18001, %120
  br label %"for blur_y.s0.x.x.rebased772"

"produce blur_x770":                              ; preds = %"end for blur_y.s0.x.x.rebased759"
  %18003 = getelementptr inbounds i16, i16* %read_input, i64 %177
  %18004 = getelementptr inbounds i16, i16* %18003, i64 -31
  %18005 = bitcast i16* %18004 to <16 x i16>*
  %18006 = load <16 x i16>, <16 x i16>* %18005, align 2, !tbaa !396
  %18007 = getelementptr inbounds i16, i16* %18003, i64 -15
  %18008 = bitcast i16* %18007 to <16 x i16>*
  %18009 = load <16 x i16>, <16 x i16>* %18008, align 2, !tbaa !396
  %18010 = getelementptr inbounds i16, i16* %18003, i64 -32
  %18011 = bitcast i16* %18010 to <16 x i16>*
  %18012 = load <16 x i16>, <16 x i16>* %18011, align 2, !tbaa !396
  %18013 = getelementptr inbounds i16, i16* %18003, i64 -16
  %18014 = bitcast i16* %18013 to <16 x i16>*
  %18015 = load <16 x i16>, <16 x i16>* %18014, align 2, !tbaa !396
  %18016 = getelementptr inbounds i16, i16* %18003, i64 -30
  %18017 = bitcast i16* %18016 to <16 x i16>*
  %18018 = load <16 x i16>, <16 x i16>* %18017, align 2, !tbaa !396
  %18019 = getelementptr inbounds i16, i16* %18003, i64 -14
  %18020 = bitcast i16* %18019 to <16 x i16>*
  %18021 = load <16 x i16>, <16 x i16>* %18020, align 2, !tbaa !396
  %18022 = getelementptr inbounds i16, i16* %18003, i64 -29
  %18023 = bitcast i16* %18022 to <16 x i16>*
  %18024 = load <16 x i16>, <16 x i16>* %18023, align 2, !tbaa !396
  %18025 = getelementptr inbounds i16, i16* %18003, i64 -13
  %18026 = bitcast i16* %18025 to <16 x i16>*
  %18027 = load <16 x i16>, <16 x i16>* %18026, align 2, !tbaa !396
  %18028 = getelementptr inbounds i16, i16* %18003, i64 -28
  %18029 = bitcast i16* %18028 to <16 x i16>*
  %18030 = load <16 x i16>, <16 x i16>* %18029, align 2, !tbaa !396
  %18031 = getelementptr inbounds i16, i16* %18003, i64 -12
  %18032 = bitcast i16* %18031 to <16 x i16>*
  %18033 = load <16 x i16>, <16 x i16>* %18032, align 2, !tbaa !396
  %18034 = getelementptr inbounds i16, i16* %18003, i64 -26
  %18035 = bitcast i16* %18034 to <16 x i16>*
  %18036 = load <16 x i16>, <16 x i16>* %18035, align 2, !tbaa !396
  %18037 = getelementptr inbounds i16, i16* %18003, i64 -10
  %18038 = bitcast i16* %18037 to <16 x i16>*
  %18039 = load <16 x i16>, <16 x i16>* %18038, align 2, !tbaa !396
  %18040 = getelementptr inbounds i16, i16* %18003, i64 -27
  %18041 = bitcast i16* %18040 to <16 x i16>*
  %18042 = load <16 x i16>, <16 x i16>* %18041, align 2, !tbaa !396
  %18043 = getelementptr inbounds i16, i16* %18003, i64 -11
  %18044 = bitcast i16* %18043 to <16 x i16>*
  %18045 = load <16 x i16>, <16 x i16>* %18044, align 2, !tbaa !396
  %18046 = add <16 x i16> %18012, %18006
  %18047 = add <16 x i16> %18046, %18018
  %18048 = add <16 x i16> %18047, %18024
  %18049 = add <16 x i16> %18048, %18030
  %18050 = add <16 x i16> %18049, %18036
  %18051 = add <16 x i16> %18050, %18042
  %18052 = add <16 x i16> %18015, %18009
  %18053 = add <16 x i16> %18052, %18021
  %18054 = add <16 x i16> %18053, %18027
  %18055 = add <16 x i16> %18054, %18033
  %18056 = add <16 x i16> %18055, %18039
  %18057 = add <16 x i16> %18056, %18045
  %18058 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18051, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18059 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18057, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18060 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18058, <16 x i16> %18051)
  %18061 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18059, <16 x i16> %18057)
  %18062 = shufflevector <16 x i16> %18060, <16 x i16> %18061, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18063 = lshr <32 x i16> %18062, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18064 = shufflevector <32 x i16> %18063, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18065 = zext i32 %.pre-phi3587 to i64
  %18066 = mul nsw i64 %97, %18065
  %18067 = add nsw i64 %99, %18066
  %18068 = getelementptr inbounds i16, i16* %blur_x, i64 %18067
  %18069 = getelementptr inbounds i16, i16* %18068, i64 -32
  %18070 = bitcast i16* %18069 to <16 x i16>*
  store <16 x i16> %18064, <16 x i16>* %18070, align 2, !tbaa !399
  %18071 = shufflevector <32 x i16> %18063, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18072 = getelementptr inbounds i16, i16* %18068, i64 -16
  %18073 = bitcast i16* %18072 to <16 x i16>*
  store <16 x i16> %18071, <16 x i16>* %18073, align 2, !tbaa !399
  %18074 = zext i32 %.pre-phi3599 to i64
  %18075 = mul nsw i64 %18074, %116
  %18076 = add nsw i64 %18075, %94
  %18077 = getelementptr inbounds i16, i16* %blur_x, i64 %18076
  %18078 = getelementptr inbounds i16, i16* %18077, i64 -32
  %18079 = bitcast i16* %18078 to <16 x i16>*
  %18080 = load <16 x i16>, <16 x i16>* %18079, align 2, !tbaa !399
  %18081 = getelementptr inbounds i16, i16* %18077, i64 -16
  %18082 = bitcast i16* %18081 to <16 x i16>*
  %18083 = load <16 x i16>, <16 x i16>* %18082, align 2, !tbaa !399
  %18084 = zext i32 %.pre-phi3595 to i64
  %18085 = mul nsw i64 %18084, %116
  %18086 = add nsw i64 %18085, %94
  %18087 = getelementptr inbounds i16, i16* %blur_x, i64 %18086
  %18088 = getelementptr inbounds i16, i16* %18087, i64 -32
  %18089 = bitcast i16* %18088 to <16 x i16>*
  %18090 = load <16 x i16>, <16 x i16>* %18089, align 2, !tbaa !399
  %18091 = getelementptr inbounds i16, i16* %18087, i64 -16
  %18092 = bitcast i16* %18091 to <16 x i16>*
  %18093 = load <16 x i16>, <16 x i16>* %18092, align 2, !tbaa !399
  %18094 = zext i32 %.pre-phi3605 to i64
  %18095 = mul nsw i64 %18094, %116
  %18096 = add nsw i64 %18095, %94
  %18097 = getelementptr inbounds i16, i16* %blur_x, i64 %18096
  %18098 = getelementptr inbounds i16, i16* %18097, i64 -32
  %18099 = bitcast i16* %18098 to <16 x i16>*
  %18100 = load <16 x i16>, <16 x i16>* %18099, align 2, !tbaa !399
  %18101 = getelementptr inbounds i16, i16* %18097, i64 -16
  %18102 = bitcast i16* %18101 to <16 x i16>*
  %18103 = load <16 x i16>, <16 x i16>* %18102, align 2, !tbaa !399
  %18104 = zext i32 %.pre-phi to i64
  %18105 = mul nsw i64 %18104, %116
  %18106 = add nsw i64 %18105, %94
  %18107 = getelementptr inbounds i16, i16* %blur_x, i64 %18106
  %18108 = getelementptr inbounds i16, i16* %18107, i64 -32
  %18109 = bitcast i16* %18108 to <16 x i16>*
  %18110 = load <16 x i16>, <16 x i16>* %18109, align 2, !tbaa !399
  %18111 = getelementptr inbounds i16, i16* %18107, i64 -16
  %18112 = bitcast i16* %18111 to <16 x i16>*
  %18113 = load <16 x i16>, <16 x i16>* %18112, align 2, !tbaa !399
  %18114 = zext i32 %.pre-phi3579 to i64
  %18115 = mul nsw i64 %18114, %116
  %18116 = add nsw i64 %18115, %94
  %18117 = getelementptr inbounds i16, i16* %blur_x, i64 %18116
  %18118 = getelementptr inbounds i16, i16* %18117, i64 -32
  %18119 = bitcast i16* %18118 to <16 x i16>*
  %18120 = load <16 x i16>, <16 x i16>* %18119, align 2, !tbaa !399
  %18121 = getelementptr inbounds i16, i16* %18117, i64 -16
  %18122 = bitcast i16* %18121 to <16 x i16>*
  %18123 = load <16 x i16>, <16 x i16>* %18122, align 2, !tbaa !399
  %18124 = mul nsw i64 %18065, %116
  %18125 = add nsw i64 %18124, %94
  %18126 = getelementptr inbounds i16, i16* %blur_x, i64 %18125
  %18127 = getelementptr inbounds i16, i16* %18126, i64 -32
  %18128 = bitcast i16* %18127 to <16 x i16>*
  %18129 = load <16 x i16>, <16 x i16>* %18128, align 2, !tbaa !399
  %18130 = getelementptr inbounds i16, i16* %18126, i64 -16
  %18131 = bitcast i16* %18130 to <16 x i16>*
  %18132 = load <16 x i16>, <16 x i16>* %18131, align 2, !tbaa !399
  %18133 = zext i32 %.pre-phi3583 to i64
  %18134 = mul nsw i64 %18133, %116
  %18135 = add nsw i64 %18134, %94
  %18136 = getelementptr inbounds i16, i16* %blur_x, i64 %18135
  %18137 = getelementptr inbounds i16, i16* %18136, i64 -32
  %18138 = bitcast i16* %18137 to <16 x i16>*
  %18139 = load <16 x i16>, <16 x i16>* %18138, align 2, !tbaa !399
  %18140 = getelementptr inbounds i16, i16* %18136, i64 -16
  %18141 = bitcast i16* %18140 to <16 x i16>*
  %18142 = load <16 x i16>, <16 x i16>* %18141, align 2, !tbaa !399
  %18143 = add <16 x i16> %18090, %18080
  %18144 = add <16 x i16> %18143, %18100
  %18145 = add <16 x i16> %18144, %18110
  %18146 = add <16 x i16> %18145, %18120
  %18147 = add <16 x i16> %18146, %18129
  %18148 = add <16 x i16> %18147, %18139
  %18149 = add <16 x i16> %18093, %18083
  %18150 = add <16 x i16> %18149, %18103
  %18151 = add <16 x i16> %18150, %18113
  %18152 = add <16 x i16> %18151, %18123
  %18153 = add <16 x i16> %18152, %18132
  %18154 = add <16 x i16> %18153, %18142
  %18155 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18148, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18156 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18154, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18157 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18155, <16 x i16> %18148)
  %18158 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18156, <16 x i16> %18154)
  %18159 = shufflevector <16 x i16> %18157, <16 x i16> %18158, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18160 = lshr <32 x i16> %18159, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18161 = shufflevector <32 x i16> %18160, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18162 = sext i32 %a26 to i64
  %18163 = add nsw i64 %18162, 29
  %18164 = mul nsw i64 %18163, %117
  %18165 = add nsw i64 %119, %18164
  %18166 = getelementptr inbounds i16, i16* %66, i64 %18165
  %18167 = getelementptr inbounds i16, i16* %18166, i64 -32
  %18168 = bitcast i16* %18167 to <16 x i16>*
  store <16 x i16> %18161, <16 x i16>* %18168, align 2, !tbaa !401
  %18169 = shufflevector <32 x i16> %18160, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18170 = getelementptr inbounds i16, i16* %18166, i64 -16
  %18171 = bitcast i16* %18170 to <16 x i16>*
  store <16 x i16> %18169, <16 x i16>* %18171, align 2, !tbaa !401
  br label %after_bb767

"for blur_y.s0.x.x.rebased772":                   ; preds = %"for blur_y.s0.x.x.rebased772.preheader", %"consume blur_x779"
  %indvars.iv3476 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased772.preheader" ], [ %indvars.iv.next3477, %"consume blur_x779" ]
  %18172 = add nsw i64 %indvars.iv3476, %101
  %18173 = icmp slt i64 %18172, 1
  %18174 = trunc i64 %18172 to i32
  %18175 = shl nsw i32 %18174, 5
  %18176 = icmp sgt i32 %4, %18175
  %18177 = or i1 %18173, %18176
  br i1 %18177, label %"produce blur_x778", label %"for blur_y.s0.x.x.rebased772.consume blur_x779_crit_edge"

"for blur_y.s0.x.x.rebased772.consume blur_x779_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased772"
  %.pre3662 = shl nsw i64 %18172, 5
  br label %"consume blur_x779"

"end for blur_y.s0.x.x.rebased773":               ; preds = %"consume blur_x779", %after_bb767
  br i1 %102, label %"for blur_y.s0.x.x.rebased780.preheader", label %"end for blur_y.s0.x.x.rebased781", !prof !386

"for blur_y.s0.x.x.rebased780.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased773"
  %18178 = sext i32 %t1744 to i64
  %18179 = zext i32 %.pre-phi3599 to i64
  %18180 = mul nsw i64 %18179, %116
  %18181 = sub nsw i64 %18180, %96
  %18182 = zext i32 %.pre-phi3595 to i64
  %18183 = mul nsw i64 %18182, %116
  %18184 = sub nsw i64 %18183, %96
  %18185 = zext i32 %.pre-phi3605 to i64
  %18186 = mul nsw i64 %18185, %116
  %18187 = sub nsw i64 %18186, %96
  %18188 = zext i32 %.pre-phi to i64
  %18189 = mul nsw i64 %18188, %116
  %18190 = sub nsw i64 %18189, %96
  %18191 = zext i32 %.pre-phi3579 to i64
  %18192 = mul nsw i64 %18191, %116
  %18193 = sub nsw i64 %18192, %96
  %18194 = zext i32 %.pre-phi3587 to i64
  %18195 = mul nsw i64 %18194, %116
  %18196 = sub nsw i64 %18195, %96
  %18197 = zext i32 %.pre-phi3583 to i64
  %18198 = mul nsw i64 %18197, %116
  %18199 = sub nsw i64 %18198, %96
  %18200 = sext i32 %a26 to i64
  %18201 = add nsw i64 %18200, 29
  %18202 = mul nsw i64 %18201, %117
  %18203 = add nsw i64 %18202, %120
  br label %"for blur_y.s0.x.x.rebased780"

"produce blur_x778":                              ; preds = %"for blur_y.s0.x.x.rebased772"
  %t1216 = add nsw i32 %18175, %t2225
  %18204 = sext i32 %t1216 to i64
  %18205 = getelementptr inbounds i16, i16* %read_input, i64 %18204
  %18206 = getelementptr inbounds i16, i16* %18205, i64 1
  %18207 = bitcast i16* %18206 to <16 x i16>*
  %18208 = load <16 x i16>, <16 x i16>* %18207, align 2, !tbaa !396
  %18209 = getelementptr inbounds i16, i16* %18205, i64 17
  %18210 = bitcast i16* %18209 to <16 x i16>*
  %18211 = load <16 x i16>, <16 x i16>* %18210, align 2, !tbaa !396
  %18212 = bitcast i16* %18205 to <16 x i16>*
  %18213 = load <16 x i16>, <16 x i16>* %18212, align 2, !tbaa !396
  %18214 = getelementptr inbounds i16, i16* %18205, i64 16
  %18215 = bitcast i16* %18214 to <16 x i16>*
  %18216 = load <16 x i16>, <16 x i16>* %18215, align 2, !tbaa !396
  %18217 = getelementptr inbounds i16, i16* %18205, i64 2
  %18218 = bitcast i16* %18217 to <16 x i16>*
  %18219 = load <16 x i16>, <16 x i16>* %18218, align 2, !tbaa !396
  %18220 = getelementptr inbounds i16, i16* %18205, i64 18
  %18221 = bitcast i16* %18220 to <16 x i16>*
  %18222 = load <16 x i16>, <16 x i16>* %18221, align 2, !tbaa !396
  %18223 = getelementptr inbounds i16, i16* %18205, i64 3
  %18224 = bitcast i16* %18223 to <16 x i16>*
  %18225 = load <16 x i16>, <16 x i16>* %18224, align 2, !tbaa !396
  %18226 = getelementptr inbounds i16, i16* %18205, i64 19
  %18227 = bitcast i16* %18226 to <16 x i16>*
  %18228 = load <16 x i16>, <16 x i16>* %18227, align 2, !tbaa !396
  %18229 = getelementptr inbounds i16, i16* %18205, i64 4
  %18230 = bitcast i16* %18229 to <16 x i16>*
  %18231 = load <16 x i16>, <16 x i16>* %18230, align 2, !tbaa !396
  %18232 = getelementptr inbounds i16, i16* %18205, i64 20
  %18233 = bitcast i16* %18232 to <16 x i16>*
  %18234 = load <16 x i16>, <16 x i16>* %18233, align 2, !tbaa !396
  %18235 = getelementptr inbounds i16, i16* %18205, i64 6
  %18236 = bitcast i16* %18235 to <16 x i16>*
  %18237 = load <16 x i16>, <16 x i16>* %18236, align 2, !tbaa !396
  %18238 = getelementptr inbounds i16, i16* %18205, i64 22
  %18239 = bitcast i16* %18238 to <16 x i16>*
  %18240 = load <16 x i16>, <16 x i16>* %18239, align 2, !tbaa !396
  %18241 = getelementptr inbounds i16, i16* %18205, i64 5
  %18242 = bitcast i16* %18241 to <16 x i16>*
  %18243 = load <16 x i16>, <16 x i16>* %18242, align 2, !tbaa !396
  %18244 = getelementptr inbounds i16, i16* %18205, i64 21
  %18245 = bitcast i16* %18244 to <16 x i16>*
  %18246 = load <16 x i16>, <16 x i16>* %18245, align 2, !tbaa !396
  %18247 = add <16 x i16> %18213, %18208
  %18248 = add <16 x i16> %18247, %18219
  %18249 = add <16 x i16> %18248, %18225
  %18250 = add <16 x i16> %18249, %18231
  %18251 = add <16 x i16> %18250, %18237
  %18252 = add <16 x i16> %18251, %18243
  %18253 = add <16 x i16> %18216, %18211
  %18254 = add <16 x i16> %18253, %18222
  %18255 = add <16 x i16> %18254, %18228
  %18256 = add <16 x i16> %18255, %18234
  %18257 = add <16 x i16> %18256, %18240
  %18258 = add <16 x i16> %18257, %18246
  %18259 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18252, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18260 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18258, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18261 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18259, <16 x i16> %18252)
  %18262 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18260, <16 x i16> %18258)
  %18263 = shufflevector <16 x i16> %18261, <16 x i16> %18262, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18264 = lshr <32 x i16> %18263, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18265 = shufflevector <32 x i16> %18264, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18266 = shl nsw i64 %18172, 5
  %18267 = add nsw i64 %18266, %17977
  %18268 = getelementptr inbounds i16, i16* %blur_x, i64 %18267
  %18269 = bitcast i16* %18268 to <16 x i16>*
  store <16 x i16> %18265, <16 x i16>* %18269, align 2, !tbaa !399
  %18270 = shufflevector <32 x i16> %18264, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18271 = getelementptr inbounds i16, i16* %18268, i64 16
  %18272 = bitcast i16* %18271 to <16 x i16>*
  store <16 x i16> %18270, <16 x i16>* %18272, align 2, !tbaa !399
  br label %"consume blur_x779"

"consume blur_x779":                              ; preds = %"for blur_y.s0.x.x.rebased772.consume blur_x779_crit_edge", %"produce blur_x778"
  %.pre-phi3663 = phi i64 [ %.pre3662, %"for blur_y.s0.x.x.rebased772.consume blur_x779_crit_edge" ], [ %18266, %"produce blur_x778" ]
  %18273 = add nsw i64 %17980, %.pre-phi3663
  %18274 = getelementptr inbounds i16, i16* %blur_x, i64 %18273
  %18275 = bitcast i16* %18274 to <16 x i16>*
  %18276 = load <16 x i16>, <16 x i16>* %18275, align 2, !tbaa !399
  %18277 = getelementptr inbounds i16, i16* %18274, i64 16
  %18278 = bitcast i16* %18277 to <16 x i16>*
  %18279 = load <16 x i16>, <16 x i16>* %18278, align 2, !tbaa !399
  %18280 = add nsw i64 %17983, %.pre-phi3663
  %18281 = getelementptr inbounds i16, i16* %blur_x, i64 %18280
  %18282 = bitcast i16* %18281 to <16 x i16>*
  %18283 = load <16 x i16>, <16 x i16>* %18282, align 2, !tbaa !399
  %18284 = getelementptr inbounds i16, i16* %18281, i64 16
  %18285 = bitcast i16* %18284 to <16 x i16>*
  %18286 = load <16 x i16>, <16 x i16>* %18285, align 2, !tbaa !399
  %18287 = add nsw i64 %17986, %.pre-phi3663
  %18288 = getelementptr inbounds i16, i16* %blur_x, i64 %18287
  %18289 = bitcast i16* %18288 to <16 x i16>*
  %18290 = load <16 x i16>, <16 x i16>* %18289, align 2, !tbaa !399
  %18291 = getelementptr inbounds i16, i16* %18288, i64 16
  %18292 = bitcast i16* %18291 to <16 x i16>*
  %18293 = load <16 x i16>, <16 x i16>* %18292, align 2, !tbaa !399
  %18294 = add nsw i64 %17989, %.pre-phi3663
  %18295 = getelementptr inbounds i16, i16* %blur_x, i64 %18294
  %18296 = bitcast i16* %18295 to <16 x i16>*
  %18297 = load <16 x i16>, <16 x i16>* %18296, align 2, !tbaa !399
  %18298 = getelementptr inbounds i16, i16* %18295, i64 16
  %18299 = bitcast i16* %18298 to <16 x i16>*
  %18300 = load <16 x i16>, <16 x i16>* %18299, align 2, !tbaa !399
  %18301 = add nsw i64 %17992, %.pre-phi3663
  %18302 = getelementptr inbounds i16, i16* %blur_x, i64 %18301
  %18303 = bitcast i16* %18302 to <16 x i16>*
  %18304 = load <16 x i16>, <16 x i16>* %18303, align 2, !tbaa !399
  %18305 = getelementptr inbounds i16, i16* %18302, i64 16
  %18306 = bitcast i16* %18305 to <16 x i16>*
  %18307 = load <16 x i16>, <16 x i16>* %18306, align 2, !tbaa !399
  %18308 = add nsw i64 %17995, %.pre-phi3663
  %18309 = getelementptr inbounds i16, i16* %blur_x, i64 %18308
  %18310 = bitcast i16* %18309 to <16 x i16>*
  %18311 = load <16 x i16>, <16 x i16>* %18310, align 2, !tbaa !399
  %18312 = getelementptr inbounds i16, i16* %18309, i64 16
  %18313 = bitcast i16* %18312 to <16 x i16>*
  %18314 = load <16 x i16>, <16 x i16>* %18313, align 2, !tbaa !399
  %18315 = add nsw i64 %17998, %.pre-phi3663
  %18316 = getelementptr inbounds i16, i16* %blur_x, i64 %18315
  %18317 = bitcast i16* %18316 to <16 x i16>*
  %18318 = load <16 x i16>, <16 x i16>* %18317, align 2, !tbaa !399
  %18319 = getelementptr inbounds i16, i16* %18316, i64 16
  %18320 = bitcast i16* %18319 to <16 x i16>*
  %18321 = load <16 x i16>, <16 x i16>* %18320, align 2, !tbaa !399
  %18322 = add <16 x i16> %18283, %18276
  %18323 = add <16 x i16> %18322, %18290
  %18324 = add <16 x i16> %18323, %18297
  %18325 = add <16 x i16> %18324, %18304
  %18326 = add <16 x i16> %18325, %18311
  %18327 = add <16 x i16> %18326, %18318
  %18328 = add <16 x i16> %18286, %18279
  %18329 = add <16 x i16> %18328, %18293
  %18330 = add <16 x i16> %18329, %18300
  %18331 = add <16 x i16> %18330, %18307
  %18332 = add <16 x i16> %18331, %18314
  %18333 = add <16 x i16> %18332, %18321
  %18334 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18327, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18335 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18333, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18336 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18334, <16 x i16> %18327)
  %18337 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18335, <16 x i16> %18333)
  %18338 = shufflevector <16 x i16> %18336, <16 x i16> %18337, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18339 = lshr <32 x i16> %18338, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18340 = shufflevector <32 x i16> %18339, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18341 = add nsw i64 %18002, %.pre-phi3663
  %18342 = getelementptr inbounds i16, i16* %66, i64 %18341
  %18343 = bitcast i16* %18342 to <16 x i16>*
  store <16 x i16> %18340, <16 x i16>* %18343, align 2, !tbaa !401
  %18344 = shufflevector <32 x i16> %18339, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18345 = getelementptr inbounds i16, i16* %18342, i64 16
  %18346 = bitcast i16* %18345 to <16 x i16>*
  store <16 x i16> %18344, <16 x i16>* %18346, align 2, !tbaa !401
  %indvars.iv.next3477 = add nuw nsw i64 %indvars.iv3476, 1
  %.not2813 = icmp eq i64 %indvars.iv.next3477, %188
  br i1 %.not2813, label %"end for blur_y.s0.x.x.rebased773", label %"for blur_y.s0.x.x.rebased772"

"for blur_y.s0.x.x.rebased780":                   ; preds = %"for blur_y.s0.x.x.rebased780.preheader", %"consume blur_x788"
  %blur_y.s0.x.x.rebased782 = phi i32 [ %18497, %"consume blur_x788" ], [ 0, %"for blur_y.s0.x.x.rebased780.preheader" ]
  %18347 = add nsw i32 %blur_y.s0.x.x.rebased782, %t1670
  %a322 = shl nsw i32 %18347, 5
  %18348 = icmp sgt i32 %a14, %a322
  %b328 = select i1 %18348, i32 %a322, i32 %a14
  %18349 = icmp slt i32 %18347, 1
  %18350 = icmp sgt i32 %4, %a322
  %18351 = or i1 %18349, %18350
  br i1 %18351, label %"produce blur_x786", label %"consume blur_x788"

"end for blur_y.s0.x.x.rebased781":               ; preds = %"consume blur_x788", %"end for blur_y.s0.x.x.rebased773"
  br i1 %34, label %"produce blur_x792", label %after_bb789

"produce blur_x786":                              ; preds = %"for blur_y.s0.x.x.rebased780"
  %18352 = icmp slt i32 %b328, %4
  %blur_x.s0.x.v1.base.s787 = select i1 %18352, i32 %b328, i32 %4
  %t1221 = add nsw i32 %blur_x.s0.x.v1.base.s787, %t2225
  %18353 = sext i32 %t1221 to i64
  %18354 = getelementptr inbounds i16, i16* %read_input, i64 %18353
  %18355 = getelementptr inbounds i16, i16* %18354, i64 1
  %18356 = bitcast i16* %18355 to <16 x i16>*
  %18357 = load <16 x i16>, <16 x i16>* %18356, align 2, !tbaa !396
  %18358 = getelementptr inbounds i16, i16* %18354, i64 17
  %18359 = bitcast i16* %18358 to <16 x i16>*
  %18360 = load <16 x i16>, <16 x i16>* %18359, align 2, !tbaa !396
  %18361 = bitcast i16* %18354 to <16 x i16>*
  %18362 = load <16 x i16>, <16 x i16>* %18361, align 2, !tbaa !396
  %18363 = getelementptr inbounds i16, i16* %18354, i64 16
  %18364 = bitcast i16* %18363 to <16 x i16>*
  %18365 = load <16 x i16>, <16 x i16>* %18364, align 2, !tbaa !396
  %18366 = getelementptr inbounds i16, i16* %18354, i64 2
  %18367 = bitcast i16* %18366 to <16 x i16>*
  %18368 = load <16 x i16>, <16 x i16>* %18367, align 2, !tbaa !396
  %18369 = getelementptr inbounds i16, i16* %18354, i64 18
  %18370 = bitcast i16* %18369 to <16 x i16>*
  %18371 = load <16 x i16>, <16 x i16>* %18370, align 2, !tbaa !396
  %18372 = getelementptr inbounds i16, i16* %18354, i64 3
  %18373 = bitcast i16* %18372 to <16 x i16>*
  %18374 = load <16 x i16>, <16 x i16>* %18373, align 2, !tbaa !396
  %18375 = getelementptr inbounds i16, i16* %18354, i64 19
  %18376 = bitcast i16* %18375 to <16 x i16>*
  %18377 = load <16 x i16>, <16 x i16>* %18376, align 2, !tbaa !396
  %18378 = getelementptr inbounds i16, i16* %18354, i64 4
  %18379 = bitcast i16* %18378 to <16 x i16>*
  %18380 = load <16 x i16>, <16 x i16>* %18379, align 2, !tbaa !396
  %18381 = getelementptr inbounds i16, i16* %18354, i64 20
  %18382 = bitcast i16* %18381 to <16 x i16>*
  %18383 = load <16 x i16>, <16 x i16>* %18382, align 2, !tbaa !396
  %18384 = getelementptr inbounds i16, i16* %18354, i64 6
  %18385 = bitcast i16* %18384 to <16 x i16>*
  %18386 = load <16 x i16>, <16 x i16>* %18385, align 2, !tbaa !396
  %18387 = getelementptr inbounds i16, i16* %18354, i64 22
  %18388 = bitcast i16* %18387 to <16 x i16>*
  %18389 = load <16 x i16>, <16 x i16>* %18388, align 2, !tbaa !396
  %18390 = getelementptr inbounds i16, i16* %18354, i64 5
  %18391 = bitcast i16* %18390 to <16 x i16>*
  %18392 = load <16 x i16>, <16 x i16>* %18391, align 2, !tbaa !396
  %18393 = getelementptr inbounds i16, i16* %18354, i64 21
  %18394 = bitcast i16* %18393 to <16 x i16>*
  %18395 = load <16 x i16>, <16 x i16>* %18394, align 2, !tbaa !396
  %18396 = add <16 x i16> %18362, %18357
  %18397 = add <16 x i16> %18396, %18368
  %18398 = add <16 x i16> %18397, %18374
  %18399 = add <16 x i16> %18398, %18380
  %18400 = add <16 x i16> %18399, %18386
  %18401 = add <16 x i16> %18400, %18392
  %18402 = add <16 x i16> %18365, %18360
  %18403 = add <16 x i16> %18402, %18371
  %18404 = add <16 x i16> %18403, %18377
  %18405 = add <16 x i16> %18404, %18383
  %18406 = add <16 x i16> %18405, %18389
  %18407 = add <16 x i16> %18406, %18395
  %18408 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18401, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18409 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18407, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18410 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18408, <16 x i16> %18401)
  %18411 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18409, <16 x i16> %18407)
  %18412 = shufflevector <16 x i16> %18410, <16 x i16> %18411, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18413 = lshr <32 x i16> %18412, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18414 = shufflevector <32 x i16> %18413, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18415 = sext i32 %blur_x.s0.x.v1.base.s787 to i64
  %18416 = add nsw i64 %18415, %18178
  %18417 = getelementptr inbounds i16, i16* %blur_x, i64 %18416
  %18418 = bitcast i16* %18417 to <16 x i16>*
  store <16 x i16> %18414, <16 x i16>* %18418, align 2, !tbaa !399
  %18419 = shufflevector <32 x i16> %18413, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18420 = getelementptr inbounds i16, i16* %18417, i64 16
  %18421 = bitcast i16* %18420 to <16 x i16>*
  store <16 x i16> %18419, <16 x i16>* %18421, align 2, !tbaa !399
  br label %"consume blur_x788"

"consume blur_x788":                              ; preds = %"for blur_y.s0.x.x.rebased780", %"produce blur_x786"
  %18422 = sext i32 %b328 to i64
  %18423 = add nsw i64 %18181, %18422
  %18424 = getelementptr inbounds i16, i16* %blur_x, i64 %18423
  %18425 = bitcast i16* %18424 to <16 x i16>*
  %18426 = load <16 x i16>, <16 x i16>* %18425, align 2, !tbaa !399
  %18427 = getelementptr inbounds i16, i16* %18424, i64 16
  %18428 = bitcast i16* %18427 to <16 x i16>*
  %18429 = load <16 x i16>, <16 x i16>* %18428, align 2, !tbaa !399
  %18430 = add nsw i64 %18184, %18422
  %18431 = getelementptr inbounds i16, i16* %blur_x, i64 %18430
  %18432 = bitcast i16* %18431 to <16 x i16>*
  %18433 = load <16 x i16>, <16 x i16>* %18432, align 2, !tbaa !399
  %18434 = getelementptr inbounds i16, i16* %18431, i64 16
  %18435 = bitcast i16* %18434 to <16 x i16>*
  %18436 = load <16 x i16>, <16 x i16>* %18435, align 2, !tbaa !399
  %18437 = add nsw i64 %18187, %18422
  %18438 = getelementptr inbounds i16, i16* %blur_x, i64 %18437
  %18439 = bitcast i16* %18438 to <16 x i16>*
  %18440 = load <16 x i16>, <16 x i16>* %18439, align 2, !tbaa !399
  %18441 = getelementptr inbounds i16, i16* %18438, i64 16
  %18442 = bitcast i16* %18441 to <16 x i16>*
  %18443 = load <16 x i16>, <16 x i16>* %18442, align 2, !tbaa !399
  %18444 = add nsw i64 %18190, %18422
  %18445 = getelementptr inbounds i16, i16* %blur_x, i64 %18444
  %18446 = bitcast i16* %18445 to <16 x i16>*
  %18447 = load <16 x i16>, <16 x i16>* %18446, align 2, !tbaa !399
  %18448 = getelementptr inbounds i16, i16* %18445, i64 16
  %18449 = bitcast i16* %18448 to <16 x i16>*
  %18450 = load <16 x i16>, <16 x i16>* %18449, align 2, !tbaa !399
  %18451 = add nsw i64 %18193, %18422
  %18452 = getelementptr inbounds i16, i16* %blur_x, i64 %18451
  %18453 = bitcast i16* %18452 to <16 x i16>*
  %18454 = load <16 x i16>, <16 x i16>* %18453, align 2, !tbaa !399
  %18455 = getelementptr inbounds i16, i16* %18452, i64 16
  %18456 = bitcast i16* %18455 to <16 x i16>*
  %18457 = load <16 x i16>, <16 x i16>* %18456, align 2, !tbaa !399
  %18458 = add nsw i64 %18196, %18422
  %18459 = getelementptr inbounds i16, i16* %blur_x, i64 %18458
  %18460 = bitcast i16* %18459 to <16 x i16>*
  %18461 = load <16 x i16>, <16 x i16>* %18460, align 2, !tbaa !399
  %18462 = getelementptr inbounds i16, i16* %18459, i64 16
  %18463 = bitcast i16* %18462 to <16 x i16>*
  %18464 = load <16 x i16>, <16 x i16>* %18463, align 2, !tbaa !399
  %18465 = add nsw i64 %18199, %18422
  %18466 = getelementptr inbounds i16, i16* %blur_x, i64 %18465
  %18467 = bitcast i16* %18466 to <16 x i16>*
  %18468 = load <16 x i16>, <16 x i16>* %18467, align 2, !tbaa !399
  %18469 = getelementptr inbounds i16, i16* %18466, i64 16
  %18470 = bitcast i16* %18469 to <16 x i16>*
  %18471 = load <16 x i16>, <16 x i16>* %18470, align 2, !tbaa !399
  %18472 = add <16 x i16> %18433, %18426
  %18473 = add <16 x i16> %18472, %18440
  %18474 = add <16 x i16> %18473, %18447
  %18475 = add <16 x i16> %18474, %18454
  %18476 = add <16 x i16> %18475, %18461
  %18477 = add <16 x i16> %18476, %18468
  %18478 = add <16 x i16> %18436, %18429
  %18479 = add <16 x i16> %18478, %18443
  %18480 = add <16 x i16> %18479, %18450
  %18481 = add <16 x i16> %18480, %18457
  %18482 = add <16 x i16> %18481, %18464
  %18483 = add <16 x i16> %18482, %18471
  %18484 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18477, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18485 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18483, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18486 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18484, <16 x i16> %18477)
  %18487 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18485, <16 x i16> %18483)
  %18488 = shufflevector <16 x i16> %18486, <16 x i16> %18487, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18489 = lshr <32 x i16> %18488, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18490 = shufflevector <32 x i16> %18489, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18491 = add nsw i64 %18203, %18422
  %18492 = getelementptr inbounds i16, i16* %66, i64 %18491
  %18493 = bitcast i16* %18492 to <16 x i16>*
  store <16 x i16> %18490, <16 x i16>* %18493, align 2, !tbaa !401
  %18494 = shufflevector <32 x i16> %18489, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18495 = getelementptr inbounds i16, i16* %18492, i64 16
  %18496 = bitcast i16* %18495 to <16 x i16>*
  store <16 x i16> %18494, <16 x i16>* %18496, align 2, !tbaa !401
  %18497 = add nuw nsw i32 %blur_y.s0.x.x.rebased782, 1
  %.not2812 = icmp eq i32 %18497, %t1727
  br i1 %.not2812, label %"end for blur_y.s0.x.x.rebased781", label %"for blur_y.s0.x.x.rebased780"

after_bb789:                                      ; preds = %"end for blur_y.s0.x.x.rebased781", %"produce blur_x792"
  br i1 %100, label %"for blur_y.s0.x.x.rebased794.preheader", label %"end for blur_y.s0.x.x.rebased795", !prof !386

"for blur_y.s0.x.x.rebased794.preheader":         ; preds = %after_bb789
  %18498 = sext i32 %t1750 to i64
  %18499 = zext i32 %.pre-phi3605 to i64
  %18500 = mul nsw i64 %18499, %116
  %18501 = sub nsw i64 %18500, %96
  %18502 = zext i32 %.pre-phi3599 to i64
  %18503 = mul nsw i64 %18502, %116
  %18504 = sub nsw i64 %18503, %96
  %18505 = zext i32 %.pre-phi to i64
  %18506 = mul nsw i64 %18505, %116
  %18507 = sub nsw i64 %18506, %96
  %18508 = zext i32 %.pre-phi3579 to i64
  %18509 = mul nsw i64 %18508, %116
  %18510 = sub nsw i64 %18509, %96
  %18511 = zext i32 %.pre-phi3583 to i64
  %18512 = mul nsw i64 %18511, %116
  %18513 = sub nsw i64 %18512, %96
  %18514 = zext i32 %.pre-phi3591 to i64
  %18515 = mul nsw i64 %18514, %116
  %18516 = sub nsw i64 %18515, %96
  %18517 = zext i32 %.pre-phi3587 to i64
  %18518 = mul nsw i64 %18517, %116
  %18519 = sub nsw i64 %18518, %96
  %18520 = sext i32 %a26 to i64
  %18521 = add nsw i64 %18520, 30
  %18522 = mul nsw i64 %18521, %117
  %18523 = add nsw i64 %18522, %120
  br label %"for blur_y.s0.x.x.rebased794"

"produce blur_x792":                              ; preds = %"end for blur_y.s0.x.x.rebased781"
  %18524 = getelementptr inbounds i16, i16* %read_input, i64 %179
  %18525 = getelementptr inbounds i16, i16* %18524, i64 -31
  %18526 = bitcast i16* %18525 to <16 x i16>*
  %18527 = load <16 x i16>, <16 x i16>* %18526, align 2, !tbaa !396
  %18528 = getelementptr inbounds i16, i16* %18524, i64 -15
  %18529 = bitcast i16* %18528 to <16 x i16>*
  %18530 = load <16 x i16>, <16 x i16>* %18529, align 2, !tbaa !396
  %18531 = getelementptr inbounds i16, i16* %18524, i64 -32
  %18532 = bitcast i16* %18531 to <16 x i16>*
  %18533 = load <16 x i16>, <16 x i16>* %18532, align 2, !tbaa !396
  %18534 = getelementptr inbounds i16, i16* %18524, i64 -16
  %18535 = bitcast i16* %18534 to <16 x i16>*
  %18536 = load <16 x i16>, <16 x i16>* %18535, align 2, !tbaa !396
  %18537 = getelementptr inbounds i16, i16* %18524, i64 -30
  %18538 = bitcast i16* %18537 to <16 x i16>*
  %18539 = load <16 x i16>, <16 x i16>* %18538, align 2, !tbaa !396
  %18540 = getelementptr inbounds i16, i16* %18524, i64 -14
  %18541 = bitcast i16* %18540 to <16 x i16>*
  %18542 = load <16 x i16>, <16 x i16>* %18541, align 2, !tbaa !396
  %18543 = getelementptr inbounds i16, i16* %18524, i64 -29
  %18544 = bitcast i16* %18543 to <16 x i16>*
  %18545 = load <16 x i16>, <16 x i16>* %18544, align 2, !tbaa !396
  %18546 = getelementptr inbounds i16, i16* %18524, i64 -13
  %18547 = bitcast i16* %18546 to <16 x i16>*
  %18548 = load <16 x i16>, <16 x i16>* %18547, align 2, !tbaa !396
  %18549 = getelementptr inbounds i16, i16* %18524, i64 -28
  %18550 = bitcast i16* %18549 to <16 x i16>*
  %18551 = load <16 x i16>, <16 x i16>* %18550, align 2, !tbaa !396
  %18552 = getelementptr inbounds i16, i16* %18524, i64 -12
  %18553 = bitcast i16* %18552 to <16 x i16>*
  %18554 = load <16 x i16>, <16 x i16>* %18553, align 2, !tbaa !396
  %18555 = getelementptr inbounds i16, i16* %18524, i64 -26
  %18556 = bitcast i16* %18555 to <16 x i16>*
  %18557 = load <16 x i16>, <16 x i16>* %18556, align 2, !tbaa !396
  %18558 = getelementptr inbounds i16, i16* %18524, i64 -10
  %18559 = bitcast i16* %18558 to <16 x i16>*
  %18560 = load <16 x i16>, <16 x i16>* %18559, align 2, !tbaa !396
  %18561 = getelementptr inbounds i16, i16* %18524, i64 -27
  %18562 = bitcast i16* %18561 to <16 x i16>*
  %18563 = load <16 x i16>, <16 x i16>* %18562, align 2, !tbaa !396
  %18564 = getelementptr inbounds i16, i16* %18524, i64 -11
  %18565 = bitcast i16* %18564 to <16 x i16>*
  %18566 = load <16 x i16>, <16 x i16>* %18565, align 2, !tbaa !396
  %18567 = add <16 x i16> %18533, %18527
  %18568 = add <16 x i16> %18567, %18539
  %18569 = add <16 x i16> %18568, %18545
  %18570 = add <16 x i16> %18569, %18551
  %18571 = add <16 x i16> %18570, %18557
  %18572 = add <16 x i16> %18571, %18563
  %18573 = add <16 x i16> %18536, %18530
  %18574 = add <16 x i16> %18573, %18542
  %18575 = add <16 x i16> %18574, %18548
  %18576 = add <16 x i16> %18575, %18554
  %18577 = add <16 x i16> %18576, %18560
  %18578 = add <16 x i16> %18577, %18566
  %18579 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18572, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18580 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18578, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18581 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18579, <16 x i16> %18572)
  %18582 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18580, <16 x i16> %18578)
  %18583 = shufflevector <16 x i16> %18581, <16 x i16> %18582, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18584 = lshr <32 x i16> %18583, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18585 = shufflevector <32 x i16> %18584, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18586 = zext i32 %.pre-phi3591 to i64
  %18587 = mul nsw i64 %97, %18586
  %18588 = add nsw i64 %99, %18587
  %18589 = getelementptr inbounds i16, i16* %blur_x, i64 %18588
  %18590 = getelementptr inbounds i16, i16* %18589, i64 -32
  %18591 = bitcast i16* %18590 to <16 x i16>*
  store <16 x i16> %18585, <16 x i16>* %18591, align 2, !tbaa !399
  %18592 = shufflevector <32 x i16> %18584, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18593 = getelementptr inbounds i16, i16* %18589, i64 -16
  %18594 = bitcast i16* %18593 to <16 x i16>*
  store <16 x i16> %18592, <16 x i16>* %18594, align 2, !tbaa !399
  %18595 = zext i32 %.pre-phi3605 to i64
  %18596 = mul nsw i64 %18595, %116
  %18597 = add nsw i64 %18596, %94
  %18598 = getelementptr inbounds i16, i16* %blur_x, i64 %18597
  %18599 = getelementptr inbounds i16, i16* %18598, i64 -32
  %18600 = bitcast i16* %18599 to <16 x i16>*
  %18601 = load <16 x i16>, <16 x i16>* %18600, align 2, !tbaa !399
  %18602 = getelementptr inbounds i16, i16* %18598, i64 -16
  %18603 = bitcast i16* %18602 to <16 x i16>*
  %18604 = load <16 x i16>, <16 x i16>* %18603, align 2, !tbaa !399
  %18605 = zext i32 %.pre-phi3599 to i64
  %18606 = mul nsw i64 %18605, %116
  %18607 = add nsw i64 %18606, %94
  %18608 = getelementptr inbounds i16, i16* %blur_x, i64 %18607
  %18609 = getelementptr inbounds i16, i16* %18608, i64 -32
  %18610 = bitcast i16* %18609 to <16 x i16>*
  %18611 = load <16 x i16>, <16 x i16>* %18610, align 2, !tbaa !399
  %18612 = getelementptr inbounds i16, i16* %18608, i64 -16
  %18613 = bitcast i16* %18612 to <16 x i16>*
  %18614 = load <16 x i16>, <16 x i16>* %18613, align 2, !tbaa !399
  %18615 = zext i32 %.pre-phi to i64
  %18616 = mul nsw i64 %18615, %116
  %18617 = add nsw i64 %18616, %94
  %18618 = getelementptr inbounds i16, i16* %blur_x, i64 %18617
  %18619 = getelementptr inbounds i16, i16* %18618, i64 -32
  %18620 = bitcast i16* %18619 to <16 x i16>*
  %18621 = load <16 x i16>, <16 x i16>* %18620, align 2, !tbaa !399
  %18622 = getelementptr inbounds i16, i16* %18618, i64 -16
  %18623 = bitcast i16* %18622 to <16 x i16>*
  %18624 = load <16 x i16>, <16 x i16>* %18623, align 2, !tbaa !399
  %18625 = zext i32 %.pre-phi3579 to i64
  %18626 = mul nsw i64 %18625, %116
  %18627 = add nsw i64 %18626, %94
  %18628 = getelementptr inbounds i16, i16* %blur_x, i64 %18627
  %18629 = getelementptr inbounds i16, i16* %18628, i64 -32
  %18630 = bitcast i16* %18629 to <16 x i16>*
  %18631 = load <16 x i16>, <16 x i16>* %18630, align 2, !tbaa !399
  %18632 = getelementptr inbounds i16, i16* %18628, i64 -16
  %18633 = bitcast i16* %18632 to <16 x i16>*
  %18634 = load <16 x i16>, <16 x i16>* %18633, align 2, !tbaa !399
  %18635 = zext i32 %.pre-phi3583 to i64
  %18636 = mul nsw i64 %18635, %116
  %18637 = add nsw i64 %18636, %94
  %18638 = getelementptr inbounds i16, i16* %blur_x, i64 %18637
  %18639 = getelementptr inbounds i16, i16* %18638, i64 -32
  %18640 = bitcast i16* %18639 to <16 x i16>*
  %18641 = load <16 x i16>, <16 x i16>* %18640, align 2, !tbaa !399
  %18642 = getelementptr inbounds i16, i16* %18638, i64 -16
  %18643 = bitcast i16* %18642 to <16 x i16>*
  %18644 = load <16 x i16>, <16 x i16>* %18643, align 2, !tbaa !399
  %18645 = mul nsw i64 %18586, %116
  %18646 = add nsw i64 %18645, %94
  %18647 = getelementptr inbounds i16, i16* %blur_x, i64 %18646
  %18648 = getelementptr inbounds i16, i16* %18647, i64 -32
  %18649 = bitcast i16* %18648 to <16 x i16>*
  %18650 = load <16 x i16>, <16 x i16>* %18649, align 2, !tbaa !399
  %18651 = getelementptr inbounds i16, i16* %18647, i64 -16
  %18652 = bitcast i16* %18651 to <16 x i16>*
  %18653 = load <16 x i16>, <16 x i16>* %18652, align 2, !tbaa !399
  %18654 = zext i32 %.pre-phi3587 to i64
  %18655 = mul nsw i64 %18654, %116
  %18656 = add nsw i64 %18655, %94
  %18657 = getelementptr inbounds i16, i16* %blur_x, i64 %18656
  %18658 = getelementptr inbounds i16, i16* %18657, i64 -32
  %18659 = bitcast i16* %18658 to <16 x i16>*
  %18660 = load <16 x i16>, <16 x i16>* %18659, align 2, !tbaa !399
  %18661 = getelementptr inbounds i16, i16* %18657, i64 -16
  %18662 = bitcast i16* %18661 to <16 x i16>*
  %18663 = load <16 x i16>, <16 x i16>* %18662, align 2, !tbaa !399
  %18664 = add <16 x i16> %18611, %18601
  %18665 = add <16 x i16> %18664, %18621
  %18666 = add <16 x i16> %18665, %18631
  %18667 = add <16 x i16> %18666, %18641
  %18668 = add <16 x i16> %18667, %18650
  %18669 = add <16 x i16> %18668, %18660
  %18670 = add <16 x i16> %18614, %18604
  %18671 = add <16 x i16> %18670, %18624
  %18672 = add <16 x i16> %18671, %18634
  %18673 = add <16 x i16> %18672, %18644
  %18674 = add <16 x i16> %18673, %18653
  %18675 = add <16 x i16> %18674, %18663
  %18676 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18669, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18675, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18678 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18676, <16 x i16> %18669)
  %18679 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18677, <16 x i16> %18675)
  %18680 = shufflevector <16 x i16> %18678, <16 x i16> %18679, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18681 = lshr <32 x i16> %18680, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18682 = shufflevector <32 x i16> %18681, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18683 = sext i32 %a26 to i64
  %18684 = add nsw i64 %18683, 30
  %18685 = mul nsw i64 %18684, %117
  %18686 = add nsw i64 %119, %18685
  %18687 = getelementptr inbounds i16, i16* %66, i64 %18686
  %18688 = getelementptr inbounds i16, i16* %18687, i64 -32
  %18689 = bitcast i16* %18688 to <16 x i16>*
  store <16 x i16> %18682, <16 x i16>* %18689, align 2, !tbaa !401
  %18690 = shufflevector <32 x i16> %18681, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18691 = getelementptr inbounds i16, i16* %18687, i64 -16
  %18692 = bitcast i16* %18691 to <16 x i16>*
  store <16 x i16> %18690, <16 x i16>* %18692, align 2, !tbaa !401
  br label %after_bb789

"for blur_y.s0.x.x.rebased794":                   ; preds = %"for blur_y.s0.x.x.rebased794.preheader", %"consume blur_x801"
  %indvars.iv3479 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased794.preheader" ], [ %indvars.iv.next3480, %"consume blur_x801" ]
  %18693 = add nsw i64 %indvars.iv3479, %101
  %18694 = icmp slt i64 %18693, 1
  %18695 = trunc i64 %18693 to i32
  %18696 = shl nsw i32 %18695, 5
  %18697 = icmp sgt i32 %4, %18696
  %18698 = or i1 %18694, %18697
  br i1 %18698, label %"produce blur_x800", label %"for blur_y.s0.x.x.rebased794.consume blur_x801_crit_edge"

"for blur_y.s0.x.x.rebased794.consume blur_x801_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased794"
  %.pre3664 = shl nsw i64 %18693, 5
  br label %"consume blur_x801"

"end for blur_y.s0.x.x.rebased795":               ; preds = %"consume blur_x801", %after_bb789
  br i1 %102, label %"for blur_y.s0.x.x.rebased802.preheader", label %"end for blur_y.s0.x.x.rebased803", !prof !386

"for blur_y.s0.x.x.rebased802.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased795"
  %18699 = sext i32 %t1750 to i64
  %18700 = zext i32 %.pre-phi3605 to i64
  %18701 = mul nsw i64 %18700, %116
  %18702 = sub nsw i64 %18701, %96
  %18703 = zext i32 %.pre-phi3599 to i64
  %18704 = mul nsw i64 %18703, %116
  %18705 = sub nsw i64 %18704, %96
  %18706 = zext i32 %.pre-phi to i64
  %18707 = mul nsw i64 %18706, %116
  %18708 = sub nsw i64 %18707, %96
  %18709 = zext i32 %.pre-phi3579 to i64
  %18710 = mul nsw i64 %18709, %116
  %18711 = sub nsw i64 %18710, %96
  %18712 = zext i32 %.pre-phi3583 to i64
  %18713 = mul nsw i64 %18712, %116
  %18714 = sub nsw i64 %18713, %96
  %18715 = zext i32 %.pre-phi3591 to i64
  %18716 = mul nsw i64 %18715, %116
  %18717 = sub nsw i64 %18716, %96
  %18718 = zext i32 %.pre-phi3587 to i64
  %18719 = mul nsw i64 %18718, %116
  %18720 = sub nsw i64 %18719, %96
  %18721 = sext i32 %a26 to i64
  %18722 = add nsw i64 %18721, 30
  %18723 = mul nsw i64 %18722, %117
  %18724 = add nsw i64 %18723, %120
  br label %"for blur_y.s0.x.x.rebased802"

"produce blur_x800":                              ; preds = %"for blur_y.s0.x.x.rebased794"
  %t1232 = add nsw i32 %18696, %t2241
  %18725 = sext i32 %t1232 to i64
  %18726 = getelementptr inbounds i16, i16* %read_input, i64 %18725
  %18727 = getelementptr inbounds i16, i16* %18726, i64 1
  %18728 = bitcast i16* %18727 to <16 x i16>*
  %18729 = load <16 x i16>, <16 x i16>* %18728, align 2, !tbaa !396
  %18730 = getelementptr inbounds i16, i16* %18726, i64 17
  %18731 = bitcast i16* %18730 to <16 x i16>*
  %18732 = load <16 x i16>, <16 x i16>* %18731, align 2, !tbaa !396
  %18733 = bitcast i16* %18726 to <16 x i16>*
  %18734 = load <16 x i16>, <16 x i16>* %18733, align 2, !tbaa !396
  %18735 = getelementptr inbounds i16, i16* %18726, i64 16
  %18736 = bitcast i16* %18735 to <16 x i16>*
  %18737 = load <16 x i16>, <16 x i16>* %18736, align 2, !tbaa !396
  %18738 = getelementptr inbounds i16, i16* %18726, i64 2
  %18739 = bitcast i16* %18738 to <16 x i16>*
  %18740 = load <16 x i16>, <16 x i16>* %18739, align 2, !tbaa !396
  %18741 = getelementptr inbounds i16, i16* %18726, i64 18
  %18742 = bitcast i16* %18741 to <16 x i16>*
  %18743 = load <16 x i16>, <16 x i16>* %18742, align 2, !tbaa !396
  %18744 = getelementptr inbounds i16, i16* %18726, i64 3
  %18745 = bitcast i16* %18744 to <16 x i16>*
  %18746 = load <16 x i16>, <16 x i16>* %18745, align 2, !tbaa !396
  %18747 = getelementptr inbounds i16, i16* %18726, i64 19
  %18748 = bitcast i16* %18747 to <16 x i16>*
  %18749 = load <16 x i16>, <16 x i16>* %18748, align 2, !tbaa !396
  %18750 = getelementptr inbounds i16, i16* %18726, i64 4
  %18751 = bitcast i16* %18750 to <16 x i16>*
  %18752 = load <16 x i16>, <16 x i16>* %18751, align 2, !tbaa !396
  %18753 = getelementptr inbounds i16, i16* %18726, i64 20
  %18754 = bitcast i16* %18753 to <16 x i16>*
  %18755 = load <16 x i16>, <16 x i16>* %18754, align 2, !tbaa !396
  %18756 = getelementptr inbounds i16, i16* %18726, i64 6
  %18757 = bitcast i16* %18756 to <16 x i16>*
  %18758 = load <16 x i16>, <16 x i16>* %18757, align 2, !tbaa !396
  %18759 = getelementptr inbounds i16, i16* %18726, i64 22
  %18760 = bitcast i16* %18759 to <16 x i16>*
  %18761 = load <16 x i16>, <16 x i16>* %18760, align 2, !tbaa !396
  %18762 = getelementptr inbounds i16, i16* %18726, i64 5
  %18763 = bitcast i16* %18762 to <16 x i16>*
  %18764 = load <16 x i16>, <16 x i16>* %18763, align 2, !tbaa !396
  %18765 = getelementptr inbounds i16, i16* %18726, i64 21
  %18766 = bitcast i16* %18765 to <16 x i16>*
  %18767 = load <16 x i16>, <16 x i16>* %18766, align 2, !tbaa !396
  %18768 = add <16 x i16> %18734, %18729
  %18769 = add <16 x i16> %18768, %18740
  %18770 = add <16 x i16> %18769, %18746
  %18771 = add <16 x i16> %18770, %18752
  %18772 = add <16 x i16> %18771, %18758
  %18773 = add <16 x i16> %18772, %18764
  %18774 = add <16 x i16> %18737, %18732
  %18775 = add <16 x i16> %18774, %18743
  %18776 = add <16 x i16> %18775, %18749
  %18777 = add <16 x i16> %18776, %18755
  %18778 = add <16 x i16> %18777, %18761
  %18779 = add <16 x i16> %18778, %18767
  %18780 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18773, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18781 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18779, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18782 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18780, <16 x i16> %18773)
  %18783 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18781, <16 x i16> %18779)
  %18784 = shufflevector <16 x i16> %18782, <16 x i16> %18783, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18785 = lshr <32 x i16> %18784, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18786 = shufflevector <32 x i16> %18785, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18787 = shl nsw i64 %18693, 5
  %18788 = add nsw i64 %18787, %18498
  %18789 = getelementptr inbounds i16, i16* %blur_x, i64 %18788
  %18790 = bitcast i16* %18789 to <16 x i16>*
  store <16 x i16> %18786, <16 x i16>* %18790, align 2, !tbaa !399
  %18791 = shufflevector <32 x i16> %18785, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18792 = getelementptr inbounds i16, i16* %18789, i64 16
  %18793 = bitcast i16* %18792 to <16 x i16>*
  store <16 x i16> %18791, <16 x i16>* %18793, align 2, !tbaa !399
  br label %"consume blur_x801"

"consume blur_x801":                              ; preds = %"for blur_y.s0.x.x.rebased794.consume blur_x801_crit_edge", %"produce blur_x800"
  %.pre-phi3665 = phi i64 [ %.pre3664, %"for blur_y.s0.x.x.rebased794.consume blur_x801_crit_edge" ], [ %18787, %"produce blur_x800" ]
  %18794 = add nsw i64 %18501, %.pre-phi3665
  %18795 = getelementptr inbounds i16, i16* %blur_x, i64 %18794
  %18796 = bitcast i16* %18795 to <16 x i16>*
  %18797 = load <16 x i16>, <16 x i16>* %18796, align 2, !tbaa !399
  %18798 = getelementptr inbounds i16, i16* %18795, i64 16
  %18799 = bitcast i16* %18798 to <16 x i16>*
  %18800 = load <16 x i16>, <16 x i16>* %18799, align 2, !tbaa !399
  %18801 = add nsw i64 %18504, %.pre-phi3665
  %18802 = getelementptr inbounds i16, i16* %blur_x, i64 %18801
  %18803 = bitcast i16* %18802 to <16 x i16>*
  %18804 = load <16 x i16>, <16 x i16>* %18803, align 2, !tbaa !399
  %18805 = getelementptr inbounds i16, i16* %18802, i64 16
  %18806 = bitcast i16* %18805 to <16 x i16>*
  %18807 = load <16 x i16>, <16 x i16>* %18806, align 2, !tbaa !399
  %18808 = add nsw i64 %18507, %.pre-phi3665
  %18809 = getelementptr inbounds i16, i16* %blur_x, i64 %18808
  %18810 = bitcast i16* %18809 to <16 x i16>*
  %18811 = load <16 x i16>, <16 x i16>* %18810, align 2, !tbaa !399
  %18812 = getelementptr inbounds i16, i16* %18809, i64 16
  %18813 = bitcast i16* %18812 to <16 x i16>*
  %18814 = load <16 x i16>, <16 x i16>* %18813, align 2, !tbaa !399
  %18815 = add nsw i64 %18510, %.pre-phi3665
  %18816 = getelementptr inbounds i16, i16* %blur_x, i64 %18815
  %18817 = bitcast i16* %18816 to <16 x i16>*
  %18818 = load <16 x i16>, <16 x i16>* %18817, align 2, !tbaa !399
  %18819 = getelementptr inbounds i16, i16* %18816, i64 16
  %18820 = bitcast i16* %18819 to <16 x i16>*
  %18821 = load <16 x i16>, <16 x i16>* %18820, align 2, !tbaa !399
  %18822 = add nsw i64 %18513, %.pre-phi3665
  %18823 = getelementptr inbounds i16, i16* %blur_x, i64 %18822
  %18824 = bitcast i16* %18823 to <16 x i16>*
  %18825 = load <16 x i16>, <16 x i16>* %18824, align 2, !tbaa !399
  %18826 = getelementptr inbounds i16, i16* %18823, i64 16
  %18827 = bitcast i16* %18826 to <16 x i16>*
  %18828 = load <16 x i16>, <16 x i16>* %18827, align 2, !tbaa !399
  %18829 = add nsw i64 %18516, %.pre-phi3665
  %18830 = getelementptr inbounds i16, i16* %blur_x, i64 %18829
  %18831 = bitcast i16* %18830 to <16 x i16>*
  %18832 = load <16 x i16>, <16 x i16>* %18831, align 2, !tbaa !399
  %18833 = getelementptr inbounds i16, i16* %18830, i64 16
  %18834 = bitcast i16* %18833 to <16 x i16>*
  %18835 = load <16 x i16>, <16 x i16>* %18834, align 2, !tbaa !399
  %18836 = add nsw i64 %18519, %.pre-phi3665
  %18837 = getelementptr inbounds i16, i16* %blur_x, i64 %18836
  %18838 = bitcast i16* %18837 to <16 x i16>*
  %18839 = load <16 x i16>, <16 x i16>* %18838, align 2, !tbaa !399
  %18840 = getelementptr inbounds i16, i16* %18837, i64 16
  %18841 = bitcast i16* %18840 to <16 x i16>*
  %18842 = load <16 x i16>, <16 x i16>* %18841, align 2, !tbaa !399
  %18843 = add <16 x i16> %18804, %18797
  %18844 = add <16 x i16> %18843, %18811
  %18845 = add <16 x i16> %18844, %18818
  %18846 = add <16 x i16> %18845, %18825
  %18847 = add <16 x i16> %18846, %18832
  %18848 = add <16 x i16> %18847, %18839
  %18849 = add <16 x i16> %18807, %18800
  %18850 = add <16 x i16> %18849, %18814
  %18851 = add <16 x i16> %18850, %18821
  %18852 = add <16 x i16> %18851, %18828
  %18853 = add <16 x i16> %18852, %18835
  %18854 = add <16 x i16> %18853, %18842
  %18855 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18848, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18856 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18854, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18857 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18855, <16 x i16> %18848)
  %18858 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18856, <16 x i16> %18854)
  %18859 = shufflevector <16 x i16> %18857, <16 x i16> %18858, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18860 = lshr <32 x i16> %18859, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18861 = shufflevector <32 x i16> %18860, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18862 = add nsw i64 %18523, %.pre-phi3665
  %18863 = getelementptr inbounds i16, i16* %66, i64 %18862
  %18864 = bitcast i16* %18863 to <16 x i16>*
  store <16 x i16> %18861, <16 x i16>* %18864, align 2, !tbaa !401
  %18865 = shufflevector <32 x i16> %18860, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18866 = getelementptr inbounds i16, i16* %18863, i64 16
  %18867 = bitcast i16* %18866 to <16 x i16>*
  store <16 x i16> %18865, <16 x i16>* %18867, align 2, !tbaa !401
  %indvars.iv.next3480 = add nuw nsw i64 %indvars.iv3479, 1
  %.not2811 = icmp eq i64 %indvars.iv.next3480, %188
  br i1 %.not2811, label %"end for blur_y.s0.x.x.rebased795", label %"for blur_y.s0.x.x.rebased794"

"for blur_y.s0.x.x.rebased802":                   ; preds = %"for blur_y.s0.x.x.rebased802.preheader", %"consume blur_x810"
  %blur_y.s0.x.x.rebased804 = phi i32 [ %19018, %"consume blur_x810" ], [ 0, %"for blur_y.s0.x.x.rebased802.preheader" ]
  %18868 = add nsw i32 %blur_y.s0.x.x.rebased804, %t1670
  %a329 = shl nsw i32 %18868, 5
  %18869 = icmp sgt i32 %a14, %a329
  %b335 = select i1 %18869, i32 %a329, i32 %a14
  %18870 = icmp slt i32 %18868, 1
  %18871 = icmp sgt i32 %4, %a329
  %18872 = or i1 %18870, %18871
  br i1 %18872, label %"produce blur_x808", label %"consume blur_x810"

"end for blur_y.s0.x.x.rebased803":               ; preds = %"consume blur_x810", %"end for blur_y.s0.x.x.rebased795"
  br i1 %34, label %"produce blur_x814", label %after_bb811

"produce blur_x808":                              ; preds = %"for blur_y.s0.x.x.rebased802"
  %18873 = icmp slt i32 %b335, %4
  %blur_x.s0.x.v1.base.s809 = select i1 %18873, i32 %b335, i32 %4
  %t1237 = add nsw i32 %blur_x.s0.x.v1.base.s809, %t2241
  %18874 = sext i32 %t1237 to i64
  %18875 = getelementptr inbounds i16, i16* %read_input, i64 %18874
  %18876 = getelementptr inbounds i16, i16* %18875, i64 1
  %18877 = bitcast i16* %18876 to <16 x i16>*
  %18878 = load <16 x i16>, <16 x i16>* %18877, align 2, !tbaa !396
  %18879 = getelementptr inbounds i16, i16* %18875, i64 17
  %18880 = bitcast i16* %18879 to <16 x i16>*
  %18881 = load <16 x i16>, <16 x i16>* %18880, align 2, !tbaa !396
  %18882 = bitcast i16* %18875 to <16 x i16>*
  %18883 = load <16 x i16>, <16 x i16>* %18882, align 2, !tbaa !396
  %18884 = getelementptr inbounds i16, i16* %18875, i64 16
  %18885 = bitcast i16* %18884 to <16 x i16>*
  %18886 = load <16 x i16>, <16 x i16>* %18885, align 2, !tbaa !396
  %18887 = getelementptr inbounds i16, i16* %18875, i64 2
  %18888 = bitcast i16* %18887 to <16 x i16>*
  %18889 = load <16 x i16>, <16 x i16>* %18888, align 2, !tbaa !396
  %18890 = getelementptr inbounds i16, i16* %18875, i64 18
  %18891 = bitcast i16* %18890 to <16 x i16>*
  %18892 = load <16 x i16>, <16 x i16>* %18891, align 2, !tbaa !396
  %18893 = getelementptr inbounds i16, i16* %18875, i64 3
  %18894 = bitcast i16* %18893 to <16 x i16>*
  %18895 = load <16 x i16>, <16 x i16>* %18894, align 2, !tbaa !396
  %18896 = getelementptr inbounds i16, i16* %18875, i64 19
  %18897 = bitcast i16* %18896 to <16 x i16>*
  %18898 = load <16 x i16>, <16 x i16>* %18897, align 2, !tbaa !396
  %18899 = getelementptr inbounds i16, i16* %18875, i64 4
  %18900 = bitcast i16* %18899 to <16 x i16>*
  %18901 = load <16 x i16>, <16 x i16>* %18900, align 2, !tbaa !396
  %18902 = getelementptr inbounds i16, i16* %18875, i64 20
  %18903 = bitcast i16* %18902 to <16 x i16>*
  %18904 = load <16 x i16>, <16 x i16>* %18903, align 2, !tbaa !396
  %18905 = getelementptr inbounds i16, i16* %18875, i64 6
  %18906 = bitcast i16* %18905 to <16 x i16>*
  %18907 = load <16 x i16>, <16 x i16>* %18906, align 2, !tbaa !396
  %18908 = getelementptr inbounds i16, i16* %18875, i64 22
  %18909 = bitcast i16* %18908 to <16 x i16>*
  %18910 = load <16 x i16>, <16 x i16>* %18909, align 2, !tbaa !396
  %18911 = getelementptr inbounds i16, i16* %18875, i64 5
  %18912 = bitcast i16* %18911 to <16 x i16>*
  %18913 = load <16 x i16>, <16 x i16>* %18912, align 2, !tbaa !396
  %18914 = getelementptr inbounds i16, i16* %18875, i64 21
  %18915 = bitcast i16* %18914 to <16 x i16>*
  %18916 = load <16 x i16>, <16 x i16>* %18915, align 2, !tbaa !396
  %18917 = add <16 x i16> %18883, %18878
  %18918 = add <16 x i16> %18917, %18889
  %18919 = add <16 x i16> %18918, %18895
  %18920 = add <16 x i16> %18919, %18901
  %18921 = add <16 x i16> %18920, %18907
  %18922 = add <16 x i16> %18921, %18913
  %18923 = add <16 x i16> %18886, %18881
  %18924 = add <16 x i16> %18923, %18892
  %18925 = add <16 x i16> %18924, %18898
  %18926 = add <16 x i16> %18925, %18904
  %18927 = add <16 x i16> %18926, %18910
  %18928 = add <16 x i16> %18927, %18916
  %18929 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18922, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18930 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18928, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18931 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18929, <16 x i16> %18922)
  %18932 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18930, <16 x i16> %18928)
  %18933 = shufflevector <16 x i16> %18931, <16 x i16> %18932, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18934 = lshr <32 x i16> %18933, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18935 = shufflevector <32 x i16> %18934, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18936 = sext i32 %blur_x.s0.x.v1.base.s809 to i64
  %18937 = add nsw i64 %18936, %18699
  %18938 = getelementptr inbounds i16, i16* %blur_x, i64 %18937
  %18939 = bitcast i16* %18938 to <16 x i16>*
  store <16 x i16> %18935, <16 x i16>* %18939, align 2, !tbaa !399
  %18940 = shufflevector <32 x i16> %18934, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18941 = getelementptr inbounds i16, i16* %18938, i64 16
  %18942 = bitcast i16* %18941 to <16 x i16>*
  store <16 x i16> %18940, <16 x i16>* %18942, align 2, !tbaa !399
  br label %"consume blur_x810"

"consume blur_x810":                              ; preds = %"for blur_y.s0.x.x.rebased802", %"produce blur_x808"
  %18943 = sext i32 %b335 to i64
  %18944 = add nsw i64 %18702, %18943
  %18945 = getelementptr inbounds i16, i16* %blur_x, i64 %18944
  %18946 = bitcast i16* %18945 to <16 x i16>*
  %18947 = load <16 x i16>, <16 x i16>* %18946, align 2, !tbaa !399
  %18948 = getelementptr inbounds i16, i16* %18945, i64 16
  %18949 = bitcast i16* %18948 to <16 x i16>*
  %18950 = load <16 x i16>, <16 x i16>* %18949, align 2, !tbaa !399
  %18951 = add nsw i64 %18705, %18943
  %18952 = getelementptr inbounds i16, i16* %blur_x, i64 %18951
  %18953 = bitcast i16* %18952 to <16 x i16>*
  %18954 = load <16 x i16>, <16 x i16>* %18953, align 2, !tbaa !399
  %18955 = getelementptr inbounds i16, i16* %18952, i64 16
  %18956 = bitcast i16* %18955 to <16 x i16>*
  %18957 = load <16 x i16>, <16 x i16>* %18956, align 2, !tbaa !399
  %18958 = add nsw i64 %18708, %18943
  %18959 = getelementptr inbounds i16, i16* %blur_x, i64 %18958
  %18960 = bitcast i16* %18959 to <16 x i16>*
  %18961 = load <16 x i16>, <16 x i16>* %18960, align 2, !tbaa !399
  %18962 = getelementptr inbounds i16, i16* %18959, i64 16
  %18963 = bitcast i16* %18962 to <16 x i16>*
  %18964 = load <16 x i16>, <16 x i16>* %18963, align 2, !tbaa !399
  %18965 = add nsw i64 %18711, %18943
  %18966 = getelementptr inbounds i16, i16* %blur_x, i64 %18965
  %18967 = bitcast i16* %18966 to <16 x i16>*
  %18968 = load <16 x i16>, <16 x i16>* %18967, align 2, !tbaa !399
  %18969 = getelementptr inbounds i16, i16* %18966, i64 16
  %18970 = bitcast i16* %18969 to <16 x i16>*
  %18971 = load <16 x i16>, <16 x i16>* %18970, align 2, !tbaa !399
  %18972 = add nsw i64 %18714, %18943
  %18973 = getelementptr inbounds i16, i16* %blur_x, i64 %18972
  %18974 = bitcast i16* %18973 to <16 x i16>*
  %18975 = load <16 x i16>, <16 x i16>* %18974, align 2, !tbaa !399
  %18976 = getelementptr inbounds i16, i16* %18973, i64 16
  %18977 = bitcast i16* %18976 to <16 x i16>*
  %18978 = load <16 x i16>, <16 x i16>* %18977, align 2, !tbaa !399
  %18979 = add nsw i64 %18717, %18943
  %18980 = getelementptr inbounds i16, i16* %blur_x, i64 %18979
  %18981 = bitcast i16* %18980 to <16 x i16>*
  %18982 = load <16 x i16>, <16 x i16>* %18981, align 2, !tbaa !399
  %18983 = getelementptr inbounds i16, i16* %18980, i64 16
  %18984 = bitcast i16* %18983 to <16 x i16>*
  %18985 = load <16 x i16>, <16 x i16>* %18984, align 2, !tbaa !399
  %18986 = add nsw i64 %18720, %18943
  %18987 = getelementptr inbounds i16, i16* %blur_x, i64 %18986
  %18988 = bitcast i16* %18987 to <16 x i16>*
  %18989 = load <16 x i16>, <16 x i16>* %18988, align 2, !tbaa !399
  %18990 = getelementptr inbounds i16, i16* %18987, i64 16
  %18991 = bitcast i16* %18990 to <16 x i16>*
  %18992 = load <16 x i16>, <16 x i16>* %18991, align 2, !tbaa !399
  %18993 = add <16 x i16> %18954, %18947
  %18994 = add <16 x i16> %18993, %18961
  %18995 = add <16 x i16> %18994, %18968
  %18996 = add <16 x i16> %18995, %18975
  %18997 = add <16 x i16> %18996, %18982
  %18998 = add <16 x i16> %18997, %18989
  %18999 = add <16 x i16> %18957, %18950
  %19000 = add <16 x i16> %18999, %18964
  %19001 = add <16 x i16> %19000, %18971
  %19002 = add <16 x i16> %19001, %18978
  %19003 = add <16 x i16> %19002, %18985
  %19004 = add <16 x i16> %19003, %18992
  %19005 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18998, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19006 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19004, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19007 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19005, <16 x i16> %18998)
  %19008 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19006, <16 x i16> %19004)
  %19009 = shufflevector <16 x i16> %19007, <16 x i16> %19008, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19010 = lshr <32 x i16> %19009, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19011 = shufflevector <32 x i16> %19010, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19012 = add nsw i64 %18724, %18943
  %19013 = getelementptr inbounds i16, i16* %66, i64 %19012
  %19014 = bitcast i16* %19013 to <16 x i16>*
  store <16 x i16> %19011, <16 x i16>* %19014, align 2, !tbaa !401
  %19015 = shufflevector <32 x i16> %19010, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19016 = getelementptr inbounds i16, i16* %19013, i64 16
  %19017 = bitcast i16* %19016 to <16 x i16>*
  store <16 x i16> %19015, <16 x i16>* %19017, align 2, !tbaa !401
  %19018 = add nuw nsw i32 %blur_y.s0.x.x.rebased804, 1
  %.not2810 = icmp eq i32 %19018, %t1727
  br i1 %.not2810, label %"end for blur_y.s0.x.x.rebased803", label %"for blur_y.s0.x.x.rebased802"

after_bb811:                                      ; preds = %"end for blur_y.s0.x.x.rebased803", %"produce blur_x814"
  br i1 %100, label %"for blur_y.s0.x.x.rebased816.preheader", label %"end for blur_y.s0.x.x.rebased817", !prof !386

"for blur_y.s0.x.x.rebased816.preheader":         ; preds = %after_bb811
  %19019 = sext i32 %t1756 to i64
  %19020 = zext i32 %.pre-phi to i64
  %19021 = mul nsw i64 %19020, %116
  %19022 = sub nsw i64 %19021, %96
  %19023 = zext i32 %.pre-phi3605 to i64
  %19024 = mul nsw i64 %19023, %116
  %19025 = sub nsw i64 %19024, %96
  %19026 = zext i32 %.pre-phi3579 to i64
  %19027 = mul nsw i64 %19026, %116
  %19028 = sub nsw i64 %19027, %96
  %19029 = zext i32 %.pre-phi3583 to i64
  %19030 = mul nsw i64 %19029, %116
  %19031 = sub nsw i64 %19030, %96
  %19032 = zext i32 %.pre-phi3587 to i64
  %19033 = mul nsw i64 %19032, %116
  %19034 = sub nsw i64 %19033, %96
  %19035 = zext i32 %.pre-phi3595 to i64
  %19036 = mul nsw i64 %19035, %116
  %19037 = sub nsw i64 %19036, %96
  %19038 = zext i32 %.pre-phi3591 to i64
  %19039 = mul nsw i64 %19038, %116
  %19040 = sub nsw i64 %19039, %96
  %19041 = sext i32 %a26 to i64
  %19042 = add nsw i64 %19041, 31
  %19043 = mul nsw i64 %19042, %117
  %19044 = add nsw i64 %19043, %120
  br label %"for blur_y.s0.x.x.rebased816"

"produce blur_x814":                              ; preds = %"end for blur_y.s0.x.x.rebased803"
  %19045 = getelementptr inbounds i16, i16* %read_input, i64 %181
  %19046 = getelementptr inbounds i16, i16* %19045, i64 -31
  %19047 = bitcast i16* %19046 to <16 x i16>*
  %19048 = load <16 x i16>, <16 x i16>* %19047, align 2, !tbaa !396
  %19049 = getelementptr inbounds i16, i16* %19045, i64 -15
  %19050 = bitcast i16* %19049 to <16 x i16>*
  %19051 = load <16 x i16>, <16 x i16>* %19050, align 2, !tbaa !396
  %19052 = getelementptr inbounds i16, i16* %19045, i64 -32
  %19053 = bitcast i16* %19052 to <16 x i16>*
  %19054 = load <16 x i16>, <16 x i16>* %19053, align 2, !tbaa !396
  %19055 = getelementptr inbounds i16, i16* %19045, i64 -16
  %19056 = bitcast i16* %19055 to <16 x i16>*
  %19057 = load <16 x i16>, <16 x i16>* %19056, align 2, !tbaa !396
  %19058 = getelementptr inbounds i16, i16* %19045, i64 -30
  %19059 = bitcast i16* %19058 to <16 x i16>*
  %19060 = load <16 x i16>, <16 x i16>* %19059, align 2, !tbaa !396
  %19061 = getelementptr inbounds i16, i16* %19045, i64 -14
  %19062 = bitcast i16* %19061 to <16 x i16>*
  %19063 = load <16 x i16>, <16 x i16>* %19062, align 2, !tbaa !396
  %19064 = getelementptr inbounds i16, i16* %19045, i64 -29
  %19065 = bitcast i16* %19064 to <16 x i16>*
  %19066 = load <16 x i16>, <16 x i16>* %19065, align 2, !tbaa !396
  %19067 = getelementptr inbounds i16, i16* %19045, i64 -13
  %19068 = bitcast i16* %19067 to <16 x i16>*
  %19069 = load <16 x i16>, <16 x i16>* %19068, align 2, !tbaa !396
  %19070 = getelementptr inbounds i16, i16* %19045, i64 -28
  %19071 = bitcast i16* %19070 to <16 x i16>*
  %19072 = load <16 x i16>, <16 x i16>* %19071, align 2, !tbaa !396
  %19073 = getelementptr inbounds i16, i16* %19045, i64 -12
  %19074 = bitcast i16* %19073 to <16 x i16>*
  %19075 = load <16 x i16>, <16 x i16>* %19074, align 2, !tbaa !396
  %19076 = getelementptr inbounds i16, i16* %19045, i64 -26
  %19077 = bitcast i16* %19076 to <16 x i16>*
  %19078 = load <16 x i16>, <16 x i16>* %19077, align 2, !tbaa !396
  %19079 = getelementptr inbounds i16, i16* %19045, i64 -10
  %19080 = bitcast i16* %19079 to <16 x i16>*
  %19081 = load <16 x i16>, <16 x i16>* %19080, align 2, !tbaa !396
  %19082 = getelementptr inbounds i16, i16* %19045, i64 -27
  %19083 = bitcast i16* %19082 to <16 x i16>*
  %19084 = load <16 x i16>, <16 x i16>* %19083, align 2, !tbaa !396
  %19085 = getelementptr inbounds i16, i16* %19045, i64 -11
  %19086 = bitcast i16* %19085 to <16 x i16>*
  %19087 = load <16 x i16>, <16 x i16>* %19086, align 2, !tbaa !396
  %19088 = add <16 x i16> %19054, %19048
  %19089 = add <16 x i16> %19088, %19060
  %19090 = add <16 x i16> %19089, %19066
  %19091 = add <16 x i16> %19090, %19072
  %19092 = add <16 x i16> %19091, %19078
  %19093 = add <16 x i16> %19092, %19084
  %19094 = add <16 x i16> %19057, %19051
  %19095 = add <16 x i16> %19094, %19063
  %19096 = add <16 x i16> %19095, %19069
  %19097 = add <16 x i16> %19096, %19075
  %19098 = add <16 x i16> %19097, %19081
  %19099 = add <16 x i16> %19098, %19087
  %19100 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19093, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19101 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19099, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19102 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19100, <16 x i16> %19093)
  %19103 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19101, <16 x i16> %19099)
  %19104 = shufflevector <16 x i16> %19102, <16 x i16> %19103, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19105 = lshr <32 x i16> %19104, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19106 = shufflevector <32 x i16> %19105, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19107 = zext i32 %.pre-phi3595 to i64
  %19108 = mul nsw i64 %97, %19107
  %19109 = add nsw i64 %99, %19108
  %19110 = getelementptr inbounds i16, i16* %blur_x, i64 %19109
  %19111 = getelementptr inbounds i16, i16* %19110, i64 -32
  %19112 = bitcast i16* %19111 to <16 x i16>*
  store <16 x i16> %19106, <16 x i16>* %19112, align 2, !tbaa !399
  %19113 = shufflevector <32 x i16> %19105, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19114 = getelementptr inbounds i16, i16* %19110, i64 -16
  %19115 = bitcast i16* %19114 to <16 x i16>*
  store <16 x i16> %19113, <16 x i16>* %19115, align 2, !tbaa !399
  %19116 = zext i32 %.pre-phi to i64
  %19117 = mul nsw i64 %19116, %116
  %19118 = add nsw i64 %19117, %94
  %19119 = getelementptr inbounds i16, i16* %blur_x, i64 %19118
  %19120 = getelementptr inbounds i16, i16* %19119, i64 -32
  %19121 = bitcast i16* %19120 to <16 x i16>*
  %19122 = load <16 x i16>, <16 x i16>* %19121, align 2, !tbaa !399
  %19123 = getelementptr inbounds i16, i16* %19119, i64 -16
  %19124 = bitcast i16* %19123 to <16 x i16>*
  %19125 = load <16 x i16>, <16 x i16>* %19124, align 2, !tbaa !399
  %19126 = zext i32 %.pre-phi3605 to i64
  %19127 = mul nsw i64 %19126, %116
  %19128 = add nsw i64 %19127, %94
  %19129 = getelementptr inbounds i16, i16* %blur_x, i64 %19128
  %19130 = getelementptr inbounds i16, i16* %19129, i64 -32
  %19131 = bitcast i16* %19130 to <16 x i16>*
  %19132 = load <16 x i16>, <16 x i16>* %19131, align 2, !tbaa !399
  %19133 = getelementptr inbounds i16, i16* %19129, i64 -16
  %19134 = bitcast i16* %19133 to <16 x i16>*
  %19135 = load <16 x i16>, <16 x i16>* %19134, align 2, !tbaa !399
  %19136 = zext i32 %.pre-phi3579 to i64
  %19137 = mul nsw i64 %19136, %116
  %19138 = add nsw i64 %19137, %94
  %19139 = getelementptr inbounds i16, i16* %blur_x, i64 %19138
  %19140 = getelementptr inbounds i16, i16* %19139, i64 -32
  %19141 = bitcast i16* %19140 to <16 x i16>*
  %19142 = load <16 x i16>, <16 x i16>* %19141, align 2, !tbaa !399
  %19143 = getelementptr inbounds i16, i16* %19139, i64 -16
  %19144 = bitcast i16* %19143 to <16 x i16>*
  %19145 = load <16 x i16>, <16 x i16>* %19144, align 2, !tbaa !399
  %19146 = zext i32 %.pre-phi3583 to i64
  %19147 = mul nsw i64 %19146, %116
  %19148 = add nsw i64 %19147, %94
  %19149 = getelementptr inbounds i16, i16* %blur_x, i64 %19148
  %19150 = getelementptr inbounds i16, i16* %19149, i64 -32
  %19151 = bitcast i16* %19150 to <16 x i16>*
  %19152 = load <16 x i16>, <16 x i16>* %19151, align 2, !tbaa !399
  %19153 = getelementptr inbounds i16, i16* %19149, i64 -16
  %19154 = bitcast i16* %19153 to <16 x i16>*
  %19155 = load <16 x i16>, <16 x i16>* %19154, align 2, !tbaa !399
  %19156 = zext i32 %.pre-phi3587 to i64
  %19157 = mul nsw i64 %19156, %116
  %19158 = add nsw i64 %19157, %94
  %19159 = getelementptr inbounds i16, i16* %blur_x, i64 %19158
  %19160 = getelementptr inbounds i16, i16* %19159, i64 -32
  %19161 = bitcast i16* %19160 to <16 x i16>*
  %19162 = load <16 x i16>, <16 x i16>* %19161, align 2, !tbaa !399
  %19163 = getelementptr inbounds i16, i16* %19159, i64 -16
  %19164 = bitcast i16* %19163 to <16 x i16>*
  %19165 = load <16 x i16>, <16 x i16>* %19164, align 2, !tbaa !399
  %19166 = mul nsw i64 %19107, %116
  %19167 = add nsw i64 %19166, %94
  %19168 = getelementptr inbounds i16, i16* %blur_x, i64 %19167
  %19169 = getelementptr inbounds i16, i16* %19168, i64 -32
  %19170 = bitcast i16* %19169 to <16 x i16>*
  %19171 = load <16 x i16>, <16 x i16>* %19170, align 2, !tbaa !399
  %19172 = getelementptr inbounds i16, i16* %19168, i64 -16
  %19173 = bitcast i16* %19172 to <16 x i16>*
  %19174 = load <16 x i16>, <16 x i16>* %19173, align 2, !tbaa !399
  %19175 = zext i32 %.pre-phi3591 to i64
  %19176 = mul nsw i64 %19175, %116
  %19177 = add nsw i64 %19176, %94
  %19178 = getelementptr inbounds i16, i16* %blur_x, i64 %19177
  %19179 = getelementptr inbounds i16, i16* %19178, i64 -32
  %19180 = bitcast i16* %19179 to <16 x i16>*
  %19181 = load <16 x i16>, <16 x i16>* %19180, align 2, !tbaa !399
  %19182 = getelementptr inbounds i16, i16* %19178, i64 -16
  %19183 = bitcast i16* %19182 to <16 x i16>*
  %19184 = load <16 x i16>, <16 x i16>* %19183, align 2, !tbaa !399
  %19185 = add <16 x i16> %19132, %19122
  %19186 = add <16 x i16> %19185, %19142
  %19187 = add <16 x i16> %19186, %19152
  %19188 = add <16 x i16> %19187, %19162
  %19189 = add <16 x i16> %19188, %19171
  %19190 = add <16 x i16> %19189, %19181
  %19191 = add <16 x i16> %19135, %19125
  %19192 = add <16 x i16> %19191, %19145
  %19193 = add <16 x i16> %19192, %19155
  %19194 = add <16 x i16> %19193, %19165
  %19195 = add <16 x i16> %19194, %19174
  %19196 = add <16 x i16> %19195, %19184
  %19197 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19190, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19198 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19196, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19199 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19197, <16 x i16> %19190)
  %19200 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19198, <16 x i16> %19196)
  %19201 = shufflevector <16 x i16> %19199, <16 x i16> %19200, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19202 = lshr <32 x i16> %19201, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19203 = shufflevector <32 x i16> %19202, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19204 = sext i32 %a26 to i64
  %19205 = add nsw i64 %19204, 31
  %19206 = mul nsw i64 %19205, %117
  %19207 = add nsw i64 %119, %19206
  %19208 = getelementptr inbounds i16, i16* %66, i64 %19207
  %19209 = getelementptr inbounds i16, i16* %19208, i64 -32
  %19210 = bitcast i16* %19209 to <16 x i16>*
  store <16 x i16> %19203, <16 x i16>* %19210, align 2, !tbaa !401
  %19211 = shufflevector <32 x i16> %19202, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19212 = getelementptr inbounds i16, i16* %19208, i64 -16
  %19213 = bitcast i16* %19212 to <16 x i16>*
  store <16 x i16> %19211, <16 x i16>* %19213, align 2, !tbaa !401
  br label %after_bb811

"for blur_y.s0.x.x.rebased816":                   ; preds = %"for blur_y.s0.x.x.rebased816.preheader", %"consume blur_x823"
  %indvars.iv3482 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased816.preheader" ], [ %indvars.iv.next3483, %"consume blur_x823" ]
  %19214 = add nsw i64 %indvars.iv3482, %101
  %19215 = icmp slt i64 %19214, 1
  %19216 = trunc i64 %19214 to i32
  %19217 = shl nsw i32 %19216, 5
  %19218 = icmp sgt i32 %4, %19217
  %19219 = or i1 %19215, %19218
  br i1 %19219, label %"produce blur_x822", label %"for blur_y.s0.x.x.rebased816.consume blur_x823_crit_edge"

"for blur_y.s0.x.x.rebased816.consume blur_x823_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased816"
  %.pre3666 = shl nsw i64 %19214, 5
  br label %"consume blur_x823"

"end for blur_y.s0.x.x.rebased817":               ; preds = %"consume blur_x823", %after_bb811
  br i1 %102, label %"for blur_y.s0.x.x.rebased824.preheader", label %"end for blur_y.s0.x.x.rebased825", !prof !386

"for blur_y.s0.x.x.rebased824.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased817"
  %19220 = sext i32 %t1756 to i64
  %19221 = zext i32 %.pre-phi to i64
  %19222 = mul nsw i64 %19221, %116
  %19223 = sub nsw i64 %19222, %96
  %19224 = zext i32 %.pre-phi3605 to i64
  %19225 = mul nsw i64 %19224, %116
  %19226 = sub nsw i64 %19225, %96
  %19227 = zext i32 %.pre-phi3579 to i64
  %19228 = mul nsw i64 %19227, %116
  %19229 = sub nsw i64 %19228, %96
  %19230 = zext i32 %.pre-phi3583 to i64
  %19231 = mul nsw i64 %19230, %116
  %19232 = sub nsw i64 %19231, %96
  %19233 = zext i32 %.pre-phi3587 to i64
  %19234 = mul nsw i64 %19233, %116
  %19235 = sub nsw i64 %19234, %96
  %19236 = zext i32 %.pre-phi3595 to i64
  %19237 = mul nsw i64 %19236, %116
  %19238 = sub nsw i64 %19237, %96
  %19239 = zext i32 %.pre-phi3591 to i64
  %19240 = mul nsw i64 %19239, %116
  %19241 = sub nsw i64 %19240, %96
  %19242 = sext i32 %a26 to i64
  %19243 = add nsw i64 %19242, 31
  %19244 = mul nsw i64 %19243, %117
  %19245 = add nsw i64 %19244, %120
  br label %"for blur_y.s0.x.x.rebased824"

"produce blur_x822":                              ; preds = %"for blur_y.s0.x.x.rebased816"
  %t1248 = add nsw i32 %19217, %t2257
  %19246 = sext i32 %t1248 to i64
  %19247 = getelementptr inbounds i16, i16* %read_input, i64 %19246
  %19248 = getelementptr inbounds i16, i16* %19247, i64 1
  %19249 = bitcast i16* %19248 to <16 x i16>*
  %19250 = load <16 x i16>, <16 x i16>* %19249, align 2, !tbaa !396
  %19251 = getelementptr inbounds i16, i16* %19247, i64 17
  %19252 = bitcast i16* %19251 to <16 x i16>*
  %19253 = load <16 x i16>, <16 x i16>* %19252, align 2, !tbaa !396
  %19254 = bitcast i16* %19247 to <16 x i16>*
  %19255 = load <16 x i16>, <16 x i16>* %19254, align 2, !tbaa !396
  %19256 = getelementptr inbounds i16, i16* %19247, i64 16
  %19257 = bitcast i16* %19256 to <16 x i16>*
  %19258 = load <16 x i16>, <16 x i16>* %19257, align 2, !tbaa !396
  %19259 = getelementptr inbounds i16, i16* %19247, i64 2
  %19260 = bitcast i16* %19259 to <16 x i16>*
  %19261 = load <16 x i16>, <16 x i16>* %19260, align 2, !tbaa !396
  %19262 = getelementptr inbounds i16, i16* %19247, i64 18
  %19263 = bitcast i16* %19262 to <16 x i16>*
  %19264 = load <16 x i16>, <16 x i16>* %19263, align 2, !tbaa !396
  %19265 = getelementptr inbounds i16, i16* %19247, i64 3
  %19266 = bitcast i16* %19265 to <16 x i16>*
  %19267 = load <16 x i16>, <16 x i16>* %19266, align 2, !tbaa !396
  %19268 = getelementptr inbounds i16, i16* %19247, i64 19
  %19269 = bitcast i16* %19268 to <16 x i16>*
  %19270 = load <16 x i16>, <16 x i16>* %19269, align 2, !tbaa !396
  %19271 = getelementptr inbounds i16, i16* %19247, i64 4
  %19272 = bitcast i16* %19271 to <16 x i16>*
  %19273 = load <16 x i16>, <16 x i16>* %19272, align 2, !tbaa !396
  %19274 = getelementptr inbounds i16, i16* %19247, i64 20
  %19275 = bitcast i16* %19274 to <16 x i16>*
  %19276 = load <16 x i16>, <16 x i16>* %19275, align 2, !tbaa !396
  %19277 = getelementptr inbounds i16, i16* %19247, i64 6
  %19278 = bitcast i16* %19277 to <16 x i16>*
  %19279 = load <16 x i16>, <16 x i16>* %19278, align 2, !tbaa !396
  %19280 = getelementptr inbounds i16, i16* %19247, i64 22
  %19281 = bitcast i16* %19280 to <16 x i16>*
  %19282 = load <16 x i16>, <16 x i16>* %19281, align 2, !tbaa !396
  %19283 = getelementptr inbounds i16, i16* %19247, i64 5
  %19284 = bitcast i16* %19283 to <16 x i16>*
  %19285 = load <16 x i16>, <16 x i16>* %19284, align 2, !tbaa !396
  %19286 = getelementptr inbounds i16, i16* %19247, i64 21
  %19287 = bitcast i16* %19286 to <16 x i16>*
  %19288 = load <16 x i16>, <16 x i16>* %19287, align 2, !tbaa !396
  %19289 = add <16 x i16> %19255, %19250
  %19290 = add <16 x i16> %19289, %19261
  %19291 = add <16 x i16> %19290, %19267
  %19292 = add <16 x i16> %19291, %19273
  %19293 = add <16 x i16> %19292, %19279
  %19294 = add <16 x i16> %19293, %19285
  %19295 = add <16 x i16> %19258, %19253
  %19296 = add <16 x i16> %19295, %19264
  %19297 = add <16 x i16> %19296, %19270
  %19298 = add <16 x i16> %19297, %19276
  %19299 = add <16 x i16> %19298, %19282
  %19300 = add <16 x i16> %19299, %19288
  %19301 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19294, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19302 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19300, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19303 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19301, <16 x i16> %19294)
  %19304 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19302, <16 x i16> %19300)
  %19305 = shufflevector <16 x i16> %19303, <16 x i16> %19304, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19306 = lshr <32 x i16> %19305, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19307 = shufflevector <32 x i16> %19306, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19308 = shl nsw i64 %19214, 5
  %19309 = add nsw i64 %19308, %19019
  %19310 = getelementptr inbounds i16, i16* %blur_x, i64 %19309
  %19311 = bitcast i16* %19310 to <16 x i16>*
  store <16 x i16> %19307, <16 x i16>* %19311, align 2, !tbaa !399
  %19312 = shufflevector <32 x i16> %19306, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19313 = getelementptr inbounds i16, i16* %19310, i64 16
  %19314 = bitcast i16* %19313 to <16 x i16>*
  store <16 x i16> %19312, <16 x i16>* %19314, align 2, !tbaa !399
  br label %"consume blur_x823"

"consume blur_x823":                              ; preds = %"for blur_y.s0.x.x.rebased816.consume blur_x823_crit_edge", %"produce blur_x822"
  %.pre-phi3667 = phi i64 [ %.pre3666, %"for blur_y.s0.x.x.rebased816.consume blur_x823_crit_edge" ], [ %19308, %"produce blur_x822" ]
  %19315 = add nsw i64 %19022, %.pre-phi3667
  %19316 = getelementptr inbounds i16, i16* %blur_x, i64 %19315
  %19317 = bitcast i16* %19316 to <16 x i16>*
  %19318 = load <16 x i16>, <16 x i16>* %19317, align 2, !tbaa !399
  %19319 = getelementptr inbounds i16, i16* %19316, i64 16
  %19320 = bitcast i16* %19319 to <16 x i16>*
  %19321 = load <16 x i16>, <16 x i16>* %19320, align 2, !tbaa !399
  %19322 = add nsw i64 %19025, %.pre-phi3667
  %19323 = getelementptr inbounds i16, i16* %blur_x, i64 %19322
  %19324 = bitcast i16* %19323 to <16 x i16>*
  %19325 = load <16 x i16>, <16 x i16>* %19324, align 2, !tbaa !399
  %19326 = getelementptr inbounds i16, i16* %19323, i64 16
  %19327 = bitcast i16* %19326 to <16 x i16>*
  %19328 = load <16 x i16>, <16 x i16>* %19327, align 2, !tbaa !399
  %19329 = add nsw i64 %19028, %.pre-phi3667
  %19330 = getelementptr inbounds i16, i16* %blur_x, i64 %19329
  %19331 = bitcast i16* %19330 to <16 x i16>*
  %19332 = load <16 x i16>, <16 x i16>* %19331, align 2, !tbaa !399
  %19333 = getelementptr inbounds i16, i16* %19330, i64 16
  %19334 = bitcast i16* %19333 to <16 x i16>*
  %19335 = load <16 x i16>, <16 x i16>* %19334, align 2, !tbaa !399
  %19336 = add nsw i64 %19031, %.pre-phi3667
  %19337 = getelementptr inbounds i16, i16* %blur_x, i64 %19336
  %19338 = bitcast i16* %19337 to <16 x i16>*
  %19339 = load <16 x i16>, <16 x i16>* %19338, align 2, !tbaa !399
  %19340 = getelementptr inbounds i16, i16* %19337, i64 16
  %19341 = bitcast i16* %19340 to <16 x i16>*
  %19342 = load <16 x i16>, <16 x i16>* %19341, align 2, !tbaa !399
  %19343 = add nsw i64 %19034, %.pre-phi3667
  %19344 = getelementptr inbounds i16, i16* %blur_x, i64 %19343
  %19345 = bitcast i16* %19344 to <16 x i16>*
  %19346 = load <16 x i16>, <16 x i16>* %19345, align 2, !tbaa !399
  %19347 = getelementptr inbounds i16, i16* %19344, i64 16
  %19348 = bitcast i16* %19347 to <16 x i16>*
  %19349 = load <16 x i16>, <16 x i16>* %19348, align 2, !tbaa !399
  %19350 = add nsw i64 %19037, %.pre-phi3667
  %19351 = getelementptr inbounds i16, i16* %blur_x, i64 %19350
  %19352 = bitcast i16* %19351 to <16 x i16>*
  %19353 = load <16 x i16>, <16 x i16>* %19352, align 2, !tbaa !399
  %19354 = getelementptr inbounds i16, i16* %19351, i64 16
  %19355 = bitcast i16* %19354 to <16 x i16>*
  %19356 = load <16 x i16>, <16 x i16>* %19355, align 2, !tbaa !399
  %19357 = add nsw i64 %19040, %.pre-phi3667
  %19358 = getelementptr inbounds i16, i16* %blur_x, i64 %19357
  %19359 = bitcast i16* %19358 to <16 x i16>*
  %19360 = load <16 x i16>, <16 x i16>* %19359, align 2, !tbaa !399
  %19361 = getelementptr inbounds i16, i16* %19358, i64 16
  %19362 = bitcast i16* %19361 to <16 x i16>*
  %19363 = load <16 x i16>, <16 x i16>* %19362, align 2, !tbaa !399
  %19364 = add <16 x i16> %19325, %19318
  %19365 = add <16 x i16> %19364, %19332
  %19366 = add <16 x i16> %19365, %19339
  %19367 = add <16 x i16> %19366, %19346
  %19368 = add <16 x i16> %19367, %19353
  %19369 = add <16 x i16> %19368, %19360
  %19370 = add <16 x i16> %19328, %19321
  %19371 = add <16 x i16> %19370, %19335
  %19372 = add <16 x i16> %19371, %19342
  %19373 = add <16 x i16> %19372, %19349
  %19374 = add <16 x i16> %19373, %19356
  %19375 = add <16 x i16> %19374, %19363
  %19376 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19369, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19377 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19375, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19378 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19376, <16 x i16> %19369)
  %19379 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19377, <16 x i16> %19375)
  %19380 = shufflevector <16 x i16> %19378, <16 x i16> %19379, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19381 = lshr <32 x i16> %19380, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19382 = shufflevector <32 x i16> %19381, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19383 = add nsw i64 %19044, %.pre-phi3667
  %19384 = getelementptr inbounds i16, i16* %66, i64 %19383
  %19385 = bitcast i16* %19384 to <16 x i16>*
  store <16 x i16> %19382, <16 x i16>* %19385, align 2, !tbaa !401
  %19386 = shufflevector <32 x i16> %19381, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19387 = getelementptr inbounds i16, i16* %19384, i64 16
  %19388 = bitcast i16* %19387 to <16 x i16>*
  store <16 x i16> %19386, <16 x i16>* %19388, align 2, !tbaa !401
  %indvars.iv.next3483 = add nuw nsw i64 %indvars.iv3482, 1
  %.not2809 = icmp eq i64 %indvars.iv.next3483, %188
  br i1 %.not2809, label %"end for blur_y.s0.x.x.rebased817", label %"for blur_y.s0.x.x.rebased816"

"for blur_y.s0.x.x.rebased824":                   ; preds = %"for blur_y.s0.x.x.rebased824.preheader", %"consume blur_x832"
  %blur_y.s0.x.x.rebased826 = phi i32 [ %19540, %"consume blur_x832" ], [ 0, %"for blur_y.s0.x.x.rebased824.preheader" ]
  %19389 = add nsw i32 %blur_y.s0.x.x.rebased826, %t1670
  %a336 = shl nsw i32 %19389, 5
  %19390 = icmp sgt i32 %a14, %a336
  %b342 = select i1 %19390, i32 %a336, i32 %a14
  %19391 = icmp slt i32 %19389, 1
  %19392 = icmp sgt i32 %4, %a336
  %19393 = or i1 %19391, %19392
  br i1 %19393, label %"produce blur_x830", label %"consume blur_x832"

"end for blur_y.s0.x.x.rebased825":               ; preds = %"consume blur_x832", %"end for blur_y.s0.x.x.rebased817"
  %19394 = add nuw nsw i32 %blur_y.s0.y.y, 1
  %.not2807 = icmp eq i32 %19394, %t1656
  br i1 %.not2807, label %"end for blur_y.s0.y.y.loopexit", label %"for blur_y.s0.y.y"

"produce blur_x830":                              ; preds = %"for blur_y.s0.x.x.rebased824"
  %19395 = icmp slt i32 %b342, %4
  %blur_x.s0.x.v1.base.s831 = select i1 %19395, i32 %b342, i32 %4
  %t1253 = add nsw i32 %blur_x.s0.x.v1.base.s831, %t2257
  %19396 = sext i32 %t1253 to i64
  %19397 = getelementptr inbounds i16, i16* %read_input, i64 %19396
  %19398 = getelementptr inbounds i16, i16* %19397, i64 1
  %19399 = bitcast i16* %19398 to <16 x i16>*
  %19400 = load <16 x i16>, <16 x i16>* %19399, align 2, !tbaa !396
  %19401 = getelementptr inbounds i16, i16* %19397, i64 17
  %19402 = bitcast i16* %19401 to <16 x i16>*
  %19403 = load <16 x i16>, <16 x i16>* %19402, align 2, !tbaa !396
  %19404 = bitcast i16* %19397 to <16 x i16>*
  %19405 = load <16 x i16>, <16 x i16>* %19404, align 2, !tbaa !396
  %19406 = getelementptr inbounds i16, i16* %19397, i64 16
  %19407 = bitcast i16* %19406 to <16 x i16>*
  %19408 = load <16 x i16>, <16 x i16>* %19407, align 2, !tbaa !396
  %19409 = getelementptr inbounds i16, i16* %19397, i64 2
  %19410 = bitcast i16* %19409 to <16 x i16>*
  %19411 = load <16 x i16>, <16 x i16>* %19410, align 2, !tbaa !396
  %19412 = getelementptr inbounds i16, i16* %19397, i64 18
  %19413 = bitcast i16* %19412 to <16 x i16>*
  %19414 = load <16 x i16>, <16 x i16>* %19413, align 2, !tbaa !396
  %19415 = getelementptr inbounds i16, i16* %19397, i64 3
  %19416 = bitcast i16* %19415 to <16 x i16>*
  %19417 = load <16 x i16>, <16 x i16>* %19416, align 2, !tbaa !396
  %19418 = getelementptr inbounds i16, i16* %19397, i64 19
  %19419 = bitcast i16* %19418 to <16 x i16>*
  %19420 = load <16 x i16>, <16 x i16>* %19419, align 2, !tbaa !396
  %19421 = getelementptr inbounds i16, i16* %19397, i64 4
  %19422 = bitcast i16* %19421 to <16 x i16>*
  %19423 = load <16 x i16>, <16 x i16>* %19422, align 2, !tbaa !396
  %19424 = getelementptr inbounds i16, i16* %19397, i64 20
  %19425 = bitcast i16* %19424 to <16 x i16>*
  %19426 = load <16 x i16>, <16 x i16>* %19425, align 2, !tbaa !396
  %19427 = getelementptr inbounds i16, i16* %19397, i64 6
  %19428 = bitcast i16* %19427 to <16 x i16>*
  %19429 = load <16 x i16>, <16 x i16>* %19428, align 2, !tbaa !396
  %19430 = getelementptr inbounds i16, i16* %19397, i64 22
  %19431 = bitcast i16* %19430 to <16 x i16>*
  %19432 = load <16 x i16>, <16 x i16>* %19431, align 2, !tbaa !396
  %19433 = getelementptr inbounds i16, i16* %19397, i64 5
  %19434 = bitcast i16* %19433 to <16 x i16>*
  %19435 = load <16 x i16>, <16 x i16>* %19434, align 2, !tbaa !396
  %19436 = getelementptr inbounds i16, i16* %19397, i64 21
  %19437 = bitcast i16* %19436 to <16 x i16>*
  %19438 = load <16 x i16>, <16 x i16>* %19437, align 2, !tbaa !396
  %19439 = add <16 x i16> %19405, %19400
  %19440 = add <16 x i16> %19439, %19411
  %19441 = add <16 x i16> %19440, %19417
  %19442 = add <16 x i16> %19441, %19423
  %19443 = add <16 x i16> %19442, %19429
  %19444 = add <16 x i16> %19443, %19435
  %19445 = add <16 x i16> %19408, %19403
  %19446 = add <16 x i16> %19445, %19414
  %19447 = add <16 x i16> %19446, %19420
  %19448 = add <16 x i16> %19447, %19426
  %19449 = add <16 x i16> %19448, %19432
  %19450 = add <16 x i16> %19449, %19438
  %19451 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19444, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19452 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19450, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19453 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19451, <16 x i16> %19444)
  %19454 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19452, <16 x i16> %19450)
  %19455 = shufflevector <16 x i16> %19453, <16 x i16> %19454, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19456 = lshr <32 x i16> %19455, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19457 = shufflevector <32 x i16> %19456, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19458 = sext i32 %blur_x.s0.x.v1.base.s831 to i64
  %19459 = add nsw i64 %19458, %19220
  %19460 = getelementptr inbounds i16, i16* %blur_x, i64 %19459
  %19461 = bitcast i16* %19460 to <16 x i16>*
  store <16 x i16> %19457, <16 x i16>* %19461, align 2, !tbaa !399
  %19462 = shufflevector <32 x i16> %19456, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19463 = getelementptr inbounds i16, i16* %19460, i64 16
  %19464 = bitcast i16* %19463 to <16 x i16>*
  store <16 x i16> %19462, <16 x i16>* %19464, align 2, !tbaa !399
  br label %"consume blur_x832"

"consume blur_x832":                              ; preds = %"for blur_y.s0.x.x.rebased824", %"produce blur_x830"
  %19465 = sext i32 %b342 to i64
  %19466 = add nsw i64 %19223, %19465
  %19467 = getelementptr inbounds i16, i16* %blur_x, i64 %19466
  %19468 = bitcast i16* %19467 to <16 x i16>*
  %19469 = load <16 x i16>, <16 x i16>* %19468, align 2, !tbaa !399
  %19470 = getelementptr inbounds i16, i16* %19467, i64 16
  %19471 = bitcast i16* %19470 to <16 x i16>*
  %19472 = load <16 x i16>, <16 x i16>* %19471, align 2, !tbaa !399
  %19473 = add nsw i64 %19226, %19465
  %19474 = getelementptr inbounds i16, i16* %blur_x, i64 %19473
  %19475 = bitcast i16* %19474 to <16 x i16>*
  %19476 = load <16 x i16>, <16 x i16>* %19475, align 2, !tbaa !399
  %19477 = getelementptr inbounds i16, i16* %19474, i64 16
  %19478 = bitcast i16* %19477 to <16 x i16>*
  %19479 = load <16 x i16>, <16 x i16>* %19478, align 2, !tbaa !399
  %19480 = add nsw i64 %19229, %19465
  %19481 = getelementptr inbounds i16, i16* %blur_x, i64 %19480
  %19482 = bitcast i16* %19481 to <16 x i16>*
  %19483 = load <16 x i16>, <16 x i16>* %19482, align 2, !tbaa !399
  %19484 = getelementptr inbounds i16, i16* %19481, i64 16
  %19485 = bitcast i16* %19484 to <16 x i16>*
  %19486 = load <16 x i16>, <16 x i16>* %19485, align 2, !tbaa !399
  %19487 = add nsw i64 %19232, %19465
  %19488 = getelementptr inbounds i16, i16* %blur_x, i64 %19487
  %19489 = bitcast i16* %19488 to <16 x i16>*
  %19490 = load <16 x i16>, <16 x i16>* %19489, align 2, !tbaa !399
  %19491 = getelementptr inbounds i16, i16* %19488, i64 16
  %19492 = bitcast i16* %19491 to <16 x i16>*
  %19493 = load <16 x i16>, <16 x i16>* %19492, align 2, !tbaa !399
  %19494 = add nsw i64 %19235, %19465
  %19495 = getelementptr inbounds i16, i16* %blur_x, i64 %19494
  %19496 = bitcast i16* %19495 to <16 x i16>*
  %19497 = load <16 x i16>, <16 x i16>* %19496, align 2, !tbaa !399
  %19498 = getelementptr inbounds i16, i16* %19495, i64 16
  %19499 = bitcast i16* %19498 to <16 x i16>*
  %19500 = load <16 x i16>, <16 x i16>* %19499, align 2, !tbaa !399
  %19501 = add nsw i64 %19238, %19465
  %19502 = getelementptr inbounds i16, i16* %blur_x, i64 %19501
  %19503 = bitcast i16* %19502 to <16 x i16>*
  %19504 = load <16 x i16>, <16 x i16>* %19503, align 2, !tbaa !399
  %19505 = getelementptr inbounds i16, i16* %19502, i64 16
  %19506 = bitcast i16* %19505 to <16 x i16>*
  %19507 = load <16 x i16>, <16 x i16>* %19506, align 2, !tbaa !399
  %19508 = add nsw i64 %19241, %19465
  %19509 = getelementptr inbounds i16, i16* %blur_x, i64 %19508
  %19510 = bitcast i16* %19509 to <16 x i16>*
  %19511 = load <16 x i16>, <16 x i16>* %19510, align 2, !tbaa !399
  %19512 = getelementptr inbounds i16, i16* %19509, i64 16
  %19513 = bitcast i16* %19512 to <16 x i16>*
  %19514 = load <16 x i16>, <16 x i16>* %19513, align 2, !tbaa !399
  %19515 = add <16 x i16> %19476, %19469
  %19516 = add <16 x i16> %19515, %19483
  %19517 = add <16 x i16> %19516, %19490
  %19518 = add <16 x i16> %19517, %19497
  %19519 = add <16 x i16> %19518, %19504
  %19520 = add <16 x i16> %19519, %19511
  %19521 = add <16 x i16> %19479, %19472
  %19522 = add <16 x i16> %19521, %19486
  %19523 = add <16 x i16> %19522, %19493
  %19524 = add <16 x i16> %19523, %19500
  %19525 = add <16 x i16> %19524, %19507
  %19526 = add <16 x i16> %19525, %19514
  %19527 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19520, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19528 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19526, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19529 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19527, <16 x i16> %19520)
  %19530 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19528, <16 x i16> %19526)
  %19531 = shufflevector <16 x i16> %19529, <16 x i16> %19530, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19532 = lshr <32 x i16> %19531, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19533 = shufflevector <32 x i16> %19532, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19534 = add nsw i64 %19245, %19465
  %19535 = getelementptr inbounds i16, i16* %66, i64 %19534
  %19536 = bitcast i16* %19535 to <16 x i16>*
  store <16 x i16> %19533, <16 x i16>* %19536, align 2, !tbaa !401
  %19537 = shufflevector <32 x i16> %19532, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19538 = getelementptr inbounds i16, i16* %19535, i64 16
  %19539 = bitcast i16* %19538 to <16 x i16>*
  store <16 x i16> %19537, <16 x i16>* %19539, align 2, !tbaa !401
  %19540 = add nuw nsw i32 %blur_y.s0.x.x.rebased826, 1
  %.not2808 = icmp eq i32 %19540, %t1727
  br i1 %.not2808, label %"end for blur_y.s0.x.x.rebased825", label %"for blur_y.s0.x.x.rebased824"

"for blur_y.s0.y.y854":                           ; preds = %"for blur_y.s0.y.y854.preheader", %"end for blur_y.s0.x.x.rebased2462"
  %blur_y.s0.y.y856 = phi i32 [ %37581, %"end for blur_y.s0.x.x.rebased2462" ], [ 0, %"for blur_y.s0.y.y854.preheader" ]
  %a389 = shl nsw i32 %blur_y.s0.y.y856, 5
  %19541 = icmp sgt i32 %b391, %a389
  %blur_y.s0.y.yi.base.s857 = select i1 %19541, i32 %a389, i32 %b391
  %19542 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i2960 = icmp ult i64 %19542, %270
  %19543 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i2960, label %if.then.i2963, label %pseudostack_alloc.exit2976, !prof !390

if.then.i2963:                                    ; preds = %"for blur_y.s0.y.y854"
  %tobool1.not.i2962 = icmp ne i8* %19543, null
  %19544 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i2965 = icmp ugt i64 %19544, 16384
  %or.cond3030 = and i1 %tobool1.not.i2962, %cmp2.i2965
  br i1 %or.cond3030, label %if.then3.i2967, label %if.end.i2971

if.then3.i2967:                                   ; preds = %if.then.i2963
  call void @halide_free(i8* null, i8* nonnull %19543) #16
  %.pre3573 = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i2971

if.end.i2971:                                     ; preds = %if.then3.i2967, %if.then.i2963
  %19545 = phi i64 [ %.pre3573, %if.then3.i2967 ], [ %19544, %if.then.i2963 ]
  %add.i2969 = add i64 %19545, %270
  store i64 %add.i2969, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i2970 = icmp ugt i64 %add.i2969, 16384
  br i1 %cmp7.i2970, label %if.then8.i2973, label %if.end11.i2975

if.then8.i2973:                                   ; preds = %if.end.i2971
  %call.i2972 = call i8* @halide_malloc(i8* null, i64 %270) #16
  br label %if.end11.i2975

if.end11.i2975:                                   ; preds = %if.then8.i2973, %if.end.i2971
  %storemerge.i2974 = phi i8* [ %call.i2972, %if.then8.i2973 ], [ null, %if.end.i2971 ]
  store i8* %storemerge.i2974, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %270, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2976

pseudostack_alloc.exit2976:                       ; preds = %"for blur_y.s0.y.y854", %if.end11.i2975
  %19546 = phi i8* [ %storemerge.i2974, %if.end11.i2975 ], [ %19543, %"for blur_y.s0.y.y854" ]
  %19547 = bitcast i8* %19546 to i16*
  %.not2642 = icmp eq i8* %19546, null
  br i1 %.not2642, label %then_bb859, label %"produce read_input861", !prof !392

"end for blur_y.s0.y.y855":                       ; preds = %"end for blur_y.s0.y.y"
  %tobool.not.i.not = icmp eq i8* %.03019, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i2977

if.then.i2977.loopexit:                           ; preds = %"end for blur_y.s0.x.x.rebased2462"
  %19548 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %19549 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %if.then.i2977

if.then.i2977:                                    ; preds = %if.then.i2977.loopexit, %"end for blur_y.s0.y.y855"
  %.13027 = phi i8* [ %.0, %"end for blur_y.s0.y.y855" ], [ %19548, %if.then.i2977.loopexit ]
  %.130203024 = phi i8* [ %.03019, %"end for blur_y.s0.y.y855" ], [ %19549, %if.then.i2977.loopexit ]
  %ptr1.i = bitcast i8* %.130203024 to i8**
  %19550 = load i8*, i8** %ptr1.i, align 8, !tbaa !389
  %tobool.not.i3001 = icmp eq i8* %19550, null
  br i1 %tobool.not.i3001, label %pseudostack_free.exit, label %land.lhs.true.i3004

land.lhs.true.i3004:                              ; preds = %if.then.i2977
  %cumulative_size.i3002 = getelementptr inbounds i8, i8* %.130203024, i64 16
  %19551 = bitcast i8* %cumulative_size.i3002 to i64*
  %19552 = load i64, i64* %19551, align 8, !tbaa !391
  %cmp.i3003 = icmp ugt i64 %19552, 16384
  br i1 %cmp.i3003, label %if.then.i3005, label %pseudostack_free.exit

if.then.i3005:                                    ; preds = %land.lhs.true.i3004
  call void @halide_free(i8* null, i8* nonnull %19550) #16
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i2977, %land.lhs.true.i3004, %if.then.i3005
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.130203024, i8 0, i64 24, i1 false)
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %"end for blur_y.s0.y.y855", %pseudostack_free.exit
  %.13026 = phi i8* [ %.0, %"end for blur_y.s0.y.y855" ], [ %.13027, %pseudostack_free.exit ]
  %tobool.not.i2979.not = icmp eq i8* %.13026, null
  br i1 %tobool.not.i2979.not, label %call_destructor.exit2982, label %if.then.i2980

if.then.i2980:                                    ; preds = %call_destructor.exit
  %ptr1.i3008 = bitcast i8* %.13026 to i8**
  %19553 = load i8*, i8** %ptr1.i3008, align 8, !tbaa !389
  %tobool.not.i3009 = icmp eq i8* %19553, null
  br i1 %tobool.not.i3009, label %pseudostack_free.exit3017, label %land.lhs.true.i3012

land.lhs.true.i3012:                              ; preds = %if.then.i2980
  %cumulative_size.i3010 = getelementptr inbounds i8, i8* %.13026, i64 16
  %19554 = bitcast i8* %cumulative_size.i3010 to i64*
  %19555 = load i64, i64* %19554, align 8, !tbaa !391
  %cmp.i3011 = icmp ugt i64 %19555, 16384
  br i1 %cmp.i3011, label %if.then.i3013, label %pseudostack_free.exit3017

if.then.i3013:                                    ; preds = %land.lhs.true.i3012
  call void @halide_free(i8* null, i8* nonnull %19553) #16
  br label %pseudostack_free.exit3017

pseudostack_free.exit3017:                        ; preds = %if.then.i2980, %land.lhs.true.i3012, %if.then.i3013
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.13026, i8 0, i64 24, i1 false)
  br label %call_destructor.exit2982

call_destructor.exit2982:                         ; preds = %call_destructor.exit, %pseudostack_free.exit3017
  ret i32 0

then_bb859:                                       ; preds = %pseudostack_alloc.exit2976
  %19556 = alloca i8*, i64 %270, align 32
  %19557 = bitcast i8** %19556 to i16*
  store i8** %19556, i8*** %271, align 8
  br label %"produce read_input861"

"produce read_input861":                          ; preds = %pseudostack_alloc.exit2976, %then_bb859
  %read_input860 = phi i16* [ %19557, %then_bb859 ], [ %19547, %pseudostack_alloc.exit2976 ]
  %a393 = add nsw i32 %blur_y.s0.y.yi.base.s857, %203
  %19558 = icmp sgt i32 %a393, %209
  %a392 = select i1 %19558, i32 %a393, i32 %209
  %b394 = add nsw i32 %a393, 38
  %19559 = icmp sgt i32 %b394, %a392
  %19560 = icmp sgt i32 %a392, %b399
  %a396 = select i1 %19560, i32 %a392, i32 %b399
  %19561 = icmp sgt i32 %b394, %a396
  %a402 = sub i32 %272, %blur_y.s0.y.yi.base.s857
  %19562 = icmp sgt i32 %a402, 0
  br i1 %19562, label %"for read_input.s0.y.rebased868.preheader", label %"end for read_input.s0.y.rebased869", !prof !386

"for read_input.s0.y.rebased868.preheader":       ; preds = %"produce read_input861"
  %19563 = icmp slt i32 %a402, 38
  %a401 = select i1 %19563, i32 %a402, i32 38
  %19564 = add nsw i32 %273, %blur_y.s0.y.yi.base.s857
  %19565 = sext i32 %19564 to i64
  %19566 = zext i32 %a401 to i64
  br label %"for read_input.s0.y.rebased868"

"for read_input.s0.y.rebased868":                 ; preds = %"for read_input.s0.y.rebased868.preheader", %"end for read_input.s0.x.x874"
  %indvars.iv3485 = phi i64 [ 0, %"for read_input.s0.y.rebased868.preheader" ], [ %indvars.iv.next3486, %"end for read_input.s0.x.x874" ]
  %19567 = add nsw i64 %indvars.iv3485, %19565
  %19568 = icmp slt i64 %19567, %540
  %19569 = trunc i64 %19567 to i32
  %a409 = select i1 %19568, i32 %19569, i32 %b412
  %19570 = trunc i64 %indvars.iv3485 to i32
  %19571 = mul i32 %a391, %19570
  %t1698872 = sub i32 %19571, %274
  %19572 = icmp sgt i32 %a409, 0
  %19573 = select i1 %19572, i32 %a409, i32 0
  %19574 = mul nsw i32 %19573, %211
  %t1697871 = sub nsw i32 %19574, %207
  %19575 = insertelement <32 x i32> undef, i32 %t1697871, i32 0
  %19576 = shufflevector <32 x i32> %19575, <32 x i32> undef, <32 x i32> zeroinitializer
  %19577 = sext i32 %t1698872 to i64
  br label %"for read_input.s0.x.x873"

"end for read_input.s0.y.rebased869":             ; preds = %"end for read_input.s0.x.x874", %"produce read_input861"
  %19578 = icmp sgt i32 %t1680, %a393
  %a438 = select i1 %19578, i32 %t1680, i32 %a393
  %19579 = icmp sgt i32 %b394, %a438
  %19580 = select i1 %19579, i32 %a438, i32 %b394
  %19581 = select i1 %19559, i32 %a392, i32 %b394
  %t1699878 = sub nsw i32 %19580, %19581
  %19582 = icmp sgt i32 %t1699878, 0
  br i1 %19582, label %"for read_input.s0.y.rebased883.preheader", label %"end for read_input.s0.y.rebased884", !prof !386

"for read_input.s0.y.rebased883.preheader":       ; preds = %"end for read_input.s0.y.rebased869"
  %19583 = sub i32 %19581, %209
  %19584 = sext i32 %blur_y.s0.y.yi.base.s857 to i64
  %a478 = sub nsw i64 %285, %19584
  %19585 = icmp slt i64 %a478, 38
  %a477 = select i1 %19585, i64 %a478, i64 38
  %19586 = icmp sgt i64 %a477, 0
  %19587 = select i1 %19586, i64 %a477, i64 0
  %19588 = sext i32 %19583 to i64
  %19589 = zext i32 %t1699878 to i64
  br label %"for read_input.s0.y.rebased883"

"for read_input.s0.x.x873":                       ; preds = %"for read_input.s0.y.rebased868", %"for read_input.s0.x.x873"
  %read_input.s0.x.x875 = phi i32 [ %19788, %"for read_input.s0.x.x873" ], [ 0, %"for read_input.s0.y.rebased868" ]
  %19590 = shl nsw i32 %read_input.s0.x.x875, 5
  %a431 = add nsw i32 %275, %19590
  %19591 = icmp sgt i32 %b433, %a431
  %read_input.s0.x.v2.base.s876 = select i1 %19591, i32 %a431, i32 %b433
  %19592 = add nsw i32 %read_input.s0.x.v2.base.s876, -32
  %19593 = insertelement <32 x i32> undef, i32 %19592, i32 0
  %19594 = shufflevector <32 x i32> %19593, <32 x i32> undef, <32 x i32> zeroinitializer
  %a434 = add nsw <32 x i32> %19594, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19595 = shufflevector <32 x i32> %a434, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19596 = icmp sgt <8 x i32> %278, %19595
  %19597 = shufflevector <32 x i32> %a434, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19598 = icmp sgt <8 x i32> %278, %19597
  %19599 = shufflevector <32 x i32> %a434, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %19600 = icmp sgt <8 x i32> %278, %19599
  %19601 = shufflevector <32 x i32> %a434, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19602 = icmp sgt <8 x i32> %278, %19601
  %19603 = select <8 x i1> %19596, <8 x i32> %19595, <8 x i32> %278
  %19604 = select <8 x i1> %19598, <8 x i32> %19597, <8 x i32> %278
  %19605 = select <8 x i1> %19600, <8 x i32> %19599, <8 x i32> %278
  %19606 = select <8 x i1> %19602, <8 x i32> %19601, <8 x i32> %278
  %19607 = icmp sgt <8 x i32> %19603, %280
  %19608 = icmp sgt <8 x i32> %19604, %280
  %19609 = icmp sgt <8 x i32> %19605, %280
  %19610 = icmp sgt <8 x i32> %19606, %280
  %19611 = select <8 x i1> %19607, <8 x i32> %19603, <8 x i32> %280
  %19612 = select <8 x i1> %19608, <8 x i32> %19604, <8 x i32> %280
  %19613 = select <8 x i1> %19609, <8 x i32> %19605, <8 x i32> %280
  %19614 = select <8 x i1> %19610, <8 x i32> %19606, <8 x i32> %280
  %19615 = shufflevector <8 x i32> %19611, <8 x i32> %19612, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19616 = shufflevector <8 x i32> %19613, <8 x i32> %19614, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19617 = shufflevector <16 x i32> %19615, <16 x i32> %19616, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19618 = add nsw <32 x i32> %19617, %19576
  %19619 = extractelement <32 x i32> %19618, i32 0
  %19620 = sext i32 %19619 to i64
  %19621 = getelementptr inbounds i16, i16* %265, i64 %19620
  %19622 = load i16, i16* %19621, align 2, !tbaa !393
  %19623 = insertelement <32 x i16> undef, i16 %19622, i32 0
  %19624 = extractelement <32 x i32> %19618, i32 1
  %19625 = sext i32 %19624 to i64
  %19626 = getelementptr inbounds i16, i16* %265, i64 %19625
  %19627 = load i16, i16* %19626, align 2, !tbaa !393
  %19628 = insertelement <32 x i16> %19623, i16 %19627, i32 1
  %19629 = extractelement <32 x i32> %19618, i32 2
  %19630 = sext i32 %19629 to i64
  %19631 = getelementptr inbounds i16, i16* %265, i64 %19630
  %19632 = load i16, i16* %19631, align 2, !tbaa !393
  %19633 = insertelement <32 x i16> %19628, i16 %19632, i32 2
  %19634 = extractelement <32 x i32> %19618, i32 3
  %19635 = sext i32 %19634 to i64
  %19636 = getelementptr inbounds i16, i16* %265, i64 %19635
  %19637 = load i16, i16* %19636, align 2, !tbaa !393
  %19638 = insertelement <32 x i16> %19633, i16 %19637, i32 3
  %19639 = extractelement <32 x i32> %19618, i32 4
  %19640 = sext i32 %19639 to i64
  %19641 = getelementptr inbounds i16, i16* %265, i64 %19640
  %19642 = load i16, i16* %19641, align 2, !tbaa !393
  %19643 = insertelement <32 x i16> %19638, i16 %19642, i32 4
  %19644 = extractelement <32 x i32> %19618, i32 5
  %19645 = sext i32 %19644 to i64
  %19646 = getelementptr inbounds i16, i16* %265, i64 %19645
  %19647 = load i16, i16* %19646, align 2, !tbaa !393
  %19648 = insertelement <32 x i16> %19643, i16 %19647, i32 5
  %19649 = extractelement <32 x i32> %19618, i32 6
  %19650 = sext i32 %19649 to i64
  %19651 = getelementptr inbounds i16, i16* %265, i64 %19650
  %19652 = load i16, i16* %19651, align 2, !tbaa !393
  %19653 = insertelement <32 x i16> %19648, i16 %19652, i32 6
  %19654 = extractelement <32 x i32> %19618, i32 7
  %19655 = sext i32 %19654 to i64
  %19656 = getelementptr inbounds i16, i16* %265, i64 %19655
  %19657 = load i16, i16* %19656, align 2, !tbaa !393
  %19658 = insertelement <32 x i16> %19653, i16 %19657, i32 7
  %19659 = extractelement <32 x i32> %19618, i32 8
  %19660 = sext i32 %19659 to i64
  %19661 = getelementptr inbounds i16, i16* %265, i64 %19660
  %19662 = load i16, i16* %19661, align 2, !tbaa !393
  %19663 = insertelement <32 x i16> %19658, i16 %19662, i32 8
  %19664 = extractelement <32 x i32> %19618, i32 9
  %19665 = sext i32 %19664 to i64
  %19666 = getelementptr inbounds i16, i16* %265, i64 %19665
  %19667 = load i16, i16* %19666, align 2, !tbaa !393
  %19668 = insertelement <32 x i16> %19663, i16 %19667, i32 9
  %19669 = extractelement <32 x i32> %19618, i32 10
  %19670 = sext i32 %19669 to i64
  %19671 = getelementptr inbounds i16, i16* %265, i64 %19670
  %19672 = load i16, i16* %19671, align 2, !tbaa !393
  %19673 = insertelement <32 x i16> %19668, i16 %19672, i32 10
  %19674 = extractelement <32 x i32> %19618, i32 11
  %19675 = sext i32 %19674 to i64
  %19676 = getelementptr inbounds i16, i16* %265, i64 %19675
  %19677 = load i16, i16* %19676, align 2, !tbaa !393
  %19678 = insertelement <32 x i16> %19673, i16 %19677, i32 11
  %19679 = extractelement <32 x i32> %19618, i32 12
  %19680 = sext i32 %19679 to i64
  %19681 = getelementptr inbounds i16, i16* %265, i64 %19680
  %19682 = load i16, i16* %19681, align 2, !tbaa !393
  %19683 = insertelement <32 x i16> %19678, i16 %19682, i32 12
  %19684 = extractelement <32 x i32> %19618, i32 13
  %19685 = sext i32 %19684 to i64
  %19686 = getelementptr inbounds i16, i16* %265, i64 %19685
  %19687 = load i16, i16* %19686, align 2, !tbaa !393
  %19688 = insertelement <32 x i16> %19683, i16 %19687, i32 13
  %19689 = extractelement <32 x i32> %19618, i32 14
  %19690 = sext i32 %19689 to i64
  %19691 = getelementptr inbounds i16, i16* %265, i64 %19690
  %19692 = load i16, i16* %19691, align 2, !tbaa !393
  %19693 = insertelement <32 x i16> %19688, i16 %19692, i32 14
  %19694 = extractelement <32 x i32> %19618, i32 15
  %19695 = sext i32 %19694 to i64
  %19696 = getelementptr inbounds i16, i16* %265, i64 %19695
  %19697 = load i16, i16* %19696, align 2, !tbaa !393
  %19698 = insertelement <32 x i16> %19693, i16 %19697, i32 15
  %19699 = extractelement <32 x i32> %19618, i32 16
  %19700 = sext i32 %19699 to i64
  %19701 = getelementptr inbounds i16, i16* %265, i64 %19700
  %19702 = load i16, i16* %19701, align 2, !tbaa !393
  %19703 = insertelement <32 x i16> %19698, i16 %19702, i32 16
  %19704 = extractelement <32 x i32> %19618, i32 17
  %19705 = sext i32 %19704 to i64
  %19706 = getelementptr inbounds i16, i16* %265, i64 %19705
  %19707 = load i16, i16* %19706, align 2, !tbaa !393
  %19708 = insertelement <32 x i16> %19703, i16 %19707, i32 17
  %19709 = extractelement <32 x i32> %19618, i32 18
  %19710 = sext i32 %19709 to i64
  %19711 = getelementptr inbounds i16, i16* %265, i64 %19710
  %19712 = load i16, i16* %19711, align 2, !tbaa !393
  %19713 = insertelement <32 x i16> %19708, i16 %19712, i32 18
  %19714 = extractelement <32 x i32> %19618, i32 19
  %19715 = sext i32 %19714 to i64
  %19716 = getelementptr inbounds i16, i16* %265, i64 %19715
  %19717 = load i16, i16* %19716, align 2, !tbaa !393
  %19718 = insertelement <32 x i16> %19713, i16 %19717, i32 19
  %19719 = extractelement <32 x i32> %19618, i32 20
  %19720 = sext i32 %19719 to i64
  %19721 = getelementptr inbounds i16, i16* %265, i64 %19720
  %19722 = load i16, i16* %19721, align 2, !tbaa !393
  %19723 = insertelement <32 x i16> %19718, i16 %19722, i32 20
  %19724 = extractelement <32 x i32> %19618, i32 21
  %19725 = sext i32 %19724 to i64
  %19726 = getelementptr inbounds i16, i16* %265, i64 %19725
  %19727 = load i16, i16* %19726, align 2, !tbaa !393
  %19728 = insertelement <32 x i16> %19723, i16 %19727, i32 21
  %19729 = extractelement <32 x i32> %19618, i32 22
  %19730 = sext i32 %19729 to i64
  %19731 = getelementptr inbounds i16, i16* %265, i64 %19730
  %19732 = load i16, i16* %19731, align 2, !tbaa !393
  %19733 = insertelement <32 x i16> %19728, i16 %19732, i32 22
  %19734 = extractelement <32 x i32> %19618, i32 23
  %19735 = sext i32 %19734 to i64
  %19736 = getelementptr inbounds i16, i16* %265, i64 %19735
  %19737 = load i16, i16* %19736, align 2, !tbaa !393
  %19738 = insertelement <32 x i16> %19733, i16 %19737, i32 23
  %19739 = extractelement <32 x i32> %19618, i32 24
  %19740 = sext i32 %19739 to i64
  %19741 = getelementptr inbounds i16, i16* %265, i64 %19740
  %19742 = load i16, i16* %19741, align 2, !tbaa !393
  %19743 = insertelement <32 x i16> %19738, i16 %19742, i32 24
  %19744 = extractelement <32 x i32> %19618, i32 25
  %19745 = sext i32 %19744 to i64
  %19746 = getelementptr inbounds i16, i16* %265, i64 %19745
  %19747 = load i16, i16* %19746, align 2, !tbaa !393
  %19748 = insertelement <32 x i16> %19743, i16 %19747, i32 25
  %19749 = extractelement <32 x i32> %19618, i32 26
  %19750 = sext i32 %19749 to i64
  %19751 = getelementptr inbounds i16, i16* %265, i64 %19750
  %19752 = load i16, i16* %19751, align 2, !tbaa !393
  %19753 = insertelement <32 x i16> %19748, i16 %19752, i32 26
  %19754 = extractelement <32 x i32> %19618, i32 27
  %19755 = sext i32 %19754 to i64
  %19756 = getelementptr inbounds i16, i16* %265, i64 %19755
  %19757 = load i16, i16* %19756, align 2, !tbaa !393
  %19758 = insertelement <32 x i16> %19753, i16 %19757, i32 27
  %19759 = extractelement <32 x i32> %19618, i32 28
  %19760 = sext i32 %19759 to i64
  %19761 = getelementptr inbounds i16, i16* %265, i64 %19760
  %19762 = load i16, i16* %19761, align 2, !tbaa !393
  %19763 = insertelement <32 x i16> %19758, i16 %19762, i32 28
  %19764 = extractelement <32 x i32> %19618, i32 29
  %19765 = sext i32 %19764 to i64
  %19766 = getelementptr inbounds i16, i16* %265, i64 %19765
  %19767 = load i16, i16* %19766, align 2, !tbaa !393
  %19768 = insertelement <32 x i16> %19763, i16 %19767, i32 29
  %19769 = extractelement <32 x i32> %19618, i32 30
  %19770 = sext i32 %19769 to i64
  %19771 = getelementptr inbounds i16, i16* %265, i64 %19770
  %19772 = load i16, i16* %19771, align 2, !tbaa !393
  %19773 = insertelement <32 x i16> %19768, i16 %19772, i32 30
  %19774 = extractelement <32 x i32> %19618, i32 31
  %19775 = sext i32 %19774 to i64
  %19776 = getelementptr inbounds i16, i16* %265, i64 %19775
  %19777 = load i16, i16* %19776, align 2, !tbaa !393
  %19778 = insertelement <32 x i16> %19773, i16 %19777, i32 31
  %19779 = shufflevector <32 x i16> %19778, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19780 = sext i32 %read_input.s0.x.v2.base.s876 to i64
  %19781 = add nsw i64 %19780, %19577
  %19782 = getelementptr inbounds i16, i16* %read_input860, i64 %19781
  %19783 = getelementptr inbounds i16, i16* %19782, i64 -32
  %19784 = bitcast i16* %19783 to <16 x i16>*
  store <16 x i16> %19779, <16 x i16>* %19784, align 2, !tbaa !396
  %19785 = shufflevector <32 x i16> %19778, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19786 = getelementptr inbounds i16, i16* %19782, i64 -16
  %19787 = bitcast i16* %19786 to <16 x i16>*
  store <16 x i16> %19785, <16 x i16>* %19787, align 2, !tbaa !396
  %19788 = add nuw nsw i32 %read_input.s0.x.x875, 1
  %.not2803 = icmp eq i32 %19788, %219
  br i1 %.not2803, label %"end for read_input.s0.x.x874", label %"for read_input.s0.x.x873"

"end for read_input.s0.x.x874":                   ; preds = %"for read_input.s0.x.x873"
  %indvars.iv.next3486 = add nuw nsw i64 %indvars.iv3485, 1
  %.not2802 = icmp eq i64 %indvars.iv.next3486, %19566
  br i1 %.not2802, label %"end for read_input.s0.y.rebased869", label %"for read_input.s0.y.rebased868"

"for read_input.s0.y.rebased883":                 ; preds = %"for read_input.s0.y.rebased883.preheader", %"end for read_input.s0.x.x.rebased899"
  %indvars.iv3491 = phi i64 [ 0, %"for read_input.s0.y.rebased883.preheader" ], [ %indvars.iv.next3492, %"end for read_input.s0.x.x.rebased899" ]
  %19789 = add nsw i64 %indvars.iv3491, %19588
  %19790 = mul nsw i64 %19789, %544
  %19791 = sub nsw i64 %19790, %545
  br i1 %282, label %"for read_input.s0.x.x887.preheader", label %"end for read_input.s0.x.x888", !prof !386

"for read_input.s0.x.x887.preheader":             ; preds = %"for read_input.s0.y.rebased883"
  %19792 = trunc i64 %19791 to i32
  %19793 = insertelement <32 x i32> undef, i32 %19792, i32 0
  %19794 = shufflevector <32 x i32> %19793, <32 x i32> undef, <32 x i32> zeroinitializer
  %19795 = add nuw nsw i64 %19587, %indvars.iv3491
  %19796 = mul nsw i64 %19795, %286
  %19797 = sub i64 %19796, %287
  br label %"for read_input.s0.x.x887"

"end for read_input.s0.y.rebased884":             ; preds = %"end for read_input.s0.x.x.rebased899", %"end for read_input.s0.y.rebased869"
  %a538 = add nsw i32 %blur_y.s0.y.yi.base.s857, %290
  %19798 = icmp slt i32 %a538, 0
  %a537 = select i1 %19798, i32 %a538, i32 0
  %19799 = icmp sgt i32 %a537, -38
  br i1 %19799, label %"for read_input.s0.y.rebased907.preheader", label %"end for read_input.s0.y.rebased908", !prof !386

"for read_input.s0.y.rebased907.preheader":       ; preds = %"end for read_input.s0.y.rebased884"
  %19800 = select i1 %19561, i32 %a396, i32 %b394
  %19801 = sub nsw i32 %19800, %209
  %19802 = sext i32 %blur_y.s0.y.yi.base.s857 to i64
  %a562 = sub nsw i64 %292, %19802
  %19803 = icmp slt i64 %a562, 38
  %a561 = select i1 %19803, i64 %a562, i64 38
  %19804 = icmp sgt i64 %a561, 0
  %19805 = select i1 %19804, i64 %a561, i64 0
  %a537.op = add nsw i32 %a537, 37
  %19806 = zext i32 %a537.op to i64
  br label %"for read_input.s0.y.rebased907"

"for read_input.s0.x.x887":                       ; preds = %"for read_input.s0.x.x887.preheader", %"for read_input.s0.x.x887"
  %read_input.s0.x.x889 = phi i32 [ %20005, %"for read_input.s0.x.x887" ], [ 0, %"for read_input.s0.x.x887.preheader" ]
  %19807 = shl nsw i32 %read_input.s0.x.x889, 5
  %a473 = add nsw i32 %275, %19807
  %19808 = icmp sgt i32 %b433, %a473
  %read_input.s0.x.v2.base.s890 = select i1 %19808, i32 %a473, i32 %b433
  %19809 = add nsw i32 %read_input.s0.x.v2.base.s890, -32
  %19810 = insertelement <32 x i32> undef, i32 %19809, i32 0
  %19811 = shufflevector <32 x i32> %19810, <32 x i32> undef, <32 x i32> zeroinitializer
  %a476 = add nsw <32 x i32> %19811, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19812 = shufflevector <32 x i32> %a476, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19813 = icmp sgt <8 x i32> %278, %19812
  %19814 = shufflevector <32 x i32> %a476, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19815 = icmp sgt <8 x i32> %278, %19814
  %19816 = shufflevector <32 x i32> %a476, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %19817 = icmp sgt <8 x i32> %278, %19816
  %19818 = shufflevector <32 x i32> %a476, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19819 = icmp sgt <8 x i32> %278, %19818
  %19820 = select <8 x i1> %19813, <8 x i32> %19812, <8 x i32> %278
  %19821 = select <8 x i1> %19815, <8 x i32> %19814, <8 x i32> %278
  %19822 = select <8 x i1> %19817, <8 x i32> %19816, <8 x i32> %278
  %19823 = select <8 x i1> %19819, <8 x i32> %19818, <8 x i32> %278
  %19824 = icmp sgt <8 x i32> %19820, %280
  %19825 = icmp sgt <8 x i32> %19821, %280
  %19826 = icmp sgt <8 x i32> %19822, %280
  %19827 = icmp sgt <8 x i32> %19823, %280
  %19828 = select <8 x i1> %19824, <8 x i32> %19820, <8 x i32> %280
  %19829 = select <8 x i1> %19825, <8 x i32> %19821, <8 x i32> %280
  %19830 = select <8 x i1> %19826, <8 x i32> %19822, <8 x i32> %280
  %19831 = select <8 x i1> %19827, <8 x i32> %19823, <8 x i32> %280
  %19832 = shufflevector <8 x i32> %19828, <8 x i32> %19829, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19833 = shufflevector <8 x i32> %19830, <8 x i32> %19831, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19834 = shufflevector <16 x i32> %19832, <16 x i32> %19833, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19835 = add nsw <32 x i32> %19834, %19794
  %19836 = extractelement <32 x i32> %19835, i32 0
  %19837 = sext i32 %19836 to i64
  %19838 = getelementptr inbounds i16, i16* %265, i64 %19837
  %19839 = load i16, i16* %19838, align 2, !tbaa !393
  %19840 = insertelement <32 x i16> undef, i16 %19839, i32 0
  %19841 = extractelement <32 x i32> %19835, i32 1
  %19842 = sext i32 %19841 to i64
  %19843 = getelementptr inbounds i16, i16* %265, i64 %19842
  %19844 = load i16, i16* %19843, align 2, !tbaa !393
  %19845 = insertelement <32 x i16> %19840, i16 %19844, i32 1
  %19846 = extractelement <32 x i32> %19835, i32 2
  %19847 = sext i32 %19846 to i64
  %19848 = getelementptr inbounds i16, i16* %265, i64 %19847
  %19849 = load i16, i16* %19848, align 2, !tbaa !393
  %19850 = insertelement <32 x i16> %19845, i16 %19849, i32 2
  %19851 = extractelement <32 x i32> %19835, i32 3
  %19852 = sext i32 %19851 to i64
  %19853 = getelementptr inbounds i16, i16* %265, i64 %19852
  %19854 = load i16, i16* %19853, align 2, !tbaa !393
  %19855 = insertelement <32 x i16> %19850, i16 %19854, i32 3
  %19856 = extractelement <32 x i32> %19835, i32 4
  %19857 = sext i32 %19856 to i64
  %19858 = getelementptr inbounds i16, i16* %265, i64 %19857
  %19859 = load i16, i16* %19858, align 2, !tbaa !393
  %19860 = insertelement <32 x i16> %19855, i16 %19859, i32 4
  %19861 = extractelement <32 x i32> %19835, i32 5
  %19862 = sext i32 %19861 to i64
  %19863 = getelementptr inbounds i16, i16* %265, i64 %19862
  %19864 = load i16, i16* %19863, align 2, !tbaa !393
  %19865 = insertelement <32 x i16> %19860, i16 %19864, i32 5
  %19866 = extractelement <32 x i32> %19835, i32 6
  %19867 = sext i32 %19866 to i64
  %19868 = getelementptr inbounds i16, i16* %265, i64 %19867
  %19869 = load i16, i16* %19868, align 2, !tbaa !393
  %19870 = insertelement <32 x i16> %19865, i16 %19869, i32 6
  %19871 = extractelement <32 x i32> %19835, i32 7
  %19872 = sext i32 %19871 to i64
  %19873 = getelementptr inbounds i16, i16* %265, i64 %19872
  %19874 = load i16, i16* %19873, align 2, !tbaa !393
  %19875 = insertelement <32 x i16> %19870, i16 %19874, i32 7
  %19876 = extractelement <32 x i32> %19835, i32 8
  %19877 = sext i32 %19876 to i64
  %19878 = getelementptr inbounds i16, i16* %265, i64 %19877
  %19879 = load i16, i16* %19878, align 2, !tbaa !393
  %19880 = insertelement <32 x i16> %19875, i16 %19879, i32 8
  %19881 = extractelement <32 x i32> %19835, i32 9
  %19882 = sext i32 %19881 to i64
  %19883 = getelementptr inbounds i16, i16* %265, i64 %19882
  %19884 = load i16, i16* %19883, align 2, !tbaa !393
  %19885 = insertelement <32 x i16> %19880, i16 %19884, i32 9
  %19886 = extractelement <32 x i32> %19835, i32 10
  %19887 = sext i32 %19886 to i64
  %19888 = getelementptr inbounds i16, i16* %265, i64 %19887
  %19889 = load i16, i16* %19888, align 2, !tbaa !393
  %19890 = insertelement <32 x i16> %19885, i16 %19889, i32 10
  %19891 = extractelement <32 x i32> %19835, i32 11
  %19892 = sext i32 %19891 to i64
  %19893 = getelementptr inbounds i16, i16* %265, i64 %19892
  %19894 = load i16, i16* %19893, align 2, !tbaa !393
  %19895 = insertelement <32 x i16> %19890, i16 %19894, i32 11
  %19896 = extractelement <32 x i32> %19835, i32 12
  %19897 = sext i32 %19896 to i64
  %19898 = getelementptr inbounds i16, i16* %265, i64 %19897
  %19899 = load i16, i16* %19898, align 2, !tbaa !393
  %19900 = insertelement <32 x i16> %19895, i16 %19899, i32 12
  %19901 = extractelement <32 x i32> %19835, i32 13
  %19902 = sext i32 %19901 to i64
  %19903 = getelementptr inbounds i16, i16* %265, i64 %19902
  %19904 = load i16, i16* %19903, align 2, !tbaa !393
  %19905 = insertelement <32 x i16> %19900, i16 %19904, i32 13
  %19906 = extractelement <32 x i32> %19835, i32 14
  %19907 = sext i32 %19906 to i64
  %19908 = getelementptr inbounds i16, i16* %265, i64 %19907
  %19909 = load i16, i16* %19908, align 2, !tbaa !393
  %19910 = insertelement <32 x i16> %19905, i16 %19909, i32 14
  %19911 = extractelement <32 x i32> %19835, i32 15
  %19912 = sext i32 %19911 to i64
  %19913 = getelementptr inbounds i16, i16* %265, i64 %19912
  %19914 = load i16, i16* %19913, align 2, !tbaa !393
  %19915 = insertelement <32 x i16> %19910, i16 %19914, i32 15
  %19916 = extractelement <32 x i32> %19835, i32 16
  %19917 = sext i32 %19916 to i64
  %19918 = getelementptr inbounds i16, i16* %265, i64 %19917
  %19919 = load i16, i16* %19918, align 2, !tbaa !393
  %19920 = insertelement <32 x i16> %19915, i16 %19919, i32 16
  %19921 = extractelement <32 x i32> %19835, i32 17
  %19922 = sext i32 %19921 to i64
  %19923 = getelementptr inbounds i16, i16* %265, i64 %19922
  %19924 = load i16, i16* %19923, align 2, !tbaa !393
  %19925 = insertelement <32 x i16> %19920, i16 %19924, i32 17
  %19926 = extractelement <32 x i32> %19835, i32 18
  %19927 = sext i32 %19926 to i64
  %19928 = getelementptr inbounds i16, i16* %265, i64 %19927
  %19929 = load i16, i16* %19928, align 2, !tbaa !393
  %19930 = insertelement <32 x i16> %19925, i16 %19929, i32 18
  %19931 = extractelement <32 x i32> %19835, i32 19
  %19932 = sext i32 %19931 to i64
  %19933 = getelementptr inbounds i16, i16* %265, i64 %19932
  %19934 = load i16, i16* %19933, align 2, !tbaa !393
  %19935 = insertelement <32 x i16> %19930, i16 %19934, i32 19
  %19936 = extractelement <32 x i32> %19835, i32 20
  %19937 = sext i32 %19936 to i64
  %19938 = getelementptr inbounds i16, i16* %265, i64 %19937
  %19939 = load i16, i16* %19938, align 2, !tbaa !393
  %19940 = insertelement <32 x i16> %19935, i16 %19939, i32 20
  %19941 = extractelement <32 x i32> %19835, i32 21
  %19942 = sext i32 %19941 to i64
  %19943 = getelementptr inbounds i16, i16* %265, i64 %19942
  %19944 = load i16, i16* %19943, align 2, !tbaa !393
  %19945 = insertelement <32 x i16> %19940, i16 %19944, i32 21
  %19946 = extractelement <32 x i32> %19835, i32 22
  %19947 = sext i32 %19946 to i64
  %19948 = getelementptr inbounds i16, i16* %265, i64 %19947
  %19949 = load i16, i16* %19948, align 2, !tbaa !393
  %19950 = insertelement <32 x i16> %19945, i16 %19949, i32 22
  %19951 = extractelement <32 x i32> %19835, i32 23
  %19952 = sext i32 %19951 to i64
  %19953 = getelementptr inbounds i16, i16* %265, i64 %19952
  %19954 = load i16, i16* %19953, align 2, !tbaa !393
  %19955 = insertelement <32 x i16> %19950, i16 %19954, i32 23
  %19956 = extractelement <32 x i32> %19835, i32 24
  %19957 = sext i32 %19956 to i64
  %19958 = getelementptr inbounds i16, i16* %265, i64 %19957
  %19959 = load i16, i16* %19958, align 2, !tbaa !393
  %19960 = insertelement <32 x i16> %19955, i16 %19959, i32 24
  %19961 = extractelement <32 x i32> %19835, i32 25
  %19962 = sext i32 %19961 to i64
  %19963 = getelementptr inbounds i16, i16* %265, i64 %19962
  %19964 = load i16, i16* %19963, align 2, !tbaa !393
  %19965 = insertelement <32 x i16> %19960, i16 %19964, i32 25
  %19966 = extractelement <32 x i32> %19835, i32 26
  %19967 = sext i32 %19966 to i64
  %19968 = getelementptr inbounds i16, i16* %265, i64 %19967
  %19969 = load i16, i16* %19968, align 2, !tbaa !393
  %19970 = insertelement <32 x i16> %19965, i16 %19969, i32 26
  %19971 = extractelement <32 x i32> %19835, i32 27
  %19972 = sext i32 %19971 to i64
  %19973 = getelementptr inbounds i16, i16* %265, i64 %19972
  %19974 = load i16, i16* %19973, align 2, !tbaa !393
  %19975 = insertelement <32 x i16> %19970, i16 %19974, i32 27
  %19976 = extractelement <32 x i32> %19835, i32 28
  %19977 = sext i32 %19976 to i64
  %19978 = getelementptr inbounds i16, i16* %265, i64 %19977
  %19979 = load i16, i16* %19978, align 2, !tbaa !393
  %19980 = insertelement <32 x i16> %19975, i16 %19979, i32 28
  %19981 = extractelement <32 x i32> %19835, i32 29
  %19982 = sext i32 %19981 to i64
  %19983 = getelementptr inbounds i16, i16* %265, i64 %19982
  %19984 = load i16, i16* %19983, align 2, !tbaa !393
  %19985 = insertelement <32 x i16> %19980, i16 %19984, i32 29
  %19986 = extractelement <32 x i32> %19835, i32 30
  %19987 = sext i32 %19986 to i64
  %19988 = getelementptr inbounds i16, i16* %265, i64 %19987
  %19989 = load i16, i16* %19988, align 2, !tbaa !393
  %19990 = insertelement <32 x i16> %19985, i16 %19989, i32 30
  %19991 = extractelement <32 x i32> %19835, i32 31
  %19992 = sext i32 %19991 to i64
  %19993 = getelementptr inbounds i16, i16* %265, i64 %19992
  %19994 = load i16, i16* %19993, align 2, !tbaa !393
  %19995 = insertelement <32 x i16> %19990, i16 %19994, i32 31
  %19996 = shufflevector <32 x i16> %19995, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19997 = sext i32 %read_input.s0.x.v2.base.s890 to i64
  %19998 = add nsw i64 %19797, %19997
  %19999 = getelementptr inbounds i16, i16* %read_input860, i64 %19998
  %20000 = getelementptr inbounds i16, i16* %19999, i64 -32
  %20001 = bitcast i16* %20000 to <16 x i16>*
  store <16 x i16> %19996, <16 x i16>* %20001, align 2, !tbaa !396
  %20002 = shufflevector <32 x i16> %19995, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20003 = getelementptr inbounds i16, i16* %19999, i64 -16
  %20004 = bitcast i16* %20003 to <16 x i16>*
  store <16 x i16> %20002, <16 x i16>* %20004, align 2, !tbaa !396
  %20005 = add nuw nsw i32 %read_input.s0.x.x889, 1
  %.not2800 = icmp eq i32 %20005, %t1686
  br i1 %.not2800, label %"end for read_input.s0.x.x888", label %"for read_input.s0.x.x887"

"end for read_input.s0.x.x888":                   ; preds = %"for read_input.s0.x.x887", %"for read_input.s0.y.rebased883"
  br i1 %288, label %"for read_input.s0.x.x.rebased893.preheader", label %"end for read_input.s0.x.x.rebased894", !prof !386

"for read_input.s0.x.x.rebased893.preheader":     ; preds = %"end for read_input.s0.x.x888"
  %20006 = add nuw nsw i64 %19587, %indvars.iv3491
  %20007 = mul nsw i64 %20006, %286
  %20008 = sub i64 %20007, %287
  br i1 %548, label %"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased893"

"for read_input.s0.x.x.rebased893":               ; preds = %"for read_input.s0.x.x.rebased893.preheader", %"for read_input.s0.x.x.rebased893"
  %indvars.iv3488 = phi i64 [ %indvars.iv.next3489.3, %"for read_input.s0.x.x.rebased893" ], [ 0, %"for read_input.s0.x.x.rebased893.preheader" ]
  %niter3766 = phi i64 [ %niter3766.nsub.3, %"for read_input.s0.x.x.rebased893" ], [ %unroll_iter3765, %"for read_input.s0.x.x.rebased893.preheader" ]
  %20009 = add nuw nsw i64 %indvars.iv3488, %541
  %20010 = shl nsw i64 %20009, 5
  %20011 = add nsw i64 %20010, %542
  %20012 = add nsw i64 %20011, %19791
  %20013 = getelementptr inbounds i16, i16* %265, i64 %20012
  %20014 = getelementptr inbounds i16, i16* %20013, i64 -32
  %20015 = bitcast i16* %20014 to <16 x i16>*
  %20016 = load <16 x i16>, <16 x i16>* %20015, align 2, !tbaa !393
  %20017 = getelementptr inbounds i16, i16* %20013, i64 -16
  %20018 = bitcast i16* %20017 to <16 x i16>*
  %20019 = load <16 x i16>, <16 x i16>* %20018, align 2, !tbaa !393
  %20020 = add nsw i64 %20008, %20011
  %20021 = getelementptr inbounds i16, i16* %read_input860, i64 %20020
  %20022 = getelementptr inbounds i16, i16* %20021, i64 -32
  %20023 = bitcast i16* %20022 to <16 x i16>*
  store <16 x i16> %20016, <16 x i16>* %20023, align 2, !tbaa !396
  %20024 = getelementptr inbounds i16, i16* %20021, i64 -16
  %20025 = bitcast i16* %20024 to <16 x i16>*
  store <16 x i16> %20019, <16 x i16>* %20025, align 2, !tbaa !396
  %indvars.iv.next3489 = or i64 %indvars.iv3488, 1
  %20026 = add nuw nsw i64 %indvars.iv.next3489, %541
  %20027 = shl nsw i64 %20026, 5
  %20028 = add nsw i64 %20027, %542
  %20029 = add nsw i64 %20028, %19791
  %20030 = getelementptr inbounds i16, i16* %265, i64 %20029
  %20031 = getelementptr inbounds i16, i16* %20030, i64 -32
  %20032 = bitcast i16* %20031 to <16 x i16>*
  %20033 = load <16 x i16>, <16 x i16>* %20032, align 2, !tbaa !393
  %20034 = getelementptr inbounds i16, i16* %20030, i64 -16
  %20035 = bitcast i16* %20034 to <16 x i16>*
  %20036 = load <16 x i16>, <16 x i16>* %20035, align 2, !tbaa !393
  %20037 = add nsw i64 %20008, %20028
  %20038 = getelementptr inbounds i16, i16* %read_input860, i64 %20037
  %20039 = getelementptr inbounds i16, i16* %20038, i64 -32
  %20040 = bitcast i16* %20039 to <16 x i16>*
  store <16 x i16> %20033, <16 x i16>* %20040, align 2, !tbaa !396
  %20041 = getelementptr inbounds i16, i16* %20038, i64 -16
  %20042 = bitcast i16* %20041 to <16 x i16>*
  store <16 x i16> %20036, <16 x i16>* %20042, align 2, !tbaa !396
  %indvars.iv.next3489.1 = or i64 %indvars.iv3488, 2
  %20043 = add nuw nsw i64 %indvars.iv.next3489.1, %541
  %20044 = shl nsw i64 %20043, 5
  %20045 = add nsw i64 %20044, %542
  %20046 = add nsw i64 %20045, %19791
  %20047 = getelementptr inbounds i16, i16* %265, i64 %20046
  %20048 = getelementptr inbounds i16, i16* %20047, i64 -32
  %20049 = bitcast i16* %20048 to <16 x i16>*
  %20050 = load <16 x i16>, <16 x i16>* %20049, align 2, !tbaa !393
  %20051 = getelementptr inbounds i16, i16* %20047, i64 -16
  %20052 = bitcast i16* %20051 to <16 x i16>*
  %20053 = load <16 x i16>, <16 x i16>* %20052, align 2, !tbaa !393
  %20054 = add nsw i64 %20008, %20045
  %20055 = getelementptr inbounds i16, i16* %read_input860, i64 %20054
  %20056 = getelementptr inbounds i16, i16* %20055, i64 -32
  %20057 = bitcast i16* %20056 to <16 x i16>*
  store <16 x i16> %20050, <16 x i16>* %20057, align 2, !tbaa !396
  %20058 = getelementptr inbounds i16, i16* %20055, i64 -16
  %20059 = bitcast i16* %20058 to <16 x i16>*
  store <16 x i16> %20053, <16 x i16>* %20059, align 2, !tbaa !396
  %indvars.iv.next3489.2 = or i64 %indvars.iv3488, 3
  %20060 = add nuw nsw i64 %indvars.iv.next3489.2, %541
  %20061 = shl nsw i64 %20060, 5
  %20062 = add nsw i64 %20061, %542
  %20063 = add nsw i64 %20062, %19791
  %20064 = getelementptr inbounds i16, i16* %265, i64 %20063
  %20065 = getelementptr inbounds i16, i16* %20064, i64 -32
  %20066 = bitcast i16* %20065 to <16 x i16>*
  %20067 = load <16 x i16>, <16 x i16>* %20066, align 2, !tbaa !393
  %20068 = getelementptr inbounds i16, i16* %20064, i64 -16
  %20069 = bitcast i16* %20068 to <16 x i16>*
  %20070 = load <16 x i16>, <16 x i16>* %20069, align 2, !tbaa !393
  %20071 = add nsw i64 %20008, %20062
  %20072 = getelementptr inbounds i16, i16* %read_input860, i64 %20071
  %20073 = getelementptr inbounds i16, i16* %20072, i64 -32
  %20074 = bitcast i16* %20073 to <16 x i16>*
  store <16 x i16> %20067, <16 x i16>* %20074, align 2, !tbaa !396
  %20075 = getelementptr inbounds i16, i16* %20072, i64 -16
  %20076 = bitcast i16* %20075 to <16 x i16>*
  store <16 x i16> %20070, <16 x i16>* %20076, align 2, !tbaa !396
  %indvars.iv.next3489.3 = add nuw nsw i64 %indvars.iv3488, 4
  %niter3766.nsub.3 = add i64 %niter3766, -4
  %niter3766.ncmp.3 = icmp eq i64 %niter3766.nsub.3, 0
  br i1 %niter3766.ncmp.3, label %"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased893"

"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased893", %"for read_input.s0.x.x.rebased893.preheader"
  %indvars.iv3488.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased893.preheader" ], [ %indvars.iv.next3489.3, %"for read_input.s0.x.x.rebased893" ]
  br i1 %lcmp.mod3764.not, label %"end for read_input.s0.x.x.rebased894", label %"for read_input.s0.x.x.rebased893.epil"

"for read_input.s0.x.x.rebased893.epil":          ; preds = %"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased893.epil"
  %indvars.iv3488.epil = phi i64 [ %indvars.iv.next3489.epil, %"for read_input.s0.x.x.rebased893.epil" ], [ %indvars.iv3488.unr, %"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa" ]
  %epil.iter3763 = phi i64 [ %epil.iter3763.sub, %"for read_input.s0.x.x.rebased893.epil" ], [ %xtraiter3762, %"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa" ]
  %20077 = add nuw nsw i64 %indvars.iv3488.epil, %541
  %20078 = shl nsw i64 %20077, 5
  %20079 = add nsw i64 %20078, %542
  %20080 = add nsw i64 %20079, %19791
  %20081 = getelementptr inbounds i16, i16* %265, i64 %20080
  %20082 = getelementptr inbounds i16, i16* %20081, i64 -32
  %20083 = bitcast i16* %20082 to <16 x i16>*
  %20084 = load <16 x i16>, <16 x i16>* %20083, align 2, !tbaa !393
  %20085 = getelementptr inbounds i16, i16* %20081, i64 -16
  %20086 = bitcast i16* %20085 to <16 x i16>*
  %20087 = load <16 x i16>, <16 x i16>* %20086, align 2, !tbaa !393
  %20088 = add nsw i64 %20008, %20079
  %20089 = getelementptr inbounds i16, i16* %read_input860, i64 %20088
  %20090 = getelementptr inbounds i16, i16* %20089, i64 -32
  %20091 = bitcast i16* %20090 to <16 x i16>*
  store <16 x i16> %20084, <16 x i16>* %20091, align 2, !tbaa !396
  %20092 = getelementptr inbounds i16, i16* %20089, i64 -16
  %20093 = bitcast i16* %20092 to <16 x i16>*
  store <16 x i16> %20087, <16 x i16>* %20093, align 2, !tbaa !396
  %indvars.iv.next3489.epil = add nuw nsw i64 %indvars.iv3488.epil, 1
  %epil.iter3763.sub = add i64 %epil.iter3763, -1
  %epil.iter3763.cmp.not = icmp eq i64 %epil.iter3763.sub, 0
  br i1 %epil.iter3763.cmp.not, label %"end for read_input.s0.x.x.rebased894", label %"for read_input.s0.x.x.rebased893.epil", !llvm.loop !403

"end for read_input.s0.x.x.rebased894":           ; preds = %"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased893.epil", %"end for read_input.s0.x.x888"
  br i1 %289, label %"for read_input.s0.x.x.rebased898.preheader", label %"end for read_input.s0.x.x.rebased899", !prof !386

"for read_input.s0.x.x.rebased898.preheader":     ; preds = %"end for read_input.s0.x.x.rebased894"
  %20094 = trunc i64 %19791 to i32
  %20095 = insertelement <32 x i32> undef, i32 %20094, i32 0
  %20096 = shufflevector <32 x i32> %20095, <32 x i32> undef, <32 x i32> zeroinitializer
  %20097 = add nuw nsw i64 %19587, %indvars.iv3491
  %20098 = mul nsw i64 %20097, %286
  %20099 = sub i64 %20098, %287
  br label %"for read_input.s0.x.x.rebased898"

"for read_input.s0.x.x.rebased898":               ; preds = %"for read_input.s0.x.x.rebased898.preheader", %"for read_input.s0.x.x.rebased898"
  %read_input.s0.x.x.rebased900 = phi i32 [ %20299, %"for read_input.s0.x.x.rebased898" ], [ 0, %"for read_input.s0.x.x.rebased898.preheader" ]
  %20100 = add nsw i32 %read_input.s0.x.x.rebased900, %281
  %20101 = shl nsw i32 %20100, 5
  %a515 = add nsw i32 %275, %20101
  %20102 = icmp sgt i32 %b433, %a515
  %read_input.s0.x.v2.base.s901 = select i1 %20102, i32 %a515, i32 %b433
  %20103 = add nsw i32 %read_input.s0.x.v2.base.s901, -32
  %20104 = insertelement <32 x i32> undef, i32 %20103, i32 0
  %20105 = shufflevector <32 x i32> %20104, <32 x i32> undef, <32 x i32> zeroinitializer
  %a531 = add nsw <32 x i32> %20105, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20106 = shufflevector <32 x i32> %a531, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20107 = icmp sgt <8 x i32> %278, %20106
  %20108 = shufflevector <32 x i32> %a531, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20109 = icmp sgt <8 x i32> %278, %20108
  %20110 = shufflevector <32 x i32> %a531, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %20111 = icmp sgt <8 x i32> %278, %20110
  %20112 = shufflevector <32 x i32> %a531, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20113 = icmp sgt <8 x i32> %278, %20112
  %20114 = select <8 x i1> %20107, <8 x i32> %20106, <8 x i32> %278
  %20115 = select <8 x i1> %20109, <8 x i32> %20108, <8 x i32> %278
  %20116 = select <8 x i1> %20111, <8 x i32> %20110, <8 x i32> %278
  %20117 = select <8 x i1> %20113, <8 x i32> %20112, <8 x i32> %278
  %20118 = icmp sgt <8 x i32> %20114, %280
  %20119 = icmp sgt <8 x i32> %20115, %280
  %20120 = icmp sgt <8 x i32> %20116, %280
  %20121 = icmp sgt <8 x i32> %20117, %280
  %20122 = select <8 x i1> %20118, <8 x i32> %20114, <8 x i32> %280
  %20123 = select <8 x i1> %20119, <8 x i32> %20115, <8 x i32> %280
  %20124 = select <8 x i1> %20120, <8 x i32> %20116, <8 x i32> %280
  %20125 = select <8 x i1> %20121, <8 x i32> %20117, <8 x i32> %280
  %20126 = shufflevector <8 x i32> %20122, <8 x i32> %20123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20127 = shufflevector <8 x i32> %20124, <8 x i32> %20125, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20128 = shufflevector <16 x i32> %20126, <16 x i32> %20127, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20129 = add nsw <32 x i32> %20128, %20096
  %20130 = extractelement <32 x i32> %20129, i32 0
  %20131 = sext i32 %20130 to i64
  %20132 = getelementptr inbounds i16, i16* %265, i64 %20131
  %20133 = load i16, i16* %20132, align 2, !tbaa !393
  %20134 = insertelement <32 x i16> undef, i16 %20133, i32 0
  %20135 = extractelement <32 x i32> %20129, i32 1
  %20136 = sext i32 %20135 to i64
  %20137 = getelementptr inbounds i16, i16* %265, i64 %20136
  %20138 = load i16, i16* %20137, align 2, !tbaa !393
  %20139 = insertelement <32 x i16> %20134, i16 %20138, i32 1
  %20140 = extractelement <32 x i32> %20129, i32 2
  %20141 = sext i32 %20140 to i64
  %20142 = getelementptr inbounds i16, i16* %265, i64 %20141
  %20143 = load i16, i16* %20142, align 2, !tbaa !393
  %20144 = insertelement <32 x i16> %20139, i16 %20143, i32 2
  %20145 = extractelement <32 x i32> %20129, i32 3
  %20146 = sext i32 %20145 to i64
  %20147 = getelementptr inbounds i16, i16* %265, i64 %20146
  %20148 = load i16, i16* %20147, align 2, !tbaa !393
  %20149 = insertelement <32 x i16> %20144, i16 %20148, i32 3
  %20150 = extractelement <32 x i32> %20129, i32 4
  %20151 = sext i32 %20150 to i64
  %20152 = getelementptr inbounds i16, i16* %265, i64 %20151
  %20153 = load i16, i16* %20152, align 2, !tbaa !393
  %20154 = insertelement <32 x i16> %20149, i16 %20153, i32 4
  %20155 = extractelement <32 x i32> %20129, i32 5
  %20156 = sext i32 %20155 to i64
  %20157 = getelementptr inbounds i16, i16* %265, i64 %20156
  %20158 = load i16, i16* %20157, align 2, !tbaa !393
  %20159 = insertelement <32 x i16> %20154, i16 %20158, i32 5
  %20160 = extractelement <32 x i32> %20129, i32 6
  %20161 = sext i32 %20160 to i64
  %20162 = getelementptr inbounds i16, i16* %265, i64 %20161
  %20163 = load i16, i16* %20162, align 2, !tbaa !393
  %20164 = insertelement <32 x i16> %20159, i16 %20163, i32 6
  %20165 = extractelement <32 x i32> %20129, i32 7
  %20166 = sext i32 %20165 to i64
  %20167 = getelementptr inbounds i16, i16* %265, i64 %20166
  %20168 = load i16, i16* %20167, align 2, !tbaa !393
  %20169 = insertelement <32 x i16> %20164, i16 %20168, i32 7
  %20170 = extractelement <32 x i32> %20129, i32 8
  %20171 = sext i32 %20170 to i64
  %20172 = getelementptr inbounds i16, i16* %265, i64 %20171
  %20173 = load i16, i16* %20172, align 2, !tbaa !393
  %20174 = insertelement <32 x i16> %20169, i16 %20173, i32 8
  %20175 = extractelement <32 x i32> %20129, i32 9
  %20176 = sext i32 %20175 to i64
  %20177 = getelementptr inbounds i16, i16* %265, i64 %20176
  %20178 = load i16, i16* %20177, align 2, !tbaa !393
  %20179 = insertelement <32 x i16> %20174, i16 %20178, i32 9
  %20180 = extractelement <32 x i32> %20129, i32 10
  %20181 = sext i32 %20180 to i64
  %20182 = getelementptr inbounds i16, i16* %265, i64 %20181
  %20183 = load i16, i16* %20182, align 2, !tbaa !393
  %20184 = insertelement <32 x i16> %20179, i16 %20183, i32 10
  %20185 = extractelement <32 x i32> %20129, i32 11
  %20186 = sext i32 %20185 to i64
  %20187 = getelementptr inbounds i16, i16* %265, i64 %20186
  %20188 = load i16, i16* %20187, align 2, !tbaa !393
  %20189 = insertelement <32 x i16> %20184, i16 %20188, i32 11
  %20190 = extractelement <32 x i32> %20129, i32 12
  %20191 = sext i32 %20190 to i64
  %20192 = getelementptr inbounds i16, i16* %265, i64 %20191
  %20193 = load i16, i16* %20192, align 2, !tbaa !393
  %20194 = insertelement <32 x i16> %20189, i16 %20193, i32 12
  %20195 = extractelement <32 x i32> %20129, i32 13
  %20196 = sext i32 %20195 to i64
  %20197 = getelementptr inbounds i16, i16* %265, i64 %20196
  %20198 = load i16, i16* %20197, align 2, !tbaa !393
  %20199 = insertelement <32 x i16> %20194, i16 %20198, i32 13
  %20200 = extractelement <32 x i32> %20129, i32 14
  %20201 = sext i32 %20200 to i64
  %20202 = getelementptr inbounds i16, i16* %265, i64 %20201
  %20203 = load i16, i16* %20202, align 2, !tbaa !393
  %20204 = insertelement <32 x i16> %20199, i16 %20203, i32 14
  %20205 = extractelement <32 x i32> %20129, i32 15
  %20206 = sext i32 %20205 to i64
  %20207 = getelementptr inbounds i16, i16* %265, i64 %20206
  %20208 = load i16, i16* %20207, align 2, !tbaa !393
  %20209 = insertelement <32 x i16> %20204, i16 %20208, i32 15
  %20210 = extractelement <32 x i32> %20129, i32 16
  %20211 = sext i32 %20210 to i64
  %20212 = getelementptr inbounds i16, i16* %265, i64 %20211
  %20213 = load i16, i16* %20212, align 2, !tbaa !393
  %20214 = insertelement <32 x i16> %20209, i16 %20213, i32 16
  %20215 = extractelement <32 x i32> %20129, i32 17
  %20216 = sext i32 %20215 to i64
  %20217 = getelementptr inbounds i16, i16* %265, i64 %20216
  %20218 = load i16, i16* %20217, align 2, !tbaa !393
  %20219 = insertelement <32 x i16> %20214, i16 %20218, i32 17
  %20220 = extractelement <32 x i32> %20129, i32 18
  %20221 = sext i32 %20220 to i64
  %20222 = getelementptr inbounds i16, i16* %265, i64 %20221
  %20223 = load i16, i16* %20222, align 2, !tbaa !393
  %20224 = insertelement <32 x i16> %20219, i16 %20223, i32 18
  %20225 = extractelement <32 x i32> %20129, i32 19
  %20226 = sext i32 %20225 to i64
  %20227 = getelementptr inbounds i16, i16* %265, i64 %20226
  %20228 = load i16, i16* %20227, align 2, !tbaa !393
  %20229 = insertelement <32 x i16> %20224, i16 %20228, i32 19
  %20230 = extractelement <32 x i32> %20129, i32 20
  %20231 = sext i32 %20230 to i64
  %20232 = getelementptr inbounds i16, i16* %265, i64 %20231
  %20233 = load i16, i16* %20232, align 2, !tbaa !393
  %20234 = insertelement <32 x i16> %20229, i16 %20233, i32 20
  %20235 = extractelement <32 x i32> %20129, i32 21
  %20236 = sext i32 %20235 to i64
  %20237 = getelementptr inbounds i16, i16* %265, i64 %20236
  %20238 = load i16, i16* %20237, align 2, !tbaa !393
  %20239 = insertelement <32 x i16> %20234, i16 %20238, i32 21
  %20240 = extractelement <32 x i32> %20129, i32 22
  %20241 = sext i32 %20240 to i64
  %20242 = getelementptr inbounds i16, i16* %265, i64 %20241
  %20243 = load i16, i16* %20242, align 2, !tbaa !393
  %20244 = insertelement <32 x i16> %20239, i16 %20243, i32 22
  %20245 = extractelement <32 x i32> %20129, i32 23
  %20246 = sext i32 %20245 to i64
  %20247 = getelementptr inbounds i16, i16* %265, i64 %20246
  %20248 = load i16, i16* %20247, align 2, !tbaa !393
  %20249 = insertelement <32 x i16> %20244, i16 %20248, i32 23
  %20250 = extractelement <32 x i32> %20129, i32 24
  %20251 = sext i32 %20250 to i64
  %20252 = getelementptr inbounds i16, i16* %265, i64 %20251
  %20253 = load i16, i16* %20252, align 2, !tbaa !393
  %20254 = insertelement <32 x i16> %20249, i16 %20253, i32 24
  %20255 = extractelement <32 x i32> %20129, i32 25
  %20256 = sext i32 %20255 to i64
  %20257 = getelementptr inbounds i16, i16* %265, i64 %20256
  %20258 = load i16, i16* %20257, align 2, !tbaa !393
  %20259 = insertelement <32 x i16> %20254, i16 %20258, i32 25
  %20260 = extractelement <32 x i32> %20129, i32 26
  %20261 = sext i32 %20260 to i64
  %20262 = getelementptr inbounds i16, i16* %265, i64 %20261
  %20263 = load i16, i16* %20262, align 2, !tbaa !393
  %20264 = insertelement <32 x i16> %20259, i16 %20263, i32 26
  %20265 = extractelement <32 x i32> %20129, i32 27
  %20266 = sext i32 %20265 to i64
  %20267 = getelementptr inbounds i16, i16* %265, i64 %20266
  %20268 = load i16, i16* %20267, align 2, !tbaa !393
  %20269 = insertelement <32 x i16> %20264, i16 %20268, i32 27
  %20270 = extractelement <32 x i32> %20129, i32 28
  %20271 = sext i32 %20270 to i64
  %20272 = getelementptr inbounds i16, i16* %265, i64 %20271
  %20273 = load i16, i16* %20272, align 2, !tbaa !393
  %20274 = insertelement <32 x i16> %20269, i16 %20273, i32 28
  %20275 = extractelement <32 x i32> %20129, i32 29
  %20276 = sext i32 %20275 to i64
  %20277 = getelementptr inbounds i16, i16* %265, i64 %20276
  %20278 = load i16, i16* %20277, align 2, !tbaa !393
  %20279 = insertelement <32 x i16> %20274, i16 %20278, i32 29
  %20280 = extractelement <32 x i32> %20129, i32 30
  %20281 = sext i32 %20280 to i64
  %20282 = getelementptr inbounds i16, i16* %265, i64 %20281
  %20283 = load i16, i16* %20282, align 2, !tbaa !393
  %20284 = insertelement <32 x i16> %20279, i16 %20283, i32 30
  %20285 = extractelement <32 x i32> %20129, i32 31
  %20286 = sext i32 %20285 to i64
  %20287 = getelementptr inbounds i16, i16* %265, i64 %20286
  %20288 = load i16, i16* %20287, align 2, !tbaa !393
  %20289 = insertelement <32 x i16> %20284, i16 %20288, i32 31
  %20290 = shufflevector <32 x i16> %20289, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20291 = sext i32 %read_input.s0.x.v2.base.s901 to i64
  %20292 = add nsw i64 %20099, %20291
  %20293 = getelementptr inbounds i16, i16* %read_input860, i64 %20292
  %20294 = getelementptr inbounds i16, i16* %20293, i64 -32
  %20295 = bitcast i16* %20294 to <16 x i16>*
  store <16 x i16> %20290, <16 x i16>* %20295, align 2, !tbaa !396
  %20296 = shufflevector <32 x i16> %20289, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20297 = getelementptr inbounds i16, i16* %20293, i64 -16
  %20298 = bitcast i16* %20297 to <16 x i16>*
  store <16 x i16> %20296, <16 x i16>* %20298, align 2, !tbaa !396
  %20299 = add nuw nsw i32 %read_input.s0.x.x.rebased900, 1
  %.not2798 = icmp eq i32 %20299, %t1705879
  br i1 %.not2798, label %"end for read_input.s0.x.x.rebased899", label %"for read_input.s0.x.x.rebased898"

"end for read_input.s0.x.x.rebased899":           ; preds = %"for read_input.s0.x.x.rebased898", %"end for read_input.s0.x.x.rebased894"
  %indvars.iv.next3492 = add nuw nsw i64 %indvars.iv3491, 1
  %.not2797 = icmp eq i64 %indvars.iv.next3492, %19589
  br i1 %.not2797, label %"end for read_input.s0.y.rebased884", label %"for read_input.s0.y.rebased883"

"for read_input.s0.y.rebased907":                 ; preds = %"for read_input.s0.y.rebased907.preheader", %"end for read_input.s0.x.x912"
  %indvars.iv3494 = phi i64 [ 0, %"for read_input.s0.y.rebased907.preheader" ], [ %indvars.iv.next3495, %"end for read_input.s0.x.x912" ]
  %20300 = trunc i64 %indvars.iv3494 to i32
  %a551 = add nsw i32 %19801, %20300
  %20301 = icmp sgt i32 %b412, %a551
  %a550 = select i1 %20301, i32 %a551, i32 %b412
  %20302 = icmp sgt i32 %a550, 0
  %20303 = select i1 %20302, i32 %a550, i32 0
  %20304 = mul nsw i32 %20303, %211
  %t1723910 = sub nsw i32 %20304, %207
  %20305 = insertelement <32 x i32> undef, i32 %t1723910, i32 0
  %20306 = shufflevector <32 x i32> %20305, <32 x i32> undef, <32 x i32> zeroinitializer
  %20307 = add nuw nsw i64 %19805, %indvars.iv3494
  %20308 = mul nsw i64 %20307, %286
  %20309 = sub i64 %20308, %287
  br label %"for read_input.s0.x.x911"

"end for read_input.s0.y.rebased908":             ; preds = %"end for read_input.s0.x.x912", %"end for read_input.s0.y.rebased884"
  %20310 = load i64, i64* %.fca.1.gep2474, align 8, !tbaa !387
  %cmp.i2984 = icmp ult i64 %20310, %296
  %20311 = load i8*, i8** %.fca.0.gep2473, align 8, !tbaa !389
  br i1 %cmp.i2984, label %if.then.i2987, label %pseudostack_alloc.exit3000, !prof !390

if.then.i2987:                                    ; preds = %"end for read_input.s0.y.rebased908"
  %tobool1.not.i2986 = icmp ne i8* %20311, null
  %20312 = load i64, i64* %.fca.2.gep2475, align 8
  %cmp2.i2989 = icmp ugt i64 %20312, 16384
  %or.cond3031 = and i1 %tobool1.not.i2986, %cmp2.i2989
  br i1 %or.cond3031, label %if.then3.i2991, label %if.end.i2995

if.then3.i2991:                                   ; preds = %if.then.i2987
  call void @halide_free(i8* null, i8* nonnull %20311) #16
  %.pre3574 = load i64, i64* %.fca.2.gep2475, align 8, !tbaa !391
  br label %if.end.i2995

if.end.i2995:                                     ; preds = %if.then3.i2991, %if.then.i2987
  %20313 = phi i64 [ %.pre3574, %if.then3.i2991 ], [ %20312, %if.then.i2987 ]
  %add.i2993 = add i64 %20313, %296
  store i64 %add.i2993, i64* %.fca.2.gep2475, align 8, !tbaa !391
  %cmp7.i2994 = icmp ugt i64 %add.i2993, 16384
  br i1 %cmp7.i2994, label %if.then8.i2997, label %if.end11.i2999

if.then8.i2997:                                   ; preds = %if.end.i2995
  %call.i2996 = call i8* @halide_malloc(i8* null, i64 %296) #16
  br label %if.end11.i2999

if.end11.i2999:                                   ; preds = %if.then8.i2997, %if.end.i2995
  %storemerge.i2998 = phi i8* [ %call.i2996, %if.then8.i2997 ], [ null, %if.end.i2995 ]
  store i8* %storemerge.i2998, i8** %.fca.0.gep2473, align 8, !tbaa !389
  store i64 %296, i64* %.fca.1.gep2474, align 8, !tbaa !387
  br label %pseudostack_alloc.exit3000

pseudostack_alloc.exit3000:                       ; preds = %"end for read_input.s0.y.rebased908", %if.end11.i2999
  %20314 = phi i8* [ %storemerge.i2998, %if.end11.i2999 ], [ %20311, %"end for read_input.s0.y.rebased908" ]
  %20315 = bitcast i8* %20314 to i16*
  %.not2643 = icmp eq i8* %20314, null
  br i1 %.not2643, label %then_bb916, label %"consume read_input918", !prof !392

"for read_input.s0.x.x911":                       ; preds = %"for read_input.s0.y.rebased907", %"for read_input.s0.x.x911"
  %read_input.s0.x.x913 = phi i32 [ %20514, %"for read_input.s0.x.x911" ], [ 0, %"for read_input.s0.y.rebased907" ]
  %20316 = shl nsw i32 %read_input.s0.x.x913, 5
  %a557 = add nsw i32 %275, %20316
  %20317 = icmp sgt i32 %b433, %a557
  %read_input.s0.x.v2.base.s914 = select i1 %20317, i32 %a557, i32 %b433
  %20318 = add nsw i32 %read_input.s0.x.v2.base.s914, -32
  %20319 = insertelement <32 x i32> undef, i32 %20318, i32 0
  %20320 = shufflevector <32 x i32> %20319, <32 x i32> undef, <32 x i32> zeroinitializer
  %a560 = add nsw <32 x i32> %20320, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20321 = shufflevector <32 x i32> %a560, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20322 = icmp sgt <8 x i32> %278, %20321
  %20323 = shufflevector <32 x i32> %a560, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20324 = icmp sgt <8 x i32> %278, %20323
  %20325 = shufflevector <32 x i32> %a560, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %20326 = icmp sgt <8 x i32> %278, %20325
  %20327 = shufflevector <32 x i32> %a560, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20328 = icmp sgt <8 x i32> %278, %20327
  %20329 = select <8 x i1> %20322, <8 x i32> %20321, <8 x i32> %278
  %20330 = select <8 x i1> %20324, <8 x i32> %20323, <8 x i32> %278
  %20331 = select <8 x i1> %20326, <8 x i32> %20325, <8 x i32> %278
  %20332 = select <8 x i1> %20328, <8 x i32> %20327, <8 x i32> %278
  %20333 = icmp sgt <8 x i32> %20329, %280
  %20334 = icmp sgt <8 x i32> %20330, %280
  %20335 = icmp sgt <8 x i32> %20331, %280
  %20336 = icmp sgt <8 x i32> %20332, %280
  %20337 = select <8 x i1> %20333, <8 x i32> %20329, <8 x i32> %280
  %20338 = select <8 x i1> %20334, <8 x i32> %20330, <8 x i32> %280
  %20339 = select <8 x i1> %20335, <8 x i32> %20331, <8 x i32> %280
  %20340 = select <8 x i1> %20336, <8 x i32> %20332, <8 x i32> %280
  %20341 = shufflevector <8 x i32> %20337, <8 x i32> %20338, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20342 = shufflevector <8 x i32> %20339, <8 x i32> %20340, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20343 = shufflevector <16 x i32> %20341, <16 x i32> %20342, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20344 = add nsw <32 x i32> %20343, %20306
  %20345 = extractelement <32 x i32> %20344, i32 0
  %20346 = sext i32 %20345 to i64
  %20347 = getelementptr inbounds i16, i16* %265, i64 %20346
  %20348 = load i16, i16* %20347, align 2, !tbaa !393
  %20349 = insertelement <32 x i16> undef, i16 %20348, i32 0
  %20350 = extractelement <32 x i32> %20344, i32 1
  %20351 = sext i32 %20350 to i64
  %20352 = getelementptr inbounds i16, i16* %265, i64 %20351
  %20353 = load i16, i16* %20352, align 2, !tbaa !393
  %20354 = insertelement <32 x i16> %20349, i16 %20353, i32 1
  %20355 = extractelement <32 x i32> %20344, i32 2
  %20356 = sext i32 %20355 to i64
  %20357 = getelementptr inbounds i16, i16* %265, i64 %20356
  %20358 = load i16, i16* %20357, align 2, !tbaa !393
  %20359 = insertelement <32 x i16> %20354, i16 %20358, i32 2
  %20360 = extractelement <32 x i32> %20344, i32 3
  %20361 = sext i32 %20360 to i64
  %20362 = getelementptr inbounds i16, i16* %265, i64 %20361
  %20363 = load i16, i16* %20362, align 2, !tbaa !393
  %20364 = insertelement <32 x i16> %20359, i16 %20363, i32 3
  %20365 = extractelement <32 x i32> %20344, i32 4
  %20366 = sext i32 %20365 to i64
  %20367 = getelementptr inbounds i16, i16* %265, i64 %20366
  %20368 = load i16, i16* %20367, align 2, !tbaa !393
  %20369 = insertelement <32 x i16> %20364, i16 %20368, i32 4
  %20370 = extractelement <32 x i32> %20344, i32 5
  %20371 = sext i32 %20370 to i64
  %20372 = getelementptr inbounds i16, i16* %265, i64 %20371
  %20373 = load i16, i16* %20372, align 2, !tbaa !393
  %20374 = insertelement <32 x i16> %20369, i16 %20373, i32 5
  %20375 = extractelement <32 x i32> %20344, i32 6
  %20376 = sext i32 %20375 to i64
  %20377 = getelementptr inbounds i16, i16* %265, i64 %20376
  %20378 = load i16, i16* %20377, align 2, !tbaa !393
  %20379 = insertelement <32 x i16> %20374, i16 %20378, i32 6
  %20380 = extractelement <32 x i32> %20344, i32 7
  %20381 = sext i32 %20380 to i64
  %20382 = getelementptr inbounds i16, i16* %265, i64 %20381
  %20383 = load i16, i16* %20382, align 2, !tbaa !393
  %20384 = insertelement <32 x i16> %20379, i16 %20383, i32 7
  %20385 = extractelement <32 x i32> %20344, i32 8
  %20386 = sext i32 %20385 to i64
  %20387 = getelementptr inbounds i16, i16* %265, i64 %20386
  %20388 = load i16, i16* %20387, align 2, !tbaa !393
  %20389 = insertelement <32 x i16> %20384, i16 %20388, i32 8
  %20390 = extractelement <32 x i32> %20344, i32 9
  %20391 = sext i32 %20390 to i64
  %20392 = getelementptr inbounds i16, i16* %265, i64 %20391
  %20393 = load i16, i16* %20392, align 2, !tbaa !393
  %20394 = insertelement <32 x i16> %20389, i16 %20393, i32 9
  %20395 = extractelement <32 x i32> %20344, i32 10
  %20396 = sext i32 %20395 to i64
  %20397 = getelementptr inbounds i16, i16* %265, i64 %20396
  %20398 = load i16, i16* %20397, align 2, !tbaa !393
  %20399 = insertelement <32 x i16> %20394, i16 %20398, i32 10
  %20400 = extractelement <32 x i32> %20344, i32 11
  %20401 = sext i32 %20400 to i64
  %20402 = getelementptr inbounds i16, i16* %265, i64 %20401
  %20403 = load i16, i16* %20402, align 2, !tbaa !393
  %20404 = insertelement <32 x i16> %20399, i16 %20403, i32 11
  %20405 = extractelement <32 x i32> %20344, i32 12
  %20406 = sext i32 %20405 to i64
  %20407 = getelementptr inbounds i16, i16* %265, i64 %20406
  %20408 = load i16, i16* %20407, align 2, !tbaa !393
  %20409 = insertelement <32 x i16> %20404, i16 %20408, i32 12
  %20410 = extractelement <32 x i32> %20344, i32 13
  %20411 = sext i32 %20410 to i64
  %20412 = getelementptr inbounds i16, i16* %265, i64 %20411
  %20413 = load i16, i16* %20412, align 2, !tbaa !393
  %20414 = insertelement <32 x i16> %20409, i16 %20413, i32 13
  %20415 = extractelement <32 x i32> %20344, i32 14
  %20416 = sext i32 %20415 to i64
  %20417 = getelementptr inbounds i16, i16* %265, i64 %20416
  %20418 = load i16, i16* %20417, align 2, !tbaa !393
  %20419 = insertelement <32 x i16> %20414, i16 %20418, i32 14
  %20420 = extractelement <32 x i32> %20344, i32 15
  %20421 = sext i32 %20420 to i64
  %20422 = getelementptr inbounds i16, i16* %265, i64 %20421
  %20423 = load i16, i16* %20422, align 2, !tbaa !393
  %20424 = insertelement <32 x i16> %20419, i16 %20423, i32 15
  %20425 = extractelement <32 x i32> %20344, i32 16
  %20426 = sext i32 %20425 to i64
  %20427 = getelementptr inbounds i16, i16* %265, i64 %20426
  %20428 = load i16, i16* %20427, align 2, !tbaa !393
  %20429 = insertelement <32 x i16> %20424, i16 %20428, i32 16
  %20430 = extractelement <32 x i32> %20344, i32 17
  %20431 = sext i32 %20430 to i64
  %20432 = getelementptr inbounds i16, i16* %265, i64 %20431
  %20433 = load i16, i16* %20432, align 2, !tbaa !393
  %20434 = insertelement <32 x i16> %20429, i16 %20433, i32 17
  %20435 = extractelement <32 x i32> %20344, i32 18
  %20436 = sext i32 %20435 to i64
  %20437 = getelementptr inbounds i16, i16* %265, i64 %20436
  %20438 = load i16, i16* %20437, align 2, !tbaa !393
  %20439 = insertelement <32 x i16> %20434, i16 %20438, i32 18
  %20440 = extractelement <32 x i32> %20344, i32 19
  %20441 = sext i32 %20440 to i64
  %20442 = getelementptr inbounds i16, i16* %265, i64 %20441
  %20443 = load i16, i16* %20442, align 2, !tbaa !393
  %20444 = insertelement <32 x i16> %20439, i16 %20443, i32 19
  %20445 = extractelement <32 x i32> %20344, i32 20
  %20446 = sext i32 %20445 to i64
  %20447 = getelementptr inbounds i16, i16* %265, i64 %20446
  %20448 = load i16, i16* %20447, align 2, !tbaa !393
  %20449 = insertelement <32 x i16> %20444, i16 %20448, i32 20
  %20450 = extractelement <32 x i32> %20344, i32 21
  %20451 = sext i32 %20450 to i64
  %20452 = getelementptr inbounds i16, i16* %265, i64 %20451
  %20453 = load i16, i16* %20452, align 2, !tbaa !393
  %20454 = insertelement <32 x i16> %20449, i16 %20453, i32 21
  %20455 = extractelement <32 x i32> %20344, i32 22
  %20456 = sext i32 %20455 to i64
  %20457 = getelementptr inbounds i16, i16* %265, i64 %20456
  %20458 = load i16, i16* %20457, align 2, !tbaa !393
  %20459 = insertelement <32 x i16> %20454, i16 %20458, i32 22
  %20460 = extractelement <32 x i32> %20344, i32 23
  %20461 = sext i32 %20460 to i64
  %20462 = getelementptr inbounds i16, i16* %265, i64 %20461
  %20463 = load i16, i16* %20462, align 2, !tbaa !393
  %20464 = insertelement <32 x i16> %20459, i16 %20463, i32 23
  %20465 = extractelement <32 x i32> %20344, i32 24
  %20466 = sext i32 %20465 to i64
  %20467 = getelementptr inbounds i16, i16* %265, i64 %20466
  %20468 = load i16, i16* %20467, align 2, !tbaa !393
  %20469 = insertelement <32 x i16> %20464, i16 %20468, i32 24
  %20470 = extractelement <32 x i32> %20344, i32 25
  %20471 = sext i32 %20470 to i64
  %20472 = getelementptr inbounds i16, i16* %265, i64 %20471
  %20473 = load i16, i16* %20472, align 2, !tbaa !393
  %20474 = insertelement <32 x i16> %20469, i16 %20473, i32 25
  %20475 = extractelement <32 x i32> %20344, i32 26
  %20476 = sext i32 %20475 to i64
  %20477 = getelementptr inbounds i16, i16* %265, i64 %20476
  %20478 = load i16, i16* %20477, align 2, !tbaa !393
  %20479 = insertelement <32 x i16> %20474, i16 %20478, i32 26
  %20480 = extractelement <32 x i32> %20344, i32 27
  %20481 = sext i32 %20480 to i64
  %20482 = getelementptr inbounds i16, i16* %265, i64 %20481
  %20483 = load i16, i16* %20482, align 2, !tbaa !393
  %20484 = insertelement <32 x i16> %20479, i16 %20483, i32 27
  %20485 = extractelement <32 x i32> %20344, i32 28
  %20486 = sext i32 %20485 to i64
  %20487 = getelementptr inbounds i16, i16* %265, i64 %20486
  %20488 = load i16, i16* %20487, align 2, !tbaa !393
  %20489 = insertelement <32 x i16> %20484, i16 %20488, i32 28
  %20490 = extractelement <32 x i32> %20344, i32 29
  %20491 = sext i32 %20490 to i64
  %20492 = getelementptr inbounds i16, i16* %265, i64 %20491
  %20493 = load i16, i16* %20492, align 2, !tbaa !393
  %20494 = insertelement <32 x i16> %20489, i16 %20493, i32 29
  %20495 = extractelement <32 x i32> %20344, i32 30
  %20496 = sext i32 %20495 to i64
  %20497 = getelementptr inbounds i16, i16* %265, i64 %20496
  %20498 = load i16, i16* %20497, align 2, !tbaa !393
  %20499 = insertelement <32 x i16> %20494, i16 %20498, i32 30
  %20500 = extractelement <32 x i32> %20344, i32 31
  %20501 = sext i32 %20500 to i64
  %20502 = getelementptr inbounds i16, i16* %265, i64 %20501
  %20503 = load i16, i16* %20502, align 2, !tbaa !393
  %20504 = insertelement <32 x i16> %20499, i16 %20503, i32 31
  %20505 = shufflevector <32 x i16> %20504, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20506 = sext i32 %read_input.s0.x.v2.base.s914 to i64
  %20507 = add nsw i64 %20309, %20506
  %20508 = getelementptr inbounds i16, i16* %read_input860, i64 %20507
  %20509 = getelementptr inbounds i16, i16* %20508, i64 -32
  %20510 = bitcast i16* %20509 to <16 x i16>*
  store <16 x i16> %20505, <16 x i16>* %20510, align 2, !tbaa !396
  %20511 = shufflevector <32 x i16> %20504, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20512 = getelementptr inbounds i16, i16* %20508, i64 -16
  %20513 = bitcast i16* %20512 to <16 x i16>*
  store <16 x i16> %20511, <16 x i16>* %20513, align 2, !tbaa !396
  %20514 = add nuw nsw i32 %read_input.s0.x.x913, 1
  %.not2796 = icmp eq i32 %20514, %219
  br i1 %.not2796, label %"end for read_input.s0.x.x912", label %"for read_input.s0.x.x911"

"end for read_input.s0.x.x912":                   ; preds = %"for read_input.s0.x.x911"
  %indvars.iv.next3495 = add nuw nsw i64 %indvars.iv3494, 1
  %.not2795 = icmp eq i64 %indvars.iv3494, %19806
  br i1 %.not2795, label %"end for read_input.s0.y.rebased908", label %"for read_input.s0.y.rebased907"

then_bb916:                                       ; preds = %pseudostack_alloc.exit3000
  %20515 = alloca i8*, i64 %296, align 32
  %20516 = bitcast i8** %20515 to i16*
  store i8** %20515, i8*** %297, align 8
  br label %"consume read_input918"

"consume read_input918":                          ; preds = %pseudostack_alloc.exit3000, %then_bb916
  %blur_x917 = phi i16* [ %20516, %then_bb916 ], [ %20315, %pseudostack_alloc.exit3000 ]
  br i1 %233, label %"produce blur_x922", label %"consume read_input918.after_bb919_crit_edge"

"consume read_input918.after_bb919_crit_edge":    ; preds = %"consume read_input918"
  %.pre3668 = and i32 %a393, 7
  br label %after_bb919

after_bb919:                                      ; preds = %"consume read_input918.after_bb919_crit_edge", %"produce blur_x922"
  %.pre-phi3669 = phi i32 [ %.pre3668, %"consume read_input918.after_bb919_crit_edge" ], [ %20577, %"produce blur_x922" ]
  %20517 = mul nsw i32 %.pre-phi3669, %a565
  %t1726924 = sub nsw i32 %20517, %t1689849
  br i1 %306, label %"for blur_y.s0.x.x.rebased927.preheader", label %"end for blur_y.s0.x.x.rebased928", !prof !386

"for blur_y.s0.x.x.rebased927.preheader":         ; preds = %after_bb919
  %20518 = sext i32 %t1726924 to i64
  br label %"for blur_y.s0.x.x.rebased927"

"produce blur_x922":                              ; preds = %"consume read_input918"
  %20519 = getelementptr inbounds i16, i16* %read_input860, i64 %300
  %20520 = getelementptr inbounds i16, i16* %20519, i64 -31
  %20521 = bitcast i16* %20520 to <16 x i16>*
  %20522 = load <16 x i16>, <16 x i16>* %20521, align 2, !tbaa !396
  %20523 = getelementptr inbounds i16, i16* %20519, i64 -15
  %20524 = bitcast i16* %20523 to <16 x i16>*
  %20525 = load <16 x i16>, <16 x i16>* %20524, align 2, !tbaa !396
  %20526 = getelementptr inbounds i16, i16* %20519, i64 -32
  %20527 = bitcast i16* %20526 to <16 x i16>*
  %20528 = load <16 x i16>, <16 x i16>* %20527, align 2, !tbaa !396
  %20529 = getelementptr inbounds i16, i16* %20519, i64 -16
  %20530 = bitcast i16* %20529 to <16 x i16>*
  %20531 = load <16 x i16>, <16 x i16>* %20530, align 2, !tbaa !396
  %20532 = getelementptr inbounds i16, i16* %20519, i64 -30
  %20533 = bitcast i16* %20532 to <16 x i16>*
  %20534 = load <16 x i16>, <16 x i16>* %20533, align 2, !tbaa !396
  %20535 = getelementptr inbounds i16, i16* %20519, i64 -14
  %20536 = bitcast i16* %20535 to <16 x i16>*
  %20537 = load <16 x i16>, <16 x i16>* %20536, align 2, !tbaa !396
  %20538 = getelementptr inbounds i16, i16* %20519, i64 -29
  %20539 = bitcast i16* %20538 to <16 x i16>*
  %20540 = load <16 x i16>, <16 x i16>* %20539, align 2, !tbaa !396
  %20541 = getelementptr inbounds i16, i16* %20519, i64 -13
  %20542 = bitcast i16* %20541 to <16 x i16>*
  %20543 = load <16 x i16>, <16 x i16>* %20542, align 2, !tbaa !396
  %20544 = getelementptr inbounds i16, i16* %20519, i64 -28
  %20545 = bitcast i16* %20544 to <16 x i16>*
  %20546 = load <16 x i16>, <16 x i16>* %20545, align 2, !tbaa !396
  %20547 = getelementptr inbounds i16, i16* %20519, i64 -12
  %20548 = bitcast i16* %20547 to <16 x i16>*
  %20549 = load <16 x i16>, <16 x i16>* %20548, align 2, !tbaa !396
  %20550 = getelementptr inbounds i16, i16* %20519, i64 -26
  %20551 = bitcast i16* %20550 to <16 x i16>*
  %20552 = load <16 x i16>, <16 x i16>* %20551, align 2, !tbaa !396
  %20553 = getelementptr inbounds i16, i16* %20519, i64 -10
  %20554 = bitcast i16* %20553 to <16 x i16>*
  %20555 = load <16 x i16>, <16 x i16>* %20554, align 2, !tbaa !396
  %20556 = getelementptr inbounds i16, i16* %20519, i64 -27
  %20557 = bitcast i16* %20556 to <16 x i16>*
  %20558 = load <16 x i16>, <16 x i16>* %20557, align 2, !tbaa !396
  %20559 = getelementptr inbounds i16, i16* %20519, i64 -11
  %20560 = bitcast i16* %20559 to <16 x i16>*
  %20561 = load <16 x i16>, <16 x i16>* %20560, align 2, !tbaa !396
  %20562 = add <16 x i16> %20528, %20522
  %20563 = add <16 x i16> %20562, %20534
  %20564 = add <16 x i16> %20563, %20540
  %20565 = add <16 x i16> %20564, %20546
  %20566 = add <16 x i16> %20565, %20552
  %20567 = add <16 x i16> %20566, %20558
  %20568 = add <16 x i16> %20531, %20525
  %20569 = add <16 x i16> %20568, %20537
  %20570 = add <16 x i16> %20569, %20543
  %20571 = add <16 x i16> %20570, %20549
  %20572 = add <16 x i16> %20571, %20555
  %20573 = add <16 x i16> %20572, %20561
  %20574 = shufflevector <16 x i16> %20567, <16 x i16> %20573, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20575 = udiv <32 x i16> %20574, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %20576 = shufflevector <32 x i16> %20575, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20577 = and i32 %a393, 7
  %20578 = zext i32 %20577 to i64
  %20579 = mul nsw i64 %303, %20578
  %20580 = add nsw i64 %305, %20579
  %20581 = getelementptr inbounds i16, i16* %blur_x917, i64 %20580
  %20582 = getelementptr inbounds i16, i16* %20581, i64 -32
  %20583 = bitcast i16* %20582 to <16 x i16>*
  store <16 x i16> %20576, <16 x i16>* %20583, align 2, !tbaa !399
  %20584 = shufflevector <32 x i16> %20575, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20585 = getelementptr inbounds i16, i16* %20581, i64 -16
  %20586 = bitcast i16* %20585 to <16 x i16>*
  store <16 x i16> %20584, <16 x i16>* %20586, align 2, !tbaa !399
  br label %after_bb919

"for blur_y.s0.x.x.rebased927":                   ; preds = %"for blur_y.s0.x.x.rebased927.preheader", %after_bb930
  %indvars.iv3496 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased927.preheader" ], [ %indvars.iv.next3497, %after_bb930 ]
  %20587 = add nsw i64 %indvars.iv3496, %307
  %20588 = icmp slt i64 %20587, 1
  %20589 = trunc i64 %20587 to i32
  %20590 = shl nsw i32 %20589, 5
  %20591 = icmp sgt i32 %202, %20590
  %20592 = or i1 %20588, %20591
  br i1 %20592, label %"produce blur_x933", label %after_bb930

"end for blur_y.s0.x.x.rebased928":               ; preds = %after_bb930, %after_bb919
  br i1 %308, label %"for blur_y.s0.x.x.rebased938.preheader", label %"end for blur_y.s0.x.x.rebased939", !prof !386

"for blur_y.s0.x.x.rebased938.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased928"
  %20593 = sext i32 %t1726924 to i64
  br label %"for blur_y.s0.x.x.rebased938"

after_bb930:                                      ; preds = %"for blur_y.s0.x.x.rebased927", %"produce blur_x933"
  %indvars.iv.next3497 = add nuw nsw i64 %indvars.iv3496, 1
  %.not2793 = icmp eq i64 %indvars.iv.next3497, %546
  br i1 %.not2793, label %"end for blur_y.s0.x.x.rebased928", label %"for blur_y.s0.x.x.rebased927"

"produce blur_x933":                              ; preds = %"for blur_y.s0.x.x.rebased927"
  %t712934 = sub i32 %20590, %t1689849
  %20594 = sext i32 %t712934 to i64
  %20595 = getelementptr inbounds i16, i16* %read_input860, i64 %20594
  %20596 = getelementptr inbounds i16, i16* %20595, i64 1
  %20597 = bitcast i16* %20596 to <16 x i16>*
  %20598 = load <16 x i16>, <16 x i16>* %20597, align 2, !tbaa !396
  %20599 = getelementptr inbounds i16, i16* %20595, i64 17
  %20600 = bitcast i16* %20599 to <16 x i16>*
  %20601 = load <16 x i16>, <16 x i16>* %20600, align 2, !tbaa !396
  %20602 = bitcast i16* %20595 to <16 x i16>*
  %20603 = load <16 x i16>, <16 x i16>* %20602, align 2, !tbaa !396
  %20604 = getelementptr inbounds i16, i16* %20595, i64 16
  %20605 = bitcast i16* %20604 to <16 x i16>*
  %20606 = load <16 x i16>, <16 x i16>* %20605, align 2, !tbaa !396
  %20607 = getelementptr inbounds i16, i16* %20595, i64 2
  %20608 = bitcast i16* %20607 to <16 x i16>*
  %20609 = load <16 x i16>, <16 x i16>* %20608, align 2, !tbaa !396
  %20610 = getelementptr inbounds i16, i16* %20595, i64 18
  %20611 = bitcast i16* %20610 to <16 x i16>*
  %20612 = load <16 x i16>, <16 x i16>* %20611, align 2, !tbaa !396
  %20613 = getelementptr inbounds i16, i16* %20595, i64 3
  %20614 = bitcast i16* %20613 to <16 x i16>*
  %20615 = load <16 x i16>, <16 x i16>* %20614, align 2, !tbaa !396
  %20616 = getelementptr inbounds i16, i16* %20595, i64 19
  %20617 = bitcast i16* %20616 to <16 x i16>*
  %20618 = load <16 x i16>, <16 x i16>* %20617, align 2, !tbaa !396
  %20619 = getelementptr inbounds i16, i16* %20595, i64 4
  %20620 = bitcast i16* %20619 to <16 x i16>*
  %20621 = load <16 x i16>, <16 x i16>* %20620, align 2, !tbaa !396
  %20622 = getelementptr inbounds i16, i16* %20595, i64 20
  %20623 = bitcast i16* %20622 to <16 x i16>*
  %20624 = load <16 x i16>, <16 x i16>* %20623, align 2, !tbaa !396
  %20625 = getelementptr inbounds i16, i16* %20595, i64 6
  %20626 = bitcast i16* %20625 to <16 x i16>*
  %20627 = load <16 x i16>, <16 x i16>* %20626, align 2, !tbaa !396
  %20628 = getelementptr inbounds i16, i16* %20595, i64 22
  %20629 = bitcast i16* %20628 to <16 x i16>*
  %20630 = load <16 x i16>, <16 x i16>* %20629, align 2, !tbaa !396
  %20631 = getelementptr inbounds i16, i16* %20595, i64 5
  %20632 = bitcast i16* %20631 to <16 x i16>*
  %20633 = load <16 x i16>, <16 x i16>* %20632, align 2, !tbaa !396
  %20634 = getelementptr inbounds i16, i16* %20595, i64 21
  %20635 = bitcast i16* %20634 to <16 x i16>*
  %20636 = load <16 x i16>, <16 x i16>* %20635, align 2, !tbaa !396
  %20637 = add <16 x i16> %20603, %20598
  %20638 = add <16 x i16> %20637, %20609
  %20639 = add <16 x i16> %20638, %20615
  %20640 = add <16 x i16> %20639, %20621
  %20641 = add <16 x i16> %20640, %20627
  %20642 = add <16 x i16> %20641, %20633
  %20643 = add <16 x i16> %20606, %20601
  %20644 = add <16 x i16> %20643, %20612
  %20645 = add <16 x i16> %20644, %20618
  %20646 = add <16 x i16> %20645, %20624
  %20647 = add <16 x i16> %20646, %20630
  %20648 = add <16 x i16> %20647, %20636
  %20649 = shufflevector <16 x i16> %20642, <16 x i16> %20648, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20650 = udiv <32 x i16> %20649, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %20651 = shufflevector <32 x i16> %20650, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20652 = shl nsw i64 %20587, 5
  %20653 = add nsw i64 %20652, %20518
  %20654 = getelementptr inbounds i16, i16* %blur_x917, i64 %20653
  %20655 = bitcast i16* %20654 to <16 x i16>*
  store <16 x i16> %20651, <16 x i16>* %20655, align 2, !tbaa !399
  %20656 = shufflevector <32 x i16> %20650, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20657 = getelementptr inbounds i16, i16* %20654, i64 16
  %20658 = bitcast i16* %20657 to <16 x i16>*
  store <16 x i16> %20656, <16 x i16>* %20658, align 2, !tbaa !399
  br label %after_bb930

"for blur_y.s0.x.x.rebased938":                   ; preds = %"for blur_y.s0.x.x.rebased938.preheader", %after_bb941
  %blur_y.s0.x.x.rebased940 = phi i32 [ %20664, %after_bb941 ], [ 0, %"for blur_y.s0.x.x.rebased938.preheader" ]
  %20659 = add nsw i32 %blur_y.s0.x.x.rebased940, %t1670852
  %20660 = icmp slt i32 %20659, 1
  %20661 = shl nsw i32 %20659, 5
  %20662 = icmp sgt i32 %202, %20661
  %20663 = or i1 %20660, %20662
  br i1 %20663, label %then_bb942, label %after_bb941

"end for blur_y.s0.x.x.rebased939":               ; preds = %after_bb941, %"end for blur_y.s0.x.x.rebased928"
  br i1 %233, label %"produce blur_x950", label %"end for blur_y.s0.x.x.rebased939.after_bb947_crit_edge"

"end for blur_y.s0.x.x.rebased939.after_bb947_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased939"
  %.pre3670 = add nsw i32 %a393, 1
  %.pre3672 = and i32 %.pre3670, 7
  br label %after_bb947

after_bb941:                                      ; preds = %"for blur_y.s0.x.x.rebased938", %then_bb942
  %20664 = add nuw nsw i32 %blur_y.s0.x.x.rebased940, 1
  %.not2792 = icmp eq i32 %20664, %t1727936
  br i1 %.not2792, label %"end for blur_y.s0.x.x.rebased939", label %"for blur_y.s0.x.x.rebased938"

then_bb942:                                       ; preds = %"for blur_y.s0.x.x.rebased938"
  %20665 = icmp sgt i32 %t1691, %20661
  %b612 = select i1 %20665, i32 %20661, i32 %t1691
  %20666 = icmp slt i32 %b612, %202
  %blur_x.s0.x.v1.base.s945 = select i1 %20666, i32 %b612, i32 %202
  %t714946 = sub i32 %blur_x.s0.x.v1.base.s945, %t1689849
  %20667 = sext i32 %t714946 to i64
  %20668 = getelementptr inbounds i16, i16* %read_input860, i64 %20667
  %20669 = getelementptr inbounds i16, i16* %20668, i64 1
  %20670 = bitcast i16* %20669 to <16 x i16>*
  %20671 = load <16 x i16>, <16 x i16>* %20670, align 2, !tbaa !396
  %20672 = getelementptr inbounds i16, i16* %20668, i64 17
  %20673 = bitcast i16* %20672 to <16 x i16>*
  %20674 = load <16 x i16>, <16 x i16>* %20673, align 2, !tbaa !396
  %20675 = bitcast i16* %20668 to <16 x i16>*
  %20676 = load <16 x i16>, <16 x i16>* %20675, align 2, !tbaa !396
  %20677 = getelementptr inbounds i16, i16* %20668, i64 16
  %20678 = bitcast i16* %20677 to <16 x i16>*
  %20679 = load <16 x i16>, <16 x i16>* %20678, align 2, !tbaa !396
  %20680 = getelementptr inbounds i16, i16* %20668, i64 2
  %20681 = bitcast i16* %20680 to <16 x i16>*
  %20682 = load <16 x i16>, <16 x i16>* %20681, align 2, !tbaa !396
  %20683 = getelementptr inbounds i16, i16* %20668, i64 18
  %20684 = bitcast i16* %20683 to <16 x i16>*
  %20685 = load <16 x i16>, <16 x i16>* %20684, align 2, !tbaa !396
  %20686 = getelementptr inbounds i16, i16* %20668, i64 3
  %20687 = bitcast i16* %20686 to <16 x i16>*
  %20688 = load <16 x i16>, <16 x i16>* %20687, align 2, !tbaa !396
  %20689 = getelementptr inbounds i16, i16* %20668, i64 19
  %20690 = bitcast i16* %20689 to <16 x i16>*
  %20691 = load <16 x i16>, <16 x i16>* %20690, align 2, !tbaa !396
  %20692 = getelementptr inbounds i16, i16* %20668, i64 4
  %20693 = bitcast i16* %20692 to <16 x i16>*
  %20694 = load <16 x i16>, <16 x i16>* %20693, align 2, !tbaa !396
  %20695 = getelementptr inbounds i16, i16* %20668, i64 20
  %20696 = bitcast i16* %20695 to <16 x i16>*
  %20697 = load <16 x i16>, <16 x i16>* %20696, align 2, !tbaa !396
  %20698 = getelementptr inbounds i16, i16* %20668, i64 6
  %20699 = bitcast i16* %20698 to <16 x i16>*
  %20700 = load <16 x i16>, <16 x i16>* %20699, align 2, !tbaa !396
  %20701 = getelementptr inbounds i16, i16* %20668, i64 22
  %20702 = bitcast i16* %20701 to <16 x i16>*
  %20703 = load <16 x i16>, <16 x i16>* %20702, align 2, !tbaa !396
  %20704 = getelementptr inbounds i16, i16* %20668, i64 5
  %20705 = bitcast i16* %20704 to <16 x i16>*
  %20706 = load <16 x i16>, <16 x i16>* %20705, align 2, !tbaa !396
  %20707 = getelementptr inbounds i16, i16* %20668, i64 21
  %20708 = bitcast i16* %20707 to <16 x i16>*
  %20709 = load <16 x i16>, <16 x i16>* %20708, align 2, !tbaa !396
  %20710 = add <16 x i16> %20676, %20671
  %20711 = add <16 x i16> %20710, %20682
  %20712 = add <16 x i16> %20711, %20688
  %20713 = add <16 x i16> %20712, %20694
  %20714 = add <16 x i16> %20713, %20700
  %20715 = add <16 x i16> %20714, %20706
  %20716 = add <16 x i16> %20679, %20674
  %20717 = add <16 x i16> %20716, %20685
  %20718 = add <16 x i16> %20717, %20691
  %20719 = add <16 x i16> %20718, %20697
  %20720 = add <16 x i16> %20719, %20703
  %20721 = add <16 x i16> %20720, %20709
  %20722 = shufflevector <16 x i16> %20715, <16 x i16> %20721, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20723 = udiv <32 x i16> %20722, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %20724 = shufflevector <32 x i16> %20723, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20725 = sext i32 %blur_x.s0.x.v1.base.s945 to i64
  %20726 = add nsw i64 %20725, %20593
  %20727 = getelementptr inbounds i16, i16* %blur_x917, i64 %20726
  %20728 = bitcast i16* %20727 to <16 x i16>*
  store <16 x i16> %20724, <16 x i16>* %20728, align 2, !tbaa !399
  %20729 = shufflevector <32 x i16> %20723, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20730 = getelementptr inbounds i16, i16* %20727, i64 16
  %20731 = bitcast i16* %20730 to <16 x i16>*
  store <16 x i16> %20729, <16 x i16>* %20731, align 2, !tbaa !399
  br label %after_bb941

after_bb947:                                      ; preds = %"end for blur_y.s0.x.x.rebased939.after_bb947_crit_edge", %"produce blur_x950"
  %.pre-phi3673 = phi i32 [ %.pre3672, %"end for blur_y.s0.x.x.rebased939.after_bb947_crit_edge" ], [ %20793, %"produce blur_x950" ]
  %20732 = mul nsw i32 %.pre-phi3673, %a565
  %t1732952 = sub nsw i32 %20732, %t1689849
  br i1 %306, label %"for blur_y.s0.x.x.rebased955.preheader", label %"end for blur_y.s0.x.x.rebased956", !prof !386

"for blur_y.s0.x.x.rebased955.preheader":         ; preds = %after_bb947
  %20733 = sext i32 %t1732952 to i64
  br label %"for blur_y.s0.x.x.rebased955"

"produce blur_x950":                              ; preds = %"end for blur_y.s0.x.x.rebased939"
  %20734 = getelementptr inbounds i16, i16* %read_input860, i64 %318
  %20735 = getelementptr inbounds i16, i16* %20734, i64 -31
  %20736 = bitcast i16* %20735 to <16 x i16>*
  %20737 = load <16 x i16>, <16 x i16>* %20736, align 2, !tbaa !396
  %20738 = getelementptr inbounds i16, i16* %20734, i64 -15
  %20739 = bitcast i16* %20738 to <16 x i16>*
  %20740 = load <16 x i16>, <16 x i16>* %20739, align 2, !tbaa !396
  %20741 = getelementptr inbounds i16, i16* %20734, i64 -32
  %20742 = bitcast i16* %20741 to <16 x i16>*
  %20743 = load <16 x i16>, <16 x i16>* %20742, align 2, !tbaa !396
  %20744 = getelementptr inbounds i16, i16* %20734, i64 -16
  %20745 = bitcast i16* %20744 to <16 x i16>*
  %20746 = load <16 x i16>, <16 x i16>* %20745, align 2, !tbaa !396
  %20747 = getelementptr inbounds i16, i16* %20734, i64 -30
  %20748 = bitcast i16* %20747 to <16 x i16>*
  %20749 = load <16 x i16>, <16 x i16>* %20748, align 2, !tbaa !396
  %20750 = getelementptr inbounds i16, i16* %20734, i64 -14
  %20751 = bitcast i16* %20750 to <16 x i16>*
  %20752 = load <16 x i16>, <16 x i16>* %20751, align 2, !tbaa !396
  %20753 = getelementptr inbounds i16, i16* %20734, i64 -29
  %20754 = bitcast i16* %20753 to <16 x i16>*
  %20755 = load <16 x i16>, <16 x i16>* %20754, align 2, !tbaa !396
  %20756 = getelementptr inbounds i16, i16* %20734, i64 -13
  %20757 = bitcast i16* %20756 to <16 x i16>*
  %20758 = load <16 x i16>, <16 x i16>* %20757, align 2, !tbaa !396
  %20759 = getelementptr inbounds i16, i16* %20734, i64 -28
  %20760 = bitcast i16* %20759 to <16 x i16>*
  %20761 = load <16 x i16>, <16 x i16>* %20760, align 2, !tbaa !396
  %20762 = getelementptr inbounds i16, i16* %20734, i64 -12
  %20763 = bitcast i16* %20762 to <16 x i16>*
  %20764 = load <16 x i16>, <16 x i16>* %20763, align 2, !tbaa !396
  %20765 = getelementptr inbounds i16, i16* %20734, i64 -26
  %20766 = bitcast i16* %20765 to <16 x i16>*
  %20767 = load <16 x i16>, <16 x i16>* %20766, align 2, !tbaa !396
  %20768 = getelementptr inbounds i16, i16* %20734, i64 -10
  %20769 = bitcast i16* %20768 to <16 x i16>*
  %20770 = load <16 x i16>, <16 x i16>* %20769, align 2, !tbaa !396
  %20771 = getelementptr inbounds i16, i16* %20734, i64 -27
  %20772 = bitcast i16* %20771 to <16 x i16>*
  %20773 = load <16 x i16>, <16 x i16>* %20772, align 2, !tbaa !396
  %20774 = getelementptr inbounds i16, i16* %20734, i64 -11
  %20775 = bitcast i16* %20774 to <16 x i16>*
  %20776 = load <16 x i16>, <16 x i16>* %20775, align 2, !tbaa !396
  %20777 = add <16 x i16> %20743, %20737
  %20778 = add <16 x i16> %20777, %20749
  %20779 = add <16 x i16> %20778, %20755
  %20780 = add <16 x i16> %20779, %20761
  %20781 = add <16 x i16> %20780, %20767
  %20782 = add <16 x i16> %20781, %20773
  %20783 = add <16 x i16> %20746, %20740
  %20784 = add <16 x i16> %20783, %20752
  %20785 = add <16 x i16> %20784, %20758
  %20786 = add <16 x i16> %20785, %20764
  %20787 = add <16 x i16> %20786, %20770
  %20788 = add <16 x i16> %20787, %20776
  %20789 = shufflevector <16 x i16> %20782, <16 x i16> %20788, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20790 = udiv <32 x i16> %20789, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %20791 = shufflevector <32 x i16> %20790, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20792 = add nsw i32 %a393, 1
  %20793 = and i32 %20792, 7
  %20794 = zext i32 %20793 to i64
  %20795 = mul nsw i64 %303, %20794
  %20796 = add nsw i64 %305, %20795
  %20797 = getelementptr inbounds i16, i16* %blur_x917, i64 %20796
  %20798 = getelementptr inbounds i16, i16* %20797, i64 -32
  %20799 = bitcast i16* %20798 to <16 x i16>*
  store <16 x i16> %20791, <16 x i16>* %20799, align 2, !tbaa !399
  %20800 = shufflevector <32 x i16> %20790, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20801 = getelementptr inbounds i16, i16* %20797, i64 -16
  %20802 = bitcast i16* %20801 to <16 x i16>*
  store <16 x i16> %20800, <16 x i16>* %20802, align 2, !tbaa !399
  br label %after_bb947

"for blur_y.s0.x.x.rebased955":                   ; preds = %"for blur_y.s0.x.x.rebased955.preheader", %after_bb958
  %indvars.iv3498 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased955.preheader" ], [ %indvars.iv.next3499, %after_bb958 ]
  %20803 = add nsw i64 %indvars.iv3498, %307
  %20804 = icmp slt i64 %20803, 1
  %20805 = trunc i64 %20803 to i32
  %20806 = shl nsw i32 %20805, 5
  %20807 = icmp sgt i32 %202, %20806
  %20808 = or i1 %20804, %20807
  br i1 %20808, label %"produce blur_x961", label %after_bb958

"end for blur_y.s0.x.x.rebased956":               ; preds = %after_bb958, %after_bb947
  br i1 %308, label %"for blur_y.s0.x.x.rebased966.preheader", label %"end for blur_y.s0.x.x.rebased967", !prof !386

"for blur_y.s0.x.x.rebased966.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased956"
  %20809 = sext i32 %t1732952 to i64
  br label %"for blur_y.s0.x.x.rebased966"

after_bb958:                                      ; preds = %"for blur_y.s0.x.x.rebased955", %"produce blur_x961"
  %indvars.iv.next3499 = add nuw nsw i64 %indvars.iv3498, 1
  %.not2789 = icmp eq i64 %indvars.iv.next3499, %546
  br i1 %.not2789, label %"end for blur_y.s0.x.x.rebased956", label %"for blur_y.s0.x.x.rebased955"

"produce blur_x961":                              ; preds = %"for blur_y.s0.x.x.rebased955"
  %t718962 = add nsw i32 %319, %20806
  %20810 = sext i32 %t718962 to i64
  %20811 = getelementptr inbounds i16, i16* %read_input860, i64 %20810
  %20812 = getelementptr inbounds i16, i16* %20811, i64 1
  %20813 = bitcast i16* %20812 to <16 x i16>*
  %20814 = load <16 x i16>, <16 x i16>* %20813, align 2, !tbaa !396
  %20815 = getelementptr inbounds i16, i16* %20811, i64 17
  %20816 = bitcast i16* %20815 to <16 x i16>*
  %20817 = load <16 x i16>, <16 x i16>* %20816, align 2, !tbaa !396
  %20818 = bitcast i16* %20811 to <16 x i16>*
  %20819 = load <16 x i16>, <16 x i16>* %20818, align 2, !tbaa !396
  %20820 = getelementptr inbounds i16, i16* %20811, i64 16
  %20821 = bitcast i16* %20820 to <16 x i16>*
  %20822 = load <16 x i16>, <16 x i16>* %20821, align 2, !tbaa !396
  %20823 = getelementptr inbounds i16, i16* %20811, i64 2
  %20824 = bitcast i16* %20823 to <16 x i16>*
  %20825 = load <16 x i16>, <16 x i16>* %20824, align 2, !tbaa !396
  %20826 = getelementptr inbounds i16, i16* %20811, i64 18
  %20827 = bitcast i16* %20826 to <16 x i16>*
  %20828 = load <16 x i16>, <16 x i16>* %20827, align 2, !tbaa !396
  %20829 = getelementptr inbounds i16, i16* %20811, i64 3
  %20830 = bitcast i16* %20829 to <16 x i16>*
  %20831 = load <16 x i16>, <16 x i16>* %20830, align 2, !tbaa !396
  %20832 = getelementptr inbounds i16, i16* %20811, i64 19
  %20833 = bitcast i16* %20832 to <16 x i16>*
  %20834 = load <16 x i16>, <16 x i16>* %20833, align 2, !tbaa !396
  %20835 = getelementptr inbounds i16, i16* %20811, i64 4
  %20836 = bitcast i16* %20835 to <16 x i16>*
  %20837 = load <16 x i16>, <16 x i16>* %20836, align 2, !tbaa !396
  %20838 = getelementptr inbounds i16, i16* %20811, i64 20
  %20839 = bitcast i16* %20838 to <16 x i16>*
  %20840 = load <16 x i16>, <16 x i16>* %20839, align 2, !tbaa !396
  %20841 = getelementptr inbounds i16, i16* %20811, i64 6
  %20842 = bitcast i16* %20841 to <16 x i16>*
  %20843 = load <16 x i16>, <16 x i16>* %20842, align 2, !tbaa !396
  %20844 = getelementptr inbounds i16, i16* %20811, i64 22
  %20845 = bitcast i16* %20844 to <16 x i16>*
  %20846 = load <16 x i16>, <16 x i16>* %20845, align 2, !tbaa !396
  %20847 = getelementptr inbounds i16, i16* %20811, i64 5
  %20848 = bitcast i16* %20847 to <16 x i16>*
  %20849 = load <16 x i16>, <16 x i16>* %20848, align 2, !tbaa !396
  %20850 = getelementptr inbounds i16, i16* %20811, i64 21
  %20851 = bitcast i16* %20850 to <16 x i16>*
  %20852 = load <16 x i16>, <16 x i16>* %20851, align 2, !tbaa !396
  %20853 = add <16 x i16> %20819, %20814
  %20854 = add <16 x i16> %20853, %20825
  %20855 = add <16 x i16> %20854, %20831
  %20856 = add <16 x i16> %20855, %20837
  %20857 = add <16 x i16> %20856, %20843
  %20858 = add <16 x i16> %20857, %20849
  %20859 = add <16 x i16> %20822, %20817
  %20860 = add <16 x i16> %20859, %20828
  %20861 = add <16 x i16> %20860, %20834
  %20862 = add <16 x i16> %20861, %20840
  %20863 = add <16 x i16> %20862, %20846
  %20864 = add <16 x i16> %20863, %20852
  %20865 = shufflevector <16 x i16> %20858, <16 x i16> %20864, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20866 = udiv <32 x i16> %20865, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %20867 = shufflevector <32 x i16> %20866, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20868 = shl nsw i64 %20803, 5
  %20869 = add nsw i64 %20868, %20733
  %20870 = getelementptr inbounds i16, i16* %blur_x917, i64 %20869
  %20871 = bitcast i16* %20870 to <16 x i16>*
  store <16 x i16> %20867, <16 x i16>* %20871, align 2, !tbaa !399
  %20872 = shufflevector <32 x i16> %20866, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20873 = getelementptr inbounds i16, i16* %20870, i64 16
  %20874 = bitcast i16* %20873 to <16 x i16>*
  store <16 x i16> %20872, <16 x i16>* %20874, align 2, !tbaa !399
  br label %after_bb958

"for blur_y.s0.x.x.rebased966":                   ; preds = %"for blur_y.s0.x.x.rebased966.preheader", %after_bb969
  %blur_y.s0.x.x.rebased968 = phi i32 [ %20880, %after_bb969 ], [ 0, %"for blur_y.s0.x.x.rebased966.preheader" ]
  %20875 = add nsw i32 %blur_y.s0.x.x.rebased968, %t1670852
  %20876 = icmp slt i32 %20875, 1
  %20877 = shl nsw i32 %20875, 5
  %20878 = icmp sgt i32 %202, %20877
  %20879 = or i1 %20876, %20878
  br i1 %20879, label %then_bb970, label %after_bb969

"end for blur_y.s0.x.x.rebased967":               ; preds = %after_bb969, %"end for blur_y.s0.x.x.rebased956"
  br i1 %233, label %"produce blur_x980", label %"end for blur_y.s0.x.x.rebased967.after_bb977_crit_edge"

"end for blur_y.s0.x.x.rebased967.after_bb977_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased967"
  %.pre3674 = add nsw i32 %a393, 2
  %.pre3676 = and i32 %.pre3674, 7
  br label %after_bb977

after_bb969:                                      ; preds = %"for blur_y.s0.x.x.rebased966", %then_bb970
  %20880 = add nuw nsw i32 %blur_y.s0.x.x.rebased968, 1
  %.not2788 = icmp eq i32 %20880, %t1727936
  br i1 %.not2788, label %"end for blur_y.s0.x.x.rebased967", label %"for blur_y.s0.x.x.rebased966"

then_bb970:                                       ; preds = %"for blur_y.s0.x.x.rebased966"
  %20881 = icmp sgt i32 %t1691, %20877
  %b736 = select i1 %20881, i32 %20877, i32 %t1691
  %20882 = icmp slt i32 %b736, %202
  %blur_x.s0.x.v1.base.s975 = select i1 %20882, i32 %b736, i32 %202
  %t720976 = add nsw i32 %319, %blur_x.s0.x.v1.base.s975
  %20883 = sext i32 %t720976 to i64
  %20884 = getelementptr inbounds i16, i16* %read_input860, i64 %20883
  %20885 = getelementptr inbounds i16, i16* %20884, i64 1
  %20886 = bitcast i16* %20885 to <16 x i16>*
  %20887 = load <16 x i16>, <16 x i16>* %20886, align 2, !tbaa !396
  %20888 = getelementptr inbounds i16, i16* %20884, i64 17
  %20889 = bitcast i16* %20888 to <16 x i16>*
  %20890 = load <16 x i16>, <16 x i16>* %20889, align 2, !tbaa !396
  %20891 = bitcast i16* %20884 to <16 x i16>*
  %20892 = load <16 x i16>, <16 x i16>* %20891, align 2, !tbaa !396
  %20893 = getelementptr inbounds i16, i16* %20884, i64 16
  %20894 = bitcast i16* %20893 to <16 x i16>*
  %20895 = load <16 x i16>, <16 x i16>* %20894, align 2, !tbaa !396
  %20896 = getelementptr inbounds i16, i16* %20884, i64 2
  %20897 = bitcast i16* %20896 to <16 x i16>*
  %20898 = load <16 x i16>, <16 x i16>* %20897, align 2, !tbaa !396
  %20899 = getelementptr inbounds i16, i16* %20884, i64 18
  %20900 = bitcast i16* %20899 to <16 x i16>*
  %20901 = load <16 x i16>, <16 x i16>* %20900, align 2, !tbaa !396
  %20902 = getelementptr inbounds i16, i16* %20884, i64 3
  %20903 = bitcast i16* %20902 to <16 x i16>*
  %20904 = load <16 x i16>, <16 x i16>* %20903, align 2, !tbaa !396
  %20905 = getelementptr inbounds i16, i16* %20884, i64 19
  %20906 = bitcast i16* %20905 to <16 x i16>*
  %20907 = load <16 x i16>, <16 x i16>* %20906, align 2, !tbaa !396
  %20908 = getelementptr inbounds i16, i16* %20884, i64 4
  %20909 = bitcast i16* %20908 to <16 x i16>*
  %20910 = load <16 x i16>, <16 x i16>* %20909, align 2, !tbaa !396
  %20911 = getelementptr inbounds i16, i16* %20884, i64 20
  %20912 = bitcast i16* %20911 to <16 x i16>*
  %20913 = load <16 x i16>, <16 x i16>* %20912, align 2, !tbaa !396
  %20914 = getelementptr inbounds i16, i16* %20884, i64 6
  %20915 = bitcast i16* %20914 to <16 x i16>*
  %20916 = load <16 x i16>, <16 x i16>* %20915, align 2, !tbaa !396
  %20917 = getelementptr inbounds i16, i16* %20884, i64 22
  %20918 = bitcast i16* %20917 to <16 x i16>*
  %20919 = load <16 x i16>, <16 x i16>* %20918, align 2, !tbaa !396
  %20920 = getelementptr inbounds i16, i16* %20884, i64 5
  %20921 = bitcast i16* %20920 to <16 x i16>*
  %20922 = load <16 x i16>, <16 x i16>* %20921, align 2, !tbaa !396
  %20923 = getelementptr inbounds i16, i16* %20884, i64 21
  %20924 = bitcast i16* %20923 to <16 x i16>*
  %20925 = load <16 x i16>, <16 x i16>* %20924, align 2, !tbaa !396
  %20926 = add <16 x i16> %20892, %20887
  %20927 = add <16 x i16> %20926, %20898
  %20928 = add <16 x i16> %20927, %20904
  %20929 = add <16 x i16> %20928, %20910
  %20930 = add <16 x i16> %20929, %20916
  %20931 = add <16 x i16> %20930, %20922
  %20932 = add <16 x i16> %20895, %20890
  %20933 = add <16 x i16> %20932, %20901
  %20934 = add <16 x i16> %20933, %20907
  %20935 = add <16 x i16> %20934, %20913
  %20936 = add <16 x i16> %20935, %20919
  %20937 = add <16 x i16> %20936, %20925
  %20938 = shufflevector <16 x i16> %20931, <16 x i16> %20937, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20939 = udiv <32 x i16> %20938, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %20940 = shufflevector <32 x i16> %20939, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20941 = sext i32 %blur_x.s0.x.v1.base.s975 to i64
  %20942 = add nsw i64 %20941, %20809
  %20943 = getelementptr inbounds i16, i16* %blur_x917, i64 %20942
  %20944 = bitcast i16* %20943 to <16 x i16>*
  store <16 x i16> %20940, <16 x i16>* %20944, align 2, !tbaa !399
  %20945 = shufflevector <32 x i16> %20939, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20946 = getelementptr inbounds i16, i16* %20943, i64 16
  %20947 = bitcast i16* %20946 to <16 x i16>*
  store <16 x i16> %20945, <16 x i16>* %20947, align 2, !tbaa !399
  br label %after_bb969

after_bb977:                                      ; preds = %"end for blur_y.s0.x.x.rebased967.after_bb977_crit_edge", %"produce blur_x980"
  %.pre-phi3677 = phi i32 [ %.pre3676, %"end for blur_y.s0.x.x.rebased967.after_bb977_crit_edge" ], [ %21009, %"produce blur_x980" ]
  %20948 = mul nsw i32 %.pre-phi3677, %a565
  %t1738982 = sub nsw i32 %20948, %t1689849
  br i1 %306, label %"for blur_y.s0.x.x.rebased985.preheader", label %"end for blur_y.s0.x.x.rebased986", !prof !386

"for blur_y.s0.x.x.rebased985.preheader":         ; preds = %after_bb977
  %20949 = sext i32 %t1738982 to i64
  br label %"for blur_y.s0.x.x.rebased985"

"produce blur_x980":                              ; preds = %"end for blur_y.s0.x.x.rebased967"
  %20950 = getelementptr inbounds i16, i16* %read_input860, i64 %324
  %20951 = getelementptr inbounds i16, i16* %20950, i64 -31
  %20952 = bitcast i16* %20951 to <16 x i16>*
  %20953 = load <16 x i16>, <16 x i16>* %20952, align 2, !tbaa !396
  %20954 = getelementptr inbounds i16, i16* %20950, i64 -15
  %20955 = bitcast i16* %20954 to <16 x i16>*
  %20956 = load <16 x i16>, <16 x i16>* %20955, align 2, !tbaa !396
  %20957 = getelementptr inbounds i16, i16* %20950, i64 -32
  %20958 = bitcast i16* %20957 to <16 x i16>*
  %20959 = load <16 x i16>, <16 x i16>* %20958, align 2, !tbaa !396
  %20960 = getelementptr inbounds i16, i16* %20950, i64 -16
  %20961 = bitcast i16* %20960 to <16 x i16>*
  %20962 = load <16 x i16>, <16 x i16>* %20961, align 2, !tbaa !396
  %20963 = getelementptr inbounds i16, i16* %20950, i64 -30
  %20964 = bitcast i16* %20963 to <16 x i16>*
  %20965 = load <16 x i16>, <16 x i16>* %20964, align 2, !tbaa !396
  %20966 = getelementptr inbounds i16, i16* %20950, i64 -14
  %20967 = bitcast i16* %20966 to <16 x i16>*
  %20968 = load <16 x i16>, <16 x i16>* %20967, align 2, !tbaa !396
  %20969 = getelementptr inbounds i16, i16* %20950, i64 -29
  %20970 = bitcast i16* %20969 to <16 x i16>*
  %20971 = load <16 x i16>, <16 x i16>* %20970, align 2, !tbaa !396
  %20972 = getelementptr inbounds i16, i16* %20950, i64 -13
  %20973 = bitcast i16* %20972 to <16 x i16>*
  %20974 = load <16 x i16>, <16 x i16>* %20973, align 2, !tbaa !396
  %20975 = getelementptr inbounds i16, i16* %20950, i64 -28
  %20976 = bitcast i16* %20975 to <16 x i16>*
  %20977 = load <16 x i16>, <16 x i16>* %20976, align 2, !tbaa !396
  %20978 = getelementptr inbounds i16, i16* %20950, i64 -12
  %20979 = bitcast i16* %20978 to <16 x i16>*
  %20980 = load <16 x i16>, <16 x i16>* %20979, align 2, !tbaa !396
  %20981 = getelementptr inbounds i16, i16* %20950, i64 -26
  %20982 = bitcast i16* %20981 to <16 x i16>*
  %20983 = load <16 x i16>, <16 x i16>* %20982, align 2, !tbaa !396
  %20984 = getelementptr inbounds i16, i16* %20950, i64 -10
  %20985 = bitcast i16* %20984 to <16 x i16>*
  %20986 = load <16 x i16>, <16 x i16>* %20985, align 2, !tbaa !396
  %20987 = getelementptr inbounds i16, i16* %20950, i64 -27
  %20988 = bitcast i16* %20987 to <16 x i16>*
  %20989 = load <16 x i16>, <16 x i16>* %20988, align 2, !tbaa !396
  %20990 = getelementptr inbounds i16, i16* %20950, i64 -11
  %20991 = bitcast i16* %20990 to <16 x i16>*
  %20992 = load <16 x i16>, <16 x i16>* %20991, align 2, !tbaa !396
  %20993 = add <16 x i16> %20959, %20953
  %20994 = add <16 x i16> %20993, %20965
  %20995 = add <16 x i16> %20994, %20971
  %20996 = add <16 x i16> %20995, %20977
  %20997 = add <16 x i16> %20996, %20983
  %20998 = add <16 x i16> %20997, %20989
  %20999 = add <16 x i16> %20962, %20956
  %21000 = add <16 x i16> %20999, %20968
  %21001 = add <16 x i16> %21000, %20974
  %21002 = add <16 x i16> %21001, %20980
  %21003 = add <16 x i16> %21002, %20986
  %21004 = add <16 x i16> %21003, %20992
  %21005 = shufflevector <16 x i16> %20998, <16 x i16> %21004, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21006 = udiv <32 x i16> %21005, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21007 = shufflevector <32 x i16> %21006, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21008 = add nsw i32 %a393, 2
  %21009 = and i32 %21008, 7
  %21010 = zext i32 %21009 to i64
  %21011 = mul nsw i64 %303, %21010
  %21012 = add nsw i64 %305, %21011
  %21013 = getelementptr inbounds i16, i16* %blur_x917, i64 %21012
  %21014 = getelementptr inbounds i16, i16* %21013, i64 -32
  %21015 = bitcast i16* %21014 to <16 x i16>*
  store <16 x i16> %21007, <16 x i16>* %21015, align 2, !tbaa !399
  %21016 = shufflevector <32 x i16> %21006, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21017 = getelementptr inbounds i16, i16* %21013, i64 -16
  %21018 = bitcast i16* %21017 to <16 x i16>*
  store <16 x i16> %21016, <16 x i16>* %21018, align 2, !tbaa !399
  br label %after_bb977

"for blur_y.s0.x.x.rebased985":                   ; preds = %"for blur_y.s0.x.x.rebased985.preheader", %after_bb988
  %indvars.iv3500 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased985.preheader" ], [ %indvars.iv.next3501, %after_bb988 ]
  %21019 = add nsw i64 %indvars.iv3500, %307
  %21020 = icmp slt i64 %21019, 1
  %21021 = trunc i64 %21019 to i32
  %21022 = shl nsw i32 %21021, 5
  %21023 = icmp sgt i32 %202, %21022
  %21024 = or i1 %21020, %21023
  br i1 %21024, label %"produce blur_x991", label %after_bb988

"end for blur_y.s0.x.x.rebased986":               ; preds = %after_bb988, %after_bb977
  br i1 %308, label %"for blur_y.s0.x.x.rebased996.preheader", label %"end for blur_y.s0.x.x.rebased997", !prof !386

"for blur_y.s0.x.x.rebased996.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased986"
  %21025 = sext i32 %t1738982 to i64
  br label %"for blur_y.s0.x.x.rebased996"

after_bb988:                                      ; preds = %"for blur_y.s0.x.x.rebased985", %"produce blur_x991"
  %indvars.iv.next3501 = add nuw nsw i64 %indvars.iv3500, 1
  %.not2785 = icmp eq i64 %indvars.iv.next3501, %546
  br i1 %.not2785, label %"end for blur_y.s0.x.x.rebased986", label %"for blur_y.s0.x.x.rebased985"

"produce blur_x991":                              ; preds = %"for blur_y.s0.x.x.rebased985"
  %t724992 = add nsw i32 %326, %21022
  %21026 = sext i32 %t724992 to i64
  %21027 = getelementptr inbounds i16, i16* %read_input860, i64 %21026
  %21028 = getelementptr inbounds i16, i16* %21027, i64 1
  %21029 = bitcast i16* %21028 to <16 x i16>*
  %21030 = load <16 x i16>, <16 x i16>* %21029, align 2, !tbaa !396
  %21031 = getelementptr inbounds i16, i16* %21027, i64 17
  %21032 = bitcast i16* %21031 to <16 x i16>*
  %21033 = load <16 x i16>, <16 x i16>* %21032, align 2, !tbaa !396
  %21034 = bitcast i16* %21027 to <16 x i16>*
  %21035 = load <16 x i16>, <16 x i16>* %21034, align 2, !tbaa !396
  %21036 = getelementptr inbounds i16, i16* %21027, i64 16
  %21037 = bitcast i16* %21036 to <16 x i16>*
  %21038 = load <16 x i16>, <16 x i16>* %21037, align 2, !tbaa !396
  %21039 = getelementptr inbounds i16, i16* %21027, i64 2
  %21040 = bitcast i16* %21039 to <16 x i16>*
  %21041 = load <16 x i16>, <16 x i16>* %21040, align 2, !tbaa !396
  %21042 = getelementptr inbounds i16, i16* %21027, i64 18
  %21043 = bitcast i16* %21042 to <16 x i16>*
  %21044 = load <16 x i16>, <16 x i16>* %21043, align 2, !tbaa !396
  %21045 = getelementptr inbounds i16, i16* %21027, i64 3
  %21046 = bitcast i16* %21045 to <16 x i16>*
  %21047 = load <16 x i16>, <16 x i16>* %21046, align 2, !tbaa !396
  %21048 = getelementptr inbounds i16, i16* %21027, i64 19
  %21049 = bitcast i16* %21048 to <16 x i16>*
  %21050 = load <16 x i16>, <16 x i16>* %21049, align 2, !tbaa !396
  %21051 = getelementptr inbounds i16, i16* %21027, i64 4
  %21052 = bitcast i16* %21051 to <16 x i16>*
  %21053 = load <16 x i16>, <16 x i16>* %21052, align 2, !tbaa !396
  %21054 = getelementptr inbounds i16, i16* %21027, i64 20
  %21055 = bitcast i16* %21054 to <16 x i16>*
  %21056 = load <16 x i16>, <16 x i16>* %21055, align 2, !tbaa !396
  %21057 = getelementptr inbounds i16, i16* %21027, i64 6
  %21058 = bitcast i16* %21057 to <16 x i16>*
  %21059 = load <16 x i16>, <16 x i16>* %21058, align 2, !tbaa !396
  %21060 = getelementptr inbounds i16, i16* %21027, i64 22
  %21061 = bitcast i16* %21060 to <16 x i16>*
  %21062 = load <16 x i16>, <16 x i16>* %21061, align 2, !tbaa !396
  %21063 = getelementptr inbounds i16, i16* %21027, i64 5
  %21064 = bitcast i16* %21063 to <16 x i16>*
  %21065 = load <16 x i16>, <16 x i16>* %21064, align 2, !tbaa !396
  %21066 = getelementptr inbounds i16, i16* %21027, i64 21
  %21067 = bitcast i16* %21066 to <16 x i16>*
  %21068 = load <16 x i16>, <16 x i16>* %21067, align 2, !tbaa !396
  %21069 = add <16 x i16> %21035, %21030
  %21070 = add <16 x i16> %21069, %21041
  %21071 = add <16 x i16> %21070, %21047
  %21072 = add <16 x i16> %21071, %21053
  %21073 = add <16 x i16> %21072, %21059
  %21074 = add <16 x i16> %21073, %21065
  %21075 = add <16 x i16> %21038, %21033
  %21076 = add <16 x i16> %21075, %21044
  %21077 = add <16 x i16> %21076, %21050
  %21078 = add <16 x i16> %21077, %21056
  %21079 = add <16 x i16> %21078, %21062
  %21080 = add <16 x i16> %21079, %21068
  %21081 = shufflevector <16 x i16> %21074, <16 x i16> %21080, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21082 = udiv <32 x i16> %21081, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21083 = shufflevector <32 x i16> %21082, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21084 = shl nsw i64 %21019, 5
  %21085 = add nsw i64 %21084, %20949
  %21086 = getelementptr inbounds i16, i16* %blur_x917, i64 %21085
  %21087 = bitcast i16* %21086 to <16 x i16>*
  store <16 x i16> %21083, <16 x i16>* %21087, align 2, !tbaa !399
  %21088 = shufflevector <32 x i16> %21082, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21089 = getelementptr inbounds i16, i16* %21086, i64 16
  %21090 = bitcast i16* %21089 to <16 x i16>*
  store <16 x i16> %21088, <16 x i16>* %21090, align 2, !tbaa !399
  br label %after_bb988

"for blur_y.s0.x.x.rebased996":                   ; preds = %"for blur_y.s0.x.x.rebased996.preheader", %after_bb999
  %blur_y.s0.x.x.rebased998 = phi i32 [ %21096, %after_bb999 ], [ 0, %"for blur_y.s0.x.x.rebased996.preheader" ]
  %21091 = add nsw i32 %blur_y.s0.x.x.rebased998, %t1670852
  %21092 = icmp slt i32 %21091, 1
  %21093 = shl nsw i32 %21091, 5
  %21094 = icmp sgt i32 %202, %21093
  %21095 = or i1 %21092, %21094
  br i1 %21095, label %then_bb1000, label %after_bb999

"end for blur_y.s0.x.x.rebased997":               ; preds = %after_bb999, %"end for blur_y.s0.x.x.rebased986"
  br i1 %233, label %"produce blur_x1010", label %"end for blur_y.s0.x.x.rebased997.after_bb1007_crit_edge"

"end for blur_y.s0.x.x.rebased997.after_bb1007_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased997"
  %.pre3678 = add nsw i32 %a393, 3
  %.pre3680 = and i32 %.pre3678, 7
  br label %after_bb1007

after_bb999:                                      ; preds = %"for blur_y.s0.x.x.rebased996", %then_bb1000
  %21096 = add nuw nsw i32 %blur_y.s0.x.x.rebased998, 1
  %.not2784 = icmp eq i32 %21096, %t1727936
  br i1 %.not2784, label %"end for blur_y.s0.x.x.rebased997", label %"for blur_y.s0.x.x.rebased996"

then_bb1000:                                      ; preds = %"for blur_y.s0.x.x.rebased996"
  %21097 = icmp sgt i32 %t1691, %21093
  %b876 = select i1 %21097, i32 %21093, i32 %t1691
  %21098 = icmp slt i32 %b876, %202
  %blur_x.s0.x.v1.base.s1005 = select i1 %21098, i32 %b876, i32 %202
  %t7261006 = add nsw i32 %326, %blur_x.s0.x.v1.base.s1005
  %21099 = sext i32 %t7261006 to i64
  %21100 = getelementptr inbounds i16, i16* %read_input860, i64 %21099
  %21101 = getelementptr inbounds i16, i16* %21100, i64 1
  %21102 = bitcast i16* %21101 to <16 x i16>*
  %21103 = load <16 x i16>, <16 x i16>* %21102, align 2, !tbaa !396
  %21104 = getelementptr inbounds i16, i16* %21100, i64 17
  %21105 = bitcast i16* %21104 to <16 x i16>*
  %21106 = load <16 x i16>, <16 x i16>* %21105, align 2, !tbaa !396
  %21107 = bitcast i16* %21100 to <16 x i16>*
  %21108 = load <16 x i16>, <16 x i16>* %21107, align 2, !tbaa !396
  %21109 = getelementptr inbounds i16, i16* %21100, i64 16
  %21110 = bitcast i16* %21109 to <16 x i16>*
  %21111 = load <16 x i16>, <16 x i16>* %21110, align 2, !tbaa !396
  %21112 = getelementptr inbounds i16, i16* %21100, i64 2
  %21113 = bitcast i16* %21112 to <16 x i16>*
  %21114 = load <16 x i16>, <16 x i16>* %21113, align 2, !tbaa !396
  %21115 = getelementptr inbounds i16, i16* %21100, i64 18
  %21116 = bitcast i16* %21115 to <16 x i16>*
  %21117 = load <16 x i16>, <16 x i16>* %21116, align 2, !tbaa !396
  %21118 = getelementptr inbounds i16, i16* %21100, i64 3
  %21119 = bitcast i16* %21118 to <16 x i16>*
  %21120 = load <16 x i16>, <16 x i16>* %21119, align 2, !tbaa !396
  %21121 = getelementptr inbounds i16, i16* %21100, i64 19
  %21122 = bitcast i16* %21121 to <16 x i16>*
  %21123 = load <16 x i16>, <16 x i16>* %21122, align 2, !tbaa !396
  %21124 = getelementptr inbounds i16, i16* %21100, i64 4
  %21125 = bitcast i16* %21124 to <16 x i16>*
  %21126 = load <16 x i16>, <16 x i16>* %21125, align 2, !tbaa !396
  %21127 = getelementptr inbounds i16, i16* %21100, i64 20
  %21128 = bitcast i16* %21127 to <16 x i16>*
  %21129 = load <16 x i16>, <16 x i16>* %21128, align 2, !tbaa !396
  %21130 = getelementptr inbounds i16, i16* %21100, i64 6
  %21131 = bitcast i16* %21130 to <16 x i16>*
  %21132 = load <16 x i16>, <16 x i16>* %21131, align 2, !tbaa !396
  %21133 = getelementptr inbounds i16, i16* %21100, i64 22
  %21134 = bitcast i16* %21133 to <16 x i16>*
  %21135 = load <16 x i16>, <16 x i16>* %21134, align 2, !tbaa !396
  %21136 = getelementptr inbounds i16, i16* %21100, i64 5
  %21137 = bitcast i16* %21136 to <16 x i16>*
  %21138 = load <16 x i16>, <16 x i16>* %21137, align 2, !tbaa !396
  %21139 = getelementptr inbounds i16, i16* %21100, i64 21
  %21140 = bitcast i16* %21139 to <16 x i16>*
  %21141 = load <16 x i16>, <16 x i16>* %21140, align 2, !tbaa !396
  %21142 = add <16 x i16> %21108, %21103
  %21143 = add <16 x i16> %21142, %21114
  %21144 = add <16 x i16> %21143, %21120
  %21145 = add <16 x i16> %21144, %21126
  %21146 = add <16 x i16> %21145, %21132
  %21147 = add <16 x i16> %21146, %21138
  %21148 = add <16 x i16> %21111, %21106
  %21149 = add <16 x i16> %21148, %21117
  %21150 = add <16 x i16> %21149, %21123
  %21151 = add <16 x i16> %21150, %21129
  %21152 = add <16 x i16> %21151, %21135
  %21153 = add <16 x i16> %21152, %21141
  %21154 = shufflevector <16 x i16> %21147, <16 x i16> %21153, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21155 = udiv <32 x i16> %21154, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21156 = shufflevector <32 x i16> %21155, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21157 = sext i32 %blur_x.s0.x.v1.base.s1005 to i64
  %21158 = add nsw i64 %21157, %21025
  %21159 = getelementptr inbounds i16, i16* %blur_x917, i64 %21158
  %21160 = bitcast i16* %21159 to <16 x i16>*
  store <16 x i16> %21156, <16 x i16>* %21160, align 2, !tbaa !399
  %21161 = shufflevector <32 x i16> %21155, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21162 = getelementptr inbounds i16, i16* %21159, i64 16
  %21163 = bitcast i16* %21162 to <16 x i16>*
  store <16 x i16> %21161, <16 x i16>* %21163, align 2, !tbaa !399
  br label %after_bb999

after_bb1007:                                     ; preds = %"end for blur_y.s0.x.x.rebased997.after_bb1007_crit_edge", %"produce blur_x1010"
  %.pre-phi3681 = phi i32 [ %.pre3680, %"end for blur_y.s0.x.x.rebased997.after_bb1007_crit_edge" ], [ %21225, %"produce blur_x1010" ]
  %21164 = mul nsw i32 %.pre-phi3681, %a565
  %t17441012 = sub nsw i32 %21164, %t1689849
  br i1 %306, label %"for blur_y.s0.x.x.rebased1015.preheader", label %"end for blur_y.s0.x.x.rebased1016", !prof !386

"for blur_y.s0.x.x.rebased1015.preheader":        ; preds = %after_bb1007
  %21165 = sext i32 %t17441012 to i64
  br label %"for blur_y.s0.x.x.rebased1015"

"produce blur_x1010":                             ; preds = %"end for blur_y.s0.x.x.rebased997"
  %21166 = getelementptr inbounds i16, i16* %read_input860, i64 %330
  %21167 = getelementptr inbounds i16, i16* %21166, i64 -31
  %21168 = bitcast i16* %21167 to <16 x i16>*
  %21169 = load <16 x i16>, <16 x i16>* %21168, align 2, !tbaa !396
  %21170 = getelementptr inbounds i16, i16* %21166, i64 -15
  %21171 = bitcast i16* %21170 to <16 x i16>*
  %21172 = load <16 x i16>, <16 x i16>* %21171, align 2, !tbaa !396
  %21173 = getelementptr inbounds i16, i16* %21166, i64 -32
  %21174 = bitcast i16* %21173 to <16 x i16>*
  %21175 = load <16 x i16>, <16 x i16>* %21174, align 2, !tbaa !396
  %21176 = getelementptr inbounds i16, i16* %21166, i64 -16
  %21177 = bitcast i16* %21176 to <16 x i16>*
  %21178 = load <16 x i16>, <16 x i16>* %21177, align 2, !tbaa !396
  %21179 = getelementptr inbounds i16, i16* %21166, i64 -30
  %21180 = bitcast i16* %21179 to <16 x i16>*
  %21181 = load <16 x i16>, <16 x i16>* %21180, align 2, !tbaa !396
  %21182 = getelementptr inbounds i16, i16* %21166, i64 -14
  %21183 = bitcast i16* %21182 to <16 x i16>*
  %21184 = load <16 x i16>, <16 x i16>* %21183, align 2, !tbaa !396
  %21185 = getelementptr inbounds i16, i16* %21166, i64 -29
  %21186 = bitcast i16* %21185 to <16 x i16>*
  %21187 = load <16 x i16>, <16 x i16>* %21186, align 2, !tbaa !396
  %21188 = getelementptr inbounds i16, i16* %21166, i64 -13
  %21189 = bitcast i16* %21188 to <16 x i16>*
  %21190 = load <16 x i16>, <16 x i16>* %21189, align 2, !tbaa !396
  %21191 = getelementptr inbounds i16, i16* %21166, i64 -28
  %21192 = bitcast i16* %21191 to <16 x i16>*
  %21193 = load <16 x i16>, <16 x i16>* %21192, align 2, !tbaa !396
  %21194 = getelementptr inbounds i16, i16* %21166, i64 -12
  %21195 = bitcast i16* %21194 to <16 x i16>*
  %21196 = load <16 x i16>, <16 x i16>* %21195, align 2, !tbaa !396
  %21197 = getelementptr inbounds i16, i16* %21166, i64 -26
  %21198 = bitcast i16* %21197 to <16 x i16>*
  %21199 = load <16 x i16>, <16 x i16>* %21198, align 2, !tbaa !396
  %21200 = getelementptr inbounds i16, i16* %21166, i64 -10
  %21201 = bitcast i16* %21200 to <16 x i16>*
  %21202 = load <16 x i16>, <16 x i16>* %21201, align 2, !tbaa !396
  %21203 = getelementptr inbounds i16, i16* %21166, i64 -27
  %21204 = bitcast i16* %21203 to <16 x i16>*
  %21205 = load <16 x i16>, <16 x i16>* %21204, align 2, !tbaa !396
  %21206 = getelementptr inbounds i16, i16* %21166, i64 -11
  %21207 = bitcast i16* %21206 to <16 x i16>*
  %21208 = load <16 x i16>, <16 x i16>* %21207, align 2, !tbaa !396
  %21209 = add <16 x i16> %21175, %21169
  %21210 = add <16 x i16> %21209, %21181
  %21211 = add <16 x i16> %21210, %21187
  %21212 = add <16 x i16> %21211, %21193
  %21213 = add <16 x i16> %21212, %21199
  %21214 = add <16 x i16> %21213, %21205
  %21215 = add <16 x i16> %21178, %21172
  %21216 = add <16 x i16> %21215, %21184
  %21217 = add <16 x i16> %21216, %21190
  %21218 = add <16 x i16> %21217, %21196
  %21219 = add <16 x i16> %21218, %21202
  %21220 = add <16 x i16> %21219, %21208
  %21221 = shufflevector <16 x i16> %21214, <16 x i16> %21220, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21222 = udiv <32 x i16> %21221, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21223 = shufflevector <32 x i16> %21222, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21224 = add nsw i32 %a393, 3
  %21225 = and i32 %21224, 7
  %21226 = zext i32 %21225 to i64
  %21227 = mul nsw i64 %303, %21226
  %21228 = add nsw i64 %305, %21227
  %21229 = getelementptr inbounds i16, i16* %blur_x917, i64 %21228
  %21230 = getelementptr inbounds i16, i16* %21229, i64 -32
  %21231 = bitcast i16* %21230 to <16 x i16>*
  store <16 x i16> %21223, <16 x i16>* %21231, align 2, !tbaa !399
  %21232 = shufflevector <32 x i16> %21222, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21233 = getelementptr inbounds i16, i16* %21229, i64 -16
  %21234 = bitcast i16* %21233 to <16 x i16>*
  store <16 x i16> %21232, <16 x i16>* %21234, align 2, !tbaa !399
  br label %after_bb1007

"for blur_y.s0.x.x.rebased1015":                  ; preds = %"for blur_y.s0.x.x.rebased1015.preheader", %after_bb1018
  %indvars.iv3502 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1015.preheader" ], [ %indvars.iv.next3503, %after_bb1018 ]
  %21235 = add nsw i64 %indvars.iv3502, %307
  %21236 = icmp slt i64 %21235, 1
  %21237 = trunc i64 %21235 to i32
  %21238 = shl nsw i32 %21237, 5
  %21239 = icmp sgt i32 %202, %21238
  %21240 = or i1 %21236, %21239
  br i1 %21240, label %"produce blur_x1021", label %after_bb1018

"end for blur_y.s0.x.x.rebased1016":              ; preds = %after_bb1018, %after_bb1007
  br i1 %308, label %"for blur_y.s0.x.x.rebased1026.preheader", label %"end for blur_y.s0.x.x.rebased1027", !prof !386

"for blur_y.s0.x.x.rebased1026.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1016"
  %21241 = sext i32 %t17441012 to i64
  br label %"for blur_y.s0.x.x.rebased1026"

after_bb1018:                                     ; preds = %"for blur_y.s0.x.x.rebased1015", %"produce blur_x1021"
  %indvars.iv.next3503 = add nuw nsw i64 %indvars.iv3502, 1
  %.not2781 = icmp eq i64 %indvars.iv.next3503, %546
  br i1 %.not2781, label %"end for blur_y.s0.x.x.rebased1016", label %"for blur_y.s0.x.x.rebased1015"

"produce blur_x1021":                             ; preds = %"for blur_y.s0.x.x.rebased1015"
  %t7301022 = add nsw i32 %332, %21238
  %21242 = sext i32 %t7301022 to i64
  %21243 = getelementptr inbounds i16, i16* %read_input860, i64 %21242
  %21244 = getelementptr inbounds i16, i16* %21243, i64 1
  %21245 = bitcast i16* %21244 to <16 x i16>*
  %21246 = load <16 x i16>, <16 x i16>* %21245, align 2, !tbaa !396
  %21247 = getelementptr inbounds i16, i16* %21243, i64 17
  %21248 = bitcast i16* %21247 to <16 x i16>*
  %21249 = load <16 x i16>, <16 x i16>* %21248, align 2, !tbaa !396
  %21250 = bitcast i16* %21243 to <16 x i16>*
  %21251 = load <16 x i16>, <16 x i16>* %21250, align 2, !tbaa !396
  %21252 = getelementptr inbounds i16, i16* %21243, i64 16
  %21253 = bitcast i16* %21252 to <16 x i16>*
  %21254 = load <16 x i16>, <16 x i16>* %21253, align 2, !tbaa !396
  %21255 = getelementptr inbounds i16, i16* %21243, i64 2
  %21256 = bitcast i16* %21255 to <16 x i16>*
  %21257 = load <16 x i16>, <16 x i16>* %21256, align 2, !tbaa !396
  %21258 = getelementptr inbounds i16, i16* %21243, i64 18
  %21259 = bitcast i16* %21258 to <16 x i16>*
  %21260 = load <16 x i16>, <16 x i16>* %21259, align 2, !tbaa !396
  %21261 = getelementptr inbounds i16, i16* %21243, i64 3
  %21262 = bitcast i16* %21261 to <16 x i16>*
  %21263 = load <16 x i16>, <16 x i16>* %21262, align 2, !tbaa !396
  %21264 = getelementptr inbounds i16, i16* %21243, i64 19
  %21265 = bitcast i16* %21264 to <16 x i16>*
  %21266 = load <16 x i16>, <16 x i16>* %21265, align 2, !tbaa !396
  %21267 = getelementptr inbounds i16, i16* %21243, i64 4
  %21268 = bitcast i16* %21267 to <16 x i16>*
  %21269 = load <16 x i16>, <16 x i16>* %21268, align 2, !tbaa !396
  %21270 = getelementptr inbounds i16, i16* %21243, i64 20
  %21271 = bitcast i16* %21270 to <16 x i16>*
  %21272 = load <16 x i16>, <16 x i16>* %21271, align 2, !tbaa !396
  %21273 = getelementptr inbounds i16, i16* %21243, i64 6
  %21274 = bitcast i16* %21273 to <16 x i16>*
  %21275 = load <16 x i16>, <16 x i16>* %21274, align 2, !tbaa !396
  %21276 = getelementptr inbounds i16, i16* %21243, i64 22
  %21277 = bitcast i16* %21276 to <16 x i16>*
  %21278 = load <16 x i16>, <16 x i16>* %21277, align 2, !tbaa !396
  %21279 = getelementptr inbounds i16, i16* %21243, i64 5
  %21280 = bitcast i16* %21279 to <16 x i16>*
  %21281 = load <16 x i16>, <16 x i16>* %21280, align 2, !tbaa !396
  %21282 = getelementptr inbounds i16, i16* %21243, i64 21
  %21283 = bitcast i16* %21282 to <16 x i16>*
  %21284 = load <16 x i16>, <16 x i16>* %21283, align 2, !tbaa !396
  %21285 = add <16 x i16> %21251, %21246
  %21286 = add <16 x i16> %21285, %21257
  %21287 = add <16 x i16> %21286, %21263
  %21288 = add <16 x i16> %21287, %21269
  %21289 = add <16 x i16> %21288, %21275
  %21290 = add <16 x i16> %21289, %21281
  %21291 = add <16 x i16> %21254, %21249
  %21292 = add <16 x i16> %21291, %21260
  %21293 = add <16 x i16> %21292, %21266
  %21294 = add <16 x i16> %21293, %21272
  %21295 = add <16 x i16> %21294, %21278
  %21296 = add <16 x i16> %21295, %21284
  %21297 = shufflevector <16 x i16> %21290, <16 x i16> %21296, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21298 = udiv <32 x i16> %21297, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21299 = shufflevector <32 x i16> %21298, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21300 = shl nsw i64 %21235, 5
  %21301 = add nsw i64 %21300, %21165
  %21302 = getelementptr inbounds i16, i16* %blur_x917, i64 %21301
  %21303 = bitcast i16* %21302 to <16 x i16>*
  store <16 x i16> %21299, <16 x i16>* %21303, align 2, !tbaa !399
  %21304 = shufflevector <32 x i16> %21298, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21305 = getelementptr inbounds i16, i16* %21302, i64 16
  %21306 = bitcast i16* %21305 to <16 x i16>*
  store <16 x i16> %21304, <16 x i16>* %21306, align 2, !tbaa !399
  br label %after_bb1018

"for blur_y.s0.x.x.rebased1026":                  ; preds = %"for blur_y.s0.x.x.rebased1026.preheader", %after_bb1029
  %blur_y.s0.x.x.rebased1028 = phi i32 [ %21312, %after_bb1029 ], [ 0, %"for blur_y.s0.x.x.rebased1026.preheader" ]
  %21307 = add nsw i32 %blur_y.s0.x.x.rebased1028, %t1670852
  %21308 = icmp slt i32 %21307, 1
  %21309 = shl nsw i32 %21307, 5
  %21310 = icmp sgt i32 %202, %21309
  %21311 = or i1 %21308, %21310
  br i1 %21311, label %then_bb1030, label %after_bb1029

"end for blur_y.s0.x.x.rebased1027":              ; preds = %after_bb1029, %"end for blur_y.s0.x.x.rebased1016"
  br i1 %233, label %"produce blur_x1040", label %"end for blur_y.s0.x.x.rebased1027.after_bb1037_crit_edge"

"end for blur_y.s0.x.x.rebased1027.after_bb1037_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1027"
  %.pre3682 = add nsw i32 %a393, 4
  %.pre3684 = and i32 %.pre3682, 7
  br label %after_bb1037

after_bb1029:                                     ; preds = %"for blur_y.s0.x.x.rebased1026", %then_bb1030
  %21312 = add nuw nsw i32 %blur_y.s0.x.x.rebased1028, 1
  %.not2780 = icmp eq i32 %21312, %t1727936
  br i1 %.not2780, label %"end for blur_y.s0.x.x.rebased1027", label %"for blur_y.s0.x.x.rebased1026"

then_bb1030:                                      ; preds = %"for blur_y.s0.x.x.rebased1026"
  %21313 = icmp sgt i32 %t1691, %21309
  %b1016 = select i1 %21313, i32 %21309, i32 %t1691
  %21314 = icmp slt i32 %b1016, %202
  %blur_x.s0.x.v1.base.s1035 = select i1 %21314, i32 %b1016, i32 %202
  %t7321036 = add nsw i32 %332, %blur_x.s0.x.v1.base.s1035
  %21315 = sext i32 %t7321036 to i64
  %21316 = getelementptr inbounds i16, i16* %read_input860, i64 %21315
  %21317 = getelementptr inbounds i16, i16* %21316, i64 1
  %21318 = bitcast i16* %21317 to <16 x i16>*
  %21319 = load <16 x i16>, <16 x i16>* %21318, align 2, !tbaa !396
  %21320 = getelementptr inbounds i16, i16* %21316, i64 17
  %21321 = bitcast i16* %21320 to <16 x i16>*
  %21322 = load <16 x i16>, <16 x i16>* %21321, align 2, !tbaa !396
  %21323 = bitcast i16* %21316 to <16 x i16>*
  %21324 = load <16 x i16>, <16 x i16>* %21323, align 2, !tbaa !396
  %21325 = getelementptr inbounds i16, i16* %21316, i64 16
  %21326 = bitcast i16* %21325 to <16 x i16>*
  %21327 = load <16 x i16>, <16 x i16>* %21326, align 2, !tbaa !396
  %21328 = getelementptr inbounds i16, i16* %21316, i64 2
  %21329 = bitcast i16* %21328 to <16 x i16>*
  %21330 = load <16 x i16>, <16 x i16>* %21329, align 2, !tbaa !396
  %21331 = getelementptr inbounds i16, i16* %21316, i64 18
  %21332 = bitcast i16* %21331 to <16 x i16>*
  %21333 = load <16 x i16>, <16 x i16>* %21332, align 2, !tbaa !396
  %21334 = getelementptr inbounds i16, i16* %21316, i64 3
  %21335 = bitcast i16* %21334 to <16 x i16>*
  %21336 = load <16 x i16>, <16 x i16>* %21335, align 2, !tbaa !396
  %21337 = getelementptr inbounds i16, i16* %21316, i64 19
  %21338 = bitcast i16* %21337 to <16 x i16>*
  %21339 = load <16 x i16>, <16 x i16>* %21338, align 2, !tbaa !396
  %21340 = getelementptr inbounds i16, i16* %21316, i64 4
  %21341 = bitcast i16* %21340 to <16 x i16>*
  %21342 = load <16 x i16>, <16 x i16>* %21341, align 2, !tbaa !396
  %21343 = getelementptr inbounds i16, i16* %21316, i64 20
  %21344 = bitcast i16* %21343 to <16 x i16>*
  %21345 = load <16 x i16>, <16 x i16>* %21344, align 2, !tbaa !396
  %21346 = getelementptr inbounds i16, i16* %21316, i64 6
  %21347 = bitcast i16* %21346 to <16 x i16>*
  %21348 = load <16 x i16>, <16 x i16>* %21347, align 2, !tbaa !396
  %21349 = getelementptr inbounds i16, i16* %21316, i64 22
  %21350 = bitcast i16* %21349 to <16 x i16>*
  %21351 = load <16 x i16>, <16 x i16>* %21350, align 2, !tbaa !396
  %21352 = getelementptr inbounds i16, i16* %21316, i64 5
  %21353 = bitcast i16* %21352 to <16 x i16>*
  %21354 = load <16 x i16>, <16 x i16>* %21353, align 2, !tbaa !396
  %21355 = getelementptr inbounds i16, i16* %21316, i64 21
  %21356 = bitcast i16* %21355 to <16 x i16>*
  %21357 = load <16 x i16>, <16 x i16>* %21356, align 2, !tbaa !396
  %21358 = add <16 x i16> %21324, %21319
  %21359 = add <16 x i16> %21358, %21330
  %21360 = add <16 x i16> %21359, %21336
  %21361 = add <16 x i16> %21360, %21342
  %21362 = add <16 x i16> %21361, %21348
  %21363 = add <16 x i16> %21362, %21354
  %21364 = add <16 x i16> %21327, %21322
  %21365 = add <16 x i16> %21364, %21333
  %21366 = add <16 x i16> %21365, %21339
  %21367 = add <16 x i16> %21366, %21345
  %21368 = add <16 x i16> %21367, %21351
  %21369 = add <16 x i16> %21368, %21357
  %21370 = shufflevector <16 x i16> %21363, <16 x i16> %21369, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21371 = udiv <32 x i16> %21370, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21372 = shufflevector <32 x i16> %21371, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21373 = sext i32 %blur_x.s0.x.v1.base.s1035 to i64
  %21374 = add nsw i64 %21373, %21241
  %21375 = getelementptr inbounds i16, i16* %blur_x917, i64 %21374
  %21376 = bitcast i16* %21375 to <16 x i16>*
  store <16 x i16> %21372, <16 x i16>* %21376, align 2, !tbaa !399
  %21377 = shufflevector <32 x i16> %21371, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21378 = getelementptr inbounds i16, i16* %21375, i64 16
  %21379 = bitcast i16* %21378 to <16 x i16>*
  store <16 x i16> %21377, <16 x i16>* %21379, align 2, !tbaa !399
  br label %after_bb1029

after_bb1037:                                     ; preds = %"end for blur_y.s0.x.x.rebased1027.after_bb1037_crit_edge", %"produce blur_x1040"
  %.pre-phi3685 = phi i32 [ %.pre3684, %"end for blur_y.s0.x.x.rebased1027.after_bb1037_crit_edge" ], [ %21441, %"produce blur_x1040" ]
  %21380 = mul nsw i32 %.pre-phi3685, %a565
  %t17501042 = sub nsw i32 %21380, %t1689849
  br i1 %306, label %"for blur_y.s0.x.x.rebased1045.preheader", label %"end for blur_y.s0.x.x.rebased1046", !prof !386

"for blur_y.s0.x.x.rebased1045.preheader":        ; preds = %after_bb1037
  %21381 = sext i32 %t17501042 to i64
  br label %"for blur_y.s0.x.x.rebased1045"

"produce blur_x1040":                             ; preds = %"end for blur_y.s0.x.x.rebased1027"
  %21382 = getelementptr inbounds i16, i16* %read_input860, i64 %336
  %21383 = getelementptr inbounds i16, i16* %21382, i64 -31
  %21384 = bitcast i16* %21383 to <16 x i16>*
  %21385 = load <16 x i16>, <16 x i16>* %21384, align 2, !tbaa !396
  %21386 = getelementptr inbounds i16, i16* %21382, i64 -15
  %21387 = bitcast i16* %21386 to <16 x i16>*
  %21388 = load <16 x i16>, <16 x i16>* %21387, align 2, !tbaa !396
  %21389 = getelementptr inbounds i16, i16* %21382, i64 -32
  %21390 = bitcast i16* %21389 to <16 x i16>*
  %21391 = load <16 x i16>, <16 x i16>* %21390, align 2, !tbaa !396
  %21392 = getelementptr inbounds i16, i16* %21382, i64 -16
  %21393 = bitcast i16* %21392 to <16 x i16>*
  %21394 = load <16 x i16>, <16 x i16>* %21393, align 2, !tbaa !396
  %21395 = getelementptr inbounds i16, i16* %21382, i64 -30
  %21396 = bitcast i16* %21395 to <16 x i16>*
  %21397 = load <16 x i16>, <16 x i16>* %21396, align 2, !tbaa !396
  %21398 = getelementptr inbounds i16, i16* %21382, i64 -14
  %21399 = bitcast i16* %21398 to <16 x i16>*
  %21400 = load <16 x i16>, <16 x i16>* %21399, align 2, !tbaa !396
  %21401 = getelementptr inbounds i16, i16* %21382, i64 -29
  %21402 = bitcast i16* %21401 to <16 x i16>*
  %21403 = load <16 x i16>, <16 x i16>* %21402, align 2, !tbaa !396
  %21404 = getelementptr inbounds i16, i16* %21382, i64 -13
  %21405 = bitcast i16* %21404 to <16 x i16>*
  %21406 = load <16 x i16>, <16 x i16>* %21405, align 2, !tbaa !396
  %21407 = getelementptr inbounds i16, i16* %21382, i64 -28
  %21408 = bitcast i16* %21407 to <16 x i16>*
  %21409 = load <16 x i16>, <16 x i16>* %21408, align 2, !tbaa !396
  %21410 = getelementptr inbounds i16, i16* %21382, i64 -12
  %21411 = bitcast i16* %21410 to <16 x i16>*
  %21412 = load <16 x i16>, <16 x i16>* %21411, align 2, !tbaa !396
  %21413 = getelementptr inbounds i16, i16* %21382, i64 -26
  %21414 = bitcast i16* %21413 to <16 x i16>*
  %21415 = load <16 x i16>, <16 x i16>* %21414, align 2, !tbaa !396
  %21416 = getelementptr inbounds i16, i16* %21382, i64 -10
  %21417 = bitcast i16* %21416 to <16 x i16>*
  %21418 = load <16 x i16>, <16 x i16>* %21417, align 2, !tbaa !396
  %21419 = getelementptr inbounds i16, i16* %21382, i64 -27
  %21420 = bitcast i16* %21419 to <16 x i16>*
  %21421 = load <16 x i16>, <16 x i16>* %21420, align 2, !tbaa !396
  %21422 = getelementptr inbounds i16, i16* %21382, i64 -11
  %21423 = bitcast i16* %21422 to <16 x i16>*
  %21424 = load <16 x i16>, <16 x i16>* %21423, align 2, !tbaa !396
  %21425 = add <16 x i16> %21391, %21385
  %21426 = add <16 x i16> %21425, %21397
  %21427 = add <16 x i16> %21426, %21403
  %21428 = add <16 x i16> %21427, %21409
  %21429 = add <16 x i16> %21428, %21415
  %21430 = add <16 x i16> %21429, %21421
  %21431 = add <16 x i16> %21394, %21388
  %21432 = add <16 x i16> %21431, %21400
  %21433 = add <16 x i16> %21432, %21406
  %21434 = add <16 x i16> %21433, %21412
  %21435 = add <16 x i16> %21434, %21418
  %21436 = add <16 x i16> %21435, %21424
  %21437 = shufflevector <16 x i16> %21430, <16 x i16> %21436, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21438 = udiv <32 x i16> %21437, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21439 = shufflevector <32 x i16> %21438, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21440 = add nsw i32 %a393, 4
  %21441 = and i32 %21440, 7
  %21442 = zext i32 %21441 to i64
  %21443 = mul nsw i64 %303, %21442
  %21444 = add nsw i64 %305, %21443
  %21445 = getelementptr inbounds i16, i16* %blur_x917, i64 %21444
  %21446 = getelementptr inbounds i16, i16* %21445, i64 -32
  %21447 = bitcast i16* %21446 to <16 x i16>*
  store <16 x i16> %21439, <16 x i16>* %21447, align 2, !tbaa !399
  %21448 = shufflevector <32 x i16> %21438, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21449 = getelementptr inbounds i16, i16* %21445, i64 -16
  %21450 = bitcast i16* %21449 to <16 x i16>*
  store <16 x i16> %21448, <16 x i16>* %21450, align 2, !tbaa !399
  br label %after_bb1037

"for blur_y.s0.x.x.rebased1045":                  ; preds = %"for blur_y.s0.x.x.rebased1045.preheader", %after_bb1048
  %indvars.iv3504 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1045.preheader" ], [ %indvars.iv.next3505, %after_bb1048 ]
  %21451 = add nsw i64 %indvars.iv3504, %307
  %21452 = icmp slt i64 %21451, 1
  %21453 = trunc i64 %21451 to i32
  %21454 = shl nsw i32 %21453, 5
  %21455 = icmp sgt i32 %202, %21454
  %21456 = or i1 %21452, %21455
  br i1 %21456, label %"produce blur_x1051", label %after_bb1048

"end for blur_y.s0.x.x.rebased1046":              ; preds = %after_bb1048, %after_bb1037
  br i1 %308, label %"for blur_y.s0.x.x.rebased1056.preheader", label %"end for blur_y.s0.x.x.rebased1057", !prof !386

"for blur_y.s0.x.x.rebased1056.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1046"
  %21457 = sext i32 %t17501042 to i64
  br label %"for blur_y.s0.x.x.rebased1056"

after_bb1048:                                     ; preds = %"for blur_y.s0.x.x.rebased1045", %"produce blur_x1051"
  %indvars.iv.next3505 = add nuw nsw i64 %indvars.iv3504, 1
  %.not2777 = icmp eq i64 %indvars.iv.next3505, %546
  br i1 %.not2777, label %"end for blur_y.s0.x.x.rebased1046", label %"for blur_y.s0.x.x.rebased1045"

"produce blur_x1051":                             ; preds = %"for blur_y.s0.x.x.rebased1045"
  %t7361052 = add nsw i32 %338, %21454
  %21458 = sext i32 %t7361052 to i64
  %21459 = getelementptr inbounds i16, i16* %read_input860, i64 %21458
  %21460 = getelementptr inbounds i16, i16* %21459, i64 1
  %21461 = bitcast i16* %21460 to <16 x i16>*
  %21462 = load <16 x i16>, <16 x i16>* %21461, align 2, !tbaa !396
  %21463 = getelementptr inbounds i16, i16* %21459, i64 17
  %21464 = bitcast i16* %21463 to <16 x i16>*
  %21465 = load <16 x i16>, <16 x i16>* %21464, align 2, !tbaa !396
  %21466 = bitcast i16* %21459 to <16 x i16>*
  %21467 = load <16 x i16>, <16 x i16>* %21466, align 2, !tbaa !396
  %21468 = getelementptr inbounds i16, i16* %21459, i64 16
  %21469 = bitcast i16* %21468 to <16 x i16>*
  %21470 = load <16 x i16>, <16 x i16>* %21469, align 2, !tbaa !396
  %21471 = getelementptr inbounds i16, i16* %21459, i64 2
  %21472 = bitcast i16* %21471 to <16 x i16>*
  %21473 = load <16 x i16>, <16 x i16>* %21472, align 2, !tbaa !396
  %21474 = getelementptr inbounds i16, i16* %21459, i64 18
  %21475 = bitcast i16* %21474 to <16 x i16>*
  %21476 = load <16 x i16>, <16 x i16>* %21475, align 2, !tbaa !396
  %21477 = getelementptr inbounds i16, i16* %21459, i64 3
  %21478 = bitcast i16* %21477 to <16 x i16>*
  %21479 = load <16 x i16>, <16 x i16>* %21478, align 2, !tbaa !396
  %21480 = getelementptr inbounds i16, i16* %21459, i64 19
  %21481 = bitcast i16* %21480 to <16 x i16>*
  %21482 = load <16 x i16>, <16 x i16>* %21481, align 2, !tbaa !396
  %21483 = getelementptr inbounds i16, i16* %21459, i64 4
  %21484 = bitcast i16* %21483 to <16 x i16>*
  %21485 = load <16 x i16>, <16 x i16>* %21484, align 2, !tbaa !396
  %21486 = getelementptr inbounds i16, i16* %21459, i64 20
  %21487 = bitcast i16* %21486 to <16 x i16>*
  %21488 = load <16 x i16>, <16 x i16>* %21487, align 2, !tbaa !396
  %21489 = getelementptr inbounds i16, i16* %21459, i64 6
  %21490 = bitcast i16* %21489 to <16 x i16>*
  %21491 = load <16 x i16>, <16 x i16>* %21490, align 2, !tbaa !396
  %21492 = getelementptr inbounds i16, i16* %21459, i64 22
  %21493 = bitcast i16* %21492 to <16 x i16>*
  %21494 = load <16 x i16>, <16 x i16>* %21493, align 2, !tbaa !396
  %21495 = getelementptr inbounds i16, i16* %21459, i64 5
  %21496 = bitcast i16* %21495 to <16 x i16>*
  %21497 = load <16 x i16>, <16 x i16>* %21496, align 2, !tbaa !396
  %21498 = getelementptr inbounds i16, i16* %21459, i64 21
  %21499 = bitcast i16* %21498 to <16 x i16>*
  %21500 = load <16 x i16>, <16 x i16>* %21499, align 2, !tbaa !396
  %21501 = add <16 x i16> %21467, %21462
  %21502 = add <16 x i16> %21501, %21473
  %21503 = add <16 x i16> %21502, %21479
  %21504 = add <16 x i16> %21503, %21485
  %21505 = add <16 x i16> %21504, %21491
  %21506 = add <16 x i16> %21505, %21497
  %21507 = add <16 x i16> %21470, %21465
  %21508 = add <16 x i16> %21507, %21476
  %21509 = add <16 x i16> %21508, %21482
  %21510 = add <16 x i16> %21509, %21488
  %21511 = add <16 x i16> %21510, %21494
  %21512 = add <16 x i16> %21511, %21500
  %21513 = shufflevector <16 x i16> %21506, <16 x i16> %21512, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21514 = udiv <32 x i16> %21513, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21515 = shufflevector <32 x i16> %21514, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21516 = shl nsw i64 %21451, 5
  %21517 = add nsw i64 %21516, %21381
  %21518 = getelementptr inbounds i16, i16* %blur_x917, i64 %21517
  %21519 = bitcast i16* %21518 to <16 x i16>*
  store <16 x i16> %21515, <16 x i16>* %21519, align 2, !tbaa !399
  %21520 = shufflevector <32 x i16> %21514, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21521 = getelementptr inbounds i16, i16* %21518, i64 16
  %21522 = bitcast i16* %21521 to <16 x i16>*
  store <16 x i16> %21520, <16 x i16>* %21522, align 2, !tbaa !399
  br label %after_bb1048

"for blur_y.s0.x.x.rebased1056":                  ; preds = %"for blur_y.s0.x.x.rebased1056.preheader", %after_bb1059
  %blur_y.s0.x.x.rebased1058 = phi i32 [ %21528, %after_bb1059 ], [ 0, %"for blur_y.s0.x.x.rebased1056.preheader" ]
  %21523 = add nsw i32 %blur_y.s0.x.x.rebased1058, %t1670852
  %21524 = icmp slt i32 %21523, 1
  %21525 = shl nsw i32 %21523, 5
  %21526 = icmp sgt i32 %202, %21525
  %21527 = or i1 %21524, %21526
  br i1 %21527, label %then_bb1060, label %after_bb1059

"end for blur_y.s0.x.x.rebased1057":              ; preds = %after_bb1059, %"end for blur_y.s0.x.x.rebased1046"
  br i1 %233, label %"produce blur_x1070", label %"end for blur_y.s0.x.x.rebased1057.after_bb1067_crit_edge"

"end for blur_y.s0.x.x.rebased1057.after_bb1067_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1057"
  %.pre3686 = add nsw i32 %a393, 5
  %.pre3688 = and i32 %.pre3686, 7
  br label %after_bb1067

after_bb1059:                                     ; preds = %"for blur_y.s0.x.x.rebased1056", %then_bb1060
  %21528 = add nuw nsw i32 %blur_y.s0.x.x.rebased1058, 1
  %.not2776 = icmp eq i32 %21528, %t1727936
  br i1 %.not2776, label %"end for blur_y.s0.x.x.rebased1057", label %"for blur_y.s0.x.x.rebased1056"

then_bb1060:                                      ; preds = %"for blur_y.s0.x.x.rebased1056"
  %21529 = icmp sgt i32 %t1691, %21525
  %b1156 = select i1 %21529, i32 %21525, i32 %t1691
  %21530 = icmp slt i32 %b1156, %202
  %blur_x.s0.x.v1.base.s1065 = select i1 %21530, i32 %b1156, i32 %202
  %t7381066 = add nsw i32 %338, %blur_x.s0.x.v1.base.s1065
  %21531 = sext i32 %t7381066 to i64
  %21532 = getelementptr inbounds i16, i16* %read_input860, i64 %21531
  %21533 = getelementptr inbounds i16, i16* %21532, i64 1
  %21534 = bitcast i16* %21533 to <16 x i16>*
  %21535 = load <16 x i16>, <16 x i16>* %21534, align 2, !tbaa !396
  %21536 = getelementptr inbounds i16, i16* %21532, i64 17
  %21537 = bitcast i16* %21536 to <16 x i16>*
  %21538 = load <16 x i16>, <16 x i16>* %21537, align 2, !tbaa !396
  %21539 = bitcast i16* %21532 to <16 x i16>*
  %21540 = load <16 x i16>, <16 x i16>* %21539, align 2, !tbaa !396
  %21541 = getelementptr inbounds i16, i16* %21532, i64 16
  %21542 = bitcast i16* %21541 to <16 x i16>*
  %21543 = load <16 x i16>, <16 x i16>* %21542, align 2, !tbaa !396
  %21544 = getelementptr inbounds i16, i16* %21532, i64 2
  %21545 = bitcast i16* %21544 to <16 x i16>*
  %21546 = load <16 x i16>, <16 x i16>* %21545, align 2, !tbaa !396
  %21547 = getelementptr inbounds i16, i16* %21532, i64 18
  %21548 = bitcast i16* %21547 to <16 x i16>*
  %21549 = load <16 x i16>, <16 x i16>* %21548, align 2, !tbaa !396
  %21550 = getelementptr inbounds i16, i16* %21532, i64 3
  %21551 = bitcast i16* %21550 to <16 x i16>*
  %21552 = load <16 x i16>, <16 x i16>* %21551, align 2, !tbaa !396
  %21553 = getelementptr inbounds i16, i16* %21532, i64 19
  %21554 = bitcast i16* %21553 to <16 x i16>*
  %21555 = load <16 x i16>, <16 x i16>* %21554, align 2, !tbaa !396
  %21556 = getelementptr inbounds i16, i16* %21532, i64 4
  %21557 = bitcast i16* %21556 to <16 x i16>*
  %21558 = load <16 x i16>, <16 x i16>* %21557, align 2, !tbaa !396
  %21559 = getelementptr inbounds i16, i16* %21532, i64 20
  %21560 = bitcast i16* %21559 to <16 x i16>*
  %21561 = load <16 x i16>, <16 x i16>* %21560, align 2, !tbaa !396
  %21562 = getelementptr inbounds i16, i16* %21532, i64 6
  %21563 = bitcast i16* %21562 to <16 x i16>*
  %21564 = load <16 x i16>, <16 x i16>* %21563, align 2, !tbaa !396
  %21565 = getelementptr inbounds i16, i16* %21532, i64 22
  %21566 = bitcast i16* %21565 to <16 x i16>*
  %21567 = load <16 x i16>, <16 x i16>* %21566, align 2, !tbaa !396
  %21568 = getelementptr inbounds i16, i16* %21532, i64 5
  %21569 = bitcast i16* %21568 to <16 x i16>*
  %21570 = load <16 x i16>, <16 x i16>* %21569, align 2, !tbaa !396
  %21571 = getelementptr inbounds i16, i16* %21532, i64 21
  %21572 = bitcast i16* %21571 to <16 x i16>*
  %21573 = load <16 x i16>, <16 x i16>* %21572, align 2, !tbaa !396
  %21574 = add <16 x i16> %21540, %21535
  %21575 = add <16 x i16> %21574, %21546
  %21576 = add <16 x i16> %21575, %21552
  %21577 = add <16 x i16> %21576, %21558
  %21578 = add <16 x i16> %21577, %21564
  %21579 = add <16 x i16> %21578, %21570
  %21580 = add <16 x i16> %21543, %21538
  %21581 = add <16 x i16> %21580, %21549
  %21582 = add <16 x i16> %21581, %21555
  %21583 = add <16 x i16> %21582, %21561
  %21584 = add <16 x i16> %21583, %21567
  %21585 = add <16 x i16> %21584, %21573
  %21586 = shufflevector <16 x i16> %21579, <16 x i16> %21585, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21587 = udiv <32 x i16> %21586, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21588 = shufflevector <32 x i16> %21587, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21589 = sext i32 %blur_x.s0.x.v1.base.s1065 to i64
  %21590 = add nsw i64 %21589, %21457
  %21591 = getelementptr inbounds i16, i16* %blur_x917, i64 %21590
  %21592 = bitcast i16* %21591 to <16 x i16>*
  store <16 x i16> %21588, <16 x i16>* %21592, align 2, !tbaa !399
  %21593 = shufflevector <32 x i16> %21587, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21594 = getelementptr inbounds i16, i16* %21591, i64 16
  %21595 = bitcast i16* %21594 to <16 x i16>*
  store <16 x i16> %21593, <16 x i16>* %21595, align 2, !tbaa !399
  br label %after_bb1059

after_bb1067:                                     ; preds = %"end for blur_y.s0.x.x.rebased1057.after_bb1067_crit_edge", %"produce blur_x1070"
  %.pre-phi3689 = phi i32 [ %.pre3688, %"end for blur_y.s0.x.x.rebased1057.after_bb1067_crit_edge" ], [ %21657, %"produce blur_x1070" ]
  %21596 = mul nsw i32 %.pre-phi3689, %a565
  %t17561072 = sub nsw i32 %21596, %t1689849
  br i1 %306, label %"for blur_y.s0.x.x.rebased1075.preheader", label %"end for blur_y.s0.x.x.rebased1076", !prof !386

"for blur_y.s0.x.x.rebased1075.preheader":        ; preds = %after_bb1067
  %21597 = sext i32 %t17561072 to i64
  br label %"for blur_y.s0.x.x.rebased1075"

"produce blur_x1070":                             ; preds = %"end for blur_y.s0.x.x.rebased1057"
  %21598 = getelementptr inbounds i16, i16* %read_input860, i64 %342
  %21599 = getelementptr inbounds i16, i16* %21598, i64 -31
  %21600 = bitcast i16* %21599 to <16 x i16>*
  %21601 = load <16 x i16>, <16 x i16>* %21600, align 2, !tbaa !396
  %21602 = getelementptr inbounds i16, i16* %21598, i64 -15
  %21603 = bitcast i16* %21602 to <16 x i16>*
  %21604 = load <16 x i16>, <16 x i16>* %21603, align 2, !tbaa !396
  %21605 = getelementptr inbounds i16, i16* %21598, i64 -32
  %21606 = bitcast i16* %21605 to <16 x i16>*
  %21607 = load <16 x i16>, <16 x i16>* %21606, align 2, !tbaa !396
  %21608 = getelementptr inbounds i16, i16* %21598, i64 -16
  %21609 = bitcast i16* %21608 to <16 x i16>*
  %21610 = load <16 x i16>, <16 x i16>* %21609, align 2, !tbaa !396
  %21611 = getelementptr inbounds i16, i16* %21598, i64 -30
  %21612 = bitcast i16* %21611 to <16 x i16>*
  %21613 = load <16 x i16>, <16 x i16>* %21612, align 2, !tbaa !396
  %21614 = getelementptr inbounds i16, i16* %21598, i64 -14
  %21615 = bitcast i16* %21614 to <16 x i16>*
  %21616 = load <16 x i16>, <16 x i16>* %21615, align 2, !tbaa !396
  %21617 = getelementptr inbounds i16, i16* %21598, i64 -29
  %21618 = bitcast i16* %21617 to <16 x i16>*
  %21619 = load <16 x i16>, <16 x i16>* %21618, align 2, !tbaa !396
  %21620 = getelementptr inbounds i16, i16* %21598, i64 -13
  %21621 = bitcast i16* %21620 to <16 x i16>*
  %21622 = load <16 x i16>, <16 x i16>* %21621, align 2, !tbaa !396
  %21623 = getelementptr inbounds i16, i16* %21598, i64 -28
  %21624 = bitcast i16* %21623 to <16 x i16>*
  %21625 = load <16 x i16>, <16 x i16>* %21624, align 2, !tbaa !396
  %21626 = getelementptr inbounds i16, i16* %21598, i64 -12
  %21627 = bitcast i16* %21626 to <16 x i16>*
  %21628 = load <16 x i16>, <16 x i16>* %21627, align 2, !tbaa !396
  %21629 = getelementptr inbounds i16, i16* %21598, i64 -26
  %21630 = bitcast i16* %21629 to <16 x i16>*
  %21631 = load <16 x i16>, <16 x i16>* %21630, align 2, !tbaa !396
  %21632 = getelementptr inbounds i16, i16* %21598, i64 -10
  %21633 = bitcast i16* %21632 to <16 x i16>*
  %21634 = load <16 x i16>, <16 x i16>* %21633, align 2, !tbaa !396
  %21635 = getelementptr inbounds i16, i16* %21598, i64 -27
  %21636 = bitcast i16* %21635 to <16 x i16>*
  %21637 = load <16 x i16>, <16 x i16>* %21636, align 2, !tbaa !396
  %21638 = getelementptr inbounds i16, i16* %21598, i64 -11
  %21639 = bitcast i16* %21638 to <16 x i16>*
  %21640 = load <16 x i16>, <16 x i16>* %21639, align 2, !tbaa !396
  %21641 = add <16 x i16> %21607, %21601
  %21642 = add <16 x i16> %21641, %21613
  %21643 = add <16 x i16> %21642, %21619
  %21644 = add <16 x i16> %21643, %21625
  %21645 = add <16 x i16> %21644, %21631
  %21646 = add <16 x i16> %21645, %21637
  %21647 = add <16 x i16> %21610, %21604
  %21648 = add <16 x i16> %21647, %21616
  %21649 = add <16 x i16> %21648, %21622
  %21650 = add <16 x i16> %21649, %21628
  %21651 = add <16 x i16> %21650, %21634
  %21652 = add <16 x i16> %21651, %21640
  %21653 = shufflevector <16 x i16> %21646, <16 x i16> %21652, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21654 = udiv <32 x i16> %21653, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21655 = shufflevector <32 x i16> %21654, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21656 = add nsw i32 %a393, 5
  %21657 = and i32 %21656, 7
  %21658 = zext i32 %21657 to i64
  %21659 = mul nsw i64 %303, %21658
  %21660 = add nsw i64 %305, %21659
  %21661 = getelementptr inbounds i16, i16* %blur_x917, i64 %21660
  %21662 = getelementptr inbounds i16, i16* %21661, i64 -32
  %21663 = bitcast i16* %21662 to <16 x i16>*
  store <16 x i16> %21655, <16 x i16>* %21663, align 2, !tbaa !399
  %21664 = shufflevector <32 x i16> %21654, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21665 = getelementptr inbounds i16, i16* %21661, i64 -16
  %21666 = bitcast i16* %21665 to <16 x i16>*
  store <16 x i16> %21664, <16 x i16>* %21666, align 2, !tbaa !399
  br label %after_bb1067

"for blur_y.s0.x.x.rebased1075":                  ; preds = %"for blur_y.s0.x.x.rebased1075.preheader", %after_bb1078
  %indvars.iv3506 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1075.preheader" ], [ %indvars.iv.next3507, %after_bb1078 ]
  %21667 = add nsw i64 %indvars.iv3506, %307
  %21668 = icmp slt i64 %21667, 1
  %21669 = trunc i64 %21667 to i32
  %21670 = shl nsw i32 %21669, 5
  %21671 = icmp sgt i32 %202, %21670
  %21672 = or i1 %21668, %21671
  br i1 %21672, label %"produce blur_x1081", label %after_bb1078

"end for blur_y.s0.x.x.rebased1076":              ; preds = %after_bb1078, %after_bb1067
  br i1 %308, label %"for blur_y.s0.x.x.rebased1086.preheader", label %"end for blur_y.s0.x.x.rebased1087", !prof !386

"for blur_y.s0.x.x.rebased1086.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1076"
  %21673 = sext i32 %t17561072 to i64
  br label %"for blur_y.s0.x.x.rebased1086"

after_bb1078:                                     ; preds = %"for blur_y.s0.x.x.rebased1075", %"produce blur_x1081"
  %indvars.iv.next3507 = add nuw nsw i64 %indvars.iv3506, 1
  %.not2773 = icmp eq i64 %indvars.iv.next3507, %546
  br i1 %.not2773, label %"end for blur_y.s0.x.x.rebased1076", label %"for blur_y.s0.x.x.rebased1075"

"produce blur_x1081":                             ; preds = %"for blur_y.s0.x.x.rebased1075"
  %t7421082 = add nsw i32 %345, %21670
  %21674 = sext i32 %t7421082 to i64
  %21675 = getelementptr inbounds i16, i16* %read_input860, i64 %21674
  %21676 = getelementptr inbounds i16, i16* %21675, i64 1
  %21677 = bitcast i16* %21676 to <16 x i16>*
  %21678 = load <16 x i16>, <16 x i16>* %21677, align 2, !tbaa !396
  %21679 = getelementptr inbounds i16, i16* %21675, i64 17
  %21680 = bitcast i16* %21679 to <16 x i16>*
  %21681 = load <16 x i16>, <16 x i16>* %21680, align 2, !tbaa !396
  %21682 = bitcast i16* %21675 to <16 x i16>*
  %21683 = load <16 x i16>, <16 x i16>* %21682, align 2, !tbaa !396
  %21684 = getelementptr inbounds i16, i16* %21675, i64 16
  %21685 = bitcast i16* %21684 to <16 x i16>*
  %21686 = load <16 x i16>, <16 x i16>* %21685, align 2, !tbaa !396
  %21687 = getelementptr inbounds i16, i16* %21675, i64 2
  %21688 = bitcast i16* %21687 to <16 x i16>*
  %21689 = load <16 x i16>, <16 x i16>* %21688, align 2, !tbaa !396
  %21690 = getelementptr inbounds i16, i16* %21675, i64 18
  %21691 = bitcast i16* %21690 to <16 x i16>*
  %21692 = load <16 x i16>, <16 x i16>* %21691, align 2, !tbaa !396
  %21693 = getelementptr inbounds i16, i16* %21675, i64 3
  %21694 = bitcast i16* %21693 to <16 x i16>*
  %21695 = load <16 x i16>, <16 x i16>* %21694, align 2, !tbaa !396
  %21696 = getelementptr inbounds i16, i16* %21675, i64 19
  %21697 = bitcast i16* %21696 to <16 x i16>*
  %21698 = load <16 x i16>, <16 x i16>* %21697, align 2, !tbaa !396
  %21699 = getelementptr inbounds i16, i16* %21675, i64 4
  %21700 = bitcast i16* %21699 to <16 x i16>*
  %21701 = load <16 x i16>, <16 x i16>* %21700, align 2, !tbaa !396
  %21702 = getelementptr inbounds i16, i16* %21675, i64 20
  %21703 = bitcast i16* %21702 to <16 x i16>*
  %21704 = load <16 x i16>, <16 x i16>* %21703, align 2, !tbaa !396
  %21705 = getelementptr inbounds i16, i16* %21675, i64 6
  %21706 = bitcast i16* %21705 to <16 x i16>*
  %21707 = load <16 x i16>, <16 x i16>* %21706, align 2, !tbaa !396
  %21708 = getelementptr inbounds i16, i16* %21675, i64 22
  %21709 = bitcast i16* %21708 to <16 x i16>*
  %21710 = load <16 x i16>, <16 x i16>* %21709, align 2, !tbaa !396
  %21711 = getelementptr inbounds i16, i16* %21675, i64 5
  %21712 = bitcast i16* %21711 to <16 x i16>*
  %21713 = load <16 x i16>, <16 x i16>* %21712, align 2, !tbaa !396
  %21714 = getelementptr inbounds i16, i16* %21675, i64 21
  %21715 = bitcast i16* %21714 to <16 x i16>*
  %21716 = load <16 x i16>, <16 x i16>* %21715, align 2, !tbaa !396
  %21717 = add <16 x i16> %21683, %21678
  %21718 = add <16 x i16> %21717, %21689
  %21719 = add <16 x i16> %21718, %21695
  %21720 = add <16 x i16> %21719, %21701
  %21721 = add <16 x i16> %21720, %21707
  %21722 = add <16 x i16> %21721, %21713
  %21723 = add <16 x i16> %21686, %21681
  %21724 = add <16 x i16> %21723, %21692
  %21725 = add <16 x i16> %21724, %21698
  %21726 = add <16 x i16> %21725, %21704
  %21727 = add <16 x i16> %21726, %21710
  %21728 = add <16 x i16> %21727, %21716
  %21729 = shufflevector <16 x i16> %21722, <16 x i16> %21728, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21730 = udiv <32 x i16> %21729, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21731 = shufflevector <32 x i16> %21730, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21732 = shl nsw i64 %21667, 5
  %21733 = add nsw i64 %21732, %21597
  %21734 = getelementptr inbounds i16, i16* %blur_x917, i64 %21733
  %21735 = bitcast i16* %21734 to <16 x i16>*
  store <16 x i16> %21731, <16 x i16>* %21735, align 2, !tbaa !399
  %21736 = shufflevector <32 x i16> %21730, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21737 = getelementptr inbounds i16, i16* %21734, i64 16
  %21738 = bitcast i16* %21737 to <16 x i16>*
  store <16 x i16> %21736, <16 x i16>* %21738, align 2, !tbaa !399
  br label %after_bb1078

"for blur_y.s0.x.x.rebased1086":                  ; preds = %"for blur_y.s0.x.x.rebased1086.preheader", %after_bb1089
  %blur_y.s0.x.x.rebased1088 = phi i32 [ %21744, %after_bb1089 ], [ 0, %"for blur_y.s0.x.x.rebased1086.preheader" ]
  %21739 = add nsw i32 %blur_y.s0.x.x.rebased1088, %t1670852
  %21740 = icmp slt i32 %21739, 1
  %21741 = shl nsw i32 %21739, 5
  %21742 = icmp sgt i32 %202, %21741
  %21743 = or i1 %21740, %21742
  br i1 %21743, label %then_bb1090, label %after_bb1089

"end for blur_y.s0.x.x.rebased1087":              ; preds = %after_bb1089, %"end for blur_y.s0.x.x.rebased1076"
  br i1 %233, label %"produce blur_x1100", label %"end for blur_y.s0.x.x.rebased1087.after_bb1097_crit_edge"

"end for blur_y.s0.x.x.rebased1087.after_bb1097_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1087"
  %.pre3690 = add nsw i32 %a393, 6
  %.pre3692 = and i32 %.pre3690, 7
  br label %after_bb1097

after_bb1089:                                     ; preds = %"for blur_y.s0.x.x.rebased1086", %then_bb1090
  %21744 = add nuw nsw i32 %blur_y.s0.x.x.rebased1088, 1
  %.not2772 = icmp eq i32 %21744, %t1727936
  br i1 %.not2772, label %"end for blur_y.s0.x.x.rebased1087", label %"for blur_y.s0.x.x.rebased1086"

then_bb1090:                                      ; preds = %"for blur_y.s0.x.x.rebased1086"
  %21745 = icmp sgt i32 %t1691, %21741
  %b1360 = select i1 %21745, i32 %21741, i32 %t1691
  %21746 = icmp slt i32 %b1360, %202
  %blur_x.s0.x.v1.base.s1095 = select i1 %21746, i32 %b1360, i32 %202
  %t7441096 = add nsw i32 %345, %blur_x.s0.x.v1.base.s1095
  %21747 = sext i32 %t7441096 to i64
  %21748 = getelementptr inbounds i16, i16* %read_input860, i64 %21747
  %21749 = getelementptr inbounds i16, i16* %21748, i64 1
  %21750 = bitcast i16* %21749 to <16 x i16>*
  %21751 = load <16 x i16>, <16 x i16>* %21750, align 2, !tbaa !396
  %21752 = getelementptr inbounds i16, i16* %21748, i64 17
  %21753 = bitcast i16* %21752 to <16 x i16>*
  %21754 = load <16 x i16>, <16 x i16>* %21753, align 2, !tbaa !396
  %21755 = bitcast i16* %21748 to <16 x i16>*
  %21756 = load <16 x i16>, <16 x i16>* %21755, align 2, !tbaa !396
  %21757 = getelementptr inbounds i16, i16* %21748, i64 16
  %21758 = bitcast i16* %21757 to <16 x i16>*
  %21759 = load <16 x i16>, <16 x i16>* %21758, align 2, !tbaa !396
  %21760 = getelementptr inbounds i16, i16* %21748, i64 2
  %21761 = bitcast i16* %21760 to <16 x i16>*
  %21762 = load <16 x i16>, <16 x i16>* %21761, align 2, !tbaa !396
  %21763 = getelementptr inbounds i16, i16* %21748, i64 18
  %21764 = bitcast i16* %21763 to <16 x i16>*
  %21765 = load <16 x i16>, <16 x i16>* %21764, align 2, !tbaa !396
  %21766 = getelementptr inbounds i16, i16* %21748, i64 3
  %21767 = bitcast i16* %21766 to <16 x i16>*
  %21768 = load <16 x i16>, <16 x i16>* %21767, align 2, !tbaa !396
  %21769 = getelementptr inbounds i16, i16* %21748, i64 19
  %21770 = bitcast i16* %21769 to <16 x i16>*
  %21771 = load <16 x i16>, <16 x i16>* %21770, align 2, !tbaa !396
  %21772 = getelementptr inbounds i16, i16* %21748, i64 4
  %21773 = bitcast i16* %21772 to <16 x i16>*
  %21774 = load <16 x i16>, <16 x i16>* %21773, align 2, !tbaa !396
  %21775 = getelementptr inbounds i16, i16* %21748, i64 20
  %21776 = bitcast i16* %21775 to <16 x i16>*
  %21777 = load <16 x i16>, <16 x i16>* %21776, align 2, !tbaa !396
  %21778 = getelementptr inbounds i16, i16* %21748, i64 6
  %21779 = bitcast i16* %21778 to <16 x i16>*
  %21780 = load <16 x i16>, <16 x i16>* %21779, align 2, !tbaa !396
  %21781 = getelementptr inbounds i16, i16* %21748, i64 22
  %21782 = bitcast i16* %21781 to <16 x i16>*
  %21783 = load <16 x i16>, <16 x i16>* %21782, align 2, !tbaa !396
  %21784 = getelementptr inbounds i16, i16* %21748, i64 5
  %21785 = bitcast i16* %21784 to <16 x i16>*
  %21786 = load <16 x i16>, <16 x i16>* %21785, align 2, !tbaa !396
  %21787 = getelementptr inbounds i16, i16* %21748, i64 21
  %21788 = bitcast i16* %21787 to <16 x i16>*
  %21789 = load <16 x i16>, <16 x i16>* %21788, align 2, !tbaa !396
  %21790 = add <16 x i16> %21756, %21751
  %21791 = add <16 x i16> %21790, %21762
  %21792 = add <16 x i16> %21791, %21768
  %21793 = add <16 x i16> %21792, %21774
  %21794 = add <16 x i16> %21793, %21780
  %21795 = add <16 x i16> %21794, %21786
  %21796 = add <16 x i16> %21759, %21754
  %21797 = add <16 x i16> %21796, %21765
  %21798 = add <16 x i16> %21797, %21771
  %21799 = add <16 x i16> %21798, %21777
  %21800 = add <16 x i16> %21799, %21783
  %21801 = add <16 x i16> %21800, %21789
  %21802 = shufflevector <16 x i16> %21795, <16 x i16> %21801, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21803 = udiv <32 x i16> %21802, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21804 = shufflevector <32 x i16> %21803, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21805 = sext i32 %blur_x.s0.x.v1.base.s1095 to i64
  %21806 = add nsw i64 %21805, %21673
  %21807 = getelementptr inbounds i16, i16* %blur_x917, i64 %21806
  %21808 = bitcast i16* %21807 to <16 x i16>*
  store <16 x i16> %21804, <16 x i16>* %21808, align 2, !tbaa !399
  %21809 = shufflevector <32 x i16> %21803, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21810 = getelementptr inbounds i16, i16* %21807, i64 16
  %21811 = bitcast i16* %21810 to <16 x i16>*
  store <16 x i16> %21809, <16 x i16>* %21811, align 2, !tbaa !399
  br label %after_bb1089

after_bb1097:                                     ; preds = %"end for blur_y.s0.x.x.rebased1087.after_bb1097_crit_edge", %"produce blur_x1100"
  %.pre-phi3693 = phi i32 [ %.pre3692, %"end for blur_y.s0.x.x.rebased1087.after_bb1097_crit_edge" ], [ %21897, %"produce blur_x1100" ]
  %21812 = mul nsw i32 %.pre-phi3693, %a565
  %t17621108 = sub nsw i32 %21812, %t1689849
  br i1 %306, label %"for blur_y.s0.x.x.rebased1112.preheader", label %"end for blur_y.s0.x.x.rebased1113", !prof !386

"for blur_y.s0.x.x.rebased1112.preheader":        ; preds = %after_bb1097
  %21813 = sext i32 %t17621108 to i64
  %21814 = zext i32 %.pre-phi3673 to i64
  %21815 = mul nsw i64 %21814, %353
  %21816 = sub nsw i64 %21815, %302
  %21817 = zext i32 %.pre-phi3669 to i64
  %21818 = mul nsw i64 %21817, %353
  %21819 = sub nsw i64 %21818, %302
  %21820 = zext i32 %.pre-phi3677 to i64
  %21821 = mul nsw i64 %21820, %353
  %21822 = sub nsw i64 %21821, %302
  %21823 = zext i32 %.pre-phi3681 to i64
  %21824 = mul nsw i64 %21823, %353
  %21825 = sub nsw i64 %21824, %302
  %21826 = zext i32 %.pre-phi3685 to i64
  %21827 = mul nsw i64 %21826, %353
  %21828 = sub nsw i64 %21827, %302
  %21829 = zext i32 %.pre-phi3693 to i64
  %21830 = mul nsw i64 %21829, %353
  %21831 = sub nsw i64 %21830, %302
  %21832 = zext i32 %.pre-phi3689 to i64
  %21833 = mul nsw i64 %21832, %353
  %21834 = sub nsw i64 %21833, %302
  %21835 = sext i32 %a393 to i64
  %21836 = mul nsw i64 %21835, %350
  %21837 = add nsw i64 %21836, %354
  br label %"for blur_y.s0.x.x.rebased1112"

"produce blur_x1100":                             ; preds = %"end for blur_y.s0.x.x.rebased1087"
  %21838 = getelementptr inbounds i16, i16* %read_input860, i64 %348
  %21839 = getelementptr inbounds i16, i16* %21838, i64 -31
  %21840 = bitcast i16* %21839 to <16 x i16>*
  %21841 = load <16 x i16>, <16 x i16>* %21840, align 2, !tbaa !396
  %21842 = getelementptr inbounds i16, i16* %21838, i64 -15
  %21843 = bitcast i16* %21842 to <16 x i16>*
  %21844 = load <16 x i16>, <16 x i16>* %21843, align 2, !tbaa !396
  %21845 = getelementptr inbounds i16, i16* %21838, i64 -32
  %21846 = bitcast i16* %21845 to <16 x i16>*
  %21847 = load <16 x i16>, <16 x i16>* %21846, align 2, !tbaa !396
  %21848 = getelementptr inbounds i16, i16* %21838, i64 -16
  %21849 = bitcast i16* %21848 to <16 x i16>*
  %21850 = load <16 x i16>, <16 x i16>* %21849, align 2, !tbaa !396
  %21851 = getelementptr inbounds i16, i16* %21838, i64 -30
  %21852 = bitcast i16* %21851 to <16 x i16>*
  %21853 = load <16 x i16>, <16 x i16>* %21852, align 2, !tbaa !396
  %21854 = getelementptr inbounds i16, i16* %21838, i64 -14
  %21855 = bitcast i16* %21854 to <16 x i16>*
  %21856 = load <16 x i16>, <16 x i16>* %21855, align 2, !tbaa !396
  %21857 = getelementptr inbounds i16, i16* %21838, i64 -29
  %21858 = bitcast i16* %21857 to <16 x i16>*
  %21859 = load <16 x i16>, <16 x i16>* %21858, align 2, !tbaa !396
  %21860 = getelementptr inbounds i16, i16* %21838, i64 -13
  %21861 = bitcast i16* %21860 to <16 x i16>*
  %21862 = load <16 x i16>, <16 x i16>* %21861, align 2, !tbaa !396
  %21863 = getelementptr inbounds i16, i16* %21838, i64 -28
  %21864 = bitcast i16* %21863 to <16 x i16>*
  %21865 = load <16 x i16>, <16 x i16>* %21864, align 2, !tbaa !396
  %21866 = getelementptr inbounds i16, i16* %21838, i64 -12
  %21867 = bitcast i16* %21866 to <16 x i16>*
  %21868 = load <16 x i16>, <16 x i16>* %21867, align 2, !tbaa !396
  %21869 = getelementptr inbounds i16, i16* %21838, i64 -26
  %21870 = bitcast i16* %21869 to <16 x i16>*
  %21871 = load <16 x i16>, <16 x i16>* %21870, align 2, !tbaa !396
  %21872 = getelementptr inbounds i16, i16* %21838, i64 -10
  %21873 = bitcast i16* %21872 to <16 x i16>*
  %21874 = load <16 x i16>, <16 x i16>* %21873, align 2, !tbaa !396
  %21875 = getelementptr inbounds i16, i16* %21838, i64 -27
  %21876 = bitcast i16* %21875 to <16 x i16>*
  %21877 = load <16 x i16>, <16 x i16>* %21876, align 2, !tbaa !396
  %21878 = getelementptr inbounds i16, i16* %21838, i64 -11
  %21879 = bitcast i16* %21878 to <16 x i16>*
  %21880 = load <16 x i16>, <16 x i16>* %21879, align 2, !tbaa !396
  %21881 = add <16 x i16> %21847, %21841
  %21882 = add <16 x i16> %21881, %21853
  %21883 = add <16 x i16> %21882, %21859
  %21884 = add <16 x i16> %21883, %21865
  %21885 = add <16 x i16> %21884, %21871
  %21886 = add <16 x i16> %21885, %21877
  %21887 = add <16 x i16> %21850, %21844
  %21888 = add <16 x i16> %21887, %21856
  %21889 = add <16 x i16> %21888, %21862
  %21890 = add <16 x i16> %21889, %21868
  %21891 = add <16 x i16> %21890, %21874
  %21892 = add <16 x i16> %21891, %21880
  %21893 = shufflevector <16 x i16> %21886, <16 x i16> %21892, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21894 = udiv <32 x i16> %21893, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21895 = shufflevector <32 x i16> %21894, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21896 = add nsw i32 %a393, 6
  %21897 = and i32 %21896, 7
  %21898 = zext i32 %21897 to i64
  %21899 = mul nsw i64 %303, %21898
  %21900 = add nsw i64 %305, %21899
  %21901 = getelementptr inbounds i16, i16* %blur_x917, i64 %21900
  %21902 = getelementptr inbounds i16, i16* %21901, i64 -32
  %21903 = bitcast i16* %21902 to <16 x i16>*
  store <16 x i16> %21895, <16 x i16>* %21903, align 2, !tbaa !399
  %21904 = shufflevector <32 x i16> %21894, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21905 = getelementptr inbounds i16, i16* %21901, i64 -16
  %21906 = bitcast i16* %21905 to <16 x i16>*
  store <16 x i16> %21904, <16 x i16>* %21906, align 2, !tbaa !399
  %21907 = zext i32 %.pre-phi3673 to i64
  %21908 = mul nsw i64 %21907, %349
  %21909 = add nsw i64 %21908, %300
  %21910 = getelementptr inbounds i16, i16* %blur_x917, i64 %21909
  %21911 = getelementptr inbounds i16, i16* %21910, i64 -32
  %21912 = bitcast i16* %21911 to <16 x i16>*
  %21913 = load <16 x i16>, <16 x i16>* %21912, align 2, !tbaa !399
  %21914 = getelementptr inbounds i16, i16* %21910, i64 -16
  %21915 = bitcast i16* %21914 to <16 x i16>*
  %21916 = load <16 x i16>, <16 x i16>* %21915, align 2, !tbaa !399
  %21917 = zext i32 %.pre-phi3669 to i64
  %21918 = mul nsw i64 %21917, %349
  %21919 = add nsw i64 %21918, %300
  %21920 = getelementptr inbounds i16, i16* %blur_x917, i64 %21919
  %21921 = getelementptr inbounds i16, i16* %21920, i64 -32
  %21922 = bitcast i16* %21921 to <16 x i16>*
  %21923 = load <16 x i16>, <16 x i16>* %21922, align 2, !tbaa !399
  %21924 = getelementptr inbounds i16, i16* %21920, i64 -16
  %21925 = bitcast i16* %21924 to <16 x i16>*
  %21926 = load <16 x i16>, <16 x i16>* %21925, align 2, !tbaa !399
  %21927 = zext i32 %.pre-phi3677 to i64
  %21928 = mul nsw i64 %21927, %349
  %21929 = add nsw i64 %21928, %300
  %21930 = getelementptr inbounds i16, i16* %blur_x917, i64 %21929
  %21931 = getelementptr inbounds i16, i16* %21930, i64 -32
  %21932 = bitcast i16* %21931 to <16 x i16>*
  %21933 = load <16 x i16>, <16 x i16>* %21932, align 2, !tbaa !399
  %21934 = getelementptr inbounds i16, i16* %21930, i64 -16
  %21935 = bitcast i16* %21934 to <16 x i16>*
  %21936 = load <16 x i16>, <16 x i16>* %21935, align 2, !tbaa !399
  %21937 = zext i32 %.pre-phi3681 to i64
  %21938 = mul nsw i64 %21937, %349
  %21939 = add nsw i64 %21938, %300
  %21940 = getelementptr inbounds i16, i16* %blur_x917, i64 %21939
  %21941 = getelementptr inbounds i16, i16* %21940, i64 -32
  %21942 = bitcast i16* %21941 to <16 x i16>*
  %21943 = load <16 x i16>, <16 x i16>* %21942, align 2, !tbaa !399
  %21944 = getelementptr inbounds i16, i16* %21940, i64 -16
  %21945 = bitcast i16* %21944 to <16 x i16>*
  %21946 = load <16 x i16>, <16 x i16>* %21945, align 2, !tbaa !399
  %21947 = zext i32 %.pre-phi3685 to i64
  %21948 = mul nsw i64 %21947, %349
  %21949 = add nsw i64 %21948, %300
  %21950 = getelementptr inbounds i16, i16* %blur_x917, i64 %21949
  %21951 = getelementptr inbounds i16, i16* %21950, i64 -32
  %21952 = bitcast i16* %21951 to <16 x i16>*
  %21953 = load <16 x i16>, <16 x i16>* %21952, align 2, !tbaa !399
  %21954 = getelementptr inbounds i16, i16* %21950, i64 -16
  %21955 = bitcast i16* %21954 to <16 x i16>*
  %21956 = load <16 x i16>, <16 x i16>* %21955, align 2, !tbaa !399
  %21957 = mul nsw i64 %21898, %349
  %21958 = add nsw i64 %21957, %300
  %21959 = getelementptr inbounds i16, i16* %blur_x917, i64 %21958
  %21960 = getelementptr inbounds i16, i16* %21959, i64 -32
  %21961 = bitcast i16* %21960 to <16 x i16>*
  %21962 = load <16 x i16>, <16 x i16>* %21961, align 2, !tbaa !399
  %21963 = getelementptr inbounds i16, i16* %21959, i64 -16
  %21964 = bitcast i16* %21963 to <16 x i16>*
  %21965 = load <16 x i16>, <16 x i16>* %21964, align 2, !tbaa !399
  %21966 = zext i32 %.pre-phi3689 to i64
  %21967 = mul nsw i64 %21966, %349
  %21968 = add nsw i64 %21967, %300
  %21969 = getelementptr inbounds i16, i16* %blur_x917, i64 %21968
  %21970 = getelementptr inbounds i16, i16* %21969, i64 -32
  %21971 = bitcast i16* %21970 to <16 x i16>*
  %21972 = load <16 x i16>, <16 x i16>* %21971, align 2, !tbaa !399
  %21973 = getelementptr inbounds i16, i16* %21969, i64 -16
  %21974 = bitcast i16* %21973 to <16 x i16>*
  %21975 = load <16 x i16>, <16 x i16>* %21974, align 2, !tbaa !399
  %21976 = add <16 x i16> %21923, %21913
  %21977 = add <16 x i16> %21976, %21933
  %21978 = add <16 x i16> %21977, %21943
  %21979 = add <16 x i16> %21978, %21953
  %21980 = add <16 x i16> %21979, %21962
  %21981 = add <16 x i16> %21980, %21972
  %21982 = add <16 x i16> %21926, %21916
  %21983 = add <16 x i16> %21982, %21936
  %21984 = add <16 x i16> %21983, %21946
  %21985 = add <16 x i16> %21984, %21956
  %21986 = add <16 x i16> %21985, %21965
  %21987 = add <16 x i16> %21986, %21975
  %21988 = shufflevector <16 x i16> %21981, <16 x i16> %21987, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21989 = udiv <32 x i16> %21988, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %21990 = shufflevector <32 x i16> %21989, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21991 = sext i32 %a393 to i64
  %21992 = mul nsw i64 %21991, %350
  %21993 = add nsw i64 %352, %21992
  %21994 = getelementptr inbounds i16, i16* %267, i64 %21993
  %21995 = getelementptr inbounds i16, i16* %21994, i64 -32
  %21996 = bitcast i16* %21995 to <16 x i16>*
  store <16 x i16> %21990, <16 x i16>* %21996, align 2, !tbaa !401
  %21997 = shufflevector <32 x i16> %21989, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21998 = getelementptr inbounds i16, i16* %21994, i64 -16
  %21999 = bitcast i16* %21998 to <16 x i16>*
  store <16 x i16> %21997, <16 x i16>* %21999, align 2, !tbaa !401
  br label %after_bb1097

"for blur_y.s0.x.x.rebased1112":                  ; preds = %"for blur_y.s0.x.x.rebased1112.preheader", %"consume blur_x1120"
  %indvars.iv3508 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1112.preheader" ], [ %indvars.iv.next3509, %"consume blur_x1120" ]
  %22000 = add nsw i64 %indvars.iv3508, %307
  %22001 = icmp slt i64 %22000, 1
  %22002 = trunc i64 %22000 to i32
  %22003 = shl nsw i32 %22002, 5
  %22004 = icmp sgt i32 %202, %22003
  %22005 = or i1 %22001, %22004
  br i1 %22005, label %"produce blur_x1118", label %"for blur_y.s0.x.x.rebased1112.consume blur_x1120_crit_edge"

"for blur_y.s0.x.x.rebased1112.consume blur_x1120_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1112"
  %.pre3694 = shl nsw i64 %22000, 5
  br label %"consume blur_x1120"

"end for blur_y.s0.x.x.rebased1113":              ; preds = %"consume blur_x1120", %after_bb1097
  br i1 %308, label %"for blur_y.s0.x.x.rebased1128.preheader", label %"end for blur_y.s0.x.x.rebased1129", !prof !386

"for blur_y.s0.x.x.rebased1128.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1113"
  %22006 = sext i32 %t17621108 to i64
  %22007 = zext i32 %.pre-phi3673 to i64
  %22008 = mul nsw i64 %22007, %353
  %22009 = sub nsw i64 %22008, %302
  %22010 = zext i32 %.pre-phi3669 to i64
  %22011 = mul nsw i64 %22010, %353
  %22012 = sub nsw i64 %22011, %302
  %22013 = zext i32 %.pre-phi3677 to i64
  %22014 = mul nsw i64 %22013, %353
  %22015 = sub nsw i64 %22014, %302
  %22016 = zext i32 %.pre-phi3681 to i64
  %22017 = mul nsw i64 %22016, %353
  %22018 = sub nsw i64 %22017, %302
  %22019 = zext i32 %.pre-phi3685 to i64
  %22020 = mul nsw i64 %22019, %353
  %22021 = sub nsw i64 %22020, %302
  %22022 = zext i32 %.pre-phi3693 to i64
  %22023 = mul nsw i64 %22022, %353
  %22024 = sub nsw i64 %22023, %302
  %22025 = zext i32 %.pre-phi3689 to i64
  %22026 = mul nsw i64 %22025, %353
  %22027 = sub nsw i64 %22026, %302
  %22028 = sext i32 %a393 to i64
  %22029 = mul nsw i64 %22028, %350
  %22030 = add nsw i64 %22029, %354
  br label %"for blur_y.s0.x.x.rebased1128"

"produce blur_x1118":                             ; preds = %"for blur_y.s0.x.x.rebased1112"
  %t7521119 = add nsw i32 %22003, %344
  %22031 = sext i32 %t7521119 to i64
  %22032 = getelementptr inbounds i16, i16* %read_input860, i64 %22031
  %22033 = getelementptr inbounds i16, i16* %22032, i64 1
  %22034 = bitcast i16* %22033 to <16 x i16>*
  %22035 = load <16 x i16>, <16 x i16>* %22034, align 2, !tbaa !396
  %22036 = getelementptr inbounds i16, i16* %22032, i64 17
  %22037 = bitcast i16* %22036 to <16 x i16>*
  %22038 = load <16 x i16>, <16 x i16>* %22037, align 2, !tbaa !396
  %22039 = bitcast i16* %22032 to <16 x i16>*
  %22040 = load <16 x i16>, <16 x i16>* %22039, align 2, !tbaa !396
  %22041 = getelementptr inbounds i16, i16* %22032, i64 16
  %22042 = bitcast i16* %22041 to <16 x i16>*
  %22043 = load <16 x i16>, <16 x i16>* %22042, align 2, !tbaa !396
  %22044 = getelementptr inbounds i16, i16* %22032, i64 2
  %22045 = bitcast i16* %22044 to <16 x i16>*
  %22046 = load <16 x i16>, <16 x i16>* %22045, align 2, !tbaa !396
  %22047 = getelementptr inbounds i16, i16* %22032, i64 18
  %22048 = bitcast i16* %22047 to <16 x i16>*
  %22049 = load <16 x i16>, <16 x i16>* %22048, align 2, !tbaa !396
  %22050 = getelementptr inbounds i16, i16* %22032, i64 3
  %22051 = bitcast i16* %22050 to <16 x i16>*
  %22052 = load <16 x i16>, <16 x i16>* %22051, align 2, !tbaa !396
  %22053 = getelementptr inbounds i16, i16* %22032, i64 19
  %22054 = bitcast i16* %22053 to <16 x i16>*
  %22055 = load <16 x i16>, <16 x i16>* %22054, align 2, !tbaa !396
  %22056 = getelementptr inbounds i16, i16* %22032, i64 4
  %22057 = bitcast i16* %22056 to <16 x i16>*
  %22058 = load <16 x i16>, <16 x i16>* %22057, align 2, !tbaa !396
  %22059 = getelementptr inbounds i16, i16* %22032, i64 20
  %22060 = bitcast i16* %22059 to <16 x i16>*
  %22061 = load <16 x i16>, <16 x i16>* %22060, align 2, !tbaa !396
  %22062 = getelementptr inbounds i16, i16* %22032, i64 6
  %22063 = bitcast i16* %22062 to <16 x i16>*
  %22064 = load <16 x i16>, <16 x i16>* %22063, align 2, !tbaa !396
  %22065 = getelementptr inbounds i16, i16* %22032, i64 22
  %22066 = bitcast i16* %22065 to <16 x i16>*
  %22067 = load <16 x i16>, <16 x i16>* %22066, align 2, !tbaa !396
  %22068 = getelementptr inbounds i16, i16* %22032, i64 5
  %22069 = bitcast i16* %22068 to <16 x i16>*
  %22070 = load <16 x i16>, <16 x i16>* %22069, align 2, !tbaa !396
  %22071 = getelementptr inbounds i16, i16* %22032, i64 21
  %22072 = bitcast i16* %22071 to <16 x i16>*
  %22073 = load <16 x i16>, <16 x i16>* %22072, align 2, !tbaa !396
  %22074 = add <16 x i16> %22040, %22035
  %22075 = add <16 x i16> %22074, %22046
  %22076 = add <16 x i16> %22075, %22052
  %22077 = add <16 x i16> %22076, %22058
  %22078 = add <16 x i16> %22077, %22064
  %22079 = add <16 x i16> %22078, %22070
  %22080 = add <16 x i16> %22043, %22038
  %22081 = add <16 x i16> %22080, %22049
  %22082 = add <16 x i16> %22081, %22055
  %22083 = add <16 x i16> %22082, %22061
  %22084 = add <16 x i16> %22083, %22067
  %22085 = add <16 x i16> %22084, %22073
  %22086 = shufflevector <16 x i16> %22079, <16 x i16> %22085, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22087 = udiv <32 x i16> %22086, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %22088 = shufflevector <32 x i16> %22087, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22089 = shl nsw i64 %22000, 5
  %22090 = add nsw i64 %22089, %21813
  %22091 = getelementptr inbounds i16, i16* %blur_x917, i64 %22090
  %22092 = bitcast i16* %22091 to <16 x i16>*
  store <16 x i16> %22088, <16 x i16>* %22092, align 2, !tbaa !399
  %22093 = shufflevector <32 x i16> %22087, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22094 = getelementptr inbounds i16, i16* %22091, i64 16
  %22095 = bitcast i16* %22094 to <16 x i16>*
  store <16 x i16> %22093, <16 x i16>* %22095, align 2, !tbaa !399
  br label %"consume blur_x1120"

"consume blur_x1120":                             ; preds = %"for blur_y.s0.x.x.rebased1112.consume blur_x1120_crit_edge", %"produce blur_x1118"
  %.pre-phi3695 = phi i64 [ %.pre3694, %"for blur_y.s0.x.x.rebased1112.consume blur_x1120_crit_edge" ], [ %22089, %"produce blur_x1118" ]
  %22096 = add nsw i64 %21816, %.pre-phi3695
  %22097 = getelementptr inbounds i16, i16* %blur_x917, i64 %22096
  %22098 = bitcast i16* %22097 to <16 x i16>*
  %22099 = load <16 x i16>, <16 x i16>* %22098, align 2, !tbaa !399
  %22100 = getelementptr inbounds i16, i16* %22097, i64 16
  %22101 = bitcast i16* %22100 to <16 x i16>*
  %22102 = load <16 x i16>, <16 x i16>* %22101, align 2, !tbaa !399
  %22103 = add nsw i64 %21819, %.pre-phi3695
  %22104 = getelementptr inbounds i16, i16* %blur_x917, i64 %22103
  %22105 = bitcast i16* %22104 to <16 x i16>*
  %22106 = load <16 x i16>, <16 x i16>* %22105, align 2, !tbaa !399
  %22107 = getelementptr inbounds i16, i16* %22104, i64 16
  %22108 = bitcast i16* %22107 to <16 x i16>*
  %22109 = load <16 x i16>, <16 x i16>* %22108, align 2, !tbaa !399
  %22110 = add nsw i64 %21822, %.pre-phi3695
  %22111 = getelementptr inbounds i16, i16* %blur_x917, i64 %22110
  %22112 = bitcast i16* %22111 to <16 x i16>*
  %22113 = load <16 x i16>, <16 x i16>* %22112, align 2, !tbaa !399
  %22114 = getelementptr inbounds i16, i16* %22111, i64 16
  %22115 = bitcast i16* %22114 to <16 x i16>*
  %22116 = load <16 x i16>, <16 x i16>* %22115, align 2, !tbaa !399
  %22117 = add nsw i64 %21825, %.pre-phi3695
  %22118 = getelementptr inbounds i16, i16* %blur_x917, i64 %22117
  %22119 = bitcast i16* %22118 to <16 x i16>*
  %22120 = load <16 x i16>, <16 x i16>* %22119, align 2, !tbaa !399
  %22121 = getelementptr inbounds i16, i16* %22118, i64 16
  %22122 = bitcast i16* %22121 to <16 x i16>*
  %22123 = load <16 x i16>, <16 x i16>* %22122, align 2, !tbaa !399
  %22124 = add nsw i64 %21828, %.pre-phi3695
  %22125 = getelementptr inbounds i16, i16* %blur_x917, i64 %22124
  %22126 = bitcast i16* %22125 to <16 x i16>*
  %22127 = load <16 x i16>, <16 x i16>* %22126, align 2, !tbaa !399
  %22128 = getelementptr inbounds i16, i16* %22125, i64 16
  %22129 = bitcast i16* %22128 to <16 x i16>*
  %22130 = load <16 x i16>, <16 x i16>* %22129, align 2, !tbaa !399
  %22131 = add nsw i64 %21831, %.pre-phi3695
  %22132 = getelementptr inbounds i16, i16* %blur_x917, i64 %22131
  %22133 = bitcast i16* %22132 to <16 x i16>*
  %22134 = load <16 x i16>, <16 x i16>* %22133, align 2, !tbaa !399
  %22135 = getelementptr inbounds i16, i16* %22132, i64 16
  %22136 = bitcast i16* %22135 to <16 x i16>*
  %22137 = load <16 x i16>, <16 x i16>* %22136, align 2, !tbaa !399
  %22138 = add nsw i64 %21834, %.pre-phi3695
  %22139 = getelementptr inbounds i16, i16* %blur_x917, i64 %22138
  %22140 = bitcast i16* %22139 to <16 x i16>*
  %22141 = load <16 x i16>, <16 x i16>* %22140, align 2, !tbaa !399
  %22142 = getelementptr inbounds i16, i16* %22139, i64 16
  %22143 = bitcast i16* %22142 to <16 x i16>*
  %22144 = load <16 x i16>, <16 x i16>* %22143, align 2, !tbaa !399
  %22145 = add <16 x i16> %22106, %22099
  %22146 = add <16 x i16> %22145, %22113
  %22147 = add <16 x i16> %22146, %22120
  %22148 = add <16 x i16> %22147, %22127
  %22149 = add <16 x i16> %22148, %22134
  %22150 = add <16 x i16> %22149, %22141
  %22151 = add <16 x i16> %22109, %22102
  %22152 = add <16 x i16> %22151, %22116
  %22153 = add <16 x i16> %22152, %22123
  %22154 = add <16 x i16> %22153, %22130
  %22155 = add <16 x i16> %22154, %22137
  %22156 = add <16 x i16> %22155, %22144
  %22157 = shufflevector <16 x i16> %22150, <16 x i16> %22156, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22158 = udiv <32 x i16> %22157, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %22159 = shufflevector <32 x i16> %22158, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22160 = add nsw i64 %21837, %.pre-phi3695
  %22161 = getelementptr inbounds i16, i16* %267, i64 %22160
  %22162 = bitcast i16* %22161 to <16 x i16>*
  store <16 x i16> %22159, <16 x i16>* %22162, align 2, !tbaa !401
  %22163 = shufflevector <32 x i16> %22158, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22164 = getelementptr inbounds i16, i16* %22161, i64 16
  %22165 = bitcast i16* %22164 to <16 x i16>*
  store <16 x i16> %22163, <16 x i16>* %22165, align 2, !tbaa !401
  %indvars.iv.next3509 = add nuw nsw i64 %indvars.iv3508, 1
  %.not2769 = icmp eq i64 %indvars.iv.next3509, %546
  br i1 %.not2769, label %"end for blur_y.s0.x.x.rebased1113", label %"for blur_y.s0.x.x.rebased1112"

"for blur_y.s0.x.x.rebased1128":                  ; preds = %"for blur_y.s0.x.x.rebased1128.preheader", %"consume blur_x1139"
  %blur_y.s0.x.x.rebased1130 = phi i32 [ %22308, %"consume blur_x1139" ], [ 0, %"for blur_y.s0.x.x.rebased1128.preheader" ]
  %22166 = add nsw i32 %blur_y.s0.x.x.rebased1130, %t1670852
  %a1523 = shl nsw i32 %22166, 5
  %22167 = icmp sgt i32 %t1691, %a1523
  %blur_y.s0.x.v0.base.s1131 = select i1 %22167, i32 %a1523, i32 %t1691
  %22168 = icmp slt i32 %22166, 1
  %22169 = icmp sgt i32 %202, %a1523
  %22170 = or i1 %22168, %22169
  br i1 %22170, label %"produce blur_x1136", label %"consume blur_x1139"

"end for blur_y.s0.x.x.rebased1129":              ; preds = %"consume blur_x1139", %"end for blur_y.s0.x.x.rebased1113"
  br i1 %233, label %"produce blur_x1143", label %"end for blur_y.s0.x.x.rebased1129.after_bb1140_crit_edge"

"end for blur_y.s0.x.x.rebased1129.after_bb1140_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1129"
  %.pre3696 = add nsw i32 %a393, 7
  %.pre3698 = and i32 %.pre3696, 7
  br label %after_bb1140

"produce blur_x1136":                             ; preds = %"for blur_y.s0.x.x.rebased1128"
  %22171 = icmp slt i32 %blur_y.s0.x.v0.base.s1131, %202
  %blur_x.s0.x.v1.base.s1137 = select i1 %22171, i32 %blur_y.s0.x.v0.base.s1131, i32 %202
  %t7571138 = add nsw i32 %blur_x.s0.x.v1.base.s1137, %344
  %22172 = sext i32 %t7571138 to i64
  %22173 = getelementptr inbounds i16, i16* %read_input860, i64 %22172
  %22174 = getelementptr inbounds i16, i16* %22173, i64 1
  %22175 = bitcast i16* %22174 to <16 x i16>*
  %22176 = load <16 x i16>, <16 x i16>* %22175, align 2, !tbaa !396
  %22177 = getelementptr inbounds i16, i16* %22173, i64 17
  %22178 = bitcast i16* %22177 to <16 x i16>*
  %22179 = load <16 x i16>, <16 x i16>* %22178, align 2, !tbaa !396
  %22180 = bitcast i16* %22173 to <16 x i16>*
  %22181 = load <16 x i16>, <16 x i16>* %22180, align 2, !tbaa !396
  %22182 = getelementptr inbounds i16, i16* %22173, i64 16
  %22183 = bitcast i16* %22182 to <16 x i16>*
  %22184 = load <16 x i16>, <16 x i16>* %22183, align 2, !tbaa !396
  %22185 = getelementptr inbounds i16, i16* %22173, i64 2
  %22186 = bitcast i16* %22185 to <16 x i16>*
  %22187 = load <16 x i16>, <16 x i16>* %22186, align 2, !tbaa !396
  %22188 = getelementptr inbounds i16, i16* %22173, i64 18
  %22189 = bitcast i16* %22188 to <16 x i16>*
  %22190 = load <16 x i16>, <16 x i16>* %22189, align 2, !tbaa !396
  %22191 = getelementptr inbounds i16, i16* %22173, i64 3
  %22192 = bitcast i16* %22191 to <16 x i16>*
  %22193 = load <16 x i16>, <16 x i16>* %22192, align 2, !tbaa !396
  %22194 = getelementptr inbounds i16, i16* %22173, i64 19
  %22195 = bitcast i16* %22194 to <16 x i16>*
  %22196 = load <16 x i16>, <16 x i16>* %22195, align 2, !tbaa !396
  %22197 = getelementptr inbounds i16, i16* %22173, i64 4
  %22198 = bitcast i16* %22197 to <16 x i16>*
  %22199 = load <16 x i16>, <16 x i16>* %22198, align 2, !tbaa !396
  %22200 = getelementptr inbounds i16, i16* %22173, i64 20
  %22201 = bitcast i16* %22200 to <16 x i16>*
  %22202 = load <16 x i16>, <16 x i16>* %22201, align 2, !tbaa !396
  %22203 = getelementptr inbounds i16, i16* %22173, i64 6
  %22204 = bitcast i16* %22203 to <16 x i16>*
  %22205 = load <16 x i16>, <16 x i16>* %22204, align 2, !tbaa !396
  %22206 = getelementptr inbounds i16, i16* %22173, i64 22
  %22207 = bitcast i16* %22206 to <16 x i16>*
  %22208 = load <16 x i16>, <16 x i16>* %22207, align 2, !tbaa !396
  %22209 = getelementptr inbounds i16, i16* %22173, i64 5
  %22210 = bitcast i16* %22209 to <16 x i16>*
  %22211 = load <16 x i16>, <16 x i16>* %22210, align 2, !tbaa !396
  %22212 = getelementptr inbounds i16, i16* %22173, i64 21
  %22213 = bitcast i16* %22212 to <16 x i16>*
  %22214 = load <16 x i16>, <16 x i16>* %22213, align 2, !tbaa !396
  %22215 = add <16 x i16> %22181, %22176
  %22216 = add <16 x i16> %22215, %22187
  %22217 = add <16 x i16> %22216, %22193
  %22218 = add <16 x i16> %22217, %22199
  %22219 = add <16 x i16> %22218, %22205
  %22220 = add <16 x i16> %22219, %22211
  %22221 = add <16 x i16> %22184, %22179
  %22222 = add <16 x i16> %22221, %22190
  %22223 = add <16 x i16> %22222, %22196
  %22224 = add <16 x i16> %22223, %22202
  %22225 = add <16 x i16> %22224, %22208
  %22226 = add <16 x i16> %22225, %22214
  %22227 = shufflevector <16 x i16> %22220, <16 x i16> %22226, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22228 = udiv <32 x i16> %22227, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %22229 = shufflevector <32 x i16> %22228, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22230 = sext i32 %blur_x.s0.x.v1.base.s1137 to i64
  %22231 = add nsw i64 %22230, %22006
  %22232 = getelementptr inbounds i16, i16* %blur_x917, i64 %22231
  %22233 = bitcast i16* %22232 to <16 x i16>*
  store <16 x i16> %22229, <16 x i16>* %22233, align 2, !tbaa !399
  %22234 = shufflevector <32 x i16> %22228, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22235 = getelementptr inbounds i16, i16* %22232, i64 16
  %22236 = bitcast i16* %22235 to <16 x i16>*
  store <16 x i16> %22234, <16 x i16>* %22236, align 2, !tbaa !399
  br label %"consume blur_x1139"

"consume blur_x1139":                             ; preds = %"for blur_y.s0.x.x.rebased1128", %"produce blur_x1136"
  %22237 = sext i32 %blur_y.s0.x.v0.base.s1131 to i64
  %22238 = add nsw i64 %22009, %22237
  %22239 = getelementptr inbounds i16, i16* %blur_x917, i64 %22238
  %22240 = bitcast i16* %22239 to <16 x i16>*
  %22241 = load <16 x i16>, <16 x i16>* %22240, align 2, !tbaa !399
  %22242 = getelementptr inbounds i16, i16* %22239, i64 16
  %22243 = bitcast i16* %22242 to <16 x i16>*
  %22244 = load <16 x i16>, <16 x i16>* %22243, align 2, !tbaa !399
  %22245 = add nsw i64 %22012, %22237
  %22246 = getelementptr inbounds i16, i16* %blur_x917, i64 %22245
  %22247 = bitcast i16* %22246 to <16 x i16>*
  %22248 = load <16 x i16>, <16 x i16>* %22247, align 2, !tbaa !399
  %22249 = getelementptr inbounds i16, i16* %22246, i64 16
  %22250 = bitcast i16* %22249 to <16 x i16>*
  %22251 = load <16 x i16>, <16 x i16>* %22250, align 2, !tbaa !399
  %22252 = add nsw i64 %22015, %22237
  %22253 = getelementptr inbounds i16, i16* %blur_x917, i64 %22252
  %22254 = bitcast i16* %22253 to <16 x i16>*
  %22255 = load <16 x i16>, <16 x i16>* %22254, align 2, !tbaa !399
  %22256 = getelementptr inbounds i16, i16* %22253, i64 16
  %22257 = bitcast i16* %22256 to <16 x i16>*
  %22258 = load <16 x i16>, <16 x i16>* %22257, align 2, !tbaa !399
  %22259 = add nsw i64 %22018, %22237
  %22260 = getelementptr inbounds i16, i16* %blur_x917, i64 %22259
  %22261 = bitcast i16* %22260 to <16 x i16>*
  %22262 = load <16 x i16>, <16 x i16>* %22261, align 2, !tbaa !399
  %22263 = getelementptr inbounds i16, i16* %22260, i64 16
  %22264 = bitcast i16* %22263 to <16 x i16>*
  %22265 = load <16 x i16>, <16 x i16>* %22264, align 2, !tbaa !399
  %22266 = add nsw i64 %22021, %22237
  %22267 = getelementptr inbounds i16, i16* %blur_x917, i64 %22266
  %22268 = bitcast i16* %22267 to <16 x i16>*
  %22269 = load <16 x i16>, <16 x i16>* %22268, align 2, !tbaa !399
  %22270 = getelementptr inbounds i16, i16* %22267, i64 16
  %22271 = bitcast i16* %22270 to <16 x i16>*
  %22272 = load <16 x i16>, <16 x i16>* %22271, align 2, !tbaa !399
  %22273 = add nsw i64 %22024, %22237
  %22274 = getelementptr inbounds i16, i16* %blur_x917, i64 %22273
  %22275 = bitcast i16* %22274 to <16 x i16>*
  %22276 = load <16 x i16>, <16 x i16>* %22275, align 2, !tbaa !399
  %22277 = getelementptr inbounds i16, i16* %22274, i64 16
  %22278 = bitcast i16* %22277 to <16 x i16>*
  %22279 = load <16 x i16>, <16 x i16>* %22278, align 2, !tbaa !399
  %22280 = add nsw i64 %22027, %22237
  %22281 = getelementptr inbounds i16, i16* %blur_x917, i64 %22280
  %22282 = bitcast i16* %22281 to <16 x i16>*
  %22283 = load <16 x i16>, <16 x i16>* %22282, align 2, !tbaa !399
  %22284 = getelementptr inbounds i16, i16* %22281, i64 16
  %22285 = bitcast i16* %22284 to <16 x i16>*
  %22286 = load <16 x i16>, <16 x i16>* %22285, align 2, !tbaa !399
  %22287 = add <16 x i16> %22248, %22241
  %22288 = add <16 x i16> %22287, %22255
  %22289 = add <16 x i16> %22288, %22262
  %22290 = add <16 x i16> %22289, %22269
  %22291 = add <16 x i16> %22290, %22276
  %22292 = add <16 x i16> %22291, %22283
  %22293 = add <16 x i16> %22251, %22244
  %22294 = add <16 x i16> %22293, %22258
  %22295 = add <16 x i16> %22294, %22265
  %22296 = add <16 x i16> %22295, %22272
  %22297 = add <16 x i16> %22296, %22279
  %22298 = add <16 x i16> %22297, %22286
  %22299 = shufflevector <16 x i16> %22292, <16 x i16> %22298, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22300 = udiv <32 x i16> %22299, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %22301 = shufflevector <32 x i16> %22300, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22302 = add nsw i64 %22030, %22237
  %22303 = getelementptr inbounds i16, i16* %267, i64 %22302
  %22304 = bitcast i16* %22303 to <16 x i16>*
  store <16 x i16> %22301, <16 x i16>* %22304, align 2, !tbaa !401
  %22305 = shufflevector <32 x i16> %22300, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22306 = getelementptr inbounds i16, i16* %22303, i64 16
  %22307 = bitcast i16* %22306 to <16 x i16>*
  store <16 x i16> %22305, <16 x i16>* %22307, align 2, !tbaa !401
  %22308 = add nuw nsw i32 %blur_y.s0.x.x.rebased1130, 1
  %.not2768 = icmp eq i32 %22308, %t1727936
  br i1 %.not2768, label %"end for blur_y.s0.x.x.rebased1129", label %"for blur_y.s0.x.x.rebased1128"

after_bb1140:                                     ; preds = %"end for blur_y.s0.x.x.rebased1129.after_bb1140_crit_edge", %"produce blur_x1143"
  %.pre-phi3699 = phi i32 [ %.pre3698, %"end for blur_y.s0.x.x.rebased1129.after_bb1140_crit_edge" ], [ %22395, %"produce blur_x1143" ]
  %22309 = mul nsw i32 %.pre-phi3699, %a565
  %t17781151 = sub nsw i32 %22309, %t1689849
  br i1 %306, label %"for blur_y.s0.x.x.rebased1155.preheader", label %"end for blur_y.s0.x.x.rebased1156", !prof !386

"for blur_y.s0.x.x.rebased1155.preheader":        ; preds = %after_bb1140
  %22310 = sext i32 %t17781151 to i64
  %22311 = zext i32 %.pre-phi3677 to i64
  %22312 = mul nsw i64 %22311, %353
  %22313 = sub nsw i64 %22312, %302
  %22314 = zext i32 %.pre-phi3673 to i64
  %22315 = mul nsw i64 %22314, %353
  %22316 = sub nsw i64 %22315, %302
  %22317 = zext i32 %.pre-phi3681 to i64
  %22318 = mul nsw i64 %22317, %353
  %22319 = sub nsw i64 %22318, %302
  %22320 = zext i32 %.pre-phi3685 to i64
  %22321 = mul nsw i64 %22320, %353
  %22322 = sub nsw i64 %22321, %302
  %22323 = zext i32 %.pre-phi3689 to i64
  %22324 = mul nsw i64 %22323, %353
  %22325 = sub nsw i64 %22324, %302
  %22326 = zext i32 %.pre-phi3699 to i64
  %22327 = mul nsw i64 %22326, %353
  %22328 = sub nsw i64 %22327, %302
  %22329 = zext i32 %.pre-phi3693 to i64
  %22330 = mul nsw i64 %22329, %353
  %22331 = sub nsw i64 %22330, %302
  %22332 = sext i32 %a393 to i64
  %22333 = add nsw i64 %22332, 1
  %22334 = mul nsw i64 %22333, %350
  %22335 = add nsw i64 %22334, %354
  br label %"for blur_y.s0.x.x.rebased1155"

"produce blur_x1143":                             ; preds = %"end for blur_y.s0.x.x.rebased1129"
  %22336 = getelementptr inbounds i16, i16* %read_input860, i64 %358
  %22337 = getelementptr inbounds i16, i16* %22336, i64 -31
  %22338 = bitcast i16* %22337 to <16 x i16>*
  %22339 = load <16 x i16>, <16 x i16>* %22338, align 2, !tbaa !396
  %22340 = getelementptr inbounds i16, i16* %22336, i64 -15
  %22341 = bitcast i16* %22340 to <16 x i16>*
  %22342 = load <16 x i16>, <16 x i16>* %22341, align 2, !tbaa !396
  %22343 = getelementptr inbounds i16, i16* %22336, i64 -32
  %22344 = bitcast i16* %22343 to <16 x i16>*
  %22345 = load <16 x i16>, <16 x i16>* %22344, align 2, !tbaa !396
  %22346 = getelementptr inbounds i16, i16* %22336, i64 -16
  %22347 = bitcast i16* %22346 to <16 x i16>*
  %22348 = load <16 x i16>, <16 x i16>* %22347, align 2, !tbaa !396
  %22349 = getelementptr inbounds i16, i16* %22336, i64 -30
  %22350 = bitcast i16* %22349 to <16 x i16>*
  %22351 = load <16 x i16>, <16 x i16>* %22350, align 2, !tbaa !396
  %22352 = getelementptr inbounds i16, i16* %22336, i64 -14
  %22353 = bitcast i16* %22352 to <16 x i16>*
  %22354 = load <16 x i16>, <16 x i16>* %22353, align 2, !tbaa !396
  %22355 = getelementptr inbounds i16, i16* %22336, i64 -29
  %22356 = bitcast i16* %22355 to <16 x i16>*
  %22357 = load <16 x i16>, <16 x i16>* %22356, align 2, !tbaa !396
  %22358 = getelementptr inbounds i16, i16* %22336, i64 -13
  %22359 = bitcast i16* %22358 to <16 x i16>*
  %22360 = load <16 x i16>, <16 x i16>* %22359, align 2, !tbaa !396
  %22361 = getelementptr inbounds i16, i16* %22336, i64 -28
  %22362 = bitcast i16* %22361 to <16 x i16>*
  %22363 = load <16 x i16>, <16 x i16>* %22362, align 2, !tbaa !396
  %22364 = getelementptr inbounds i16, i16* %22336, i64 -12
  %22365 = bitcast i16* %22364 to <16 x i16>*
  %22366 = load <16 x i16>, <16 x i16>* %22365, align 2, !tbaa !396
  %22367 = getelementptr inbounds i16, i16* %22336, i64 -26
  %22368 = bitcast i16* %22367 to <16 x i16>*
  %22369 = load <16 x i16>, <16 x i16>* %22368, align 2, !tbaa !396
  %22370 = getelementptr inbounds i16, i16* %22336, i64 -10
  %22371 = bitcast i16* %22370 to <16 x i16>*
  %22372 = load <16 x i16>, <16 x i16>* %22371, align 2, !tbaa !396
  %22373 = getelementptr inbounds i16, i16* %22336, i64 -27
  %22374 = bitcast i16* %22373 to <16 x i16>*
  %22375 = load <16 x i16>, <16 x i16>* %22374, align 2, !tbaa !396
  %22376 = getelementptr inbounds i16, i16* %22336, i64 -11
  %22377 = bitcast i16* %22376 to <16 x i16>*
  %22378 = load <16 x i16>, <16 x i16>* %22377, align 2, !tbaa !396
  %22379 = add <16 x i16> %22345, %22339
  %22380 = add <16 x i16> %22379, %22351
  %22381 = add <16 x i16> %22380, %22357
  %22382 = add <16 x i16> %22381, %22363
  %22383 = add <16 x i16> %22382, %22369
  %22384 = add <16 x i16> %22383, %22375
  %22385 = add <16 x i16> %22348, %22342
  %22386 = add <16 x i16> %22385, %22354
  %22387 = add <16 x i16> %22386, %22360
  %22388 = add <16 x i16> %22387, %22366
  %22389 = add <16 x i16> %22388, %22372
  %22390 = add <16 x i16> %22389, %22378
  %22391 = shufflevector <16 x i16> %22384, <16 x i16> %22390, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22392 = udiv <32 x i16> %22391, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %22393 = shufflevector <32 x i16> %22392, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22394 = add nsw i32 %a393, 7
  %22395 = and i32 %22394, 7
  %22396 = zext i32 %22395 to i64
  %22397 = mul nsw i64 %303, %22396
  %22398 = add nsw i64 %305, %22397
  %22399 = getelementptr inbounds i16, i16* %blur_x917, i64 %22398
  %22400 = getelementptr inbounds i16, i16* %22399, i64 -32
  %22401 = bitcast i16* %22400 to <16 x i16>*
  store <16 x i16> %22393, <16 x i16>* %22401, align 2, !tbaa !399
  %22402 = shufflevector <32 x i16> %22392, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22403 = getelementptr inbounds i16, i16* %22399, i64 -16
  %22404 = bitcast i16* %22403 to <16 x i16>*
  store <16 x i16> %22402, <16 x i16>* %22404, align 2, !tbaa !399
  %22405 = zext i32 %.pre-phi3677 to i64
  %22406 = mul nsw i64 %22405, %349
  %22407 = add nsw i64 %22406, %300
  %22408 = getelementptr inbounds i16, i16* %blur_x917, i64 %22407
  %22409 = getelementptr inbounds i16, i16* %22408, i64 -32
  %22410 = bitcast i16* %22409 to <16 x i16>*
  %22411 = load <16 x i16>, <16 x i16>* %22410, align 2, !tbaa !399
  %22412 = getelementptr inbounds i16, i16* %22408, i64 -16
  %22413 = bitcast i16* %22412 to <16 x i16>*
  %22414 = load <16 x i16>, <16 x i16>* %22413, align 2, !tbaa !399
  %22415 = zext i32 %.pre-phi3673 to i64
  %22416 = mul nsw i64 %22415, %349
  %22417 = add nsw i64 %22416, %300
  %22418 = getelementptr inbounds i16, i16* %blur_x917, i64 %22417
  %22419 = getelementptr inbounds i16, i16* %22418, i64 -32
  %22420 = bitcast i16* %22419 to <16 x i16>*
  %22421 = load <16 x i16>, <16 x i16>* %22420, align 2, !tbaa !399
  %22422 = getelementptr inbounds i16, i16* %22418, i64 -16
  %22423 = bitcast i16* %22422 to <16 x i16>*
  %22424 = load <16 x i16>, <16 x i16>* %22423, align 2, !tbaa !399
  %22425 = zext i32 %.pre-phi3681 to i64
  %22426 = mul nsw i64 %22425, %349
  %22427 = add nsw i64 %22426, %300
  %22428 = getelementptr inbounds i16, i16* %blur_x917, i64 %22427
  %22429 = getelementptr inbounds i16, i16* %22428, i64 -32
  %22430 = bitcast i16* %22429 to <16 x i16>*
  %22431 = load <16 x i16>, <16 x i16>* %22430, align 2, !tbaa !399
  %22432 = getelementptr inbounds i16, i16* %22428, i64 -16
  %22433 = bitcast i16* %22432 to <16 x i16>*
  %22434 = load <16 x i16>, <16 x i16>* %22433, align 2, !tbaa !399
  %22435 = zext i32 %.pre-phi3685 to i64
  %22436 = mul nsw i64 %22435, %349
  %22437 = add nsw i64 %22436, %300
  %22438 = getelementptr inbounds i16, i16* %blur_x917, i64 %22437
  %22439 = getelementptr inbounds i16, i16* %22438, i64 -32
  %22440 = bitcast i16* %22439 to <16 x i16>*
  %22441 = load <16 x i16>, <16 x i16>* %22440, align 2, !tbaa !399
  %22442 = getelementptr inbounds i16, i16* %22438, i64 -16
  %22443 = bitcast i16* %22442 to <16 x i16>*
  %22444 = load <16 x i16>, <16 x i16>* %22443, align 2, !tbaa !399
  %22445 = zext i32 %.pre-phi3689 to i64
  %22446 = mul nsw i64 %22445, %349
  %22447 = add nsw i64 %22446, %300
  %22448 = getelementptr inbounds i16, i16* %blur_x917, i64 %22447
  %22449 = getelementptr inbounds i16, i16* %22448, i64 -32
  %22450 = bitcast i16* %22449 to <16 x i16>*
  %22451 = load <16 x i16>, <16 x i16>* %22450, align 2, !tbaa !399
  %22452 = getelementptr inbounds i16, i16* %22448, i64 -16
  %22453 = bitcast i16* %22452 to <16 x i16>*
  %22454 = load <16 x i16>, <16 x i16>* %22453, align 2, !tbaa !399
  %22455 = mul nsw i64 %22396, %349
  %22456 = add nsw i64 %22455, %300
  %22457 = getelementptr inbounds i16, i16* %blur_x917, i64 %22456
  %22458 = getelementptr inbounds i16, i16* %22457, i64 -32
  %22459 = bitcast i16* %22458 to <16 x i16>*
  %22460 = load <16 x i16>, <16 x i16>* %22459, align 2, !tbaa !399
  %22461 = getelementptr inbounds i16, i16* %22457, i64 -16
  %22462 = bitcast i16* %22461 to <16 x i16>*
  %22463 = load <16 x i16>, <16 x i16>* %22462, align 2, !tbaa !399
  %22464 = zext i32 %.pre-phi3693 to i64
  %22465 = mul nsw i64 %22464, %349
  %22466 = add nsw i64 %22465, %300
  %22467 = getelementptr inbounds i16, i16* %blur_x917, i64 %22466
  %22468 = getelementptr inbounds i16, i16* %22467, i64 -32
  %22469 = bitcast i16* %22468 to <16 x i16>*
  %22470 = load <16 x i16>, <16 x i16>* %22469, align 2, !tbaa !399
  %22471 = getelementptr inbounds i16, i16* %22467, i64 -16
  %22472 = bitcast i16* %22471 to <16 x i16>*
  %22473 = load <16 x i16>, <16 x i16>* %22472, align 2, !tbaa !399
  %22474 = add <16 x i16> %22421, %22411
  %22475 = add <16 x i16> %22474, %22431
  %22476 = add <16 x i16> %22475, %22441
  %22477 = add <16 x i16> %22476, %22451
  %22478 = add <16 x i16> %22477, %22460
  %22479 = add <16 x i16> %22478, %22470
  %22480 = add <16 x i16> %22424, %22414
  %22481 = add <16 x i16> %22480, %22434
  %22482 = add <16 x i16> %22481, %22444
  %22483 = add <16 x i16> %22482, %22454
  %22484 = add <16 x i16> %22483, %22463
  %22485 = add <16 x i16> %22484, %22473
  %22486 = shufflevector <16 x i16> %22479, <16 x i16> %22485, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22487 = udiv <32 x i16> %22486, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %22488 = shufflevector <32 x i16> %22487, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22489 = sext i32 %a393 to i64
  %22490 = add nsw i64 %22489, 1
  %22491 = mul nsw i64 %22490, %350
  %22492 = add nsw i64 %352, %22491
  %22493 = getelementptr inbounds i16, i16* %267, i64 %22492
  %22494 = getelementptr inbounds i16, i16* %22493, i64 -32
  %22495 = bitcast i16* %22494 to <16 x i16>*
  store <16 x i16> %22488, <16 x i16>* %22495, align 2, !tbaa !401
  %22496 = shufflevector <32 x i16> %22487, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22497 = getelementptr inbounds i16, i16* %22493, i64 -16
  %22498 = bitcast i16* %22497 to <16 x i16>*
  store <16 x i16> %22496, <16 x i16>* %22498, align 2, !tbaa !401
  br label %after_bb1140

"for blur_y.s0.x.x.rebased1155":                  ; preds = %"for blur_y.s0.x.x.rebased1155.preheader", %"consume blur_x1163"
  %indvars.iv3510 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1155.preheader" ], [ %indvars.iv.next3511, %"consume blur_x1163" ]
  %22499 = add nsw i64 %indvars.iv3510, %307
  %22500 = icmp slt i64 %22499, 1
  %22501 = trunc i64 %22499 to i32
  %22502 = shl nsw i32 %22501, 5
  %22503 = icmp sgt i32 %202, %22502
  %22504 = or i1 %22500, %22503
  br i1 %22504, label %"produce blur_x1161", label %"for blur_y.s0.x.x.rebased1155.consume blur_x1163_crit_edge"

"for blur_y.s0.x.x.rebased1155.consume blur_x1163_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1155"
  %.pre3700 = shl nsw i64 %22499, 5
  br label %"consume blur_x1163"

"end for blur_y.s0.x.x.rebased1156":              ; preds = %"consume blur_x1163", %after_bb1140
  br i1 %308, label %"for blur_y.s0.x.x.rebased1171.preheader", label %"end for blur_y.s0.x.x.rebased1172", !prof !386

"for blur_y.s0.x.x.rebased1171.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1156"
  %22505 = sext i32 %t17781151 to i64
  %22506 = zext i32 %.pre-phi3677 to i64
  %22507 = mul nsw i64 %22506, %353
  %22508 = sub nsw i64 %22507, %302
  %22509 = zext i32 %.pre-phi3673 to i64
  %22510 = mul nsw i64 %22509, %353
  %22511 = sub nsw i64 %22510, %302
  %22512 = zext i32 %.pre-phi3681 to i64
  %22513 = mul nsw i64 %22512, %353
  %22514 = sub nsw i64 %22513, %302
  %22515 = zext i32 %.pre-phi3685 to i64
  %22516 = mul nsw i64 %22515, %353
  %22517 = sub nsw i64 %22516, %302
  %22518 = zext i32 %.pre-phi3689 to i64
  %22519 = mul nsw i64 %22518, %353
  %22520 = sub nsw i64 %22519, %302
  %22521 = zext i32 %.pre-phi3699 to i64
  %22522 = mul nsw i64 %22521, %353
  %22523 = sub nsw i64 %22522, %302
  %22524 = zext i32 %.pre-phi3693 to i64
  %22525 = mul nsw i64 %22524, %353
  %22526 = sub nsw i64 %22525, %302
  %22527 = sext i32 %a393 to i64
  %22528 = add nsw i64 %22527, 1
  %22529 = mul nsw i64 %22528, %350
  %22530 = add nsw i64 %22529, %354
  br label %"for blur_y.s0.x.x.rebased1171"

"produce blur_x1161":                             ; preds = %"for blur_y.s0.x.x.rebased1155"
  %t7681162 = add nsw i32 %359, %22502
  %22531 = sext i32 %t7681162 to i64
  %22532 = getelementptr inbounds i16, i16* %read_input860, i64 %22531
  %22533 = getelementptr inbounds i16, i16* %22532, i64 1
  %22534 = bitcast i16* %22533 to <16 x i16>*
  %22535 = load <16 x i16>, <16 x i16>* %22534, align 2, !tbaa !396
  %22536 = getelementptr inbounds i16, i16* %22532, i64 17
  %22537 = bitcast i16* %22536 to <16 x i16>*
  %22538 = load <16 x i16>, <16 x i16>* %22537, align 2, !tbaa !396
  %22539 = bitcast i16* %22532 to <16 x i16>*
  %22540 = load <16 x i16>, <16 x i16>* %22539, align 2, !tbaa !396
  %22541 = getelementptr inbounds i16, i16* %22532, i64 16
  %22542 = bitcast i16* %22541 to <16 x i16>*
  %22543 = load <16 x i16>, <16 x i16>* %22542, align 2, !tbaa !396
  %22544 = getelementptr inbounds i16, i16* %22532, i64 2
  %22545 = bitcast i16* %22544 to <16 x i16>*
  %22546 = load <16 x i16>, <16 x i16>* %22545, align 2, !tbaa !396
  %22547 = getelementptr inbounds i16, i16* %22532, i64 18
  %22548 = bitcast i16* %22547 to <16 x i16>*
  %22549 = load <16 x i16>, <16 x i16>* %22548, align 2, !tbaa !396
  %22550 = getelementptr inbounds i16, i16* %22532, i64 3
  %22551 = bitcast i16* %22550 to <16 x i16>*
  %22552 = load <16 x i16>, <16 x i16>* %22551, align 2, !tbaa !396
  %22553 = getelementptr inbounds i16, i16* %22532, i64 19
  %22554 = bitcast i16* %22553 to <16 x i16>*
  %22555 = load <16 x i16>, <16 x i16>* %22554, align 2, !tbaa !396
  %22556 = getelementptr inbounds i16, i16* %22532, i64 4
  %22557 = bitcast i16* %22556 to <16 x i16>*
  %22558 = load <16 x i16>, <16 x i16>* %22557, align 2, !tbaa !396
  %22559 = getelementptr inbounds i16, i16* %22532, i64 20
  %22560 = bitcast i16* %22559 to <16 x i16>*
  %22561 = load <16 x i16>, <16 x i16>* %22560, align 2, !tbaa !396
  %22562 = getelementptr inbounds i16, i16* %22532, i64 6
  %22563 = bitcast i16* %22562 to <16 x i16>*
  %22564 = load <16 x i16>, <16 x i16>* %22563, align 2, !tbaa !396
  %22565 = getelementptr inbounds i16, i16* %22532, i64 22
  %22566 = bitcast i16* %22565 to <16 x i16>*
  %22567 = load <16 x i16>, <16 x i16>* %22566, align 2, !tbaa !396
  %22568 = getelementptr inbounds i16, i16* %22532, i64 5
  %22569 = bitcast i16* %22568 to <16 x i16>*
  %22570 = load <16 x i16>, <16 x i16>* %22569, align 2, !tbaa !396
  %22571 = getelementptr inbounds i16, i16* %22532, i64 21
  %22572 = bitcast i16* %22571 to <16 x i16>*
  %22573 = load <16 x i16>, <16 x i16>* %22572, align 2, !tbaa !396
  %22574 = add <16 x i16> %22540, %22535
  %22575 = add <16 x i16> %22574, %22546
  %22576 = add <16 x i16> %22575, %22552
  %22577 = add <16 x i16> %22576, %22558
  %22578 = add <16 x i16> %22577, %22564
  %22579 = add <16 x i16> %22578, %22570
  %22580 = add <16 x i16> %22543, %22538
  %22581 = add <16 x i16> %22580, %22549
  %22582 = add <16 x i16> %22581, %22555
  %22583 = add <16 x i16> %22582, %22561
  %22584 = add <16 x i16> %22583, %22567
  %22585 = add <16 x i16> %22584, %22573
  %22586 = shufflevector <16 x i16> %22579, <16 x i16> %22585, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22587 = udiv <32 x i16> %22586, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %22588 = shufflevector <32 x i16> %22587, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22589 = shl nsw i64 %22499, 5
  %22590 = add nsw i64 %22589, %22310
  %22591 = getelementptr inbounds i16, i16* %blur_x917, i64 %22590
  %22592 = bitcast i16* %22591 to <16 x i16>*
  store <16 x i16> %22588, <16 x i16>* %22592, align 2, !tbaa !399
  %22593 = shufflevector <32 x i16> %22587, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22594 = getelementptr inbounds i16, i16* %22591, i64 16
  %22595 = bitcast i16* %22594 to <16 x i16>*
  store <16 x i16> %22593, <16 x i16>* %22595, align 2, !tbaa !399
  br label %"consume blur_x1163"

"consume blur_x1163":                             ; preds = %"for blur_y.s0.x.x.rebased1155.consume blur_x1163_crit_edge", %"produce blur_x1161"
  %.pre-phi3701 = phi i64 [ %.pre3700, %"for blur_y.s0.x.x.rebased1155.consume blur_x1163_crit_edge" ], [ %22589, %"produce blur_x1161" ]
  %22596 = add nsw i64 %22313, %.pre-phi3701
  %22597 = getelementptr inbounds i16, i16* %blur_x917, i64 %22596
  %22598 = bitcast i16* %22597 to <16 x i16>*
  %22599 = load <16 x i16>, <16 x i16>* %22598, align 2, !tbaa !399
  %22600 = getelementptr inbounds i16, i16* %22597, i64 16
  %22601 = bitcast i16* %22600 to <16 x i16>*
  %22602 = load <16 x i16>, <16 x i16>* %22601, align 2, !tbaa !399
  %22603 = add nsw i64 %22316, %.pre-phi3701
  %22604 = getelementptr inbounds i16, i16* %blur_x917, i64 %22603
  %22605 = bitcast i16* %22604 to <16 x i16>*
  %22606 = load <16 x i16>, <16 x i16>* %22605, align 2, !tbaa !399
  %22607 = getelementptr inbounds i16, i16* %22604, i64 16
  %22608 = bitcast i16* %22607 to <16 x i16>*
  %22609 = load <16 x i16>, <16 x i16>* %22608, align 2, !tbaa !399
  %22610 = add nsw i64 %22319, %.pre-phi3701
  %22611 = getelementptr inbounds i16, i16* %blur_x917, i64 %22610
  %22612 = bitcast i16* %22611 to <16 x i16>*
  %22613 = load <16 x i16>, <16 x i16>* %22612, align 2, !tbaa !399
  %22614 = getelementptr inbounds i16, i16* %22611, i64 16
  %22615 = bitcast i16* %22614 to <16 x i16>*
  %22616 = load <16 x i16>, <16 x i16>* %22615, align 2, !tbaa !399
  %22617 = add nsw i64 %22322, %.pre-phi3701
  %22618 = getelementptr inbounds i16, i16* %blur_x917, i64 %22617
  %22619 = bitcast i16* %22618 to <16 x i16>*
  %22620 = load <16 x i16>, <16 x i16>* %22619, align 2, !tbaa !399
  %22621 = getelementptr inbounds i16, i16* %22618, i64 16
  %22622 = bitcast i16* %22621 to <16 x i16>*
  %22623 = load <16 x i16>, <16 x i16>* %22622, align 2, !tbaa !399
  %22624 = add nsw i64 %22325, %.pre-phi3701
  %22625 = getelementptr inbounds i16, i16* %blur_x917, i64 %22624
  %22626 = bitcast i16* %22625 to <16 x i16>*
  %22627 = load <16 x i16>, <16 x i16>* %22626, align 2, !tbaa !399
  %22628 = getelementptr inbounds i16, i16* %22625, i64 16
  %22629 = bitcast i16* %22628 to <16 x i16>*
  %22630 = load <16 x i16>, <16 x i16>* %22629, align 2, !tbaa !399
  %22631 = add nsw i64 %22328, %.pre-phi3701
  %22632 = getelementptr inbounds i16, i16* %blur_x917, i64 %22631
  %22633 = bitcast i16* %22632 to <16 x i16>*
  %22634 = load <16 x i16>, <16 x i16>* %22633, align 2, !tbaa !399
  %22635 = getelementptr inbounds i16, i16* %22632, i64 16
  %22636 = bitcast i16* %22635 to <16 x i16>*
  %22637 = load <16 x i16>, <16 x i16>* %22636, align 2, !tbaa !399
  %22638 = add nsw i64 %22331, %.pre-phi3701
  %22639 = getelementptr inbounds i16, i16* %blur_x917, i64 %22638
  %22640 = bitcast i16* %22639 to <16 x i16>*
  %22641 = load <16 x i16>, <16 x i16>* %22640, align 2, !tbaa !399
  %22642 = getelementptr inbounds i16, i16* %22639, i64 16
  %22643 = bitcast i16* %22642 to <16 x i16>*
  %22644 = load <16 x i16>, <16 x i16>* %22643, align 2, !tbaa !399
  %22645 = add <16 x i16> %22606, %22599
  %22646 = add <16 x i16> %22645, %22613
  %22647 = add <16 x i16> %22646, %22620
  %22648 = add <16 x i16> %22647, %22627
  %22649 = add <16 x i16> %22648, %22634
  %22650 = add <16 x i16> %22649, %22641
  %22651 = add <16 x i16> %22609, %22602
  %22652 = add <16 x i16> %22651, %22616
  %22653 = add <16 x i16> %22652, %22623
  %22654 = add <16 x i16> %22653, %22630
  %22655 = add <16 x i16> %22654, %22637
  %22656 = add <16 x i16> %22655, %22644
  %22657 = shufflevector <16 x i16> %22650, <16 x i16> %22656, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22658 = udiv <32 x i16> %22657, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %22659 = shufflevector <32 x i16> %22658, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22660 = add nsw i64 %22335, %.pre-phi3701
  %22661 = getelementptr inbounds i16, i16* %267, i64 %22660
  %22662 = bitcast i16* %22661 to <16 x i16>*
  store <16 x i16> %22659, <16 x i16>* %22662, align 2, !tbaa !401
  %22663 = shufflevector <32 x i16> %22658, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22664 = getelementptr inbounds i16, i16* %22661, i64 16
  %22665 = bitcast i16* %22664 to <16 x i16>*
  store <16 x i16> %22663, <16 x i16>* %22665, align 2, !tbaa !401
  %indvars.iv.next3511 = add nuw nsw i64 %indvars.iv3510, 1
  %.not2765 = icmp eq i64 %indvars.iv.next3511, %546
  br i1 %.not2765, label %"end for blur_y.s0.x.x.rebased1156", label %"for blur_y.s0.x.x.rebased1155"

"for blur_y.s0.x.x.rebased1171":                  ; preds = %"for blur_y.s0.x.x.rebased1171.preheader", %"consume blur_x1182"
  %blur_y.s0.x.x.rebased1173 = phi i32 [ %22808, %"consume blur_x1182" ], [ 0, %"for blur_y.s0.x.x.rebased1171.preheader" ]
  %22666 = add nsw i32 %blur_y.s0.x.x.rebased1173, %t1670852
  %a1744 = shl nsw i32 %22666, 5
  %22667 = icmp sgt i32 %t1691, %a1744
  %blur_y.s0.x.v0.base.s1174 = select i1 %22667, i32 %a1744, i32 %t1691
  %22668 = icmp slt i32 %22666, 1
  %22669 = icmp sgt i32 %202, %a1744
  %22670 = or i1 %22668, %22669
  br i1 %22670, label %"produce blur_x1179", label %"consume blur_x1182"

"end for blur_y.s0.x.x.rebased1172":              ; preds = %"consume blur_x1182", %"end for blur_y.s0.x.x.rebased1156"
  br i1 %233, label %"produce blur_x1186", label %after_bb1183

"produce blur_x1179":                             ; preds = %"for blur_y.s0.x.x.rebased1171"
  %22671 = icmp slt i32 %blur_y.s0.x.v0.base.s1174, %202
  %blur_x.s0.x.v1.base.s1180 = select i1 %22671, i32 %blur_y.s0.x.v0.base.s1174, i32 %202
  %t7731181 = add nsw i32 %359, %blur_x.s0.x.v1.base.s1180
  %22672 = sext i32 %t7731181 to i64
  %22673 = getelementptr inbounds i16, i16* %read_input860, i64 %22672
  %22674 = getelementptr inbounds i16, i16* %22673, i64 1
  %22675 = bitcast i16* %22674 to <16 x i16>*
  %22676 = load <16 x i16>, <16 x i16>* %22675, align 2, !tbaa !396
  %22677 = getelementptr inbounds i16, i16* %22673, i64 17
  %22678 = bitcast i16* %22677 to <16 x i16>*
  %22679 = load <16 x i16>, <16 x i16>* %22678, align 2, !tbaa !396
  %22680 = bitcast i16* %22673 to <16 x i16>*
  %22681 = load <16 x i16>, <16 x i16>* %22680, align 2, !tbaa !396
  %22682 = getelementptr inbounds i16, i16* %22673, i64 16
  %22683 = bitcast i16* %22682 to <16 x i16>*
  %22684 = load <16 x i16>, <16 x i16>* %22683, align 2, !tbaa !396
  %22685 = getelementptr inbounds i16, i16* %22673, i64 2
  %22686 = bitcast i16* %22685 to <16 x i16>*
  %22687 = load <16 x i16>, <16 x i16>* %22686, align 2, !tbaa !396
  %22688 = getelementptr inbounds i16, i16* %22673, i64 18
  %22689 = bitcast i16* %22688 to <16 x i16>*
  %22690 = load <16 x i16>, <16 x i16>* %22689, align 2, !tbaa !396
  %22691 = getelementptr inbounds i16, i16* %22673, i64 3
  %22692 = bitcast i16* %22691 to <16 x i16>*
  %22693 = load <16 x i16>, <16 x i16>* %22692, align 2, !tbaa !396
  %22694 = getelementptr inbounds i16, i16* %22673, i64 19
  %22695 = bitcast i16* %22694 to <16 x i16>*
  %22696 = load <16 x i16>, <16 x i16>* %22695, align 2, !tbaa !396
  %22697 = getelementptr inbounds i16, i16* %22673, i64 4
  %22698 = bitcast i16* %22697 to <16 x i16>*
  %22699 = load <16 x i16>, <16 x i16>* %22698, align 2, !tbaa !396
  %22700 = getelementptr inbounds i16, i16* %22673, i64 20
  %22701 = bitcast i16* %22700 to <16 x i16>*
  %22702 = load <16 x i16>, <16 x i16>* %22701, align 2, !tbaa !396
  %22703 = getelementptr inbounds i16, i16* %22673, i64 6
  %22704 = bitcast i16* %22703 to <16 x i16>*
  %22705 = load <16 x i16>, <16 x i16>* %22704, align 2, !tbaa !396
  %22706 = getelementptr inbounds i16, i16* %22673, i64 22
  %22707 = bitcast i16* %22706 to <16 x i16>*
  %22708 = load <16 x i16>, <16 x i16>* %22707, align 2, !tbaa !396
  %22709 = getelementptr inbounds i16, i16* %22673, i64 5
  %22710 = bitcast i16* %22709 to <16 x i16>*
  %22711 = load <16 x i16>, <16 x i16>* %22710, align 2, !tbaa !396
  %22712 = getelementptr inbounds i16, i16* %22673, i64 21
  %22713 = bitcast i16* %22712 to <16 x i16>*
  %22714 = load <16 x i16>, <16 x i16>* %22713, align 2, !tbaa !396
  %22715 = add <16 x i16> %22681, %22676
  %22716 = add <16 x i16> %22715, %22687
  %22717 = add <16 x i16> %22716, %22693
  %22718 = add <16 x i16> %22717, %22699
  %22719 = add <16 x i16> %22718, %22705
  %22720 = add <16 x i16> %22719, %22711
  %22721 = add <16 x i16> %22684, %22679
  %22722 = add <16 x i16> %22721, %22690
  %22723 = add <16 x i16> %22722, %22696
  %22724 = add <16 x i16> %22723, %22702
  %22725 = add <16 x i16> %22724, %22708
  %22726 = add <16 x i16> %22725, %22714
  %22727 = shufflevector <16 x i16> %22720, <16 x i16> %22726, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22728 = udiv <32 x i16> %22727, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %22729 = shufflevector <32 x i16> %22728, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22730 = sext i32 %blur_x.s0.x.v1.base.s1180 to i64
  %22731 = add nsw i64 %22730, %22505
  %22732 = getelementptr inbounds i16, i16* %blur_x917, i64 %22731
  %22733 = bitcast i16* %22732 to <16 x i16>*
  store <16 x i16> %22729, <16 x i16>* %22733, align 2, !tbaa !399
  %22734 = shufflevector <32 x i16> %22728, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22735 = getelementptr inbounds i16, i16* %22732, i64 16
  %22736 = bitcast i16* %22735 to <16 x i16>*
  store <16 x i16> %22734, <16 x i16>* %22736, align 2, !tbaa !399
  br label %"consume blur_x1182"

"consume blur_x1182":                             ; preds = %"for blur_y.s0.x.x.rebased1171", %"produce blur_x1179"
  %22737 = sext i32 %blur_y.s0.x.v0.base.s1174 to i64
  %22738 = add nsw i64 %22508, %22737
  %22739 = getelementptr inbounds i16, i16* %blur_x917, i64 %22738
  %22740 = bitcast i16* %22739 to <16 x i16>*
  %22741 = load <16 x i16>, <16 x i16>* %22740, align 2, !tbaa !399
  %22742 = getelementptr inbounds i16, i16* %22739, i64 16
  %22743 = bitcast i16* %22742 to <16 x i16>*
  %22744 = load <16 x i16>, <16 x i16>* %22743, align 2, !tbaa !399
  %22745 = add nsw i64 %22511, %22737
  %22746 = getelementptr inbounds i16, i16* %blur_x917, i64 %22745
  %22747 = bitcast i16* %22746 to <16 x i16>*
  %22748 = load <16 x i16>, <16 x i16>* %22747, align 2, !tbaa !399
  %22749 = getelementptr inbounds i16, i16* %22746, i64 16
  %22750 = bitcast i16* %22749 to <16 x i16>*
  %22751 = load <16 x i16>, <16 x i16>* %22750, align 2, !tbaa !399
  %22752 = add nsw i64 %22514, %22737
  %22753 = getelementptr inbounds i16, i16* %blur_x917, i64 %22752
  %22754 = bitcast i16* %22753 to <16 x i16>*
  %22755 = load <16 x i16>, <16 x i16>* %22754, align 2, !tbaa !399
  %22756 = getelementptr inbounds i16, i16* %22753, i64 16
  %22757 = bitcast i16* %22756 to <16 x i16>*
  %22758 = load <16 x i16>, <16 x i16>* %22757, align 2, !tbaa !399
  %22759 = add nsw i64 %22517, %22737
  %22760 = getelementptr inbounds i16, i16* %blur_x917, i64 %22759
  %22761 = bitcast i16* %22760 to <16 x i16>*
  %22762 = load <16 x i16>, <16 x i16>* %22761, align 2, !tbaa !399
  %22763 = getelementptr inbounds i16, i16* %22760, i64 16
  %22764 = bitcast i16* %22763 to <16 x i16>*
  %22765 = load <16 x i16>, <16 x i16>* %22764, align 2, !tbaa !399
  %22766 = add nsw i64 %22520, %22737
  %22767 = getelementptr inbounds i16, i16* %blur_x917, i64 %22766
  %22768 = bitcast i16* %22767 to <16 x i16>*
  %22769 = load <16 x i16>, <16 x i16>* %22768, align 2, !tbaa !399
  %22770 = getelementptr inbounds i16, i16* %22767, i64 16
  %22771 = bitcast i16* %22770 to <16 x i16>*
  %22772 = load <16 x i16>, <16 x i16>* %22771, align 2, !tbaa !399
  %22773 = add nsw i64 %22523, %22737
  %22774 = getelementptr inbounds i16, i16* %blur_x917, i64 %22773
  %22775 = bitcast i16* %22774 to <16 x i16>*
  %22776 = load <16 x i16>, <16 x i16>* %22775, align 2, !tbaa !399
  %22777 = getelementptr inbounds i16, i16* %22774, i64 16
  %22778 = bitcast i16* %22777 to <16 x i16>*
  %22779 = load <16 x i16>, <16 x i16>* %22778, align 2, !tbaa !399
  %22780 = add nsw i64 %22526, %22737
  %22781 = getelementptr inbounds i16, i16* %blur_x917, i64 %22780
  %22782 = bitcast i16* %22781 to <16 x i16>*
  %22783 = load <16 x i16>, <16 x i16>* %22782, align 2, !tbaa !399
  %22784 = getelementptr inbounds i16, i16* %22781, i64 16
  %22785 = bitcast i16* %22784 to <16 x i16>*
  %22786 = load <16 x i16>, <16 x i16>* %22785, align 2, !tbaa !399
  %22787 = add <16 x i16> %22748, %22741
  %22788 = add <16 x i16> %22787, %22755
  %22789 = add <16 x i16> %22788, %22762
  %22790 = add <16 x i16> %22789, %22769
  %22791 = add <16 x i16> %22790, %22776
  %22792 = add <16 x i16> %22791, %22783
  %22793 = add <16 x i16> %22751, %22744
  %22794 = add <16 x i16> %22793, %22758
  %22795 = add <16 x i16> %22794, %22765
  %22796 = add <16 x i16> %22795, %22772
  %22797 = add <16 x i16> %22796, %22779
  %22798 = add <16 x i16> %22797, %22786
  %22799 = shufflevector <16 x i16> %22792, <16 x i16> %22798, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22800 = udiv <32 x i16> %22799, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %22801 = shufflevector <32 x i16> %22800, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22802 = add nsw i64 %22530, %22737
  %22803 = getelementptr inbounds i16, i16* %267, i64 %22802
  %22804 = bitcast i16* %22803 to <16 x i16>*
  store <16 x i16> %22801, <16 x i16>* %22804, align 2, !tbaa !401
  %22805 = shufflevector <32 x i16> %22800, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22806 = getelementptr inbounds i16, i16* %22803, i64 16
  %22807 = bitcast i16* %22806 to <16 x i16>*
  store <16 x i16> %22805, <16 x i16>* %22807, align 2, !tbaa !401
  %22808 = add nuw nsw i32 %blur_y.s0.x.x.rebased1173, 1
  %.not2764 = icmp eq i32 %22808, %t1727936
  br i1 %.not2764, label %"end for blur_y.s0.x.x.rebased1172", label %"for blur_y.s0.x.x.rebased1171"

after_bb1183:                                     ; preds = %"end for blur_y.s0.x.x.rebased1172", %"produce blur_x1186"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1198.preheader", label %"end for blur_y.s0.x.x.rebased1199", !prof !386

"for blur_y.s0.x.x.rebased1198.preheader":        ; preds = %after_bb1183
  %22809 = sext i32 %t1726924 to i64
  %22810 = zext i32 %.pre-phi3681 to i64
  %22811 = mul nsw i64 %22810, %353
  %22812 = sub nsw i64 %22811, %302
  %22813 = zext i32 %.pre-phi3677 to i64
  %22814 = mul nsw i64 %22813, %353
  %22815 = sub nsw i64 %22814, %302
  %22816 = zext i32 %.pre-phi3685 to i64
  %22817 = mul nsw i64 %22816, %353
  %22818 = sub nsw i64 %22817, %302
  %22819 = zext i32 %.pre-phi3689 to i64
  %22820 = mul nsw i64 %22819, %353
  %22821 = sub nsw i64 %22820, %302
  %22822 = zext i32 %.pre-phi3693 to i64
  %22823 = mul nsw i64 %22822, %353
  %22824 = sub nsw i64 %22823, %302
  %22825 = zext i32 %.pre-phi3669 to i64
  %22826 = mul nsw i64 %22825, %353
  %22827 = sub nsw i64 %22826, %302
  %22828 = zext i32 %.pre-phi3699 to i64
  %22829 = mul nsw i64 %22828, %353
  %22830 = sub nsw i64 %22829, %302
  %22831 = sext i32 %a393 to i64
  %22832 = add nsw i64 %22831, 2
  %22833 = mul nsw i64 %22832, %350
  %22834 = add nsw i64 %22833, %354
  br label %"for blur_y.s0.x.x.rebased1198"

"produce blur_x1186":                             ; preds = %"end for blur_y.s0.x.x.rebased1172"
  %22835 = getelementptr inbounds i16, i16* %read_input860, i64 %363
  %22836 = getelementptr inbounds i16, i16* %22835, i64 -31
  %22837 = bitcast i16* %22836 to <16 x i16>*
  %22838 = load <16 x i16>, <16 x i16>* %22837, align 2, !tbaa !396
  %22839 = getelementptr inbounds i16, i16* %22835, i64 -15
  %22840 = bitcast i16* %22839 to <16 x i16>*
  %22841 = load <16 x i16>, <16 x i16>* %22840, align 2, !tbaa !396
  %22842 = getelementptr inbounds i16, i16* %22835, i64 -32
  %22843 = bitcast i16* %22842 to <16 x i16>*
  %22844 = load <16 x i16>, <16 x i16>* %22843, align 2, !tbaa !396
  %22845 = getelementptr inbounds i16, i16* %22835, i64 -16
  %22846 = bitcast i16* %22845 to <16 x i16>*
  %22847 = load <16 x i16>, <16 x i16>* %22846, align 2, !tbaa !396
  %22848 = getelementptr inbounds i16, i16* %22835, i64 -30
  %22849 = bitcast i16* %22848 to <16 x i16>*
  %22850 = load <16 x i16>, <16 x i16>* %22849, align 2, !tbaa !396
  %22851 = getelementptr inbounds i16, i16* %22835, i64 -14
  %22852 = bitcast i16* %22851 to <16 x i16>*
  %22853 = load <16 x i16>, <16 x i16>* %22852, align 2, !tbaa !396
  %22854 = getelementptr inbounds i16, i16* %22835, i64 -29
  %22855 = bitcast i16* %22854 to <16 x i16>*
  %22856 = load <16 x i16>, <16 x i16>* %22855, align 2, !tbaa !396
  %22857 = getelementptr inbounds i16, i16* %22835, i64 -13
  %22858 = bitcast i16* %22857 to <16 x i16>*
  %22859 = load <16 x i16>, <16 x i16>* %22858, align 2, !tbaa !396
  %22860 = getelementptr inbounds i16, i16* %22835, i64 -28
  %22861 = bitcast i16* %22860 to <16 x i16>*
  %22862 = load <16 x i16>, <16 x i16>* %22861, align 2, !tbaa !396
  %22863 = getelementptr inbounds i16, i16* %22835, i64 -12
  %22864 = bitcast i16* %22863 to <16 x i16>*
  %22865 = load <16 x i16>, <16 x i16>* %22864, align 2, !tbaa !396
  %22866 = getelementptr inbounds i16, i16* %22835, i64 -26
  %22867 = bitcast i16* %22866 to <16 x i16>*
  %22868 = load <16 x i16>, <16 x i16>* %22867, align 2, !tbaa !396
  %22869 = getelementptr inbounds i16, i16* %22835, i64 -10
  %22870 = bitcast i16* %22869 to <16 x i16>*
  %22871 = load <16 x i16>, <16 x i16>* %22870, align 2, !tbaa !396
  %22872 = getelementptr inbounds i16, i16* %22835, i64 -27
  %22873 = bitcast i16* %22872 to <16 x i16>*
  %22874 = load <16 x i16>, <16 x i16>* %22873, align 2, !tbaa !396
  %22875 = getelementptr inbounds i16, i16* %22835, i64 -11
  %22876 = bitcast i16* %22875 to <16 x i16>*
  %22877 = load <16 x i16>, <16 x i16>* %22876, align 2, !tbaa !396
  %22878 = add <16 x i16> %22844, %22838
  %22879 = add <16 x i16> %22878, %22850
  %22880 = add <16 x i16> %22879, %22856
  %22881 = add <16 x i16> %22880, %22862
  %22882 = add <16 x i16> %22881, %22868
  %22883 = add <16 x i16> %22882, %22874
  %22884 = add <16 x i16> %22847, %22841
  %22885 = add <16 x i16> %22884, %22853
  %22886 = add <16 x i16> %22885, %22859
  %22887 = add <16 x i16> %22886, %22865
  %22888 = add <16 x i16> %22887, %22871
  %22889 = add <16 x i16> %22888, %22877
  %22890 = shufflevector <16 x i16> %22883, <16 x i16> %22889, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22891 = udiv <32 x i16> %22890, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %22892 = shufflevector <32 x i16> %22891, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22893 = zext i32 %.pre-phi3669 to i64
  %22894 = mul nsw i64 %303, %22893
  %22895 = add nsw i64 %305, %22894
  %22896 = getelementptr inbounds i16, i16* %blur_x917, i64 %22895
  %22897 = getelementptr inbounds i16, i16* %22896, i64 -32
  %22898 = bitcast i16* %22897 to <16 x i16>*
  store <16 x i16> %22892, <16 x i16>* %22898, align 2, !tbaa !399
  %22899 = shufflevector <32 x i16> %22891, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22900 = getelementptr inbounds i16, i16* %22896, i64 -16
  %22901 = bitcast i16* %22900 to <16 x i16>*
  store <16 x i16> %22899, <16 x i16>* %22901, align 2, !tbaa !399
  %22902 = zext i32 %.pre-phi3681 to i64
  %22903 = mul nsw i64 %22902, %349
  %22904 = add nsw i64 %22903, %300
  %22905 = getelementptr inbounds i16, i16* %blur_x917, i64 %22904
  %22906 = getelementptr inbounds i16, i16* %22905, i64 -32
  %22907 = bitcast i16* %22906 to <16 x i16>*
  %22908 = load <16 x i16>, <16 x i16>* %22907, align 2, !tbaa !399
  %22909 = getelementptr inbounds i16, i16* %22905, i64 -16
  %22910 = bitcast i16* %22909 to <16 x i16>*
  %22911 = load <16 x i16>, <16 x i16>* %22910, align 2, !tbaa !399
  %22912 = zext i32 %.pre-phi3677 to i64
  %22913 = mul nsw i64 %22912, %349
  %22914 = add nsw i64 %22913, %300
  %22915 = getelementptr inbounds i16, i16* %blur_x917, i64 %22914
  %22916 = getelementptr inbounds i16, i16* %22915, i64 -32
  %22917 = bitcast i16* %22916 to <16 x i16>*
  %22918 = load <16 x i16>, <16 x i16>* %22917, align 2, !tbaa !399
  %22919 = getelementptr inbounds i16, i16* %22915, i64 -16
  %22920 = bitcast i16* %22919 to <16 x i16>*
  %22921 = load <16 x i16>, <16 x i16>* %22920, align 2, !tbaa !399
  %22922 = zext i32 %.pre-phi3685 to i64
  %22923 = mul nsw i64 %22922, %349
  %22924 = add nsw i64 %22923, %300
  %22925 = getelementptr inbounds i16, i16* %blur_x917, i64 %22924
  %22926 = getelementptr inbounds i16, i16* %22925, i64 -32
  %22927 = bitcast i16* %22926 to <16 x i16>*
  %22928 = load <16 x i16>, <16 x i16>* %22927, align 2, !tbaa !399
  %22929 = getelementptr inbounds i16, i16* %22925, i64 -16
  %22930 = bitcast i16* %22929 to <16 x i16>*
  %22931 = load <16 x i16>, <16 x i16>* %22930, align 2, !tbaa !399
  %22932 = zext i32 %.pre-phi3689 to i64
  %22933 = mul nsw i64 %22932, %349
  %22934 = add nsw i64 %22933, %300
  %22935 = getelementptr inbounds i16, i16* %blur_x917, i64 %22934
  %22936 = getelementptr inbounds i16, i16* %22935, i64 -32
  %22937 = bitcast i16* %22936 to <16 x i16>*
  %22938 = load <16 x i16>, <16 x i16>* %22937, align 2, !tbaa !399
  %22939 = getelementptr inbounds i16, i16* %22935, i64 -16
  %22940 = bitcast i16* %22939 to <16 x i16>*
  %22941 = load <16 x i16>, <16 x i16>* %22940, align 2, !tbaa !399
  %22942 = zext i32 %.pre-phi3693 to i64
  %22943 = mul nsw i64 %22942, %349
  %22944 = add nsw i64 %22943, %300
  %22945 = getelementptr inbounds i16, i16* %blur_x917, i64 %22944
  %22946 = getelementptr inbounds i16, i16* %22945, i64 -32
  %22947 = bitcast i16* %22946 to <16 x i16>*
  %22948 = load <16 x i16>, <16 x i16>* %22947, align 2, !tbaa !399
  %22949 = getelementptr inbounds i16, i16* %22945, i64 -16
  %22950 = bitcast i16* %22949 to <16 x i16>*
  %22951 = load <16 x i16>, <16 x i16>* %22950, align 2, !tbaa !399
  %22952 = mul nsw i64 %22893, %349
  %22953 = add nsw i64 %22952, %300
  %22954 = getelementptr inbounds i16, i16* %blur_x917, i64 %22953
  %22955 = getelementptr inbounds i16, i16* %22954, i64 -32
  %22956 = bitcast i16* %22955 to <16 x i16>*
  %22957 = load <16 x i16>, <16 x i16>* %22956, align 2, !tbaa !399
  %22958 = getelementptr inbounds i16, i16* %22954, i64 -16
  %22959 = bitcast i16* %22958 to <16 x i16>*
  %22960 = load <16 x i16>, <16 x i16>* %22959, align 2, !tbaa !399
  %22961 = zext i32 %.pre-phi3699 to i64
  %22962 = mul nsw i64 %22961, %349
  %22963 = add nsw i64 %22962, %300
  %22964 = getelementptr inbounds i16, i16* %blur_x917, i64 %22963
  %22965 = getelementptr inbounds i16, i16* %22964, i64 -32
  %22966 = bitcast i16* %22965 to <16 x i16>*
  %22967 = load <16 x i16>, <16 x i16>* %22966, align 2, !tbaa !399
  %22968 = getelementptr inbounds i16, i16* %22964, i64 -16
  %22969 = bitcast i16* %22968 to <16 x i16>*
  %22970 = load <16 x i16>, <16 x i16>* %22969, align 2, !tbaa !399
  %22971 = add <16 x i16> %22918, %22908
  %22972 = add <16 x i16> %22971, %22928
  %22973 = add <16 x i16> %22972, %22938
  %22974 = add <16 x i16> %22973, %22948
  %22975 = add <16 x i16> %22974, %22957
  %22976 = add <16 x i16> %22975, %22967
  %22977 = add <16 x i16> %22921, %22911
  %22978 = add <16 x i16> %22977, %22931
  %22979 = add <16 x i16> %22978, %22941
  %22980 = add <16 x i16> %22979, %22951
  %22981 = add <16 x i16> %22980, %22960
  %22982 = add <16 x i16> %22981, %22970
  %22983 = shufflevector <16 x i16> %22976, <16 x i16> %22982, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22984 = udiv <32 x i16> %22983, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %22985 = shufflevector <32 x i16> %22984, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22986 = sext i32 %a393 to i64
  %22987 = add nsw i64 %22986, 2
  %22988 = mul nsw i64 %22987, %350
  %22989 = add nsw i64 %352, %22988
  %22990 = getelementptr inbounds i16, i16* %267, i64 %22989
  %22991 = getelementptr inbounds i16, i16* %22990, i64 -32
  %22992 = bitcast i16* %22991 to <16 x i16>*
  store <16 x i16> %22985, <16 x i16>* %22992, align 2, !tbaa !401
  %22993 = shufflevector <32 x i16> %22984, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22994 = getelementptr inbounds i16, i16* %22990, i64 -16
  %22995 = bitcast i16* %22994 to <16 x i16>*
  store <16 x i16> %22993, <16 x i16>* %22995, align 2, !tbaa !401
  br label %after_bb1183

"for blur_y.s0.x.x.rebased1198":                  ; preds = %"for blur_y.s0.x.x.rebased1198.preheader", %"consume blur_x1206"
  %indvars.iv3512 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1198.preheader" ], [ %indvars.iv.next3513, %"consume blur_x1206" ]
  %22996 = add nsw i64 %indvars.iv3512, %307
  %22997 = icmp slt i64 %22996, 1
  %22998 = trunc i64 %22996 to i32
  %22999 = shl nsw i32 %22998, 5
  %23000 = icmp sgt i32 %202, %22999
  %23001 = or i1 %22997, %23000
  br i1 %23001, label %"produce blur_x1204", label %"for blur_y.s0.x.x.rebased1198.consume blur_x1206_crit_edge"

"for blur_y.s0.x.x.rebased1198.consume blur_x1206_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1198"
  %.pre3702 = shl nsw i64 %22996, 5
  br label %"consume blur_x1206"

"end for blur_y.s0.x.x.rebased1199":              ; preds = %"consume blur_x1206", %after_bb1183
  br i1 %308, label %"for blur_y.s0.x.x.rebased1214.preheader", label %"end for blur_y.s0.x.x.rebased1215", !prof !386

"for blur_y.s0.x.x.rebased1214.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1199"
  %23002 = sext i32 %t1726924 to i64
  %23003 = zext i32 %.pre-phi3681 to i64
  %23004 = mul nsw i64 %23003, %353
  %23005 = sub nsw i64 %23004, %302
  %23006 = zext i32 %.pre-phi3677 to i64
  %23007 = mul nsw i64 %23006, %353
  %23008 = sub nsw i64 %23007, %302
  %23009 = zext i32 %.pre-phi3685 to i64
  %23010 = mul nsw i64 %23009, %353
  %23011 = sub nsw i64 %23010, %302
  %23012 = zext i32 %.pre-phi3689 to i64
  %23013 = mul nsw i64 %23012, %353
  %23014 = sub nsw i64 %23013, %302
  %23015 = zext i32 %.pre-phi3693 to i64
  %23016 = mul nsw i64 %23015, %353
  %23017 = sub nsw i64 %23016, %302
  %23018 = zext i32 %.pre-phi3669 to i64
  %23019 = mul nsw i64 %23018, %353
  %23020 = sub nsw i64 %23019, %302
  %23021 = zext i32 %.pre-phi3699 to i64
  %23022 = mul nsw i64 %23021, %353
  %23023 = sub nsw i64 %23022, %302
  %23024 = sext i32 %a393 to i64
  %23025 = add nsw i64 %23024, 2
  %23026 = mul nsw i64 %23025, %350
  %23027 = add nsw i64 %23026, %354
  br label %"for blur_y.s0.x.x.rebased1214"

"produce blur_x1204":                             ; preds = %"for blur_y.s0.x.x.rebased1198"
  %t7841205 = add nsw i32 %365, %22999
  %23028 = sext i32 %t7841205 to i64
  %23029 = getelementptr inbounds i16, i16* %read_input860, i64 %23028
  %23030 = getelementptr inbounds i16, i16* %23029, i64 1
  %23031 = bitcast i16* %23030 to <16 x i16>*
  %23032 = load <16 x i16>, <16 x i16>* %23031, align 2, !tbaa !396
  %23033 = getelementptr inbounds i16, i16* %23029, i64 17
  %23034 = bitcast i16* %23033 to <16 x i16>*
  %23035 = load <16 x i16>, <16 x i16>* %23034, align 2, !tbaa !396
  %23036 = bitcast i16* %23029 to <16 x i16>*
  %23037 = load <16 x i16>, <16 x i16>* %23036, align 2, !tbaa !396
  %23038 = getelementptr inbounds i16, i16* %23029, i64 16
  %23039 = bitcast i16* %23038 to <16 x i16>*
  %23040 = load <16 x i16>, <16 x i16>* %23039, align 2, !tbaa !396
  %23041 = getelementptr inbounds i16, i16* %23029, i64 2
  %23042 = bitcast i16* %23041 to <16 x i16>*
  %23043 = load <16 x i16>, <16 x i16>* %23042, align 2, !tbaa !396
  %23044 = getelementptr inbounds i16, i16* %23029, i64 18
  %23045 = bitcast i16* %23044 to <16 x i16>*
  %23046 = load <16 x i16>, <16 x i16>* %23045, align 2, !tbaa !396
  %23047 = getelementptr inbounds i16, i16* %23029, i64 3
  %23048 = bitcast i16* %23047 to <16 x i16>*
  %23049 = load <16 x i16>, <16 x i16>* %23048, align 2, !tbaa !396
  %23050 = getelementptr inbounds i16, i16* %23029, i64 19
  %23051 = bitcast i16* %23050 to <16 x i16>*
  %23052 = load <16 x i16>, <16 x i16>* %23051, align 2, !tbaa !396
  %23053 = getelementptr inbounds i16, i16* %23029, i64 4
  %23054 = bitcast i16* %23053 to <16 x i16>*
  %23055 = load <16 x i16>, <16 x i16>* %23054, align 2, !tbaa !396
  %23056 = getelementptr inbounds i16, i16* %23029, i64 20
  %23057 = bitcast i16* %23056 to <16 x i16>*
  %23058 = load <16 x i16>, <16 x i16>* %23057, align 2, !tbaa !396
  %23059 = getelementptr inbounds i16, i16* %23029, i64 6
  %23060 = bitcast i16* %23059 to <16 x i16>*
  %23061 = load <16 x i16>, <16 x i16>* %23060, align 2, !tbaa !396
  %23062 = getelementptr inbounds i16, i16* %23029, i64 22
  %23063 = bitcast i16* %23062 to <16 x i16>*
  %23064 = load <16 x i16>, <16 x i16>* %23063, align 2, !tbaa !396
  %23065 = getelementptr inbounds i16, i16* %23029, i64 5
  %23066 = bitcast i16* %23065 to <16 x i16>*
  %23067 = load <16 x i16>, <16 x i16>* %23066, align 2, !tbaa !396
  %23068 = getelementptr inbounds i16, i16* %23029, i64 21
  %23069 = bitcast i16* %23068 to <16 x i16>*
  %23070 = load <16 x i16>, <16 x i16>* %23069, align 2, !tbaa !396
  %23071 = add <16 x i16> %23037, %23032
  %23072 = add <16 x i16> %23071, %23043
  %23073 = add <16 x i16> %23072, %23049
  %23074 = add <16 x i16> %23073, %23055
  %23075 = add <16 x i16> %23074, %23061
  %23076 = add <16 x i16> %23075, %23067
  %23077 = add <16 x i16> %23040, %23035
  %23078 = add <16 x i16> %23077, %23046
  %23079 = add <16 x i16> %23078, %23052
  %23080 = add <16 x i16> %23079, %23058
  %23081 = add <16 x i16> %23080, %23064
  %23082 = add <16 x i16> %23081, %23070
  %23083 = shufflevector <16 x i16> %23076, <16 x i16> %23082, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23084 = udiv <32 x i16> %23083, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %23085 = shufflevector <32 x i16> %23084, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23086 = shl nsw i64 %22996, 5
  %23087 = add nsw i64 %23086, %22809
  %23088 = getelementptr inbounds i16, i16* %blur_x917, i64 %23087
  %23089 = bitcast i16* %23088 to <16 x i16>*
  store <16 x i16> %23085, <16 x i16>* %23089, align 2, !tbaa !399
  %23090 = shufflevector <32 x i16> %23084, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23091 = getelementptr inbounds i16, i16* %23088, i64 16
  %23092 = bitcast i16* %23091 to <16 x i16>*
  store <16 x i16> %23090, <16 x i16>* %23092, align 2, !tbaa !399
  br label %"consume blur_x1206"

"consume blur_x1206":                             ; preds = %"for blur_y.s0.x.x.rebased1198.consume blur_x1206_crit_edge", %"produce blur_x1204"
  %.pre-phi3703 = phi i64 [ %.pre3702, %"for blur_y.s0.x.x.rebased1198.consume blur_x1206_crit_edge" ], [ %23086, %"produce blur_x1204" ]
  %23093 = add nsw i64 %22812, %.pre-phi3703
  %23094 = getelementptr inbounds i16, i16* %blur_x917, i64 %23093
  %23095 = bitcast i16* %23094 to <16 x i16>*
  %23096 = load <16 x i16>, <16 x i16>* %23095, align 2, !tbaa !399
  %23097 = getelementptr inbounds i16, i16* %23094, i64 16
  %23098 = bitcast i16* %23097 to <16 x i16>*
  %23099 = load <16 x i16>, <16 x i16>* %23098, align 2, !tbaa !399
  %23100 = add nsw i64 %22815, %.pre-phi3703
  %23101 = getelementptr inbounds i16, i16* %blur_x917, i64 %23100
  %23102 = bitcast i16* %23101 to <16 x i16>*
  %23103 = load <16 x i16>, <16 x i16>* %23102, align 2, !tbaa !399
  %23104 = getelementptr inbounds i16, i16* %23101, i64 16
  %23105 = bitcast i16* %23104 to <16 x i16>*
  %23106 = load <16 x i16>, <16 x i16>* %23105, align 2, !tbaa !399
  %23107 = add nsw i64 %22818, %.pre-phi3703
  %23108 = getelementptr inbounds i16, i16* %blur_x917, i64 %23107
  %23109 = bitcast i16* %23108 to <16 x i16>*
  %23110 = load <16 x i16>, <16 x i16>* %23109, align 2, !tbaa !399
  %23111 = getelementptr inbounds i16, i16* %23108, i64 16
  %23112 = bitcast i16* %23111 to <16 x i16>*
  %23113 = load <16 x i16>, <16 x i16>* %23112, align 2, !tbaa !399
  %23114 = add nsw i64 %22821, %.pre-phi3703
  %23115 = getelementptr inbounds i16, i16* %blur_x917, i64 %23114
  %23116 = bitcast i16* %23115 to <16 x i16>*
  %23117 = load <16 x i16>, <16 x i16>* %23116, align 2, !tbaa !399
  %23118 = getelementptr inbounds i16, i16* %23115, i64 16
  %23119 = bitcast i16* %23118 to <16 x i16>*
  %23120 = load <16 x i16>, <16 x i16>* %23119, align 2, !tbaa !399
  %23121 = add nsw i64 %22824, %.pre-phi3703
  %23122 = getelementptr inbounds i16, i16* %blur_x917, i64 %23121
  %23123 = bitcast i16* %23122 to <16 x i16>*
  %23124 = load <16 x i16>, <16 x i16>* %23123, align 2, !tbaa !399
  %23125 = getelementptr inbounds i16, i16* %23122, i64 16
  %23126 = bitcast i16* %23125 to <16 x i16>*
  %23127 = load <16 x i16>, <16 x i16>* %23126, align 2, !tbaa !399
  %23128 = add nsw i64 %22827, %.pre-phi3703
  %23129 = getelementptr inbounds i16, i16* %blur_x917, i64 %23128
  %23130 = bitcast i16* %23129 to <16 x i16>*
  %23131 = load <16 x i16>, <16 x i16>* %23130, align 2, !tbaa !399
  %23132 = getelementptr inbounds i16, i16* %23129, i64 16
  %23133 = bitcast i16* %23132 to <16 x i16>*
  %23134 = load <16 x i16>, <16 x i16>* %23133, align 2, !tbaa !399
  %23135 = add nsw i64 %22830, %.pre-phi3703
  %23136 = getelementptr inbounds i16, i16* %blur_x917, i64 %23135
  %23137 = bitcast i16* %23136 to <16 x i16>*
  %23138 = load <16 x i16>, <16 x i16>* %23137, align 2, !tbaa !399
  %23139 = getelementptr inbounds i16, i16* %23136, i64 16
  %23140 = bitcast i16* %23139 to <16 x i16>*
  %23141 = load <16 x i16>, <16 x i16>* %23140, align 2, !tbaa !399
  %23142 = add <16 x i16> %23103, %23096
  %23143 = add <16 x i16> %23142, %23110
  %23144 = add <16 x i16> %23143, %23117
  %23145 = add <16 x i16> %23144, %23124
  %23146 = add <16 x i16> %23145, %23131
  %23147 = add <16 x i16> %23146, %23138
  %23148 = add <16 x i16> %23106, %23099
  %23149 = add <16 x i16> %23148, %23113
  %23150 = add <16 x i16> %23149, %23120
  %23151 = add <16 x i16> %23150, %23127
  %23152 = add <16 x i16> %23151, %23134
  %23153 = add <16 x i16> %23152, %23141
  %23154 = shufflevector <16 x i16> %23147, <16 x i16> %23153, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23155 = udiv <32 x i16> %23154, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %23156 = shufflevector <32 x i16> %23155, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23157 = add nsw i64 %22834, %.pre-phi3703
  %23158 = getelementptr inbounds i16, i16* %267, i64 %23157
  %23159 = bitcast i16* %23158 to <16 x i16>*
  store <16 x i16> %23156, <16 x i16>* %23159, align 2, !tbaa !401
  %23160 = shufflevector <32 x i16> %23155, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23161 = getelementptr inbounds i16, i16* %23158, i64 16
  %23162 = bitcast i16* %23161 to <16 x i16>*
  store <16 x i16> %23160, <16 x i16>* %23162, align 2, !tbaa !401
  %indvars.iv.next3513 = add nuw nsw i64 %indvars.iv3512, 1
  %.not2761 = icmp eq i64 %indvars.iv.next3513, %546
  br i1 %.not2761, label %"end for blur_y.s0.x.x.rebased1199", label %"for blur_y.s0.x.x.rebased1198"

"for blur_y.s0.x.x.rebased1214":                  ; preds = %"for blur_y.s0.x.x.rebased1214.preheader", %"consume blur_x1225"
  %blur_y.s0.x.x.rebased1216 = phi i32 [ %23305, %"consume blur_x1225" ], [ 0, %"for blur_y.s0.x.x.rebased1214.preheader" ]
  %23163 = add nsw i32 %blur_y.s0.x.x.rebased1216, %t1670852
  %a1917 = shl nsw i32 %23163, 5
  %23164 = icmp sgt i32 %t1691, %a1917
  %blur_y.s0.x.v0.base.s1217 = select i1 %23164, i32 %a1917, i32 %t1691
  %23165 = icmp slt i32 %23163, 1
  %23166 = icmp sgt i32 %202, %a1917
  %23167 = or i1 %23165, %23166
  br i1 %23167, label %"produce blur_x1222", label %"consume blur_x1225"

"end for blur_y.s0.x.x.rebased1215":              ; preds = %"consume blur_x1225", %"end for blur_y.s0.x.x.rebased1199"
  br i1 %233, label %"produce blur_x1229", label %after_bb1226

"produce blur_x1222":                             ; preds = %"for blur_y.s0.x.x.rebased1214"
  %23168 = icmp slt i32 %blur_y.s0.x.v0.base.s1217, %202
  %blur_x.s0.x.v1.base.s1223 = select i1 %23168, i32 %blur_y.s0.x.v0.base.s1217, i32 %202
  %t7891224 = add nsw i32 %365, %blur_x.s0.x.v1.base.s1223
  %23169 = sext i32 %t7891224 to i64
  %23170 = getelementptr inbounds i16, i16* %read_input860, i64 %23169
  %23171 = getelementptr inbounds i16, i16* %23170, i64 1
  %23172 = bitcast i16* %23171 to <16 x i16>*
  %23173 = load <16 x i16>, <16 x i16>* %23172, align 2, !tbaa !396
  %23174 = getelementptr inbounds i16, i16* %23170, i64 17
  %23175 = bitcast i16* %23174 to <16 x i16>*
  %23176 = load <16 x i16>, <16 x i16>* %23175, align 2, !tbaa !396
  %23177 = bitcast i16* %23170 to <16 x i16>*
  %23178 = load <16 x i16>, <16 x i16>* %23177, align 2, !tbaa !396
  %23179 = getelementptr inbounds i16, i16* %23170, i64 16
  %23180 = bitcast i16* %23179 to <16 x i16>*
  %23181 = load <16 x i16>, <16 x i16>* %23180, align 2, !tbaa !396
  %23182 = getelementptr inbounds i16, i16* %23170, i64 2
  %23183 = bitcast i16* %23182 to <16 x i16>*
  %23184 = load <16 x i16>, <16 x i16>* %23183, align 2, !tbaa !396
  %23185 = getelementptr inbounds i16, i16* %23170, i64 18
  %23186 = bitcast i16* %23185 to <16 x i16>*
  %23187 = load <16 x i16>, <16 x i16>* %23186, align 2, !tbaa !396
  %23188 = getelementptr inbounds i16, i16* %23170, i64 3
  %23189 = bitcast i16* %23188 to <16 x i16>*
  %23190 = load <16 x i16>, <16 x i16>* %23189, align 2, !tbaa !396
  %23191 = getelementptr inbounds i16, i16* %23170, i64 19
  %23192 = bitcast i16* %23191 to <16 x i16>*
  %23193 = load <16 x i16>, <16 x i16>* %23192, align 2, !tbaa !396
  %23194 = getelementptr inbounds i16, i16* %23170, i64 4
  %23195 = bitcast i16* %23194 to <16 x i16>*
  %23196 = load <16 x i16>, <16 x i16>* %23195, align 2, !tbaa !396
  %23197 = getelementptr inbounds i16, i16* %23170, i64 20
  %23198 = bitcast i16* %23197 to <16 x i16>*
  %23199 = load <16 x i16>, <16 x i16>* %23198, align 2, !tbaa !396
  %23200 = getelementptr inbounds i16, i16* %23170, i64 6
  %23201 = bitcast i16* %23200 to <16 x i16>*
  %23202 = load <16 x i16>, <16 x i16>* %23201, align 2, !tbaa !396
  %23203 = getelementptr inbounds i16, i16* %23170, i64 22
  %23204 = bitcast i16* %23203 to <16 x i16>*
  %23205 = load <16 x i16>, <16 x i16>* %23204, align 2, !tbaa !396
  %23206 = getelementptr inbounds i16, i16* %23170, i64 5
  %23207 = bitcast i16* %23206 to <16 x i16>*
  %23208 = load <16 x i16>, <16 x i16>* %23207, align 2, !tbaa !396
  %23209 = getelementptr inbounds i16, i16* %23170, i64 21
  %23210 = bitcast i16* %23209 to <16 x i16>*
  %23211 = load <16 x i16>, <16 x i16>* %23210, align 2, !tbaa !396
  %23212 = add <16 x i16> %23178, %23173
  %23213 = add <16 x i16> %23212, %23184
  %23214 = add <16 x i16> %23213, %23190
  %23215 = add <16 x i16> %23214, %23196
  %23216 = add <16 x i16> %23215, %23202
  %23217 = add <16 x i16> %23216, %23208
  %23218 = add <16 x i16> %23181, %23176
  %23219 = add <16 x i16> %23218, %23187
  %23220 = add <16 x i16> %23219, %23193
  %23221 = add <16 x i16> %23220, %23199
  %23222 = add <16 x i16> %23221, %23205
  %23223 = add <16 x i16> %23222, %23211
  %23224 = shufflevector <16 x i16> %23217, <16 x i16> %23223, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23225 = udiv <32 x i16> %23224, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %23226 = shufflevector <32 x i16> %23225, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23227 = sext i32 %blur_x.s0.x.v1.base.s1223 to i64
  %23228 = add nsw i64 %23227, %23002
  %23229 = getelementptr inbounds i16, i16* %blur_x917, i64 %23228
  %23230 = bitcast i16* %23229 to <16 x i16>*
  store <16 x i16> %23226, <16 x i16>* %23230, align 2, !tbaa !399
  %23231 = shufflevector <32 x i16> %23225, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23232 = getelementptr inbounds i16, i16* %23229, i64 16
  %23233 = bitcast i16* %23232 to <16 x i16>*
  store <16 x i16> %23231, <16 x i16>* %23233, align 2, !tbaa !399
  br label %"consume blur_x1225"

"consume blur_x1225":                             ; preds = %"for blur_y.s0.x.x.rebased1214", %"produce blur_x1222"
  %23234 = sext i32 %blur_y.s0.x.v0.base.s1217 to i64
  %23235 = add nsw i64 %23005, %23234
  %23236 = getelementptr inbounds i16, i16* %blur_x917, i64 %23235
  %23237 = bitcast i16* %23236 to <16 x i16>*
  %23238 = load <16 x i16>, <16 x i16>* %23237, align 2, !tbaa !399
  %23239 = getelementptr inbounds i16, i16* %23236, i64 16
  %23240 = bitcast i16* %23239 to <16 x i16>*
  %23241 = load <16 x i16>, <16 x i16>* %23240, align 2, !tbaa !399
  %23242 = add nsw i64 %23008, %23234
  %23243 = getelementptr inbounds i16, i16* %blur_x917, i64 %23242
  %23244 = bitcast i16* %23243 to <16 x i16>*
  %23245 = load <16 x i16>, <16 x i16>* %23244, align 2, !tbaa !399
  %23246 = getelementptr inbounds i16, i16* %23243, i64 16
  %23247 = bitcast i16* %23246 to <16 x i16>*
  %23248 = load <16 x i16>, <16 x i16>* %23247, align 2, !tbaa !399
  %23249 = add nsw i64 %23011, %23234
  %23250 = getelementptr inbounds i16, i16* %blur_x917, i64 %23249
  %23251 = bitcast i16* %23250 to <16 x i16>*
  %23252 = load <16 x i16>, <16 x i16>* %23251, align 2, !tbaa !399
  %23253 = getelementptr inbounds i16, i16* %23250, i64 16
  %23254 = bitcast i16* %23253 to <16 x i16>*
  %23255 = load <16 x i16>, <16 x i16>* %23254, align 2, !tbaa !399
  %23256 = add nsw i64 %23014, %23234
  %23257 = getelementptr inbounds i16, i16* %blur_x917, i64 %23256
  %23258 = bitcast i16* %23257 to <16 x i16>*
  %23259 = load <16 x i16>, <16 x i16>* %23258, align 2, !tbaa !399
  %23260 = getelementptr inbounds i16, i16* %23257, i64 16
  %23261 = bitcast i16* %23260 to <16 x i16>*
  %23262 = load <16 x i16>, <16 x i16>* %23261, align 2, !tbaa !399
  %23263 = add nsw i64 %23017, %23234
  %23264 = getelementptr inbounds i16, i16* %blur_x917, i64 %23263
  %23265 = bitcast i16* %23264 to <16 x i16>*
  %23266 = load <16 x i16>, <16 x i16>* %23265, align 2, !tbaa !399
  %23267 = getelementptr inbounds i16, i16* %23264, i64 16
  %23268 = bitcast i16* %23267 to <16 x i16>*
  %23269 = load <16 x i16>, <16 x i16>* %23268, align 2, !tbaa !399
  %23270 = add nsw i64 %23020, %23234
  %23271 = getelementptr inbounds i16, i16* %blur_x917, i64 %23270
  %23272 = bitcast i16* %23271 to <16 x i16>*
  %23273 = load <16 x i16>, <16 x i16>* %23272, align 2, !tbaa !399
  %23274 = getelementptr inbounds i16, i16* %23271, i64 16
  %23275 = bitcast i16* %23274 to <16 x i16>*
  %23276 = load <16 x i16>, <16 x i16>* %23275, align 2, !tbaa !399
  %23277 = add nsw i64 %23023, %23234
  %23278 = getelementptr inbounds i16, i16* %blur_x917, i64 %23277
  %23279 = bitcast i16* %23278 to <16 x i16>*
  %23280 = load <16 x i16>, <16 x i16>* %23279, align 2, !tbaa !399
  %23281 = getelementptr inbounds i16, i16* %23278, i64 16
  %23282 = bitcast i16* %23281 to <16 x i16>*
  %23283 = load <16 x i16>, <16 x i16>* %23282, align 2, !tbaa !399
  %23284 = add <16 x i16> %23245, %23238
  %23285 = add <16 x i16> %23284, %23252
  %23286 = add <16 x i16> %23285, %23259
  %23287 = add <16 x i16> %23286, %23266
  %23288 = add <16 x i16> %23287, %23273
  %23289 = add <16 x i16> %23288, %23280
  %23290 = add <16 x i16> %23248, %23241
  %23291 = add <16 x i16> %23290, %23255
  %23292 = add <16 x i16> %23291, %23262
  %23293 = add <16 x i16> %23292, %23269
  %23294 = add <16 x i16> %23293, %23276
  %23295 = add <16 x i16> %23294, %23283
  %23296 = shufflevector <16 x i16> %23289, <16 x i16> %23295, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23297 = udiv <32 x i16> %23296, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %23298 = shufflevector <32 x i16> %23297, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23299 = add nsw i64 %23027, %23234
  %23300 = getelementptr inbounds i16, i16* %267, i64 %23299
  %23301 = bitcast i16* %23300 to <16 x i16>*
  store <16 x i16> %23298, <16 x i16>* %23301, align 2, !tbaa !401
  %23302 = shufflevector <32 x i16> %23297, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23303 = getelementptr inbounds i16, i16* %23300, i64 16
  %23304 = bitcast i16* %23303 to <16 x i16>*
  store <16 x i16> %23302, <16 x i16>* %23304, align 2, !tbaa !401
  %23305 = add nuw nsw i32 %blur_y.s0.x.x.rebased1216, 1
  %.not2760 = icmp eq i32 %23305, %t1727936
  br i1 %.not2760, label %"end for blur_y.s0.x.x.rebased1215", label %"for blur_y.s0.x.x.rebased1214"

after_bb1226:                                     ; preds = %"end for blur_y.s0.x.x.rebased1215", %"produce blur_x1229"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1241.preheader", label %"end for blur_y.s0.x.x.rebased1242", !prof !386

"for blur_y.s0.x.x.rebased1241.preheader":        ; preds = %after_bb1226
  %23306 = sext i32 %t1732952 to i64
  %23307 = zext i32 %.pre-phi3685 to i64
  %23308 = mul nsw i64 %23307, %353
  %23309 = sub nsw i64 %23308, %302
  %23310 = zext i32 %.pre-phi3681 to i64
  %23311 = mul nsw i64 %23310, %353
  %23312 = sub nsw i64 %23311, %302
  %23313 = zext i32 %.pre-phi3689 to i64
  %23314 = mul nsw i64 %23313, %353
  %23315 = sub nsw i64 %23314, %302
  %23316 = zext i32 %.pre-phi3693 to i64
  %23317 = mul nsw i64 %23316, %353
  %23318 = sub nsw i64 %23317, %302
  %23319 = zext i32 %.pre-phi3699 to i64
  %23320 = mul nsw i64 %23319, %353
  %23321 = sub nsw i64 %23320, %302
  %23322 = zext i32 %.pre-phi3673 to i64
  %23323 = mul nsw i64 %23322, %353
  %23324 = sub nsw i64 %23323, %302
  %23325 = zext i32 %.pre-phi3669 to i64
  %23326 = mul nsw i64 %23325, %353
  %23327 = sub nsw i64 %23326, %302
  %23328 = sext i32 %a393 to i64
  %23329 = add nsw i64 %23328, 3
  %23330 = mul nsw i64 %23329, %350
  %23331 = add nsw i64 %23330, %354
  br label %"for blur_y.s0.x.x.rebased1241"

"produce blur_x1229":                             ; preds = %"end for blur_y.s0.x.x.rebased1215"
  %23332 = getelementptr inbounds i16, i16* %read_input860, i64 %369
  %23333 = getelementptr inbounds i16, i16* %23332, i64 -31
  %23334 = bitcast i16* %23333 to <16 x i16>*
  %23335 = load <16 x i16>, <16 x i16>* %23334, align 2, !tbaa !396
  %23336 = getelementptr inbounds i16, i16* %23332, i64 -15
  %23337 = bitcast i16* %23336 to <16 x i16>*
  %23338 = load <16 x i16>, <16 x i16>* %23337, align 2, !tbaa !396
  %23339 = getelementptr inbounds i16, i16* %23332, i64 -32
  %23340 = bitcast i16* %23339 to <16 x i16>*
  %23341 = load <16 x i16>, <16 x i16>* %23340, align 2, !tbaa !396
  %23342 = getelementptr inbounds i16, i16* %23332, i64 -16
  %23343 = bitcast i16* %23342 to <16 x i16>*
  %23344 = load <16 x i16>, <16 x i16>* %23343, align 2, !tbaa !396
  %23345 = getelementptr inbounds i16, i16* %23332, i64 -30
  %23346 = bitcast i16* %23345 to <16 x i16>*
  %23347 = load <16 x i16>, <16 x i16>* %23346, align 2, !tbaa !396
  %23348 = getelementptr inbounds i16, i16* %23332, i64 -14
  %23349 = bitcast i16* %23348 to <16 x i16>*
  %23350 = load <16 x i16>, <16 x i16>* %23349, align 2, !tbaa !396
  %23351 = getelementptr inbounds i16, i16* %23332, i64 -29
  %23352 = bitcast i16* %23351 to <16 x i16>*
  %23353 = load <16 x i16>, <16 x i16>* %23352, align 2, !tbaa !396
  %23354 = getelementptr inbounds i16, i16* %23332, i64 -13
  %23355 = bitcast i16* %23354 to <16 x i16>*
  %23356 = load <16 x i16>, <16 x i16>* %23355, align 2, !tbaa !396
  %23357 = getelementptr inbounds i16, i16* %23332, i64 -28
  %23358 = bitcast i16* %23357 to <16 x i16>*
  %23359 = load <16 x i16>, <16 x i16>* %23358, align 2, !tbaa !396
  %23360 = getelementptr inbounds i16, i16* %23332, i64 -12
  %23361 = bitcast i16* %23360 to <16 x i16>*
  %23362 = load <16 x i16>, <16 x i16>* %23361, align 2, !tbaa !396
  %23363 = getelementptr inbounds i16, i16* %23332, i64 -26
  %23364 = bitcast i16* %23363 to <16 x i16>*
  %23365 = load <16 x i16>, <16 x i16>* %23364, align 2, !tbaa !396
  %23366 = getelementptr inbounds i16, i16* %23332, i64 -10
  %23367 = bitcast i16* %23366 to <16 x i16>*
  %23368 = load <16 x i16>, <16 x i16>* %23367, align 2, !tbaa !396
  %23369 = getelementptr inbounds i16, i16* %23332, i64 -27
  %23370 = bitcast i16* %23369 to <16 x i16>*
  %23371 = load <16 x i16>, <16 x i16>* %23370, align 2, !tbaa !396
  %23372 = getelementptr inbounds i16, i16* %23332, i64 -11
  %23373 = bitcast i16* %23372 to <16 x i16>*
  %23374 = load <16 x i16>, <16 x i16>* %23373, align 2, !tbaa !396
  %23375 = add <16 x i16> %23341, %23335
  %23376 = add <16 x i16> %23375, %23347
  %23377 = add <16 x i16> %23376, %23353
  %23378 = add <16 x i16> %23377, %23359
  %23379 = add <16 x i16> %23378, %23365
  %23380 = add <16 x i16> %23379, %23371
  %23381 = add <16 x i16> %23344, %23338
  %23382 = add <16 x i16> %23381, %23350
  %23383 = add <16 x i16> %23382, %23356
  %23384 = add <16 x i16> %23383, %23362
  %23385 = add <16 x i16> %23384, %23368
  %23386 = add <16 x i16> %23385, %23374
  %23387 = shufflevector <16 x i16> %23380, <16 x i16> %23386, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23388 = udiv <32 x i16> %23387, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %23389 = shufflevector <32 x i16> %23388, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23390 = zext i32 %.pre-phi3673 to i64
  %23391 = mul nsw i64 %303, %23390
  %23392 = add nsw i64 %305, %23391
  %23393 = getelementptr inbounds i16, i16* %blur_x917, i64 %23392
  %23394 = getelementptr inbounds i16, i16* %23393, i64 -32
  %23395 = bitcast i16* %23394 to <16 x i16>*
  store <16 x i16> %23389, <16 x i16>* %23395, align 2, !tbaa !399
  %23396 = shufflevector <32 x i16> %23388, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23397 = getelementptr inbounds i16, i16* %23393, i64 -16
  %23398 = bitcast i16* %23397 to <16 x i16>*
  store <16 x i16> %23396, <16 x i16>* %23398, align 2, !tbaa !399
  %23399 = zext i32 %.pre-phi3685 to i64
  %23400 = mul nsw i64 %23399, %349
  %23401 = add nsw i64 %23400, %300
  %23402 = getelementptr inbounds i16, i16* %blur_x917, i64 %23401
  %23403 = getelementptr inbounds i16, i16* %23402, i64 -32
  %23404 = bitcast i16* %23403 to <16 x i16>*
  %23405 = load <16 x i16>, <16 x i16>* %23404, align 2, !tbaa !399
  %23406 = getelementptr inbounds i16, i16* %23402, i64 -16
  %23407 = bitcast i16* %23406 to <16 x i16>*
  %23408 = load <16 x i16>, <16 x i16>* %23407, align 2, !tbaa !399
  %23409 = zext i32 %.pre-phi3681 to i64
  %23410 = mul nsw i64 %23409, %349
  %23411 = add nsw i64 %23410, %300
  %23412 = getelementptr inbounds i16, i16* %blur_x917, i64 %23411
  %23413 = getelementptr inbounds i16, i16* %23412, i64 -32
  %23414 = bitcast i16* %23413 to <16 x i16>*
  %23415 = load <16 x i16>, <16 x i16>* %23414, align 2, !tbaa !399
  %23416 = getelementptr inbounds i16, i16* %23412, i64 -16
  %23417 = bitcast i16* %23416 to <16 x i16>*
  %23418 = load <16 x i16>, <16 x i16>* %23417, align 2, !tbaa !399
  %23419 = zext i32 %.pre-phi3689 to i64
  %23420 = mul nsw i64 %23419, %349
  %23421 = add nsw i64 %23420, %300
  %23422 = getelementptr inbounds i16, i16* %blur_x917, i64 %23421
  %23423 = getelementptr inbounds i16, i16* %23422, i64 -32
  %23424 = bitcast i16* %23423 to <16 x i16>*
  %23425 = load <16 x i16>, <16 x i16>* %23424, align 2, !tbaa !399
  %23426 = getelementptr inbounds i16, i16* %23422, i64 -16
  %23427 = bitcast i16* %23426 to <16 x i16>*
  %23428 = load <16 x i16>, <16 x i16>* %23427, align 2, !tbaa !399
  %23429 = zext i32 %.pre-phi3693 to i64
  %23430 = mul nsw i64 %23429, %349
  %23431 = add nsw i64 %23430, %300
  %23432 = getelementptr inbounds i16, i16* %blur_x917, i64 %23431
  %23433 = getelementptr inbounds i16, i16* %23432, i64 -32
  %23434 = bitcast i16* %23433 to <16 x i16>*
  %23435 = load <16 x i16>, <16 x i16>* %23434, align 2, !tbaa !399
  %23436 = getelementptr inbounds i16, i16* %23432, i64 -16
  %23437 = bitcast i16* %23436 to <16 x i16>*
  %23438 = load <16 x i16>, <16 x i16>* %23437, align 2, !tbaa !399
  %23439 = zext i32 %.pre-phi3699 to i64
  %23440 = mul nsw i64 %23439, %349
  %23441 = add nsw i64 %23440, %300
  %23442 = getelementptr inbounds i16, i16* %blur_x917, i64 %23441
  %23443 = getelementptr inbounds i16, i16* %23442, i64 -32
  %23444 = bitcast i16* %23443 to <16 x i16>*
  %23445 = load <16 x i16>, <16 x i16>* %23444, align 2, !tbaa !399
  %23446 = getelementptr inbounds i16, i16* %23442, i64 -16
  %23447 = bitcast i16* %23446 to <16 x i16>*
  %23448 = load <16 x i16>, <16 x i16>* %23447, align 2, !tbaa !399
  %23449 = mul nsw i64 %23390, %349
  %23450 = add nsw i64 %23449, %300
  %23451 = getelementptr inbounds i16, i16* %blur_x917, i64 %23450
  %23452 = getelementptr inbounds i16, i16* %23451, i64 -32
  %23453 = bitcast i16* %23452 to <16 x i16>*
  %23454 = load <16 x i16>, <16 x i16>* %23453, align 2, !tbaa !399
  %23455 = getelementptr inbounds i16, i16* %23451, i64 -16
  %23456 = bitcast i16* %23455 to <16 x i16>*
  %23457 = load <16 x i16>, <16 x i16>* %23456, align 2, !tbaa !399
  %23458 = zext i32 %.pre-phi3669 to i64
  %23459 = mul nsw i64 %23458, %349
  %23460 = add nsw i64 %23459, %300
  %23461 = getelementptr inbounds i16, i16* %blur_x917, i64 %23460
  %23462 = getelementptr inbounds i16, i16* %23461, i64 -32
  %23463 = bitcast i16* %23462 to <16 x i16>*
  %23464 = load <16 x i16>, <16 x i16>* %23463, align 2, !tbaa !399
  %23465 = getelementptr inbounds i16, i16* %23461, i64 -16
  %23466 = bitcast i16* %23465 to <16 x i16>*
  %23467 = load <16 x i16>, <16 x i16>* %23466, align 2, !tbaa !399
  %23468 = add <16 x i16> %23415, %23405
  %23469 = add <16 x i16> %23468, %23425
  %23470 = add <16 x i16> %23469, %23435
  %23471 = add <16 x i16> %23470, %23445
  %23472 = add <16 x i16> %23471, %23454
  %23473 = add <16 x i16> %23472, %23464
  %23474 = add <16 x i16> %23418, %23408
  %23475 = add <16 x i16> %23474, %23428
  %23476 = add <16 x i16> %23475, %23438
  %23477 = add <16 x i16> %23476, %23448
  %23478 = add <16 x i16> %23477, %23457
  %23479 = add <16 x i16> %23478, %23467
  %23480 = shufflevector <16 x i16> %23473, <16 x i16> %23479, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23481 = udiv <32 x i16> %23480, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %23482 = shufflevector <32 x i16> %23481, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23483 = sext i32 %a393 to i64
  %23484 = add nsw i64 %23483, 3
  %23485 = mul nsw i64 %23484, %350
  %23486 = add nsw i64 %352, %23485
  %23487 = getelementptr inbounds i16, i16* %267, i64 %23486
  %23488 = getelementptr inbounds i16, i16* %23487, i64 -32
  %23489 = bitcast i16* %23488 to <16 x i16>*
  store <16 x i16> %23482, <16 x i16>* %23489, align 2, !tbaa !401
  %23490 = shufflevector <32 x i16> %23481, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23491 = getelementptr inbounds i16, i16* %23487, i64 -16
  %23492 = bitcast i16* %23491 to <16 x i16>*
  store <16 x i16> %23490, <16 x i16>* %23492, align 2, !tbaa !401
  br label %after_bb1226

"for blur_y.s0.x.x.rebased1241":                  ; preds = %"for blur_y.s0.x.x.rebased1241.preheader", %"consume blur_x1249"
  %indvars.iv3514 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1241.preheader" ], [ %indvars.iv.next3515, %"consume blur_x1249" ]
  %23493 = add nsw i64 %indvars.iv3514, %307
  %23494 = icmp slt i64 %23493, 1
  %23495 = trunc i64 %23493 to i32
  %23496 = shl nsw i32 %23495, 5
  %23497 = icmp sgt i32 %202, %23496
  %23498 = or i1 %23494, %23497
  br i1 %23498, label %"produce blur_x1247", label %"for blur_y.s0.x.x.rebased1241.consume blur_x1249_crit_edge"

"for blur_y.s0.x.x.rebased1241.consume blur_x1249_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1241"
  %.pre3704 = shl nsw i64 %23493, 5
  br label %"consume blur_x1249"

"end for blur_y.s0.x.x.rebased1242":              ; preds = %"consume blur_x1249", %after_bb1226
  br i1 %308, label %"for blur_y.s0.x.x.rebased1257.preheader", label %"end for blur_y.s0.x.x.rebased1258", !prof !386

"for blur_y.s0.x.x.rebased1257.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1242"
  %23499 = sext i32 %t1732952 to i64
  %23500 = zext i32 %.pre-phi3685 to i64
  %23501 = mul nsw i64 %23500, %353
  %23502 = sub nsw i64 %23501, %302
  %23503 = zext i32 %.pre-phi3681 to i64
  %23504 = mul nsw i64 %23503, %353
  %23505 = sub nsw i64 %23504, %302
  %23506 = zext i32 %.pre-phi3689 to i64
  %23507 = mul nsw i64 %23506, %353
  %23508 = sub nsw i64 %23507, %302
  %23509 = zext i32 %.pre-phi3693 to i64
  %23510 = mul nsw i64 %23509, %353
  %23511 = sub nsw i64 %23510, %302
  %23512 = zext i32 %.pre-phi3699 to i64
  %23513 = mul nsw i64 %23512, %353
  %23514 = sub nsw i64 %23513, %302
  %23515 = zext i32 %.pre-phi3673 to i64
  %23516 = mul nsw i64 %23515, %353
  %23517 = sub nsw i64 %23516, %302
  %23518 = zext i32 %.pre-phi3669 to i64
  %23519 = mul nsw i64 %23518, %353
  %23520 = sub nsw i64 %23519, %302
  %23521 = sext i32 %a393 to i64
  %23522 = add nsw i64 %23521, 3
  %23523 = mul nsw i64 %23522, %350
  %23524 = add nsw i64 %23523, %354
  br label %"for blur_y.s0.x.x.rebased1257"

"produce blur_x1247":                             ; preds = %"for blur_y.s0.x.x.rebased1241"
  %t8001248 = add nsw i32 %371, %23496
  %23525 = sext i32 %t8001248 to i64
  %23526 = getelementptr inbounds i16, i16* %read_input860, i64 %23525
  %23527 = getelementptr inbounds i16, i16* %23526, i64 1
  %23528 = bitcast i16* %23527 to <16 x i16>*
  %23529 = load <16 x i16>, <16 x i16>* %23528, align 2, !tbaa !396
  %23530 = getelementptr inbounds i16, i16* %23526, i64 17
  %23531 = bitcast i16* %23530 to <16 x i16>*
  %23532 = load <16 x i16>, <16 x i16>* %23531, align 2, !tbaa !396
  %23533 = bitcast i16* %23526 to <16 x i16>*
  %23534 = load <16 x i16>, <16 x i16>* %23533, align 2, !tbaa !396
  %23535 = getelementptr inbounds i16, i16* %23526, i64 16
  %23536 = bitcast i16* %23535 to <16 x i16>*
  %23537 = load <16 x i16>, <16 x i16>* %23536, align 2, !tbaa !396
  %23538 = getelementptr inbounds i16, i16* %23526, i64 2
  %23539 = bitcast i16* %23538 to <16 x i16>*
  %23540 = load <16 x i16>, <16 x i16>* %23539, align 2, !tbaa !396
  %23541 = getelementptr inbounds i16, i16* %23526, i64 18
  %23542 = bitcast i16* %23541 to <16 x i16>*
  %23543 = load <16 x i16>, <16 x i16>* %23542, align 2, !tbaa !396
  %23544 = getelementptr inbounds i16, i16* %23526, i64 3
  %23545 = bitcast i16* %23544 to <16 x i16>*
  %23546 = load <16 x i16>, <16 x i16>* %23545, align 2, !tbaa !396
  %23547 = getelementptr inbounds i16, i16* %23526, i64 19
  %23548 = bitcast i16* %23547 to <16 x i16>*
  %23549 = load <16 x i16>, <16 x i16>* %23548, align 2, !tbaa !396
  %23550 = getelementptr inbounds i16, i16* %23526, i64 4
  %23551 = bitcast i16* %23550 to <16 x i16>*
  %23552 = load <16 x i16>, <16 x i16>* %23551, align 2, !tbaa !396
  %23553 = getelementptr inbounds i16, i16* %23526, i64 20
  %23554 = bitcast i16* %23553 to <16 x i16>*
  %23555 = load <16 x i16>, <16 x i16>* %23554, align 2, !tbaa !396
  %23556 = getelementptr inbounds i16, i16* %23526, i64 6
  %23557 = bitcast i16* %23556 to <16 x i16>*
  %23558 = load <16 x i16>, <16 x i16>* %23557, align 2, !tbaa !396
  %23559 = getelementptr inbounds i16, i16* %23526, i64 22
  %23560 = bitcast i16* %23559 to <16 x i16>*
  %23561 = load <16 x i16>, <16 x i16>* %23560, align 2, !tbaa !396
  %23562 = getelementptr inbounds i16, i16* %23526, i64 5
  %23563 = bitcast i16* %23562 to <16 x i16>*
  %23564 = load <16 x i16>, <16 x i16>* %23563, align 2, !tbaa !396
  %23565 = getelementptr inbounds i16, i16* %23526, i64 21
  %23566 = bitcast i16* %23565 to <16 x i16>*
  %23567 = load <16 x i16>, <16 x i16>* %23566, align 2, !tbaa !396
  %23568 = add <16 x i16> %23534, %23529
  %23569 = add <16 x i16> %23568, %23540
  %23570 = add <16 x i16> %23569, %23546
  %23571 = add <16 x i16> %23570, %23552
  %23572 = add <16 x i16> %23571, %23558
  %23573 = add <16 x i16> %23572, %23564
  %23574 = add <16 x i16> %23537, %23532
  %23575 = add <16 x i16> %23574, %23543
  %23576 = add <16 x i16> %23575, %23549
  %23577 = add <16 x i16> %23576, %23555
  %23578 = add <16 x i16> %23577, %23561
  %23579 = add <16 x i16> %23578, %23567
  %23580 = shufflevector <16 x i16> %23573, <16 x i16> %23579, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23581 = udiv <32 x i16> %23580, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %23582 = shufflevector <32 x i16> %23581, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23583 = shl nsw i64 %23493, 5
  %23584 = add nsw i64 %23583, %23306
  %23585 = getelementptr inbounds i16, i16* %blur_x917, i64 %23584
  %23586 = bitcast i16* %23585 to <16 x i16>*
  store <16 x i16> %23582, <16 x i16>* %23586, align 2, !tbaa !399
  %23587 = shufflevector <32 x i16> %23581, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23588 = getelementptr inbounds i16, i16* %23585, i64 16
  %23589 = bitcast i16* %23588 to <16 x i16>*
  store <16 x i16> %23587, <16 x i16>* %23589, align 2, !tbaa !399
  br label %"consume blur_x1249"

"consume blur_x1249":                             ; preds = %"for blur_y.s0.x.x.rebased1241.consume blur_x1249_crit_edge", %"produce blur_x1247"
  %.pre-phi3705 = phi i64 [ %.pre3704, %"for blur_y.s0.x.x.rebased1241.consume blur_x1249_crit_edge" ], [ %23583, %"produce blur_x1247" ]
  %23590 = add nsw i64 %23309, %.pre-phi3705
  %23591 = getelementptr inbounds i16, i16* %blur_x917, i64 %23590
  %23592 = bitcast i16* %23591 to <16 x i16>*
  %23593 = load <16 x i16>, <16 x i16>* %23592, align 2, !tbaa !399
  %23594 = getelementptr inbounds i16, i16* %23591, i64 16
  %23595 = bitcast i16* %23594 to <16 x i16>*
  %23596 = load <16 x i16>, <16 x i16>* %23595, align 2, !tbaa !399
  %23597 = add nsw i64 %23312, %.pre-phi3705
  %23598 = getelementptr inbounds i16, i16* %blur_x917, i64 %23597
  %23599 = bitcast i16* %23598 to <16 x i16>*
  %23600 = load <16 x i16>, <16 x i16>* %23599, align 2, !tbaa !399
  %23601 = getelementptr inbounds i16, i16* %23598, i64 16
  %23602 = bitcast i16* %23601 to <16 x i16>*
  %23603 = load <16 x i16>, <16 x i16>* %23602, align 2, !tbaa !399
  %23604 = add nsw i64 %23315, %.pre-phi3705
  %23605 = getelementptr inbounds i16, i16* %blur_x917, i64 %23604
  %23606 = bitcast i16* %23605 to <16 x i16>*
  %23607 = load <16 x i16>, <16 x i16>* %23606, align 2, !tbaa !399
  %23608 = getelementptr inbounds i16, i16* %23605, i64 16
  %23609 = bitcast i16* %23608 to <16 x i16>*
  %23610 = load <16 x i16>, <16 x i16>* %23609, align 2, !tbaa !399
  %23611 = add nsw i64 %23318, %.pre-phi3705
  %23612 = getelementptr inbounds i16, i16* %blur_x917, i64 %23611
  %23613 = bitcast i16* %23612 to <16 x i16>*
  %23614 = load <16 x i16>, <16 x i16>* %23613, align 2, !tbaa !399
  %23615 = getelementptr inbounds i16, i16* %23612, i64 16
  %23616 = bitcast i16* %23615 to <16 x i16>*
  %23617 = load <16 x i16>, <16 x i16>* %23616, align 2, !tbaa !399
  %23618 = add nsw i64 %23321, %.pre-phi3705
  %23619 = getelementptr inbounds i16, i16* %blur_x917, i64 %23618
  %23620 = bitcast i16* %23619 to <16 x i16>*
  %23621 = load <16 x i16>, <16 x i16>* %23620, align 2, !tbaa !399
  %23622 = getelementptr inbounds i16, i16* %23619, i64 16
  %23623 = bitcast i16* %23622 to <16 x i16>*
  %23624 = load <16 x i16>, <16 x i16>* %23623, align 2, !tbaa !399
  %23625 = add nsw i64 %23324, %.pre-phi3705
  %23626 = getelementptr inbounds i16, i16* %blur_x917, i64 %23625
  %23627 = bitcast i16* %23626 to <16 x i16>*
  %23628 = load <16 x i16>, <16 x i16>* %23627, align 2, !tbaa !399
  %23629 = getelementptr inbounds i16, i16* %23626, i64 16
  %23630 = bitcast i16* %23629 to <16 x i16>*
  %23631 = load <16 x i16>, <16 x i16>* %23630, align 2, !tbaa !399
  %23632 = add nsw i64 %23327, %.pre-phi3705
  %23633 = getelementptr inbounds i16, i16* %blur_x917, i64 %23632
  %23634 = bitcast i16* %23633 to <16 x i16>*
  %23635 = load <16 x i16>, <16 x i16>* %23634, align 2, !tbaa !399
  %23636 = getelementptr inbounds i16, i16* %23633, i64 16
  %23637 = bitcast i16* %23636 to <16 x i16>*
  %23638 = load <16 x i16>, <16 x i16>* %23637, align 2, !tbaa !399
  %23639 = add <16 x i16> %23600, %23593
  %23640 = add <16 x i16> %23639, %23607
  %23641 = add <16 x i16> %23640, %23614
  %23642 = add <16 x i16> %23641, %23621
  %23643 = add <16 x i16> %23642, %23628
  %23644 = add <16 x i16> %23643, %23635
  %23645 = add <16 x i16> %23603, %23596
  %23646 = add <16 x i16> %23645, %23610
  %23647 = add <16 x i16> %23646, %23617
  %23648 = add <16 x i16> %23647, %23624
  %23649 = add <16 x i16> %23648, %23631
  %23650 = add <16 x i16> %23649, %23638
  %23651 = shufflevector <16 x i16> %23644, <16 x i16> %23650, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23652 = udiv <32 x i16> %23651, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %23653 = shufflevector <32 x i16> %23652, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23654 = add nsw i64 %23331, %.pre-phi3705
  %23655 = getelementptr inbounds i16, i16* %267, i64 %23654
  %23656 = bitcast i16* %23655 to <16 x i16>*
  store <16 x i16> %23653, <16 x i16>* %23656, align 2, !tbaa !401
  %23657 = shufflevector <32 x i16> %23652, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23658 = getelementptr inbounds i16, i16* %23655, i64 16
  %23659 = bitcast i16* %23658 to <16 x i16>*
  store <16 x i16> %23657, <16 x i16>* %23659, align 2, !tbaa !401
  %indvars.iv.next3515 = add nuw nsw i64 %indvars.iv3514, 1
  %.not2757 = icmp eq i64 %indvars.iv.next3515, %546
  br i1 %.not2757, label %"end for blur_y.s0.x.x.rebased1242", label %"for blur_y.s0.x.x.rebased1241"

"for blur_y.s0.x.x.rebased1257":                  ; preds = %"for blur_y.s0.x.x.rebased1257.preheader", %"consume blur_x1268"
  %blur_y.s0.x.x.rebased1259 = phi i32 [ %23802, %"consume blur_x1268" ], [ 0, %"for blur_y.s0.x.x.rebased1257.preheader" ]
  %23660 = add nsw i32 %blur_y.s0.x.x.rebased1259, %t1670852
  %a2074 = shl nsw i32 %23660, 5
  %23661 = icmp sgt i32 %t1691, %a2074
  %blur_y.s0.x.v0.base.s1260 = select i1 %23661, i32 %a2074, i32 %t1691
  %23662 = icmp slt i32 %23660, 1
  %23663 = icmp sgt i32 %202, %a2074
  %23664 = or i1 %23662, %23663
  br i1 %23664, label %"produce blur_x1265", label %"consume blur_x1268"

"end for blur_y.s0.x.x.rebased1258":              ; preds = %"consume blur_x1268", %"end for blur_y.s0.x.x.rebased1242"
  br i1 %233, label %"produce blur_x1272", label %after_bb1269

"produce blur_x1265":                             ; preds = %"for blur_y.s0.x.x.rebased1257"
  %23665 = icmp slt i32 %blur_y.s0.x.v0.base.s1260, %202
  %blur_x.s0.x.v1.base.s1266 = select i1 %23665, i32 %blur_y.s0.x.v0.base.s1260, i32 %202
  %t8051267 = add nsw i32 %371, %blur_x.s0.x.v1.base.s1266
  %23666 = sext i32 %t8051267 to i64
  %23667 = getelementptr inbounds i16, i16* %read_input860, i64 %23666
  %23668 = getelementptr inbounds i16, i16* %23667, i64 1
  %23669 = bitcast i16* %23668 to <16 x i16>*
  %23670 = load <16 x i16>, <16 x i16>* %23669, align 2, !tbaa !396
  %23671 = getelementptr inbounds i16, i16* %23667, i64 17
  %23672 = bitcast i16* %23671 to <16 x i16>*
  %23673 = load <16 x i16>, <16 x i16>* %23672, align 2, !tbaa !396
  %23674 = bitcast i16* %23667 to <16 x i16>*
  %23675 = load <16 x i16>, <16 x i16>* %23674, align 2, !tbaa !396
  %23676 = getelementptr inbounds i16, i16* %23667, i64 16
  %23677 = bitcast i16* %23676 to <16 x i16>*
  %23678 = load <16 x i16>, <16 x i16>* %23677, align 2, !tbaa !396
  %23679 = getelementptr inbounds i16, i16* %23667, i64 2
  %23680 = bitcast i16* %23679 to <16 x i16>*
  %23681 = load <16 x i16>, <16 x i16>* %23680, align 2, !tbaa !396
  %23682 = getelementptr inbounds i16, i16* %23667, i64 18
  %23683 = bitcast i16* %23682 to <16 x i16>*
  %23684 = load <16 x i16>, <16 x i16>* %23683, align 2, !tbaa !396
  %23685 = getelementptr inbounds i16, i16* %23667, i64 3
  %23686 = bitcast i16* %23685 to <16 x i16>*
  %23687 = load <16 x i16>, <16 x i16>* %23686, align 2, !tbaa !396
  %23688 = getelementptr inbounds i16, i16* %23667, i64 19
  %23689 = bitcast i16* %23688 to <16 x i16>*
  %23690 = load <16 x i16>, <16 x i16>* %23689, align 2, !tbaa !396
  %23691 = getelementptr inbounds i16, i16* %23667, i64 4
  %23692 = bitcast i16* %23691 to <16 x i16>*
  %23693 = load <16 x i16>, <16 x i16>* %23692, align 2, !tbaa !396
  %23694 = getelementptr inbounds i16, i16* %23667, i64 20
  %23695 = bitcast i16* %23694 to <16 x i16>*
  %23696 = load <16 x i16>, <16 x i16>* %23695, align 2, !tbaa !396
  %23697 = getelementptr inbounds i16, i16* %23667, i64 6
  %23698 = bitcast i16* %23697 to <16 x i16>*
  %23699 = load <16 x i16>, <16 x i16>* %23698, align 2, !tbaa !396
  %23700 = getelementptr inbounds i16, i16* %23667, i64 22
  %23701 = bitcast i16* %23700 to <16 x i16>*
  %23702 = load <16 x i16>, <16 x i16>* %23701, align 2, !tbaa !396
  %23703 = getelementptr inbounds i16, i16* %23667, i64 5
  %23704 = bitcast i16* %23703 to <16 x i16>*
  %23705 = load <16 x i16>, <16 x i16>* %23704, align 2, !tbaa !396
  %23706 = getelementptr inbounds i16, i16* %23667, i64 21
  %23707 = bitcast i16* %23706 to <16 x i16>*
  %23708 = load <16 x i16>, <16 x i16>* %23707, align 2, !tbaa !396
  %23709 = add <16 x i16> %23675, %23670
  %23710 = add <16 x i16> %23709, %23681
  %23711 = add <16 x i16> %23710, %23687
  %23712 = add <16 x i16> %23711, %23693
  %23713 = add <16 x i16> %23712, %23699
  %23714 = add <16 x i16> %23713, %23705
  %23715 = add <16 x i16> %23678, %23673
  %23716 = add <16 x i16> %23715, %23684
  %23717 = add <16 x i16> %23716, %23690
  %23718 = add <16 x i16> %23717, %23696
  %23719 = add <16 x i16> %23718, %23702
  %23720 = add <16 x i16> %23719, %23708
  %23721 = shufflevector <16 x i16> %23714, <16 x i16> %23720, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23722 = udiv <32 x i16> %23721, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %23723 = shufflevector <32 x i16> %23722, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23724 = sext i32 %blur_x.s0.x.v1.base.s1266 to i64
  %23725 = add nsw i64 %23724, %23499
  %23726 = getelementptr inbounds i16, i16* %blur_x917, i64 %23725
  %23727 = bitcast i16* %23726 to <16 x i16>*
  store <16 x i16> %23723, <16 x i16>* %23727, align 2, !tbaa !399
  %23728 = shufflevector <32 x i16> %23722, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23729 = getelementptr inbounds i16, i16* %23726, i64 16
  %23730 = bitcast i16* %23729 to <16 x i16>*
  store <16 x i16> %23728, <16 x i16>* %23730, align 2, !tbaa !399
  br label %"consume blur_x1268"

"consume blur_x1268":                             ; preds = %"for blur_y.s0.x.x.rebased1257", %"produce blur_x1265"
  %23731 = sext i32 %blur_y.s0.x.v0.base.s1260 to i64
  %23732 = add nsw i64 %23502, %23731
  %23733 = getelementptr inbounds i16, i16* %blur_x917, i64 %23732
  %23734 = bitcast i16* %23733 to <16 x i16>*
  %23735 = load <16 x i16>, <16 x i16>* %23734, align 2, !tbaa !399
  %23736 = getelementptr inbounds i16, i16* %23733, i64 16
  %23737 = bitcast i16* %23736 to <16 x i16>*
  %23738 = load <16 x i16>, <16 x i16>* %23737, align 2, !tbaa !399
  %23739 = add nsw i64 %23505, %23731
  %23740 = getelementptr inbounds i16, i16* %blur_x917, i64 %23739
  %23741 = bitcast i16* %23740 to <16 x i16>*
  %23742 = load <16 x i16>, <16 x i16>* %23741, align 2, !tbaa !399
  %23743 = getelementptr inbounds i16, i16* %23740, i64 16
  %23744 = bitcast i16* %23743 to <16 x i16>*
  %23745 = load <16 x i16>, <16 x i16>* %23744, align 2, !tbaa !399
  %23746 = add nsw i64 %23508, %23731
  %23747 = getelementptr inbounds i16, i16* %blur_x917, i64 %23746
  %23748 = bitcast i16* %23747 to <16 x i16>*
  %23749 = load <16 x i16>, <16 x i16>* %23748, align 2, !tbaa !399
  %23750 = getelementptr inbounds i16, i16* %23747, i64 16
  %23751 = bitcast i16* %23750 to <16 x i16>*
  %23752 = load <16 x i16>, <16 x i16>* %23751, align 2, !tbaa !399
  %23753 = add nsw i64 %23511, %23731
  %23754 = getelementptr inbounds i16, i16* %blur_x917, i64 %23753
  %23755 = bitcast i16* %23754 to <16 x i16>*
  %23756 = load <16 x i16>, <16 x i16>* %23755, align 2, !tbaa !399
  %23757 = getelementptr inbounds i16, i16* %23754, i64 16
  %23758 = bitcast i16* %23757 to <16 x i16>*
  %23759 = load <16 x i16>, <16 x i16>* %23758, align 2, !tbaa !399
  %23760 = add nsw i64 %23514, %23731
  %23761 = getelementptr inbounds i16, i16* %blur_x917, i64 %23760
  %23762 = bitcast i16* %23761 to <16 x i16>*
  %23763 = load <16 x i16>, <16 x i16>* %23762, align 2, !tbaa !399
  %23764 = getelementptr inbounds i16, i16* %23761, i64 16
  %23765 = bitcast i16* %23764 to <16 x i16>*
  %23766 = load <16 x i16>, <16 x i16>* %23765, align 2, !tbaa !399
  %23767 = add nsw i64 %23517, %23731
  %23768 = getelementptr inbounds i16, i16* %blur_x917, i64 %23767
  %23769 = bitcast i16* %23768 to <16 x i16>*
  %23770 = load <16 x i16>, <16 x i16>* %23769, align 2, !tbaa !399
  %23771 = getelementptr inbounds i16, i16* %23768, i64 16
  %23772 = bitcast i16* %23771 to <16 x i16>*
  %23773 = load <16 x i16>, <16 x i16>* %23772, align 2, !tbaa !399
  %23774 = add nsw i64 %23520, %23731
  %23775 = getelementptr inbounds i16, i16* %blur_x917, i64 %23774
  %23776 = bitcast i16* %23775 to <16 x i16>*
  %23777 = load <16 x i16>, <16 x i16>* %23776, align 2, !tbaa !399
  %23778 = getelementptr inbounds i16, i16* %23775, i64 16
  %23779 = bitcast i16* %23778 to <16 x i16>*
  %23780 = load <16 x i16>, <16 x i16>* %23779, align 2, !tbaa !399
  %23781 = add <16 x i16> %23742, %23735
  %23782 = add <16 x i16> %23781, %23749
  %23783 = add <16 x i16> %23782, %23756
  %23784 = add <16 x i16> %23783, %23763
  %23785 = add <16 x i16> %23784, %23770
  %23786 = add <16 x i16> %23785, %23777
  %23787 = add <16 x i16> %23745, %23738
  %23788 = add <16 x i16> %23787, %23752
  %23789 = add <16 x i16> %23788, %23759
  %23790 = add <16 x i16> %23789, %23766
  %23791 = add <16 x i16> %23790, %23773
  %23792 = add <16 x i16> %23791, %23780
  %23793 = shufflevector <16 x i16> %23786, <16 x i16> %23792, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23794 = udiv <32 x i16> %23793, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %23795 = shufflevector <32 x i16> %23794, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23796 = add nsw i64 %23524, %23731
  %23797 = getelementptr inbounds i16, i16* %267, i64 %23796
  %23798 = bitcast i16* %23797 to <16 x i16>*
  store <16 x i16> %23795, <16 x i16>* %23798, align 2, !tbaa !401
  %23799 = shufflevector <32 x i16> %23794, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23800 = getelementptr inbounds i16, i16* %23797, i64 16
  %23801 = bitcast i16* %23800 to <16 x i16>*
  store <16 x i16> %23799, <16 x i16>* %23801, align 2, !tbaa !401
  %23802 = add nuw nsw i32 %blur_y.s0.x.x.rebased1259, 1
  %.not2756 = icmp eq i32 %23802, %t1727936
  br i1 %.not2756, label %"end for blur_y.s0.x.x.rebased1258", label %"for blur_y.s0.x.x.rebased1257"

after_bb1269:                                     ; preds = %"end for blur_y.s0.x.x.rebased1258", %"produce blur_x1272"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1284.preheader", label %"end for blur_y.s0.x.x.rebased1285", !prof !386

"for blur_y.s0.x.x.rebased1284.preheader":        ; preds = %after_bb1269
  %23803 = sext i32 %t1738982 to i64
  %23804 = zext i32 %.pre-phi3689 to i64
  %23805 = mul nsw i64 %23804, %353
  %23806 = sub nsw i64 %23805, %302
  %23807 = zext i32 %.pre-phi3685 to i64
  %23808 = mul nsw i64 %23807, %353
  %23809 = sub nsw i64 %23808, %302
  %23810 = zext i32 %.pre-phi3693 to i64
  %23811 = mul nsw i64 %23810, %353
  %23812 = sub nsw i64 %23811, %302
  %23813 = zext i32 %.pre-phi3699 to i64
  %23814 = mul nsw i64 %23813, %353
  %23815 = sub nsw i64 %23814, %302
  %23816 = zext i32 %.pre-phi3669 to i64
  %23817 = mul nsw i64 %23816, %353
  %23818 = sub nsw i64 %23817, %302
  %23819 = zext i32 %.pre-phi3677 to i64
  %23820 = mul nsw i64 %23819, %353
  %23821 = sub nsw i64 %23820, %302
  %23822 = zext i32 %.pre-phi3673 to i64
  %23823 = mul nsw i64 %23822, %353
  %23824 = sub nsw i64 %23823, %302
  %23825 = sext i32 %a393 to i64
  %23826 = add nsw i64 %23825, 4
  %23827 = mul nsw i64 %23826, %350
  %23828 = add nsw i64 %23827, %354
  br label %"for blur_y.s0.x.x.rebased1284"

"produce blur_x1272":                             ; preds = %"end for blur_y.s0.x.x.rebased1258"
  %23829 = getelementptr inbounds i16, i16* %read_input860, i64 %375
  %23830 = getelementptr inbounds i16, i16* %23829, i64 -31
  %23831 = bitcast i16* %23830 to <16 x i16>*
  %23832 = load <16 x i16>, <16 x i16>* %23831, align 2, !tbaa !396
  %23833 = getelementptr inbounds i16, i16* %23829, i64 -15
  %23834 = bitcast i16* %23833 to <16 x i16>*
  %23835 = load <16 x i16>, <16 x i16>* %23834, align 2, !tbaa !396
  %23836 = getelementptr inbounds i16, i16* %23829, i64 -32
  %23837 = bitcast i16* %23836 to <16 x i16>*
  %23838 = load <16 x i16>, <16 x i16>* %23837, align 2, !tbaa !396
  %23839 = getelementptr inbounds i16, i16* %23829, i64 -16
  %23840 = bitcast i16* %23839 to <16 x i16>*
  %23841 = load <16 x i16>, <16 x i16>* %23840, align 2, !tbaa !396
  %23842 = getelementptr inbounds i16, i16* %23829, i64 -30
  %23843 = bitcast i16* %23842 to <16 x i16>*
  %23844 = load <16 x i16>, <16 x i16>* %23843, align 2, !tbaa !396
  %23845 = getelementptr inbounds i16, i16* %23829, i64 -14
  %23846 = bitcast i16* %23845 to <16 x i16>*
  %23847 = load <16 x i16>, <16 x i16>* %23846, align 2, !tbaa !396
  %23848 = getelementptr inbounds i16, i16* %23829, i64 -29
  %23849 = bitcast i16* %23848 to <16 x i16>*
  %23850 = load <16 x i16>, <16 x i16>* %23849, align 2, !tbaa !396
  %23851 = getelementptr inbounds i16, i16* %23829, i64 -13
  %23852 = bitcast i16* %23851 to <16 x i16>*
  %23853 = load <16 x i16>, <16 x i16>* %23852, align 2, !tbaa !396
  %23854 = getelementptr inbounds i16, i16* %23829, i64 -28
  %23855 = bitcast i16* %23854 to <16 x i16>*
  %23856 = load <16 x i16>, <16 x i16>* %23855, align 2, !tbaa !396
  %23857 = getelementptr inbounds i16, i16* %23829, i64 -12
  %23858 = bitcast i16* %23857 to <16 x i16>*
  %23859 = load <16 x i16>, <16 x i16>* %23858, align 2, !tbaa !396
  %23860 = getelementptr inbounds i16, i16* %23829, i64 -26
  %23861 = bitcast i16* %23860 to <16 x i16>*
  %23862 = load <16 x i16>, <16 x i16>* %23861, align 2, !tbaa !396
  %23863 = getelementptr inbounds i16, i16* %23829, i64 -10
  %23864 = bitcast i16* %23863 to <16 x i16>*
  %23865 = load <16 x i16>, <16 x i16>* %23864, align 2, !tbaa !396
  %23866 = getelementptr inbounds i16, i16* %23829, i64 -27
  %23867 = bitcast i16* %23866 to <16 x i16>*
  %23868 = load <16 x i16>, <16 x i16>* %23867, align 2, !tbaa !396
  %23869 = getelementptr inbounds i16, i16* %23829, i64 -11
  %23870 = bitcast i16* %23869 to <16 x i16>*
  %23871 = load <16 x i16>, <16 x i16>* %23870, align 2, !tbaa !396
  %23872 = add <16 x i16> %23838, %23832
  %23873 = add <16 x i16> %23872, %23844
  %23874 = add <16 x i16> %23873, %23850
  %23875 = add <16 x i16> %23874, %23856
  %23876 = add <16 x i16> %23875, %23862
  %23877 = add <16 x i16> %23876, %23868
  %23878 = add <16 x i16> %23841, %23835
  %23879 = add <16 x i16> %23878, %23847
  %23880 = add <16 x i16> %23879, %23853
  %23881 = add <16 x i16> %23880, %23859
  %23882 = add <16 x i16> %23881, %23865
  %23883 = add <16 x i16> %23882, %23871
  %23884 = shufflevector <16 x i16> %23877, <16 x i16> %23883, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23885 = udiv <32 x i16> %23884, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %23886 = shufflevector <32 x i16> %23885, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23887 = zext i32 %.pre-phi3677 to i64
  %23888 = mul nsw i64 %303, %23887
  %23889 = add nsw i64 %305, %23888
  %23890 = getelementptr inbounds i16, i16* %blur_x917, i64 %23889
  %23891 = getelementptr inbounds i16, i16* %23890, i64 -32
  %23892 = bitcast i16* %23891 to <16 x i16>*
  store <16 x i16> %23886, <16 x i16>* %23892, align 2, !tbaa !399
  %23893 = shufflevector <32 x i16> %23885, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23894 = getelementptr inbounds i16, i16* %23890, i64 -16
  %23895 = bitcast i16* %23894 to <16 x i16>*
  store <16 x i16> %23893, <16 x i16>* %23895, align 2, !tbaa !399
  %23896 = zext i32 %.pre-phi3689 to i64
  %23897 = mul nsw i64 %23896, %349
  %23898 = add nsw i64 %23897, %300
  %23899 = getelementptr inbounds i16, i16* %blur_x917, i64 %23898
  %23900 = getelementptr inbounds i16, i16* %23899, i64 -32
  %23901 = bitcast i16* %23900 to <16 x i16>*
  %23902 = load <16 x i16>, <16 x i16>* %23901, align 2, !tbaa !399
  %23903 = getelementptr inbounds i16, i16* %23899, i64 -16
  %23904 = bitcast i16* %23903 to <16 x i16>*
  %23905 = load <16 x i16>, <16 x i16>* %23904, align 2, !tbaa !399
  %23906 = zext i32 %.pre-phi3685 to i64
  %23907 = mul nsw i64 %23906, %349
  %23908 = add nsw i64 %23907, %300
  %23909 = getelementptr inbounds i16, i16* %blur_x917, i64 %23908
  %23910 = getelementptr inbounds i16, i16* %23909, i64 -32
  %23911 = bitcast i16* %23910 to <16 x i16>*
  %23912 = load <16 x i16>, <16 x i16>* %23911, align 2, !tbaa !399
  %23913 = getelementptr inbounds i16, i16* %23909, i64 -16
  %23914 = bitcast i16* %23913 to <16 x i16>*
  %23915 = load <16 x i16>, <16 x i16>* %23914, align 2, !tbaa !399
  %23916 = zext i32 %.pre-phi3693 to i64
  %23917 = mul nsw i64 %23916, %349
  %23918 = add nsw i64 %23917, %300
  %23919 = getelementptr inbounds i16, i16* %blur_x917, i64 %23918
  %23920 = getelementptr inbounds i16, i16* %23919, i64 -32
  %23921 = bitcast i16* %23920 to <16 x i16>*
  %23922 = load <16 x i16>, <16 x i16>* %23921, align 2, !tbaa !399
  %23923 = getelementptr inbounds i16, i16* %23919, i64 -16
  %23924 = bitcast i16* %23923 to <16 x i16>*
  %23925 = load <16 x i16>, <16 x i16>* %23924, align 2, !tbaa !399
  %23926 = zext i32 %.pre-phi3699 to i64
  %23927 = mul nsw i64 %23926, %349
  %23928 = add nsw i64 %23927, %300
  %23929 = getelementptr inbounds i16, i16* %blur_x917, i64 %23928
  %23930 = getelementptr inbounds i16, i16* %23929, i64 -32
  %23931 = bitcast i16* %23930 to <16 x i16>*
  %23932 = load <16 x i16>, <16 x i16>* %23931, align 2, !tbaa !399
  %23933 = getelementptr inbounds i16, i16* %23929, i64 -16
  %23934 = bitcast i16* %23933 to <16 x i16>*
  %23935 = load <16 x i16>, <16 x i16>* %23934, align 2, !tbaa !399
  %23936 = zext i32 %.pre-phi3669 to i64
  %23937 = mul nsw i64 %23936, %349
  %23938 = add nsw i64 %23937, %300
  %23939 = getelementptr inbounds i16, i16* %blur_x917, i64 %23938
  %23940 = getelementptr inbounds i16, i16* %23939, i64 -32
  %23941 = bitcast i16* %23940 to <16 x i16>*
  %23942 = load <16 x i16>, <16 x i16>* %23941, align 2, !tbaa !399
  %23943 = getelementptr inbounds i16, i16* %23939, i64 -16
  %23944 = bitcast i16* %23943 to <16 x i16>*
  %23945 = load <16 x i16>, <16 x i16>* %23944, align 2, !tbaa !399
  %23946 = mul nsw i64 %23887, %349
  %23947 = add nsw i64 %23946, %300
  %23948 = getelementptr inbounds i16, i16* %blur_x917, i64 %23947
  %23949 = getelementptr inbounds i16, i16* %23948, i64 -32
  %23950 = bitcast i16* %23949 to <16 x i16>*
  %23951 = load <16 x i16>, <16 x i16>* %23950, align 2, !tbaa !399
  %23952 = getelementptr inbounds i16, i16* %23948, i64 -16
  %23953 = bitcast i16* %23952 to <16 x i16>*
  %23954 = load <16 x i16>, <16 x i16>* %23953, align 2, !tbaa !399
  %23955 = zext i32 %.pre-phi3673 to i64
  %23956 = mul nsw i64 %23955, %349
  %23957 = add nsw i64 %23956, %300
  %23958 = getelementptr inbounds i16, i16* %blur_x917, i64 %23957
  %23959 = getelementptr inbounds i16, i16* %23958, i64 -32
  %23960 = bitcast i16* %23959 to <16 x i16>*
  %23961 = load <16 x i16>, <16 x i16>* %23960, align 2, !tbaa !399
  %23962 = getelementptr inbounds i16, i16* %23958, i64 -16
  %23963 = bitcast i16* %23962 to <16 x i16>*
  %23964 = load <16 x i16>, <16 x i16>* %23963, align 2, !tbaa !399
  %23965 = add <16 x i16> %23912, %23902
  %23966 = add <16 x i16> %23965, %23922
  %23967 = add <16 x i16> %23966, %23932
  %23968 = add <16 x i16> %23967, %23942
  %23969 = add <16 x i16> %23968, %23951
  %23970 = add <16 x i16> %23969, %23961
  %23971 = add <16 x i16> %23915, %23905
  %23972 = add <16 x i16> %23971, %23925
  %23973 = add <16 x i16> %23972, %23935
  %23974 = add <16 x i16> %23973, %23945
  %23975 = add <16 x i16> %23974, %23954
  %23976 = add <16 x i16> %23975, %23964
  %23977 = shufflevector <16 x i16> %23970, <16 x i16> %23976, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23978 = udiv <32 x i16> %23977, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %23979 = shufflevector <32 x i16> %23978, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23980 = sext i32 %a393 to i64
  %23981 = add nsw i64 %23980, 4
  %23982 = mul nsw i64 %23981, %350
  %23983 = add nsw i64 %352, %23982
  %23984 = getelementptr inbounds i16, i16* %267, i64 %23983
  %23985 = getelementptr inbounds i16, i16* %23984, i64 -32
  %23986 = bitcast i16* %23985 to <16 x i16>*
  store <16 x i16> %23979, <16 x i16>* %23986, align 2, !tbaa !401
  %23987 = shufflevector <32 x i16> %23978, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23988 = getelementptr inbounds i16, i16* %23984, i64 -16
  %23989 = bitcast i16* %23988 to <16 x i16>*
  store <16 x i16> %23987, <16 x i16>* %23989, align 2, !tbaa !401
  br label %after_bb1269

"for blur_y.s0.x.x.rebased1284":                  ; preds = %"for blur_y.s0.x.x.rebased1284.preheader", %"consume blur_x1292"
  %indvars.iv3516 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1284.preheader" ], [ %indvars.iv.next3517, %"consume blur_x1292" ]
  %23990 = add nsw i64 %indvars.iv3516, %307
  %23991 = icmp slt i64 %23990, 1
  %23992 = trunc i64 %23990 to i32
  %23993 = shl nsw i32 %23992, 5
  %23994 = icmp sgt i32 %202, %23993
  %23995 = or i1 %23991, %23994
  br i1 %23995, label %"produce blur_x1290", label %"for blur_y.s0.x.x.rebased1284.consume blur_x1292_crit_edge"

"for blur_y.s0.x.x.rebased1284.consume blur_x1292_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1284"
  %.pre3706 = shl nsw i64 %23990, 5
  br label %"consume blur_x1292"

"end for blur_y.s0.x.x.rebased1285":              ; preds = %"consume blur_x1292", %after_bb1269
  br i1 %308, label %"for blur_y.s0.x.x.rebased1300.preheader", label %"end for blur_y.s0.x.x.rebased1301", !prof !386

"for blur_y.s0.x.x.rebased1300.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1285"
  %23996 = sext i32 %t1738982 to i64
  %23997 = zext i32 %.pre-phi3689 to i64
  %23998 = mul nsw i64 %23997, %353
  %23999 = sub nsw i64 %23998, %302
  %24000 = zext i32 %.pre-phi3685 to i64
  %24001 = mul nsw i64 %24000, %353
  %24002 = sub nsw i64 %24001, %302
  %24003 = zext i32 %.pre-phi3693 to i64
  %24004 = mul nsw i64 %24003, %353
  %24005 = sub nsw i64 %24004, %302
  %24006 = zext i32 %.pre-phi3699 to i64
  %24007 = mul nsw i64 %24006, %353
  %24008 = sub nsw i64 %24007, %302
  %24009 = zext i32 %.pre-phi3669 to i64
  %24010 = mul nsw i64 %24009, %353
  %24011 = sub nsw i64 %24010, %302
  %24012 = zext i32 %.pre-phi3677 to i64
  %24013 = mul nsw i64 %24012, %353
  %24014 = sub nsw i64 %24013, %302
  %24015 = zext i32 %.pre-phi3673 to i64
  %24016 = mul nsw i64 %24015, %353
  %24017 = sub nsw i64 %24016, %302
  %24018 = sext i32 %a393 to i64
  %24019 = add nsw i64 %24018, 4
  %24020 = mul nsw i64 %24019, %350
  %24021 = add nsw i64 %24020, %354
  br label %"for blur_y.s0.x.x.rebased1300"

"produce blur_x1290":                             ; preds = %"for blur_y.s0.x.x.rebased1284"
  %t8161291 = add nsw i32 %377, %23993
  %24022 = sext i32 %t8161291 to i64
  %24023 = getelementptr inbounds i16, i16* %read_input860, i64 %24022
  %24024 = getelementptr inbounds i16, i16* %24023, i64 1
  %24025 = bitcast i16* %24024 to <16 x i16>*
  %24026 = load <16 x i16>, <16 x i16>* %24025, align 2, !tbaa !396
  %24027 = getelementptr inbounds i16, i16* %24023, i64 17
  %24028 = bitcast i16* %24027 to <16 x i16>*
  %24029 = load <16 x i16>, <16 x i16>* %24028, align 2, !tbaa !396
  %24030 = bitcast i16* %24023 to <16 x i16>*
  %24031 = load <16 x i16>, <16 x i16>* %24030, align 2, !tbaa !396
  %24032 = getelementptr inbounds i16, i16* %24023, i64 16
  %24033 = bitcast i16* %24032 to <16 x i16>*
  %24034 = load <16 x i16>, <16 x i16>* %24033, align 2, !tbaa !396
  %24035 = getelementptr inbounds i16, i16* %24023, i64 2
  %24036 = bitcast i16* %24035 to <16 x i16>*
  %24037 = load <16 x i16>, <16 x i16>* %24036, align 2, !tbaa !396
  %24038 = getelementptr inbounds i16, i16* %24023, i64 18
  %24039 = bitcast i16* %24038 to <16 x i16>*
  %24040 = load <16 x i16>, <16 x i16>* %24039, align 2, !tbaa !396
  %24041 = getelementptr inbounds i16, i16* %24023, i64 3
  %24042 = bitcast i16* %24041 to <16 x i16>*
  %24043 = load <16 x i16>, <16 x i16>* %24042, align 2, !tbaa !396
  %24044 = getelementptr inbounds i16, i16* %24023, i64 19
  %24045 = bitcast i16* %24044 to <16 x i16>*
  %24046 = load <16 x i16>, <16 x i16>* %24045, align 2, !tbaa !396
  %24047 = getelementptr inbounds i16, i16* %24023, i64 4
  %24048 = bitcast i16* %24047 to <16 x i16>*
  %24049 = load <16 x i16>, <16 x i16>* %24048, align 2, !tbaa !396
  %24050 = getelementptr inbounds i16, i16* %24023, i64 20
  %24051 = bitcast i16* %24050 to <16 x i16>*
  %24052 = load <16 x i16>, <16 x i16>* %24051, align 2, !tbaa !396
  %24053 = getelementptr inbounds i16, i16* %24023, i64 6
  %24054 = bitcast i16* %24053 to <16 x i16>*
  %24055 = load <16 x i16>, <16 x i16>* %24054, align 2, !tbaa !396
  %24056 = getelementptr inbounds i16, i16* %24023, i64 22
  %24057 = bitcast i16* %24056 to <16 x i16>*
  %24058 = load <16 x i16>, <16 x i16>* %24057, align 2, !tbaa !396
  %24059 = getelementptr inbounds i16, i16* %24023, i64 5
  %24060 = bitcast i16* %24059 to <16 x i16>*
  %24061 = load <16 x i16>, <16 x i16>* %24060, align 2, !tbaa !396
  %24062 = getelementptr inbounds i16, i16* %24023, i64 21
  %24063 = bitcast i16* %24062 to <16 x i16>*
  %24064 = load <16 x i16>, <16 x i16>* %24063, align 2, !tbaa !396
  %24065 = add <16 x i16> %24031, %24026
  %24066 = add <16 x i16> %24065, %24037
  %24067 = add <16 x i16> %24066, %24043
  %24068 = add <16 x i16> %24067, %24049
  %24069 = add <16 x i16> %24068, %24055
  %24070 = add <16 x i16> %24069, %24061
  %24071 = add <16 x i16> %24034, %24029
  %24072 = add <16 x i16> %24071, %24040
  %24073 = add <16 x i16> %24072, %24046
  %24074 = add <16 x i16> %24073, %24052
  %24075 = add <16 x i16> %24074, %24058
  %24076 = add <16 x i16> %24075, %24064
  %24077 = shufflevector <16 x i16> %24070, <16 x i16> %24076, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24078 = udiv <32 x i16> %24077, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %24079 = shufflevector <32 x i16> %24078, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24080 = shl nsw i64 %23990, 5
  %24081 = add nsw i64 %24080, %23803
  %24082 = getelementptr inbounds i16, i16* %blur_x917, i64 %24081
  %24083 = bitcast i16* %24082 to <16 x i16>*
  store <16 x i16> %24079, <16 x i16>* %24083, align 2, !tbaa !399
  %24084 = shufflevector <32 x i16> %24078, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24085 = getelementptr inbounds i16, i16* %24082, i64 16
  %24086 = bitcast i16* %24085 to <16 x i16>*
  store <16 x i16> %24084, <16 x i16>* %24086, align 2, !tbaa !399
  br label %"consume blur_x1292"

"consume blur_x1292":                             ; preds = %"for blur_y.s0.x.x.rebased1284.consume blur_x1292_crit_edge", %"produce blur_x1290"
  %.pre-phi3707 = phi i64 [ %.pre3706, %"for blur_y.s0.x.x.rebased1284.consume blur_x1292_crit_edge" ], [ %24080, %"produce blur_x1290" ]
  %24087 = add nsw i64 %23806, %.pre-phi3707
  %24088 = getelementptr inbounds i16, i16* %blur_x917, i64 %24087
  %24089 = bitcast i16* %24088 to <16 x i16>*
  %24090 = load <16 x i16>, <16 x i16>* %24089, align 2, !tbaa !399
  %24091 = getelementptr inbounds i16, i16* %24088, i64 16
  %24092 = bitcast i16* %24091 to <16 x i16>*
  %24093 = load <16 x i16>, <16 x i16>* %24092, align 2, !tbaa !399
  %24094 = add nsw i64 %23809, %.pre-phi3707
  %24095 = getelementptr inbounds i16, i16* %blur_x917, i64 %24094
  %24096 = bitcast i16* %24095 to <16 x i16>*
  %24097 = load <16 x i16>, <16 x i16>* %24096, align 2, !tbaa !399
  %24098 = getelementptr inbounds i16, i16* %24095, i64 16
  %24099 = bitcast i16* %24098 to <16 x i16>*
  %24100 = load <16 x i16>, <16 x i16>* %24099, align 2, !tbaa !399
  %24101 = add nsw i64 %23812, %.pre-phi3707
  %24102 = getelementptr inbounds i16, i16* %blur_x917, i64 %24101
  %24103 = bitcast i16* %24102 to <16 x i16>*
  %24104 = load <16 x i16>, <16 x i16>* %24103, align 2, !tbaa !399
  %24105 = getelementptr inbounds i16, i16* %24102, i64 16
  %24106 = bitcast i16* %24105 to <16 x i16>*
  %24107 = load <16 x i16>, <16 x i16>* %24106, align 2, !tbaa !399
  %24108 = add nsw i64 %23815, %.pre-phi3707
  %24109 = getelementptr inbounds i16, i16* %blur_x917, i64 %24108
  %24110 = bitcast i16* %24109 to <16 x i16>*
  %24111 = load <16 x i16>, <16 x i16>* %24110, align 2, !tbaa !399
  %24112 = getelementptr inbounds i16, i16* %24109, i64 16
  %24113 = bitcast i16* %24112 to <16 x i16>*
  %24114 = load <16 x i16>, <16 x i16>* %24113, align 2, !tbaa !399
  %24115 = add nsw i64 %23818, %.pre-phi3707
  %24116 = getelementptr inbounds i16, i16* %blur_x917, i64 %24115
  %24117 = bitcast i16* %24116 to <16 x i16>*
  %24118 = load <16 x i16>, <16 x i16>* %24117, align 2, !tbaa !399
  %24119 = getelementptr inbounds i16, i16* %24116, i64 16
  %24120 = bitcast i16* %24119 to <16 x i16>*
  %24121 = load <16 x i16>, <16 x i16>* %24120, align 2, !tbaa !399
  %24122 = add nsw i64 %23821, %.pre-phi3707
  %24123 = getelementptr inbounds i16, i16* %blur_x917, i64 %24122
  %24124 = bitcast i16* %24123 to <16 x i16>*
  %24125 = load <16 x i16>, <16 x i16>* %24124, align 2, !tbaa !399
  %24126 = getelementptr inbounds i16, i16* %24123, i64 16
  %24127 = bitcast i16* %24126 to <16 x i16>*
  %24128 = load <16 x i16>, <16 x i16>* %24127, align 2, !tbaa !399
  %24129 = add nsw i64 %23824, %.pre-phi3707
  %24130 = getelementptr inbounds i16, i16* %blur_x917, i64 %24129
  %24131 = bitcast i16* %24130 to <16 x i16>*
  %24132 = load <16 x i16>, <16 x i16>* %24131, align 2, !tbaa !399
  %24133 = getelementptr inbounds i16, i16* %24130, i64 16
  %24134 = bitcast i16* %24133 to <16 x i16>*
  %24135 = load <16 x i16>, <16 x i16>* %24134, align 2, !tbaa !399
  %24136 = add <16 x i16> %24097, %24090
  %24137 = add <16 x i16> %24136, %24104
  %24138 = add <16 x i16> %24137, %24111
  %24139 = add <16 x i16> %24138, %24118
  %24140 = add <16 x i16> %24139, %24125
  %24141 = add <16 x i16> %24140, %24132
  %24142 = add <16 x i16> %24100, %24093
  %24143 = add <16 x i16> %24142, %24107
  %24144 = add <16 x i16> %24143, %24114
  %24145 = add <16 x i16> %24144, %24121
  %24146 = add <16 x i16> %24145, %24128
  %24147 = add <16 x i16> %24146, %24135
  %24148 = shufflevector <16 x i16> %24141, <16 x i16> %24147, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24149 = udiv <32 x i16> %24148, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %24150 = shufflevector <32 x i16> %24149, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24151 = add nsw i64 %23828, %.pre-phi3707
  %24152 = getelementptr inbounds i16, i16* %267, i64 %24151
  %24153 = bitcast i16* %24152 to <16 x i16>*
  store <16 x i16> %24150, <16 x i16>* %24153, align 2, !tbaa !401
  %24154 = shufflevector <32 x i16> %24149, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24155 = getelementptr inbounds i16, i16* %24152, i64 16
  %24156 = bitcast i16* %24155 to <16 x i16>*
  store <16 x i16> %24154, <16 x i16>* %24156, align 2, !tbaa !401
  %indvars.iv.next3517 = add nuw nsw i64 %indvars.iv3516, 1
  %.not2753 = icmp eq i64 %indvars.iv.next3517, %546
  br i1 %.not2753, label %"end for blur_y.s0.x.x.rebased1285", label %"for blur_y.s0.x.x.rebased1284"

"for blur_y.s0.x.x.rebased1300":                  ; preds = %"for blur_y.s0.x.x.rebased1300.preheader", %"consume blur_x1311"
  %blur_y.s0.x.x.rebased1302 = phi i32 [ %24299, %"consume blur_x1311" ], [ 0, %"for blur_y.s0.x.x.rebased1300.preheader" ]
  %24157 = add nsw i32 %blur_y.s0.x.x.rebased1302, %t1670852
  %a2231 = shl nsw i32 %24157, 5
  %24158 = icmp sgt i32 %t1691, %a2231
  %blur_y.s0.x.v0.base.s1303 = select i1 %24158, i32 %a2231, i32 %t1691
  %24159 = icmp slt i32 %24157, 1
  %24160 = icmp sgt i32 %202, %a2231
  %24161 = or i1 %24159, %24160
  br i1 %24161, label %"produce blur_x1308", label %"consume blur_x1311"

"end for blur_y.s0.x.x.rebased1301":              ; preds = %"consume blur_x1311", %"end for blur_y.s0.x.x.rebased1285"
  br i1 %233, label %"produce blur_x1315", label %after_bb1312

"produce blur_x1308":                             ; preds = %"for blur_y.s0.x.x.rebased1300"
  %24162 = icmp slt i32 %blur_y.s0.x.v0.base.s1303, %202
  %blur_x.s0.x.v1.base.s1309 = select i1 %24162, i32 %blur_y.s0.x.v0.base.s1303, i32 %202
  %t8211310 = add nsw i32 %377, %blur_x.s0.x.v1.base.s1309
  %24163 = sext i32 %t8211310 to i64
  %24164 = getelementptr inbounds i16, i16* %read_input860, i64 %24163
  %24165 = getelementptr inbounds i16, i16* %24164, i64 1
  %24166 = bitcast i16* %24165 to <16 x i16>*
  %24167 = load <16 x i16>, <16 x i16>* %24166, align 2, !tbaa !396
  %24168 = getelementptr inbounds i16, i16* %24164, i64 17
  %24169 = bitcast i16* %24168 to <16 x i16>*
  %24170 = load <16 x i16>, <16 x i16>* %24169, align 2, !tbaa !396
  %24171 = bitcast i16* %24164 to <16 x i16>*
  %24172 = load <16 x i16>, <16 x i16>* %24171, align 2, !tbaa !396
  %24173 = getelementptr inbounds i16, i16* %24164, i64 16
  %24174 = bitcast i16* %24173 to <16 x i16>*
  %24175 = load <16 x i16>, <16 x i16>* %24174, align 2, !tbaa !396
  %24176 = getelementptr inbounds i16, i16* %24164, i64 2
  %24177 = bitcast i16* %24176 to <16 x i16>*
  %24178 = load <16 x i16>, <16 x i16>* %24177, align 2, !tbaa !396
  %24179 = getelementptr inbounds i16, i16* %24164, i64 18
  %24180 = bitcast i16* %24179 to <16 x i16>*
  %24181 = load <16 x i16>, <16 x i16>* %24180, align 2, !tbaa !396
  %24182 = getelementptr inbounds i16, i16* %24164, i64 3
  %24183 = bitcast i16* %24182 to <16 x i16>*
  %24184 = load <16 x i16>, <16 x i16>* %24183, align 2, !tbaa !396
  %24185 = getelementptr inbounds i16, i16* %24164, i64 19
  %24186 = bitcast i16* %24185 to <16 x i16>*
  %24187 = load <16 x i16>, <16 x i16>* %24186, align 2, !tbaa !396
  %24188 = getelementptr inbounds i16, i16* %24164, i64 4
  %24189 = bitcast i16* %24188 to <16 x i16>*
  %24190 = load <16 x i16>, <16 x i16>* %24189, align 2, !tbaa !396
  %24191 = getelementptr inbounds i16, i16* %24164, i64 20
  %24192 = bitcast i16* %24191 to <16 x i16>*
  %24193 = load <16 x i16>, <16 x i16>* %24192, align 2, !tbaa !396
  %24194 = getelementptr inbounds i16, i16* %24164, i64 6
  %24195 = bitcast i16* %24194 to <16 x i16>*
  %24196 = load <16 x i16>, <16 x i16>* %24195, align 2, !tbaa !396
  %24197 = getelementptr inbounds i16, i16* %24164, i64 22
  %24198 = bitcast i16* %24197 to <16 x i16>*
  %24199 = load <16 x i16>, <16 x i16>* %24198, align 2, !tbaa !396
  %24200 = getelementptr inbounds i16, i16* %24164, i64 5
  %24201 = bitcast i16* %24200 to <16 x i16>*
  %24202 = load <16 x i16>, <16 x i16>* %24201, align 2, !tbaa !396
  %24203 = getelementptr inbounds i16, i16* %24164, i64 21
  %24204 = bitcast i16* %24203 to <16 x i16>*
  %24205 = load <16 x i16>, <16 x i16>* %24204, align 2, !tbaa !396
  %24206 = add <16 x i16> %24172, %24167
  %24207 = add <16 x i16> %24206, %24178
  %24208 = add <16 x i16> %24207, %24184
  %24209 = add <16 x i16> %24208, %24190
  %24210 = add <16 x i16> %24209, %24196
  %24211 = add <16 x i16> %24210, %24202
  %24212 = add <16 x i16> %24175, %24170
  %24213 = add <16 x i16> %24212, %24181
  %24214 = add <16 x i16> %24213, %24187
  %24215 = add <16 x i16> %24214, %24193
  %24216 = add <16 x i16> %24215, %24199
  %24217 = add <16 x i16> %24216, %24205
  %24218 = shufflevector <16 x i16> %24211, <16 x i16> %24217, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24219 = udiv <32 x i16> %24218, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %24220 = shufflevector <32 x i16> %24219, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24221 = sext i32 %blur_x.s0.x.v1.base.s1309 to i64
  %24222 = add nsw i64 %24221, %23996
  %24223 = getelementptr inbounds i16, i16* %blur_x917, i64 %24222
  %24224 = bitcast i16* %24223 to <16 x i16>*
  store <16 x i16> %24220, <16 x i16>* %24224, align 2, !tbaa !399
  %24225 = shufflevector <32 x i16> %24219, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24226 = getelementptr inbounds i16, i16* %24223, i64 16
  %24227 = bitcast i16* %24226 to <16 x i16>*
  store <16 x i16> %24225, <16 x i16>* %24227, align 2, !tbaa !399
  br label %"consume blur_x1311"

"consume blur_x1311":                             ; preds = %"for blur_y.s0.x.x.rebased1300", %"produce blur_x1308"
  %24228 = sext i32 %blur_y.s0.x.v0.base.s1303 to i64
  %24229 = add nsw i64 %23999, %24228
  %24230 = getelementptr inbounds i16, i16* %blur_x917, i64 %24229
  %24231 = bitcast i16* %24230 to <16 x i16>*
  %24232 = load <16 x i16>, <16 x i16>* %24231, align 2, !tbaa !399
  %24233 = getelementptr inbounds i16, i16* %24230, i64 16
  %24234 = bitcast i16* %24233 to <16 x i16>*
  %24235 = load <16 x i16>, <16 x i16>* %24234, align 2, !tbaa !399
  %24236 = add nsw i64 %24002, %24228
  %24237 = getelementptr inbounds i16, i16* %blur_x917, i64 %24236
  %24238 = bitcast i16* %24237 to <16 x i16>*
  %24239 = load <16 x i16>, <16 x i16>* %24238, align 2, !tbaa !399
  %24240 = getelementptr inbounds i16, i16* %24237, i64 16
  %24241 = bitcast i16* %24240 to <16 x i16>*
  %24242 = load <16 x i16>, <16 x i16>* %24241, align 2, !tbaa !399
  %24243 = add nsw i64 %24005, %24228
  %24244 = getelementptr inbounds i16, i16* %blur_x917, i64 %24243
  %24245 = bitcast i16* %24244 to <16 x i16>*
  %24246 = load <16 x i16>, <16 x i16>* %24245, align 2, !tbaa !399
  %24247 = getelementptr inbounds i16, i16* %24244, i64 16
  %24248 = bitcast i16* %24247 to <16 x i16>*
  %24249 = load <16 x i16>, <16 x i16>* %24248, align 2, !tbaa !399
  %24250 = add nsw i64 %24008, %24228
  %24251 = getelementptr inbounds i16, i16* %blur_x917, i64 %24250
  %24252 = bitcast i16* %24251 to <16 x i16>*
  %24253 = load <16 x i16>, <16 x i16>* %24252, align 2, !tbaa !399
  %24254 = getelementptr inbounds i16, i16* %24251, i64 16
  %24255 = bitcast i16* %24254 to <16 x i16>*
  %24256 = load <16 x i16>, <16 x i16>* %24255, align 2, !tbaa !399
  %24257 = add nsw i64 %24011, %24228
  %24258 = getelementptr inbounds i16, i16* %blur_x917, i64 %24257
  %24259 = bitcast i16* %24258 to <16 x i16>*
  %24260 = load <16 x i16>, <16 x i16>* %24259, align 2, !tbaa !399
  %24261 = getelementptr inbounds i16, i16* %24258, i64 16
  %24262 = bitcast i16* %24261 to <16 x i16>*
  %24263 = load <16 x i16>, <16 x i16>* %24262, align 2, !tbaa !399
  %24264 = add nsw i64 %24014, %24228
  %24265 = getelementptr inbounds i16, i16* %blur_x917, i64 %24264
  %24266 = bitcast i16* %24265 to <16 x i16>*
  %24267 = load <16 x i16>, <16 x i16>* %24266, align 2, !tbaa !399
  %24268 = getelementptr inbounds i16, i16* %24265, i64 16
  %24269 = bitcast i16* %24268 to <16 x i16>*
  %24270 = load <16 x i16>, <16 x i16>* %24269, align 2, !tbaa !399
  %24271 = add nsw i64 %24017, %24228
  %24272 = getelementptr inbounds i16, i16* %blur_x917, i64 %24271
  %24273 = bitcast i16* %24272 to <16 x i16>*
  %24274 = load <16 x i16>, <16 x i16>* %24273, align 2, !tbaa !399
  %24275 = getelementptr inbounds i16, i16* %24272, i64 16
  %24276 = bitcast i16* %24275 to <16 x i16>*
  %24277 = load <16 x i16>, <16 x i16>* %24276, align 2, !tbaa !399
  %24278 = add <16 x i16> %24239, %24232
  %24279 = add <16 x i16> %24278, %24246
  %24280 = add <16 x i16> %24279, %24253
  %24281 = add <16 x i16> %24280, %24260
  %24282 = add <16 x i16> %24281, %24267
  %24283 = add <16 x i16> %24282, %24274
  %24284 = add <16 x i16> %24242, %24235
  %24285 = add <16 x i16> %24284, %24249
  %24286 = add <16 x i16> %24285, %24256
  %24287 = add <16 x i16> %24286, %24263
  %24288 = add <16 x i16> %24287, %24270
  %24289 = add <16 x i16> %24288, %24277
  %24290 = shufflevector <16 x i16> %24283, <16 x i16> %24289, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24291 = udiv <32 x i16> %24290, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %24292 = shufflevector <32 x i16> %24291, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24293 = add nsw i64 %24021, %24228
  %24294 = getelementptr inbounds i16, i16* %267, i64 %24293
  %24295 = bitcast i16* %24294 to <16 x i16>*
  store <16 x i16> %24292, <16 x i16>* %24295, align 2, !tbaa !401
  %24296 = shufflevector <32 x i16> %24291, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24297 = getelementptr inbounds i16, i16* %24294, i64 16
  %24298 = bitcast i16* %24297 to <16 x i16>*
  store <16 x i16> %24296, <16 x i16>* %24298, align 2, !tbaa !401
  %24299 = add nuw nsw i32 %blur_y.s0.x.x.rebased1302, 1
  %.not2752 = icmp eq i32 %24299, %t1727936
  br i1 %.not2752, label %"end for blur_y.s0.x.x.rebased1301", label %"for blur_y.s0.x.x.rebased1300"

after_bb1312:                                     ; preds = %"end for blur_y.s0.x.x.rebased1301", %"produce blur_x1315"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1327.preheader", label %"end for blur_y.s0.x.x.rebased1328", !prof !386

"for blur_y.s0.x.x.rebased1327.preheader":        ; preds = %after_bb1312
  %24300 = sext i32 %t17441012 to i64
  %24301 = zext i32 %.pre-phi3693 to i64
  %24302 = mul nsw i64 %24301, %353
  %24303 = sub nsw i64 %24302, %302
  %24304 = zext i32 %.pre-phi3689 to i64
  %24305 = mul nsw i64 %24304, %353
  %24306 = sub nsw i64 %24305, %302
  %24307 = zext i32 %.pre-phi3699 to i64
  %24308 = mul nsw i64 %24307, %353
  %24309 = sub nsw i64 %24308, %302
  %24310 = zext i32 %.pre-phi3669 to i64
  %24311 = mul nsw i64 %24310, %353
  %24312 = sub nsw i64 %24311, %302
  %24313 = zext i32 %.pre-phi3673 to i64
  %24314 = mul nsw i64 %24313, %353
  %24315 = sub nsw i64 %24314, %302
  %24316 = zext i32 %.pre-phi3681 to i64
  %24317 = mul nsw i64 %24316, %353
  %24318 = sub nsw i64 %24317, %302
  %24319 = zext i32 %.pre-phi3677 to i64
  %24320 = mul nsw i64 %24319, %353
  %24321 = sub nsw i64 %24320, %302
  %24322 = sext i32 %a393 to i64
  %24323 = add nsw i64 %24322, 5
  %24324 = mul nsw i64 %24323, %350
  %24325 = add nsw i64 %24324, %354
  br label %"for blur_y.s0.x.x.rebased1327"

"produce blur_x1315":                             ; preds = %"end for blur_y.s0.x.x.rebased1301"
  %24326 = getelementptr inbounds i16, i16* %read_input860, i64 %381
  %24327 = getelementptr inbounds i16, i16* %24326, i64 -31
  %24328 = bitcast i16* %24327 to <16 x i16>*
  %24329 = load <16 x i16>, <16 x i16>* %24328, align 2, !tbaa !396
  %24330 = getelementptr inbounds i16, i16* %24326, i64 -15
  %24331 = bitcast i16* %24330 to <16 x i16>*
  %24332 = load <16 x i16>, <16 x i16>* %24331, align 2, !tbaa !396
  %24333 = getelementptr inbounds i16, i16* %24326, i64 -32
  %24334 = bitcast i16* %24333 to <16 x i16>*
  %24335 = load <16 x i16>, <16 x i16>* %24334, align 2, !tbaa !396
  %24336 = getelementptr inbounds i16, i16* %24326, i64 -16
  %24337 = bitcast i16* %24336 to <16 x i16>*
  %24338 = load <16 x i16>, <16 x i16>* %24337, align 2, !tbaa !396
  %24339 = getelementptr inbounds i16, i16* %24326, i64 -30
  %24340 = bitcast i16* %24339 to <16 x i16>*
  %24341 = load <16 x i16>, <16 x i16>* %24340, align 2, !tbaa !396
  %24342 = getelementptr inbounds i16, i16* %24326, i64 -14
  %24343 = bitcast i16* %24342 to <16 x i16>*
  %24344 = load <16 x i16>, <16 x i16>* %24343, align 2, !tbaa !396
  %24345 = getelementptr inbounds i16, i16* %24326, i64 -29
  %24346 = bitcast i16* %24345 to <16 x i16>*
  %24347 = load <16 x i16>, <16 x i16>* %24346, align 2, !tbaa !396
  %24348 = getelementptr inbounds i16, i16* %24326, i64 -13
  %24349 = bitcast i16* %24348 to <16 x i16>*
  %24350 = load <16 x i16>, <16 x i16>* %24349, align 2, !tbaa !396
  %24351 = getelementptr inbounds i16, i16* %24326, i64 -28
  %24352 = bitcast i16* %24351 to <16 x i16>*
  %24353 = load <16 x i16>, <16 x i16>* %24352, align 2, !tbaa !396
  %24354 = getelementptr inbounds i16, i16* %24326, i64 -12
  %24355 = bitcast i16* %24354 to <16 x i16>*
  %24356 = load <16 x i16>, <16 x i16>* %24355, align 2, !tbaa !396
  %24357 = getelementptr inbounds i16, i16* %24326, i64 -26
  %24358 = bitcast i16* %24357 to <16 x i16>*
  %24359 = load <16 x i16>, <16 x i16>* %24358, align 2, !tbaa !396
  %24360 = getelementptr inbounds i16, i16* %24326, i64 -10
  %24361 = bitcast i16* %24360 to <16 x i16>*
  %24362 = load <16 x i16>, <16 x i16>* %24361, align 2, !tbaa !396
  %24363 = getelementptr inbounds i16, i16* %24326, i64 -27
  %24364 = bitcast i16* %24363 to <16 x i16>*
  %24365 = load <16 x i16>, <16 x i16>* %24364, align 2, !tbaa !396
  %24366 = getelementptr inbounds i16, i16* %24326, i64 -11
  %24367 = bitcast i16* %24366 to <16 x i16>*
  %24368 = load <16 x i16>, <16 x i16>* %24367, align 2, !tbaa !396
  %24369 = add <16 x i16> %24335, %24329
  %24370 = add <16 x i16> %24369, %24341
  %24371 = add <16 x i16> %24370, %24347
  %24372 = add <16 x i16> %24371, %24353
  %24373 = add <16 x i16> %24372, %24359
  %24374 = add <16 x i16> %24373, %24365
  %24375 = add <16 x i16> %24338, %24332
  %24376 = add <16 x i16> %24375, %24344
  %24377 = add <16 x i16> %24376, %24350
  %24378 = add <16 x i16> %24377, %24356
  %24379 = add <16 x i16> %24378, %24362
  %24380 = add <16 x i16> %24379, %24368
  %24381 = shufflevector <16 x i16> %24374, <16 x i16> %24380, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24382 = udiv <32 x i16> %24381, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %24383 = shufflevector <32 x i16> %24382, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24384 = zext i32 %.pre-phi3681 to i64
  %24385 = mul nsw i64 %303, %24384
  %24386 = add nsw i64 %305, %24385
  %24387 = getelementptr inbounds i16, i16* %blur_x917, i64 %24386
  %24388 = getelementptr inbounds i16, i16* %24387, i64 -32
  %24389 = bitcast i16* %24388 to <16 x i16>*
  store <16 x i16> %24383, <16 x i16>* %24389, align 2, !tbaa !399
  %24390 = shufflevector <32 x i16> %24382, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24391 = getelementptr inbounds i16, i16* %24387, i64 -16
  %24392 = bitcast i16* %24391 to <16 x i16>*
  store <16 x i16> %24390, <16 x i16>* %24392, align 2, !tbaa !399
  %24393 = zext i32 %.pre-phi3693 to i64
  %24394 = mul nsw i64 %24393, %349
  %24395 = add nsw i64 %24394, %300
  %24396 = getelementptr inbounds i16, i16* %blur_x917, i64 %24395
  %24397 = getelementptr inbounds i16, i16* %24396, i64 -32
  %24398 = bitcast i16* %24397 to <16 x i16>*
  %24399 = load <16 x i16>, <16 x i16>* %24398, align 2, !tbaa !399
  %24400 = getelementptr inbounds i16, i16* %24396, i64 -16
  %24401 = bitcast i16* %24400 to <16 x i16>*
  %24402 = load <16 x i16>, <16 x i16>* %24401, align 2, !tbaa !399
  %24403 = zext i32 %.pre-phi3689 to i64
  %24404 = mul nsw i64 %24403, %349
  %24405 = add nsw i64 %24404, %300
  %24406 = getelementptr inbounds i16, i16* %blur_x917, i64 %24405
  %24407 = getelementptr inbounds i16, i16* %24406, i64 -32
  %24408 = bitcast i16* %24407 to <16 x i16>*
  %24409 = load <16 x i16>, <16 x i16>* %24408, align 2, !tbaa !399
  %24410 = getelementptr inbounds i16, i16* %24406, i64 -16
  %24411 = bitcast i16* %24410 to <16 x i16>*
  %24412 = load <16 x i16>, <16 x i16>* %24411, align 2, !tbaa !399
  %24413 = zext i32 %.pre-phi3699 to i64
  %24414 = mul nsw i64 %24413, %349
  %24415 = add nsw i64 %24414, %300
  %24416 = getelementptr inbounds i16, i16* %blur_x917, i64 %24415
  %24417 = getelementptr inbounds i16, i16* %24416, i64 -32
  %24418 = bitcast i16* %24417 to <16 x i16>*
  %24419 = load <16 x i16>, <16 x i16>* %24418, align 2, !tbaa !399
  %24420 = getelementptr inbounds i16, i16* %24416, i64 -16
  %24421 = bitcast i16* %24420 to <16 x i16>*
  %24422 = load <16 x i16>, <16 x i16>* %24421, align 2, !tbaa !399
  %24423 = zext i32 %.pre-phi3669 to i64
  %24424 = mul nsw i64 %24423, %349
  %24425 = add nsw i64 %24424, %300
  %24426 = getelementptr inbounds i16, i16* %blur_x917, i64 %24425
  %24427 = getelementptr inbounds i16, i16* %24426, i64 -32
  %24428 = bitcast i16* %24427 to <16 x i16>*
  %24429 = load <16 x i16>, <16 x i16>* %24428, align 2, !tbaa !399
  %24430 = getelementptr inbounds i16, i16* %24426, i64 -16
  %24431 = bitcast i16* %24430 to <16 x i16>*
  %24432 = load <16 x i16>, <16 x i16>* %24431, align 2, !tbaa !399
  %24433 = zext i32 %.pre-phi3673 to i64
  %24434 = mul nsw i64 %24433, %349
  %24435 = add nsw i64 %24434, %300
  %24436 = getelementptr inbounds i16, i16* %blur_x917, i64 %24435
  %24437 = getelementptr inbounds i16, i16* %24436, i64 -32
  %24438 = bitcast i16* %24437 to <16 x i16>*
  %24439 = load <16 x i16>, <16 x i16>* %24438, align 2, !tbaa !399
  %24440 = getelementptr inbounds i16, i16* %24436, i64 -16
  %24441 = bitcast i16* %24440 to <16 x i16>*
  %24442 = load <16 x i16>, <16 x i16>* %24441, align 2, !tbaa !399
  %24443 = mul nsw i64 %24384, %349
  %24444 = add nsw i64 %24443, %300
  %24445 = getelementptr inbounds i16, i16* %blur_x917, i64 %24444
  %24446 = getelementptr inbounds i16, i16* %24445, i64 -32
  %24447 = bitcast i16* %24446 to <16 x i16>*
  %24448 = load <16 x i16>, <16 x i16>* %24447, align 2, !tbaa !399
  %24449 = getelementptr inbounds i16, i16* %24445, i64 -16
  %24450 = bitcast i16* %24449 to <16 x i16>*
  %24451 = load <16 x i16>, <16 x i16>* %24450, align 2, !tbaa !399
  %24452 = zext i32 %.pre-phi3677 to i64
  %24453 = mul nsw i64 %24452, %349
  %24454 = add nsw i64 %24453, %300
  %24455 = getelementptr inbounds i16, i16* %blur_x917, i64 %24454
  %24456 = getelementptr inbounds i16, i16* %24455, i64 -32
  %24457 = bitcast i16* %24456 to <16 x i16>*
  %24458 = load <16 x i16>, <16 x i16>* %24457, align 2, !tbaa !399
  %24459 = getelementptr inbounds i16, i16* %24455, i64 -16
  %24460 = bitcast i16* %24459 to <16 x i16>*
  %24461 = load <16 x i16>, <16 x i16>* %24460, align 2, !tbaa !399
  %24462 = add <16 x i16> %24409, %24399
  %24463 = add <16 x i16> %24462, %24419
  %24464 = add <16 x i16> %24463, %24429
  %24465 = add <16 x i16> %24464, %24439
  %24466 = add <16 x i16> %24465, %24448
  %24467 = add <16 x i16> %24466, %24458
  %24468 = add <16 x i16> %24412, %24402
  %24469 = add <16 x i16> %24468, %24422
  %24470 = add <16 x i16> %24469, %24432
  %24471 = add <16 x i16> %24470, %24442
  %24472 = add <16 x i16> %24471, %24451
  %24473 = add <16 x i16> %24472, %24461
  %24474 = shufflevector <16 x i16> %24467, <16 x i16> %24473, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24475 = udiv <32 x i16> %24474, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %24476 = shufflevector <32 x i16> %24475, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24477 = sext i32 %a393 to i64
  %24478 = add nsw i64 %24477, 5
  %24479 = mul nsw i64 %24478, %350
  %24480 = add nsw i64 %352, %24479
  %24481 = getelementptr inbounds i16, i16* %267, i64 %24480
  %24482 = getelementptr inbounds i16, i16* %24481, i64 -32
  %24483 = bitcast i16* %24482 to <16 x i16>*
  store <16 x i16> %24476, <16 x i16>* %24483, align 2, !tbaa !401
  %24484 = shufflevector <32 x i16> %24475, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24485 = getelementptr inbounds i16, i16* %24481, i64 -16
  %24486 = bitcast i16* %24485 to <16 x i16>*
  store <16 x i16> %24484, <16 x i16>* %24486, align 2, !tbaa !401
  br label %after_bb1312

"for blur_y.s0.x.x.rebased1327":                  ; preds = %"for blur_y.s0.x.x.rebased1327.preheader", %"consume blur_x1335"
  %indvars.iv3518 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1327.preheader" ], [ %indvars.iv.next3519, %"consume blur_x1335" ]
  %24487 = add nsw i64 %indvars.iv3518, %307
  %24488 = icmp slt i64 %24487, 1
  %24489 = trunc i64 %24487 to i32
  %24490 = shl nsw i32 %24489, 5
  %24491 = icmp sgt i32 %202, %24490
  %24492 = or i1 %24488, %24491
  br i1 %24492, label %"produce blur_x1333", label %"for blur_y.s0.x.x.rebased1327.consume blur_x1335_crit_edge"

"for blur_y.s0.x.x.rebased1327.consume blur_x1335_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1327"
  %.pre3708 = shl nsw i64 %24487, 5
  br label %"consume blur_x1335"

"end for blur_y.s0.x.x.rebased1328":              ; preds = %"consume blur_x1335", %after_bb1312
  br i1 %308, label %"for blur_y.s0.x.x.rebased1343.preheader", label %"end for blur_y.s0.x.x.rebased1344", !prof !386

"for blur_y.s0.x.x.rebased1343.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1328"
  %24493 = sext i32 %t17441012 to i64
  %24494 = zext i32 %.pre-phi3693 to i64
  %24495 = mul nsw i64 %24494, %353
  %24496 = sub nsw i64 %24495, %302
  %24497 = zext i32 %.pre-phi3689 to i64
  %24498 = mul nsw i64 %24497, %353
  %24499 = sub nsw i64 %24498, %302
  %24500 = zext i32 %.pre-phi3699 to i64
  %24501 = mul nsw i64 %24500, %353
  %24502 = sub nsw i64 %24501, %302
  %24503 = zext i32 %.pre-phi3669 to i64
  %24504 = mul nsw i64 %24503, %353
  %24505 = sub nsw i64 %24504, %302
  %24506 = zext i32 %.pre-phi3673 to i64
  %24507 = mul nsw i64 %24506, %353
  %24508 = sub nsw i64 %24507, %302
  %24509 = zext i32 %.pre-phi3681 to i64
  %24510 = mul nsw i64 %24509, %353
  %24511 = sub nsw i64 %24510, %302
  %24512 = zext i32 %.pre-phi3677 to i64
  %24513 = mul nsw i64 %24512, %353
  %24514 = sub nsw i64 %24513, %302
  %24515 = sext i32 %a393 to i64
  %24516 = add nsw i64 %24515, 5
  %24517 = mul nsw i64 %24516, %350
  %24518 = add nsw i64 %24517, %354
  br label %"for blur_y.s0.x.x.rebased1343"

"produce blur_x1333":                             ; preds = %"for blur_y.s0.x.x.rebased1327"
  %t8321334 = add nsw i32 %383, %24490
  %24519 = sext i32 %t8321334 to i64
  %24520 = getelementptr inbounds i16, i16* %read_input860, i64 %24519
  %24521 = getelementptr inbounds i16, i16* %24520, i64 1
  %24522 = bitcast i16* %24521 to <16 x i16>*
  %24523 = load <16 x i16>, <16 x i16>* %24522, align 2, !tbaa !396
  %24524 = getelementptr inbounds i16, i16* %24520, i64 17
  %24525 = bitcast i16* %24524 to <16 x i16>*
  %24526 = load <16 x i16>, <16 x i16>* %24525, align 2, !tbaa !396
  %24527 = bitcast i16* %24520 to <16 x i16>*
  %24528 = load <16 x i16>, <16 x i16>* %24527, align 2, !tbaa !396
  %24529 = getelementptr inbounds i16, i16* %24520, i64 16
  %24530 = bitcast i16* %24529 to <16 x i16>*
  %24531 = load <16 x i16>, <16 x i16>* %24530, align 2, !tbaa !396
  %24532 = getelementptr inbounds i16, i16* %24520, i64 2
  %24533 = bitcast i16* %24532 to <16 x i16>*
  %24534 = load <16 x i16>, <16 x i16>* %24533, align 2, !tbaa !396
  %24535 = getelementptr inbounds i16, i16* %24520, i64 18
  %24536 = bitcast i16* %24535 to <16 x i16>*
  %24537 = load <16 x i16>, <16 x i16>* %24536, align 2, !tbaa !396
  %24538 = getelementptr inbounds i16, i16* %24520, i64 3
  %24539 = bitcast i16* %24538 to <16 x i16>*
  %24540 = load <16 x i16>, <16 x i16>* %24539, align 2, !tbaa !396
  %24541 = getelementptr inbounds i16, i16* %24520, i64 19
  %24542 = bitcast i16* %24541 to <16 x i16>*
  %24543 = load <16 x i16>, <16 x i16>* %24542, align 2, !tbaa !396
  %24544 = getelementptr inbounds i16, i16* %24520, i64 4
  %24545 = bitcast i16* %24544 to <16 x i16>*
  %24546 = load <16 x i16>, <16 x i16>* %24545, align 2, !tbaa !396
  %24547 = getelementptr inbounds i16, i16* %24520, i64 20
  %24548 = bitcast i16* %24547 to <16 x i16>*
  %24549 = load <16 x i16>, <16 x i16>* %24548, align 2, !tbaa !396
  %24550 = getelementptr inbounds i16, i16* %24520, i64 6
  %24551 = bitcast i16* %24550 to <16 x i16>*
  %24552 = load <16 x i16>, <16 x i16>* %24551, align 2, !tbaa !396
  %24553 = getelementptr inbounds i16, i16* %24520, i64 22
  %24554 = bitcast i16* %24553 to <16 x i16>*
  %24555 = load <16 x i16>, <16 x i16>* %24554, align 2, !tbaa !396
  %24556 = getelementptr inbounds i16, i16* %24520, i64 5
  %24557 = bitcast i16* %24556 to <16 x i16>*
  %24558 = load <16 x i16>, <16 x i16>* %24557, align 2, !tbaa !396
  %24559 = getelementptr inbounds i16, i16* %24520, i64 21
  %24560 = bitcast i16* %24559 to <16 x i16>*
  %24561 = load <16 x i16>, <16 x i16>* %24560, align 2, !tbaa !396
  %24562 = add <16 x i16> %24528, %24523
  %24563 = add <16 x i16> %24562, %24534
  %24564 = add <16 x i16> %24563, %24540
  %24565 = add <16 x i16> %24564, %24546
  %24566 = add <16 x i16> %24565, %24552
  %24567 = add <16 x i16> %24566, %24558
  %24568 = add <16 x i16> %24531, %24526
  %24569 = add <16 x i16> %24568, %24537
  %24570 = add <16 x i16> %24569, %24543
  %24571 = add <16 x i16> %24570, %24549
  %24572 = add <16 x i16> %24571, %24555
  %24573 = add <16 x i16> %24572, %24561
  %24574 = shufflevector <16 x i16> %24567, <16 x i16> %24573, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24575 = udiv <32 x i16> %24574, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %24576 = shufflevector <32 x i16> %24575, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24577 = shl nsw i64 %24487, 5
  %24578 = add nsw i64 %24577, %24300
  %24579 = getelementptr inbounds i16, i16* %blur_x917, i64 %24578
  %24580 = bitcast i16* %24579 to <16 x i16>*
  store <16 x i16> %24576, <16 x i16>* %24580, align 2, !tbaa !399
  %24581 = shufflevector <32 x i16> %24575, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24582 = getelementptr inbounds i16, i16* %24579, i64 16
  %24583 = bitcast i16* %24582 to <16 x i16>*
  store <16 x i16> %24581, <16 x i16>* %24583, align 2, !tbaa !399
  br label %"consume blur_x1335"

"consume blur_x1335":                             ; preds = %"for blur_y.s0.x.x.rebased1327.consume blur_x1335_crit_edge", %"produce blur_x1333"
  %.pre-phi3709 = phi i64 [ %.pre3708, %"for blur_y.s0.x.x.rebased1327.consume blur_x1335_crit_edge" ], [ %24577, %"produce blur_x1333" ]
  %24584 = add nsw i64 %24303, %.pre-phi3709
  %24585 = getelementptr inbounds i16, i16* %blur_x917, i64 %24584
  %24586 = bitcast i16* %24585 to <16 x i16>*
  %24587 = load <16 x i16>, <16 x i16>* %24586, align 2, !tbaa !399
  %24588 = getelementptr inbounds i16, i16* %24585, i64 16
  %24589 = bitcast i16* %24588 to <16 x i16>*
  %24590 = load <16 x i16>, <16 x i16>* %24589, align 2, !tbaa !399
  %24591 = add nsw i64 %24306, %.pre-phi3709
  %24592 = getelementptr inbounds i16, i16* %blur_x917, i64 %24591
  %24593 = bitcast i16* %24592 to <16 x i16>*
  %24594 = load <16 x i16>, <16 x i16>* %24593, align 2, !tbaa !399
  %24595 = getelementptr inbounds i16, i16* %24592, i64 16
  %24596 = bitcast i16* %24595 to <16 x i16>*
  %24597 = load <16 x i16>, <16 x i16>* %24596, align 2, !tbaa !399
  %24598 = add nsw i64 %24309, %.pre-phi3709
  %24599 = getelementptr inbounds i16, i16* %blur_x917, i64 %24598
  %24600 = bitcast i16* %24599 to <16 x i16>*
  %24601 = load <16 x i16>, <16 x i16>* %24600, align 2, !tbaa !399
  %24602 = getelementptr inbounds i16, i16* %24599, i64 16
  %24603 = bitcast i16* %24602 to <16 x i16>*
  %24604 = load <16 x i16>, <16 x i16>* %24603, align 2, !tbaa !399
  %24605 = add nsw i64 %24312, %.pre-phi3709
  %24606 = getelementptr inbounds i16, i16* %blur_x917, i64 %24605
  %24607 = bitcast i16* %24606 to <16 x i16>*
  %24608 = load <16 x i16>, <16 x i16>* %24607, align 2, !tbaa !399
  %24609 = getelementptr inbounds i16, i16* %24606, i64 16
  %24610 = bitcast i16* %24609 to <16 x i16>*
  %24611 = load <16 x i16>, <16 x i16>* %24610, align 2, !tbaa !399
  %24612 = add nsw i64 %24315, %.pre-phi3709
  %24613 = getelementptr inbounds i16, i16* %blur_x917, i64 %24612
  %24614 = bitcast i16* %24613 to <16 x i16>*
  %24615 = load <16 x i16>, <16 x i16>* %24614, align 2, !tbaa !399
  %24616 = getelementptr inbounds i16, i16* %24613, i64 16
  %24617 = bitcast i16* %24616 to <16 x i16>*
  %24618 = load <16 x i16>, <16 x i16>* %24617, align 2, !tbaa !399
  %24619 = add nsw i64 %24318, %.pre-phi3709
  %24620 = getelementptr inbounds i16, i16* %blur_x917, i64 %24619
  %24621 = bitcast i16* %24620 to <16 x i16>*
  %24622 = load <16 x i16>, <16 x i16>* %24621, align 2, !tbaa !399
  %24623 = getelementptr inbounds i16, i16* %24620, i64 16
  %24624 = bitcast i16* %24623 to <16 x i16>*
  %24625 = load <16 x i16>, <16 x i16>* %24624, align 2, !tbaa !399
  %24626 = add nsw i64 %24321, %.pre-phi3709
  %24627 = getelementptr inbounds i16, i16* %blur_x917, i64 %24626
  %24628 = bitcast i16* %24627 to <16 x i16>*
  %24629 = load <16 x i16>, <16 x i16>* %24628, align 2, !tbaa !399
  %24630 = getelementptr inbounds i16, i16* %24627, i64 16
  %24631 = bitcast i16* %24630 to <16 x i16>*
  %24632 = load <16 x i16>, <16 x i16>* %24631, align 2, !tbaa !399
  %24633 = add <16 x i16> %24594, %24587
  %24634 = add <16 x i16> %24633, %24601
  %24635 = add <16 x i16> %24634, %24608
  %24636 = add <16 x i16> %24635, %24615
  %24637 = add <16 x i16> %24636, %24622
  %24638 = add <16 x i16> %24637, %24629
  %24639 = add <16 x i16> %24597, %24590
  %24640 = add <16 x i16> %24639, %24604
  %24641 = add <16 x i16> %24640, %24611
  %24642 = add <16 x i16> %24641, %24618
  %24643 = add <16 x i16> %24642, %24625
  %24644 = add <16 x i16> %24643, %24632
  %24645 = shufflevector <16 x i16> %24638, <16 x i16> %24644, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24646 = udiv <32 x i16> %24645, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %24647 = shufflevector <32 x i16> %24646, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24648 = add nsw i64 %24325, %.pre-phi3709
  %24649 = getelementptr inbounds i16, i16* %267, i64 %24648
  %24650 = bitcast i16* %24649 to <16 x i16>*
  store <16 x i16> %24647, <16 x i16>* %24650, align 2, !tbaa !401
  %24651 = shufflevector <32 x i16> %24646, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24652 = getelementptr inbounds i16, i16* %24649, i64 16
  %24653 = bitcast i16* %24652 to <16 x i16>*
  store <16 x i16> %24651, <16 x i16>* %24653, align 2, !tbaa !401
  %indvars.iv.next3519 = add nuw nsw i64 %indvars.iv3518, 1
  %.not2749 = icmp eq i64 %indvars.iv.next3519, %546
  br i1 %.not2749, label %"end for blur_y.s0.x.x.rebased1328", label %"for blur_y.s0.x.x.rebased1327"

"for blur_y.s0.x.x.rebased1343":                  ; preds = %"for blur_y.s0.x.x.rebased1343.preheader", %"consume blur_x1354"
  %blur_y.s0.x.x.rebased1345 = phi i32 [ %24796, %"consume blur_x1354" ], [ 0, %"for blur_y.s0.x.x.rebased1343.preheader" ]
  %24654 = add nsw i32 %blur_y.s0.x.x.rebased1345, %t1670852
  %a2388 = shl nsw i32 %24654, 5
  %24655 = icmp sgt i32 %t1691, %a2388
  %blur_y.s0.x.v0.base.s1346 = select i1 %24655, i32 %a2388, i32 %t1691
  %24656 = icmp slt i32 %24654, 1
  %24657 = icmp sgt i32 %202, %a2388
  %24658 = or i1 %24656, %24657
  br i1 %24658, label %"produce blur_x1351", label %"consume blur_x1354"

"end for blur_y.s0.x.x.rebased1344":              ; preds = %"consume blur_x1354", %"end for blur_y.s0.x.x.rebased1328"
  br i1 %233, label %"produce blur_x1358", label %after_bb1355

"produce blur_x1351":                             ; preds = %"for blur_y.s0.x.x.rebased1343"
  %24659 = icmp slt i32 %blur_y.s0.x.v0.base.s1346, %202
  %blur_x.s0.x.v1.base.s1352 = select i1 %24659, i32 %blur_y.s0.x.v0.base.s1346, i32 %202
  %t8371353 = add nsw i32 %383, %blur_x.s0.x.v1.base.s1352
  %24660 = sext i32 %t8371353 to i64
  %24661 = getelementptr inbounds i16, i16* %read_input860, i64 %24660
  %24662 = getelementptr inbounds i16, i16* %24661, i64 1
  %24663 = bitcast i16* %24662 to <16 x i16>*
  %24664 = load <16 x i16>, <16 x i16>* %24663, align 2, !tbaa !396
  %24665 = getelementptr inbounds i16, i16* %24661, i64 17
  %24666 = bitcast i16* %24665 to <16 x i16>*
  %24667 = load <16 x i16>, <16 x i16>* %24666, align 2, !tbaa !396
  %24668 = bitcast i16* %24661 to <16 x i16>*
  %24669 = load <16 x i16>, <16 x i16>* %24668, align 2, !tbaa !396
  %24670 = getelementptr inbounds i16, i16* %24661, i64 16
  %24671 = bitcast i16* %24670 to <16 x i16>*
  %24672 = load <16 x i16>, <16 x i16>* %24671, align 2, !tbaa !396
  %24673 = getelementptr inbounds i16, i16* %24661, i64 2
  %24674 = bitcast i16* %24673 to <16 x i16>*
  %24675 = load <16 x i16>, <16 x i16>* %24674, align 2, !tbaa !396
  %24676 = getelementptr inbounds i16, i16* %24661, i64 18
  %24677 = bitcast i16* %24676 to <16 x i16>*
  %24678 = load <16 x i16>, <16 x i16>* %24677, align 2, !tbaa !396
  %24679 = getelementptr inbounds i16, i16* %24661, i64 3
  %24680 = bitcast i16* %24679 to <16 x i16>*
  %24681 = load <16 x i16>, <16 x i16>* %24680, align 2, !tbaa !396
  %24682 = getelementptr inbounds i16, i16* %24661, i64 19
  %24683 = bitcast i16* %24682 to <16 x i16>*
  %24684 = load <16 x i16>, <16 x i16>* %24683, align 2, !tbaa !396
  %24685 = getelementptr inbounds i16, i16* %24661, i64 4
  %24686 = bitcast i16* %24685 to <16 x i16>*
  %24687 = load <16 x i16>, <16 x i16>* %24686, align 2, !tbaa !396
  %24688 = getelementptr inbounds i16, i16* %24661, i64 20
  %24689 = bitcast i16* %24688 to <16 x i16>*
  %24690 = load <16 x i16>, <16 x i16>* %24689, align 2, !tbaa !396
  %24691 = getelementptr inbounds i16, i16* %24661, i64 6
  %24692 = bitcast i16* %24691 to <16 x i16>*
  %24693 = load <16 x i16>, <16 x i16>* %24692, align 2, !tbaa !396
  %24694 = getelementptr inbounds i16, i16* %24661, i64 22
  %24695 = bitcast i16* %24694 to <16 x i16>*
  %24696 = load <16 x i16>, <16 x i16>* %24695, align 2, !tbaa !396
  %24697 = getelementptr inbounds i16, i16* %24661, i64 5
  %24698 = bitcast i16* %24697 to <16 x i16>*
  %24699 = load <16 x i16>, <16 x i16>* %24698, align 2, !tbaa !396
  %24700 = getelementptr inbounds i16, i16* %24661, i64 21
  %24701 = bitcast i16* %24700 to <16 x i16>*
  %24702 = load <16 x i16>, <16 x i16>* %24701, align 2, !tbaa !396
  %24703 = add <16 x i16> %24669, %24664
  %24704 = add <16 x i16> %24703, %24675
  %24705 = add <16 x i16> %24704, %24681
  %24706 = add <16 x i16> %24705, %24687
  %24707 = add <16 x i16> %24706, %24693
  %24708 = add <16 x i16> %24707, %24699
  %24709 = add <16 x i16> %24672, %24667
  %24710 = add <16 x i16> %24709, %24678
  %24711 = add <16 x i16> %24710, %24684
  %24712 = add <16 x i16> %24711, %24690
  %24713 = add <16 x i16> %24712, %24696
  %24714 = add <16 x i16> %24713, %24702
  %24715 = shufflevector <16 x i16> %24708, <16 x i16> %24714, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24716 = udiv <32 x i16> %24715, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %24717 = shufflevector <32 x i16> %24716, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24718 = sext i32 %blur_x.s0.x.v1.base.s1352 to i64
  %24719 = add nsw i64 %24718, %24493
  %24720 = getelementptr inbounds i16, i16* %blur_x917, i64 %24719
  %24721 = bitcast i16* %24720 to <16 x i16>*
  store <16 x i16> %24717, <16 x i16>* %24721, align 2, !tbaa !399
  %24722 = shufflevector <32 x i16> %24716, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24723 = getelementptr inbounds i16, i16* %24720, i64 16
  %24724 = bitcast i16* %24723 to <16 x i16>*
  store <16 x i16> %24722, <16 x i16>* %24724, align 2, !tbaa !399
  br label %"consume blur_x1354"

"consume blur_x1354":                             ; preds = %"for blur_y.s0.x.x.rebased1343", %"produce blur_x1351"
  %24725 = sext i32 %blur_y.s0.x.v0.base.s1346 to i64
  %24726 = add nsw i64 %24496, %24725
  %24727 = getelementptr inbounds i16, i16* %blur_x917, i64 %24726
  %24728 = bitcast i16* %24727 to <16 x i16>*
  %24729 = load <16 x i16>, <16 x i16>* %24728, align 2, !tbaa !399
  %24730 = getelementptr inbounds i16, i16* %24727, i64 16
  %24731 = bitcast i16* %24730 to <16 x i16>*
  %24732 = load <16 x i16>, <16 x i16>* %24731, align 2, !tbaa !399
  %24733 = add nsw i64 %24499, %24725
  %24734 = getelementptr inbounds i16, i16* %blur_x917, i64 %24733
  %24735 = bitcast i16* %24734 to <16 x i16>*
  %24736 = load <16 x i16>, <16 x i16>* %24735, align 2, !tbaa !399
  %24737 = getelementptr inbounds i16, i16* %24734, i64 16
  %24738 = bitcast i16* %24737 to <16 x i16>*
  %24739 = load <16 x i16>, <16 x i16>* %24738, align 2, !tbaa !399
  %24740 = add nsw i64 %24502, %24725
  %24741 = getelementptr inbounds i16, i16* %blur_x917, i64 %24740
  %24742 = bitcast i16* %24741 to <16 x i16>*
  %24743 = load <16 x i16>, <16 x i16>* %24742, align 2, !tbaa !399
  %24744 = getelementptr inbounds i16, i16* %24741, i64 16
  %24745 = bitcast i16* %24744 to <16 x i16>*
  %24746 = load <16 x i16>, <16 x i16>* %24745, align 2, !tbaa !399
  %24747 = add nsw i64 %24505, %24725
  %24748 = getelementptr inbounds i16, i16* %blur_x917, i64 %24747
  %24749 = bitcast i16* %24748 to <16 x i16>*
  %24750 = load <16 x i16>, <16 x i16>* %24749, align 2, !tbaa !399
  %24751 = getelementptr inbounds i16, i16* %24748, i64 16
  %24752 = bitcast i16* %24751 to <16 x i16>*
  %24753 = load <16 x i16>, <16 x i16>* %24752, align 2, !tbaa !399
  %24754 = add nsw i64 %24508, %24725
  %24755 = getelementptr inbounds i16, i16* %blur_x917, i64 %24754
  %24756 = bitcast i16* %24755 to <16 x i16>*
  %24757 = load <16 x i16>, <16 x i16>* %24756, align 2, !tbaa !399
  %24758 = getelementptr inbounds i16, i16* %24755, i64 16
  %24759 = bitcast i16* %24758 to <16 x i16>*
  %24760 = load <16 x i16>, <16 x i16>* %24759, align 2, !tbaa !399
  %24761 = add nsw i64 %24511, %24725
  %24762 = getelementptr inbounds i16, i16* %blur_x917, i64 %24761
  %24763 = bitcast i16* %24762 to <16 x i16>*
  %24764 = load <16 x i16>, <16 x i16>* %24763, align 2, !tbaa !399
  %24765 = getelementptr inbounds i16, i16* %24762, i64 16
  %24766 = bitcast i16* %24765 to <16 x i16>*
  %24767 = load <16 x i16>, <16 x i16>* %24766, align 2, !tbaa !399
  %24768 = add nsw i64 %24514, %24725
  %24769 = getelementptr inbounds i16, i16* %blur_x917, i64 %24768
  %24770 = bitcast i16* %24769 to <16 x i16>*
  %24771 = load <16 x i16>, <16 x i16>* %24770, align 2, !tbaa !399
  %24772 = getelementptr inbounds i16, i16* %24769, i64 16
  %24773 = bitcast i16* %24772 to <16 x i16>*
  %24774 = load <16 x i16>, <16 x i16>* %24773, align 2, !tbaa !399
  %24775 = add <16 x i16> %24736, %24729
  %24776 = add <16 x i16> %24775, %24743
  %24777 = add <16 x i16> %24776, %24750
  %24778 = add <16 x i16> %24777, %24757
  %24779 = add <16 x i16> %24778, %24764
  %24780 = add <16 x i16> %24779, %24771
  %24781 = add <16 x i16> %24739, %24732
  %24782 = add <16 x i16> %24781, %24746
  %24783 = add <16 x i16> %24782, %24753
  %24784 = add <16 x i16> %24783, %24760
  %24785 = add <16 x i16> %24784, %24767
  %24786 = add <16 x i16> %24785, %24774
  %24787 = shufflevector <16 x i16> %24780, <16 x i16> %24786, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24788 = udiv <32 x i16> %24787, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %24789 = shufflevector <32 x i16> %24788, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24790 = add nsw i64 %24518, %24725
  %24791 = getelementptr inbounds i16, i16* %267, i64 %24790
  %24792 = bitcast i16* %24791 to <16 x i16>*
  store <16 x i16> %24789, <16 x i16>* %24792, align 2, !tbaa !401
  %24793 = shufflevector <32 x i16> %24788, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24794 = getelementptr inbounds i16, i16* %24791, i64 16
  %24795 = bitcast i16* %24794 to <16 x i16>*
  store <16 x i16> %24793, <16 x i16>* %24795, align 2, !tbaa !401
  %24796 = add nuw nsw i32 %blur_y.s0.x.x.rebased1345, 1
  %.not2748 = icmp eq i32 %24796, %t1727936
  br i1 %.not2748, label %"end for blur_y.s0.x.x.rebased1344", label %"for blur_y.s0.x.x.rebased1343"

after_bb1355:                                     ; preds = %"end for blur_y.s0.x.x.rebased1344", %"produce blur_x1358"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1370.preheader", label %"end for blur_y.s0.x.x.rebased1371", !prof !386

"for blur_y.s0.x.x.rebased1370.preheader":        ; preds = %after_bb1355
  %24797 = sext i32 %t17501042 to i64
  %24798 = zext i32 %.pre-phi3699 to i64
  %24799 = mul nsw i64 %24798, %353
  %24800 = sub nsw i64 %24799, %302
  %24801 = zext i32 %.pre-phi3693 to i64
  %24802 = mul nsw i64 %24801, %353
  %24803 = sub nsw i64 %24802, %302
  %24804 = zext i32 %.pre-phi3669 to i64
  %24805 = mul nsw i64 %24804, %353
  %24806 = sub nsw i64 %24805, %302
  %24807 = zext i32 %.pre-phi3673 to i64
  %24808 = mul nsw i64 %24807, %353
  %24809 = sub nsw i64 %24808, %302
  %24810 = zext i32 %.pre-phi3677 to i64
  %24811 = mul nsw i64 %24810, %353
  %24812 = sub nsw i64 %24811, %302
  %24813 = zext i32 %.pre-phi3685 to i64
  %24814 = mul nsw i64 %24813, %353
  %24815 = sub nsw i64 %24814, %302
  %24816 = zext i32 %.pre-phi3681 to i64
  %24817 = mul nsw i64 %24816, %353
  %24818 = sub nsw i64 %24817, %302
  %24819 = sext i32 %a393 to i64
  %24820 = add nsw i64 %24819, 6
  %24821 = mul nsw i64 %24820, %350
  %24822 = add nsw i64 %24821, %354
  br label %"for blur_y.s0.x.x.rebased1370"

"produce blur_x1358":                             ; preds = %"end for blur_y.s0.x.x.rebased1344"
  %24823 = getelementptr inbounds i16, i16* %read_input860, i64 %387
  %24824 = getelementptr inbounds i16, i16* %24823, i64 -31
  %24825 = bitcast i16* %24824 to <16 x i16>*
  %24826 = load <16 x i16>, <16 x i16>* %24825, align 2, !tbaa !396
  %24827 = getelementptr inbounds i16, i16* %24823, i64 -15
  %24828 = bitcast i16* %24827 to <16 x i16>*
  %24829 = load <16 x i16>, <16 x i16>* %24828, align 2, !tbaa !396
  %24830 = getelementptr inbounds i16, i16* %24823, i64 -32
  %24831 = bitcast i16* %24830 to <16 x i16>*
  %24832 = load <16 x i16>, <16 x i16>* %24831, align 2, !tbaa !396
  %24833 = getelementptr inbounds i16, i16* %24823, i64 -16
  %24834 = bitcast i16* %24833 to <16 x i16>*
  %24835 = load <16 x i16>, <16 x i16>* %24834, align 2, !tbaa !396
  %24836 = getelementptr inbounds i16, i16* %24823, i64 -30
  %24837 = bitcast i16* %24836 to <16 x i16>*
  %24838 = load <16 x i16>, <16 x i16>* %24837, align 2, !tbaa !396
  %24839 = getelementptr inbounds i16, i16* %24823, i64 -14
  %24840 = bitcast i16* %24839 to <16 x i16>*
  %24841 = load <16 x i16>, <16 x i16>* %24840, align 2, !tbaa !396
  %24842 = getelementptr inbounds i16, i16* %24823, i64 -29
  %24843 = bitcast i16* %24842 to <16 x i16>*
  %24844 = load <16 x i16>, <16 x i16>* %24843, align 2, !tbaa !396
  %24845 = getelementptr inbounds i16, i16* %24823, i64 -13
  %24846 = bitcast i16* %24845 to <16 x i16>*
  %24847 = load <16 x i16>, <16 x i16>* %24846, align 2, !tbaa !396
  %24848 = getelementptr inbounds i16, i16* %24823, i64 -28
  %24849 = bitcast i16* %24848 to <16 x i16>*
  %24850 = load <16 x i16>, <16 x i16>* %24849, align 2, !tbaa !396
  %24851 = getelementptr inbounds i16, i16* %24823, i64 -12
  %24852 = bitcast i16* %24851 to <16 x i16>*
  %24853 = load <16 x i16>, <16 x i16>* %24852, align 2, !tbaa !396
  %24854 = getelementptr inbounds i16, i16* %24823, i64 -26
  %24855 = bitcast i16* %24854 to <16 x i16>*
  %24856 = load <16 x i16>, <16 x i16>* %24855, align 2, !tbaa !396
  %24857 = getelementptr inbounds i16, i16* %24823, i64 -10
  %24858 = bitcast i16* %24857 to <16 x i16>*
  %24859 = load <16 x i16>, <16 x i16>* %24858, align 2, !tbaa !396
  %24860 = getelementptr inbounds i16, i16* %24823, i64 -27
  %24861 = bitcast i16* %24860 to <16 x i16>*
  %24862 = load <16 x i16>, <16 x i16>* %24861, align 2, !tbaa !396
  %24863 = getelementptr inbounds i16, i16* %24823, i64 -11
  %24864 = bitcast i16* %24863 to <16 x i16>*
  %24865 = load <16 x i16>, <16 x i16>* %24864, align 2, !tbaa !396
  %24866 = add <16 x i16> %24832, %24826
  %24867 = add <16 x i16> %24866, %24838
  %24868 = add <16 x i16> %24867, %24844
  %24869 = add <16 x i16> %24868, %24850
  %24870 = add <16 x i16> %24869, %24856
  %24871 = add <16 x i16> %24870, %24862
  %24872 = add <16 x i16> %24835, %24829
  %24873 = add <16 x i16> %24872, %24841
  %24874 = add <16 x i16> %24873, %24847
  %24875 = add <16 x i16> %24874, %24853
  %24876 = add <16 x i16> %24875, %24859
  %24877 = add <16 x i16> %24876, %24865
  %24878 = shufflevector <16 x i16> %24871, <16 x i16> %24877, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24879 = udiv <32 x i16> %24878, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %24880 = shufflevector <32 x i16> %24879, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24881 = zext i32 %.pre-phi3685 to i64
  %24882 = mul nsw i64 %303, %24881
  %24883 = add nsw i64 %305, %24882
  %24884 = getelementptr inbounds i16, i16* %blur_x917, i64 %24883
  %24885 = getelementptr inbounds i16, i16* %24884, i64 -32
  %24886 = bitcast i16* %24885 to <16 x i16>*
  store <16 x i16> %24880, <16 x i16>* %24886, align 2, !tbaa !399
  %24887 = shufflevector <32 x i16> %24879, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24888 = getelementptr inbounds i16, i16* %24884, i64 -16
  %24889 = bitcast i16* %24888 to <16 x i16>*
  store <16 x i16> %24887, <16 x i16>* %24889, align 2, !tbaa !399
  %24890 = zext i32 %.pre-phi3699 to i64
  %24891 = mul nsw i64 %24890, %349
  %24892 = add nsw i64 %24891, %300
  %24893 = getelementptr inbounds i16, i16* %blur_x917, i64 %24892
  %24894 = getelementptr inbounds i16, i16* %24893, i64 -32
  %24895 = bitcast i16* %24894 to <16 x i16>*
  %24896 = load <16 x i16>, <16 x i16>* %24895, align 2, !tbaa !399
  %24897 = getelementptr inbounds i16, i16* %24893, i64 -16
  %24898 = bitcast i16* %24897 to <16 x i16>*
  %24899 = load <16 x i16>, <16 x i16>* %24898, align 2, !tbaa !399
  %24900 = zext i32 %.pre-phi3693 to i64
  %24901 = mul nsw i64 %24900, %349
  %24902 = add nsw i64 %24901, %300
  %24903 = getelementptr inbounds i16, i16* %blur_x917, i64 %24902
  %24904 = getelementptr inbounds i16, i16* %24903, i64 -32
  %24905 = bitcast i16* %24904 to <16 x i16>*
  %24906 = load <16 x i16>, <16 x i16>* %24905, align 2, !tbaa !399
  %24907 = getelementptr inbounds i16, i16* %24903, i64 -16
  %24908 = bitcast i16* %24907 to <16 x i16>*
  %24909 = load <16 x i16>, <16 x i16>* %24908, align 2, !tbaa !399
  %24910 = zext i32 %.pre-phi3669 to i64
  %24911 = mul nsw i64 %24910, %349
  %24912 = add nsw i64 %24911, %300
  %24913 = getelementptr inbounds i16, i16* %blur_x917, i64 %24912
  %24914 = getelementptr inbounds i16, i16* %24913, i64 -32
  %24915 = bitcast i16* %24914 to <16 x i16>*
  %24916 = load <16 x i16>, <16 x i16>* %24915, align 2, !tbaa !399
  %24917 = getelementptr inbounds i16, i16* %24913, i64 -16
  %24918 = bitcast i16* %24917 to <16 x i16>*
  %24919 = load <16 x i16>, <16 x i16>* %24918, align 2, !tbaa !399
  %24920 = zext i32 %.pre-phi3673 to i64
  %24921 = mul nsw i64 %24920, %349
  %24922 = add nsw i64 %24921, %300
  %24923 = getelementptr inbounds i16, i16* %blur_x917, i64 %24922
  %24924 = getelementptr inbounds i16, i16* %24923, i64 -32
  %24925 = bitcast i16* %24924 to <16 x i16>*
  %24926 = load <16 x i16>, <16 x i16>* %24925, align 2, !tbaa !399
  %24927 = getelementptr inbounds i16, i16* %24923, i64 -16
  %24928 = bitcast i16* %24927 to <16 x i16>*
  %24929 = load <16 x i16>, <16 x i16>* %24928, align 2, !tbaa !399
  %24930 = zext i32 %.pre-phi3677 to i64
  %24931 = mul nsw i64 %24930, %349
  %24932 = add nsw i64 %24931, %300
  %24933 = getelementptr inbounds i16, i16* %blur_x917, i64 %24932
  %24934 = getelementptr inbounds i16, i16* %24933, i64 -32
  %24935 = bitcast i16* %24934 to <16 x i16>*
  %24936 = load <16 x i16>, <16 x i16>* %24935, align 2, !tbaa !399
  %24937 = getelementptr inbounds i16, i16* %24933, i64 -16
  %24938 = bitcast i16* %24937 to <16 x i16>*
  %24939 = load <16 x i16>, <16 x i16>* %24938, align 2, !tbaa !399
  %24940 = mul nsw i64 %24881, %349
  %24941 = add nsw i64 %24940, %300
  %24942 = getelementptr inbounds i16, i16* %blur_x917, i64 %24941
  %24943 = getelementptr inbounds i16, i16* %24942, i64 -32
  %24944 = bitcast i16* %24943 to <16 x i16>*
  %24945 = load <16 x i16>, <16 x i16>* %24944, align 2, !tbaa !399
  %24946 = getelementptr inbounds i16, i16* %24942, i64 -16
  %24947 = bitcast i16* %24946 to <16 x i16>*
  %24948 = load <16 x i16>, <16 x i16>* %24947, align 2, !tbaa !399
  %24949 = zext i32 %.pre-phi3681 to i64
  %24950 = mul nsw i64 %24949, %349
  %24951 = add nsw i64 %24950, %300
  %24952 = getelementptr inbounds i16, i16* %blur_x917, i64 %24951
  %24953 = getelementptr inbounds i16, i16* %24952, i64 -32
  %24954 = bitcast i16* %24953 to <16 x i16>*
  %24955 = load <16 x i16>, <16 x i16>* %24954, align 2, !tbaa !399
  %24956 = getelementptr inbounds i16, i16* %24952, i64 -16
  %24957 = bitcast i16* %24956 to <16 x i16>*
  %24958 = load <16 x i16>, <16 x i16>* %24957, align 2, !tbaa !399
  %24959 = add <16 x i16> %24906, %24896
  %24960 = add <16 x i16> %24959, %24916
  %24961 = add <16 x i16> %24960, %24926
  %24962 = add <16 x i16> %24961, %24936
  %24963 = add <16 x i16> %24962, %24945
  %24964 = add <16 x i16> %24963, %24955
  %24965 = add <16 x i16> %24909, %24899
  %24966 = add <16 x i16> %24965, %24919
  %24967 = add <16 x i16> %24966, %24929
  %24968 = add <16 x i16> %24967, %24939
  %24969 = add <16 x i16> %24968, %24948
  %24970 = add <16 x i16> %24969, %24958
  %24971 = shufflevector <16 x i16> %24964, <16 x i16> %24970, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24972 = udiv <32 x i16> %24971, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %24973 = shufflevector <32 x i16> %24972, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24974 = sext i32 %a393 to i64
  %24975 = add nsw i64 %24974, 6
  %24976 = mul nsw i64 %24975, %350
  %24977 = add nsw i64 %352, %24976
  %24978 = getelementptr inbounds i16, i16* %267, i64 %24977
  %24979 = getelementptr inbounds i16, i16* %24978, i64 -32
  %24980 = bitcast i16* %24979 to <16 x i16>*
  store <16 x i16> %24973, <16 x i16>* %24980, align 2, !tbaa !401
  %24981 = shufflevector <32 x i16> %24972, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24982 = getelementptr inbounds i16, i16* %24978, i64 -16
  %24983 = bitcast i16* %24982 to <16 x i16>*
  store <16 x i16> %24981, <16 x i16>* %24983, align 2, !tbaa !401
  br label %after_bb1355

"for blur_y.s0.x.x.rebased1370":                  ; preds = %"for blur_y.s0.x.x.rebased1370.preheader", %"consume blur_x1378"
  %indvars.iv3520 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1370.preheader" ], [ %indvars.iv.next3521, %"consume blur_x1378" ]
  %24984 = add nsw i64 %indvars.iv3520, %307
  %24985 = icmp slt i64 %24984, 1
  %24986 = trunc i64 %24984 to i32
  %24987 = shl nsw i32 %24986, 5
  %24988 = icmp sgt i32 %202, %24987
  %24989 = or i1 %24985, %24988
  br i1 %24989, label %"produce blur_x1376", label %"for blur_y.s0.x.x.rebased1370.consume blur_x1378_crit_edge"

"for blur_y.s0.x.x.rebased1370.consume blur_x1378_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1370"
  %.pre3710 = shl nsw i64 %24984, 5
  br label %"consume blur_x1378"

"end for blur_y.s0.x.x.rebased1371":              ; preds = %"consume blur_x1378", %after_bb1355
  br i1 %308, label %"for blur_y.s0.x.x.rebased1386.preheader", label %"end for blur_y.s0.x.x.rebased1387", !prof !386

"for blur_y.s0.x.x.rebased1386.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1371"
  %24990 = sext i32 %t17501042 to i64
  %24991 = zext i32 %.pre-phi3699 to i64
  %24992 = mul nsw i64 %24991, %353
  %24993 = sub nsw i64 %24992, %302
  %24994 = zext i32 %.pre-phi3693 to i64
  %24995 = mul nsw i64 %24994, %353
  %24996 = sub nsw i64 %24995, %302
  %24997 = zext i32 %.pre-phi3669 to i64
  %24998 = mul nsw i64 %24997, %353
  %24999 = sub nsw i64 %24998, %302
  %25000 = zext i32 %.pre-phi3673 to i64
  %25001 = mul nsw i64 %25000, %353
  %25002 = sub nsw i64 %25001, %302
  %25003 = zext i32 %.pre-phi3677 to i64
  %25004 = mul nsw i64 %25003, %353
  %25005 = sub nsw i64 %25004, %302
  %25006 = zext i32 %.pre-phi3685 to i64
  %25007 = mul nsw i64 %25006, %353
  %25008 = sub nsw i64 %25007, %302
  %25009 = zext i32 %.pre-phi3681 to i64
  %25010 = mul nsw i64 %25009, %353
  %25011 = sub nsw i64 %25010, %302
  %25012 = sext i32 %a393 to i64
  %25013 = add nsw i64 %25012, 6
  %25014 = mul nsw i64 %25013, %350
  %25015 = add nsw i64 %25014, %354
  br label %"for blur_y.s0.x.x.rebased1386"

"produce blur_x1376":                             ; preds = %"for blur_y.s0.x.x.rebased1370"
  %t8481377 = add nsw i32 %389, %24987
  %25016 = sext i32 %t8481377 to i64
  %25017 = getelementptr inbounds i16, i16* %read_input860, i64 %25016
  %25018 = getelementptr inbounds i16, i16* %25017, i64 1
  %25019 = bitcast i16* %25018 to <16 x i16>*
  %25020 = load <16 x i16>, <16 x i16>* %25019, align 2, !tbaa !396
  %25021 = getelementptr inbounds i16, i16* %25017, i64 17
  %25022 = bitcast i16* %25021 to <16 x i16>*
  %25023 = load <16 x i16>, <16 x i16>* %25022, align 2, !tbaa !396
  %25024 = bitcast i16* %25017 to <16 x i16>*
  %25025 = load <16 x i16>, <16 x i16>* %25024, align 2, !tbaa !396
  %25026 = getelementptr inbounds i16, i16* %25017, i64 16
  %25027 = bitcast i16* %25026 to <16 x i16>*
  %25028 = load <16 x i16>, <16 x i16>* %25027, align 2, !tbaa !396
  %25029 = getelementptr inbounds i16, i16* %25017, i64 2
  %25030 = bitcast i16* %25029 to <16 x i16>*
  %25031 = load <16 x i16>, <16 x i16>* %25030, align 2, !tbaa !396
  %25032 = getelementptr inbounds i16, i16* %25017, i64 18
  %25033 = bitcast i16* %25032 to <16 x i16>*
  %25034 = load <16 x i16>, <16 x i16>* %25033, align 2, !tbaa !396
  %25035 = getelementptr inbounds i16, i16* %25017, i64 3
  %25036 = bitcast i16* %25035 to <16 x i16>*
  %25037 = load <16 x i16>, <16 x i16>* %25036, align 2, !tbaa !396
  %25038 = getelementptr inbounds i16, i16* %25017, i64 19
  %25039 = bitcast i16* %25038 to <16 x i16>*
  %25040 = load <16 x i16>, <16 x i16>* %25039, align 2, !tbaa !396
  %25041 = getelementptr inbounds i16, i16* %25017, i64 4
  %25042 = bitcast i16* %25041 to <16 x i16>*
  %25043 = load <16 x i16>, <16 x i16>* %25042, align 2, !tbaa !396
  %25044 = getelementptr inbounds i16, i16* %25017, i64 20
  %25045 = bitcast i16* %25044 to <16 x i16>*
  %25046 = load <16 x i16>, <16 x i16>* %25045, align 2, !tbaa !396
  %25047 = getelementptr inbounds i16, i16* %25017, i64 6
  %25048 = bitcast i16* %25047 to <16 x i16>*
  %25049 = load <16 x i16>, <16 x i16>* %25048, align 2, !tbaa !396
  %25050 = getelementptr inbounds i16, i16* %25017, i64 22
  %25051 = bitcast i16* %25050 to <16 x i16>*
  %25052 = load <16 x i16>, <16 x i16>* %25051, align 2, !tbaa !396
  %25053 = getelementptr inbounds i16, i16* %25017, i64 5
  %25054 = bitcast i16* %25053 to <16 x i16>*
  %25055 = load <16 x i16>, <16 x i16>* %25054, align 2, !tbaa !396
  %25056 = getelementptr inbounds i16, i16* %25017, i64 21
  %25057 = bitcast i16* %25056 to <16 x i16>*
  %25058 = load <16 x i16>, <16 x i16>* %25057, align 2, !tbaa !396
  %25059 = add <16 x i16> %25025, %25020
  %25060 = add <16 x i16> %25059, %25031
  %25061 = add <16 x i16> %25060, %25037
  %25062 = add <16 x i16> %25061, %25043
  %25063 = add <16 x i16> %25062, %25049
  %25064 = add <16 x i16> %25063, %25055
  %25065 = add <16 x i16> %25028, %25023
  %25066 = add <16 x i16> %25065, %25034
  %25067 = add <16 x i16> %25066, %25040
  %25068 = add <16 x i16> %25067, %25046
  %25069 = add <16 x i16> %25068, %25052
  %25070 = add <16 x i16> %25069, %25058
  %25071 = shufflevector <16 x i16> %25064, <16 x i16> %25070, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25072 = udiv <32 x i16> %25071, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %25073 = shufflevector <32 x i16> %25072, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25074 = shl nsw i64 %24984, 5
  %25075 = add nsw i64 %25074, %24797
  %25076 = getelementptr inbounds i16, i16* %blur_x917, i64 %25075
  %25077 = bitcast i16* %25076 to <16 x i16>*
  store <16 x i16> %25073, <16 x i16>* %25077, align 2, !tbaa !399
  %25078 = shufflevector <32 x i16> %25072, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25079 = getelementptr inbounds i16, i16* %25076, i64 16
  %25080 = bitcast i16* %25079 to <16 x i16>*
  store <16 x i16> %25078, <16 x i16>* %25080, align 2, !tbaa !399
  br label %"consume blur_x1378"

"consume blur_x1378":                             ; preds = %"for blur_y.s0.x.x.rebased1370.consume blur_x1378_crit_edge", %"produce blur_x1376"
  %.pre-phi3711 = phi i64 [ %.pre3710, %"for blur_y.s0.x.x.rebased1370.consume blur_x1378_crit_edge" ], [ %25074, %"produce blur_x1376" ]
  %25081 = add nsw i64 %24800, %.pre-phi3711
  %25082 = getelementptr inbounds i16, i16* %blur_x917, i64 %25081
  %25083 = bitcast i16* %25082 to <16 x i16>*
  %25084 = load <16 x i16>, <16 x i16>* %25083, align 2, !tbaa !399
  %25085 = getelementptr inbounds i16, i16* %25082, i64 16
  %25086 = bitcast i16* %25085 to <16 x i16>*
  %25087 = load <16 x i16>, <16 x i16>* %25086, align 2, !tbaa !399
  %25088 = add nsw i64 %24803, %.pre-phi3711
  %25089 = getelementptr inbounds i16, i16* %blur_x917, i64 %25088
  %25090 = bitcast i16* %25089 to <16 x i16>*
  %25091 = load <16 x i16>, <16 x i16>* %25090, align 2, !tbaa !399
  %25092 = getelementptr inbounds i16, i16* %25089, i64 16
  %25093 = bitcast i16* %25092 to <16 x i16>*
  %25094 = load <16 x i16>, <16 x i16>* %25093, align 2, !tbaa !399
  %25095 = add nsw i64 %24806, %.pre-phi3711
  %25096 = getelementptr inbounds i16, i16* %blur_x917, i64 %25095
  %25097 = bitcast i16* %25096 to <16 x i16>*
  %25098 = load <16 x i16>, <16 x i16>* %25097, align 2, !tbaa !399
  %25099 = getelementptr inbounds i16, i16* %25096, i64 16
  %25100 = bitcast i16* %25099 to <16 x i16>*
  %25101 = load <16 x i16>, <16 x i16>* %25100, align 2, !tbaa !399
  %25102 = add nsw i64 %24809, %.pre-phi3711
  %25103 = getelementptr inbounds i16, i16* %blur_x917, i64 %25102
  %25104 = bitcast i16* %25103 to <16 x i16>*
  %25105 = load <16 x i16>, <16 x i16>* %25104, align 2, !tbaa !399
  %25106 = getelementptr inbounds i16, i16* %25103, i64 16
  %25107 = bitcast i16* %25106 to <16 x i16>*
  %25108 = load <16 x i16>, <16 x i16>* %25107, align 2, !tbaa !399
  %25109 = add nsw i64 %24812, %.pre-phi3711
  %25110 = getelementptr inbounds i16, i16* %blur_x917, i64 %25109
  %25111 = bitcast i16* %25110 to <16 x i16>*
  %25112 = load <16 x i16>, <16 x i16>* %25111, align 2, !tbaa !399
  %25113 = getelementptr inbounds i16, i16* %25110, i64 16
  %25114 = bitcast i16* %25113 to <16 x i16>*
  %25115 = load <16 x i16>, <16 x i16>* %25114, align 2, !tbaa !399
  %25116 = add nsw i64 %24815, %.pre-phi3711
  %25117 = getelementptr inbounds i16, i16* %blur_x917, i64 %25116
  %25118 = bitcast i16* %25117 to <16 x i16>*
  %25119 = load <16 x i16>, <16 x i16>* %25118, align 2, !tbaa !399
  %25120 = getelementptr inbounds i16, i16* %25117, i64 16
  %25121 = bitcast i16* %25120 to <16 x i16>*
  %25122 = load <16 x i16>, <16 x i16>* %25121, align 2, !tbaa !399
  %25123 = add nsw i64 %24818, %.pre-phi3711
  %25124 = getelementptr inbounds i16, i16* %blur_x917, i64 %25123
  %25125 = bitcast i16* %25124 to <16 x i16>*
  %25126 = load <16 x i16>, <16 x i16>* %25125, align 2, !tbaa !399
  %25127 = getelementptr inbounds i16, i16* %25124, i64 16
  %25128 = bitcast i16* %25127 to <16 x i16>*
  %25129 = load <16 x i16>, <16 x i16>* %25128, align 2, !tbaa !399
  %25130 = add <16 x i16> %25091, %25084
  %25131 = add <16 x i16> %25130, %25098
  %25132 = add <16 x i16> %25131, %25105
  %25133 = add <16 x i16> %25132, %25112
  %25134 = add <16 x i16> %25133, %25119
  %25135 = add <16 x i16> %25134, %25126
  %25136 = add <16 x i16> %25094, %25087
  %25137 = add <16 x i16> %25136, %25101
  %25138 = add <16 x i16> %25137, %25108
  %25139 = add <16 x i16> %25138, %25115
  %25140 = add <16 x i16> %25139, %25122
  %25141 = add <16 x i16> %25140, %25129
  %25142 = shufflevector <16 x i16> %25135, <16 x i16> %25141, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25143 = udiv <32 x i16> %25142, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %25144 = shufflevector <32 x i16> %25143, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25145 = add nsw i64 %24822, %.pre-phi3711
  %25146 = getelementptr inbounds i16, i16* %267, i64 %25145
  %25147 = bitcast i16* %25146 to <16 x i16>*
  store <16 x i16> %25144, <16 x i16>* %25147, align 2, !tbaa !401
  %25148 = shufflevector <32 x i16> %25143, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25149 = getelementptr inbounds i16, i16* %25146, i64 16
  %25150 = bitcast i16* %25149 to <16 x i16>*
  store <16 x i16> %25148, <16 x i16>* %25150, align 2, !tbaa !401
  %indvars.iv.next3521 = add nuw nsw i64 %indvars.iv3520, 1
  %.not2745 = icmp eq i64 %indvars.iv.next3521, %546
  br i1 %.not2745, label %"end for blur_y.s0.x.x.rebased1371", label %"for blur_y.s0.x.x.rebased1370"

"for blur_y.s0.x.x.rebased1386":                  ; preds = %"for blur_y.s0.x.x.rebased1386.preheader", %"consume blur_x1397"
  %blur_y.s0.x.x.rebased1388 = phi i32 [ %25293, %"consume blur_x1397" ], [ 0, %"for blur_y.s0.x.x.rebased1386.preheader" ]
  %25151 = add nsw i32 %blur_y.s0.x.x.rebased1388, %t1670852
  %a2545 = shl nsw i32 %25151, 5
  %25152 = icmp sgt i32 %t1691, %a2545
  %blur_y.s0.x.v0.base.s1389 = select i1 %25152, i32 %a2545, i32 %t1691
  %25153 = icmp slt i32 %25151, 1
  %25154 = icmp sgt i32 %202, %a2545
  %25155 = or i1 %25153, %25154
  br i1 %25155, label %"produce blur_x1394", label %"consume blur_x1397"

"end for blur_y.s0.x.x.rebased1387":              ; preds = %"consume blur_x1397", %"end for blur_y.s0.x.x.rebased1371"
  br i1 %233, label %"produce blur_x1401", label %after_bb1398

"produce blur_x1394":                             ; preds = %"for blur_y.s0.x.x.rebased1386"
  %25156 = icmp slt i32 %blur_y.s0.x.v0.base.s1389, %202
  %blur_x.s0.x.v1.base.s1395 = select i1 %25156, i32 %blur_y.s0.x.v0.base.s1389, i32 %202
  %t8531396 = add nsw i32 %389, %blur_x.s0.x.v1.base.s1395
  %25157 = sext i32 %t8531396 to i64
  %25158 = getelementptr inbounds i16, i16* %read_input860, i64 %25157
  %25159 = getelementptr inbounds i16, i16* %25158, i64 1
  %25160 = bitcast i16* %25159 to <16 x i16>*
  %25161 = load <16 x i16>, <16 x i16>* %25160, align 2, !tbaa !396
  %25162 = getelementptr inbounds i16, i16* %25158, i64 17
  %25163 = bitcast i16* %25162 to <16 x i16>*
  %25164 = load <16 x i16>, <16 x i16>* %25163, align 2, !tbaa !396
  %25165 = bitcast i16* %25158 to <16 x i16>*
  %25166 = load <16 x i16>, <16 x i16>* %25165, align 2, !tbaa !396
  %25167 = getelementptr inbounds i16, i16* %25158, i64 16
  %25168 = bitcast i16* %25167 to <16 x i16>*
  %25169 = load <16 x i16>, <16 x i16>* %25168, align 2, !tbaa !396
  %25170 = getelementptr inbounds i16, i16* %25158, i64 2
  %25171 = bitcast i16* %25170 to <16 x i16>*
  %25172 = load <16 x i16>, <16 x i16>* %25171, align 2, !tbaa !396
  %25173 = getelementptr inbounds i16, i16* %25158, i64 18
  %25174 = bitcast i16* %25173 to <16 x i16>*
  %25175 = load <16 x i16>, <16 x i16>* %25174, align 2, !tbaa !396
  %25176 = getelementptr inbounds i16, i16* %25158, i64 3
  %25177 = bitcast i16* %25176 to <16 x i16>*
  %25178 = load <16 x i16>, <16 x i16>* %25177, align 2, !tbaa !396
  %25179 = getelementptr inbounds i16, i16* %25158, i64 19
  %25180 = bitcast i16* %25179 to <16 x i16>*
  %25181 = load <16 x i16>, <16 x i16>* %25180, align 2, !tbaa !396
  %25182 = getelementptr inbounds i16, i16* %25158, i64 4
  %25183 = bitcast i16* %25182 to <16 x i16>*
  %25184 = load <16 x i16>, <16 x i16>* %25183, align 2, !tbaa !396
  %25185 = getelementptr inbounds i16, i16* %25158, i64 20
  %25186 = bitcast i16* %25185 to <16 x i16>*
  %25187 = load <16 x i16>, <16 x i16>* %25186, align 2, !tbaa !396
  %25188 = getelementptr inbounds i16, i16* %25158, i64 6
  %25189 = bitcast i16* %25188 to <16 x i16>*
  %25190 = load <16 x i16>, <16 x i16>* %25189, align 2, !tbaa !396
  %25191 = getelementptr inbounds i16, i16* %25158, i64 22
  %25192 = bitcast i16* %25191 to <16 x i16>*
  %25193 = load <16 x i16>, <16 x i16>* %25192, align 2, !tbaa !396
  %25194 = getelementptr inbounds i16, i16* %25158, i64 5
  %25195 = bitcast i16* %25194 to <16 x i16>*
  %25196 = load <16 x i16>, <16 x i16>* %25195, align 2, !tbaa !396
  %25197 = getelementptr inbounds i16, i16* %25158, i64 21
  %25198 = bitcast i16* %25197 to <16 x i16>*
  %25199 = load <16 x i16>, <16 x i16>* %25198, align 2, !tbaa !396
  %25200 = add <16 x i16> %25166, %25161
  %25201 = add <16 x i16> %25200, %25172
  %25202 = add <16 x i16> %25201, %25178
  %25203 = add <16 x i16> %25202, %25184
  %25204 = add <16 x i16> %25203, %25190
  %25205 = add <16 x i16> %25204, %25196
  %25206 = add <16 x i16> %25169, %25164
  %25207 = add <16 x i16> %25206, %25175
  %25208 = add <16 x i16> %25207, %25181
  %25209 = add <16 x i16> %25208, %25187
  %25210 = add <16 x i16> %25209, %25193
  %25211 = add <16 x i16> %25210, %25199
  %25212 = shufflevector <16 x i16> %25205, <16 x i16> %25211, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25213 = udiv <32 x i16> %25212, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %25214 = shufflevector <32 x i16> %25213, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25215 = sext i32 %blur_x.s0.x.v1.base.s1395 to i64
  %25216 = add nsw i64 %25215, %24990
  %25217 = getelementptr inbounds i16, i16* %blur_x917, i64 %25216
  %25218 = bitcast i16* %25217 to <16 x i16>*
  store <16 x i16> %25214, <16 x i16>* %25218, align 2, !tbaa !399
  %25219 = shufflevector <32 x i16> %25213, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25220 = getelementptr inbounds i16, i16* %25217, i64 16
  %25221 = bitcast i16* %25220 to <16 x i16>*
  store <16 x i16> %25219, <16 x i16>* %25221, align 2, !tbaa !399
  br label %"consume blur_x1397"

"consume blur_x1397":                             ; preds = %"for blur_y.s0.x.x.rebased1386", %"produce blur_x1394"
  %25222 = sext i32 %blur_y.s0.x.v0.base.s1389 to i64
  %25223 = add nsw i64 %24993, %25222
  %25224 = getelementptr inbounds i16, i16* %blur_x917, i64 %25223
  %25225 = bitcast i16* %25224 to <16 x i16>*
  %25226 = load <16 x i16>, <16 x i16>* %25225, align 2, !tbaa !399
  %25227 = getelementptr inbounds i16, i16* %25224, i64 16
  %25228 = bitcast i16* %25227 to <16 x i16>*
  %25229 = load <16 x i16>, <16 x i16>* %25228, align 2, !tbaa !399
  %25230 = add nsw i64 %24996, %25222
  %25231 = getelementptr inbounds i16, i16* %blur_x917, i64 %25230
  %25232 = bitcast i16* %25231 to <16 x i16>*
  %25233 = load <16 x i16>, <16 x i16>* %25232, align 2, !tbaa !399
  %25234 = getelementptr inbounds i16, i16* %25231, i64 16
  %25235 = bitcast i16* %25234 to <16 x i16>*
  %25236 = load <16 x i16>, <16 x i16>* %25235, align 2, !tbaa !399
  %25237 = add nsw i64 %24999, %25222
  %25238 = getelementptr inbounds i16, i16* %blur_x917, i64 %25237
  %25239 = bitcast i16* %25238 to <16 x i16>*
  %25240 = load <16 x i16>, <16 x i16>* %25239, align 2, !tbaa !399
  %25241 = getelementptr inbounds i16, i16* %25238, i64 16
  %25242 = bitcast i16* %25241 to <16 x i16>*
  %25243 = load <16 x i16>, <16 x i16>* %25242, align 2, !tbaa !399
  %25244 = add nsw i64 %25002, %25222
  %25245 = getelementptr inbounds i16, i16* %blur_x917, i64 %25244
  %25246 = bitcast i16* %25245 to <16 x i16>*
  %25247 = load <16 x i16>, <16 x i16>* %25246, align 2, !tbaa !399
  %25248 = getelementptr inbounds i16, i16* %25245, i64 16
  %25249 = bitcast i16* %25248 to <16 x i16>*
  %25250 = load <16 x i16>, <16 x i16>* %25249, align 2, !tbaa !399
  %25251 = add nsw i64 %25005, %25222
  %25252 = getelementptr inbounds i16, i16* %blur_x917, i64 %25251
  %25253 = bitcast i16* %25252 to <16 x i16>*
  %25254 = load <16 x i16>, <16 x i16>* %25253, align 2, !tbaa !399
  %25255 = getelementptr inbounds i16, i16* %25252, i64 16
  %25256 = bitcast i16* %25255 to <16 x i16>*
  %25257 = load <16 x i16>, <16 x i16>* %25256, align 2, !tbaa !399
  %25258 = add nsw i64 %25008, %25222
  %25259 = getelementptr inbounds i16, i16* %blur_x917, i64 %25258
  %25260 = bitcast i16* %25259 to <16 x i16>*
  %25261 = load <16 x i16>, <16 x i16>* %25260, align 2, !tbaa !399
  %25262 = getelementptr inbounds i16, i16* %25259, i64 16
  %25263 = bitcast i16* %25262 to <16 x i16>*
  %25264 = load <16 x i16>, <16 x i16>* %25263, align 2, !tbaa !399
  %25265 = add nsw i64 %25011, %25222
  %25266 = getelementptr inbounds i16, i16* %blur_x917, i64 %25265
  %25267 = bitcast i16* %25266 to <16 x i16>*
  %25268 = load <16 x i16>, <16 x i16>* %25267, align 2, !tbaa !399
  %25269 = getelementptr inbounds i16, i16* %25266, i64 16
  %25270 = bitcast i16* %25269 to <16 x i16>*
  %25271 = load <16 x i16>, <16 x i16>* %25270, align 2, !tbaa !399
  %25272 = add <16 x i16> %25233, %25226
  %25273 = add <16 x i16> %25272, %25240
  %25274 = add <16 x i16> %25273, %25247
  %25275 = add <16 x i16> %25274, %25254
  %25276 = add <16 x i16> %25275, %25261
  %25277 = add <16 x i16> %25276, %25268
  %25278 = add <16 x i16> %25236, %25229
  %25279 = add <16 x i16> %25278, %25243
  %25280 = add <16 x i16> %25279, %25250
  %25281 = add <16 x i16> %25280, %25257
  %25282 = add <16 x i16> %25281, %25264
  %25283 = add <16 x i16> %25282, %25271
  %25284 = shufflevector <16 x i16> %25277, <16 x i16> %25283, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25285 = udiv <32 x i16> %25284, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %25286 = shufflevector <32 x i16> %25285, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25287 = add nsw i64 %25015, %25222
  %25288 = getelementptr inbounds i16, i16* %267, i64 %25287
  %25289 = bitcast i16* %25288 to <16 x i16>*
  store <16 x i16> %25286, <16 x i16>* %25289, align 2, !tbaa !401
  %25290 = shufflevector <32 x i16> %25285, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25291 = getelementptr inbounds i16, i16* %25288, i64 16
  %25292 = bitcast i16* %25291 to <16 x i16>*
  store <16 x i16> %25290, <16 x i16>* %25292, align 2, !tbaa !401
  %25293 = add nuw nsw i32 %blur_y.s0.x.x.rebased1388, 1
  %.not2744 = icmp eq i32 %25293, %t1727936
  br i1 %.not2744, label %"end for blur_y.s0.x.x.rebased1387", label %"for blur_y.s0.x.x.rebased1386"

after_bb1398:                                     ; preds = %"end for blur_y.s0.x.x.rebased1387", %"produce blur_x1401"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1413.preheader", label %"end for blur_y.s0.x.x.rebased1414", !prof !386

"for blur_y.s0.x.x.rebased1413.preheader":        ; preds = %after_bb1398
  %25294 = sext i32 %t17561072 to i64
  %25295 = zext i32 %.pre-phi3669 to i64
  %25296 = mul nsw i64 %25295, %353
  %25297 = sub nsw i64 %25296, %302
  %25298 = zext i32 %.pre-phi3699 to i64
  %25299 = mul nsw i64 %25298, %353
  %25300 = sub nsw i64 %25299, %302
  %25301 = zext i32 %.pre-phi3673 to i64
  %25302 = mul nsw i64 %25301, %353
  %25303 = sub nsw i64 %25302, %302
  %25304 = zext i32 %.pre-phi3677 to i64
  %25305 = mul nsw i64 %25304, %353
  %25306 = sub nsw i64 %25305, %302
  %25307 = zext i32 %.pre-phi3681 to i64
  %25308 = mul nsw i64 %25307, %353
  %25309 = sub nsw i64 %25308, %302
  %25310 = zext i32 %.pre-phi3689 to i64
  %25311 = mul nsw i64 %25310, %353
  %25312 = sub nsw i64 %25311, %302
  %25313 = zext i32 %.pre-phi3685 to i64
  %25314 = mul nsw i64 %25313, %353
  %25315 = sub nsw i64 %25314, %302
  %25316 = sext i32 %a393 to i64
  %25317 = add nsw i64 %25316, 7
  %25318 = mul nsw i64 %25317, %350
  %25319 = add nsw i64 %25318, %354
  br label %"for blur_y.s0.x.x.rebased1413"

"produce blur_x1401":                             ; preds = %"end for blur_y.s0.x.x.rebased1387"
  %25320 = getelementptr inbounds i16, i16* %read_input860, i64 %393
  %25321 = getelementptr inbounds i16, i16* %25320, i64 -31
  %25322 = bitcast i16* %25321 to <16 x i16>*
  %25323 = load <16 x i16>, <16 x i16>* %25322, align 2, !tbaa !396
  %25324 = getelementptr inbounds i16, i16* %25320, i64 -15
  %25325 = bitcast i16* %25324 to <16 x i16>*
  %25326 = load <16 x i16>, <16 x i16>* %25325, align 2, !tbaa !396
  %25327 = getelementptr inbounds i16, i16* %25320, i64 -32
  %25328 = bitcast i16* %25327 to <16 x i16>*
  %25329 = load <16 x i16>, <16 x i16>* %25328, align 2, !tbaa !396
  %25330 = getelementptr inbounds i16, i16* %25320, i64 -16
  %25331 = bitcast i16* %25330 to <16 x i16>*
  %25332 = load <16 x i16>, <16 x i16>* %25331, align 2, !tbaa !396
  %25333 = getelementptr inbounds i16, i16* %25320, i64 -30
  %25334 = bitcast i16* %25333 to <16 x i16>*
  %25335 = load <16 x i16>, <16 x i16>* %25334, align 2, !tbaa !396
  %25336 = getelementptr inbounds i16, i16* %25320, i64 -14
  %25337 = bitcast i16* %25336 to <16 x i16>*
  %25338 = load <16 x i16>, <16 x i16>* %25337, align 2, !tbaa !396
  %25339 = getelementptr inbounds i16, i16* %25320, i64 -29
  %25340 = bitcast i16* %25339 to <16 x i16>*
  %25341 = load <16 x i16>, <16 x i16>* %25340, align 2, !tbaa !396
  %25342 = getelementptr inbounds i16, i16* %25320, i64 -13
  %25343 = bitcast i16* %25342 to <16 x i16>*
  %25344 = load <16 x i16>, <16 x i16>* %25343, align 2, !tbaa !396
  %25345 = getelementptr inbounds i16, i16* %25320, i64 -28
  %25346 = bitcast i16* %25345 to <16 x i16>*
  %25347 = load <16 x i16>, <16 x i16>* %25346, align 2, !tbaa !396
  %25348 = getelementptr inbounds i16, i16* %25320, i64 -12
  %25349 = bitcast i16* %25348 to <16 x i16>*
  %25350 = load <16 x i16>, <16 x i16>* %25349, align 2, !tbaa !396
  %25351 = getelementptr inbounds i16, i16* %25320, i64 -26
  %25352 = bitcast i16* %25351 to <16 x i16>*
  %25353 = load <16 x i16>, <16 x i16>* %25352, align 2, !tbaa !396
  %25354 = getelementptr inbounds i16, i16* %25320, i64 -10
  %25355 = bitcast i16* %25354 to <16 x i16>*
  %25356 = load <16 x i16>, <16 x i16>* %25355, align 2, !tbaa !396
  %25357 = getelementptr inbounds i16, i16* %25320, i64 -27
  %25358 = bitcast i16* %25357 to <16 x i16>*
  %25359 = load <16 x i16>, <16 x i16>* %25358, align 2, !tbaa !396
  %25360 = getelementptr inbounds i16, i16* %25320, i64 -11
  %25361 = bitcast i16* %25360 to <16 x i16>*
  %25362 = load <16 x i16>, <16 x i16>* %25361, align 2, !tbaa !396
  %25363 = add <16 x i16> %25329, %25323
  %25364 = add <16 x i16> %25363, %25335
  %25365 = add <16 x i16> %25364, %25341
  %25366 = add <16 x i16> %25365, %25347
  %25367 = add <16 x i16> %25366, %25353
  %25368 = add <16 x i16> %25367, %25359
  %25369 = add <16 x i16> %25332, %25326
  %25370 = add <16 x i16> %25369, %25338
  %25371 = add <16 x i16> %25370, %25344
  %25372 = add <16 x i16> %25371, %25350
  %25373 = add <16 x i16> %25372, %25356
  %25374 = add <16 x i16> %25373, %25362
  %25375 = shufflevector <16 x i16> %25368, <16 x i16> %25374, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25376 = udiv <32 x i16> %25375, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %25377 = shufflevector <32 x i16> %25376, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25378 = zext i32 %.pre-phi3689 to i64
  %25379 = mul nsw i64 %303, %25378
  %25380 = add nsw i64 %305, %25379
  %25381 = getelementptr inbounds i16, i16* %blur_x917, i64 %25380
  %25382 = getelementptr inbounds i16, i16* %25381, i64 -32
  %25383 = bitcast i16* %25382 to <16 x i16>*
  store <16 x i16> %25377, <16 x i16>* %25383, align 2, !tbaa !399
  %25384 = shufflevector <32 x i16> %25376, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25385 = getelementptr inbounds i16, i16* %25381, i64 -16
  %25386 = bitcast i16* %25385 to <16 x i16>*
  store <16 x i16> %25384, <16 x i16>* %25386, align 2, !tbaa !399
  %25387 = zext i32 %.pre-phi3669 to i64
  %25388 = mul nsw i64 %25387, %349
  %25389 = add nsw i64 %25388, %300
  %25390 = getelementptr inbounds i16, i16* %blur_x917, i64 %25389
  %25391 = getelementptr inbounds i16, i16* %25390, i64 -32
  %25392 = bitcast i16* %25391 to <16 x i16>*
  %25393 = load <16 x i16>, <16 x i16>* %25392, align 2, !tbaa !399
  %25394 = getelementptr inbounds i16, i16* %25390, i64 -16
  %25395 = bitcast i16* %25394 to <16 x i16>*
  %25396 = load <16 x i16>, <16 x i16>* %25395, align 2, !tbaa !399
  %25397 = zext i32 %.pre-phi3699 to i64
  %25398 = mul nsw i64 %25397, %349
  %25399 = add nsw i64 %25398, %300
  %25400 = getelementptr inbounds i16, i16* %blur_x917, i64 %25399
  %25401 = getelementptr inbounds i16, i16* %25400, i64 -32
  %25402 = bitcast i16* %25401 to <16 x i16>*
  %25403 = load <16 x i16>, <16 x i16>* %25402, align 2, !tbaa !399
  %25404 = getelementptr inbounds i16, i16* %25400, i64 -16
  %25405 = bitcast i16* %25404 to <16 x i16>*
  %25406 = load <16 x i16>, <16 x i16>* %25405, align 2, !tbaa !399
  %25407 = zext i32 %.pre-phi3673 to i64
  %25408 = mul nsw i64 %25407, %349
  %25409 = add nsw i64 %25408, %300
  %25410 = getelementptr inbounds i16, i16* %blur_x917, i64 %25409
  %25411 = getelementptr inbounds i16, i16* %25410, i64 -32
  %25412 = bitcast i16* %25411 to <16 x i16>*
  %25413 = load <16 x i16>, <16 x i16>* %25412, align 2, !tbaa !399
  %25414 = getelementptr inbounds i16, i16* %25410, i64 -16
  %25415 = bitcast i16* %25414 to <16 x i16>*
  %25416 = load <16 x i16>, <16 x i16>* %25415, align 2, !tbaa !399
  %25417 = zext i32 %.pre-phi3677 to i64
  %25418 = mul nsw i64 %25417, %349
  %25419 = add nsw i64 %25418, %300
  %25420 = getelementptr inbounds i16, i16* %blur_x917, i64 %25419
  %25421 = getelementptr inbounds i16, i16* %25420, i64 -32
  %25422 = bitcast i16* %25421 to <16 x i16>*
  %25423 = load <16 x i16>, <16 x i16>* %25422, align 2, !tbaa !399
  %25424 = getelementptr inbounds i16, i16* %25420, i64 -16
  %25425 = bitcast i16* %25424 to <16 x i16>*
  %25426 = load <16 x i16>, <16 x i16>* %25425, align 2, !tbaa !399
  %25427 = zext i32 %.pre-phi3681 to i64
  %25428 = mul nsw i64 %25427, %349
  %25429 = add nsw i64 %25428, %300
  %25430 = getelementptr inbounds i16, i16* %blur_x917, i64 %25429
  %25431 = getelementptr inbounds i16, i16* %25430, i64 -32
  %25432 = bitcast i16* %25431 to <16 x i16>*
  %25433 = load <16 x i16>, <16 x i16>* %25432, align 2, !tbaa !399
  %25434 = getelementptr inbounds i16, i16* %25430, i64 -16
  %25435 = bitcast i16* %25434 to <16 x i16>*
  %25436 = load <16 x i16>, <16 x i16>* %25435, align 2, !tbaa !399
  %25437 = mul nsw i64 %25378, %349
  %25438 = add nsw i64 %25437, %300
  %25439 = getelementptr inbounds i16, i16* %blur_x917, i64 %25438
  %25440 = getelementptr inbounds i16, i16* %25439, i64 -32
  %25441 = bitcast i16* %25440 to <16 x i16>*
  %25442 = load <16 x i16>, <16 x i16>* %25441, align 2, !tbaa !399
  %25443 = getelementptr inbounds i16, i16* %25439, i64 -16
  %25444 = bitcast i16* %25443 to <16 x i16>*
  %25445 = load <16 x i16>, <16 x i16>* %25444, align 2, !tbaa !399
  %25446 = zext i32 %.pre-phi3685 to i64
  %25447 = mul nsw i64 %25446, %349
  %25448 = add nsw i64 %25447, %300
  %25449 = getelementptr inbounds i16, i16* %blur_x917, i64 %25448
  %25450 = getelementptr inbounds i16, i16* %25449, i64 -32
  %25451 = bitcast i16* %25450 to <16 x i16>*
  %25452 = load <16 x i16>, <16 x i16>* %25451, align 2, !tbaa !399
  %25453 = getelementptr inbounds i16, i16* %25449, i64 -16
  %25454 = bitcast i16* %25453 to <16 x i16>*
  %25455 = load <16 x i16>, <16 x i16>* %25454, align 2, !tbaa !399
  %25456 = add <16 x i16> %25403, %25393
  %25457 = add <16 x i16> %25456, %25413
  %25458 = add <16 x i16> %25457, %25423
  %25459 = add <16 x i16> %25458, %25433
  %25460 = add <16 x i16> %25459, %25442
  %25461 = add <16 x i16> %25460, %25452
  %25462 = add <16 x i16> %25406, %25396
  %25463 = add <16 x i16> %25462, %25416
  %25464 = add <16 x i16> %25463, %25426
  %25465 = add <16 x i16> %25464, %25436
  %25466 = add <16 x i16> %25465, %25445
  %25467 = add <16 x i16> %25466, %25455
  %25468 = shufflevector <16 x i16> %25461, <16 x i16> %25467, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25469 = udiv <32 x i16> %25468, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %25470 = shufflevector <32 x i16> %25469, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25471 = sext i32 %a393 to i64
  %25472 = add nsw i64 %25471, 7
  %25473 = mul nsw i64 %25472, %350
  %25474 = add nsw i64 %352, %25473
  %25475 = getelementptr inbounds i16, i16* %267, i64 %25474
  %25476 = getelementptr inbounds i16, i16* %25475, i64 -32
  %25477 = bitcast i16* %25476 to <16 x i16>*
  store <16 x i16> %25470, <16 x i16>* %25477, align 2, !tbaa !401
  %25478 = shufflevector <32 x i16> %25469, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25479 = getelementptr inbounds i16, i16* %25475, i64 -16
  %25480 = bitcast i16* %25479 to <16 x i16>*
  store <16 x i16> %25478, <16 x i16>* %25480, align 2, !tbaa !401
  br label %after_bb1398

"for blur_y.s0.x.x.rebased1413":                  ; preds = %"for blur_y.s0.x.x.rebased1413.preheader", %"consume blur_x1421"
  %indvars.iv3522 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1413.preheader" ], [ %indvars.iv.next3523, %"consume blur_x1421" ]
  %25481 = add nsw i64 %indvars.iv3522, %307
  %25482 = icmp slt i64 %25481, 1
  %25483 = trunc i64 %25481 to i32
  %25484 = shl nsw i32 %25483, 5
  %25485 = icmp sgt i32 %202, %25484
  %25486 = or i1 %25482, %25485
  br i1 %25486, label %"produce blur_x1419", label %"for blur_y.s0.x.x.rebased1413.consume blur_x1421_crit_edge"

"for blur_y.s0.x.x.rebased1413.consume blur_x1421_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1413"
  %.pre3712 = shl nsw i64 %25481, 5
  br label %"consume blur_x1421"

"end for blur_y.s0.x.x.rebased1414":              ; preds = %"consume blur_x1421", %after_bb1398
  br i1 %308, label %"for blur_y.s0.x.x.rebased1429.preheader", label %"end for blur_y.s0.x.x.rebased1430", !prof !386

"for blur_y.s0.x.x.rebased1429.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1414"
  %25487 = sext i32 %t17561072 to i64
  %25488 = zext i32 %.pre-phi3669 to i64
  %25489 = mul nsw i64 %25488, %353
  %25490 = sub nsw i64 %25489, %302
  %25491 = zext i32 %.pre-phi3699 to i64
  %25492 = mul nsw i64 %25491, %353
  %25493 = sub nsw i64 %25492, %302
  %25494 = zext i32 %.pre-phi3673 to i64
  %25495 = mul nsw i64 %25494, %353
  %25496 = sub nsw i64 %25495, %302
  %25497 = zext i32 %.pre-phi3677 to i64
  %25498 = mul nsw i64 %25497, %353
  %25499 = sub nsw i64 %25498, %302
  %25500 = zext i32 %.pre-phi3681 to i64
  %25501 = mul nsw i64 %25500, %353
  %25502 = sub nsw i64 %25501, %302
  %25503 = zext i32 %.pre-phi3689 to i64
  %25504 = mul nsw i64 %25503, %353
  %25505 = sub nsw i64 %25504, %302
  %25506 = zext i32 %.pre-phi3685 to i64
  %25507 = mul nsw i64 %25506, %353
  %25508 = sub nsw i64 %25507, %302
  %25509 = sext i32 %a393 to i64
  %25510 = add nsw i64 %25509, 7
  %25511 = mul nsw i64 %25510, %350
  %25512 = add nsw i64 %25511, %354
  br label %"for blur_y.s0.x.x.rebased1429"

"produce blur_x1419":                             ; preds = %"for blur_y.s0.x.x.rebased1413"
  %t8641420 = add nsw i32 %395, %25484
  %25513 = sext i32 %t8641420 to i64
  %25514 = getelementptr inbounds i16, i16* %read_input860, i64 %25513
  %25515 = getelementptr inbounds i16, i16* %25514, i64 1
  %25516 = bitcast i16* %25515 to <16 x i16>*
  %25517 = load <16 x i16>, <16 x i16>* %25516, align 2, !tbaa !396
  %25518 = getelementptr inbounds i16, i16* %25514, i64 17
  %25519 = bitcast i16* %25518 to <16 x i16>*
  %25520 = load <16 x i16>, <16 x i16>* %25519, align 2, !tbaa !396
  %25521 = bitcast i16* %25514 to <16 x i16>*
  %25522 = load <16 x i16>, <16 x i16>* %25521, align 2, !tbaa !396
  %25523 = getelementptr inbounds i16, i16* %25514, i64 16
  %25524 = bitcast i16* %25523 to <16 x i16>*
  %25525 = load <16 x i16>, <16 x i16>* %25524, align 2, !tbaa !396
  %25526 = getelementptr inbounds i16, i16* %25514, i64 2
  %25527 = bitcast i16* %25526 to <16 x i16>*
  %25528 = load <16 x i16>, <16 x i16>* %25527, align 2, !tbaa !396
  %25529 = getelementptr inbounds i16, i16* %25514, i64 18
  %25530 = bitcast i16* %25529 to <16 x i16>*
  %25531 = load <16 x i16>, <16 x i16>* %25530, align 2, !tbaa !396
  %25532 = getelementptr inbounds i16, i16* %25514, i64 3
  %25533 = bitcast i16* %25532 to <16 x i16>*
  %25534 = load <16 x i16>, <16 x i16>* %25533, align 2, !tbaa !396
  %25535 = getelementptr inbounds i16, i16* %25514, i64 19
  %25536 = bitcast i16* %25535 to <16 x i16>*
  %25537 = load <16 x i16>, <16 x i16>* %25536, align 2, !tbaa !396
  %25538 = getelementptr inbounds i16, i16* %25514, i64 4
  %25539 = bitcast i16* %25538 to <16 x i16>*
  %25540 = load <16 x i16>, <16 x i16>* %25539, align 2, !tbaa !396
  %25541 = getelementptr inbounds i16, i16* %25514, i64 20
  %25542 = bitcast i16* %25541 to <16 x i16>*
  %25543 = load <16 x i16>, <16 x i16>* %25542, align 2, !tbaa !396
  %25544 = getelementptr inbounds i16, i16* %25514, i64 6
  %25545 = bitcast i16* %25544 to <16 x i16>*
  %25546 = load <16 x i16>, <16 x i16>* %25545, align 2, !tbaa !396
  %25547 = getelementptr inbounds i16, i16* %25514, i64 22
  %25548 = bitcast i16* %25547 to <16 x i16>*
  %25549 = load <16 x i16>, <16 x i16>* %25548, align 2, !tbaa !396
  %25550 = getelementptr inbounds i16, i16* %25514, i64 5
  %25551 = bitcast i16* %25550 to <16 x i16>*
  %25552 = load <16 x i16>, <16 x i16>* %25551, align 2, !tbaa !396
  %25553 = getelementptr inbounds i16, i16* %25514, i64 21
  %25554 = bitcast i16* %25553 to <16 x i16>*
  %25555 = load <16 x i16>, <16 x i16>* %25554, align 2, !tbaa !396
  %25556 = add <16 x i16> %25522, %25517
  %25557 = add <16 x i16> %25556, %25528
  %25558 = add <16 x i16> %25557, %25534
  %25559 = add <16 x i16> %25558, %25540
  %25560 = add <16 x i16> %25559, %25546
  %25561 = add <16 x i16> %25560, %25552
  %25562 = add <16 x i16> %25525, %25520
  %25563 = add <16 x i16> %25562, %25531
  %25564 = add <16 x i16> %25563, %25537
  %25565 = add <16 x i16> %25564, %25543
  %25566 = add <16 x i16> %25565, %25549
  %25567 = add <16 x i16> %25566, %25555
  %25568 = shufflevector <16 x i16> %25561, <16 x i16> %25567, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25569 = udiv <32 x i16> %25568, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %25570 = shufflevector <32 x i16> %25569, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25571 = shl nsw i64 %25481, 5
  %25572 = add nsw i64 %25571, %25294
  %25573 = getelementptr inbounds i16, i16* %blur_x917, i64 %25572
  %25574 = bitcast i16* %25573 to <16 x i16>*
  store <16 x i16> %25570, <16 x i16>* %25574, align 2, !tbaa !399
  %25575 = shufflevector <32 x i16> %25569, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25576 = getelementptr inbounds i16, i16* %25573, i64 16
  %25577 = bitcast i16* %25576 to <16 x i16>*
  store <16 x i16> %25575, <16 x i16>* %25577, align 2, !tbaa !399
  br label %"consume blur_x1421"

"consume blur_x1421":                             ; preds = %"for blur_y.s0.x.x.rebased1413.consume blur_x1421_crit_edge", %"produce blur_x1419"
  %.pre-phi3713 = phi i64 [ %.pre3712, %"for blur_y.s0.x.x.rebased1413.consume blur_x1421_crit_edge" ], [ %25571, %"produce blur_x1419" ]
  %25578 = add nsw i64 %25297, %.pre-phi3713
  %25579 = getelementptr inbounds i16, i16* %blur_x917, i64 %25578
  %25580 = bitcast i16* %25579 to <16 x i16>*
  %25581 = load <16 x i16>, <16 x i16>* %25580, align 2, !tbaa !399
  %25582 = getelementptr inbounds i16, i16* %25579, i64 16
  %25583 = bitcast i16* %25582 to <16 x i16>*
  %25584 = load <16 x i16>, <16 x i16>* %25583, align 2, !tbaa !399
  %25585 = add nsw i64 %25300, %.pre-phi3713
  %25586 = getelementptr inbounds i16, i16* %blur_x917, i64 %25585
  %25587 = bitcast i16* %25586 to <16 x i16>*
  %25588 = load <16 x i16>, <16 x i16>* %25587, align 2, !tbaa !399
  %25589 = getelementptr inbounds i16, i16* %25586, i64 16
  %25590 = bitcast i16* %25589 to <16 x i16>*
  %25591 = load <16 x i16>, <16 x i16>* %25590, align 2, !tbaa !399
  %25592 = add nsw i64 %25303, %.pre-phi3713
  %25593 = getelementptr inbounds i16, i16* %blur_x917, i64 %25592
  %25594 = bitcast i16* %25593 to <16 x i16>*
  %25595 = load <16 x i16>, <16 x i16>* %25594, align 2, !tbaa !399
  %25596 = getelementptr inbounds i16, i16* %25593, i64 16
  %25597 = bitcast i16* %25596 to <16 x i16>*
  %25598 = load <16 x i16>, <16 x i16>* %25597, align 2, !tbaa !399
  %25599 = add nsw i64 %25306, %.pre-phi3713
  %25600 = getelementptr inbounds i16, i16* %blur_x917, i64 %25599
  %25601 = bitcast i16* %25600 to <16 x i16>*
  %25602 = load <16 x i16>, <16 x i16>* %25601, align 2, !tbaa !399
  %25603 = getelementptr inbounds i16, i16* %25600, i64 16
  %25604 = bitcast i16* %25603 to <16 x i16>*
  %25605 = load <16 x i16>, <16 x i16>* %25604, align 2, !tbaa !399
  %25606 = add nsw i64 %25309, %.pre-phi3713
  %25607 = getelementptr inbounds i16, i16* %blur_x917, i64 %25606
  %25608 = bitcast i16* %25607 to <16 x i16>*
  %25609 = load <16 x i16>, <16 x i16>* %25608, align 2, !tbaa !399
  %25610 = getelementptr inbounds i16, i16* %25607, i64 16
  %25611 = bitcast i16* %25610 to <16 x i16>*
  %25612 = load <16 x i16>, <16 x i16>* %25611, align 2, !tbaa !399
  %25613 = add nsw i64 %25312, %.pre-phi3713
  %25614 = getelementptr inbounds i16, i16* %blur_x917, i64 %25613
  %25615 = bitcast i16* %25614 to <16 x i16>*
  %25616 = load <16 x i16>, <16 x i16>* %25615, align 2, !tbaa !399
  %25617 = getelementptr inbounds i16, i16* %25614, i64 16
  %25618 = bitcast i16* %25617 to <16 x i16>*
  %25619 = load <16 x i16>, <16 x i16>* %25618, align 2, !tbaa !399
  %25620 = add nsw i64 %25315, %.pre-phi3713
  %25621 = getelementptr inbounds i16, i16* %blur_x917, i64 %25620
  %25622 = bitcast i16* %25621 to <16 x i16>*
  %25623 = load <16 x i16>, <16 x i16>* %25622, align 2, !tbaa !399
  %25624 = getelementptr inbounds i16, i16* %25621, i64 16
  %25625 = bitcast i16* %25624 to <16 x i16>*
  %25626 = load <16 x i16>, <16 x i16>* %25625, align 2, !tbaa !399
  %25627 = add <16 x i16> %25588, %25581
  %25628 = add <16 x i16> %25627, %25595
  %25629 = add <16 x i16> %25628, %25602
  %25630 = add <16 x i16> %25629, %25609
  %25631 = add <16 x i16> %25630, %25616
  %25632 = add <16 x i16> %25631, %25623
  %25633 = add <16 x i16> %25591, %25584
  %25634 = add <16 x i16> %25633, %25598
  %25635 = add <16 x i16> %25634, %25605
  %25636 = add <16 x i16> %25635, %25612
  %25637 = add <16 x i16> %25636, %25619
  %25638 = add <16 x i16> %25637, %25626
  %25639 = shufflevector <16 x i16> %25632, <16 x i16> %25638, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25640 = udiv <32 x i16> %25639, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %25641 = shufflevector <32 x i16> %25640, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25642 = add nsw i64 %25319, %.pre-phi3713
  %25643 = getelementptr inbounds i16, i16* %267, i64 %25642
  %25644 = bitcast i16* %25643 to <16 x i16>*
  store <16 x i16> %25641, <16 x i16>* %25644, align 2, !tbaa !401
  %25645 = shufflevector <32 x i16> %25640, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25646 = getelementptr inbounds i16, i16* %25643, i64 16
  %25647 = bitcast i16* %25646 to <16 x i16>*
  store <16 x i16> %25645, <16 x i16>* %25647, align 2, !tbaa !401
  %indvars.iv.next3523 = add nuw nsw i64 %indvars.iv3522, 1
  %.not2741 = icmp eq i64 %indvars.iv.next3523, %546
  br i1 %.not2741, label %"end for blur_y.s0.x.x.rebased1414", label %"for blur_y.s0.x.x.rebased1413"

"for blur_y.s0.x.x.rebased1429":                  ; preds = %"for blur_y.s0.x.x.rebased1429.preheader", %"consume blur_x1440"
  %blur_y.s0.x.x.rebased1431 = phi i32 [ %25790, %"consume blur_x1440" ], [ 0, %"for blur_y.s0.x.x.rebased1429.preheader" ]
  %25648 = add nsw i32 %blur_y.s0.x.x.rebased1431, %t1670852
  %a2702 = shl nsw i32 %25648, 5
  %25649 = icmp sgt i32 %t1691, %a2702
  %blur_y.s0.x.v0.base.s1432 = select i1 %25649, i32 %a2702, i32 %t1691
  %25650 = icmp slt i32 %25648, 1
  %25651 = icmp sgt i32 %202, %a2702
  %25652 = or i1 %25650, %25651
  br i1 %25652, label %"produce blur_x1437", label %"consume blur_x1440"

"end for blur_y.s0.x.x.rebased1430":              ; preds = %"consume blur_x1440", %"end for blur_y.s0.x.x.rebased1414"
  br i1 %233, label %"produce blur_x1444", label %after_bb1441

"produce blur_x1437":                             ; preds = %"for blur_y.s0.x.x.rebased1429"
  %25653 = icmp slt i32 %blur_y.s0.x.v0.base.s1432, %202
  %blur_x.s0.x.v1.base.s1438 = select i1 %25653, i32 %blur_y.s0.x.v0.base.s1432, i32 %202
  %t8691439 = add nsw i32 %395, %blur_x.s0.x.v1.base.s1438
  %25654 = sext i32 %t8691439 to i64
  %25655 = getelementptr inbounds i16, i16* %read_input860, i64 %25654
  %25656 = getelementptr inbounds i16, i16* %25655, i64 1
  %25657 = bitcast i16* %25656 to <16 x i16>*
  %25658 = load <16 x i16>, <16 x i16>* %25657, align 2, !tbaa !396
  %25659 = getelementptr inbounds i16, i16* %25655, i64 17
  %25660 = bitcast i16* %25659 to <16 x i16>*
  %25661 = load <16 x i16>, <16 x i16>* %25660, align 2, !tbaa !396
  %25662 = bitcast i16* %25655 to <16 x i16>*
  %25663 = load <16 x i16>, <16 x i16>* %25662, align 2, !tbaa !396
  %25664 = getelementptr inbounds i16, i16* %25655, i64 16
  %25665 = bitcast i16* %25664 to <16 x i16>*
  %25666 = load <16 x i16>, <16 x i16>* %25665, align 2, !tbaa !396
  %25667 = getelementptr inbounds i16, i16* %25655, i64 2
  %25668 = bitcast i16* %25667 to <16 x i16>*
  %25669 = load <16 x i16>, <16 x i16>* %25668, align 2, !tbaa !396
  %25670 = getelementptr inbounds i16, i16* %25655, i64 18
  %25671 = bitcast i16* %25670 to <16 x i16>*
  %25672 = load <16 x i16>, <16 x i16>* %25671, align 2, !tbaa !396
  %25673 = getelementptr inbounds i16, i16* %25655, i64 3
  %25674 = bitcast i16* %25673 to <16 x i16>*
  %25675 = load <16 x i16>, <16 x i16>* %25674, align 2, !tbaa !396
  %25676 = getelementptr inbounds i16, i16* %25655, i64 19
  %25677 = bitcast i16* %25676 to <16 x i16>*
  %25678 = load <16 x i16>, <16 x i16>* %25677, align 2, !tbaa !396
  %25679 = getelementptr inbounds i16, i16* %25655, i64 4
  %25680 = bitcast i16* %25679 to <16 x i16>*
  %25681 = load <16 x i16>, <16 x i16>* %25680, align 2, !tbaa !396
  %25682 = getelementptr inbounds i16, i16* %25655, i64 20
  %25683 = bitcast i16* %25682 to <16 x i16>*
  %25684 = load <16 x i16>, <16 x i16>* %25683, align 2, !tbaa !396
  %25685 = getelementptr inbounds i16, i16* %25655, i64 6
  %25686 = bitcast i16* %25685 to <16 x i16>*
  %25687 = load <16 x i16>, <16 x i16>* %25686, align 2, !tbaa !396
  %25688 = getelementptr inbounds i16, i16* %25655, i64 22
  %25689 = bitcast i16* %25688 to <16 x i16>*
  %25690 = load <16 x i16>, <16 x i16>* %25689, align 2, !tbaa !396
  %25691 = getelementptr inbounds i16, i16* %25655, i64 5
  %25692 = bitcast i16* %25691 to <16 x i16>*
  %25693 = load <16 x i16>, <16 x i16>* %25692, align 2, !tbaa !396
  %25694 = getelementptr inbounds i16, i16* %25655, i64 21
  %25695 = bitcast i16* %25694 to <16 x i16>*
  %25696 = load <16 x i16>, <16 x i16>* %25695, align 2, !tbaa !396
  %25697 = add <16 x i16> %25663, %25658
  %25698 = add <16 x i16> %25697, %25669
  %25699 = add <16 x i16> %25698, %25675
  %25700 = add <16 x i16> %25699, %25681
  %25701 = add <16 x i16> %25700, %25687
  %25702 = add <16 x i16> %25701, %25693
  %25703 = add <16 x i16> %25666, %25661
  %25704 = add <16 x i16> %25703, %25672
  %25705 = add <16 x i16> %25704, %25678
  %25706 = add <16 x i16> %25705, %25684
  %25707 = add <16 x i16> %25706, %25690
  %25708 = add <16 x i16> %25707, %25696
  %25709 = shufflevector <16 x i16> %25702, <16 x i16> %25708, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25710 = udiv <32 x i16> %25709, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %25711 = shufflevector <32 x i16> %25710, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25712 = sext i32 %blur_x.s0.x.v1.base.s1438 to i64
  %25713 = add nsw i64 %25712, %25487
  %25714 = getelementptr inbounds i16, i16* %blur_x917, i64 %25713
  %25715 = bitcast i16* %25714 to <16 x i16>*
  store <16 x i16> %25711, <16 x i16>* %25715, align 2, !tbaa !399
  %25716 = shufflevector <32 x i16> %25710, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25717 = getelementptr inbounds i16, i16* %25714, i64 16
  %25718 = bitcast i16* %25717 to <16 x i16>*
  store <16 x i16> %25716, <16 x i16>* %25718, align 2, !tbaa !399
  br label %"consume blur_x1440"

"consume blur_x1440":                             ; preds = %"for blur_y.s0.x.x.rebased1429", %"produce blur_x1437"
  %25719 = sext i32 %blur_y.s0.x.v0.base.s1432 to i64
  %25720 = add nsw i64 %25490, %25719
  %25721 = getelementptr inbounds i16, i16* %blur_x917, i64 %25720
  %25722 = bitcast i16* %25721 to <16 x i16>*
  %25723 = load <16 x i16>, <16 x i16>* %25722, align 2, !tbaa !399
  %25724 = getelementptr inbounds i16, i16* %25721, i64 16
  %25725 = bitcast i16* %25724 to <16 x i16>*
  %25726 = load <16 x i16>, <16 x i16>* %25725, align 2, !tbaa !399
  %25727 = add nsw i64 %25493, %25719
  %25728 = getelementptr inbounds i16, i16* %blur_x917, i64 %25727
  %25729 = bitcast i16* %25728 to <16 x i16>*
  %25730 = load <16 x i16>, <16 x i16>* %25729, align 2, !tbaa !399
  %25731 = getelementptr inbounds i16, i16* %25728, i64 16
  %25732 = bitcast i16* %25731 to <16 x i16>*
  %25733 = load <16 x i16>, <16 x i16>* %25732, align 2, !tbaa !399
  %25734 = add nsw i64 %25496, %25719
  %25735 = getelementptr inbounds i16, i16* %blur_x917, i64 %25734
  %25736 = bitcast i16* %25735 to <16 x i16>*
  %25737 = load <16 x i16>, <16 x i16>* %25736, align 2, !tbaa !399
  %25738 = getelementptr inbounds i16, i16* %25735, i64 16
  %25739 = bitcast i16* %25738 to <16 x i16>*
  %25740 = load <16 x i16>, <16 x i16>* %25739, align 2, !tbaa !399
  %25741 = add nsw i64 %25499, %25719
  %25742 = getelementptr inbounds i16, i16* %blur_x917, i64 %25741
  %25743 = bitcast i16* %25742 to <16 x i16>*
  %25744 = load <16 x i16>, <16 x i16>* %25743, align 2, !tbaa !399
  %25745 = getelementptr inbounds i16, i16* %25742, i64 16
  %25746 = bitcast i16* %25745 to <16 x i16>*
  %25747 = load <16 x i16>, <16 x i16>* %25746, align 2, !tbaa !399
  %25748 = add nsw i64 %25502, %25719
  %25749 = getelementptr inbounds i16, i16* %blur_x917, i64 %25748
  %25750 = bitcast i16* %25749 to <16 x i16>*
  %25751 = load <16 x i16>, <16 x i16>* %25750, align 2, !tbaa !399
  %25752 = getelementptr inbounds i16, i16* %25749, i64 16
  %25753 = bitcast i16* %25752 to <16 x i16>*
  %25754 = load <16 x i16>, <16 x i16>* %25753, align 2, !tbaa !399
  %25755 = add nsw i64 %25505, %25719
  %25756 = getelementptr inbounds i16, i16* %blur_x917, i64 %25755
  %25757 = bitcast i16* %25756 to <16 x i16>*
  %25758 = load <16 x i16>, <16 x i16>* %25757, align 2, !tbaa !399
  %25759 = getelementptr inbounds i16, i16* %25756, i64 16
  %25760 = bitcast i16* %25759 to <16 x i16>*
  %25761 = load <16 x i16>, <16 x i16>* %25760, align 2, !tbaa !399
  %25762 = add nsw i64 %25508, %25719
  %25763 = getelementptr inbounds i16, i16* %blur_x917, i64 %25762
  %25764 = bitcast i16* %25763 to <16 x i16>*
  %25765 = load <16 x i16>, <16 x i16>* %25764, align 2, !tbaa !399
  %25766 = getelementptr inbounds i16, i16* %25763, i64 16
  %25767 = bitcast i16* %25766 to <16 x i16>*
  %25768 = load <16 x i16>, <16 x i16>* %25767, align 2, !tbaa !399
  %25769 = add <16 x i16> %25730, %25723
  %25770 = add <16 x i16> %25769, %25737
  %25771 = add <16 x i16> %25770, %25744
  %25772 = add <16 x i16> %25771, %25751
  %25773 = add <16 x i16> %25772, %25758
  %25774 = add <16 x i16> %25773, %25765
  %25775 = add <16 x i16> %25733, %25726
  %25776 = add <16 x i16> %25775, %25740
  %25777 = add <16 x i16> %25776, %25747
  %25778 = add <16 x i16> %25777, %25754
  %25779 = add <16 x i16> %25778, %25761
  %25780 = add <16 x i16> %25779, %25768
  %25781 = shufflevector <16 x i16> %25774, <16 x i16> %25780, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25782 = udiv <32 x i16> %25781, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %25783 = shufflevector <32 x i16> %25782, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25784 = add nsw i64 %25512, %25719
  %25785 = getelementptr inbounds i16, i16* %267, i64 %25784
  %25786 = bitcast i16* %25785 to <16 x i16>*
  store <16 x i16> %25783, <16 x i16>* %25786, align 2, !tbaa !401
  %25787 = shufflevector <32 x i16> %25782, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25788 = getelementptr inbounds i16, i16* %25785, i64 16
  %25789 = bitcast i16* %25788 to <16 x i16>*
  store <16 x i16> %25787, <16 x i16>* %25789, align 2, !tbaa !401
  %25790 = add nuw nsw i32 %blur_y.s0.x.x.rebased1431, 1
  %.not2740 = icmp eq i32 %25790, %t1727936
  br i1 %.not2740, label %"end for blur_y.s0.x.x.rebased1430", label %"for blur_y.s0.x.x.rebased1429"

after_bb1441:                                     ; preds = %"end for blur_y.s0.x.x.rebased1430", %"produce blur_x1444"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1456.preheader", label %"end for blur_y.s0.x.x.rebased1457", !prof !386

"for blur_y.s0.x.x.rebased1456.preheader":        ; preds = %after_bb1441
  %25791 = sext i32 %t17621108 to i64
  %25792 = zext i32 %.pre-phi3673 to i64
  %25793 = mul nsw i64 %25792, %353
  %25794 = sub nsw i64 %25793, %302
  %25795 = zext i32 %.pre-phi3669 to i64
  %25796 = mul nsw i64 %25795, %353
  %25797 = sub nsw i64 %25796, %302
  %25798 = zext i32 %.pre-phi3677 to i64
  %25799 = mul nsw i64 %25798, %353
  %25800 = sub nsw i64 %25799, %302
  %25801 = zext i32 %.pre-phi3681 to i64
  %25802 = mul nsw i64 %25801, %353
  %25803 = sub nsw i64 %25802, %302
  %25804 = zext i32 %.pre-phi3685 to i64
  %25805 = mul nsw i64 %25804, %353
  %25806 = sub nsw i64 %25805, %302
  %25807 = zext i32 %.pre-phi3693 to i64
  %25808 = mul nsw i64 %25807, %353
  %25809 = sub nsw i64 %25808, %302
  %25810 = zext i32 %.pre-phi3689 to i64
  %25811 = mul nsw i64 %25810, %353
  %25812 = sub nsw i64 %25811, %302
  %25813 = sext i32 %a393 to i64
  %25814 = add nsw i64 %25813, 8
  %25815 = mul nsw i64 %25814, %350
  %25816 = add nsw i64 %25815, %354
  br label %"for blur_y.s0.x.x.rebased1456"

"produce blur_x1444":                             ; preds = %"end for blur_y.s0.x.x.rebased1430"
  %25817 = getelementptr inbounds i16, i16* %read_input860, i64 %399
  %25818 = getelementptr inbounds i16, i16* %25817, i64 -31
  %25819 = bitcast i16* %25818 to <16 x i16>*
  %25820 = load <16 x i16>, <16 x i16>* %25819, align 2, !tbaa !396
  %25821 = getelementptr inbounds i16, i16* %25817, i64 -15
  %25822 = bitcast i16* %25821 to <16 x i16>*
  %25823 = load <16 x i16>, <16 x i16>* %25822, align 2, !tbaa !396
  %25824 = getelementptr inbounds i16, i16* %25817, i64 -32
  %25825 = bitcast i16* %25824 to <16 x i16>*
  %25826 = load <16 x i16>, <16 x i16>* %25825, align 2, !tbaa !396
  %25827 = getelementptr inbounds i16, i16* %25817, i64 -16
  %25828 = bitcast i16* %25827 to <16 x i16>*
  %25829 = load <16 x i16>, <16 x i16>* %25828, align 2, !tbaa !396
  %25830 = getelementptr inbounds i16, i16* %25817, i64 -30
  %25831 = bitcast i16* %25830 to <16 x i16>*
  %25832 = load <16 x i16>, <16 x i16>* %25831, align 2, !tbaa !396
  %25833 = getelementptr inbounds i16, i16* %25817, i64 -14
  %25834 = bitcast i16* %25833 to <16 x i16>*
  %25835 = load <16 x i16>, <16 x i16>* %25834, align 2, !tbaa !396
  %25836 = getelementptr inbounds i16, i16* %25817, i64 -29
  %25837 = bitcast i16* %25836 to <16 x i16>*
  %25838 = load <16 x i16>, <16 x i16>* %25837, align 2, !tbaa !396
  %25839 = getelementptr inbounds i16, i16* %25817, i64 -13
  %25840 = bitcast i16* %25839 to <16 x i16>*
  %25841 = load <16 x i16>, <16 x i16>* %25840, align 2, !tbaa !396
  %25842 = getelementptr inbounds i16, i16* %25817, i64 -28
  %25843 = bitcast i16* %25842 to <16 x i16>*
  %25844 = load <16 x i16>, <16 x i16>* %25843, align 2, !tbaa !396
  %25845 = getelementptr inbounds i16, i16* %25817, i64 -12
  %25846 = bitcast i16* %25845 to <16 x i16>*
  %25847 = load <16 x i16>, <16 x i16>* %25846, align 2, !tbaa !396
  %25848 = getelementptr inbounds i16, i16* %25817, i64 -26
  %25849 = bitcast i16* %25848 to <16 x i16>*
  %25850 = load <16 x i16>, <16 x i16>* %25849, align 2, !tbaa !396
  %25851 = getelementptr inbounds i16, i16* %25817, i64 -10
  %25852 = bitcast i16* %25851 to <16 x i16>*
  %25853 = load <16 x i16>, <16 x i16>* %25852, align 2, !tbaa !396
  %25854 = getelementptr inbounds i16, i16* %25817, i64 -27
  %25855 = bitcast i16* %25854 to <16 x i16>*
  %25856 = load <16 x i16>, <16 x i16>* %25855, align 2, !tbaa !396
  %25857 = getelementptr inbounds i16, i16* %25817, i64 -11
  %25858 = bitcast i16* %25857 to <16 x i16>*
  %25859 = load <16 x i16>, <16 x i16>* %25858, align 2, !tbaa !396
  %25860 = add <16 x i16> %25826, %25820
  %25861 = add <16 x i16> %25860, %25832
  %25862 = add <16 x i16> %25861, %25838
  %25863 = add <16 x i16> %25862, %25844
  %25864 = add <16 x i16> %25863, %25850
  %25865 = add <16 x i16> %25864, %25856
  %25866 = add <16 x i16> %25829, %25823
  %25867 = add <16 x i16> %25866, %25835
  %25868 = add <16 x i16> %25867, %25841
  %25869 = add <16 x i16> %25868, %25847
  %25870 = add <16 x i16> %25869, %25853
  %25871 = add <16 x i16> %25870, %25859
  %25872 = shufflevector <16 x i16> %25865, <16 x i16> %25871, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25873 = udiv <32 x i16> %25872, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %25874 = shufflevector <32 x i16> %25873, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25875 = zext i32 %.pre-phi3693 to i64
  %25876 = mul nsw i64 %303, %25875
  %25877 = add nsw i64 %305, %25876
  %25878 = getelementptr inbounds i16, i16* %blur_x917, i64 %25877
  %25879 = getelementptr inbounds i16, i16* %25878, i64 -32
  %25880 = bitcast i16* %25879 to <16 x i16>*
  store <16 x i16> %25874, <16 x i16>* %25880, align 2, !tbaa !399
  %25881 = shufflevector <32 x i16> %25873, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25882 = getelementptr inbounds i16, i16* %25878, i64 -16
  %25883 = bitcast i16* %25882 to <16 x i16>*
  store <16 x i16> %25881, <16 x i16>* %25883, align 2, !tbaa !399
  %25884 = zext i32 %.pre-phi3673 to i64
  %25885 = mul nsw i64 %25884, %349
  %25886 = add nsw i64 %25885, %300
  %25887 = getelementptr inbounds i16, i16* %blur_x917, i64 %25886
  %25888 = getelementptr inbounds i16, i16* %25887, i64 -32
  %25889 = bitcast i16* %25888 to <16 x i16>*
  %25890 = load <16 x i16>, <16 x i16>* %25889, align 2, !tbaa !399
  %25891 = getelementptr inbounds i16, i16* %25887, i64 -16
  %25892 = bitcast i16* %25891 to <16 x i16>*
  %25893 = load <16 x i16>, <16 x i16>* %25892, align 2, !tbaa !399
  %25894 = zext i32 %.pre-phi3669 to i64
  %25895 = mul nsw i64 %25894, %349
  %25896 = add nsw i64 %25895, %300
  %25897 = getelementptr inbounds i16, i16* %blur_x917, i64 %25896
  %25898 = getelementptr inbounds i16, i16* %25897, i64 -32
  %25899 = bitcast i16* %25898 to <16 x i16>*
  %25900 = load <16 x i16>, <16 x i16>* %25899, align 2, !tbaa !399
  %25901 = getelementptr inbounds i16, i16* %25897, i64 -16
  %25902 = bitcast i16* %25901 to <16 x i16>*
  %25903 = load <16 x i16>, <16 x i16>* %25902, align 2, !tbaa !399
  %25904 = zext i32 %.pre-phi3677 to i64
  %25905 = mul nsw i64 %25904, %349
  %25906 = add nsw i64 %25905, %300
  %25907 = getelementptr inbounds i16, i16* %blur_x917, i64 %25906
  %25908 = getelementptr inbounds i16, i16* %25907, i64 -32
  %25909 = bitcast i16* %25908 to <16 x i16>*
  %25910 = load <16 x i16>, <16 x i16>* %25909, align 2, !tbaa !399
  %25911 = getelementptr inbounds i16, i16* %25907, i64 -16
  %25912 = bitcast i16* %25911 to <16 x i16>*
  %25913 = load <16 x i16>, <16 x i16>* %25912, align 2, !tbaa !399
  %25914 = zext i32 %.pre-phi3681 to i64
  %25915 = mul nsw i64 %25914, %349
  %25916 = add nsw i64 %25915, %300
  %25917 = getelementptr inbounds i16, i16* %blur_x917, i64 %25916
  %25918 = getelementptr inbounds i16, i16* %25917, i64 -32
  %25919 = bitcast i16* %25918 to <16 x i16>*
  %25920 = load <16 x i16>, <16 x i16>* %25919, align 2, !tbaa !399
  %25921 = getelementptr inbounds i16, i16* %25917, i64 -16
  %25922 = bitcast i16* %25921 to <16 x i16>*
  %25923 = load <16 x i16>, <16 x i16>* %25922, align 2, !tbaa !399
  %25924 = zext i32 %.pre-phi3685 to i64
  %25925 = mul nsw i64 %25924, %349
  %25926 = add nsw i64 %25925, %300
  %25927 = getelementptr inbounds i16, i16* %blur_x917, i64 %25926
  %25928 = getelementptr inbounds i16, i16* %25927, i64 -32
  %25929 = bitcast i16* %25928 to <16 x i16>*
  %25930 = load <16 x i16>, <16 x i16>* %25929, align 2, !tbaa !399
  %25931 = getelementptr inbounds i16, i16* %25927, i64 -16
  %25932 = bitcast i16* %25931 to <16 x i16>*
  %25933 = load <16 x i16>, <16 x i16>* %25932, align 2, !tbaa !399
  %25934 = mul nsw i64 %25875, %349
  %25935 = add nsw i64 %25934, %300
  %25936 = getelementptr inbounds i16, i16* %blur_x917, i64 %25935
  %25937 = getelementptr inbounds i16, i16* %25936, i64 -32
  %25938 = bitcast i16* %25937 to <16 x i16>*
  %25939 = load <16 x i16>, <16 x i16>* %25938, align 2, !tbaa !399
  %25940 = getelementptr inbounds i16, i16* %25936, i64 -16
  %25941 = bitcast i16* %25940 to <16 x i16>*
  %25942 = load <16 x i16>, <16 x i16>* %25941, align 2, !tbaa !399
  %25943 = zext i32 %.pre-phi3689 to i64
  %25944 = mul nsw i64 %25943, %349
  %25945 = add nsw i64 %25944, %300
  %25946 = getelementptr inbounds i16, i16* %blur_x917, i64 %25945
  %25947 = getelementptr inbounds i16, i16* %25946, i64 -32
  %25948 = bitcast i16* %25947 to <16 x i16>*
  %25949 = load <16 x i16>, <16 x i16>* %25948, align 2, !tbaa !399
  %25950 = getelementptr inbounds i16, i16* %25946, i64 -16
  %25951 = bitcast i16* %25950 to <16 x i16>*
  %25952 = load <16 x i16>, <16 x i16>* %25951, align 2, !tbaa !399
  %25953 = add <16 x i16> %25900, %25890
  %25954 = add <16 x i16> %25953, %25910
  %25955 = add <16 x i16> %25954, %25920
  %25956 = add <16 x i16> %25955, %25930
  %25957 = add <16 x i16> %25956, %25939
  %25958 = add <16 x i16> %25957, %25949
  %25959 = add <16 x i16> %25903, %25893
  %25960 = add <16 x i16> %25959, %25913
  %25961 = add <16 x i16> %25960, %25923
  %25962 = add <16 x i16> %25961, %25933
  %25963 = add <16 x i16> %25962, %25942
  %25964 = add <16 x i16> %25963, %25952
  %25965 = shufflevector <16 x i16> %25958, <16 x i16> %25964, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25966 = udiv <32 x i16> %25965, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %25967 = shufflevector <32 x i16> %25966, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25968 = sext i32 %a393 to i64
  %25969 = add nsw i64 %25968, 8
  %25970 = mul nsw i64 %25969, %350
  %25971 = add nsw i64 %352, %25970
  %25972 = getelementptr inbounds i16, i16* %267, i64 %25971
  %25973 = getelementptr inbounds i16, i16* %25972, i64 -32
  %25974 = bitcast i16* %25973 to <16 x i16>*
  store <16 x i16> %25967, <16 x i16>* %25974, align 2, !tbaa !401
  %25975 = shufflevector <32 x i16> %25966, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25976 = getelementptr inbounds i16, i16* %25972, i64 -16
  %25977 = bitcast i16* %25976 to <16 x i16>*
  store <16 x i16> %25975, <16 x i16>* %25977, align 2, !tbaa !401
  br label %after_bb1441

"for blur_y.s0.x.x.rebased1456":                  ; preds = %"for blur_y.s0.x.x.rebased1456.preheader", %"consume blur_x1464"
  %indvars.iv3524 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1456.preheader" ], [ %indvars.iv.next3525, %"consume blur_x1464" ]
  %25978 = add nsw i64 %indvars.iv3524, %307
  %25979 = icmp slt i64 %25978, 1
  %25980 = trunc i64 %25978 to i32
  %25981 = shl nsw i32 %25980, 5
  %25982 = icmp sgt i32 %202, %25981
  %25983 = or i1 %25979, %25982
  br i1 %25983, label %"produce blur_x1462", label %"for blur_y.s0.x.x.rebased1456.consume blur_x1464_crit_edge"

"for blur_y.s0.x.x.rebased1456.consume blur_x1464_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1456"
  %.pre3714 = shl nsw i64 %25978, 5
  br label %"consume blur_x1464"

"end for blur_y.s0.x.x.rebased1457":              ; preds = %"consume blur_x1464", %after_bb1441
  br i1 %308, label %"for blur_y.s0.x.x.rebased1472.preheader", label %"end for blur_y.s0.x.x.rebased1473", !prof !386

"for blur_y.s0.x.x.rebased1472.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1457"
  %25984 = sext i32 %t17621108 to i64
  %25985 = zext i32 %.pre-phi3673 to i64
  %25986 = mul nsw i64 %25985, %353
  %25987 = sub nsw i64 %25986, %302
  %25988 = zext i32 %.pre-phi3669 to i64
  %25989 = mul nsw i64 %25988, %353
  %25990 = sub nsw i64 %25989, %302
  %25991 = zext i32 %.pre-phi3677 to i64
  %25992 = mul nsw i64 %25991, %353
  %25993 = sub nsw i64 %25992, %302
  %25994 = zext i32 %.pre-phi3681 to i64
  %25995 = mul nsw i64 %25994, %353
  %25996 = sub nsw i64 %25995, %302
  %25997 = zext i32 %.pre-phi3685 to i64
  %25998 = mul nsw i64 %25997, %353
  %25999 = sub nsw i64 %25998, %302
  %26000 = zext i32 %.pre-phi3693 to i64
  %26001 = mul nsw i64 %26000, %353
  %26002 = sub nsw i64 %26001, %302
  %26003 = zext i32 %.pre-phi3689 to i64
  %26004 = mul nsw i64 %26003, %353
  %26005 = sub nsw i64 %26004, %302
  %26006 = sext i32 %a393 to i64
  %26007 = add nsw i64 %26006, 8
  %26008 = mul nsw i64 %26007, %350
  %26009 = add nsw i64 %26008, %354
  br label %"for blur_y.s0.x.x.rebased1472"

"produce blur_x1462":                             ; preds = %"for blur_y.s0.x.x.rebased1456"
  %t8801463 = add nsw i32 %401, %25981
  %26010 = sext i32 %t8801463 to i64
  %26011 = getelementptr inbounds i16, i16* %read_input860, i64 %26010
  %26012 = getelementptr inbounds i16, i16* %26011, i64 1
  %26013 = bitcast i16* %26012 to <16 x i16>*
  %26014 = load <16 x i16>, <16 x i16>* %26013, align 2, !tbaa !396
  %26015 = getelementptr inbounds i16, i16* %26011, i64 17
  %26016 = bitcast i16* %26015 to <16 x i16>*
  %26017 = load <16 x i16>, <16 x i16>* %26016, align 2, !tbaa !396
  %26018 = bitcast i16* %26011 to <16 x i16>*
  %26019 = load <16 x i16>, <16 x i16>* %26018, align 2, !tbaa !396
  %26020 = getelementptr inbounds i16, i16* %26011, i64 16
  %26021 = bitcast i16* %26020 to <16 x i16>*
  %26022 = load <16 x i16>, <16 x i16>* %26021, align 2, !tbaa !396
  %26023 = getelementptr inbounds i16, i16* %26011, i64 2
  %26024 = bitcast i16* %26023 to <16 x i16>*
  %26025 = load <16 x i16>, <16 x i16>* %26024, align 2, !tbaa !396
  %26026 = getelementptr inbounds i16, i16* %26011, i64 18
  %26027 = bitcast i16* %26026 to <16 x i16>*
  %26028 = load <16 x i16>, <16 x i16>* %26027, align 2, !tbaa !396
  %26029 = getelementptr inbounds i16, i16* %26011, i64 3
  %26030 = bitcast i16* %26029 to <16 x i16>*
  %26031 = load <16 x i16>, <16 x i16>* %26030, align 2, !tbaa !396
  %26032 = getelementptr inbounds i16, i16* %26011, i64 19
  %26033 = bitcast i16* %26032 to <16 x i16>*
  %26034 = load <16 x i16>, <16 x i16>* %26033, align 2, !tbaa !396
  %26035 = getelementptr inbounds i16, i16* %26011, i64 4
  %26036 = bitcast i16* %26035 to <16 x i16>*
  %26037 = load <16 x i16>, <16 x i16>* %26036, align 2, !tbaa !396
  %26038 = getelementptr inbounds i16, i16* %26011, i64 20
  %26039 = bitcast i16* %26038 to <16 x i16>*
  %26040 = load <16 x i16>, <16 x i16>* %26039, align 2, !tbaa !396
  %26041 = getelementptr inbounds i16, i16* %26011, i64 6
  %26042 = bitcast i16* %26041 to <16 x i16>*
  %26043 = load <16 x i16>, <16 x i16>* %26042, align 2, !tbaa !396
  %26044 = getelementptr inbounds i16, i16* %26011, i64 22
  %26045 = bitcast i16* %26044 to <16 x i16>*
  %26046 = load <16 x i16>, <16 x i16>* %26045, align 2, !tbaa !396
  %26047 = getelementptr inbounds i16, i16* %26011, i64 5
  %26048 = bitcast i16* %26047 to <16 x i16>*
  %26049 = load <16 x i16>, <16 x i16>* %26048, align 2, !tbaa !396
  %26050 = getelementptr inbounds i16, i16* %26011, i64 21
  %26051 = bitcast i16* %26050 to <16 x i16>*
  %26052 = load <16 x i16>, <16 x i16>* %26051, align 2, !tbaa !396
  %26053 = add <16 x i16> %26019, %26014
  %26054 = add <16 x i16> %26053, %26025
  %26055 = add <16 x i16> %26054, %26031
  %26056 = add <16 x i16> %26055, %26037
  %26057 = add <16 x i16> %26056, %26043
  %26058 = add <16 x i16> %26057, %26049
  %26059 = add <16 x i16> %26022, %26017
  %26060 = add <16 x i16> %26059, %26028
  %26061 = add <16 x i16> %26060, %26034
  %26062 = add <16 x i16> %26061, %26040
  %26063 = add <16 x i16> %26062, %26046
  %26064 = add <16 x i16> %26063, %26052
  %26065 = shufflevector <16 x i16> %26058, <16 x i16> %26064, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26066 = udiv <32 x i16> %26065, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %26067 = shufflevector <32 x i16> %26066, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26068 = shl nsw i64 %25978, 5
  %26069 = add nsw i64 %26068, %25791
  %26070 = getelementptr inbounds i16, i16* %blur_x917, i64 %26069
  %26071 = bitcast i16* %26070 to <16 x i16>*
  store <16 x i16> %26067, <16 x i16>* %26071, align 2, !tbaa !399
  %26072 = shufflevector <32 x i16> %26066, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26073 = getelementptr inbounds i16, i16* %26070, i64 16
  %26074 = bitcast i16* %26073 to <16 x i16>*
  store <16 x i16> %26072, <16 x i16>* %26074, align 2, !tbaa !399
  br label %"consume blur_x1464"

"consume blur_x1464":                             ; preds = %"for blur_y.s0.x.x.rebased1456.consume blur_x1464_crit_edge", %"produce blur_x1462"
  %.pre-phi3715 = phi i64 [ %.pre3714, %"for blur_y.s0.x.x.rebased1456.consume blur_x1464_crit_edge" ], [ %26068, %"produce blur_x1462" ]
  %26075 = add nsw i64 %25794, %.pre-phi3715
  %26076 = getelementptr inbounds i16, i16* %blur_x917, i64 %26075
  %26077 = bitcast i16* %26076 to <16 x i16>*
  %26078 = load <16 x i16>, <16 x i16>* %26077, align 2, !tbaa !399
  %26079 = getelementptr inbounds i16, i16* %26076, i64 16
  %26080 = bitcast i16* %26079 to <16 x i16>*
  %26081 = load <16 x i16>, <16 x i16>* %26080, align 2, !tbaa !399
  %26082 = add nsw i64 %25797, %.pre-phi3715
  %26083 = getelementptr inbounds i16, i16* %blur_x917, i64 %26082
  %26084 = bitcast i16* %26083 to <16 x i16>*
  %26085 = load <16 x i16>, <16 x i16>* %26084, align 2, !tbaa !399
  %26086 = getelementptr inbounds i16, i16* %26083, i64 16
  %26087 = bitcast i16* %26086 to <16 x i16>*
  %26088 = load <16 x i16>, <16 x i16>* %26087, align 2, !tbaa !399
  %26089 = add nsw i64 %25800, %.pre-phi3715
  %26090 = getelementptr inbounds i16, i16* %blur_x917, i64 %26089
  %26091 = bitcast i16* %26090 to <16 x i16>*
  %26092 = load <16 x i16>, <16 x i16>* %26091, align 2, !tbaa !399
  %26093 = getelementptr inbounds i16, i16* %26090, i64 16
  %26094 = bitcast i16* %26093 to <16 x i16>*
  %26095 = load <16 x i16>, <16 x i16>* %26094, align 2, !tbaa !399
  %26096 = add nsw i64 %25803, %.pre-phi3715
  %26097 = getelementptr inbounds i16, i16* %blur_x917, i64 %26096
  %26098 = bitcast i16* %26097 to <16 x i16>*
  %26099 = load <16 x i16>, <16 x i16>* %26098, align 2, !tbaa !399
  %26100 = getelementptr inbounds i16, i16* %26097, i64 16
  %26101 = bitcast i16* %26100 to <16 x i16>*
  %26102 = load <16 x i16>, <16 x i16>* %26101, align 2, !tbaa !399
  %26103 = add nsw i64 %25806, %.pre-phi3715
  %26104 = getelementptr inbounds i16, i16* %blur_x917, i64 %26103
  %26105 = bitcast i16* %26104 to <16 x i16>*
  %26106 = load <16 x i16>, <16 x i16>* %26105, align 2, !tbaa !399
  %26107 = getelementptr inbounds i16, i16* %26104, i64 16
  %26108 = bitcast i16* %26107 to <16 x i16>*
  %26109 = load <16 x i16>, <16 x i16>* %26108, align 2, !tbaa !399
  %26110 = add nsw i64 %25809, %.pre-phi3715
  %26111 = getelementptr inbounds i16, i16* %blur_x917, i64 %26110
  %26112 = bitcast i16* %26111 to <16 x i16>*
  %26113 = load <16 x i16>, <16 x i16>* %26112, align 2, !tbaa !399
  %26114 = getelementptr inbounds i16, i16* %26111, i64 16
  %26115 = bitcast i16* %26114 to <16 x i16>*
  %26116 = load <16 x i16>, <16 x i16>* %26115, align 2, !tbaa !399
  %26117 = add nsw i64 %25812, %.pre-phi3715
  %26118 = getelementptr inbounds i16, i16* %blur_x917, i64 %26117
  %26119 = bitcast i16* %26118 to <16 x i16>*
  %26120 = load <16 x i16>, <16 x i16>* %26119, align 2, !tbaa !399
  %26121 = getelementptr inbounds i16, i16* %26118, i64 16
  %26122 = bitcast i16* %26121 to <16 x i16>*
  %26123 = load <16 x i16>, <16 x i16>* %26122, align 2, !tbaa !399
  %26124 = add <16 x i16> %26085, %26078
  %26125 = add <16 x i16> %26124, %26092
  %26126 = add <16 x i16> %26125, %26099
  %26127 = add <16 x i16> %26126, %26106
  %26128 = add <16 x i16> %26127, %26113
  %26129 = add <16 x i16> %26128, %26120
  %26130 = add <16 x i16> %26088, %26081
  %26131 = add <16 x i16> %26130, %26095
  %26132 = add <16 x i16> %26131, %26102
  %26133 = add <16 x i16> %26132, %26109
  %26134 = add <16 x i16> %26133, %26116
  %26135 = add <16 x i16> %26134, %26123
  %26136 = shufflevector <16 x i16> %26129, <16 x i16> %26135, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26137 = udiv <32 x i16> %26136, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %26138 = shufflevector <32 x i16> %26137, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26139 = add nsw i64 %25816, %.pre-phi3715
  %26140 = getelementptr inbounds i16, i16* %267, i64 %26139
  %26141 = bitcast i16* %26140 to <16 x i16>*
  store <16 x i16> %26138, <16 x i16>* %26141, align 2, !tbaa !401
  %26142 = shufflevector <32 x i16> %26137, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26143 = getelementptr inbounds i16, i16* %26140, i64 16
  %26144 = bitcast i16* %26143 to <16 x i16>*
  store <16 x i16> %26142, <16 x i16>* %26144, align 2, !tbaa !401
  %indvars.iv.next3525 = add nuw nsw i64 %indvars.iv3524, 1
  %.not2737 = icmp eq i64 %indvars.iv.next3525, %546
  br i1 %.not2737, label %"end for blur_y.s0.x.x.rebased1457", label %"for blur_y.s0.x.x.rebased1456"

"for blur_y.s0.x.x.rebased1472":                  ; preds = %"for blur_y.s0.x.x.rebased1472.preheader", %"consume blur_x1483"
  %blur_y.s0.x.x.rebased1474 = phi i32 [ %26287, %"consume blur_x1483" ], [ 0, %"for blur_y.s0.x.x.rebased1472.preheader" ]
  %26145 = add nsw i32 %blur_y.s0.x.x.rebased1474, %t1670852
  %a2859 = shl nsw i32 %26145, 5
  %26146 = icmp sgt i32 %t1691, %a2859
  %blur_y.s0.x.v0.base.s1475 = select i1 %26146, i32 %a2859, i32 %t1691
  %26147 = icmp slt i32 %26145, 1
  %26148 = icmp sgt i32 %202, %a2859
  %26149 = or i1 %26147, %26148
  br i1 %26149, label %"produce blur_x1480", label %"consume blur_x1483"

"end for blur_y.s0.x.x.rebased1473":              ; preds = %"consume blur_x1483", %"end for blur_y.s0.x.x.rebased1457"
  br i1 %233, label %"produce blur_x1487", label %after_bb1484

"produce blur_x1480":                             ; preds = %"for blur_y.s0.x.x.rebased1472"
  %26150 = icmp slt i32 %blur_y.s0.x.v0.base.s1475, %202
  %blur_x.s0.x.v1.base.s1481 = select i1 %26150, i32 %blur_y.s0.x.v0.base.s1475, i32 %202
  %t8851482 = add nsw i32 %401, %blur_x.s0.x.v1.base.s1481
  %26151 = sext i32 %t8851482 to i64
  %26152 = getelementptr inbounds i16, i16* %read_input860, i64 %26151
  %26153 = getelementptr inbounds i16, i16* %26152, i64 1
  %26154 = bitcast i16* %26153 to <16 x i16>*
  %26155 = load <16 x i16>, <16 x i16>* %26154, align 2, !tbaa !396
  %26156 = getelementptr inbounds i16, i16* %26152, i64 17
  %26157 = bitcast i16* %26156 to <16 x i16>*
  %26158 = load <16 x i16>, <16 x i16>* %26157, align 2, !tbaa !396
  %26159 = bitcast i16* %26152 to <16 x i16>*
  %26160 = load <16 x i16>, <16 x i16>* %26159, align 2, !tbaa !396
  %26161 = getelementptr inbounds i16, i16* %26152, i64 16
  %26162 = bitcast i16* %26161 to <16 x i16>*
  %26163 = load <16 x i16>, <16 x i16>* %26162, align 2, !tbaa !396
  %26164 = getelementptr inbounds i16, i16* %26152, i64 2
  %26165 = bitcast i16* %26164 to <16 x i16>*
  %26166 = load <16 x i16>, <16 x i16>* %26165, align 2, !tbaa !396
  %26167 = getelementptr inbounds i16, i16* %26152, i64 18
  %26168 = bitcast i16* %26167 to <16 x i16>*
  %26169 = load <16 x i16>, <16 x i16>* %26168, align 2, !tbaa !396
  %26170 = getelementptr inbounds i16, i16* %26152, i64 3
  %26171 = bitcast i16* %26170 to <16 x i16>*
  %26172 = load <16 x i16>, <16 x i16>* %26171, align 2, !tbaa !396
  %26173 = getelementptr inbounds i16, i16* %26152, i64 19
  %26174 = bitcast i16* %26173 to <16 x i16>*
  %26175 = load <16 x i16>, <16 x i16>* %26174, align 2, !tbaa !396
  %26176 = getelementptr inbounds i16, i16* %26152, i64 4
  %26177 = bitcast i16* %26176 to <16 x i16>*
  %26178 = load <16 x i16>, <16 x i16>* %26177, align 2, !tbaa !396
  %26179 = getelementptr inbounds i16, i16* %26152, i64 20
  %26180 = bitcast i16* %26179 to <16 x i16>*
  %26181 = load <16 x i16>, <16 x i16>* %26180, align 2, !tbaa !396
  %26182 = getelementptr inbounds i16, i16* %26152, i64 6
  %26183 = bitcast i16* %26182 to <16 x i16>*
  %26184 = load <16 x i16>, <16 x i16>* %26183, align 2, !tbaa !396
  %26185 = getelementptr inbounds i16, i16* %26152, i64 22
  %26186 = bitcast i16* %26185 to <16 x i16>*
  %26187 = load <16 x i16>, <16 x i16>* %26186, align 2, !tbaa !396
  %26188 = getelementptr inbounds i16, i16* %26152, i64 5
  %26189 = bitcast i16* %26188 to <16 x i16>*
  %26190 = load <16 x i16>, <16 x i16>* %26189, align 2, !tbaa !396
  %26191 = getelementptr inbounds i16, i16* %26152, i64 21
  %26192 = bitcast i16* %26191 to <16 x i16>*
  %26193 = load <16 x i16>, <16 x i16>* %26192, align 2, !tbaa !396
  %26194 = add <16 x i16> %26160, %26155
  %26195 = add <16 x i16> %26194, %26166
  %26196 = add <16 x i16> %26195, %26172
  %26197 = add <16 x i16> %26196, %26178
  %26198 = add <16 x i16> %26197, %26184
  %26199 = add <16 x i16> %26198, %26190
  %26200 = add <16 x i16> %26163, %26158
  %26201 = add <16 x i16> %26200, %26169
  %26202 = add <16 x i16> %26201, %26175
  %26203 = add <16 x i16> %26202, %26181
  %26204 = add <16 x i16> %26203, %26187
  %26205 = add <16 x i16> %26204, %26193
  %26206 = shufflevector <16 x i16> %26199, <16 x i16> %26205, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26207 = udiv <32 x i16> %26206, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %26208 = shufflevector <32 x i16> %26207, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26209 = sext i32 %blur_x.s0.x.v1.base.s1481 to i64
  %26210 = add nsw i64 %26209, %25984
  %26211 = getelementptr inbounds i16, i16* %blur_x917, i64 %26210
  %26212 = bitcast i16* %26211 to <16 x i16>*
  store <16 x i16> %26208, <16 x i16>* %26212, align 2, !tbaa !399
  %26213 = shufflevector <32 x i16> %26207, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26214 = getelementptr inbounds i16, i16* %26211, i64 16
  %26215 = bitcast i16* %26214 to <16 x i16>*
  store <16 x i16> %26213, <16 x i16>* %26215, align 2, !tbaa !399
  br label %"consume blur_x1483"

"consume blur_x1483":                             ; preds = %"for blur_y.s0.x.x.rebased1472", %"produce blur_x1480"
  %26216 = sext i32 %blur_y.s0.x.v0.base.s1475 to i64
  %26217 = add nsw i64 %25987, %26216
  %26218 = getelementptr inbounds i16, i16* %blur_x917, i64 %26217
  %26219 = bitcast i16* %26218 to <16 x i16>*
  %26220 = load <16 x i16>, <16 x i16>* %26219, align 2, !tbaa !399
  %26221 = getelementptr inbounds i16, i16* %26218, i64 16
  %26222 = bitcast i16* %26221 to <16 x i16>*
  %26223 = load <16 x i16>, <16 x i16>* %26222, align 2, !tbaa !399
  %26224 = add nsw i64 %25990, %26216
  %26225 = getelementptr inbounds i16, i16* %blur_x917, i64 %26224
  %26226 = bitcast i16* %26225 to <16 x i16>*
  %26227 = load <16 x i16>, <16 x i16>* %26226, align 2, !tbaa !399
  %26228 = getelementptr inbounds i16, i16* %26225, i64 16
  %26229 = bitcast i16* %26228 to <16 x i16>*
  %26230 = load <16 x i16>, <16 x i16>* %26229, align 2, !tbaa !399
  %26231 = add nsw i64 %25993, %26216
  %26232 = getelementptr inbounds i16, i16* %blur_x917, i64 %26231
  %26233 = bitcast i16* %26232 to <16 x i16>*
  %26234 = load <16 x i16>, <16 x i16>* %26233, align 2, !tbaa !399
  %26235 = getelementptr inbounds i16, i16* %26232, i64 16
  %26236 = bitcast i16* %26235 to <16 x i16>*
  %26237 = load <16 x i16>, <16 x i16>* %26236, align 2, !tbaa !399
  %26238 = add nsw i64 %25996, %26216
  %26239 = getelementptr inbounds i16, i16* %blur_x917, i64 %26238
  %26240 = bitcast i16* %26239 to <16 x i16>*
  %26241 = load <16 x i16>, <16 x i16>* %26240, align 2, !tbaa !399
  %26242 = getelementptr inbounds i16, i16* %26239, i64 16
  %26243 = bitcast i16* %26242 to <16 x i16>*
  %26244 = load <16 x i16>, <16 x i16>* %26243, align 2, !tbaa !399
  %26245 = add nsw i64 %25999, %26216
  %26246 = getelementptr inbounds i16, i16* %blur_x917, i64 %26245
  %26247 = bitcast i16* %26246 to <16 x i16>*
  %26248 = load <16 x i16>, <16 x i16>* %26247, align 2, !tbaa !399
  %26249 = getelementptr inbounds i16, i16* %26246, i64 16
  %26250 = bitcast i16* %26249 to <16 x i16>*
  %26251 = load <16 x i16>, <16 x i16>* %26250, align 2, !tbaa !399
  %26252 = add nsw i64 %26002, %26216
  %26253 = getelementptr inbounds i16, i16* %blur_x917, i64 %26252
  %26254 = bitcast i16* %26253 to <16 x i16>*
  %26255 = load <16 x i16>, <16 x i16>* %26254, align 2, !tbaa !399
  %26256 = getelementptr inbounds i16, i16* %26253, i64 16
  %26257 = bitcast i16* %26256 to <16 x i16>*
  %26258 = load <16 x i16>, <16 x i16>* %26257, align 2, !tbaa !399
  %26259 = add nsw i64 %26005, %26216
  %26260 = getelementptr inbounds i16, i16* %blur_x917, i64 %26259
  %26261 = bitcast i16* %26260 to <16 x i16>*
  %26262 = load <16 x i16>, <16 x i16>* %26261, align 2, !tbaa !399
  %26263 = getelementptr inbounds i16, i16* %26260, i64 16
  %26264 = bitcast i16* %26263 to <16 x i16>*
  %26265 = load <16 x i16>, <16 x i16>* %26264, align 2, !tbaa !399
  %26266 = add <16 x i16> %26227, %26220
  %26267 = add <16 x i16> %26266, %26234
  %26268 = add <16 x i16> %26267, %26241
  %26269 = add <16 x i16> %26268, %26248
  %26270 = add <16 x i16> %26269, %26255
  %26271 = add <16 x i16> %26270, %26262
  %26272 = add <16 x i16> %26230, %26223
  %26273 = add <16 x i16> %26272, %26237
  %26274 = add <16 x i16> %26273, %26244
  %26275 = add <16 x i16> %26274, %26251
  %26276 = add <16 x i16> %26275, %26258
  %26277 = add <16 x i16> %26276, %26265
  %26278 = shufflevector <16 x i16> %26271, <16 x i16> %26277, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26279 = udiv <32 x i16> %26278, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %26280 = shufflevector <32 x i16> %26279, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26281 = add nsw i64 %26009, %26216
  %26282 = getelementptr inbounds i16, i16* %267, i64 %26281
  %26283 = bitcast i16* %26282 to <16 x i16>*
  store <16 x i16> %26280, <16 x i16>* %26283, align 2, !tbaa !401
  %26284 = shufflevector <32 x i16> %26279, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26285 = getelementptr inbounds i16, i16* %26282, i64 16
  %26286 = bitcast i16* %26285 to <16 x i16>*
  store <16 x i16> %26284, <16 x i16>* %26286, align 2, !tbaa !401
  %26287 = add nuw nsw i32 %blur_y.s0.x.x.rebased1474, 1
  %.not2736 = icmp eq i32 %26287, %t1727936
  br i1 %.not2736, label %"end for blur_y.s0.x.x.rebased1473", label %"for blur_y.s0.x.x.rebased1472"

after_bb1484:                                     ; preds = %"end for blur_y.s0.x.x.rebased1473", %"produce blur_x1487"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1499.preheader", label %"end for blur_y.s0.x.x.rebased1500", !prof !386

"for blur_y.s0.x.x.rebased1499.preheader":        ; preds = %after_bb1484
  %26288 = sext i32 %t17781151 to i64
  %26289 = zext i32 %.pre-phi3677 to i64
  %26290 = mul nsw i64 %26289, %353
  %26291 = sub nsw i64 %26290, %302
  %26292 = zext i32 %.pre-phi3673 to i64
  %26293 = mul nsw i64 %26292, %353
  %26294 = sub nsw i64 %26293, %302
  %26295 = zext i32 %.pre-phi3681 to i64
  %26296 = mul nsw i64 %26295, %353
  %26297 = sub nsw i64 %26296, %302
  %26298 = zext i32 %.pre-phi3685 to i64
  %26299 = mul nsw i64 %26298, %353
  %26300 = sub nsw i64 %26299, %302
  %26301 = zext i32 %.pre-phi3689 to i64
  %26302 = mul nsw i64 %26301, %353
  %26303 = sub nsw i64 %26302, %302
  %26304 = zext i32 %.pre-phi3699 to i64
  %26305 = mul nsw i64 %26304, %353
  %26306 = sub nsw i64 %26305, %302
  %26307 = zext i32 %.pre-phi3693 to i64
  %26308 = mul nsw i64 %26307, %353
  %26309 = sub nsw i64 %26308, %302
  %26310 = sext i32 %a393 to i64
  %26311 = add nsw i64 %26310, 9
  %26312 = mul nsw i64 %26311, %350
  %26313 = add nsw i64 %26312, %354
  br label %"for blur_y.s0.x.x.rebased1499"

"produce blur_x1487":                             ; preds = %"end for blur_y.s0.x.x.rebased1473"
  %26314 = getelementptr inbounds i16, i16* %read_input860, i64 %405
  %26315 = getelementptr inbounds i16, i16* %26314, i64 -31
  %26316 = bitcast i16* %26315 to <16 x i16>*
  %26317 = load <16 x i16>, <16 x i16>* %26316, align 2, !tbaa !396
  %26318 = getelementptr inbounds i16, i16* %26314, i64 -15
  %26319 = bitcast i16* %26318 to <16 x i16>*
  %26320 = load <16 x i16>, <16 x i16>* %26319, align 2, !tbaa !396
  %26321 = getelementptr inbounds i16, i16* %26314, i64 -32
  %26322 = bitcast i16* %26321 to <16 x i16>*
  %26323 = load <16 x i16>, <16 x i16>* %26322, align 2, !tbaa !396
  %26324 = getelementptr inbounds i16, i16* %26314, i64 -16
  %26325 = bitcast i16* %26324 to <16 x i16>*
  %26326 = load <16 x i16>, <16 x i16>* %26325, align 2, !tbaa !396
  %26327 = getelementptr inbounds i16, i16* %26314, i64 -30
  %26328 = bitcast i16* %26327 to <16 x i16>*
  %26329 = load <16 x i16>, <16 x i16>* %26328, align 2, !tbaa !396
  %26330 = getelementptr inbounds i16, i16* %26314, i64 -14
  %26331 = bitcast i16* %26330 to <16 x i16>*
  %26332 = load <16 x i16>, <16 x i16>* %26331, align 2, !tbaa !396
  %26333 = getelementptr inbounds i16, i16* %26314, i64 -29
  %26334 = bitcast i16* %26333 to <16 x i16>*
  %26335 = load <16 x i16>, <16 x i16>* %26334, align 2, !tbaa !396
  %26336 = getelementptr inbounds i16, i16* %26314, i64 -13
  %26337 = bitcast i16* %26336 to <16 x i16>*
  %26338 = load <16 x i16>, <16 x i16>* %26337, align 2, !tbaa !396
  %26339 = getelementptr inbounds i16, i16* %26314, i64 -28
  %26340 = bitcast i16* %26339 to <16 x i16>*
  %26341 = load <16 x i16>, <16 x i16>* %26340, align 2, !tbaa !396
  %26342 = getelementptr inbounds i16, i16* %26314, i64 -12
  %26343 = bitcast i16* %26342 to <16 x i16>*
  %26344 = load <16 x i16>, <16 x i16>* %26343, align 2, !tbaa !396
  %26345 = getelementptr inbounds i16, i16* %26314, i64 -26
  %26346 = bitcast i16* %26345 to <16 x i16>*
  %26347 = load <16 x i16>, <16 x i16>* %26346, align 2, !tbaa !396
  %26348 = getelementptr inbounds i16, i16* %26314, i64 -10
  %26349 = bitcast i16* %26348 to <16 x i16>*
  %26350 = load <16 x i16>, <16 x i16>* %26349, align 2, !tbaa !396
  %26351 = getelementptr inbounds i16, i16* %26314, i64 -27
  %26352 = bitcast i16* %26351 to <16 x i16>*
  %26353 = load <16 x i16>, <16 x i16>* %26352, align 2, !tbaa !396
  %26354 = getelementptr inbounds i16, i16* %26314, i64 -11
  %26355 = bitcast i16* %26354 to <16 x i16>*
  %26356 = load <16 x i16>, <16 x i16>* %26355, align 2, !tbaa !396
  %26357 = add <16 x i16> %26323, %26317
  %26358 = add <16 x i16> %26357, %26329
  %26359 = add <16 x i16> %26358, %26335
  %26360 = add <16 x i16> %26359, %26341
  %26361 = add <16 x i16> %26360, %26347
  %26362 = add <16 x i16> %26361, %26353
  %26363 = add <16 x i16> %26326, %26320
  %26364 = add <16 x i16> %26363, %26332
  %26365 = add <16 x i16> %26364, %26338
  %26366 = add <16 x i16> %26365, %26344
  %26367 = add <16 x i16> %26366, %26350
  %26368 = add <16 x i16> %26367, %26356
  %26369 = shufflevector <16 x i16> %26362, <16 x i16> %26368, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26370 = udiv <32 x i16> %26369, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %26371 = shufflevector <32 x i16> %26370, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26372 = zext i32 %.pre-phi3699 to i64
  %26373 = mul nsw i64 %303, %26372
  %26374 = add nsw i64 %305, %26373
  %26375 = getelementptr inbounds i16, i16* %blur_x917, i64 %26374
  %26376 = getelementptr inbounds i16, i16* %26375, i64 -32
  %26377 = bitcast i16* %26376 to <16 x i16>*
  store <16 x i16> %26371, <16 x i16>* %26377, align 2, !tbaa !399
  %26378 = shufflevector <32 x i16> %26370, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26379 = getelementptr inbounds i16, i16* %26375, i64 -16
  %26380 = bitcast i16* %26379 to <16 x i16>*
  store <16 x i16> %26378, <16 x i16>* %26380, align 2, !tbaa !399
  %26381 = zext i32 %.pre-phi3677 to i64
  %26382 = mul nsw i64 %26381, %349
  %26383 = add nsw i64 %26382, %300
  %26384 = getelementptr inbounds i16, i16* %blur_x917, i64 %26383
  %26385 = getelementptr inbounds i16, i16* %26384, i64 -32
  %26386 = bitcast i16* %26385 to <16 x i16>*
  %26387 = load <16 x i16>, <16 x i16>* %26386, align 2, !tbaa !399
  %26388 = getelementptr inbounds i16, i16* %26384, i64 -16
  %26389 = bitcast i16* %26388 to <16 x i16>*
  %26390 = load <16 x i16>, <16 x i16>* %26389, align 2, !tbaa !399
  %26391 = zext i32 %.pre-phi3673 to i64
  %26392 = mul nsw i64 %26391, %349
  %26393 = add nsw i64 %26392, %300
  %26394 = getelementptr inbounds i16, i16* %blur_x917, i64 %26393
  %26395 = getelementptr inbounds i16, i16* %26394, i64 -32
  %26396 = bitcast i16* %26395 to <16 x i16>*
  %26397 = load <16 x i16>, <16 x i16>* %26396, align 2, !tbaa !399
  %26398 = getelementptr inbounds i16, i16* %26394, i64 -16
  %26399 = bitcast i16* %26398 to <16 x i16>*
  %26400 = load <16 x i16>, <16 x i16>* %26399, align 2, !tbaa !399
  %26401 = zext i32 %.pre-phi3681 to i64
  %26402 = mul nsw i64 %26401, %349
  %26403 = add nsw i64 %26402, %300
  %26404 = getelementptr inbounds i16, i16* %blur_x917, i64 %26403
  %26405 = getelementptr inbounds i16, i16* %26404, i64 -32
  %26406 = bitcast i16* %26405 to <16 x i16>*
  %26407 = load <16 x i16>, <16 x i16>* %26406, align 2, !tbaa !399
  %26408 = getelementptr inbounds i16, i16* %26404, i64 -16
  %26409 = bitcast i16* %26408 to <16 x i16>*
  %26410 = load <16 x i16>, <16 x i16>* %26409, align 2, !tbaa !399
  %26411 = zext i32 %.pre-phi3685 to i64
  %26412 = mul nsw i64 %26411, %349
  %26413 = add nsw i64 %26412, %300
  %26414 = getelementptr inbounds i16, i16* %blur_x917, i64 %26413
  %26415 = getelementptr inbounds i16, i16* %26414, i64 -32
  %26416 = bitcast i16* %26415 to <16 x i16>*
  %26417 = load <16 x i16>, <16 x i16>* %26416, align 2, !tbaa !399
  %26418 = getelementptr inbounds i16, i16* %26414, i64 -16
  %26419 = bitcast i16* %26418 to <16 x i16>*
  %26420 = load <16 x i16>, <16 x i16>* %26419, align 2, !tbaa !399
  %26421 = zext i32 %.pre-phi3689 to i64
  %26422 = mul nsw i64 %26421, %349
  %26423 = add nsw i64 %26422, %300
  %26424 = getelementptr inbounds i16, i16* %blur_x917, i64 %26423
  %26425 = getelementptr inbounds i16, i16* %26424, i64 -32
  %26426 = bitcast i16* %26425 to <16 x i16>*
  %26427 = load <16 x i16>, <16 x i16>* %26426, align 2, !tbaa !399
  %26428 = getelementptr inbounds i16, i16* %26424, i64 -16
  %26429 = bitcast i16* %26428 to <16 x i16>*
  %26430 = load <16 x i16>, <16 x i16>* %26429, align 2, !tbaa !399
  %26431 = mul nsw i64 %26372, %349
  %26432 = add nsw i64 %26431, %300
  %26433 = getelementptr inbounds i16, i16* %blur_x917, i64 %26432
  %26434 = getelementptr inbounds i16, i16* %26433, i64 -32
  %26435 = bitcast i16* %26434 to <16 x i16>*
  %26436 = load <16 x i16>, <16 x i16>* %26435, align 2, !tbaa !399
  %26437 = getelementptr inbounds i16, i16* %26433, i64 -16
  %26438 = bitcast i16* %26437 to <16 x i16>*
  %26439 = load <16 x i16>, <16 x i16>* %26438, align 2, !tbaa !399
  %26440 = zext i32 %.pre-phi3693 to i64
  %26441 = mul nsw i64 %26440, %349
  %26442 = add nsw i64 %26441, %300
  %26443 = getelementptr inbounds i16, i16* %blur_x917, i64 %26442
  %26444 = getelementptr inbounds i16, i16* %26443, i64 -32
  %26445 = bitcast i16* %26444 to <16 x i16>*
  %26446 = load <16 x i16>, <16 x i16>* %26445, align 2, !tbaa !399
  %26447 = getelementptr inbounds i16, i16* %26443, i64 -16
  %26448 = bitcast i16* %26447 to <16 x i16>*
  %26449 = load <16 x i16>, <16 x i16>* %26448, align 2, !tbaa !399
  %26450 = add <16 x i16> %26397, %26387
  %26451 = add <16 x i16> %26450, %26407
  %26452 = add <16 x i16> %26451, %26417
  %26453 = add <16 x i16> %26452, %26427
  %26454 = add <16 x i16> %26453, %26436
  %26455 = add <16 x i16> %26454, %26446
  %26456 = add <16 x i16> %26400, %26390
  %26457 = add <16 x i16> %26456, %26410
  %26458 = add <16 x i16> %26457, %26420
  %26459 = add <16 x i16> %26458, %26430
  %26460 = add <16 x i16> %26459, %26439
  %26461 = add <16 x i16> %26460, %26449
  %26462 = shufflevector <16 x i16> %26455, <16 x i16> %26461, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26463 = udiv <32 x i16> %26462, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %26464 = shufflevector <32 x i16> %26463, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26465 = sext i32 %a393 to i64
  %26466 = add nsw i64 %26465, 9
  %26467 = mul nsw i64 %26466, %350
  %26468 = add nsw i64 %352, %26467
  %26469 = getelementptr inbounds i16, i16* %267, i64 %26468
  %26470 = getelementptr inbounds i16, i16* %26469, i64 -32
  %26471 = bitcast i16* %26470 to <16 x i16>*
  store <16 x i16> %26464, <16 x i16>* %26471, align 2, !tbaa !401
  %26472 = shufflevector <32 x i16> %26463, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26473 = getelementptr inbounds i16, i16* %26469, i64 -16
  %26474 = bitcast i16* %26473 to <16 x i16>*
  store <16 x i16> %26472, <16 x i16>* %26474, align 2, !tbaa !401
  br label %after_bb1484

"for blur_y.s0.x.x.rebased1499":                  ; preds = %"for blur_y.s0.x.x.rebased1499.preheader", %"consume blur_x1507"
  %indvars.iv3526 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1499.preheader" ], [ %indvars.iv.next3527, %"consume blur_x1507" ]
  %26475 = add nsw i64 %indvars.iv3526, %307
  %26476 = icmp slt i64 %26475, 1
  %26477 = trunc i64 %26475 to i32
  %26478 = shl nsw i32 %26477, 5
  %26479 = icmp sgt i32 %202, %26478
  %26480 = or i1 %26476, %26479
  br i1 %26480, label %"produce blur_x1505", label %"for blur_y.s0.x.x.rebased1499.consume blur_x1507_crit_edge"

"for blur_y.s0.x.x.rebased1499.consume blur_x1507_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1499"
  %.pre3716 = shl nsw i64 %26475, 5
  br label %"consume blur_x1507"

"end for blur_y.s0.x.x.rebased1500":              ; preds = %"consume blur_x1507", %after_bb1484
  br i1 %308, label %"for blur_y.s0.x.x.rebased1515.preheader", label %"end for blur_y.s0.x.x.rebased1516", !prof !386

"for blur_y.s0.x.x.rebased1515.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1500"
  %26481 = sext i32 %t17781151 to i64
  %26482 = zext i32 %.pre-phi3677 to i64
  %26483 = mul nsw i64 %26482, %353
  %26484 = sub nsw i64 %26483, %302
  %26485 = zext i32 %.pre-phi3673 to i64
  %26486 = mul nsw i64 %26485, %353
  %26487 = sub nsw i64 %26486, %302
  %26488 = zext i32 %.pre-phi3681 to i64
  %26489 = mul nsw i64 %26488, %353
  %26490 = sub nsw i64 %26489, %302
  %26491 = zext i32 %.pre-phi3685 to i64
  %26492 = mul nsw i64 %26491, %353
  %26493 = sub nsw i64 %26492, %302
  %26494 = zext i32 %.pre-phi3689 to i64
  %26495 = mul nsw i64 %26494, %353
  %26496 = sub nsw i64 %26495, %302
  %26497 = zext i32 %.pre-phi3699 to i64
  %26498 = mul nsw i64 %26497, %353
  %26499 = sub nsw i64 %26498, %302
  %26500 = zext i32 %.pre-phi3693 to i64
  %26501 = mul nsw i64 %26500, %353
  %26502 = sub nsw i64 %26501, %302
  %26503 = sext i32 %a393 to i64
  %26504 = add nsw i64 %26503, 9
  %26505 = mul nsw i64 %26504, %350
  %26506 = add nsw i64 %26505, %354
  br label %"for blur_y.s0.x.x.rebased1515"

"produce blur_x1505":                             ; preds = %"for blur_y.s0.x.x.rebased1499"
  %t8961506 = add nsw i32 %407, %26478
  %26507 = sext i32 %t8961506 to i64
  %26508 = getelementptr inbounds i16, i16* %read_input860, i64 %26507
  %26509 = getelementptr inbounds i16, i16* %26508, i64 1
  %26510 = bitcast i16* %26509 to <16 x i16>*
  %26511 = load <16 x i16>, <16 x i16>* %26510, align 2, !tbaa !396
  %26512 = getelementptr inbounds i16, i16* %26508, i64 17
  %26513 = bitcast i16* %26512 to <16 x i16>*
  %26514 = load <16 x i16>, <16 x i16>* %26513, align 2, !tbaa !396
  %26515 = bitcast i16* %26508 to <16 x i16>*
  %26516 = load <16 x i16>, <16 x i16>* %26515, align 2, !tbaa !396
  %26517 = getelementptr inbounds i16, i16* %26508, i64 16
  %26518 = bitcast i16* %26517 to <16 x i16>*
  %26519 = load <16 x i16>, <16 x i16>* %26518, align 2, !tbaa !396
  %26520 = getelementptr inbounds i16, i16* %26508, i64 2
  %26521 = bitcast i16* %26520 to <16 x i16>*
  %26522 = load <16 x i16>, <16 x i16>* %26521, align 2, !tbaa !396
  %26523 = getelementptr inbounds i16, i16* %26508, i64 18
  %26524 = bitcast i16* %26523 to <16 x i16>*
  %26525 = load <16 x i16>, <16 x i16>* %26524, align 2, !tbaa !396
  %26526 = getelementptr inbounds i16, i16* %26508, i64 3
  %26527 = bitcast i16* %26526 to <16 x i16>*
  %26528 = load <16 x i16>, <16 x i16>* %26527, align 2, !tbaa !396
  %26529 = getelementptr inbounds i16, i16* %26508, i64 19
  %26530 = bitcast i16* %26529 to <16 x i16>*
  %26531 = load <16 x i16>, <16 x i16>* %26530, align 2, !tbaa !396
  %26532 = getelementptr inbounds i16, i16* %26508, i64 4
  %26533 = bitcast i16* %26532 to <16 x i16>*
  %26534 = load <16 x i16>, <16 x i16>* %26533, align 2, !tbaa !396
  %26535 = getelementptr inbounds i16, i16* %26508, i64 20
  %26536 = bitcast i16* %26535 to <16 x i16>*
  %26537 = load <16 x i16>, <16 x i16>* %26536, align 2, !tbaa !396
  %26538 = getelementptr inbounds i16, i16* %26508, i64 6
  %26539 = bitcast i16* %26538 to <16 x i16>*
  %26540 = load <16 x i16>, <16 x i16>* %26539, align 2, !tbaa !396
  %26541 = getelementptr inbounds i16, i16* %26508, i64 22
  %26542 = bitcast i16* %26541 to <16 x i16>*
  %26543 = load <16 x i16>, <16 x i16>* %26542, align 2, !tbaa !396
  %26544 = getelementptr inbounds i16, i16* %26508, i64 5
  %26545 = bitcast i16* %26544 to <16 x i16>*
  %26546 = load <16 x i16>, <16 x i16>* %26545, align 2, !tbaa !396
  %26547 = getelementptr inbounds i16, i16* %26508, i64 21
  %26548 = bitcast i16* %26547 to <16 x i16>*
  %26549 = load <16 x i16>, <16 x i16>* %26548, align 2, !tbaa !396
  %26550 = add <16 x i16> %26516, %26511
  %26551 = add <16 x i16> %26550, %26522
  %26552 = add <16 x i16> %26551, %26528
  %26553 = add <16 x i16> %26552, %26534
  %26554 = add <16 x i16> %26553, %26540
  %26555 = add <16 x i16> %26554, %26546
  %26556 = add <16 x i16> %26519, %26514
  %26557 = add <16 x i16> %26556, %26525
  %26558 = add <16 x i16> %26557, %26531
  %26559 = add <16 x i16> %26558, %26537
  %26560 = add <16 x i16> %26559, %26543
  %26561 = add <16 x i16> %26560, %26549
  %26562 = shufflevector <16 x i16> %26555, <16 x i16> %26561, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26563 = udiv <32 x i16> %26562, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %26564 = shufflevector <32 x i16> %26563, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26565 = shl nsw i64 %26475, 5
  %26566 = add nsw i64 %26565, %26288
  %26567 = getelementptr inbounds i16, i16* %blur_x917, i64 %26566
  %26568 = bitcast i16* %26567 to <16 x i16>*
  store <16 x i16> %26564, <16 x i16>* %26568, align 2, !tbaa !399
  %26569 = shufflevector <32 x i16> %26563, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26570 = getelementptr inbounds i16, i16* %26567, i64 16
  %26571 = bitcast i16* %26570 to <16 x i16>*
  store <16 x i16> %26569, <16 x i16>* %26571, align 2, !tbaa !399
  br label %"consume blur_x1507"

"consume blur_x1507":                             ; preds = %"for blur_y.s0.x.x.rebased1499.consume blur_x1507_crit_edge", %"produce blur_x1505"
  %.pre-phi3717 = phi i64 [ %.pre3716, %"for blur_y.s0.x.x.rebased1499.consume blur_x1507_crit_edge" ], [ %26565, %"produce blur_x1505" ]
  %26572 = add nsw i64 %26291, %.pre-phi3717
  %26573 = getelementptr inbounds i16, i16* %blur_x917, i64 %26572
  %26574 = bitcast i16* %26573 to <16 x i16>*
  %26575 = load <16 x i16>, <16 x i16>* %26574, align 2, !tbaa !399
  %26576 = getelementptr inbounds i16, i16* %26573, i64 16
  %26577 = bitcast i16* %26576 to <16 x i16>*
  %26578 = load <16 x i16>, <16 x i16>* %26577, align 2, !tbaa !399
  %26579 = add nsw i64 %26294, %.pre-phi3717
  %26580 = getelementptr inbounds i16, i16* %blur_x917, i64 %26579
  %26581 = bitcast i16* %26580 to <16 x i16>*
  %26582 = load <16 x i16>, <16 x i16>* %26581, align 2, !tbaa !399
  %26583 = getelementptr inbounds i16, i16* %26580, i64 16
  %26584 = bitcast i16* %26583 to <16 x i16>*
  %26585 = load <16 x i16>, <16 x i16>* %26584, align 2, !tbaa !399
  %26586 = add nsw i64 %26297, %.pre-phi3717
  %26587 = getelementptr inbounds i16, i16* %blur_x917, i64 %26586
  %26588 = bitcast i16* %26587 to <16 x i16>*
  %26589 = load <16 x i16>, <16 x i16>* %26588, align 2, !tbaa !399
  %26590 = getelementptr inbounds i16, i16* %26587, i64 16
  %26591 = bitcast i16* %26590 to <16 x i16>*
  %26592 = load <16 x i16>, <16 x i16>* %26591, align 2, !tbaa !399
  %26593 = add nsw i64 %26300, %.pre-phi3717
  %26594 = getelementptr inbounds i16, i16* %blur_x917, i64 %26593
  %26595 = bitcast i16* %26594 to <16 x i16>*
  %26596 = load <16 x i16>, <16 x i16>* %26595, align 2, !tbaa !399
  %26597 = getelementptr inbounds i16, i16* %26594, i64 16
  %26598 = bitcast i16* %26597 to <16 x i16>*
  %26599 = load <16 x i16>, <16 x i16>* %26598, align 2, !tbaa !399
  %26600 = add nsw i64 %26303, %.pre-phi3717
  %26601 = getelementptr inbounds i16, i16* %blur_x917, i64 %26600
  %26602 = bitcast i16* %26601 to <16 x i16>*
  %26603 = load <16 x i16>, <16 x i16>* %26602, align 2, !tbaa !399
  %26604 = getelementptr inbounds i16, i16* %26601, i64 16
  %26605 = bitcast i16* %26604 to <16 x i16>*
  %26606 = load <16 x i16>, <16 x i16>* %26605, align 2, !tbaa !399
  %26607 = add nsw i64 %26306, %.pre-phi3717
  %26608 = getelementptr inbounds i16, i16* %blur_x917, i64 %26607
  %26609 = bitcast i16* %26608 to <16 x i16>*
  %26610 = load <16 x i16>, <16 x i16>* %26609, align 2, !tbaa !399
  %26611 = getelementptr inbounds i16, i16* %26608, i64 16
  %26612 = bitcast i16* %26611 to <16 x i16>*
  %26613 = load <16 x i16>, <16 x i16>* %26612, align 2, !tbaa !399
  %26614 = add nsw i64 %26309, %.pre-phi3717
  %26615 = getelementptr inbounds i16, i16* %blur_x917, i64 %26614
  %26616 = bitcast i16* %26615 to <16 x i16>*
  %26617 = load <16 x i16>, <16 x i16>* %26616, align 2, !tbaa !399
  %26618 = getelementptr inbounds i16, i16* %26615, i64 16
  %26619 = bitcast i16* %26618 to <16 x i16>*
  %26620 = load <16 x i16>, <16 x i16>* %26619, align 2, !tbaa !399
  %26621 = add <16 x i16> %26582, %26575
  %26622 = add <16 x i16> %26621, %26589
  %26623 = add <16 x i16> %26622, %26596
  %26624 = add <16 x i16> %26623, %26603
  %26625 = add <16 x i16> %26624, %26610
  %26626 = add <16 x i16> %26625, %26617
  %26627 = add <16 x i16> %26585, %26578
  %26628 = add <16 x i16> %26627, %26592
  %26629 = add <16 x i16> %26628, %26599
  %26630 = add <16 x i16> %26629, %26606
  %26631 = add <16 x i16> %26630, %26613
  %26632 = add <16 x i16> %26631, %26620
  %26633 = shufflevector <16 x i16> %26626, <16 x i16> %26632, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26634 = udiv <32 x i16> %26633, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %26635 = shufflevector <32 x i16> %26634, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26636 = add nsw i64 %26313, %.pre-phi3717
  %26637 = getelementptr inbounds i16, i16* %267, i64 %26636
  %26638 = bitcast i16* %26637 to <16 x i16>*
  store <16 x i16> %26635, <16 x i16>* %26638, align 2, !tbaa !401
  %26639 = shufflevector <32 x i16> %26634, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26640 = getelementptr inbounds i16, i16* %26637, i64 16
  %26641 = bitcast i16* %26640 to <16 x i16>*
  store <16 x i16> %26639, <16 x i16>* %26641, align 2, !tbaa !401
  %indvars.iv.next3527 = add nuw nsw i64 %indvars.iv3526, 1
  %.not2733 = icmp eq i64 %indvars.iv.next3527, %546
  br i1 %.not2733, label %"end for blur_y.s0.x.x.rebased1500", label %"for blur_y.s0.x.x.rebased1499"

"for blur_y.s0.x.x.rebased1515":                  ; preds = %"for blur_y.s0.x.x.rebased1515.preheader", %"consume blur_x1526"
  %blur_y.s0.x.x.rebased1517 = phi i32 [ %26784, %"consume blur_x1526" ], [ 0, %"for blur_y.s0.x.x.rebased1515.preheader" ]
  %26642 = add nsw i32 %blur_y.s0.x.x.rebased1517, %t1670852
  %a3016 = shl nsw i32 %26642, 5
  %26643 = icmp sgt i32 %t1691, %a3016
  %blur_y.s0.x.v0.base.s1518 = select i1 %26643, i32 %a3016, i32 %t1691
  %26644 = icmp slt i32 %26642, 1
  %26645 = icmp sgt i32 %202, %a3016
  %26646 = or i1 %26644, %26645
  br i1 %26646, label %"produce blur_x1523", label %"consume blur_x1526"

"end for blur_y.s0.x.x.rebased1516":              ; preds = %"consume blur_x1526", %"end for blur_y.s0.x.x.rebased1500"
  br i1 %233, label %"produce blur_x1530", label %after_bb1527

"produce blur_x1523":                             ; preds = %"for blur_y.s0.x.x.rebased1515"
  %26647 = icmp slt i32 %blur_y.s0.x.v0.base.s1518, %202
  %blur_x.s0.x.v1.base.s1524 = select i1 %26647, i32 %blur_y.s0.x.v0.base.s1518, i32 %202
  %t9011525 = add nsw i32 %407, %blur_x.s0.x.v1.base.s1524
  %26648 = sext i32 %t9011525 to i64
  %26649 = getelementptr inbounds i16, i16* %read_input860, i64 %26648
  %26650 = getelementptr inbounds i16, i16* %26649, i64 1
  %26651 = bitcast i16* %26650 to <16 x i16>*
  %26652 = load <16 x i16>, <16 x i16>* %26651, align 2, !tbaa !396
  %26653 = getelementptr inbounds i16, i16* %26649, i64 17
  %26654 = bitcast i16* %26653 to <16 x i16>*
  %26655 = load <16 x i16>, <16 x i16>* %26654, align 2, !tbaa !396
  %26656 = bitcast i16* %26649 to <16 x i16>*
  %26657 = load <16 x i16>, <16 x i16>* %26656, align 2, !tbaa !396
  %26658 = getelementptr inbounds i16, i16* %26649, i64 16
  %26659 = bitcast i16* %26658 to <16 x i16>*
  %26660 = load <16 x i16>, <16 x i16>* %26659, align 2, !tbaa !396
  %26661 = getelementptr inbounds i16, i16* %26649, i64 2
  %26662 = bitcast i16* %26661 to <16 x i16>*
  %26663 = load <16 x i16>, <16 x i16>* %26662, align 2, !tbaa !396
  %26664 = getelementptr inbounds i16, i16* %26649, i64 18
  %26665 = bitcast i16* %26664 to <16 x i16>*
  %26666 = load <16 x i16>, <16 x i16>* %26665, align 2, !tbaa !396
  %26667 = getelementptr inbounds i16, i16* %26649, i64 3
  %26668 = bitcast i16* %26667 to <16 x i16>*
  %26669 = load <16 x i16>, <16 x i16>* %26668, align 2, !tbaa !396
  %26670 = getelementptr inbounds i16, i16* %26649, i64 19
  %26671 = bitcast i16* %26670 to <16 x i16>*
  %26672 = load <16 x i16>, <16 x i16>* %26671, align 2, !tbaa !396
  %26673 = getelementptr inbounds i16, i16* %26649, i64 4
  %26674 = bitcast i16* %26673 to <16 x i16>*
  %26675 = load <16 x i16>, <16 x i16>* %26674, align 2, !tbaa !396
  %26676 = getelementptr inbounds i16, i16* %26649, i64 20
  %26677 = bitcast i16* %26676 to <16 x i16>*
  %26678 = load <16 x i16>, <16 x i16>* %26677, align 2, !tbaa !396
  %26679 = getelementptr inbounds i16, i16* %26649, i64 6
  %26680 = bitcast i16* %26679 to <16 x i16>*
  %26681 = load <16 x i16>, <16 x i16>* %26680, align 2, !tbaa !396
  %26682 = getelementptr inbounds i16, i16* %26649, i64 22
  %26683 = bitcast i16* %26682 to <16 x i16>*
  %26684 = load <16 x i16>, <16 x i16>* %26683, align 2, !tbaa !396
  %26685 = getelementptr inbounds i16, i16* %26649, i64 5
  %26686 = bitcast i16* %26685 to <16 x i16>*
  %26687 = load <16 x i16>, <16 x i16>* %26686, align 2, !tbaa !396
  %26688 = getelementptr inbounds i16, i16* %26649, i64 21
  %26689 = bitcast i16* %26688 to <16 x i16>*
  %26690 = load <16 x i16>, <16 x i16>* %26689, align 2, !tbaa !396
  %26691 = add <16 x i16> %26657, %26652
  %26692 = add <16 x i16> %26691, %26663
  %26693 = add <16 x i16> %26692, %26669
  %26694 = add <16 x i16> %26693, %26675
  %26695 = add <16 x i16> %26694, %26681
  %26696 = add <16 x i16> %26695, %26687
  %26697 = add <16 x i16> %26660, %26655
  %26698 = add <16 x i16> %26697, %26666
  %26699 = add <16 x i16> %26698, %26672
  %26700 = add <16 x i16> %26699, %26678
  %26701 = add <16 x i16> %26700, %26684
  %26702 = add <16 x i16> %26701, %26690
  %26703 = shufflevector <16 x i16> %26696, <16 x i16> %26702, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26704 = udiv <32 x i16> %26703, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %26705 = shufflevector <32 x i16> %26704, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26706 = sext i32 %blur_x.s0.x.v1.base.s1524 to i64
  %26707 = add nsw i64 %26706, %26481
  %26708 = getelementptr inbounds i16, i16* %blur_x917, i64 %26707
  %26709 = bitcast i16* %26708 to <16 x i16>*
  store <16 x i16> %26705, <16 x i16>* %26709, align 2, !tbaa !399
  %26710 = shufflevector <32 x i16> %26704, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26711 = getelementptr inbounds i16, i16* %26708, i64 16
  %26712 = bitcast i16* %26711 to <16 x i16>*
  store <16 x i16> %26710, <16 x i16>* %26712, align 2, !tbaa !399
  br label %"consume blur_x1526"

"consume blur_x1526":                             ; preds = %"for blur_y.s0.x.x.rebased1515", %"produce blur_x1523"
  %26713 = sext i32 %blur_y.s0.x.v0.base.s1518 to i64
  %26714 = add nsw i64 %26484, %26713
  %26715 = getelementptr inbounds i16, i16* %blur_x917, i64 %26714
  %26716 = bitcast i16* %26715 to <16 x i16>*
  %26717 = load <16 x i16>, <16 x i16>* %26716, align 2, !tbaa !399
  %26718 = getelementptr inbounds i16, i16* %26715, i64 16
  %26719 = bitcast i16* %26718 to <16 x i16>*
  %26720 = load <16 x i16>, <16 x i16>* %26719, align 2, !tbaa !399
  %26721 = add nsw i64 %26487, %26713
  %26722 = getelementptr inbounds i16, i16* %blur_x917, i64 %26721
  %26723 = bitcast i16* %26722 to <16 x i16>*
  %26724 = load <16 x i16>, <16 x i16>* %26723, align 2, !tbaa !399
  %26725 = getelementptr inbounds i16, i16* %26722, i64 16
  %26726 = bitcast i16* %26725 to <16 x i16>*
  %26727 = load <16 x i16>, <16 x i16>* %26726, align 2, !tbaa !399
  %26728 = add nsw i64 %26490, %26713
  %26729 = getelementptr inbounds i16, i16* %blur_x917, i64 %26728
  %26730 = bitcast i16* %26729 to <16 x i16>*
  %26731 = load <16 x i16>, <16 x i16>* %26730, align 2, !tbaa !399
  %26732 = getelementptr inbounds i16, i16* %26729, i64 16
  %26733 = bitcast i16* %26732 to <16 x i16>*
  %26734 = load <16 x i16>, <16 x i16>* %26733, align 2, !tbaa !399
  %26735 = add nsw i64 %26493, %26713
  %26736 = getelementptr inbounds i16, i16* %blur_x917, i64 %26735
  %26737 = bitcast i16* %26736 to <16 x i16>*
  %26738 = load <16 x i16>, <16 x i16>* %26737, align 2, !tbaa !399
  %26739 = getelementptr inbounds i16, i16* %26736, i64 16
  %26740 = bitcast i16* %26739 to <16 x i16>*
  %26741 = load <16 x i16>, <16 x i16>* %26740, align 2, !tbaa !399
  %26742 = add nsw i64 %26496, %26713
  %26743 = getelementptr inbounds i16, i16* %blur_x917, i64 %26742
  %26744 = bitcast i16* %26743 to <16 x i16>*
  %26745 = load <16 x i16>, <16 x i16>* %26744, align 2, !tbaa !399
  %26746 = getelementptr inbounds i16, i16* %26743, i64 16
  %26747 = bitcast i16* %26746 to <16 x i16>*
  %26748 = load <16 x i16>, <16 x i16>* %26747, align 2, !tbaa !399
  %26749 = add nsw i64 %26499, %26713
  %26750 = getelementptr inbounds i16, i16* %blur_x917, i64 %26749
  %26751 = bitcast i16* %26750 to <16 x i16>*
  %26752 = load <16 x i16>, <16 x i16>* %26751, align 2, !tbaa !399
  %26753 = getelementptr inbounds i16, i16* %26750, i64 16
  %26754 = bitcast i16* %26753 to <16 x i16>*
  %26755 = load <16 x i16>, <16 x i16>* %26754, align 2, !tbaa !399
  %26756 = add nsw i64 %26502, %26713
  %26757 = getelementptr inbounds i16, i16* %blur_x917, i64 %26756
  %26758 = bitcast i16* %26757 to <16 x i16>*
  %26759 = load <16 x i16>, <16 x i16>* %26758, align 2, !tbaa !399
  %26760 = getelementptr inbounds i16, i16* %26757, i64 16
  %26761 = bitcast i16* %26760 to <16 x i16>*
  %26762 = load <16 x i16>, <16 x i16>* %26761, align 2, !tbaa !399
  %26763 = add <16 x i16> %26724, %26717
  %26764 = add <16 x i16> %26763, %26731
  %26765 = add <16 x i16> %26764, %26738
  %26766 = add <16 x i16> %26765, %26745
  %26767 = add <16 x i16> %26766, %26752
  %26768 = add <16 x i16> %26767, %26759
  %26769 = add <16 x i16> %26727, %26720
  %26770 = add <16 x i16> %26769, %26734
  %26771 = add <16 x i16> %26770, %26741
  %26772 = add <16 x i16> %26771, %26748
  %26773 = add <16 x i16> %26772, %26755
  %26774 = add <16 x i16> %26773, %26762
  %26775 = shufflevector <16 x i16> %26768, <16 x i16> %26774, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26776 = udiv <32 x i16> %26775, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %26777 = shufflevector <32 x i16> %26776, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26778 = add nsw i64 %26506, %26713
  %26779 = getelementptr inbounds i16, i16* %267, i64 %26778
  %26780 = bitcast i16* %26779 to <16 x i16>*
  store <16 x i16> %26777, <16 x i16>* %26780, align 2, !tbaa !401
  %26781 = shufflevector <32 x i16> %26776, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26782 = getelementptr inbounds i16, i16* %26779, i64 16
  %26783 = bitcast i16* %26782 to <16 x i16>*
  store <16 x i16> %26781, <16 x i16>* %26783, align 2, !tbaa !401
  %26784 = add nuw nsw i32 %blur_y.s0.x.x.rebased1517, 1
  %.not2732 = icmp eq i32 %26784, %t1727936
  br i1 %.not2732, label %"end for blur_y.s0.x.x.rebased1516", label %"for blur_y.s0.x.x.rebased1515"

after_bb1527:                                     ; preds = %"end for blur_y.s0.x.x.rebased1516", %"produce blur_x1530"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1542.preheader", label %"end for blur_y.s0.x.x.rebased1543", !prof !386

"for blur_y.s0.x.x.rebased1542.preheader":        ; preds = %after_bb1527
  %26785 = sext i32 %t1726924 to i64
  %26786 = zext i32 %.pre-phi3681 to i64
  %26787 = mul nsw i64 %26786, %353
  %26788 = sub nsw i64 %26787, %302
  %26789 = zext i32 %.pre-phi3677 to i64
  %26790 = mul nsw i64 %26789, %353
  %26791 = sub nsw i64 %26790, %302
  %26792 = zext i32 %.pre-phi3685 to i64
  %26793 = mul nsw i64 %26792, %353
  %26794 = sub nsw i64 %26793, %302
  %26795 = zext i32 %.pre-phi3689 to i64
  %26796 = mul nsw i64 %26795, %353
  %26797 = sub nsw i64 %26796, %302
  %26798 = zext i32 %.pre-phi3693 to i64
  %26799 = mul nsw i64 %26798, %353
  %26800 = sub nsw i64 %26799, %302
  %26801 = zext i32 %.pre-phi3669 to i64
  %26802 = mul nsw i64 %26801, %353
  %26803 = sub nsw i64 %26802, %302
  %26804 = zext i32 %.pre-phi3699 to i64
  %26805 = mul nsw i64 %26804, %353
  %26806 = sub nsw i64 %26805, %302
  %26807 = sext i32 %a393 to i64
  %26808 = add nsw i64 %26807, 10
  %26809 = mul nsw i64 %26808, %350
  %26810 = add nsw i64 %26809, %354
  br label %"for blur_y.s0.x.x.rebased1542"

"produce blur_x1530":                             ; preds = %"end for blur_y.s0.x.x.rebased1516"
  %26811 = getelementptr inbounds i16, i16* %read_input860, i64 %411
  %26812 = getelementptr inbounds i16, i16* %26811, i64 -31
  %26813 = bitcast i16* %26812 to <16 x i16>*
  %26814 = load <16 x i16>, <16 x i16>* %26813, align 2, !tbaa !396
  %26815 = getelementptr inbounds i16, i16* %26811, i64 -15
  %26816 = bitcast i16* %26815 to <16 x i16>*
  %26817 = load <16 x i16>, <16 x i16>* %26816, align 2, !tbaa !396
  %26818 = getelementptr inbounds i16, i16* %26811, i64 -32
  %26819 = bitcast i16* %26818 to <16 x i16>*
  %26820 = load <16 x i16>, <16 x i16>* %26819, align 2, !tbaa !396
  %26821 = getelementptr inbounds i16, i16* %26811, i64 -16
  %26822 = bitcast i16* %26821 to <16 x i16>*
  %26823 = load <16 x i16>, <16 x i16>* %26822, align 2, !tbaa !396
  %26824 = getelementptr inbounds i16, i16* %26811, i64 -30
  %26825 = bitcast i16* %26824 to <16 x i16>*
  %26826 = load <16 x i16>, <16 x i16>* %26825, align 2, !tbaa !396
  %26827 = getelementptr inbounds i16, i16* %26811, i64 -14
  %26828 = bitcast i16* %26827 to <16 x i16>*
  %26829 = load <16 x i16>, <16 x i16>* %26828, align 2, !tbaa !396
  %26830 = getelementptr inbounds i16, i16* %26811, i64 -29
  %26831 = bitcast i16* %26830 to <16 x i16>*
  %26832 = load <16 x i16>, <16 x i16>* %26831, align 2, !tbaa !396
  %26833 = getelementptr inbounds i16, i16* %26811, i64 -13
  %26834 = bitcast i16* %26833 to <16 x i16>*
  %26835 = load <16 x i16>, <16 x i16>* %26834, align 2, !tbaa !396
  %26836 = getelementptr inbounds i16, i16* %26811, i64 -28
  %26837 = bitcast i16* %26836 to <16 x i16>*
  %26838 = load <16 x i16>, <16 x i16>* %26837, align 2, !tbaa !396
  %26839 = getelementptr inbounds i16, i16* %26811, i64 -12
  %26840 = bitcast i16* %26839 to <16 x i16>*
  %26841 = load <16 x i16>, <16 x i16>* %26840, align 2, !tbaa !396
  %26842 = getelementptr inbounds i16, i16* %26811, i64 -26
  %26843 = bitcast i16* %26842 to <16 x i16>*
  %26844 = load <16 x i16>, <16 x i16>* %26843, align 2, !tbaa !396
  %26845 = getelementptr inbounds i16, i16* %26811, i64 -10
  %26846 = bitcast i16* %26845 to <16 x i16>*
  %26847 = load <16 x i16>, <16 x i16>* %26846, align 2, !tbaa !396
  %26848 = getelementptr inbounds i16, i16* %26811, i64 -27
  %26849 = bitcast i16* %26848 to <16 x i16>*
  %26850 = load <16 x i16>, <16 x i16>* %26849, align 2, !tbaa !396
  %26851 = getelementptr inbounds i16, i16* %26811, i64 -11
  %26852 = bitcast i16* %26851 to <16 x i16>*
  %26853 = load <16 x i16>, <16 x i16>* %26852, align 2, !tbaa !396
  %26854 = add <16 x i16> %26820, %26814
  %26855 = add <16 x i16> %26854, %26826
  %26856 = add <16 x i16> %26855, %26832
  %26857 = add <16 x i16> %26856, %26838
  %26858 = add <16 x i16> %26857, %26844
  %26859 = add <16 x i16> %26858, %26850
  %26860 = add <16 x i16> %26823, %26817
  %26861 = add <16 x i16> %26860, %26829
  %26862 = add <16 x i16> %26861, %26835
  %26863 = add <16 x i16> %26862, %26841
  %26864 = add <16 x i16> %26863, %26847
  %26865 = add <16 x i16> %26864, %26853
  %26866 = shufflevector <16 x i16> %26859, <16 x i16> %26865, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26867 = udiv <32 x i16> %26866, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %26868 = shufflevector <32 x i16> %26867, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26869 = zext i32 %.pre-phi3669 to i64
  %26870 = mul nsw i64 %303, %26869
  %26871 = add nsw i64 %305, %26870
  %26872 = getelementptr inbounds i16, i16* %blur_x917, i64 %26871
  %26873 = getelementptr inbounds i16, i16* %26872, i64 -32
  %26874 = bitcast i16* %26873 to <16 x i16>*
  store <16 x i16> %26868, <16 x i16>* %26874, align 2, !tbaa !399
  %26875 = shufflevector <32 x i16> %26867, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26876 = getelementptr inbounds i16, i16* %26872, i64 -16
  %26877 = bitcast i16* %26876 to <16 x i16>*
  store <16 x i16> %26875, <16 x i16>* %26877, align 2, !tbaa !399
  %26878 = zext i32 %.pre-phi3681 to i64
  %26879 = mul nsw i64 %26878, %349
  %26880 = add nsw i64 %26879, %300
  %26881 = getelementptr inbounds i16, i16* %blur_x917, i64 %26880
  %26882 = getelementptr inbounds i16, i16* %26881, i64 -32
  %26883 = bitcast i16* %26882 to <16 x i16>*
  %26884 = load <16 x i16>, <16 x i16>* %26883, align 2, !tbaa !399
  %26885 = getelementptr inbounds i16, i16* %26881, i64 -16
  %26886 = bitcast i16* %26885 to <16 x i16>*
  %26887 = load <16 x i16>, <16 x i16>* %26886, align 2, !tbaa !399
  %26888 = zext i32 %.pre-phi3677 to i64
  %26889 = mul nsw i64 %26888, %349
  %26890 = add nsw i64 %26889, %300
  %26891 = getelementptr inbounds i16, i16* %blur_x917, i64 %26890
  %26892 = getelementptr inbounds i16, i16* %26891, i64 -32
  %26893 = bitcast i16* %26892 to <16 x i16>*
  %26894 = load <16 x i16>, <16 x i16>* %26893, align 2, !tbaa !399
  %26895 = getelementptr inbounds i16, i16* %26891, i64 -16
  %26896 = bitcast i16* %26895 to <16 x i16>*
  %26897 = load <16 x i16>, <16 x i16>* %26896, align 2, !tbaa !399
  %26898 = zext i32 %.pre-phi3685 to i64
  %26899 = mul nsw i64 %26898, %349
  %26900 = add nsw i64 %26899, %300
  %26901 = getelementptr inbounds i16, i16* %blur_x917, i64 %26900
  %26902 = getelementptr inbounds i16, i16* %26901, i64 -32
  %26903 = bitcast i16* %26902 to <16 x i16>*
  %26904 = load <16 x i16>, <16 x i16>* %26903, align 2, !tbaa !399
  %26905 = getelementptr inbounds i16, i16* %26901, i64 -16
  %26906 = bitcast i16* %26905 to <16 x i16>*
  %26907 = load <16 x i16>, <16 x i16>* %26906, align 2, !tbaa !399
  %26908 = zext i32 %.pre-phi3689 to i64
  %26909 = mul nsw i64 %26908, %349
  %26910 = add nsw i64 %26909, %300
  %26911 = getelementptr inbounds i16, i16* %blur_x917, i64 %26910
  %26912 = getelementptr inbounds i16, i16* %26911, i64 -32
  %26913 = bitcast i16* %26912 to <16 x i16>*
  %26914 = load <16 x i16>, <16 x i16>* %26913, align 2, !tbaa !399
  %26915 = getelementptr inbounds i16, i16* %26911, i64 -16
  %26916 = bitcast i16* %26915 to <16 x i16>*
  %26917 = load <16 x i16>, <16 x i16>* %26916, align 2, !tbaa !399
  %26918 = zext i32 %.pre-phi3693 to i64
  %26919 = mul nsw i64 %26918, %349
  %26920 = add nsw i64 %26919, %300
  %26921 = getelementptr inbounds i16, i16* %blur_x917, i64 %26920
  %26922 = getelementptr inbounds i16, i16* %26921, i64 -32
  %26923 = bitcast i16* %26922 to <16 x i16>*
  %26924 = load <16 x i16>, <16 x i16>* %26923, align 2, !tbaa !399
  %26925 = getelementptr inbounds i16, i16* %26921, i64 -16
  %26926 = bitcast i16* %26925 to <16 x i16>*
  %26927 = load <16 x i16>, <16 x i16>* %26926, align 2, !tbaa !399
  %26928 = mul nsw i64 %26869, %349
  %26929 = add nsw i64 %26928, %300
  %26930 = getelementptr inbounds i16, i16* %blur_x917, i64 %26929
  %26931 = getelementptr inbounds i16, i16* %26930, i64 -32
  %26932 = bitcast i16* %26931 to <16 x i16>*
  %26933 = load <16 x i16>, <16 x i16>* %26932, align 2, !tbaa !399
  %26934 = getelementptr inbounds i16, i16* %26930, i64 -16
  %26935 = bitcast i16* %26934 to <16 x i16>*
  %26936 = load <16 x i16>, <16 x i16>* %26935, align 2, !tbaa !399
  %26937 = zext i32 %.pre-phi3699 to i64
  %26938 = mul nsw i64 %26937, %349
  %26939 = add nsw i64 %26938, %300
  %26940 = getelementptr inbounds i16, i16* %blur_x917, i64 %26939
  %26941 = getelementptr inbounds i16, i16* %26940, i64 -32
  %26942 = bitcast i16* %26941 to <16 x i16>*
  %26943 = load <16 x i16>, <16 x i16>* %26942, align 2, !tbaa !399
  %26944 = getelementptr inbounds i16, i16* %26940, i64 -16
  %26945 = bitcast i16* %26944 to <16 x i16>*
  %26946 = load <16 x i16>, <16 x i16>* %26945, align 2, !tbaa !399
  %26947 = add <16 x i16> %26894, %26884
  %26948 = add <16 x i16> %26947, %26904
  %26949 = add <16 x i16> %26948, %26914
  %26950 = add <16 x i16> %26949, %26924
  %26951 = add <16 x i16> %26950, %26933
  %26952 = add <16 x i16> %26951, %26943
  %26953 = add <16 x i16> %26897, %26887
  %26954 = add <16 x i16> %26953, %26907
  %26955 = add <16 x i16> %26954, %26917
  %26956 = add <16 x i16> %26955, %26927
  %26957 = add <16 x i16> %26956, %26936
  %26958 = add <16 x i16> %26957, %26946
  %26959 = shufflevector <16 x i16> %26952, <16 x i16> %26958, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26960 = udiv <32 x i16> %26959, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %26961 = shufflevector <32 x i16> %26960, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26962 = sext i32 %a393 to i64
  %26963 = add nsw i64 %26962, 10
  %26964 = mul nsw i64 %26963, %350
  %26965 = add nsw i64 %352, %26964
  %26966 = getelementptr inbounds i16, i16* %267, i64 %26965
  %26967 = getelementptr inbounds i16, i16* %26966, i64 -32
  %26968 = bitcast i16* %26967 to <16 x i16>*
  store <16 x i16> %26961, <16 x i16>* %26968, align 2, !tbaa !401
  %26969 = shufflevector <32 x i16> %26960, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26970 = getelementptr inbounds i16, i16* %26966, i64 -16
  %26971 = bitcast i16* %26970 to <16 x i16>*
  store <16 x i16> %26969, <16 x i16>* %26971, align 2, !tbaa !401
  br label %after_bb1527

"for blur_y.s0.x.x.rebased1542":                  ; preds = %"for blur_y.s0.x.x.rebased1542.preheader", %"consume blur_x1550"
  %indvars.iv3528 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1542.preheader" ], [ %indvars.iv.next3529, %"consume blur_x1550" ]
  %26972 = add nsw i64 %indvars.iv3528, %307
  %26973 = icmp slt i64 %26972, 1
  %26974 = trunc i64 %26972 to i32
  %26975 = shl nsw i32 %26974, 5
  %26976 = icmp sgt i32 %202, %26975
  %26977 = or i1 %26973, %26976
  br i1 %26977, label %"produce blur_x1548", label %"for blur_y.s0.x.x.rebased1542.consume blur_x1550_crit_edge"

"for blur_y.s0.x.x.rebased1542.consume blur_x1550_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1542"
  %.pre3718 = shl nsw i64 %26972, 5
  br label %"consume blur_x1550"

"end for blur_y.s0.x.x.rebased1543":              ; preds = %"consume blur_x1550", %after_bb1527
  br i1 %308, label %"for blur_y.s0.x.x.rebased1558.preheader", label %"end for blur_y.s0.x.x.rebased1559", !prof !386

"for blur_y.s0.x.x.rebased1558.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1543"
  %26978 = sext i32 %t1726924 to i64
  %26979 = zext i32 %.pre-phi3681 to i64
  %26980 = mul nsw i64 %26979, %353
  %26981 = sub nsw i64 %26980, %302
  %26982 = zext i32 %.pre-phi3677 to i64
  %26983 = mul nsw i64 %26982, %353
  %26984 = sub nsw i64 %26983, %302
  %26985 = zext i32 %.pre-phi3685 to i64
  %26986 = mul nsw i64 %26985, %353
  %26987 = sub nsw i64 %26986, %302
  %26988 = zext i32 %.pre-phi3689 to i64
  %26989 = mul nsw i64 %26988, %353
  %26990 = sub nsw i64 %26989, %302
  %26991 = zext i32 %.pre-phi3693 to i64
  %26992 = mul nsw i64 %26991, %353
  %26993 = sub nsw i64 %26992, %302
  %26994 = zext i32 %.pre-phi3669 to i64
  %26995 = mul nsw i64 %26994, %353
  %26996 = sub nsw i64 %26995, %302
  %26997 = zext i32 %.pre-phi3699 to i64
  %26998 = mul nsw i64 %26997, %353
  %26999 = sub nsw i64 %26998, %302
  %27000 = sext i32 %a393 to i64
  %27001 = add nsw i64 %27000, 10
  %27002 = mul nsw i64 %27001, %350
  %27003 = add nsw i64 %27002, %354
  br label %"for blur_y.s0.x.x.rebased1558"

"produce blur_x1548":                             ; preds = %"for blur_y.s0.x.x.rebased1542"
  %t9121549 = add nsw i32 %413, %26975
  %27004 = sext i32 %t9121549 to i64
  %27005 = getelementptr inbounds i16, i16* %read_input860, i64 %27004
  %27006 = getelementptr inbounds i16, i16* %27005, i64 1
  %27007 = bitcast i16* %27006 to <16 x i16>*
  %27008 = load <16 x i16>, <16 x i16>* %27007, align 2, !tbaa !396
  %27009 = getelementptr inbounds i16, i16* %27005, i64 17
  %27010 = bitcast i16* %27009 to <16 x i16>*
  %27011 = load <16 x i16>, <16 x i16>* %27010, align 2, !tbaa !396
  %27012 = bitcast i16* %27005 to <16 x i16>*
  %27013 = load <16 x i16>, <16 x i16>* %27012, align 2, !tbaa !396
  %27014 = getelementptr inbounds i16, i16* %27005, i64 16
  %27015 = bitcast i16* %27014 to <16 x i16>*
  %27016 = load <16 x i16>, <16 x i16>* %27015, align 2, !tbaa !396
  %27017 = getelementptr inbounds i16, i16* %27005, i64 2
  %27018 = bitcast i16* %27017 to <16 x i16>*
  %27019 = load <16 x i16>, <16 x i16>* %27018, align 2, !tbaa !396
  %27020 = getelementptr inbounds i16, i16* %27005, i64 18
  %27021 = bitcast i16* %27020 to <16 x i16>*
  %27022 = load <16 x i16>, <16 x i16>* %27021, align 2, !tbaa !396
  %27023 = getelementptr inbounds i16, i16* %27005, i64 3
  %27024 = bitcast i16* %27023 to <16 x i16>*
  %27025 = load <16 x i16>, <16 x i16>* %27024, align 2, !tbaa !396
  %27026 = getelementptr inbounds i16, i16* %27005, i64 19
  %27027 = bitcast i16* %27026 to <16 x i16>*
  %27028 = load <16 x i16>, <16 x i16>* %27027, align 2, !tbaa !396
  %27029 = getelementptr inbounds i16, i16* %27005, i64 4
  %27030 = bitcast i16* %27029 to <16 x i16>*
  %27031 = load <16 x i16>, <16 x i16>* %27030, align 2, !tbaa !396
  %27032 = getelementptr inbounds i16, i16* %27005, i64 20
  %27033 = bitcast i16* %27032 to <16 x i16>*
  %27034 = load <16 x i16>, <16 x i16>* %27033, align 2, !tbaa !396
  %27035 = getelementptr inbounds i16, i16* %27005, i64 6
  %27036 = bitcast i16* %27035 to <16 x i16>*
  %27037 = load <16 x i16>, <16 x i16>* %27036, align 2, !tbaa !396
  %27038 = getelementptr inbounds i16, i16* %27005, i64 22
  %27039 = bitcast i16* %27038 to <16 x i16>*
  %27040 = load <16 x i16>, <16 x i16>* %27039, align 2, !tbaa !396
  %27041 = getelementptr inbounds i16, i16* %27005, i64 5
  %27042 = bitcast i16* %27041 to <16 x i16>*
  %27043 = load <16 x i16>, <16 x i16>* %27042, align 2, !tbaa !396
  %27044 = getelementptr inbounds i16, i16* %27005, i64 21
  %27045 = bitcast i16* %27044 to <16 x i16>*
  %27046 = load <16 x i16>, <16 x i16>* %27045, align 2, !tbaa !396
  %27047 = add <16 x i16> %27013, %27008
  %27048 = add <16 x i16> %27047, %27019
  %27049 = add <16 x i16> %27048, %27025
  %27050 = add <16 x i16> %27049, %27031
  %27051 = add <16 x i16> %27050, %27037
  %27052 = add <16 x i16> %27051, %27043
  %27053 = add <16 x i16> %27016, %27011
  %27054 = add <16 x i16> %27053, %27022
  %27055 = add <16 x i16> %27054, %27028
  %27056 = add <16 x i16> %27055, %27034
  %27057 = add <16 x i16> %27056, %27040
  %27058 = add <16 x i16> %27057, %27046
  %27059 = shufflevector <16 x i16> %27052, <16 x i16> %27058, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27060 = udiv <32 x i16> %27059, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %27061 = shufflevector <32 x i16> %27060, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27062 = shl nsw i64 %26972, 5
  %27063 = add nsw i64 %27062, %26785
  %27064 = getelementptr inbounds i16, i16* %blur_x917, i64 %27063
  %27065 = bitcast i16* %27064 to <16 x i16>*
  store <16 x i16> %27061, <16 x i16>* %27065, align 2, !tbaa !399
  %27066 = shufflevector <32 x i16> %27060, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27067 = getelementptr inbounds i16, i16* %27064, i64 16
  %27068 = bitcast i16* %27067 to <16 x i16>*
  store <16 x i16> %27066, <16 x i16>* %27068, align 2, !tbaa !399
  br label %"consume blur_x1550"

"consume blur_x1550":                             ; preds = %"for blur_y.s0.x.x.rebased1542.consume blur_x1550_crit_edge", %"produce blur_x1548"
  %.pre-phi3719 = phi i64 [ %.pre3718, %"for blur_y.s0.x.x.rebased1542.consume blur_x1550_crit_edge" ], [ %27062, %"produce blur_x1548" ]
  %27069 = add nsw i64 %26788, %.pre-phi3719
  %27070 = getelementptr inbounds i16, i16* %blur_x917, i64 %27069
  %27071 = bitcast i16* %27070 to <16 x i16>*
  %27072 = load <16 x i16>, <16 x i16>* %27071, align 2, !tbaa !399
  %27073 = getelementptr inbounds i16, i16* %27070, i64 16
  %27074 = bitcast i16* %27073 to <16 x i16>*
  %27075 = load <16 x i16>, <16 x i16>* %27074, align 2, !tbaa !399
  %27076 = add nsw i64 %26791, %.pre-phi3719
  %27077 = getelementptr inbounds i16, i16* %blur_x917, i64 %27076
  %27078 = bitcast i16* %27077 to <16 x i16>*
  %27079 = load <16 x i16>, <16 x i16>* %27078, align 2, !tbaa !399
  %27080 = getelementptr inbounds i16, i16* %27077, i64 16
  %27081 = bitcast i16* %27080 to <16 x i16>*
  %27082 = load <16 x i16>, <16 x i16>* %27081, align 2, !tbaa !399
  %27083 = add nsw i64 %26794, %.pre-phi3719
  %27084 = getelementptr inbounds i16, i16* %blur_x917, i64 %27083
  %27085 = bitcast i16* %27084 to <16 x i16>*
  %27086 = load <16 x i16>, <16 x i16>* %27085, align 2, !tbaa !399
  %27087 = getelementptr inbounds i16, i16* %27084, i64 16
  %27088 = bitcast i16* %27087 to <16 x i16>*
  %27089 = load <16 x i16>, <16 x i16>* %27088, align 2, !tbaa !399
  %27090 = add nsw i64 %26797, %.pre-phi3719
  %27091 = getelementptr inbounds i16, i16* %blur_x917, i64 %27090
  %27092 = bitcast i16* %27091 to <16 x i16>*
  %27093 = load <16 x i16>, <16 x i16>* %27092, align 2, !tbaa !399
  %27094 = getelementptr inbounds i16, i16* %27091, i64 16
  %27095 = bitcast i16* %27094 to <16 x i16>*
  %27096 = load <16 x i16>, <16 x i16>* %27095, align 2, !tbaa !399
  %27097 = add nsw i64 %26800, %.pre-phi3719
  %27098 = getelementptr inbounds i16, i16* %blur_x917, i64 %27097
  %27099 = bitcast i16* %27098 to <16 x i16>*
  %27100 = load <16 x i16>, <16 x i16>* %27099, align 2, !tbaa !399
  %27101 = getelementptr inbounds i16, i16* %27098, i64 16
  %27102 = bitcast i16* %27101 to <16 x i16>*
  %27103 = load <16 x i16>, <16 x i16>* %27102, align 2, !tbaa !399
  %27104 = add nsw i64 %26803, %.pre-phi3719
  %27105 = getelementptr inbounds i16, i16* %blur_x917, i64 %27104
  %27106 = bitcast i16* %27105 to <16 x i16>*
  %27107 = load <16 x i16>, <16 x i16>* %27106, align 2, !tbaa !399
  %27108 = getelementptr inbounds i16, i16* %27105, i64 16
  %27109 = bitcast i16* %27108 to <16 x i16>*
  %27110 = load <16 x i16>, <16 x i16>* %27109, align 2, !tbaa !399
  %27111 = add nsw i64 %26806, %.pre-phi3719
  %27112 = getelementptr inbounds i16, i16* %blur_x917, i64 %27111
  %27113 = bitcast i16* %27112 to <16 x i16>*
  %27114 = load <16 x i16>, <16 x i16>* %27113, align 2, !tbaa !399
  %27115 = getelementptr inbounds i16, i16* %27112, i64 16
  %27116 = bitcast i16* %27115 to <16 x i16>*
  %27117 = load <16 x i16>, <16 x i16>* %27116, align 2, !tbaa !399
  %27118 = add <16 x i16> %27079, %27072
  %27119 = add <16 x i16> %27118, %27086
  %27120 = add <16 x i16> %27119, %27093
  %27121 = add <16 x i16> %27120, %27100
  %27122 = add <16 x i16> %27121, %27107
  %27123 = add <16 x i16> %27122, %27114
  %27124 = add <16 x i16> %27082, %27075
  %27125 = add <16 x i16> %27124, %27089
  %27126 = add <16 x i16> %27125, %27096
  %27127 = add <16 x i16> %27126, %27103
  %27128 = add <16 x i16> %27127, %27110
  %27129 = add <16 x i16> %27128, %27117
  %27130 = shufflevector <16 x i16> %27123, <16 x i16> %27129, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27131 = udiv <32 x i16> %27130, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %27132 = shufflevector <32 x i16> %27131, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27133 = add nsw i64 %26810, %.pre-phi3719
  %27134 = getelementptr inbounds i16, i16* %267, i64 %27133
  %27135 = bitcast i16* %27134 to <16 x i16>*
  store <16 x i16> %27132, <16 x i16>* %27135, align 2, !tbaa !401
  %27136 = shufflevector <32 x i16> %27131, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27137 = getelementptr inbounds i16, i16* %27134, i64 16
  %27138 = bitcast i16* %27137 to <16 x i16>*
  store <16 x i16> %27136, <16 x i16>* %27138, align 2, !tbaa !401
  %indvars.iv.next3529 = add nuw nsw i64 %indvars.iv3528, 1
  %.not2729 = icmp eq i64 %indvars.iv.next3529, %546
  br i1 %.not2729, label %"end for blur_y.s0.x.x.rebased1543", label %"for blur_y.s0.x.x.rebased1542"

"for blur_y.s0.x.x.rebased1558":                  ; preds = %"for blur_y.s0.x.x.rebased1558.preheader", %"consume blur_x1569"
  %blur_y.s0.x.x.rebased1560 = phi i32 [ %27281, %"consume blur_x1569" ], [ 0, %"for blur_y.s0.x.x.rebased1558.preheader" ]
  %27139 = add nsw i32 %blur_y.s0.x.x.rebased1560, %t1670852
  %a3173 = shl nsw i32 %27139, 5
  %27140 = icmp sgt i32 %t1691, %a3173
  %blur_y.s0.x.v0.base.s1561 = select i1 %27140, i32 %a3173, i32 %t1691
  %27141 = icmp slt i32 %27139, 1
  %27142 = icmp sgt i32 %202, %a3173
  %27143 = or i1 %27141, %27142
  br i1 %27143, label %"produce blur_x1566", label %"consume blur_x1569"

"end for blur_y.s0.x.x.rebased1559":              ; preds = %"consume blur_x1569", %"end for blur_y.s0.x.x.rebased1543"
  br i1 %233, label %"produce blur_x1573", label %after_bb1570

"produce blur_x1566":                             ; preds = %"for blur_y.s0.x.x.rebased1558"
  %27144 = icmp slt i32 %blur_y.s0.x.v0.base.s1561, %202
  %blur_x.s0.x.v1.base.s1567 = select i1 %27144, i32 %blur_y.s0.x.v0.base.s1561, i32 %202
  %t9171568 = add nsw i32 %413, %blur_x.s0.x.v1.base.s1567
  %27145 = sext i32 %t9171568 to i64
  %27146 = getelementptr inbounds i16, i16* %read_input860, i64 %27145
  %27147 = getelementptr inbounds i16, i16* %27146, i64 1
  %27148 = bitcast i16* %27147 to <16 x i16>*
  %27149 = load <16 x i16>, <16 x i16>* %27148, align 2, !tbaa !396
  %27150 = getelementptr inbounds i16, i16* %27146, i64 17
  %27151 = bitcast i16* %27150 to <16 x i16>*
  %27152 = load <16 x i16>, <16 x i16>* %27151, align 2, !tbaa !396
  %27153 = bitcast i16* %27146 to <16 x i16>*
  %27154 = load <16 x i16>, <16 x i16>* %27153, align 2, !tbaa !396
  %27155 = getelementptr inbounds i16, i16* %27146, i64 16
  %27156 = bitcast i16* %27155 to <16 x i16>*
  %27157 = load <16 x i16>, <16 x i16>* %27156, align 2, !tbaa !396
  %27158 = getelementptr inbounds i16, i16* %27146, i64 2
  %27159 = bitcast i16* %27158 to <16 x i16>*
  %27160 = load <16 x i16>, <16 x i16>* %27159, align 2, !tbaa !396
  %27161 = getelementptr inbounds i16, i16* %27146, i64 18
  %27162 = bitcast i16* %27161 to <16 x i16>*
  %27163 = load <16 x i16>, <16 x i16>* %27162, align 2, !tbaa !396
  %27164 = getelementptr inbounds i16, i16* %27146, i64 3
  %27165 = bitcast i16* %27164 to <16 x i16>*
  %27166 = load <16 x i16>, <16 x i16>* %27165, align 2, !tbaa !396
  %27167 = getelementptr inbounds i16, i16* %27146, i64 19
  %27168 = bitcast i16* %27167 to <16 x i16>*
  %27169 = load <16 x i16>, <16 x i16>* %27168, align 2, !tbaa !396
  %27170 = getelementptr inbounds i16, i16* %27146, i64 4
  %27171 = bitcast i16* %27170 to <16 x i16>*
  %27172 = load <16 x i16>, <16 x i16>* %27171, align 2, !tbaa !396
  %27173 = getelementptr inbounds i16, i16* %27146, i64 20
  %27174 = bitcast i16* %27173 to <16 x i16>*
  %27175 = load <16 x i16>, <16 x i16>* %27174, align 2, !tbaa !396
  %27176 = getelementptr inbounds i16, i16* %27146, i64 6
  %27177 = bitcast i16* %27176 to <16 x i16>*
  %27178 = load <16 x i16>, <16 x i16>* %27177, align 2, !tbaa !396
  %27179 = getelementptr inbounds i16, i16* %27146, i64 22
  %27180 = bitcast i16* %27179 to <16 x i16>*
  %27181 = load <16 x i16>, <16 x i16>* %27180, align 2, !tbaa !396
  %27182 = getelementptr inbounds i16, i16* %27146, i64 5
  %27183 = bitcast i16* %27182 to <16 x i16>*
  %27184 = load <16 x i16>, <16 x i16>* %27183, align 2, !tbaa !396
  %27185 = getelementptr inbounds i16, i16* %27146, i64 21
  %27186 = bitcast i16* %27185 to <16 x i16>*
  %27187 = load <16 x i16>, <16 x i16>* %27186, align 2, !tbaa !396
  %27188 = add <16 x i16> %27154, %27149
  %27189 = add <16 x i16> %27188, %27160
  %27190 = add <16 x i16> %27189, %27166
  %27191 = add <16 x i16> %27190, %27172
  %27192 = add <16 x i16> %27191, %27178
  %27193 = add <16 x i16> %27192, %27184
  %27194 = add <16 x i16> %27157, %27152
  %27195 = add <16 x i16> %27194, %27163
  %27196 = add <16 x i16> %27195, %27169
  %27197 = add <16 x i16> %27196, %27175
  %27198 = add <16 x i16> %27197, %27181
  %27199 = add <16 x i16> %27198, %27187
  %27200 = shufflevector <16 x i16> %27193, <16 x i16> %27199, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27201 = udiv <32 x i16> %27200, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %27202 = shufflevector <32 x i16> %27201, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27203 = sext i32 %blur_x.s0.x.v1.base.s1567 to i64
  %27204 = add nsw i64 %27203, %26978
  %27205 = getelementptr inbounds i16, i16* %blur_x917, i64 %27204
  %27206 = bitcast i16* %27205 to <16 x i16>*
  store <16 x i16> %27202, <16 x i16>* %27206, align 2, !tbaa !399
  %27207 = shufflevector <32 x i16> %27201, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27208 = getelementptr inbounds i16, i16* %27205, i64 16
  %27209 = bitcast i16* %27208 to <16 x i16>*
  store <16 x i16> %27207, <16 x i16>* %27209, align 2, !tbaa !399
  br label %"consume blur_x1569"

"consume blur_x1569":                             ; preds = %"for blur_y.s0.x.x.rebased1558", %"produce blur_x1566"
  %27210 = sext i32 %blur_y.s0.x.v0.base.s1561 to i64
  %27211 = add nsw i64 %26981, %27210
  %27212 = getelementptr inbounds i16, i16* %blur_x917, i64 %27211
  %27213 = bitcast i16* %27212 to <16 x i16>*
  %27214 = load <16 x i16>, <16 x i16>* %27213, align 2, !tbaa !399
  %27215 = getelementptr inbounds i16, i16* %27212, i64 16
  %27216 = bitcast i16* %27215 to <16 x i16>*
  %27217 = load <16 x i16>, <16 x i16>* %27216, align 2, !tbaa !399
  %27218 = add nsw i64 %26984, %27210
  %27219 = getelementptr inbounds i16, i16* %blur_x917, i64 %27218
  %27220 = bitcast i16* %27219 to <16 x i16>*
  %27221 = load <16 x i16>, <16 x i16>* %27220, align 2, !tbaa !399
  %27222 = getelementptr inbounds i16, i16* %27219, i64 16
  %27223 = bitcast i16* %27222 to <16 x i16>*
  %27224 = load <16 x i16>, <16 x i16>* %27223, align 2, !tbaa !399
  %27225 = add nsw i64 %26987, %27210
  %27226 = getelementptr inbounds i16, i16* %blur_x917, i64 %27225
  %27227 = bitcast i16* %27226 to <16 x i16>*
  %27228 = load <16 x i16>, <16 x i16>* %27227, align 2, !tbaa !399
  %27229 = getelementptr inbounds i16, i16* %27226, i64 16
  %27230 = bitcast i16* %27229 to <16 x i16>*
  %27231 = load <16 x i16>, <16 x i16>* %27230, align 2, !tbaa !399
  %27232 = add nsw i64 %26990, %27210
  %27233 = getelementptr inbounds i16, i16* %blur_x917, i64 %27232
  %27234 = bitcast i16* %27233 to <16 x i16>*
  %27235 = load <16 x i16>, <16 x i16>* %27234, align 2, !tbaa !399
  %27236 = getelementptr inbounds i16, i16* %27233, i64 16
  %27237 = bitcast i16* %27236 to <16 x i16>*
  %27238 = load <16 x i16>, <16 x i16>* %27237, align 2, !tbaa !399
  %27239 = add nsw i64 %26993, %27210
  %27240 = getelementptr inbounds i16, i16* %blur_x917, i64 %27239
  %27241 = bitcast i16* %27240 to <16 x i16>*
  %27242 = load <16 x i16>, <16 x i16>* %27241, align 2, !tbaa !399
  %27243 = getelementptr inbounds i16, i16* %27240, i64 16
  %27244 = bitcast i16* %27243 to <16 x i16>*
  %27245 = load <16 x i16>, <16 x i16>* %27244, align 2, !tbaa !399
  %27246 = add nsw i64 %26996, %27210
  %27247 = getelementptr inbounds i16, i16* %blur_x917, i64 %27246
  %27248 = bitcast i16* %27247 to <16 x i16>*
  %27249 = load <16 x i16>, <16 x i16>* %27248, align 2, !tbaa !399
  %27250 = getelementptr inbounds i16, i16* %27247, i64 16
  %27251 = bitcast i16* %27250 to <16 x i16>*
  %27252 = load <16 x i16>, <16 x i16>* %27251, align 2, !tbaa !399
  %27253 = add nsw i64 %26999, %27210
  %27254 = getelementptr inbounds i16, i16* %blur_x917, i64 %27253
  %27255 = bitcast i16* %27254 to <16 x i16>*
  %27256 = load <16 x i16>, <16 x i16>* %27255, align 2, !tbaa !399
  %27257 = getelementptr inbounds i16, i16* %27254, i64 16
  %27258 = bitcast i16* %27257 to <16 x i16>*
  %27259 = load <16 x i16>, <16 x i16>* %27258, align 2, !tbaa !399
  %27260 = add <16 x i16> %27221, %27214
  %27261 = add <16 x i16> %27260, %27228
  %27262 = add <16 x i16> %27261, %27235
  %27263 = add <16 x i16> %27262, %27242
  %27264 = add <16 x i16> %27263, %27249
  %27265 = add <16 x i16> %27264, %27256
  %27266 = add <16 x i16> %27224, %27217
  %27267 = add <16 x i16> %27266, %27231
  %27268 = add <16 x i16> %27267, %27238
  %27269 = add <16 x i16> %27268, %27245
  %27270 = add <16 x i16> %27269, %27252
  %27271 = add <16 x i16> %27270, %27259
  %27272 = shufflevector <16 x i16> %27265, <16 x i16> %27271, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27273 = udiv <32 x i16> %27272, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %27274 = shufflevector <32 x i16> %27273, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27275 = add nsw i64 %27003, %27210
  %27276 = getelementptr inbounds i16, i16* %267, i64 %27275
  %27277 = bitcast i16* %27276 to <16 x i16>*
  store <16 x i16> %27274, <16 x i16>* %27277, align 2, !tbaa !401
  %27278 = shufflevector <32 x i16> %27273, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27279 = getelementptr inbounds i16, i16* %27276, i64 16
  %27280 = bitcast i16* %27279 to <16 x i16>*
  store <16 x i16> %27278, <16 x i16>* %27280, align 2, !tbaa !401
  %27281 = add nuw nsw i32 %blur_y.s0.x.x.rebased1560, 1
  %.not2728 = icmp eq i32 %27281, %t1727936
  br i1 %.not2728, label %"end for blur_y.s0.x.x.rebased1559", label %"for blur_y.s0.x.x.rebased1558"

after_bb1570:                                     ; preds = %"end for blur_y.s0.x.x.rebased1559", %"produce blur_x1573"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1585.preheader", label %"end for blur_y.s0.x.x.rebased1586", !prof !386

"for blur_y.s0.x.x.rebased1585.preheader":        ; preds = %after_bb1570
  %27282 = sext i32 %t1732952 to i64
  %27283 = zext i32 %.pre-phi3685 to i64
  %27284 = mul nsw i64 %27283, %353
  %27285 = sub nsw i64 %27284, %302
  %27286 = zext i32 %.pre-phi3681 to i64
  %27287 = mul nsw i64 %27286, %353
  %27288 = sub nsw i64 %27287, %302
  %27289 = zext i32 %.pre-phi3689 to i64
  %27290 = mul nsw i64 %27289, %353
  %27291 = sub nsw i64 %27290, %302
  %27292 = zext i32 %.pre-phi3693 to i64
  %27293 = mul nsw i64 %27292, %353
  %27294 = sub nsw i64 %27293, %302
  %27295 = zext i32 %.pre-phi3699 to i64
  %27296 = mul nsw i64 %27295, %353
  %27297 = sub nsw i64 %27296, %302
  %27298 = zext i32 %.pre-phi3673 to i64
  %27299 = mul nsw i64 %27298, %353
  %27300 = sub nsw i64 %27299, %302
  %27301 = zext i32 %.pre-phi3669 to i64
  %27302 = mul nsw i64 %27301, %353
  %27303 = sub nsw i64 %27302, %302
  %27304 = sext i32 %a393 to i64
  %27305 = add nsw i64 %27304, 11
  %27306 = mul nsw i64 %27305, %350
  %27307 = add nsw i64 %27306, %354
  br label %"for blur_y.s0.x.x.rebased1585"

"produce blur_x1573":                             ; preds = %"end for blur_y.s0.x.x.rebased1559"
  %27308 = getelementptr inbounds i16, i16* %read_input860, i64 %417
  %27309 = getelementptr inbounds i16, i16* %27308, i64 -31
  %27310 = bitcast i16* %27309 to <16 x i16>*
  %27311 = load <16 x i16>, <16 x i16>* %27310, align 2, !tbaa !396
  %27312 = getelementptr inbounds i16, i16* %27308, i64 -15
  %27313 = bitcast i16* %27312 to <16 x i16>*
  %27314 = load <16 x i16>, <16 x i16>* %27313, align 2, !tbaa !396
  %27315 = getelementptr inbounds i16, i16* %27308, i64 -32
  %27316 = bitcast i16* %27315 to <16 x i16>*
  %27317 = load <16 x i16>, <16 x i16>* %27316, align 2, !tbaa !396
  %27318 = getelementptr inbounds i16, i16* %27308, i64 -16
  %27319 = bitcast i16* %27318 to <16 x i16>*
  %27320 = load <16 x i16>, <16 x i16>* %27319, align 2, !tbaa !396
  %27321 = getelementptr inbounds i16, i16* %27308, i64 -30
  %27322 = bitcast i16* %27321 to <16 x i16>*
  %27323 = load <16 x i16>, <16 x i16>* %27322, align 2, !tbaa !396
  %27324 = getelementptr inbounds i16, i16* %27308, i64 -14
  %27325 = bitcast i16* %27324 to <16 x i16>*
  %27326 = load <16 x i16>, <16 x i16>* %27325, align 2, !tbaa !396
  %27327 = getelementptr inbounds i16, i16* %27308, i64 -29
  %27328 = bitcast i16* %27327 to <16 x i16>*
  %27329 = load <16 x i16>, <16 x i16>* %27328, align 2, !tbaa !396
  %27330 = getelementptr inbounds i16, i16* %27308, i64 -13
  %27331 = bitcast i16* %27330 to <16 x i16>*
  %27332 = load <16 x i16>, <16 x i16>* %27331, align 2, !tbaa !396
  %27333 = getelementptr inbounds i16, i16* %27308, i64 -28
  %27334 = bitcast i16* %27333 to <16 x i16>*
  %27335 = load <16 x i16>, <16 x i16>* %27334, align 2, !tbaa !396
  %27336 = getelementptr inbounds i16, i16* %27308, i64 -12
  %27337 = bitcast i16* %27336 to <16 x i16>*
  %27338 = load <16 x i16>, <16 x i16>* %27337, align 2, !tbaa !396
  %27339 = getelementptr inbounds i16, i16* %27308, i64 -26
  %27340 = bitcast i16* %27339 to <16 x i16>*
  %27341 = load <16 x i16>, <16 x i16>* %27340, align 2, !tbaa !396
  %27342 = getelementptr inbounds i16, i16* %27308, i64 -10
  %27343 = bitcast i16* %27342 to <16 x i16>*
  %27344 = load <16 x i16>, <16 x i16>* %27343, align 2, !tbaa !396
  %27345 = getelementptr inbounds i16, i16* %27308, i64 -27
  %27346 = bitcast i16* %27345 to <16 x i16>*
  %27347 = load <16 x i16>, <16 x i16>* %27346, align 2, !tbaa !396
  %27348 = getelementptr inbounds i16, i16* %27308, i64 -11
  %27349 = bitcast i16* %27348 to <16 x i16>*
  %27350 = load <16 x i16>, <16 x i16>* %27349, align 2, !tbaa !396
  %27351 = add <16 x i16> %27317, %27311
  %27352 = add <16 x i16> %27351, %27323
  %27353 = add <16 x i16> %27352, %27329
  %27354 = add <16 x i16> %27353, %27335
  %27355 = add <16 x i16> %27354, %27341
  %27356 = add <16 x i16> %27355, %27347
  %27357 = add <16 x i16> %27320, %27314
  %27358 = add <16 x i16> %27357, %27326
  %27359 = add <16 x i16> %27358, %27332
  %27360 = add <16 x i16> %27359, %27338
  %27361 = add <16 x i16> %27360, %27344
  %27362 = add <16 x i16> %27361, %27350
  %27363 = shufflevector <16 x i16> %27356, <16 x i16> %27362, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27364 = udiv <32 x i16> %27363, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %27365 = shufflevector <32 x i16> %27364, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27366 = zext i32 %.pre-phi3673 to i64
  %27367 = mul nsw i64 %303, %27366
  %27368 = add nsw i64 %305, %27367
  %27369 = getelementptr inbounds i16, i16* %blur_x917, i64 %27368
  %27370 = getelementptr inbounds i16, i16* %27369, i64 -32
  %27371 = bitcast i16* %27370 to <16 x i16>*
  store <16 x i16> %27365, <16 x i16>* %27371, align 2, !tbaa !399
  %27372 = shufflevector <32 x i16> %27364, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27373 = getelementptr inbounds i16, i16* %27369, i64 -16
  %27374 = bitcast i16* %27373 to <16 x i16>*
  store <16 x i16> %27372, <16 x i16>* %27374, align 2, !tbaa !399
  %27375 = zext i32 %.pre-phi3685 to i64
  %27376 = mul nsw i64 %27375, %349
  %27377 = add nsw i64 %27376, %300
  %27378 = getelementptr inbounds i16, i16* %blur_x917, i64 %27377
  %27379 = getelementptr inbounds i16, i16* %27378, i64 -32
  %27380 = bitcast i16* %27379 to <16 x i16>*
  %27381 = load <16 x i16>, <16 x i16>* %27380, align 2, !tbaa !399
  %27382 = getelementptr inbounds i16, i16* %27378, i64 -16
  %27383 = bitcast i16* %27382 to <16 x i16>*
  %27384 = load <16 x i16>, <16 x i16>* %27383, align 2, !tbaa !399
  %27385 = zext i32 %.pre-phi3681 to i64
  %27386 = mul nsw i64 %27385, %349
  %27387 = add nsw i64 %27386, %300
  %27388 = getelementptr inbounds i16, i16* %blur_x917, i64 %27387
  %27389 = getelementptr inbounds i16, i16* %27388, i64 -32
  %27390 = bitcast i16* %27389 to <16 x i16>*
  %27391 = load <16 x i16>, <16 x i16>* %27390, align 2, !tbaa !399
  %27392 = getelementptr inbounds i16, i16* %27388, i64 -16
  %27393 = bitcast i16* %27392 to <16 x i16>*
  %27394 = load <16 x i16>, <16 x i16>* %27393, align 2, !tbaa !399
  %27395 = zext i32 %.pre-phi3689 to i64
  %27396 = mul nsw i64 %27395, %349
  %27397 = add nsw i64 %27396, %300
  %27398 = getelementptr inbounds i16, i16* %blur_x917, i64 %27397
  %27399 = getelementptr inbounds i16, i16* %27398, i64 -32
  %27400 = bitcast i16* %27399 to <16 x i16>*
  %27401 = load <16 x i16>, <16 x i16>* %27400, align 2, !tbaa !399
  %27402 = getelementptr inbounds i16, i16* %27398, i64 -16
  %27403 = bitcast i16* %27402 to <16 x i16>*
  %27404 = load <16 x i16>, <16 x i16>* %27403, align 2, !tbaa !399
  %27405 = zext i32 %.pre-phi3693 to i64
  %27406 = mul nsw i64 %27405, %349
  %27407 = add nsw i64 %27406, %300
  %27408 = getelementptr inbounds i16, i16* %blur_x917, i64 %27407
  %27409 = getelementptr inbounds i16, i16* %27408, i64 -32
  %27410 = bitcast i16* %27409 to <16 x i16>*
  %27411 = load <16 x i16>, <16 x i16>* %27410, align 2, !tbaa !399
  %27412 = getelementptr inbounds i16, i16* %27408, i64 -16
  %27413 = bitcast i16* %27412 to <16 x i16>*
  %27414 = load <16 x i16>, <16 x i16>* %27413, align 2, !tbaa !399
  %27415 = zext i32 %.pre-phi3699 to i64
  %27416 = mul nsw i64 %27415, %349
  %27417 = add nsw i64 %27416, %300
  %27418 = getelementptr inbounds i16, i16* %blur_x917, i64 %27417
  %27419 = getelementptr inbounds i16, i16* %27418, i64 -32
  %27420 = bitcast i16* %27419 to <16 x i16>*
  %27421 = load <16 x i16>, <16 x i16>* %27420, align 2, !tbaa !399
  %27422 = getelementptr inbounds i16, i16* %27418, i64 -16
  %27423 = bitcast i16* %27422 to <16 x i16>*
  %27424 = load <16 x i16>, <16 x i16>* %27423, align 2, !tbaa !399
  %27425 = mul nsw i64 %27366, %349
  %27426 = add nsw i64 %27425, %300
  %27427 = getelementptr inbounds i16, i16* %blur_x917, i64 %27426
  %27428 = getelementptr inbounds i16, i16* %27427, i64 -32
  %27429 = bitcast i16* %27428 to <16 x i16>*
  %27430 = load <16 x i16>, <16 x i16>* %27429, align 2, !tbaa !399
  %27431 = getelementptr inbounds i16, i16* %27427, i64 -16
  %27432 = bitcast i16* %27431 to <16 x i16>*
  %27433 = load <16 x i16>, <16 x i16>* %27432, align 2, !tbaa !399
  %27434 = zext i32 %.pre-phi3669 to i64
  %27435 = mul nsw i64 %27434, %349
  %27436 = add nsw i64 %27435, %300
  %27437 = getelementptr inbounds i16, i16* %blur_x917, i64 %27436
  %27438 = getelementptr inbounds i16, i16* %27437, i64 -32
  %27439 = bitcast i16* %27438 to <16 x i16>*
  %27440 = load <16 x i16>, <16 x i16>* %27439, align 2, !tbaa !399
  %27441 = getelementptr inbounds i16, i16* %27437, i64 -16
  %27442 = bitcast i16* %27441 to <16 x i16>*
  %27443 = load <16 x i16>, <16 x i16>* %27442, align 2, !tbaa !399
  %27444 = add <16 x i16> %27391, %27381
  %27445 = add <16 x i16> %27444, %27401
  %27446 = add <16 x i16> %27445, %27411
  %27447 = add <16 x i16> %27446, %27421
  %27448 = add <16 x i16> %27447, %27430
  %27449 = add <16 x i16> %27448, %27440
  %27450 = add <16 x i16> %27394, %27384
  %27451 = add <16 x i16> %27450, %27404
  %27452 = add <16 x i16> %27451, %27414
  %27453 = add <16 x i16> %27452, %27424
  %27454 = add <16 x i16> %27453, %27433
  %27455 = add <16 x i16> %27454, %27443
  %27456 = shufflevector <16 x i16> %27449, <16 x i16> %27455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27457 = udiv <32 x i16> %27456, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %27458 = shufflevector <32 x i16> %27457, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27459 = sext i32 %a393 to i64
  %27460 = add nsw i64 %27459, 11
  %27461 = mul nsw i64 %27460, %350
  %27462 = add nsw i64 %352, %27461
  %27463 = getelementptr inbounds i16, i16* %267, i64 %27462
  %27464 = getelementptr inbounds i16, i16* %27463, i64 -32
  %27465 = bitcast i16* %27464 to <16 x i16>*
  store <16 x i16> %27458, <16 x i16>* %27465, align 2, !tbaa !401
  %27466 = shufflevector <32 x i16> %27457, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27467 = getelementptr inbounds i16, i16* %27463, i64 -16
  %27468 = bitcast i16* %27467 to <16 x i16>*
  store <16 x i16> %27466, <16 x i16>* %27468, align 2, !tbaa !401
  br label %after_bb1570

"for blur_y.s0.x.x.rebased1585":                  ; preds = %"for blur_y.s0.x.x.rebased1585.preheader", %"consume blur_x1593"
  %indvars.iv3530 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1585.preheader" ], [ %indvars.iv.next3531, %"consume blur_x1593" ]
  %27469 = add nsw i64 %indvars.iv3530, %307
  %27470 = icmp slt i64 %27469, 1
  %27471 = trunc i64 %27469 to i32
  %27472 = shl nsw i32 %27471, 5
  %27473 = icmp sgt i32 %202, %27472
  %27474 = or i1 %27470, %27473
  br i1 %27474, label %"produce blur_x1591", label %"for blur_y.s0.x.x.rebased1585.consume blur_x1593_crit_edge"

"for blur_y.s0.x.x.rebased1585.consume blur_x1593_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1585"
  %.pre3720 = shl nsw i64 %27469, 5
  br label %"consume blur_x1593"

"end for blur_y.s0.x.x.rebased1586":              ; preds = %"consume blur_x1593", %after_bb1570
  br i1 %308, label %"for blur_y.s0.x.x.rebased1601.preheader", label %"end for blur_y.s0.x.x.rebased1602", !prof !386

"for blur_y.s0.x.x.rebased1601.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1586"
  %27475 = sext i32 %t1732952 to i64
  %27476 = zext i32 %.pre-phi3685 to i64
  %27477 = mul nsw i64 %27476, %353
  %27478 = sub nsw i64 %27477, %302
  %27479 = zext i32 %.pre-phi3681 to i64
  %27480 = mul nsw i64 %27479, %353
  %27481 = sub nsw i64 %27480, %302
  %27482 = zext i32 %.pre-phi3689 to i64
  %27483 = mul nsw i64 %27482, %353
  %27484 = sub nsw i64 %27483, %302
  %27485 = zext i32 %.pre-phi3693 to i64
  %27486 = mul nsw i64 %27485, %353
  %27487 = sub nsw i64 %27486, %302
  %27488 = zext i32 %.pre-phi3699 to i64
  %27489 = mul nsw i64 %27488, %353
  %27490 = sub nsw i64 %27489, %302
  %27491 = zext i32 %.pre-phi3673 to i64
  %27492 = mul nsw i64 %27491, %353
  %27493 = sub nsw i64 %27492, %302
  %27494 = zext i32 %.pre-phi3669 to i64
  %27495 = mul nsw i64 %27494, %353
  %27496 = sub nsw i64 %27495, %302
  %27497 = sext i32 %a393 to i64
  %27498 = add nsw i64 %27497, 11
  %27499 = mul nsw i64 %27498, %350
  %27500 = add nsw i64 %27499, %354
  br label %"for blur_y.s0.x.x.rebased1601"

"produce blur_x1591":                             ; preds = %"for blur_y.s0.x.x.rebased1585"
  %t9281592 = add nsw i32 %419, %27472
  %27501 = sext i32 %t9281592 to i64
  %27502 = getelementptr inbounds i16, i16* %read_input860, i64 %27501
  %27503 = getelementptr inbounds i16, i16* %27502, i64 1
  %27504 = bitcast i16* %27503 to <16 x i16>*
  %27505 = load <16 x i16>, <16 x i16>* %27504, align 2, !tbaa !396
  %27506 = getelementptr inbounds i16, i16* %27502, i64 17
  %27507 = bitcast i16* %27506 to <16 x i16>*
  %27508 = load <16 x i16>, <16 x i16>* %27507, align 2, !tbaa !396
  %27509 = bitcast i16* %27502 to <16 x i16>*
  %27510 = load <16 x i16>, <16 x i16>* %27509, align 2, !tbaa !396
  %27511 = getelementptr inbounds i16, i16* %27502, i64 16
  %27512 = bitcast i16* %27511 to <16 x i16>*
  %27513 = load <16 x i16>, <16 x i16>* %27512, align 2, !tbaa !396
  %27514 = getelementptr inbounds i16, i16* %27502, i64 2
  %27515 = bitcast i16* %27514 to <16 x i16>*
  %27516 = load <16 x i16>, <16 x i16>* %27515, align 2, !tbaa !396
  %27517 = getelementptr inbounds i16, i16* %27502, i64 18
  %27518 = bitcast i16* %27517 to <16 x i16>*
  %27519 = load <16 x i16>, <16 x i16>* %27518, align 2, !tbaa !396
  %27520 = getelementptr inbounds i16, i16* %27502, i64 3
  %27521 = bitcast i16* %27520 to <16 x i16>*
  %27522 = load <16 x i16>, <16 x i16>* %27521, align 2, !tbaa !396
  %27523 = getelementptr inbounds i16, i16* %27502, i64 19
  %27524 = bitcast i16* %27523 to <16 x i16>*
  %27525 = load <16 x i16>, <16 x i16>* %27524, align 2, !tbaa !396
  %27526 = getelementptr inbounds i16, i16* %27502, i64 4
  %27527 = bitcast i16* %27526 to <16 x i16>*
  %27528 = load <16 x i16>, <16 x i16>* %27527, align 2, !tbaa !396
  %27529 = getelementptr inbounds i16, i16* %27502, i64 20
  %27530 = bitcast i16* %27529 to <16 x i16>*
  %27531 = load <16 x i16>, <16 x i16>* %27530, align 2, !tbaa !396
  %27532 = getelementptr inbounds i16, i16* %27502, i64 6
  %27533 = bitcast i16* %27532 to <16 x i16>*
  %27534 = load <16 x i16>, <16 x i16>* %27533, align 2, !tbaa !396
  %27535 = getelementptr inbounds i16, i16* %27502, i64 22
  %27536 = bitcast i16* %27535 to <16 x i16>*
  %27537 = load <16 x i16>, <16 x i16>* %27536, align 2, !tbaa !396
  %27538 = getelementptr inbounds i16, i16* %27502, i64 5
  %27539 = bitcast i16* %27538 to <16 x i16>*
  %27540 = load <16 x i16>, <16 x i16>* %27539, align 2, !tbaa !396
  %27541 = getelementptr inbounds i16, i16* %27502, i64 21
  %27542 = bitcast i16* %27541 to <16 x i16>*
  %27543 = load <16 x i16>, <16 x i16>* %27542, align 2, !tbaa !396
  %27544 = add <16 x i16> %27510, %27505
  %27545 = add <16 x i16> %27544, %27516
  %27546 = add <16 x i16> %27545, %27522
  %27547 = add <16 x i16> %27546, %27528
  %27548 = add <16 x i16> %27547, %27534
  %27549 = add <16 x i16> %27548, %27540
  %27550 = add <16 x i16> %27513, %27508
  %27551 = add <16 x i16> %27550, %27519
  %27552 = add <16 x i16> %27551, %27525
  %27553 = add <16 x i16> %27552, %27531
  %27554 = add <16 x i16> %27553, %27537
  %27555 = add <16 x i16> %27554, %27543
  %27556 = shufflevector <16 x i16> %27549, <16 x i16> %27555, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27557 = udiv <32 x i16> %27556, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %27558 = shufflevector <32 x i16> %27557, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27559 = shl nsw i64 %27469, 5
  %27560 = add nsw i64 %27559, %27282
  %27561 = getelementptr inbounds i16, i16* %blur_x917, i64 %27560
  %27562 = bitcast i16* %27561 to <16 x i16>*
  store <16 x i16> %27558, <16 x i16>* %27562, align 2, !tbaa !399
  %27563 = shufflevector <32 x i16> %27557, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27564 = getelementptr inbounds i16, i16* %27561, i64 16
  %27565 = bitcast i16* %27564 to <16 x i16>*
  store <16 x i16> %27563, <16 x i16>* %27565, align 2, !tbaa !399
  br label %"consume blur_x1593"

"consume blur_x1593":                             ; preds = %"for blur_y.s0.x.x.rebased1585.consume blur_x1593_crit_edge", %"produce blur_x1591"
  %.pre-phi3721 = phi i64 [ %.pre3720, %"for blur_y.s0.x.x.rebased1585.consume blur_x1593_crit_edge" ], [ %27559, %"produce blur_x1591" ]
  %27566 = add nsw i64 %27285, %.pre-phi3721
  %27567 = getelementptr inbounds i16, i16* %blur_x917, i64 %27566
  %27568 = bitcast i16* %27567 to <16 x i16>*
  %27569 = load <16 x i16>, <16 x i16>* %27568, align 2, !tbaa !399
  %27570 = getelementptr inbounds i16, i16* %27567, i64 16
  %27571 = bitcast i16* %27570 to <16 x i16>*
  %27572 = load <16 x i16>, <16 x i16>* %27571, align 2, !tbaa !399
  %27573 = add nsw i64 %27288, %.pre-phi3721
  %27574 = getelementptr inbounds i16, i16* %blur_x917, i64 %27573
  %27575 = bitcast i16* %27574 to <16 x i16>*
  %27576 = load <16 x i16>, <16 x i16>* %27575, align 2, !tbaa !399
  %27577 = getelementptr inbounds i16, i16* %27574, i64 16
  %27578 = bitcast i16* %27577 to <16 x i16>*
  %27579 = load <16 x i16>, <16 x i16>* %27578, align 2, !tbaa !399
  %27580 = add nsw i64 %27291, %.pre-phi3721
  %27581 = getelementptr inbounds i16, i16* %blur_x917, i64 %27580
  %27582 = bitcast i16* %27581 to <16 x i16>*
  %27583 = load <16 x i16>, <16 x i16>* %27582, align 2, !tbaa !399
  %27584 = getelementptr inbounds i16, i16* %27581, i64 16
  %27585 = bitcast i16* %27584 to <16 x i16>*
  %27586 = load <16 x i16>, <16 x i16>* %27585, align 2, !tbaa !399
  %27587 = add nsw i64 %27294, %.pre-phi3721
  %27588 = getelementptr inbounds i16, i16* %blur_x917, i64 %27587
  %27589 = bitcast i16* %27588 to <16 x i16>*
  %27590 = load <16 x i16>, <16 x i16>* %27589, align 2, !tbaa !399
  %27591 = getelementptr inbounds i16, i16* %27588, i64 16
  %27592 = bitcast i16* %27591 to <16 x i16>*
  %27593 = load <16 x i16>, <16 x i16>* %27592, align 2, !tbaa !399
  %27594 = add nsw i64 %27297, %.pre-phi3721
  %27595 = getelementptr inbounds i16, i16* %blur_x917, i64 %27594
  %27596 = bitcast i16* %27595 to <16 x i16>*
  %27597 = load <16 x i16>, <16 x i16>* %27596, align 2, !tbaa !399
  %27598 = getelementptr inbounds i16, i16* %27595, i64 16
  %27599 = bitcast i16* %27598 to <16 x i16>*
  %27600 = load <16 x i16>, <16 x i16>* %27599, align 2, !tbaa !399
  %27601 = add nsw i64 %27300, %.pre-phi3721
  %27602 = getelementptr inbounds i16, i16* %blur_x917, i64 %27601
  %27603 = bitcast i16* %27602 to <16 x i16>*
  %27604 = load <16 x i16>, <16 x i16>* %27603, align 2, !tbaa !399
  %27605 = getelementptr inbounds i16, i16* %27602, i64 16
  %27606 = bitcast i16* %27605 to <16 x i16>*
  %27607 = load <16 x i16>, <16 x i16>* %27606, align 2, !tbaa !399
  %27608 = add nsw i64 %27303, %.pre-phi3721
  %27609 = getelementptr inbounds i16, i16* %blur_x917, i64 %27608
  %27610 = bitcast i16* %27609 to <16 x i16>*
  %27611 = load <16 x i16>, <16 x i16>* %27610, align 2, !tbaa !399
  %27612 = getelementptr inbounds i16, i16* %27609, i64 16
  %27613 = bitcast i16* %27612 to <16 x i16>*
  %27614 = load <16 x i16>, <16 x i16>* %27613, align 2, !tbaa !399
  %27615 = add <16 x i16> %27576, %27569
  %27616 = add <16 x i16> %27615, %27583
  %27617 = add <16 x i16> %27616, %27590
  %27618 = add <16 x i16> %27617, %27597
  %27619 = add <16 x i16> %27618, %27604
  %27620 = add <16 x i16> %27619, %27611
  %27621 = add <16 x i16> %27579, %27572
  %27622 = add <16 x i16> %27621, %27586
  %27623 = add <16 x i16> %27622, %27593
  %27624 = add <16 x i16> %27623, %27600
  %27625 = add <16 x i16> %27624, %27607
  %27626 = add <16 x i16> %27625, %27614
  %27627 = shufflevector <16 x i16> %27620, <16 x i16> %27626, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27628 = udiv <32 x i16> %27627, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %27629 = shufflevector <32 x i16> %27628, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27630 = add nsw i64 %27307, %.pre-phi3721
  %27631 = getelementptr inbounds i16, i16* %267, i64 %27630
  %27632 = bitcast i16* %27631 to <16 x i16>*
  store <16 x i16> %27629, <16 x i16>* %27632, align 2, !tbaa !401
  %27633 = shufflevector <32 x i16> %27628, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27634 = getelementptr inbounds i16, i16* %27631, i64 16
  %27635 = bitcast i16* %27634 to <16 x i16>*
  store <16 x i16> %27633, <16 x i16>* %27635, align 2, !tbaa !401
  %indvars.iv.next3531 = add nuw nsw i64 %indvars.iv3530, 1
  %.not2725 = icmp eq i64 %indvars.iv.next3531, %546
  br i1 %.not2725, label %"end for blur_y.s0.x.x.rebased1586", label %"for blur_y.s0.x.x.rebased1585"

"for blur_y.s0.x.x.rebased1601":                  ; preds = %"for blur_y.s0.x.x.rebased1601.preheader", %"consume blur_x1612"
  %blur_y.s0.x.x.rebased1603 = phi i32 [ %27778, %"consume blur_x1612" ], [ 0, %"for blur_y.s0.x.x.rebased1601.preheader" ]
  %27636 = add nsw i32 %blur_y.s0.x.x.rebased1603, %t1670852
  %a3330 = shl nsw i32 %27636, 5
  %27637 = icmp sgt i32 %t1691, %a3330
  %blur_y.s0.x.v0.base.s1604 = select i1 %27637, i32 %a3330, i32 %t1691
  %27638 = icmp slt i32 %27636, 1
  %27639 = icmp sgt i32 %202, %a3330
  %27640 = or i1 %27638, %27639
  br i1 %27640, label %"produce blur_x1609", label %"consume blur_x1612"

"end for blur_y.s0.x.x.rebased1602":              ; preds = %"consume blur_x1612", %"end for blur_y.s0.x.x.rebased1586"
  br i1 %233, label %"produce blur_x1616", label %after_bb1613

"produce blur_x1609":                             ; preds = %"for blur_y.s0.x.x.rebased1601"
  %27641 = icmp slt i32 %blur_y.s0.x.v0.base.s1604, %202
  %blur_x.s0.x.v1.base.s1610 = select i1 %27641, i32 %blur_y.s0.x.v0.base.s1604, i32 %202
  %t9331611 = add nsw i32 %419, %blur_x.s0.x.v1.base.s1610
  %27642 = sext i32 %t9331611 to i64
  %27643 = getelementptr inbounds i16, i16* %read_input860, i64 %27642
  %27644 = getelementptr inbounds i16, i16* %27643, i64 1
  %27645 = bitcast i16* %27644 to <16 x i16>*
  %27646 = load <16 x i16>, <16 x i16>* %27645, align 2, !tbaa !396
  %27647 = getelementptr inbounds i16, i16* %27643, i64 17
  %27648 = bitcast i16* %27647 to <16 x i16>*
  %27649 = load <16 x i16>, <16 x i16>* %27648, align 2, !tbaa !396
  %27650 = bitcast i16* %27643 to <16 x i16>*
  %27651 = load <16 x i16>, <16 x i16>* %27650, align 2, !tbaa !396
  %27652 = getelementptr inbounds i16, i16* %27643, i64 16
  %27653 = bitcast i16* %27652 to <16 x i16>*
  %27654 = load <16 x i16>, <16 x i16>* %27653, align 2, !tbaa !396
  %27655 = getelementptr inbounds i16, i16* %27643, i64 2
  %27656 = bitcast i16* %27655 to <16 x i16>*
  %27657 = load <16 x i16>, <16 x i16>* %27656, align 2, !tbaa !396
  %27658 = getelementptr inbounds i16, i16* %27643, i64 18
  %27659 = bitcast i16* %27658 to <16 x i16>*
  %27660 = load <16 x i16>, <16 x i16>* %27659, align 2, !tbaa !396
  %27661 = getelementptr inbounds i16, i16* %27643, i64 3
  %27662 = bitcast i16* %27661 to <16 x i16>*
  %27663 = load <16 x i16>, <16 x i16>* %27662, align 2, !tbaa !396
  %27664 = getelementptr inbounds i16, i16* %27643, i64 19
  %27665 = bitcast i16* %27664 to <16 x i16>*
  %27666 = load <16 x i16>, <16 x i16>* %27665, align 2, !tbaa !396
  %27667 = getelementptr inbounds i16, i16* %27643, i64 4
  %27668 = bitcast i16* %27667 to <16 x i16>*
  %27669 = load <16 x i16>, <16 x i16>* %27668, align 2, !tbaa !396
  %27670 = getelementptr inbounds i16, i16* %27643, i64 20
  %27671 = bitcast i16* %27670 to <16 x i16>*
  %27672 = load <16 x i16>, <16 x i16>* %27671, align 2, !tbaa !396
  %27673 = getelementptr inbounds i16, i16* %27643, i64 6
  %27674 = bitcast i16* %27673 to <16 x i16>*
  %27675 = load <16 x i16>, <16 x i16>* %27674, align 2, !tbaa !396
  %27676 = getelementptr inbounds i16, i16* %27643, i64 22
  %27677 = bitcast i16* %27676 to <16 x i16>*
  %27678 = load <16 x i16>, <16 x i16>* %27677, align 2, !tbaa !396
  %27679 = getelementptr inbounds i16, i16* %27643, i64 5
  %27680 = bitcast i16* %27679 to <16 x i16>*
  %27681 = load <16 x i16>, <16 x i16>* %27680, align 2, !tbaa !396
  %27682 = getelementptr inbounds i16, i16* %27643, i64 21
  %27683 = bitcast i16* %27682 to <16 x i16>*
  %27684 = load <16 x i16>, <16 x i16>* %27683, align 2, !tbaa !396
  %27685 = add <16 x i16> %27651, %27646
  %27686 = add <16 x i16> %27685, %27657
  %27687 = add <16 x i16> %27686, %27663
  %27688 = add <16 x i16> %27687, %27669
  %27689 = add <16 x i16> %27688, %27675
  %27690 = add <16 x i16> %27689, %27681
  %27691 = add <16 x i16> %27654, %27649
  %27692 = add <16 x i16> %27691, %27660
  %27693 = add <16 x i16> %27692, %27666
  %27694 = add <16 x i16> %27693, %27672
  %27695 = add <16 x i16> %27694, %27678
  %27696 = add <16 x i16> %27695, %27684
  %27697 = shufflevector <16 x i16> %27690, <16 x i16> %27696, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27698 = udiv <32 x i16> %27697, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %27699 = shufflevector <32 x i16> %27698, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27700 = sext i32 %blur_x.s0.x.v1.base.s1610 to i64
  %27701 = add nsw i64 %27700, %27475
  %27702 = getelementptr inbounds i16, i16* %blur_x917, i64 %27701
  %27703 = bitcast i16* %27702 to <16 x i16>*
  store <16 x i16> %27699, <16 x i16>* %27703, align 2, !tbaa !399
  %27704 = shufflevector <32 x i16> %27698, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27705 = getelementptr inbounds i16, i16* %27702, i64 16
  %27706 = bitcast i16* %27705 to <16 x i16>*
  store <16 x i16> %27704, <16 x i16>* %27706, align 2, !tbaa !399
  br label %"consume blur_x1612"

"consume blur_x1612":                             ; preds = %"for blur_y.s0.x.x.rebased1601", %"produce blur_x1609"
  %27707 = sext i32 %blur_y.s0.x.v0.base.s1604 to i64
  %27708 = add nsw i64 %27478, %27707
  %27709 = getelementptr inbounds i16, i16* %blur_x917, i64 %27708
  %27710 = bitcast i16* %27709 to <16 x i16>*
  %27711 = load <16 x i16>, <16 x i16>* %27710, align 2, !tbaa !399
  %27712 = getelementptr inbounds i16, i16* %27709, i64 16
  %27713 = bitcast i16* %27712 to <16 x i16>*
  %27714 = load <16 x i16>, <16 x i16>* %27713, align 2, !tbaa !399
  %27715 = add nsw i64 %27481, %27707
  %27716 = getelementptr inbounds i16, i16* %blur_x917, i64 %27715
  %27717 = bitcast i16* %27716 to <16 x i16>*
  %27718 = load <16 x i16>, <16 x i16>* %27717, align 2, !tbaa !399
  %27719 = getelementptr inbounds i16, i16* %27716, i64 16
  %27720 = bitcast i16* %27719 to <16 x i16>*
  %27721 = load <16 x i16>, <16 x i16>* %27720, align 2, !tbaa !399
  %27722 = add nsw i64 %27484, %27707
  %27723 = getelementptr inbounds i16, i16* %blur_x917, i64 %27722
  %27724 = bitcast i16* %27723 to <16 x i16>*
  %27725 = load <16 x i16>, <16 x i16>* %27724, align 2, !tbaa !399
  %27726 = getelementptr inbounds i16, i16* %27723, i64 16
  %27727 = bitcast i16* %27726 to <16 x i16>*
  %27728 = load <16 x i16>, <16 x i16>* %27727, align 2, !tbaa !399
  %27729 = add nsw i64 %27487, %27707
  %27730 = getelementptr inbounds i16, i16* %blur_x917, i64 %27729
  %27731 = bitcast i16* %27730 to <16 x i16>*
  %27732 = load <16 x i16>, <16 x i16>* %27731, align 2, !tbaa !399
  %27733 = getelementptr inbounds i16, i16* %27730, i64 16
  %27734 = bitcast i16* %27733 to <16 x i16>*
  %27735 = load <16 x i16>, <16 x i16>* %27734, align 2, !tbaa !399
  %27736 = add nsw i64 %27490, %27707
  %27737 = getelementptr inbounds i16, i16* %blur_x917, i64 %27736
  %27738 = bitcast i16* %27737 to <16 x i16>*
  %27739 = load <16 x i16>, <16 x i16>* %27738, align 2, !tbaa !399
  %27740 = getelementptr inbounds i16, i16* %27737, i64 16
  %27741 = bitcast i16* %27740 to <16 x i16>*
  %27742 = load <16 x i16>, <16 x i16>* %27741, align 2, !tbaa !399
  %27743 = add nsw i64 %27493, %27707
  %27744 = getelementptr inbounds i16, i16* %blur_x917, i64 %27743
  %27745 = bitcast i16* %27744 to <16 x i16>*
  %27746 = load <16 x i16>, <16 x i16>* %27745, align 2, !tbaa !399
  %27747 = getelementptr inbounds i16, i16* %27744, i64 16
  %27748 = bitcast i16* %27747 to <16 x i16>*
  %27749 = load <16 x i16>, <16 x i16>* %27748, align 2, !tbaa !399
  %27750 = add nsw i64 %27496, %27707
  %27751 = getelementptr inbounds i16, i16* %blur_x917, i64 %27750
  %27752 = bitcast i16* %27751 to <16 x i16>*
  %27753 = load <16 x i16>, <16 x i16>* %27752, align 2, !tbaa !399
  %27754 = getelementptr inbounds i16, i16* %27751, i64 16
  %27755 = bitcast i16* %27754 to <16 x i16>*
  %27756 = load <16 x i16>, <16 x i16>* %27755, align 2, !tbaa !399
  %27757 = add <16 x i16> %27718, %27711
  %27758 = add <16 x i16> %27757, %27725
  %27759 = add <16 x i16> %27758, %27732
  %27760 = add <16 x i16> %27759, %27739
  %27761 = add <16 x i16> %27760, %27746
  %27762 = add <16 x i16> %27761, %27753
  %27763 = add <16 x i16> %27721, %27714
  %27764 = add <16 x i16> %27763, %27728
  %27765 = add <16 x i16> %27764, %27735
  %27766 = add <16 x i16> %27765, %27742
  %27767 = add <16 x i16> %27766, %27749
  %27768 = add <16 x i16> %27767, %27756
  %27769 = shufflevector <16 x i16> %27762, <16 x i16> %27768, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27770 = udiv <32 x i16> %27769, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %27771 = shufflevector <32 x i16> %27770, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27772 = add nsw i64 %27500, %27707
  %27773 = getelementptr inbounds i16, i16* %267, i64 %27772
  %27774 = bitcast i16* %27773 to <16 x i16>*
  store <16 x i16> %27771, <16 x i16>* %27774, align 2, !tbaa !401
  %27775 = shufflevector <32 x i16> %27770, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27776 = getelementptr inbounds i16, i16* %27773, i64 16
  %27777 = bitcast i16* %27776 to <16 x i16>*
  store <16 x i16> %27775, <16 x i16>* %27777, align 2, !tbaa !401
  %27778 = add nuw nsw i32 %blur_y.s0.x.x.rebased1603, 1
  %.not2724 = icmp eq i32 %27778, %t1727936
  br i1 %.not2724, label %"end for blur_y.s0.x.x.rebased1602", label %"for blur_y.s0.x.x.rebased1601"

after_bb1613:                                     ; preds = %"end for blur_y.s0.x.x.rebased1602", %"produce blur_x1616"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1628.preheader", label %"end for blur_y.s0.x.x.rebased1629", !prof !386

"for blur_y.s0.x.x.rebased1628.preheader":        ; preds = %after_bb1613
  %27779 = sext i32 %t1738982 to i64
  %27780 = zext i32 %.pre-phi3689 to i64
  %27781 = mul nsw i64 %27780, %353
  %27782 = sub nsw i64 %27781, %302
  %27783 = zext i32 %.pre-phi3685 to i64
  %27784 = mul nsw i64 %27783, %353
  %27785 = sub nsw i64 %27784, %302
  %27786 = zext i32 %.pre-phi3693 to i64
  %27787 = mul nsw i64 %27786, %353
  %27788 = sub nsw i64 %27787, %302
  %27789 = zext i32 %.pre-phi3699 to i64
  %27790 = mul nsw i64 %27789, %353
  %27791 = sub nsw i64 %27790, %302
  %27792 = zext i32 %.pre-phi3669 to i64
  %27793 = mul nsw i64 %27792, %353
  %27794 = sub nsw i64 %27793, %302
  %27795 = zext i32 %.pre-phi3677 to i64
  %27796 = mul nsw i64 %27795, %353
  %27797 = sub nsw i64 %27796, %302
  %27798 = zext i32 %.pre-phi3673 to i64
  %27799 = mul nsw i64 %27798, %353
  %27800 = sub nsw i64 %27799, %302
  %27801 = sext i32 %a393 to i64
  %27802 = add nsw i64 %27801, 12
  %27803 = mul nsw i64 %27802, %350
  %27804 = add nsw i64 %27803, %354
  br label %"for blur_y.s0.x.x.rebased1628"

"produce blur_x1616":                             ; preds = %"end for blur_y.s0.x.x.rebased1602"
  %27805 = getelementptr inbounds i16, i16* %read_input860, i64 %423
  %27806 = getelementptr inbounds i16, i16* %27805, i64 -31
  %27807 = bitcast i16* %27806 to <16 x i16>*
  %27808 = load <16 x i16>, <16 x i16>* %27807, align 2, !tbaa !396
  %27809 = getelementptr inbounds i16, i16* %27805, i64 -15
  %27810 = bitcast i16* %27809 to <16 x i16>*
  %27811 = load <16 x i16>, <16 x i16>* %27810, align 2, !tbaa !396
  %27812 = getelementptr inbounds i16, i16* %27805, i64 -32
  %27813 = bitcast i16* %27812 to <16 x i16>*
  %27814 = load <16 x i16>, <16 x i16>* %27813, align 2, !tbaa !396
  %27815 = getelementptr inbounds i16, i16* %27805, i64 -16
  %27816 = bitcast i16* %27815 to <16 x i16>*
  %27817 = load <16 x i16>, <16 x i16>* %27816, align 2, !tbaa !396
  %27818 = getelementptr inbounds i16, i16* %27805, i64 -30
  %27819 = bitcast i16* %27818 to <16 x i16>*
  %27820 = load <16 x i16>, <16 x i16>* %27819, align 2, !tbaa !396
  %27821 = getelementptr inbounds i16, i16* %27805, i64 -14
  %27822 = bitcast i16* %27821 to <16 x i16>*
  %27823 = load <16 x i16>, <16 x i16>* %27822, align 2, !tbaa !396
  %27824 = getelementptr inbounds i16, i16* %27805, i64 -29
  %27825 = bitcast i16* %27824 to <16 x i16>*
  %27826 = load <16 x i16>, <16 x i16>* %27825, align 2, !tbaa !396
  %27827 = getelementptr inbounds i16, i16* %27805, i64 -13
  %27828 = bitcast i16* %27827 to <16 x i16>*
  %27829 = load <16 x i16>, <16 x i16>* %27828, align 2, !tbaa !396
  %27830 = getelementptr inbounds i16, i16* %27805, i64 -28
  %27831 = bitcast i16* %27830 to <16 x i16>*
  %27832 = load <16 x i16>, <16 x i16>* %27831, align 2, !tbaa !396
  %27833 = getelementptr inbounds i16, i16* %27805, i64 -12
  %27834 = bitcast i16* %27833 to <16 x i16>*
  %27835 = load <16 x i16>, <16 x i16>* %27834, align 2, !tbaa !396
  %27836 = getelementptr inbounds i16, i16* %27805, i64 -26
  %27837 = bitcast i16* %27836 to <16 x i16>*
  %27838 = load <16 x i16>, <16 x i16>* %27837, align 2, !tbaa !396
  %27839 = getelementptr inbounds i16, i16* %27805, i64 -10
  %27840 = bitcast i16* %27839 to <16 x i16>*
  %27841 = load <16 x i16>, <16 x i16>* %27840, align 2, !tbaa !396
  %27842 = getelementptr inbounds i16, i16* %27805, i64 -27
  %27843 = bitcast i16* %27842 to <16 x i16>*
  %27844 = load <16 x i16>, <16 x i16>* %27843, align 2, !tbaa !396
  %27845 = getelementptr inbounds i16, i16* %27805, i64 -11
  %27846 = bitcast i16* %27845 to <16 x i16>*
  %27847 = load <16 x i16>, <16 x i16>* %27846, align 2, !tbaa !396
  %27848 = add <16 x i16> %27814, %27808
  %27849 = add <16 x i16> %27848, %27820
  %27850 = add <16 x i16> %27849, %27826
  %27851 = add <16 x i16> %27850, %27832
  %27852 = add <16 x i16> %27851, %27838
  %27853 = add <16 x i16> %27852, %27844
  %27854 = add <16 x i16> %27817, %27811
  %27855 = add <16 x i16> %27854, %27823
  %27856 = add <16 x i16> %27855, %27829
  %27857 = add <16 x i16> %27856, %27835
  %27858 = add <16 x i16> %27857, %27841
  %27859 = add <16 x i16> %27858, %27847
  %27860 = shufflevector <16 x i16> %27853, <16 x i16> %27859, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27861 = udiv <32 x i16> %27860, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %27862 = shufflevector <32 x i16> %27861, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27863 = zext i32 %.pre-phi3677 to i64
  %27864 = mul nsw i64 %303, %27863
  %27865 = add nsw i64 %305, %27864
  %27866 = getelementptr inbounds i16, i16* %blur_x917, i64 %27865
  %27867 = getelementptr inbounds i16, i16* %27866, i64 -32
  %27868 = bitcast i16* %27867 to <16 x i16>*
  store <16 x i16> %27862, <16 x i16>* %27868, align 2, !tbaa !399
  %27869 = shufflevector <32 x i16> %27861, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27870 = getelementptr inbounds i16, i16* %27866, i64 -16
  %27871 = bitcast i16* %27870 to <16 x i16>*
  store <16 x i16> %27869, <16 x i16>* %27871, align 2, !tbaa !399
  %27872 = zext i32 %.pre-phi3689 to i64
  %27873 = mul nsw i64 %27872, %349
  %27874 = add nsw i64 %27873, %300
  %27875 = getelementptr inbounds i16, i16* %blur_x917, i64 %27874
  %27876 = getelementptr inbounds i16, i16* %27875, i64 -32
  %27877 = bitcast i16* %27876 to <16 x i16>*
  %27878 = load <16 x i16>, <16 x i16>* %27877, align 2, !tbaa !399
  %27879 = getelementptr inbounds i16, i16* %27875, i64 -16
  %27880 = bitcast i16* %27879 to <16 x i16>*
  %27881 = load <16 x i16>, <16 x i16>* %27880, align 2, !tbaa !399
  %27882 = zext i32 %.pre-phi3685 to i64
  %27883 = mul nsw i64 %27882, %349
  %27884 = add nsw i64 %27883, %300
  %27885 = getelementptr inbounds i16, i16* %blur_x917, i64 %27884
  %27886 = getelementptr inbounds i16, i16* %27885, i64 -32
  %27887 = bitcast i16* %27886 to <16 x i16>*
  %27888 = load <16 x i16>, <16 x i16>* %27887, align 2, !tbaa !399
  %27889 = getelementptr inbounds i16, i16* %27885, i64 -16
  %27890 = bitcast i16* %27889 to <16 x i16>*
  %27891 = load <16 x i16>, <16 x i16>* %27890, align 2, !tbaa !399
  %27892 = zext i32 %.pre-phi3693 to i64
  %27893 = mul nsw i64 %27892, %349
  %27894 = add nsw i64 %27893, %300
  %27895 = getelementptr inbounds i16, i16* %blur_x917, i64 %27894
  %27896 = getelementptr inbounds i16, i16* %27895, i64 -32
  %27897 = bitcast i16* %27896 to <16 x i16>*
  %27898 = load <16 x i16>, <16 x i16>* %27897, align 2, !tbaa !399
  %27899 = getelementptr inbounds i16, i16* %27895, i64 -16
  %27900 = bitcast i16* %27899 to <16 x i16>*
  %27901 = load <16 x i16>, <16 x i16>* %27900, align 2, !tbaa !399
  %27902 = zext i32 %.pre-phi3699 to i64
  %27903 = mul nsw i64 %27902, %349
  %27904 = add nsw i64 %27903, %300
  %27905 = getelementptr inbounds i16, i16* %blur_x917, i64 %27904
  %27906 = getelementptr inbounds i16, i16* %27905, i64 -32
  %27907 = bitcast i16* %27906 to <16 x i16>*
  %27908 = load <16 x i16>, <16 x i16>* %27907, align 2, !tbaa !399
  %27909 = getelementptr inbounds i16, i16* %27905, i64 -16
  %27910 = bitcast i16* %27909 to <16 x i16>*
  %27911 = load <16 x i16>, <16 x i16>* %27910, align 2, !tbaa !399
  %27912 = zext i32 %.pre-phi3669 to i64
  %27913 = mul nsw i64 %27912, %349
  %27914 = add nsw i64 %27913, %300
  %27915 = getelementptr inbounds i16, i16* %blur_x917, i64 %27914
  %27916 = getelementptr inbounds i16, i16* %27915, i64 -32
  %27917 = bitcast i16* %27916 to <16 x i16>*
  %27918 = load <16 x i16>, <16 x i16>* %27917, align 2, !tbaa !399
  %27919 = getelementptr inbounds i16, i16* %27915, i64 -16
  %27920 = bitcast i16* %27919 to <16 x i16>*
  %27921 = load <16 x i16>, <16 x i16>* %27920, align 2, !tbaa !399
  %27922 = mul nsw i64 %27863, %349
  %27923 = add nsw i64 %27922, %300
  %27924 = getelementptr inbounds i16, i16* %blur_x917, i64 %27923
  %27925 = getelementptr inbounds i16, i16* %27924, i64 -32
  %27926 = bitcast i16* %27925 to <16 x i16>*
  %27927 = load <16 x i16>, <16 x i16>* %27926, align 2, !tbaa !399
  %27928 = getelementptr inbounds i16, i16* %27924, i64 -16
  %27929 = bitcast i16* %27928 to <16 x i16>*
  %27930 = load <16 x i16>, <16 x i16>* %27929, align 2, !tbaa !399
  %27931 = zext i32 %.pre-phi3673 to i64
  %27932 = mul nsw i64 %27931, %349
  %27933 = add nsw i64 %27932, %300
  %27934 = getelementptr inbounds i16, i16* %blur_x917, i64 %27933
  %27935 = getelementptr inbounds i16, i16* %27934, i64 -32
  %27936 = bitcast i16* %27935 to <16 x i16>*
  %27937 = load <16 x i16>, <16 x i16>* %27936, align 2, !tbaa !399
  %27938 = getelementptr inbounds i16, i16* %27934, i64 -16
  %27939 = bitcast i16* %27938 to <16 x i16>*
  %27940 = load <16 x i16>, <16 x i16>* %27939, align 2, !tbaa !399
  %27941 = add <16 x i16> %27888, %27878
  %27942 = add <16 x i16> %27941, %27898
  %27943 = add <16 x i16> %27942, %27908
  %27944 = add <16 x i16> %27943, %27918
  %27945 = add <16 x i16> %27944, %27927
  %27946 = add <16 x i16> %27945, %27937
  %27947 = add <16 x i16> %27891, %27881
  %27948 = add <16 x i16> %27947, %27901
  %27949 = add <16 x i16> %27948, %27911
  %27950 = add <16 x i16> %27949, %27921
  %27951 = add <16 x i16> %27950, %27930
  %27952 = add <16 x i16> %27951, %27940
  %27953 = shufflevector <16 x i16> %27946, <16 x i16> %27952, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27954 = udiv <32 x i16> %27953, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %27955 = shufflevector <32 x i16> %27954, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27956 = sext i32 %a393 to i64
  %27957 = add nsw i64 %27956, 12
  %27958 = mul nsw i64 %27957, %350
  %27959 = add nsw i64 %352, %27958
  %27960 = getelementptr inbounds i16, i16* %267, i64 %27959
  %27961 = getelementptr inbounds i16, i16* %27960, i64 -32
  %27962 = bitcast i16* %27961 to <16 x i16>*
  store <16 x i16> %27955, <16 x i16>* %27962, align 2, !tbaa !401
  %27963 = shufflevector <32 x i16> %27954, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27964 = getelementptr inbounds i16, i16* %27960, i64 -16
  %27965 = bitcast i16* %27964 to <16 x i16>*
  store <16 x i16> %27963, <16 x i16>* %27965, align 2, !tbaa !401
  br label %after_bb1613

"for blur_y.s0.x.x.rebased1628":                  ; preds = %"for blur_y.s0.x.x.rebased1628.preheader", %"consume blur_x1636"
  %indvars.iv3532 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1628.preheader" ], [ %indvars.iv.next3533, %"consume blur_x1636" ]
  %27966 = add nsw i64 %indvars.iv3532, %307
  %27967 = icmp slt i64 %27966, 1
  %27968 = trunc i64 %27966 to i32
  %27969 = shl nsw i32 %27968, 5
  %27970 = icmp sgt i32 %202, %27969
  %27971 = or i1 %27967, %27970
  br i1 %27971, label %"produce blur_x1634", label %"for blur_y.s0.x.x.rebased1628.consume blur_x1636_crit_edge"

"for blur_y.s0.x.x.rebased1628.consume blur_x1636_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1628"
  %.pre3722 = shl nsw i64 %27966, 5
  br label %"consume blur_x1636"

"end for blur_y.s0.x.x.rebased1629":              ; preds = %"consume blur_x1636", %after_bb1613
  br i1 %308, label %"for blur_y.s0.x.x.rebased1644.preheader", label %"end for blur_y.s0.x.x.rebased1645", !prof !386

"for blur_y.s0.x.x.rebased1644.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1629"
  %27972 = sext i32 %t1738982 to i64
  %27973 = zext i32 %.pre-phi3689 to i64
  %27974 = mul nsw i64 %27973, %353
  %27975 = sub nsw i64 %27974, %302
  %27976 = zext i32 %.pre-phi3685 to i64
  %27977 = mul nsw i64 %27976, %353
  %27978 = sub nsw i64 %27977, %302
  %27979 = zext i32 %.pre-phi3693 to i64
  %27980 = mul nsw i64 %27979, %353
  %27981 = sub nsw i64 %27980, %302
  %27982 = zext i32 %.pre-phi3699 to i64
  %27983 = mul nsw i64 %27982, %353
  %27984 = sub nsw i64 %27983, %302
  %27985 = zext i32 %.pre-phi3669 to i64
  %27986 = mul nsw i64 %27985, %353
  %27987 = sub nsw i64 %27986, %302
  %27988 = zext i32 %.pre-phi3677 to i64
  %27989 = mul nsw i64 %27988, %353
  %27990 = sub nsw i64 %27989, %302
  %27991 = zext i32 %.pre-phi3673 to i64
  %27992 = mul nsw i64 %27991, %353
  %27993 = sub nsw i64 %27992, %302
  %27994 = sext i32 %a393 to i64
  %27995 = add nsw i64 %27994, 12
  %27996 = mul nsw i64 %27995, %350
  %27997 = add nsw i64 %27996, %354
  br label %"for blur_y.s0.x.x.rebased1644"

"produce blur_x1634":                             ; preds = %"for blur_y.s0.x.x.rebased1628"
  %t9441635 = add nsw i32 %425, %27969
  %27998 = sext i32 %t9441635 to i64
  %27999 = getelementptr inbounds i16, i16* %read_input860, i64 %27998
  %28000 = getelementptr inbounds i16, i16* %27999, i64 1
  %28001 = bitcast i16* %28000 to <16 x i16>*
  %28002 = load <16 x i16>, <16 x i16>* %28001, align 2, !tbaa !396
  %28003 = getelementptr inbounds i16, i16* %27999, i64 17
  %28004 = bitcast i16* %28003 to <16 x i16>*
  %28005 = load <16 x i16>, <16 x i16>* %28004, align 2, !tbaa !396
  %28006 = bitcast i16* %27999 to <16 x i16>*
  %28007 = load <16 x i16>, <16 x i16>* %28006, align 2, !tbaa !396
  %28008 = getelementptr inbounds i16, i16* %27999, i64 16
  %28009 = bitcast i16* %28008 to <16 x i16>*
  %28010 = load <16 x i16>, <16 x i16>* %28009, align 2, !tbaa !396
  %28011 = getelementptr inbounds i16, i16* %27999, i64 2
  %28012 = bitcast i16* %28011 to <16 x i16>*
  %28013 = load <16 x i16>, <16 x i16>* %28012, align 2, !tbaa !396
  %28014 = getelementptr inbounds i16, i16* %27999, i64 18
  %28015 = bitcast i16* %28014 to <16 x i16>*
  %28016 = load <16 x i16>, <16 x i16>* %28015, align 2, !tbaa !396
  %28017 = getelementptr inbounds i16, i16* %27999, i64 3
  %28018 = bitcast i16* %28017 to <16 x i16>*
  %28019 = load <16 x i16>, <16 x i16>* %28018, align 2, !tbaa !396
  %28020 = getelementptr inbounds i16, i16* %27999, i64 19
  %28021 = bitcast i16* %28020 to <16 x i16>*
  %28022 = load <16 x i16>, <16 x i16>* %28021, align 2, !tbaa !396
  %28023 = getelementptr inbounds i16, i16* %27999, i64 4
  %28024 = bitcast i16* %28023 to <16 x i16>*
  %28025 = load <16 x i16>, <16 x i16>* %28024, align 2, !tbaa !396
  %28026 = getelementptr inbounds i16, i16* %27999, i64 20
  %28027 = bitcast i16* %28026 to <16 x i16>*
  %28028 = load <16 x i16>, <16 x i16>* %28027, align 2, !tbaa !396
  %28029 = getelementptr inbounds i16, i16* %27999, i64 6
  %28030 = bitcast i16* %28029 to <16 x i16>*
  %28031 = load <16 x i16>, <16 x i16>* %28030, align 2, !tbaa !396
  %28032 = getelementptr inbounds i16, i16* %27999, i64 22
  %28033 = bitcast i16* %28032 to <16 x i16>*
  %28034 = load <16 x i16>, <16 x i16>* %28033, align 2, !tbaa !396
  %28035 = getelementptr inbounds i16, i16* %27999, i64 5
  %28036 = bitcast i16* %28035 to <16 x i16>*
  %28037 = load <16 x i16>, <16 x i16>* %28036, align 2, !tbaa !396
  %28038 = getelementptr inbounds i16, i16* %27999, i64 21
  %28039 = bitcast i16* %28038 to <16 x i16>*
  %28040 = load <16 x i16>, <16 x i16>* %28039, align 2, !tbaa !396
  %28041 = add <16 x i16> %28007, %28002
  %28042 = add <16 x i16> %28041, %28013
  %28043 = add <16 x i16> %28042, %28019
  %28044 = add <16 x i16> %28043, %28025
  %28045 = add <16 x i16> %28044, %28031
  %28046 = add <16 x i16> %28045, %28037
  %28047 = add <16 x i16> %28010, %28005
  %28048 = add <16 x i16> %28047, %28016
  %28049 = add <16 x i16> %28048, %28022
  %28050 = add <16 x i16> %28049, %28028
  %28051 = add <16 x i16> %28050, %28034
  %28052 = add <16 x i16> %28051, %28040
  %28053 = shufflevector <16 x i16> %28046, <16 x i16> %28052, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28054 = udiv <32 x i16> %28053, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %28055 = shufflevector <32 x i16> %28054, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28056 = shl nsw i64 %27966, 5
  %28057 = add nsw i64 %28056, %27779
  %28058 = getelementptr inbounds i16, i16* %blur_x917, i64 %28057
  %28059 = bitcast i16* %28058 to <16 x i16>*
  store <16 x i16> %28055, <16 x i16>* %28059, align 2, !tbaa !399
  %28060 = shufflevector <32 x i16> %28054, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28061 = getelementptr inbounds i16, i16* %28058, i64 16
  %28062 = bitcast i16* %28061 to <16 x i16>*
  store <16 x i16> %28060, <16 x i16>* %28062, align 2, !tbaa !399
  br label %"consume blur_x1636"

"consume blur_x1636":                             ; preds = %"for blur_y.s0.x.x.rebased1628.consume blur_x1636_crit_edge", %"produce blur_x1634"
  %.pre-phi3723 = phi i64 [ %.pre3722, %"for blur_y.s0.x.x.rebased1628.consume blur_x1636_crit_edge" ], [ %28056, %"produce blur_x1634" ]
  %28063 = add nsw i64 %27782, %.pre-phi3723
  %28064 = getelementptr inbounds i16, i16* %blur_x917, i64 %28063
  %28065 = bitcast i16* %28064 to <16 x i16>*
  %28066 = load <16 x i16>, <16 x i16>* %28065, align 2, !tbaa !399
  %28067 = getelementptr inbounds i16, i16* %28064, i64 16
  %28068 = bitcast i16* %28067 to <16 x i16>*
  %28069 = load <16 x i16>, <16 x i16>* %28068, align 2, !tbaa !399
  %28070 = add nsw i64 %27785, %.pre-phi3723
  %28071 = getelementptr inbounds i16, i16* %blur_x917, i64 %28070
  %28072 = bitcast i16* %28071 to <16 x i16>*
  %28073 = load <16 x i16>, <16 x i16>* %28072, align 2, !tbaa !399
  %28074 = getelementptr inbounds i16, i16* %28071, i64 16
  %28075 = bitcast i16* %28074 to <16 x i16>*
  %28076 = load <16 x i16>, <16 x i16>* %28075, align 2, !tbaa !399
  %28077 = add nsw i64 %27788, %.pre-phi3723
  %28078 = getelementptr inbounds i16, i16* %blur_x917, i64 %28077
  %28079 = bitcast i16* %28078 to <16 x i16>*
  %28080 = load <16 x i16>, <16 x i16>* %28079, align 2, !tbaa !399
  %28081 = getelementptr inbounds i16, i16* %28078, i64 16
  %28082 = bitcast i16* %28081 to <16 x i16>*
  %28083 = load <16 x i16>, <16 x i16>* %28082, align 2, !tbaa !399
  %28084 = add nsw i64 %27791, %.pre-phi3723
  %28085 = getelementptr inbounds i16, i16* %blur_x917, i64 %28084
  %28086 = bitcast i16* %28085 to <16 x i16>*
  %28087 = load <16 x i16>, <16 x i16>* %28086, align 2, !tbaa !399
  %28088 = getelementptr inbounds i16, i16* %28085, i64 16
  %28089 = bitcast i16* %28088 to <16 x i16>*
  %28090 = load <16 x i16>, <16 x i16>* %28089, align 2, !tbaa !399
  %28091 = add nsw i64 %27794, %.pre-phi3723
  %28092 = getelementptr inbounds i16, i16* %blur_x917, i64 %28091
  %28093 = bitcast i16* %28092 to <16 x i16>*
  %28094 = load <16 x i16>, <16 x i16>* %28093, align 2, !tbaa !399
  %28095 = getelementptr inbounds i16, i16* %28092, i64 16
  %28096 = bitcast i16* %28095 to <16 x i16>*
  %28097 = load <16 x i16>, <16 x i16>* %28096, align 2, !tbaa !399
  %28098 = add nsw i64 %27797, %.pre-phi3723
  %28099 = getelementptr inbounds i16, i16* %blur_x917, i64 %28098
  %28100 = bitcast i16* %28099 to <16 x i16>*
  %28101 = load <16 x i16>, <16 x i16>* %28100, align 2, !tbaa !399
  %28102 = getelementptr inbounds i16, i16* %28099, i64 16
  %28103 = bitcast i16* %28102 to <16 x i16>*
  %28104 = load <16 x i16>, <16 x i16>* %28103, align 2, !tbaa !399
  %28105 = add nsw i64 %27800, %.pre-phi3723
  %28106 = getelementptr inbounds i16, i16* %blur_x917, i64 %28105
  %28107 = bitcast i16* %28106 to <16 x i16>*
  %28108 = load <16 x i16>, <16 x i16>* %28107, align 2, !tbaa !399
  %28109 = getelementptr inbounds i16, i16* %28106, i64 16
  %28110 = bitcast i16* %28109 to <16 x i16>*
  %28111 = load <16 x i16>, <16 x i16>* %28110, align 2, !tbaa !399
  %28112 = add <16 x i16> %28073, %28066
  %28113 = add <16 x i16> %28112, %28080
  %28114 = add <16 x i16> %28113, %28087
  %28115 = add <16 x i16> %28114, %28094
  %28116 = add <16 x i16> %28115, %28101
  %28117 = add <16 x i16> %28116, %28108
  %28118 = add <16 x i16> %28076, %28069
  %28119 = add <16 x i16> %28118, %28083
  %28120 = add <16 x i16> %28119, %28090
  %28121 = add <16 x i16> %28120, %28097
  %28122 = add <16 x i16> %28121, %28104
  %28123 = add <16 x i16> %28122, %28111
  %28124 = shufflevector <16 x i16> %28117, <16 x i16> %28123, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28125 = udiv <32 x i16> %28124, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %28126 = shufflevector <32 x i16> %28125, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28127 = add nsw i64 %27804, %.pre-phi3723
  %28128 = getelementptr inbounds i16, i16* %267, i64 %28127
  %28129 = bitcast i16* %28128 to <16 x i16>*
  store <16 x i16> %28126, <16 x i16>* %28129, align 2, !tbaa !401
  %28130 = shufflevector <32 x i16> %28125, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28131 = getelementptr inbounds i16, i16* %28128, i64 16
  %28132 = bitcast i16* %28131 to <16 x i16>*
  store <16 x i16> %28130, <16 x i16>* %28132, align 2, !tbaa !401
  %indvars.iv.next3533 = add nuw nsw i64 %indvars.iv3532, 1
  %.not2721 = icmp eq i64 %indvars.iv.next3533, %546
  br i1 %.not2721, label %"end for blur_y.s0.x.x.rebased1629", label %"for blur_y.s0.x.x.rebased1628"

"for blur_y.s0.x.x.rebased1644":                  ; preds = %"for blur_y.s0.x.x.rebased1644.preheader", %"consume blur_x1655"
  %blur_y.s0.x.x.rebased1646 = phi i32 [ %28275, %"consume blur_x1655" ], [ 0, %"for blur_y.s0.x.x.rebased1644.preheader" ]
  %28133 = add nsw i32 %blur_y.s0.x.x.rebased1646, %t1670852
  %a3487 = shl nsw i32 %28133, 5
  %28134 = icmp sgt i32 %t1691, %a3487
  %blur_y.s0.x.v0.base.s1647 = select i1 %28134, i32 %a3487, i32 %t1691
  %28135 = icmp slt i32 %28133, 1
  %28136 = icmp sgt i32 %202, %a3487
  %28137 = or i1 %28135, %28136
  br i1 %28137, label %"produce blur_x1652", label %"consume blur_x1655"

"end for blur_y.s0.x.x.rebased1645":              ; preds = %"consume blur_x1655", %"end for blur_y.s0.x.x.rebased1629"
  br i1 %233, label %"produce blur_x1659", label %after_bb1656

"produce blur_x1652":                             ; preds = %"for blur_y.s0.x.x.rebased1644"
  %28138 = icmp slt i32 %blur_y.s0.x.v0.base.s1647, %202
  %blur_x.s0.x.v1.base.s1653 = select i1 %28138, i32 %blur_y.s0.x.v0.base.s1647, i32 %202
  %t9491654 = add nsw i32 %425, %blur_x.s0.x.v1.base.s1653
  %28139 = sext i32 %t9491654 to i64
  %28140 = getelementptr inbounds i16, i16* %read_input860, i64 %28139
  %28141 = getelementptr inbounds i16, i16* %28140, i64 1
  %28142 = bitcast i16* %28141 to <16 x i16>*
  %28143 = load <16 x i16>, <16 x i16>* %28142, align 2, !tbaa !396
  %28144 = getelementptr inbounds i16, i16* %28140, i64 17
  %28145 = bitcast i16* %28144 to <16 x i16>*
  %28146 = load <16 x i16>, <16 x i16>* %28145, align 2, !tbaa !396
  %28147 = bitcast i16* %28140 to <16 x i16>*
  %28148 = load <16 x i16>, <16 x i16>* %28147, align 2, !tbaa !396
  %28149 = getelementptr inbounds i16, i16* %28140, i64 16
  %28150 = bitcast i16* %28149 to <16 x i16>*
  %28151 = load <16 x i16>, <16 x i16>* %28150, align 2, !tbaa !396
  %28152 = getelementptr inbounds i16, i16* %28140, i64 2
  %28153 = bitcast i16* %28152 to <16 x i16>*
  %28154 = load <16 x i16>, <16 x i16>* %28153, align 2, !tbaa !396
  %28155 = getelementptr inbounds i16, i16* %28140, i64 18
  %28156 = bitcast i16* %28155 to <16 x i16>*
  %28157 = load <16 x i16>, <16 x i16>* %28156, align 2, !tbaa !396
  %28158 = getelementptr inbounds i16, i16* %28140, i64 3
  %28159 = bitcast i16* %28158 to <16 x i16>*
  %28160 = load <16 x i16>, <16 x i16>* %28159, align 2, !tbaa !396
  %28161 = getelementptr inbounds i16, i16* %28140, i64 19
  %28162 = bitcast i16* %28161 to <16 x i16>*
  %28163 = load <16 x i16>, <16 x i16>* %28162, align 2, !tbaa !396
  %28164 = getelementptr inbounds i16, i16* %28140, i64 4
  %28165 = bitcast i16* %28164 to <16 x i16>*
  %28166 = load <16 x i16>, <16 x i16>* %28165, align 2, !tbaa !396
  %28167 = getelementptr inbounds i16, i16* %28140, i64 20
  %28168 = bitcast i16* %28167 to <16 x i16>*
  %28169 = load <16 x i16>, <16 x i16>* %28168, align 2, !tbaa !396
  %28170 = getelementptr inbounds i16, i16* %28140, i64 6
  %28171 = bitcast i16* %28170 to <16 x i16>*
  %28172 = load <16 x i16>, <16 x i16>* %28171, align 2, !tbaa !396
  %28173 = getelementptr inbounds i16, i16* %28140, i64 22
  %28174 = bitcast i16* %28173 to <16 x i16>*
  %28175 = load <16 x i16>, <16 x i16>* %28174, align 2, !tbaa !396
  %28176 = getelementptr inbounds i16, i16* %28140, i64 5
  %28177 = bitcast i16* %28176 to <16 x i16>*
  %28178 = load <16 x i16>, <16 x i16>* %28177, align 2, !tbaa !396
  %28179 = getelementptr inbounds i16, i16* %28140, i64 21
  %28180 = bitcast i16* %28179 to <16 x i16>*
  %28181 = load <16 x i16>, <16 x i16>* %28180, align 2, !tbaa !396
  %28182 = add <16 x i16> %28148, %28143
  %28183 = add <16 x i16> %28182, %28154
  %28184 = add <16 x i16> %28183, %28160
  %28185 = add <16 x i16> %28184, %28166
  %28186 = add <16 x i16> %28185, %28172
  %28187 = add <16 x i16> %28186, %28178
  %28188 = add <16 x i16> %28151, %28146
  %28189 = add <16 x i16> %28188, %28157
  %28190 = add <16 x i16> %28189, %28163
  %28191 = add <16 x i16> %28190, %28169
  %28192 = add <16 x i16> %28191, %28175
  %28193 = add <16 x i16> %28192, %28181
  %28194 = shufflevector <16 x i16> %28187, <16 x i16> %28193, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28195 = udiv <32 x i16> %28194, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %28196 = shufflevector <32 x i16> %28195, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28197 = sext i32 %blur_x.s0.x.v1.base.s1653 to i64
  %28198 = add nsw i64 %28197, %27972
  %28199 = getelementptr inbounds i16, i16* %blur_x917, i64 %28198
  %28200 = bitcast i16* %28199 to <16 x i16>*
  store <16 x i16> %28196, <16 x i16>* %28200, align 2, !tbaa !399
  %28201 = shufflevector <32 x i16> %28195, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28202 = getelementptr inbounds i16, i16* %28199, i64 16
  %28203 = bitcast i16* %28202 to <16 x i16>*
  store <16 x i16> %28201, <16 x i16>* %28203, align 2, !tbaa !399
  br label %"consume blur_x1655"

"consume blur_x1655":                             ; preds = %"for blur_y.s0.x.x.rebased1644", %"produce blur_x1652"
  %28204 = sext i32 %blur_y.s0.x.v0.base.s1647 to i64
  %28205 = add nsw i64 %27975, %28204
  %28206 = getelementptr inbounds i16, i16* %blur_x917, i64 %28205
  %28207 = bitcast i16* %28206 to <16 x i16>*
  %28208 = load <16 x i16>, <16 x i16>* %28207, align 2, !tbaa !399
  %28209 = getelementptr inbounds i16, i16* %28206, i64 16
  %28210 = bitcast i16* %28209 to <16 x i16>*
  %28211 = load <16 x i16>, <16 x i16>* %28210, align 2, !tbaa !399
  %28212 = add nsw i64 %27978, %28204
  %28213 = getelementptr inbounds i16, i16* %blur_x917, i64 %28212
  %28214 = bitcast i16* %28213 to <16 x i16>*
  %28215 = load <16 x i16>, <16 x i16>* %28214, align 2, !tbaa !399
  %28216 = getelementptr inbounds i16, i16* %28213, i64 16
  %28217 = bitcast i16* %28216 to <16 x i16>*
  %28218 = load <16 x i16>, <16 x i16>* %28217, align 2, !tbaa !399
  %28219 = add nsw i64 %27981, %28204
  %28220 = getelementptr inbounds i16, i16* %blur_x917, i64 %28219
  %28221 = bitcast i16* %28220 to <16 x i16>*
  %28222 = load <16 x i16>, <16 x i16>* %28221, align 2, !tbaa !399
  %28223 = getelementptr inbounds i16, i16* %28220, i64 16
  %28224 = bitcast i16* %28223 to <16 x i16>*
  %28225 = load <16 x i16>, <16 x i16>* %28224, align 2, !tbaa !399
  %28226 = add nsw i64 %27984, %28204
  %28227 = getelementptr inbounds i16, i16* %blur_x917, i64 %28226
  %28228 = bitcast i16* %28227 to <16 x i16>*
  %28229 = load <16 x i16>, <16 x i16>* %28228, align 2, !tbaa !399
  %28230 = getelementptr inbounds i16, i16* %28227, i64 16
  %28231 = bitcast i16* %28230 to <16 x i16>*
  %28232 = load <16 x i16>, <16 x i16>* %28231, align 2, !tbaa !399
  %28233 = add nsw i64 %27987, %28204
  %28234 = getelementptr inbounds i16, i16* %blur_x917, i64 %28233
  %28235 = bitcast i16* %28234 to <16 x i16>*
  %28236 = load <16 x i16>, <16 x i16>* %28235, align 2, !tbaa !399
  %28237 = getelementptr inbounds i16, i16* %28234, i64 16
  %28238 = bitcast i16* %28237 to <16 x i16>*
  %28239 = load <16 x i16>, <16 x i16>* %28238, align 2, !tbaa !399
  %28240 = add nsw i64 %27990, %28204
  %28241 = getelementptr inbounds i16, i16* %blur_x917, i64 %28240
  %28242 = bitcast i16* %28241 to <16 x i16>*
  %28243 = load <16 x i16>, <16 x i16>* %28242, align 2, !tbaa !399
  %28244 = getelementptr inbounds i16, i16* %28241, i64 16
  %28245 = bitcast i16* %28244 to <16 x i16>*
  %28246 = load <16 x i16>, <16 x i16>* %28245, align 2, !tbaa !399
  %28247 = add nsw i64 %27993, %28204
  %28248 = getelementptr inbounds i16, i16* %blur_x917, i64 %28247
  %28249 = bitcast i16* %28248 to <16 x i16>*
  %28250 = load <16 x i16>, <16 x i16>* %28249, align 2, !tbaa !399
  %28251 = getelementptr inbounds i16, i16* %28248, i64 16
  %28252 = bitcast i16* %28251 to <16 x i16>*
  %28253 = load <16 x i16>, <16 x i16>* %28252, align 2, !tbaa !399
  %28254 = add <16 x i16> %28215, %28208
  %28255 = add <16 x i16> %28254, %28222
  %28256 = add <16 x i16> %28255, %28229
  %28257 = add <16 x i16> %28256, %28236
  %28258 = add <16 x i16> %28257, %28243
  %28259 = add <16 x i16> %28258, %28250
  %28260 = add <16 x i16> %28218, %28211
  %28261 = add <16 x i16> %28260, %28225
  %28262 = add <16 x i16> %28261, %28232
  %28263 = add <16 x i16> %28262, %28239
  %28264 = add <16 x i16> %28263, %28246
  %28265 = add <16 x i16> %28264, %28253
  %28266 = shufflevector <16 x i16> %28259, <16 x i16> %28265, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28267 = udiv <32 x i16> %28266, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %28268 = shufflevector <32 x i16> %28267, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28269 = add nsw i64 %27997, %28204
  %28270 = getelementptr inbounds i16, i16* %267, i64 %28269
  %28271 = bitcast i16* %28270 to <16 x i16>*
  store <16 x i16> %28268, <16 x i16>* %28271, align 2, !tbaa !401
  %28272 = shufflevector <32 x i16> %28267, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28273 = getelementptr inbounds i16, i16* %28270, i64 16
  %28274 = bitcast i16* %28273 to <16 x i16>*
  store <16 x i16> %28272, <16 x i16>* %28274, align 2, !tbaa !401
  %28275 = add nuw nsw i32 %blur_y.s0.x.x.rebased1646, 1
  %.not2720 = icmp eq i32 %28275, %t1727936
  br i1 %.not2720, label %"end for blur_y.s0.x.x.rebased1645", label %"for blur_y.s0.x.x.rebased1644"

after_bb1656:                                     ; preds = %"end for blur_y.s0.x.x.rebased1645", %"produce blur_x1659"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1671.preheader", label %"end for blur_y.s0.x.x.rebased1672", !prof !386

"for blur_y.s0.x.x.rebased1671.preheader":        ; preds = %after_bb1656
  %28276 = sext i32 %t17441012 to i64
  %28277 = zext i32 %.pre-phi3693 to i64
  %28278 = mul nsw i64 %28277, %353
  %28279 = sub nsw i64 %28278, %302
  %28280 = zext i32 %.pre-phi3689 to i64
  %28281 = mul nsw i64 %28280, %353
  %28282 = sub nsw i64 %28281, %302
  %28283 = zext i32 %.pre-phi3699 to i64
  %28284 = mul nsw i64 %28283, %353
  %28285 = sub nsw i64 %28284, %302
  %28286 = zext i32 %.pre-phi3669 to i64
  %28287 = mul nsw i64 %28286, %353
  %28288 = sub nsw i64 %28287, %302
  %28289 = zext i32 %.pre-phi3673 to i64
  %28290 = mul nsw i64 %28289, %353
  %28291 = sub nsw i64 %28290, %302
  %28292 = zext i32 %.pre-phi3681 to i64
  %28293 = mul nsw i64 %28292, %353
  %28294 = sub nsw i64 %28293, %302
  %28295 = zext i32 %.pre-phi3677 to i64
  %28296 = mul nsw i64 %28295, %353
  %28297 = sub nsw i64 %28296, %302
  %28298 = sext i32 %a393 to i64
  %28299 = add nsw i64 %28298, 13
  %28300 = mul nsw i64 %28299, %350
  %28301 = add nsw i64 %28300, %354
  br label %"for blur_y.s0.x.x.rebased1671"

"produce blur_x1659":                             ; preds = %"end for blur_y.s0.x.x.rebased1645"
  %28302 = getelementptr inbounds i16, i16* %read_input860, i64 %429
  %28303 = getelementptr inbounds i16, i16* %28302, i64 -31
  %28304 = bitcast i16* %28303 to <16 x i16>*
  %28305 = load <16 x i16>, <16 x i16>* %28304, align 2, !tbaa !396
  %28306 = getelementptr inbounds i16, i16* %28302, i64 -15
  %28307 = bitcast i16* %28306 to <16 x i16>*
  %28308 = load <16 x i16>, <16 x i16>* %28307, align 2, !tbaa !396
  %28309 = getelementptr inbounds i16, i16* %28302, i64 -32
  %28310 = bitcast i16* %28309 to <16 x i16>*
  %28311 = load <16 x i16>, <16 x i16>* %28310, align 2, !tbaa !396
  %28312 = getelementptr inbounds i16, i16* %28302, i64 -16
  %28313 = bitcast i16* %28312 to <16 x i16>*
  %28314 = load <16 x i16>, <16 x i16>* %28313, align 2, !tbaa !396
  %28315 = getelementptr inbounds i16, i16* %28302, i64 -30
  %28316 = bitcast i16* %28315 to <16 x i16>*
  %28317 = load <16 x i16>, <16 x i16>* %28316, align 2, !tbaa !396
  %28318 = getelementptr inbounds i16, i16* %28302, i64 -14
  %28319 = bitcast i16* %28318 to <16 x i16>*
  %28320 = load <16 x i16>, <16 x i16>* %28319, align 2, !tbaa !396
  %28321 = getelementptr inbounds i16, i16* %28302, i64 -29
  %28322 = bitcast i16* %28321 to <16 x i16>*
  %28323 = load <16 x i16>, <16 x i16>* %28322, align 2, !tbaa !396
  %28324 = getelementptr inbounds i16, i16* %28302, i64 -13
  %28325 = bitcast i16* %28324 to <16 x i16>*
  %28326 = load <16 x i16>, <16 x i16>* %28325, align 2, !tbaa !396
  %28327 = getelementptr inbounds i16, i16* %28302, i64 -28
  %28328 = bitcast i16* %28327 to <16 x i16>*
  %28329 = load <16 x i16>, <16 x i16>* %28328, align 2, !tbaa !396
  %28330 = getelementptr inbounds i16, i16* %28302, i64 -12
  %28331 = bitcast i16* %28330 to <16 x i16>*
  %28332 = load <16 x i16>, <16 x i16>* %28331, align 2, !tbaa !396
  %28333 = getelementptr inbounds i16, i16* %28302, i64 -26
  %28334 = bitcast i16* %28333 to <16 x i16>*
  %28335 = load <16 x i16>, <16 x i16>* %28334, align 2, !tbaa !396
  %28336 = getelementptr inbounds i16, i16* %28302, i64 -10
  %28337 = bitcast i16* %28336 to <16 x i16>*
  %28338 = load <16 x i16>, <16 x i16>* %28337, align 2, !tbaa !396
  %28339 = getelementptr inbounds i16, i16* %28302, i64 -27
  %28340 = bitcast i16* %28339 to <16 x i16>*
  %28341 = load <16 x i16>, <16 x i16>* %28340, align 2, !tbaa !396
  %28342 = getelementptr inbounds i16, i16* %28302, i64 -11
  %28343 = bitcast i16* %28342 to <16 x i16>*
  %28344 = load <16 x i16>, <16 x i16>* %28343, align 2, !tbaa !396
  %28345 = add <16 x i16> %28311, %28305
  %28346 = add <16 x i16> %28345, %28317
  %28347 = add <16 x i16> %28346, %28323
  %28348 = add <16 x i16> %28347, %28329
  %28349 = add <16 x i16> %28348, %28335
  %28350 = add <16 x i16> %28349, %28341
  %28351 = add <16 x i16> %28314, %28308
  %28352 = add <16 x i16> %28351, %28320
  %28353 = add <16 x i16> %28352, %28326
  %28354 = add <16 x i16> %28353, %28332
  %28355 = add <16 x i16> %28354, %28338
  %28356 = add <16 x i16> %28355, %28344
  %28357 = shufflevector <16 x i16> %28350, <16 x i16> %28356, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28358 = udiv <32 x i16> %28357, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %28359 = shufflevector <32 x i16> %28358, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28360 = zext i32 %.pre-phi3681 to i64
  %28361 = mul nsw i64 %303, %28360
  %28362 = add nsw i64 %305, %28361
  %28363 = getelementptr inbounds i16, i16* %blur_x917, i64 %28362
  %28364 = getelementptr inbounds i16, i16* %28363, i64 -32
  %28365 = bitcast i16* %28364 to <16 x i16>*
  store <16 x i16> %28359, <16 x i16>* %28365, align 2, !tbaa !399
  %28366 = shufflevector <32 x i16> %28358, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28367 = getelementptr inbounds i16, i16* %28363, i64 -16
  %28368 = bitcast i16* %28367 to <16 x i16>*
  store <16 x i16> %28366, <16 x i16>* %28368, align 2, !tbaa !399
  %28369 = zext i32 %.pre-phi3693 to i64
  %28370 = mul nsw i64 %28369, %349
  %28371 = add nsw i64 %28370, %300
  %28372 = getelementptr inbounds i16, i16* %blur_x917, i64 %28371
  %28373 = getelementptr inbounds i16, i16* %28372, i64 -32
  %28374 = bitcast i16* %28373 to <16 x i16>*
  %28375 = load <16 x i16>, <16 x i16>* %28374, align 2, !tbaa !399
  %28376 = getelementptr inbounds i16, i16* %28372, i64 -16
  %28377 = bitcast i16* %28376 to <16 x i16>*
  %28378 = load <16 x i16>, <16 x i16>* %28377, align 2, !tbaa !399
  %28379 = zext i32 %.pre-phi3689 to i64
  %28380 = mul nsw i64 %28379, %349
  %28381 = add nsw i64 %28380, %300
  %28382 = getelementptr inbounds i16, i16* %blur_x917, i64 %28381
  %28383 = getelementptr inbounds i16, i16* %28382, i64 -32
  %28384 = bitcast i16* %28383 to <16 x i16>*
  %28385 = load <16 x i16>, <16 x i16>* %28384, align 2, !tbaa !399
  %28386 = getelementptr inbounds i16, i16* %28382, i64 -16
  %28387 = bitcast i16* %28386 to <16 x i16>*
  %28388 = load <16 x i16>, <16 x i16>* %28387, align 2, !tbaa !399
  %28389 = zext i32 %.pre-phi3699 to i64
  %28390 = mul nsw i64 %28389, %349
  %28391 = add nsw i64 %28390, %300
  %28392 = getelementptr inbounds i16, i16* %blur_x917, i64 %28391
  %28393 = getelementptr inbounds i16, i16* %28392, i64 -32
  %28394 = bitcast i16* %28393 to <16 x i16>*
  %28395 = load <16 x i16>, <16 x i16>* %28394, align 2, !tbaa !399
  %28396 = getelementptr inbounds i16, i16* %28392, i64 -16
  %28397 = bitcast i16* %28396 to <16 x i16>*
  %28398 = load <16 x i16>, <16 x i16>* %28397, align 2, !tbaa !399
  %28399 = zext i32 %.pre-phi3669 to i64
  %28400 = mul nsw i64 %28399, %349
  %28401 = add nsw i64 %28400, %300
  %28402 = getelementptr inbounds i16, i16* %blur_x917, i64 %28401
  %28403 = getelementptr inbounds i16, i16* %28402, i64 -32
  %28404 = bitcast i16* %28403 to <16 x i16>*
  %28405 = load <16 x i16>, <16 x i16>* %28404, align 2, !tbaa !399
  %28406 = getelementptr inbounds i16, i16* %28402, i64 -16
  %28407 = bitcast i16* %28406 to <16 x i16>*
  %28408 = load <16 x i16>, <16 x i16>* %28407, align 2, !tbaa !399
  %28409 = zext i32 %.pre-phi3673 to i64
  %28410 = mul nsw i64 %28409, %349
  %28411 = add nsw i64 %28410, %300
  %28412 = getelementptr inbounds i16, i16* %blur_x917, i64 %28411
  %28413 = getelementptr inbounds i16, i16* %28412, i64 -32
  %28414 = bitcast i16* %28413 to <16 x i16>*
  %28415 = load <16 x i16>, <16 x i16>* %28414, align 2, !tbaa !399
  %28416 = getelementptr inbounds i16, i16* %28412, i64 -16
  %28417 = bitcast i16* %28416 to <16 x i16>*
  %28418 = load <16 x i16>, <16 x i16>* %28417, align 2, !tbaa !399
  %28419 = mul nsw i64 %28360, %349
  %28420 = add nsw i64 %28419, %300
  %28421 = getelementptr inbounds i16, i16* %blur_x917, i64 %28420
  %28422 = getelementptr inbounds i16, i16* %28421, i64 -32
  %28423 = bitcast i16* %28422 to <16 x i16>*
  %28424 = load <16 x i16>, <16 x i16>* %28423, align 2, !tbaa !399
  %28425 = getelementptr inbounds i16, i16* %28421, i64 -16
  %28426 = bitcast i16* %28425 to <16 x i16>*
  %28427 = load <16 x i16>, <16 x i16>* %28426, align 2, !tbaa !399
  %28428 = zext i32 %.pre-phi3677 to i64
  %28429 = mul nsw i64 %28428, %349
  %28430 = add nsw i64 %28429, %300
  %28431 = getelementptr inbounds i16, i16* %blur_x917, i64 %28430
  %28432 = getelementptr inbounds i16, i16* %28431, i64 -32
  %28433 = bitcast i16* %28432 to <16 x i16>*
  %28434 = load <16 x i16>, <16 x i16>* %28433, align 2, !tbaa !399
  %28435 = getelementptr inbounds i16, i16* %28431, i64 -16
  %28436 = bitcast i16* %28435 to <16 x i16>*
  %28437 = load <16 x i16>, <16 x i16>* %28436, align 2, !tbaa !399
  %28438 = add <16 x i16> %28385, %28375
  %28439 = add <16 x i16> %28438, %28395
  %28440 = add <16 x i16> %28439, %28405
  %28441 = add <16 x i16> %28440, %28415
  %28442 = add <16 x i16> %28441, %28424
  %28443 = add <16 x i16> %28442, %28434
  %28444 = add <16 x i16> %28388, %28378
  %28445 = add <16 x i16> %28444, %28398
  %28446 = add <16 x i16> %28445, %28408
  %28447 = add <16 x i16> %28446, %28418
  %28448 = add <16 x i16> %28447, %28427
  %28449 = add <16 x i16> %28448, %28437
  %28450 = shufflevector <16 x i16> %28443, <16 x i16> %28449, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28451 = udiv <32 x i16> %28450, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %28452 = shufflevector <32 x i16> %28451, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28453 = sext i32 %a393 to i64
  %28454 = add nsw i64 %28453, 13
  %28455 = mul nsw i64 %28454, %350
  %28456 = add nsw i64 %352, %28455
  %28457 = getelementptr inbounds i16, i16* %267, i64 %28456
  %28458 = getelementptr inbounds i16, i16* %28457, i64 -32
  %28459 = bitcast i16* %28458 to <16 x i16>*
  store <16 x i16> %28452, <16 x i16>* %28459, align 2, !tbaa !401
  %28460 = shufflevector <32 x i16> %28451, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28461 = getelementptr inbounds i16, i16* %28457, i64 -16
  %28462 = bitcast i16* %28461 to <16 x i16>*
  store <16 x i16> %28460, <16 x i16>* %28462, align 2, !tbaa !401
  br label %after_bb1656

"for blur_y.s0.x.x.rebased1671":                  ; preds = %"for blur_y.s0.x.x.rebased1671.preheader", %"consume blur_x1679"
  %indvars.iv3534 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1671.preheader" ], [ %indvars.iv.next3535, %"consume blur_x1679" ]
  %28463 = add nsw i64 %indvars.iv3534, %307
  %28464 = icmp slt i64 %28463, 1
  %28465 = trunc i64 %28463 to i32
  %28466 = shl nsw i32 %28465, 5
  %28467 = icmp sgt i32 %202, %28466
  %28468 = or i1 %28464, %28467
  br i1 %28468, label %"produce blur_x1677", label %"for blur_y.s0.x.x.rebased1671.consume blur_x1679_crit_edge"

"for blur_y.s0.x.x.rebased1671.consume blur_x1679_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1671"
  %.pre3724 = shl nsw i64 %28463, 5
  br label %"consume blur_x1679"

"end for blur_y.s0.x.x.rebased1672":              ; preds = %"consume blur_x1679", %after_bb1656
  br i1 %308, label %"for blur_y.s0.x.x.rebased1687.preheader", label %"end for blur_y.s0.x.x.rebased1688", !prof !386

"for blur_y.s0.x.x.rebased1687.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1672"
  %28469 = sext i32 %t17441012 to i64
  %28470 = zext i32 %.pre-phi3693 to i64
  %28471 = mul nsw i64 %28470, %353
  %28472 = sub nsw i64 %28471, %302
  %28473 = zext i32 %.pre-phi3689 to i64
  %28474 = mul nsw i64 %28473, %353
  %28475 = sub nsw i64 %28474, %302
  %28476 = zext i32 %.pre-phi3699 to i64
  %28477 = mul nsw i64 %28476, %353
  %28478 = sub nsw i64 %28477, %302
  %28479 = zext i32 %.pre-phi3669 to i64
  %28480 = mul nsw i64 %28479, %353
  %28481 = sub nsw i64 %28480, %302
  %28482 = zext i32 %.pre-phi3673 to i64
  %28483 = mul nsw i64 %28482, %353
  %28484 = sub nsw i64 %28483, %302
  %28485 = zext i32 %.pre-phi3681 to i64
  %28486 = mul nsw i64 %28485, %353
  %28487 = sub nsw i64 %28486, %302
  %28488 = zext i32 %.pre-phi3677 to i64
  %28489 = mul nsw i64 %28488, %353
  %28490 = sub nsw i64 %28489, %302
  %28491 = sext i32 %a393 to i64
  %28492 = add nsw i64 %28491, 13
  %28493 = mul nsw i64 %28492, %350
  %28494 = add nsw i64 %28493, %354
  br label %"for blur_y.s0.x.x.rebased1687"

"produce blur_x1677":                             ; preds = %"for blur_y.s0.x.x.rebased1671"
  %t9601678 = add nsw i32 %431, %28466
  %28495 = sext i32 %t9601678 to i64
  %28496 = getelementptr inbounds i16, i16* %read_input860, i64 %28495
  %28497 = getelementptr inbounds i16, i16* %28496, i64 1
  %28498 = bitcast i16* %28497 to <16 x i16>*
  %28499 = load <16 x i16>, <16 x i16>* %28498, align 2, !tbaa !396
  %28500 = getelementptr inbounds i16, i16* %28496, i64 17
  %28501 = bitcast i16* %28500 to <16 x i16>*
  %28502 = load <16 x i16>, <16 x i16>* %28501, align 2, !tbaa !396
  %28503 = bitcast i16* %28496 to <16 x i16>*
  %28504 = load <16 x i16>, <16 x i16>* %28503, align 2, !tbaa !396
  %28505 = getelementptr inbounds i16, i16* %28496, i64 16
  %28506 = bitcast i16* %28505 to <16 x i16>*
  %28507 = load <16 x i16>, <16 x i16>* %28506, align 2, !tbaa !396
  %28508 = getelementptr inbounds i16, i16* %28496, i64 2
  %28509 = bitcast i16* %28508 to <16 x i16>*
  %28510 = load <16 x i16>, <16 x i16>* %28509, align 2, !tbaa !396
  %28511 = getelementptr inbounds i16, i16* %28496, i64 18
  %28512 = bitcast i16* %28511 to <16 x i16>*
  %28513 = load <16 x i16>, <16 x i16>* %28512, align 2, !tbaa !396
  %28514 = getelementptr inbounds i16, i16* %28496, i64 3
  %28515 = bitcast i16* %28514 to <16 x i16>*
  %28516 = load <16 x i16>, <16 x i16>* %28515, align 2, !tbaa !396
  %28517 = getelementptr inbounds i16, i16* %28496, i64 19
  %28518 = bitcast i16* %28517 to <16 x i16>*
  %28519 = load <16 x i16>, <16 x i16>* %28518, align 2, !tbaa !396
  %28520 = getelementptr inbounds i16, i16* %28496, i64 4
  %28521 = bitcast i16* %28520 to <16 x i16>*
  %28522 = load <16 x i16>, <16 x i16>* %28521, align 2, !tbaa !396
  %28523 = getelementptr inbounds i16, i16* %28496, i64 20
  %28524 = bitcast i16* %28523 to <16 x i16>*
  %28525 = load <16 x i16>, <16 x i16>* %28524, align 2, !tbaa !396
  %28526 = getelementptr inbounds i16, i16* %28496, i64 6
  %28527 = bitcast i16* %28526 to <16 x i16>*
  %28528 = load <16 x i16>, <16 x i16>* %28527, align 2, !tbaa !396
  %28529 = getelementptr inbounds i16, i16* %28496, i64 22
  %28530 = bitcast i16* %28529 to <16 x i16>*
  %28531 = load <16 x i16>, <16 x i16>* %28530, align 2, !tbaa !396
  %28532 = getelementptr inbounds i16, i16* %28496, i64 5
  %28533 = bitcast i16* %28532 to <16 x i16>*
  %28534 = load <16 x i16>, <16 x i16>* %28533, align 2, !tbaa !396
  %28535 = getelementptr inbounds i16, i16* %28496, i64 21
  %28536 = bitcast i16* %28535 to <16 x i16>*
  %28537 = load <16 x i16>, <16 x i16>* %28536, align 2, !tbaa !396
  %28538 = add <16 x i16> %28504, %28499
  %28539 = add <16 x i16> %28538, %28510
  %28540 = add <16 x i16> %28539, %28516
  %28541 = add <16 x i16> %28540, %28522
  %28542 = add <16 x i16> %28541, %28528
  %28543 = add <16 x i16> %28542, %28534
  %28544 = add <16 x i16> %28507, %28502
  %28545 = add <16 x i16> %28544, %28513
  %28546 = add <16 x i16> %28545, %28519
  %28547 = add <16 x i16> %28546, %28525
  %28548 = add <16 x i16> %28547, %28531
  %28549 = add <16 x i16> %28548, %28537
  %28550 = shufflevector <16 x i16> %28543, <16 x i16> %28549, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28551 = udiv <32 x i16> %28550, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %28552 = shufflevector <32 x i16> %28551, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28553 = shl nsw i64 %28463, 5
  %28554 = add nsw i64 %28553, %28276
  %28555 = getelementptr inbounds i16, i16* %blur_x917, i64 %28554
  %28556 = bitcast i16* %28555 to <16 x i16>*
  store <16 x i16> %28552, <16 x i16>* %28556, align 2, !tbaa !399
  %28557 = shufflevector <32 x i16> %28551, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28558 = getelementptr inbounds i16, i16* %28555, i64 16
  %28559 = bitcast i16* %28558 to <16 x i16>*
  store <16 x i16> %28557, <16 x i16>* %28559, align 2, !tbaa !399
  br label %"consume blur_x1679"

"consume blur_x1679":                             ; preds = %"for blur_y.s0.x.x.rebased1671.consume blur_x1679_crit_edge", %"produce blur_x1677"
  %.pre-phi3725 = phi i64 [ %.pre3724, %"for blur_y.s0.x.x.rebased1671.consume blur_x1679_crit_edge" ], [ %28553, %"produce blur_x1677" ]
  %28560 = add nsw i64 %28279, %.pre-phi3725
  %28561 = getelementptr inbounds i16, i16* %blur_x917, i64 %28560
  %28562 = bitcast i16* %28561 to <16 x i16>*
  %28563 = load <16 x i16>, <16 x i16>* %28562, align 2, !tbaa !399
  %28564 = getelementptr inbounds i16, i16* %28561, i64 16
  %28565 = bitcast i16* %28564 to <16 x i16>*
  %28566 = load <16 x i16>, <16 x i16>* %28565, align 2, !tbaa !399
  %28567 = add nsw i64 %28282, %.pre-phi3725
  %28568 = getelementptr inbounds i16, i16* %blur_x917, i64 %28567
  %28569 = bitcast i16* %28568 to <16 x i16>*
  %28570 = load <16 x i16>, <16 x i16>* %28569, align 2, !tbaa !399
  %28571 = getelementptr inbounds i16, i16* %28568, i64 16
  %28572 = bitcast i16* %28571 to <16 x i16>*
  %28573 = load <16 x i16>, <16 x i16>* %28572, align 2, !tbaa !399
  %28574 = add nsw i64 %28285, %.pre-phi3725
  %28575 = getelementptr inbounds i16, i16* %blur_x917, i64 %28574
  %28576 = bitcast i16* %28575 to <16 x i16>*
  %28577 = load <16 x i16>, <16 x i16>* %28576, align 2, !tbaa !399
  %28578 = getelementptr inbounds i16, i16* %28575, i64 16
  %28579 = bitcast i16* %28578 to <16 x i16>*
  %28580 = load <16 x i16>, <16 x i16>* %28579, align 2, !tbaa !399
  %28581 = add nsw i64 %28288, %.pre-phi3725
  %28582 = getelementptr inbounds i16, i16* %blur_x917, i64 %28581
  %28583 = bitcast i16* %28582 to <16 x i16>*
  %28584 = load <16 x i16>, <16 x i16>* %28583, align 2, !tbaa !399
  %28585 = getelementptr inbounds i16, i16* %28582, i64 16
  %28586 = bitcast i16* %28585 to <16 x i16>*
  %28587 = load <16 x i16>, <16 x i16>* %28586, align 2, !tbaa !399
  %28588 = add nsw i64 %28291, %.pre-phi3725
  %28589 = getelementptr inbounds i16, i16* %blur_x917, i64 %28588
  %28590 = bitcast i16* %28589 to <16 x i16>*
  %28591 = load <16 x i16>, <16 x i16>* %28590, align 2, !tbaa !399
  %28592 = getelementptr inbounds i16, i16* %28589, i64 16
  %28593 = bitcast i16* %28592 to <16 x i16>*
  %28594 = load <16 x i16>, <16 x i16>* %28593, align 2, !tbaa !399
  %28595 = add nsw i64 %28294, %.pre-phi3725
  %28596 = getelementptr inbounds i16, i16* %blur_x917, i64 %28595
  %28597 = bitcast i16* %28596 to <16 x i16>*
  %28598 = load <16 x i16>, <16 x i16>* %28597, align 2, !tbaa !399
  %28599 = getelementptr inbounds i16, i16* %28596, i64 16
  %28600 = bitcast i16* %28599 to <16 x i16>*
  %28601 = load <16 x i16>, <16 x i16>* %28600, align 2, !tbaa !399
  %28602 = add nsw i64 %28297, %.pre-phi3725
  %28603 = getelementptr inbounds i16, i16* %blur_x917, i64 %28602
  %28604 = bitcast i16* %28603 to <16 x i16>*
  %28605 = load <16 x i16>, <16 x i16>* %28604, align 2, !tbaa !399
  %28606 = getelementptr inbounds i16, i16* %28603, i64 16
  %28607 = bitcast i16* %28606 to <16 x i16>*
  %28608 = load <16 x i16>, <16 x i16>* %28607, align 2, !tbaa !399
  %28609 = add <16 x i16> %28570, %28563
  %28610 = add <16 x i16> %28609, %28577
  %28611 = add <16 x i16> %28610, %28584
  %28612 = add <16 x i16> %28611, %28591
  %28613 = add <16 x i16> %28612, %28598
  %28614 = add <16 x i16> %28613, %28605
  %28615 = add <16 x i16> %28573, %28566
  %28616 = add <16 x i16> %28615, %28580
  %28617 = add <16 x i16> %28616, %28587
  %28618 = add <16 x i16> %28617, %28594
  %28619 = add <16 x i16> %28618, %28601
  %28620 = add <16 x i16> %28619, %28608
  %28621 = shufflevector <16 x i16> %28614, <16 x i16> %28620, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28622 = udiv <32 x i16> %28621, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %28623 = shufflevector <32 x i16> %28622, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28624 = add nsw i64 %28301, %.pre-phi3725
  %28625 = getelementptr inbounds i16, i16* %267, i64 %28624
  %28626 = bitcast i16* %28625 to <16 x i16>*
  store <16 x i16> %28623, <16 x i16>* %28626, align 2, !tbaa !401
  %28627 = shufflevector <32 x i16> %28622, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28628 = getelementptr inbounds i16, i16* %28625, i64 16
  %28629 = bitcast i16* %28628 to <16 x i16>*
  store <16 x i16> %28627, <16 x i16>* %28629, align 2, !tbaa !401
  %indvars.iv.next3535 = add nuw nsw i64 %indvars.iv3534, 1
  %.not2717 = icmp eq i64 %indvars.iv.next3535, %546
  br i1 %.not2717, label %"end for blur_y.s0.x.x.rebased1672", label %"for blur_y.s0.x.x.rebased1671"

"for blur_y.s0.x.x.rebased1687":                  ; preds = %"for blur_y.s0.x.x.rebased1687.preheader", %"consume blur_x1698"
  %blur_y.s0.x.x.rebased1689 = phi i32 [ %28772, %"consume blur_x1698" ], [ 0, %"for blur_y.s0.x.x.rebased1687.preheader" ]
  %28630 = add nsw i32 %blur_y.s0.x.x.rebased1689, %t1670852
  %a3644 = shl nsw i32 %28630, 5
  %28631 = icmp sgt i32 %t1691, %a3644
  %blur_y.s0.x.v0.base.s1690 = select i1 %28631, i32 %a3644, i32 %t1691
  %28632 = icmp slt i32 %28630, 1
  %28633 = icmp sgt i32 %202, %a3644
  %28634 = or i1 %28632, %28633
  br i1 %28634, label %"produce blur_x1695", label %"consume blur_x1698"

"end for blur_y.s0.x.x.rebased1688":              ; preds = %"consume blur_x1698", %"end for blur_y.s0.x.x.rebased1672"
  br i1 %233, label %"produce blur_x1702", label %after_bb1699

"produce blur_x1695":                             ; preds = %"for blur_y.s0.x.x.rebased1687"
  %28635 = icmp slt i32 %blur_y.s0.x.v0.base.s1690, %202
  %blur_x.s0.x.v1.base.s1696 = select i1 %28635, i32 %blur_y.s0.x.v0.base.s1690, i32 %202
  %t9651697 = add nsw i32 %431, %blur_x.s0.x.v1.base.s1696
  %28636 = sext i32 %t9651697 to i64
  %28637 = getelementptr inbounds i16, i16* %read_input860, i64 %28636
  %28638 = getelementptr inbounds i16, i16* %28637, i64 1
  %28639 = bitcast i16* %28638 to <16 x i16>*
  %28640 = load <16 x i16>, <16 x i16>* %28639, align 2, !tbaa !396
  %28641 = getelementptr inbounds i16, i16* %28637, i64 17
  %28642 = bitcast i16* %28641 to <16 x i16>*
  %28643 = load <16 x i16>, <16 x i16>* %28642, align 2, !tbaa !396
  %28644 = bitcast i16* %28637 to <16 x i16>*
  %28645 = load <16 x i16>, <16 x i16>* %28644, align 2, !tbaa !396
  %28646 = getelementptr inbounds i16, i16* %28637, i64 16
  %28647 = bitcast i16* %28646 to <16 x i16>*
  %28648 = load <16 x i16>, <16 x i16>* %28647, align 2, !tbaa !396
  %28649 = getelementptr inbounds i16, i16* %28637, i64 2
  %28650 = bitcast i16* %28649 to <16 x i16>*
  %28651 = load <16 x i16>, <16 x i16>* %28650, align 2, !tbaa !396
  %28652 = getelementptr inbounds i16, i16* %28637, i64 18
  %28653 = bitcast i16* %28652 to <16 x i16>*
  %28654 = load <16 x i16>, <16 x i16>* %28653, align 2, !tbaa !396
  %28655 = getelementptr inbounds i16, i16* %28637, i64 3
  %28656 = bitcast i16* %28655 to <16 x i16>*
  %28657 = load <16 x i16>, <16 x i16>* %28656, align 2, !tbaa !396
  %28658 = getelementptr inbounds i16, i16* %28637, i64 19
  %28659 = bitcast i16* %28658 to <16 x i16>*
  %28660 = load <16 x i16>, <16 x i16>* %28659, align 2, !tbaa !396
  %28661 = getelementptr inbounds i16, i16* %28637, i64 4
  %28662 = bitcast i16* %28661 to <16 x i16>*
  %28663 = load <16 x i16>, <16 x i16>* %28662, align 2, !tbaa !396
  %28664 = getelementptr inbounds i16, i16* %28637, i64 20
  %28665 = bitcast i16* %28664 to <16 x i16>*
  %28666 = load <16 x i16>, <16 x i16>* %28665, align 2, !tbaa !396
  %28667 = getelementptr inbounds i16, i16* %28637, i64 6
  %28668 = bitcast i16* %28667 to <16 x i16>*
  %28669 = load <16 x i16>, <16 x i16>* %28668, align 2, !tbaa !396
  %28670 = getelementptr inbounds i16, i16* %28637, i64 22
  %28671 = bitcast i16* %28670 to <16 x i16>*
  %28672 = load <16 x i16>, <16 x i16>* %28671, align 2, !tbaa !396
  %28673 = getelementptr inbounds i16, i16* %28637, i64 5
  %28674 = bitcast i16* %28673 to <16 x i16>*
  %28675 = load <16 x i16>, <16 x i16>* %28674, align 2, !tbaa !396
  %28676 = getelementptr inbounds i16, i16* %28637, i64 21
  %28677 = bitcast i16* %28676 to <16 x i16>*
  %28678 = load <16 x i16>, <16 x i16>* %28677, align 2, !tbaa !396
  %28679 = add <16 x i16> %28645, %28640
  %28680 = add <16 x i16> %28679, %28651
  %28681 = add <16 x i16> %28680, %28657
  %28682 = add <16 x i16> %28681, %28663
  %28683 = add <16 x i16> %28682, %28669
  %28684 = add <16 x i16> %28683, %28675
  %28685 = add <16 x i16> %28648, %28643
  %28686 = add <16 x i16> %28685, %28654
  %28687 = add <16 x i16> %28686, %28660
  %28688 = add <16 x i16> %28687, %28666
  %28689 = add <16 x i16> %28688, %28672
  %28690 = add <16 x i16> %28689, %28678
  %28691 = shufflevector <16 x i16> %28684, <16 x i16> %28690, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28692 = udiv <32 x i16> %28691, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %28693 = shufflevector <32 x i16> %28692, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28694 = sext i32 %blur_x.s0.x.v1.base.s1696 to i64
  %28695 = add nsw i64 %28694, %28469
  %28696 = getelementptr inbounds i16, i16* %blur_x917, i64 %28695
  %28697 = bitcast i16* %28696 to <16 x i16>*
  store <16 x i16> %28693, <16 x i16>* %28697, align 2, !tbaa !399
  %28698 = shufflevector <32 x i16> %28692, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28699 = getelementptr inbounds i16, i16* %28696, i64 16
  %28700 = bitcast i16* %28699 to <16 x i16>*
  store <16 x i16> %28698, <16 x i16>* %28700, align 2, !tbaa !399
  br label %"consume blur_x1698"

"consume blur_x1698":                             ; preds = %"for blur_y.s0.x.x.rebased1687", %"produce blur_x1695"
  %28701 = sext i32 %blur_y.s0.x.v0.base.s1690 to i64
  %28702 = add nsw i64 %28472, %28701
  %28703 = getelementptr inbounds i16, i16* %blur_x917, i64 %28702
  %28704 = bitcast i16* %28703 to <16 x i16>*
  %28705 = load <16 x i16>, <16 x i16>* %28704, align 2, !tbaa !399
  %28706 = getelementptr inbounds i16, i16* %28703, i64 16
  %28707 = bitcast i16* %28706 to <16 x i16>*
  %28708 = load <16 x i16>, <16 x i16>* %28707, align 2, !tbaa !399
  %28709 = add nsw i64 %28475, %28701
  %28710 = getelementptr inbounds i16, i16* %blur_x917, i64 %28709
  %28711 = bitcast i16* %28710 to <16 x i16>*
  %28712 = load <16 x i16>, <16 x i16>* %28711, align 2, !tbaa !399
  %28713 = getelementptr inbounds i16, i16* %28710, i64 16
  %28714 = bitcast i16* %28713 to <16 x i16>*
  %28715 = load <16 x i16>, <16 x i16>* %28714, align 2, !tbaa !399
  %28716 = add nsw i64 %28478, %28701
  %28717 = getelementptr inbounds i16, i16* %blur_x917, i64 %28716
  %28718 = bitcast i16* %28717 to <16 x i16>*
  %28719 = load <16 x i16>, <16 x i16>* %28718, align 2, !tbaa !399
  %28720 = getelementptr inbounds i16, i16* %28717, i64 16
  %28721 = bitcast i16* %28720 to <16 x i16>*
  %28722 = load <16 x i16>, <16 x i16>* %28721, align 2, !tbaa !399
  %28723 = add nsw i64 %28481, %28701
  %28724 = getelementptr inbounds i16, i16* %blur_x917, i64 %28723
  %28725 = bitcast i16* %28724 to <16 x i16>*
  %28726 = load <16 x i16>, <16 x i16>* %28725, align 2, !tbaa !399
  %28727 = getelementptr inbounds i16, i16* %28724, i64 16
  %28728 = bitcast i16* %28727 to <16 x i16>*
  %28729 = load <16 x i16>, <16 x i16>* %28728, align 2, !tbaa !399
  %28730 = add nsw i64 %28484, %28701
  %28731 = getelementptr inbounds i16, i16* %blur_x917, i64 %28730
  %28732 = bitcast i16* %28731 to <16 x i16>*
  %28733 = load <16 x i16>, <16 x i16>* %28732, align 2, !tbaa !399
  %28734 = getelementptr inbounds i16, i16* %28731, i64 16
  %28735 = bitcast i16* %28734 to <16 x i16>*
  %28736 = load <16 x i16>, <16 x i16>* %28735, align 2, !tbaa !399
  %28737 = add nsw i64 %28487, %28701
  %28738 = getelementptr inbounds i16, i16* %blur_x917, i64 %28737
  %28739 = bitcast i16* %28738 to <16 x i16>*
  %28740 = load <16 x i16>, <16 x i16>* %28739, align 2, !tbaa !399
  %28741 = getelementptr inbounds i16, i16* %28738, i64 16
  %28742 = bitcast i16* %28741 to <16 x i16>*
  %28743 = load <16 x i16>, <16 x i16>* %28742, align 2, !tbaa !399
  %28744 = add nsw i64 %28490, %28701
  %28745 = getelementptr inbounds i16, i16* %blur_x917, i64 %28744
  %28746 = bitcast i16* %28745 to <16 x i16>*
  %28747 = load <16 x i16>, <16 x i16>* %28746, align 2, !tbaa !399
  %28748 = getelementptr inbounds i16, i16* %28745, i64 16
  %28749 = bitcast i16* %28748 to <16 x i16>*
  %28750 = load <16 x i16>, <16 x i16>* %28749, align 2, !tbaa !399
  %28751 = add <16 x i16> %28712, %28705
  %28752 = add <16 x i16> %28751, %28719
  %28753 = add <16 x i16> %28752, %28726
  %28754 = add <16 x i16> %28753, %28733
  %28755 = add <16 x i16> %28754, %28740
  %28756 = add <16 x i16> %28755, %28747
  %28757 = add <16 x i16> %28715, %28708
  %28758 = add <16 x i16> %28757, %28722
  %28759 = add <16 x i16> %28758, %28729
  %28760 = add <16 x i16> %28759, %28736
  %28761 = add <16 x i16> %28760, %28743
  %28762 = add <16 x i16> %28761, %28750
  %28763 = shufflevector <16 x i16> %28756, <16 x i16> %28762, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28764 = udiv <32 x i16> %28763, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %28765 = shufflevector <32 x i16> %28764, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28766 = add nsw i64 %28494, %28701
  %28767 = getelementptr inbounds i16, i16* %267, i64 %28766
  %28768 = bitcast i16* %28767 to <16 x i16>*
  store <16 x i16> %28765, <16 x i16>* %28768, align 2, !tbaa !401
  %28769 = shufflevector <32 x i16> %28764, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28770 = getelementptr inbounds i16, i16* %28767, i64 16
  %28771 = bitcast i16* %28770 to <16 x i16>*
  store <16 x i16> %28769, <16 x i16>* %28771, align 2, !tbaa !401
  %28772 = add nuw nsw i32 %blur_y.s0.x.x.rebased1689, 1
  %.not2716 = icmp eq i32 %28772, %t1727936
  br i1 %.not2716, label %"end for blur_y.s0.x.x.rebased1688", label %"for blur_y.s0.x.x.rebased1687"

after_bb1699:                                     ; preds = %"end for blur_y.s0.x.x.rebased1688", %"produce blur_x1702"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1714.preheader", label %"end for blur_y.s0.x.x.rebased1715", !prof !386

"for blur_y.s0.x.x.rebased1714.preheader":        ; preds = %after_bb1699
  %28773 = sext i32 %t17501042 to i64
  %28774 = zext i32 %.pre-phi3699 to i64
  %28775 = mul nsw i64 %28774, %353
  %28776 = sub nsw i64 %28775, %302
  %28777 = zext i32 %.pre-phi3693 to i64
  %28778 = mul nsw i64 %28777, %353
  %28779 = sub nsw i64 %28778, %302
  %28780 = zext i32 %.pre-phi3669 to i64
  %28781 = mul nsw i64 %28780, %353
  %28782 = sub nsw i64 %28781, %302
  %28783 = zext i32 %.pre-phi3673 to i64
  %28784 = mul nsw i64 %28783, %353
  %28785 = sub nsw i64 %28784, %302
  %28786 = zext i32 %.pre-phi3677 to i64
  %28787 = mul nsw i64 %28786, %353
  %28788 = sub nsw i64 %28787, %302
  %28789 = zext i32 %.pre-phi3685 to i64
  %28790 = mul nsw i64 %28789, %353
  %28791 = sub nsw i64 %28790, %302
  %28792 = zext i32 %.pre-phi3681 to i64
  %28793 = mul nsw i64 %28792, %353
  %28794 = sub nsw i64 %28793, %302
  %28795 = sext i32 %a393 to i64
  %28796 = add nsw i64 %28795, 14
  %28797 = mul nsw i64 %28796, %350
  %28798 = add nsw i64 %28797, %354
  br label %"for blur_y.s0.x.x.rebased1714"

"produce blur_x1702":                             ; preds = %"end for blur_y.s0.x.x.rebased1688"
  %28799 = getelementptr inbounds i16, i16* %read_input860, i64 %435
  %28800 = getelementptr inbounds i16, i16* %28799, i64 -31
  %28801 = bitcast i16* %28800 to <16 x i16>*
  %28802 = load <16 x i16>, <16 x i16>* %28801, align 2, !tbaa !396
  %28803 = getelementptr inbounds i16, i16* %28799, i64 -15
  %28804 = bitcast i16* %28803 to <16 x i16>*
  %28805 = load <16 x i16>, <16 x i16>* %28804, align 2, !tbaa !396
  %28806 = getelementptr inbounds i16, i16* %28799, i64 -32
  %28807 = bitcast i16* %28806 to <16 x i16>*
  %28808 = load <16 x i16>, <16 x i16>* %28807, align 2, !tbaa !396
  %28809 = getelementptr inbounds i16, i16* %28799, i64 -16
  %28810 = bitcast i16* %28809 to <16 x i16>*
  %28811 = load <16 x i16>, <16 x i16>* %28810, align 2, !tbaa !396
  %28812 = getelementptr inbounds i16, i16* %28799, i64 -30
  %28813 = bitcast i16* %28812 to <16 x i16>*
  %28814 = load <16 x i16>, <16 x i16>* %28813, align 2, !tbaa !396
  %28815 = getelementptr inbounds i16, i16* %28799, i64 -14
  %28816 = bitcast i16* %28815 to <16 x i16>*
  %28817 = load <16 x i16>, <16 x i16>* %28816, align 2, !tbaa !396
  %28818 = getelementptr inbounds i16, i16* %28799, i64 -29
  %28819 = bitcast i16* %28818 to <16 x i16>*
  %28820 = load <16 x i16>, <16 x i16>* %28819, align 2, !tbaa !396
  %28821 = getelementptr inbounds i16, i16* %28799, i64 -13
  %28822 = bitcast i16* %28821 to <16 x i16>*
  %28823 = load <16 x i16>, <16 x i16>* %28822, align 2, !tbaa !396
  %28824 = getelementptr inbounds i16, i16* %28799, i64 -28
  %28825 = bitcast i16* %28824 to <16 x i16>*
  %28826 = load <16 x i16>, <16 x i16>* %28825, align 2, !tbaa !396
  %28827 = getelementptr inbounds i16, i16* %28799, i64 -12
  %28828 = bitcast i16* %28827 to <16 x i16>*
  %28829 = load <16 x i16>, <16 x i16>* %28828, align 2, !tbaa !396
  %28830 = getelementptr inbounds i16, i16* %28799, i64 -26
  %28831 = bitcast i16* %28830 to <16 x i16>*
  %28832 = load <16 x i16>, <16 x i16>* %28831, align 2, !tbaa !396
  %28833 = getelementptr inbounds i16, i16* %28799, i64 -10
  %28834 = bitcast i16* %28833 to <16 x i16>*
  %28835 = load <16 x i16>, <16 x i16>* %28834, align 2, !tbaa !396
  %28836 = getelementptr inbounds i16, i16* %28799, i64 -27
  %28837 = bitcast i16* %28836 to <16 x i16>*
  %28838 = load <16 x i16>, <16 x i16>* %28837, align 2, !tbaa !396
  %28839 = getelementptr inbounds i16, i16* %28799, i64 -11
  %28840 = bitcast i16* %28839 to <16 x i16>*
  %28841 = load <16 x i16>, <16 x i16>* %28840, align 2, !tbaa !396
  %28842 = add <16 x i16> %28808, %28802
  %28843 = add <16 x i16> %28842, %28814
  %28844 = add <16 x i16> %28843, %28820
  %28845 = add <16 x i16> %28844, %28826
  %28846 = add <16 x i16> %28845, %28832
  %28847 = add <16 x i16> %28846, %28838
  %28848 = add <16 x i16> %28811, %28805
  %28849 = add <16 x i16> %28848, %28817
  %28850 = add <16 x i16> %28849, %28823
  %28851 = add <16 x i16> %28850, %28829
  %28852 = add <16 x i16> %28851, %28835
  %28853 = add <16 x i16> %28852, %28841
  %28854 = shufflevector <16 x i16> %28847, <16 x i16> %28853, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28855 = udiv <32 x i16> %28854, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %28856 = shufflevector <32 x i16> %28855, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28857 = zext i32 %.pre-phi3685 to i64
  %28858 = mul nsw i64 %303, %28857
  %28859 = add nsw i64 %305, %28858
  %28860 = getelementptr inbounds i16, i16* %blur_x917, i64 %28859
  %28861 = getelementptr inbounds i16, i16* %28860, i64 -32
  %28862 = bitcast i16* %28861 to <16 x i16>*
  store <16 x i16> %28856, <16 x i16>* %28862, align 2, !tbaa !399
  %28863 = shufflevector <32 x i16> %28855, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28864 = getelementptr inbounds i16, i16* %28860, i64 -16
  %28865 = bitcast i16* %28864 to <16 x i16>*
  store <16 x i16> %28863, <16 x i16>* %28865, align 2, !tbaa !399
  %28866 = zext i32 %.pre-phi3699 to i64
  %28867 = mul nsw i64 %28866, %349
  %28868 = add nsw i64 %28867, %300
  %28869 = getelementptr inbounds i16, i16* %blur_x917, i64 %28868
  %28870 = getelementptr inbounds i16, i16* %28869, i64 -32
  %28871 = bitcast i16* %28870 to <16 x i16>*
  %28872 = load <16 x i16>, <16 x i16>* %28871, align 2, !tbaa !399
  %28873 = getelementptr inbounds i16, i16* %28869, i64 -16
  %28874 = bitcast i16* %28873 to <16 x i16>*
  %28875 = load <16 x i16>, <16 x i16>* %28874, align 2, !tbaa !399
  %28876 = zext i32 %.pre-phi3693 to i64
  %28877 = mul nsw i64 %28876, %349
  %28878 = add nsw i64 %28877, %300
  %28879 = getelementptr inbounds i16, i16* %blur_x917, i64 %28878
  %28880 = getelementptr inbounds i16, i16* %28879, i64 -32
  %28881 = bitcast i16* %28880 to <16 x i16>*
  %28882 = load <16 x i16>, <16 x i16>* %28881, align 2, !tbaa !399
  %28883 = getelementptr inbounds i16, i16* %28879, i64 -16
  %28884 = bitcast i16* %28883 to <16 x i16>*
  %28885 = load <16 x i16>, <16 x i16>* %28884, align 2, !tbaa !399
  %28886 = zext i32 %.pre-phi3669 to i64
  %28887 = mul nsw i64 %28886, %349
  %28888 = add nsw i64 %28887, %300
  %28889 = getelementptr inbounds i16, i16* %blur_x917, i64 %28888
  %28890 = getelementptr inbounds i16, i16* %28889, i64 -32
  %28891 = bitcast i16* %28890 to <16 x i16>*
  %28892 = load <16 x i16>, <16 x i16>* %28891, align 2, !tbaa !399
  %28893 = getelementptr inbounds i16, i16* %28889, i64 -16
  %28894 = bitcast i16* %28893 to <16 x i16>*
  %28895 = load <16 x i16>, <16 x i16>* %28894, align 2, !tbaa !399
  %28896 = zext i32 %.pre-phi3673 to i64
  %28897 = mul nsw i64 %28896, %349
  %28898 = add nsw i64 %28897, %300
  %28899 = getelementptr inbounds i16, i16* %blur_x917, i64 %28898
  %28900 = getelementptr inbounds i16, i16* %28899, i64 -32
  %28901 = bitcast i16* %28900 to <16 x i16>*
  %28902 = load <16 x i16>, <16 x i16>* %28901, align 2, !tbaa !399
  %28903 = getelementptr inbounds i16, i16* %28899, i64 -16
  %28904 = bitcast i16* %28903 to <16 x i16>*
  %28905 = load <16 x i16>, <16 x i16>* %28904, align 2, !tbaa !399
  %28906 = zext i32 %.pre-phi3677 to i64
  %28907 = mul nsw i64 %28906, %349
  %28908 = add nsw i64 %28907, %300
  %28909 = getelementptr inbounds i16, i16* %blur_x917, i64 %28908
  %28910 = getelementptr inbounds i16, i16* %28909, i64 -32
  %28911 = bitcast i16* %28910 to <16 x i16>*
  %28912 = load <16 x i16>, <16 x i16>* %28911, align 2, !tbaa !399
  %28913 = getelementptr inbounds i16, i16* %28909, i64 -16
  %28914 = bitcast i16* %28913 to <16 x i16>*
  %28915 = load <16 x i16>, <16 x i16>* %28914, align 2, !tbaa !399
  %28916 = mul nsw i64 %28857, %349
  %28917 = add nsw i64 %28916, %300
  %28918 = getelementptr inbounds i16, i16* %blur_x917, i64 %28917
  %28919 = getelementptr inbounds i16, i16* %28918, i64 -32
  %28920 = bitcast i16* %28919 to <16 x i16>*
  %28921 = load <16 x i16>, <16 x i16>* %28920, align 2, !tbaa !399
  %28922 = getelementptr inbounds i16, i16* %28918, i64 -16
  %28923 = bitcast i16* %28922 to <16 x i16>*
  %28924 = load <16 x i16>, <16 x i16>* %28923, align 2, !tbaa !399
  %28925 = zext i32 %.pre-phi3681 to i64
  %28926 = mul nsw i64 %28925, %349
  %28927 = add nsw i64 %28926, %300
  %28928 = getelementptr inbounds i16, i16* %blur_x917, i64 %28927
  %28929 = getelementptr inbounds i16, i16* %28928, i64 -32
  %28930 = bitcast i16* %28929 to <16 x i16>*
  %28931 = load <16 x i16>, <16 x i16>* %28930, align 2, !tbaa !399
  %28932 = getelementptr inbounds i16, i16* %28928, i64 -16
  %28933 = bitcast i16* %28932 to <16 x i16>*
  %28934 = load <16 x i16>, <16 x i16>* %28933, align 2, !tbaa !399
  %28935 = add <16 x i16> %28882, %28872
  %28936 = add <16 x i16> %28935, %28892
  %28937 = add <16 x i16> %28936, %28902
  %28938 = add <16 x i16> %28937, %28912
  %28939 = add <16 x i16> %28938, %28921
  %28940 = add <16 x i16> %28939, %28931
  %28941 = add <16 x i16> %28885, %28875
  %28942 = add <16 x i16> %28941, %28895
  %28943 = add <16 x i16> %28942, %28905
  %28944 = add <16 x i16> %28943, %28915
  %28945 = add <16 x i16> %28944, %28924
  %28946 = add <16 x i16> %28945, %28934
  %28947 = shufflevector <16 x i16> %28940, <16 x i16> %28946, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28948 = udiv <32 x i16> %28947, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %28949 = shufflevector <32 x i16> %28948, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28950 = sext i32 %a393 to i64
  %28951 = add nsw i64 %28950, 14
  %28952 = mul nsw i64 %28951, %350
  %28953 = add nsw i64 %352, %28952
  %28954 = getelementptr inbounds i16, i16* %267, i64 %28953
  %28955 = getelementptr inbounds i16, i16* %28954, i64 -32
  %28956 = bitcast i16* %28955 to <16 x i16>*
  store <16 x i16> %28949, <16 x i16>* %28956, align 2, !tbaa !401
  %28957 = shufflevector <32 x i16> %28948, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28958 = getelementptr inbounds i16, i16* %28954, i64 -16
  %28959 = bitcast i16* %28958 to <16 x i16>*
  store <16 x i16> %28957, <16 x i16>* %28959, align 2, !tbaa !401
  br label %after_bb1699

"for blur_y.s0.x.x.rebased1714":                  ; preds = %"for blur_y.s0.x.x.rebased1714.preheader", %"consume blur_x1722"
  %indvars.iv3536 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1714.preheader" ], [ %indvars.iv.next3537, %"consume blur_x1722" ]
  %28960 = add nsw i64 %indvars.iv3536, %307
  %28961 = icmp slt i64 %28960, 1
  %28962 = trunc i64 %28960 to i32
  %28963 = shl nsw i32 %28962, 5
  %28964 = icmp sgt i32 %202, %28963
  %28965 = or i1 %28961, %28964
  br i1 %28965, label %"produce blur_x1720", label %"for blur_y.s0.x.x.rebased1714.consume blur_x1722_crit_edge"

"for blur_y.s0.x.x.rebased1714.consume blur_x1722_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1714"
  %.pre3726 = shl nsw i64 %28960, 5
  br label %"consume blur_x1722"

"end for blur_y.s0.x.x.rebased1715":              ; preds = %"consume blur_x1722", %after_bb1699
  br i1 %308, label %"for blur_y.s0.x.x.rebased1730.preheader", label %"end for blur_y.s0.x.x.rebased1731", !prof !386

"for blur_y.s0.x.x.rebased1730.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1715"
  %28966 = sext i32 %t17501042 to i64
  %28967 = zext i32 %.pre-phi3699 to i64
  %28968 = mul nsw i64 %28967, %353
  %28969 = sub nsw i64 %28968, %302
  %28970 = zext i32 %.pre-phi3693 to i64
  %28971 = mul nsw i64 %28970, %353
  %28972 = sub nsw i64 %28971, %302
  %28973 = zext i32 %.pre-phi3669 to i64
  %28974 = mul nsw i64 %28973, %353
  %28975 = sub nsw i64 %28974, %302
  %28976 = zext i32 %.pre-phi3673 to i64
  %28977 = mul nsw i64 %28976, %353
  %28978 = sub nsw i64 %28977, %302
  %28979 = zext i32 %.pre-phi3677 to i64
  %28980 = mul nsw i64 %28979, %353
  %28981 = sub nsw i64 %28980, %302
  %28982 = zext i32 %.pre-phi3685 to i64
  %28983 = mul nsw i64 %28982, %353
  %28984 = sub nsw i64 %28983, %302
  %28985 = zext i32 %.pre-phi3681 to i64
  %28986 = mul nsw i64 %28985, %353
  %28987 = sub nsw i64 %28986, %302
  %28988 = sext i32 %a393 to i64
  %28989 = add nsw i64 %28988, 14
  %28990 = mul nsw i64 %28989, %350
  %28991 = add nsw i64 %28990, %354
  br label %"for blur_y.s0.x.x.rebased1730"

"produce blur_x1720":                             ; preds = %"for blur_y.s0.x.x.rebased1714"
  %t9761721 = add nsw i32 %437, %28963
  %28992 = sext i32 %t9761721 to i64
  %28993 = getelementptr inbounds i16, i16* %read_input860, i64 %28992
  %28994 = getelementptr inbounds i16, i16* %28993, i64 1
  %28995 = bitcast i16* %28994 to <16 x i16>*
  %28996 = load <16 x i16>, <16 x i16>* %28995, align 2, !tbaa !396
  %28997 = getelementptr inbounds i16, i16* %28993, i64 17
  %28998 = bitcast i16* %28997 to <16 x i16>*
  %28999 = load <16 x i16>, <16 x i16>* %28998, align 2, !tbaa !396
  %29000 = bitcast i16* %28993 to <16 x i16>*
  %29001 = load <16 x i16>, <16 x i16>* %29000, align 2, !tbaa !396
  %29002 = getelementptr inbounds i16, i16* %28993, i64 16
  %29003 = bitcast i16* %29002 to <16 x i16>*
  %29004 = load <16 x i16>, <16 x i16>* %29003, align 2, !tbaa !396
  %29005 = getelementptr inbounds i16, i16* %28993, i64 2
  %29006 = bitcast i16* %29005 to <16 x i16>*
  %29007 = load <16 x i16>, <16 x i16>* %29006, align 2, !tbaa !396
  %29008 = getelementptr inbounds i16, i16* %28993, i64 18
  %29009 = bitcast i16* %29008 to <16 x i16>*
  %29010 = load <16 x i16>, <16 x i16>* %29009, align 2, !tbaa !396
  %29011 = getelementptr inbounds i16, i16* %28993, i64 3
  %29012 = bitcast i16* %29011 to <16 x i16>*
  %29013 = load <16 x i16>, <16 x i16>* %29012, align 2, !tbaa !396
  %29014 = getelementptr inbounds i16, i16* %28993, i64 19
  %29015 = bitcast i16* %29014 to <16 x i16>*
  %29016 = load <16 x i16>, <16 x i16>* %29015, align 2, !tbaa !396
  %29017 = getelementptr inbounds i16, i16* %28993, i64 4
  %29018 = bitcast i16* %29017 to <16 x i16>*
  %29019 = load <16 x i16>, <16 x i16>* %29018, align 2, !tbaa !396
  %29020 = getelementptr inbounds i16, i16* %28993, i64 20
  %29021 = bitcast i16* %29020 to <16 x i16>*
  %29022 = load <16 x i16>, <16 x i16>* %29021, align 2, !tbaa !396
  %29023 = getelementptr inbounds i16, i16* %28993, i64 6
  %29024 = bitcast i16* %29023 to <16 x i16>*
  %29025 = load <16 x i16>, <16 x i16>* %29024, align 2, !tbaa !396
  %29026 = getelementptr inbounds i16, i16* %28993, i64 22
  %29027 = bitcast i16* %29026 to <16 x i16>*
  %29028 = load <16 x i16>, <16 x i16>* %29027, align 2, !tbaa !396
  %29029 = getelementptr inbounds i16, i16* %28993, i64 5
  %29030 = bitcast i16* %29029 to <16 x i16>*
  %29031 = load <16 x i16>, <16 x i16>* %29030, align 2, !tbaa !396
  %29032 = getelementptr inbounds i16, i16* %28993, i64 21
  %29033 = bitcast i16* %29032 to <16 x i16>*
  %29034 = load <16 x i16>, <16 x i16>* %29033, align 2, !tbaa !396
  %29035 = add <16 x i16> %29001, %28996
  %29036 = add <16 x i16> %29035, %29007
  %29037 = add <16 x i16> %29036, %29013
  %29038 = add <16 x i16> %29037, %29019
  %29039 = add <16 x i16> %29038, %29025
  %29040 = add <16 x i16> %29039, %29031
  %29041 = add <16 x i16> %29004, %28999
  %29042 = add <16 x i16> %29041, %29010
  %29043 = add <16 x i16> %29042, %29016
  %29044 = add <16 x i16> %29043, %29022
  %29045 = add <16 x i16> %29044, %29028
  %29046 = add <16 x i16> %29045, %29034
  %29047 = shufflevector <16 x i16> %29040, <16 x i16> %29046, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29048 = udiv <32 x i16> %29047, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %29049 = shufflevector <32 x i16> %29048, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29050 = shl nsw i64 %28960, 5
  %29051 = add nsw i64 %29050, %28773
  %29052 = getelementptr inbounds i16, i16* %blur_x917, i64 %29051
  %29053 = bitcast i16* %29052 to <16 x i16>*
  store <16 x i16> %29049, <16 x i16>* %29053, align 2, !tbaa !399
  %29054 = shufflevector <32 x i16> %29048, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29055 = getelementptr inbounds i16, i16* %29052, i64 16
  %29056 = bitcast i16* %29055 to <16 x i16>*
  store <16 x i16> %29054, <16 x i16>* %29056, align 2, !tbaa !399
  br label %"consume blur_x1722"

"consume blur_x1722":                             ; preds = %"for blur_y.s0.x.x.rebased1714.consume blur_x1722_crit_edge", %"produce blur_x1720"
  %.pre-phi3727 = phi i64 [ %.pre3726, %"for blur_y.s0.x.x.rebased1714.consume blur_x1722_crit_edge" ], [ %29050, %"produce blur_x1720" ]
  %29057 = add nsw i64 %28776, %.pre-phi3727
  %29058 = getelementptr inbounds i16, i16* %blur_x917, i64 %29057
  %29059 = bitcast i16* %29058 to <16 x i16>*
  %29060 = load <16 x i16>, <16 x i16>* %29059, align 2, !tbaa !399
  %29061 = getelementptr inbounds i16, i16* %29058, i64 16
  %29062 = bitcast i16* %29061 to <16 x i16>*
  %29063 = load <16 x i16>, <16 x i16>* %29062, align 2, !tbaa !399
  %29064 = add nsw i64 %28779, %.pre-phi3727
  %29065 = getelementptr inbounds i16, i16* %blur_x917, i64 %29064
  %29066 = bitcast i16* %29065 to <16 x i16>*
  %29067 = load <16 x i16>, <16 x i16>* %29066, align 2, !tbaa !399
  %29068 = getelementptr inbounds i16, i16* %29065, i64 16
  %29069 = bitcast i16* %29068 to <16 x i16>*
  %29070 = load <16 x i16>, <16 x i16>* %29069, align 2, !tbaa !399
  %29071 = add nsw i64 %28782, %.pre-phi3727
  %29072 = getelementptr inbounds i16, i16* %blur_x917, i64 %29071
  %29073 = bitcast i16* %29072 to <16 x i16>*
  %29074 = load <16 x i16>, <16 x i16>* %29073, align 2, !tbaa !399
  %29075 = getelementptr inbounds i16, i16* %29072, i64 16
  %29076 = bitcast i16* %29075 to <16 x i16>*
  %29077 = load <16 x i16>, <16 x i16>* %29076, align 2, !tbaa !399
  %29078 = add nsw i64 %28785, %.pre-phi3727
  %29079 = getelementptr inbounds i16, i16* %blur_x917, i64 %29078
  %29080 = bitcast i16* %29079 to <16 x i16>*
  %29081 = load <16 x i16>, <16 x i16>* %29080, align 2, !tbaa !399
  %29082 = getelementptr inbounds i16, i16* %29079, i64 16
  %29083 = bitcast i16* %29082 to <16 x i16>*
  %29084 = load <16 x i16>, <16 x i16>* %29083, align 2, !tbaa !399
  %29085 = add nsw i64 %28788, %.pre-phi3727
  %29086 = getelementptr inbounds i16, i16* %blur_x917, i64 %29085
  %29087 = bitcast i16* %29086 to <16 x i16>*
  %29088 = load <16 x i16>, <16 x i16>* %29087, align 2, !tbaa !399
  %29089 = getelementptr inbounds i16, i16* %29086, i64 16
  %29090 = bitcast i16* %29089 to <16 x i16>*
  %29091 = load <16 x i16>, <16 x i16>* %29090, align 2, !tbaa !399
  %29092 = add nsw i64 %28791, %.pre-phi3727
  %29093 = getelementptr inbounds i16, i16* %blur_x917, i64 %29092
  %29094 = bitcast i16* %29093 to <16 x i16>*
  %29095 = load <16 x i16>, <16 x i16>* %29094, align 2, !tbaa !399
  %29096 = getelementptr inbounds i16, i16* %29093, i64 16
  %29097 = bitcast i16* %29096 to <16 x i16>*
  %29098 = load <16 x i16>, <16 x i16>* %29097, align 2, !tbaa !399
  %29099 = add nsw i64 %28794, %.pre-phi3727
  %29100 = getelementptr inbounds i16, i16* %blur_x917, i64 %29099
  %29101 = bitcast i16* %29100 to <16 x i16>*
  %29102 = load <16 x i16>, <16 x i16>* %29101, align 2, !tbaa !399
  %29103 = getelementptr inbounds i16, i16* %29100, i64 16
  %29104 = bitcast i16* %29103 to <16 x i16>*
  %29105 = load <16 x i16>, <16 x i16>* %29104, align 2, !tbaa !399
  %29106 = add <16 x i16> %29067, %29060
  %29107 = add <16 x i16> %29106, %29074
  %29108 = add <16 x i16> %29107, %29081
  %29109 = add <16 x i16> %29108, %29088
  %29110 = add <16 x i16> %29109, %29095
  %29111 = add <16 x i16> %29110, %29102
  %29112 = add <16 x i16> %29070, %29063
  %29113 = add <16 x i16> %29112, %29077
  %29114 = add <16 x i16> %29113, %29084
  %29115 = add <16 x i16> %29114, %29091
  %29116 = add <16 x i16> %29115, %29098
  %29117 = add <16 x i16> %29116, %29105
  %29118 = shufflevector <16 x i16> %29111, <16 x i16> %29117, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29119 = udiv <32 x i16> %29118, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %29120 = shufflevector <32 x i16> %29119, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29121 = add nsw i64 %28798, %.pre-phi3727
  %29122 = getelementptr inbounds i16, i16* %267, i64 %29121
  %29123 = bitcast i16* %29122 to <16 x i16>*
  store <16 x i16> %29120, <16 x i16>* %29123, align 2, !tbaa !401
  %29124 = shufflevector <32 x i16> %29119, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29125 = getelementptr inbounds i16, i16* %29122, i64 16
  %29126 = bitcast i16* %29125 to <16 x i16>*
  store <16 x i16> %29124, <16 x i16>* %29126, align 2, !tbaa !401
  %indvars.iv.next3537 = add nuw nsw i64 %indvars.iv3536, 1
  %.not2713 = icmp eq i64 %indvars.iv.next3537, %546
  br i1 %.not2713, label %"end for blur_y.s0.x.x.rebased1715", label %"for blur_y.s0.x.x.rebased1714"

"for blur_y.s0.x.x.rebased1730":                  ; preds = %"for blur_y.s0.x.x.rebased1730.preheader", %"consume blur_x1741"
  %blur_y.s0.x.x.rebased1732 = phi i32 [ %29269, %"consume blur_x1741" ], [ 0, %"for blur_y.s0.x.x.rebased1730.preheader" ]
  %29127 = add nsw i32 %blur_y.s0.x.x.rebased1732, %t1670852
  %a3801 = shl nsw i32 %29127, 5
  %29128 = icmp sgt i32 %t1691, %a3801
  %blur_y.s0.x.v0.base.s1733 = select i1 %29128, i32 %a3801, i32 %t1691
  %29129 = icmp slt i32 %29127, 1
  %29130 = icmp sgt i32 %202, %a3801
  %29131 = or i1 %29129, %29130
  br i1 %29131, label %"produce blur_x1738", label %"consume blur_x1741"

"end for blur_y.s0.x.x.rebased1731":              ; preds = %"consume blur_x1741", %"end for blur_y.s0.x.x.rebased1715"
  br i1 %233, label %"produce blur_x1745", label %after_bb1742

"produce blur_x1738":                             ; preds = %"for blur_y.s0.x.x.rebased1730"
  %29132 = icmp slt i32 %blur_y.s0.x.v0.base.s1733, %202
  %blur_x.s0.x.v1.base.s1739 = select i1 %29132, i32 %blur_y.s0.x.v0.base.s1733, i32 %202
  %t9811740 = add nsw i32 %437, %blur_x.s0.x.v1.base.s1739
  %29133 = sext i32 %t9811740 to i64
  %29134 = getelementptr inbounds i16, i16* %read_input860, i64 %29133
  %29135 = getelementptr inbounds i16, i16* %29134, i64 1
  %29136 = bitcast i16* %29135 to <16 x i16>*
  %29137 = load <16 x i16>, <16 x i16>* %29136, align 2, !tbaa !396
  %29138 = getelementptr inbounds i16, i16* %29134, i64 17
  %29139 = bitcast i16* %29138 to <16 x i16>*
  %29140 = load <16 x i16>, <16 x i16>* %29139, align 2, !tbaa !396
  %29141 = bitcast i16* %29134 to <16 x i16>*
  %29142 = load <16 x i16>, <16 x i16>* %29141, align 2, !tbaa !396
  %29143 = getelementptr inbounds i16, i16* %29134, i64 16
  %29144 = bitcast i16* %29143 to <16 x i16>*
  %29145 = load <16 x i16>, <16 x i16>* %29144, align 2, !tbaa !396
  %29146 = getelementptr inbounds i16, i16* %29134, i64 2
  %29147 = bitcast i16* %29146 to <16 x i16>*
  %29148 = load <16 x i16>, <16 x i16>* %29147, align 2, !tbaa !396
  %29149 = getelementptr inbounds i16, i16* %29134, i64 18
  %29150 = bitcast i16* %29149 to <16 x i16>*
  %29151 = load <16 x i16>, <16 x i16>* %29150, align 2, !tbaa !396
  %29152 = getelementptr inbounds i16, i16* %29134, i64 3
  %29153 = bitcast i16* %29152 to <16 x i16>*
  %29154 = load <16 x i16>, <16 x i16>* %29153, align 2, !tbaa !396
  %29155 = getelementptr inbounds i16, i16* %29134, i64 19
  %29156 = bitcast i16* %29155 to <16 x i16>*
  %29157 = load <16 x i16>, <16 x i16>* %29156, align 2, !tbaa !396
  %29158 = getelementptr inbounds i16, i16* %29134, i64 4
  %29159 = bitcast i16* %29158 to <16 x i16>*
  %29160 = load <16 x i16>, <16 x i16>* %29159, align 2, !tbaa !396
  %29161 = getelementptr inbounds i16, i16* %29134, i64 20
  %29162 = bitcast i16* %29161 to <16 x i16>*
  %29163 = load <16 x i16>, <16 x i16>* %29162, align 2, !tbaa !396
  %29164 = getelementptr inbounds i16, i16* %29134, i64 6
  %29165 = bitcast i16* %29164 to <16 x i16>*
  %29166 = load <16 x i16>, <16 x i16>* %29165, align 2, !tbaa !396
  %29167 = getelementptr inbounds i16, i16* %29134, i64 22
  %29168 = bitcast i16* %29167 to <16 x i16>*
  %29169 = load <16 x i16>, <16 x i16>* %29168, align 2, !tbaa !396
  %29170 = getelementptr inbounds i16, i16* %29134, i64 5
  %29171 = bitcast i16* %29170 to <16 x i16>*
  %29172 = load <16 x i16>, <16 x i16>* %29171, align 2, !tbaa !396
  %29173 = getelementptr inbounds i16, i16* %29134, i64 21
  %29174 = bitcast i16* %29173 to <16 x i16>*
  %29175 = load <16 x i16>, <16 x i16>* %29174, align 2, !tbaa !396
  %29176 = add <16 x i16> %29142, %29137
  %29177 = add <16 x i16> %29176, %29148
  %29178 = add <16 x i16> %29177, %29154
  %29179 = add <16 x i16> %29178, %29160
  %29180 = add <16 x i16> %29179, %29166
  %29181 = add <16 x i16> %29180, %29172
  %29182 = add <16 x i16> %29145, %29140
  %29183 = add <16 x i16> %29182, %29151
  %29184 = add <16 x i16> %29183, %29157
  %29185 = add <16 x i16> %29184, %29163
  %29186 = add <16 x i16> %29185, %29169
  %29187 = add <16 x i16> %29186, %29175
  %29188 = shufflevector <16 x i16> %29181, <16 x i16> %29187, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29189 = udiv <32 x i16> %29188, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %29190 = shufflevector <32 x i16> %29189, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29191 = sext i32 %blur_x.s0.x.v1.base.s1739 to i64
  %29192 = add nsw i64 %29191, %28966
  %29193 = getelementptr inbounds i16, i16* %blur_x917, i64 %29192
  %29194 = bitcast i16* %29193 to <16 x i16>*
  store <16 x i16> %29190, <16 x i16>* %29194, align 2, !tbaa !399
  %29195 = shufflevector <32 x i16> %29189, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29196 = getelementptr inbounds i16, i16* %29193, i64 16
  %29197 = bitcast i16* %29196 to <16 x i16>*
  store <16 x i16> %29195, <16 x i16>* %29197, align 2, !tbaa !399
  br label %"consume blur_x1741"

"consume blur_x1741":                             ; preds = %"for blur_y.s0.x.x.rebased1730", %"produce blur_x1738"
  %29198 = sext i32 %blur_y.s0.x.v0.base.s1733 to i64
  %29199 = add nsw i64 %28969, %29198
  %29200 = getelementptr inbounds i16, i16* %blur_x917, i64 %29199
  %29201 = bitcast i16* %29200 to <16 x i16>*
  %29202 = load <16 x i16>, <16 x i16>* %29201, align 2, !tbaa !399
  %29203 = getelementptr inbounds i16, i16* %29200, i64 16
  %29204 = bitcast i16* %29203 to <16 x i16>*
  %29205 = load <16 x i16>, <16 x i16>* %29204, align 2, !tbaa !399
  %29206 = add nsw i64 %28972, %29198
  %29207 = getelementptr inbounds i16, i16* %blur_x917, i64 %29206
  %29208 = bitcast i16* %29207 to <16 x i16>*
  %29209 = load <16 x i16>, <16 x i16>* %29208, align 2, !tbaa !399
  %29210 = getelementptr inbounds i16, i16* %29207, i64 16
  %29211 = bitcast i16* %29210 to <16 x i16>*
  %29212 = load <16 x i16>, <16 x i16>* %29211, align 2, !tbaa !399
  %29213 = add nsw i64 %28975, %29198
  %29214 = getelementptr inbounds i16, i16* %blur_x917, i64 %29213
  %29215 = bitcast i16* %29214 to <16 x i16>*
  %29216 = load <16 x i16>, <16 x i16>* %29215, align 2, !tbaa !399
  %29217 = getelementptr inbounds i16, i16* %29214, i64 16
  %29218 = bitcast i16* %29217 to <16 x i16>*
  %29219 = load <16 x i16>, <16 x i16>* %29218, align 2, !tbaa !399
  %29220 = add nsw i64 %28978, %29198
  %29221 = getelementptr inbounds i16, i16* %blur_x917, i64 %29220
  %29222 = bitcast i16* %29221 to <16 x i16>*
  %29223 = load <16 x i16>, <16 x i16>* %29222, align 2, !tbaa !399
  %29224 = getelementptr inbounds i16, i16* %29221, i64 16
  %29225 = bitcast i16* %29224 to <16 x i16>*
  %29226 = load <16 x i16>, <16 x i16>* %29225, align 2, !tbaa !399
  %29227 = add nsw i64 %28981, %29198
  %29228 = getelementptr inbounds i16, i16* %blur_x917, i64 %29227
  %29229 = bitcast i16* %29228 to <16 x i16>*
  %29230 = load <16 x i16>, <16 x i16>* %29229, align 2, !tbaa !399
  %29231 = getelementptr inbounds i16, i16* %29228, i64 16
  %29232 = bitcast i16* %29231 to <16 x i16>*
  %29233 = load <16 x i16>, <16 x i16>* %29232, align 2, !tbaa !399
  %29234 = add nsw i64 %28984, %29198
  %29235 = getelementptr inbounds i16, i16* %blur_x917, i64 %29234
  %29236 = bitcast i16* %29235 to <16 x i16>*
  %29237 = load <16 x i16>, <16 x i16>* %29236, align 2, !tbaa !399
  %29238 = getelementptr inbounds i16, i16* %29235, i64 16
  %29239 = bitcast i16* %29238 to <16 x i16>*
  %29240 = load <16 x i16>, <16 x i16>* %29239, align 2, !tbaa !399
  %29241 = add nsw i64 %28987, %29198
  %29242 = getelementptr inbounds i16, i16* %blur_x917, i64 %29241
  %29243 = bitcast i16* %29242 to <16 x i16>*
  %29244 = load <16 x i16>, <16 x i16>* %29243, align 2, !tbaa !399
  %29245 = getelementptr inbounds i16, i16* %29242, i64 16
  %29246 = bitcast i16* %29245 to <16 x i16>*
  %29247 = load <16 x i16>, <16 x i16>* %29246, align 2, !tbaa !399
  %29248 = add <16 x i16> %29209, %29202
  %29249 = add <16 x i16> %29248, %29216
  %29250 = add <16 x i16> %29249, %29223
  %29251 = add <16 x i16> %29250, %29230
  %29252 = add <16 x i16> %29251, %29237
  %29253 = add <16 x i16> %29252, %29244
  %29254 = add <16 x i16> %29212, %29205
  %29255 = add <16 x i16> %29254, %29219
  %29256 = add <16 x i16> %29255, %29226
  %29257 = add <16 x i16> %29256, %29233
  %29258 = add <16 x i16> %29257, %29240
  %29259 = add <16 x i16> %29258, %29247
  %29260 = shufflevector <16 x i16> %29253, <16 x i16> %29259, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29261 = udiv <32 x i16> %29260, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %29262 = shufflevector <32 x i16> %29261, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29263 = add nsw i64 %28991, %29198
  %29264 = getelementptr inbounds i16, i16* %267, i64 %29263
  %29265 = bitcast i16* %29264 to <16 x i16>*
  store <16 x i16> %29262, <16 x i16>* %29265, align 2, !tbaa !401
  %29266 = shufflevector <32 x i16> %29261, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29267 = getelementptr inbounds i16, i16* %29264, i64 16
  %29268 = bitcast i16* %29267 to <16 x i16>*
  store <16 x i16> %29266, <16 x i16>* %29268, align 2, !tbaa !401
  %29269 = add nuw nsw i32 %blur_y.s0.x.x.rebased1732, 1
  %.not2712 = icmp eq i32 %29269, %t1727936
  br i1 %.not2712, label %"end for blur_y.s0.x.x.rebased1731", label %"for blur_y.s0.x.x.rebased1730"

after_bb1742:                                     ; preds = %"end for blur_y.s0.x.x.rebased1731", %"produce blur_x1745"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1757.preheader", label %"end for blur_y.s0.x.x.rebased1758", !prof !386

"for blur_y.s0.x.x.rebased1757.preheader":        ; preds = %after_bb1742
  %29270 = sext i32 %t17561072 to i64
  %29271 = zext i32 %.pre-phi3669 to i64
  %29272 = mul nsw i64 %29271, %353
  %29273 = sub nsw i64 %29272, %302
  %29274 = zext i32 %.pre-phi3699 to i64
  %29275 = mul nsw i64 %29274, %353
  %29276 = sub nsw i64 %29275, %302
  %29277 = zext i32 %.pre-phi3673 to i64
  %29278 = mul nsw i64 %29277, %353
  %29279 = sub nsw i64 %29278, %302
  %29280 = zext i32 %.pre-phi3677 to i64
  %29281 = mul nsw i64 %29280, %353
  %29282 = sub nsw i64 %29281, %302
  %29283 = zext i32 %.pre-phi3681 to i64
  %29284 = mul nsw i64 %29283, %353
  %29285 = sub nsw i64 %29284, %302
  %29286 = zext i32 %.pre-phi3689 to i64
  %29287 = mul nsw i64 %29286, %353
  %29288 = sub nsw i64 %29287, %302
  %29289 = zext i32 %.pre-phi3685 to i64
  %29290 = mul nsw i64 %29289, %353
  %29291 = sub nsw i64 %29290, %302
  %29292 = sext i32 %a393 to i64
  %29293 = add nsw i64 %29292, 15
  %29294 = mul nsw i64 %29293, %350
  %29295 = add nsw i64 %29294, %354
  br label %"for blur_y.s0.x.x.rebased1757"

"produce blur_x1745":                             ; preds = %"end for blur_y.s0.x.x.rebased1731"
  %29296 = getelementptr inbounds i16, i16* %read_input860, i64 %441
  %29297 = getelementptr inbounds i16, i16* %29296, i64 -31
  %29298 = bitcast i16* %29297 to <16 x i16>*
  %29299 = load <16 x i16>, <16 x i16>* %29298, align 2, !tbaa !396
  %29300 = getelementptr inbounds i16, i16* %29296, i64 -15
  %29301 = bitcast i16* %29300 to <16 x i16>*
  %29302 = load <16 x i16>, <16 x i16>* %29301, align 2, !tbaa !396
  %29303 = getelementptr inbounds i16, i16* %29296, i64 -32
  %29304 = bitcast i16* %29303 to <16 x i16>*
  %29305 = load <16 x i16>, <16 x i16>* %29304, align 2, !tbaa !396
  %29306 = getelementptr inbounds i16, i16* %29296, i64 -16
  %29307 = bitcast i16* %29306 to <16 x i16>*
  %29308 = load <16 x i16>, <16 x i16>* %29307, align 2, !tbaa !396
  %29309 = getelementptr inbounds i16, i16* %29296, i64 -30
  %29310 = bitcast i16* %29309 to <16 x i16>*
  %29311 = load <16 x i16>, <16 x i16>* %29310, align 2, !tbaa !396
  %29312 = getelementptr inbounds i16, i16* %29296, i64 -14
  %29313 = bitcast i16* %29312 to <16 x i16>*
  %29314 = load <16 x i16>, <16 x i16>* %29313, align 2, !tbaa !396
  %29315 = getelementptr inbounds i16, i16* %29296, i64 -29
  %29316 = bitcast i16* %29315 to <16 x i16>*
  %29317 = load <16 x i16>, <16 x i16>* %29316, align 2, !tbaa !396
  %29318 = getelementptr inbounds i16, i16* %29296, i64 -13
  %29319 = bitcast i16* %29318 to <16 x i16>*
  %29320 = load <16 x i16>, <16 x i16>* %29319, align 2, !tbaa !396
  %29321 = getelementptr inbounds i16, i16* %29296, i64 -28
  %29322 = bitcast i16* %29321 to <16 x i16>*
  %29323 = load <16 x i16>, <16 x i16>* %29322, align 2, !tbaa !396
  %29324 = getelementptr inbounds i16, i16* %29296, i64 -12
  %29325 = bitcast i16* %29324 to <16 x i16>*
  %29326 = load <16 x i16>, <16 x i16>* %29325, align 2, !tbaa !396
  %29327 = getelementptr inbounds i16, i16* %29296, i64 -26
  %29328 = bitcast i16* %29327 to <16 x i16>*
  %29329 = load <16 x i16>, <16 x i16>* %29328, align 2, !tbaa !396
  %29330 = getelementptr inbounds i16, i16* %29296, i64 -10
  %29331 = bitcast i16* %29330 to <16 x i16>*
  %29332 = load <16 x i16>, <16 x i16>* %29331, align 2, !tbaa !396
  %29333 = getelementptr inbounds i16, i16* %29296, i64 -27
  %29334 = bitcast i16* %29333 to <16 x i16>*
  %29335 = load <16 x i16>, <16 x i16>* %29334, align 2, !tbaa !396
  %29336 = getelementptr inbounds i16, i16* %29296, i64 -11
  %29337 = bitcast i16* %29336 to <16 x i16>*
  %29338 = load <16 x i16>, <16 x i16>* %29337, align 2, !tbaa !396
  %29339 = add <16 x i16> %29305, %29299
  %29340 = add <16 x i16> %29339, %29311
  %29341 = add <16 x i16> %29340, %29317
  %29342 = add <16 x i16> %29341, %29323
  %29343 = add <16 x i16> %29342, %29329
  %29344 = add <16 x i16> %29343, %29335
  %29345 = add <16 x i16> %29308, %29302
  %29346 = add <16 x i16> %29345, %29314
  %29347 = add <16 x i16> %29346, %29320
  %29348 = add <16 x i16> %29347, %29326
  %29349 = add <16 x i16> %29348, %29332
  %29350 = add <16 x i16> %29349, %29338
  %29351 = shufflevector <16 x i16> %29344, <16 x i16> %29350, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29352 = udiv <32 x i16> %29351, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %29353 = shufflevector <32 x i16> %29352, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29354 = zext i32 %.pre-phi3689 to i64
  %29355 = mul nsw i64 %303, %29354
  %29356 = add nsw i64 %305, %29355
  %29357 = getelementptr inbounds i16, i16* %blur_x917, i64 %29356
  %29358 = getelementptr inbounds i16, i16* %29357, i64 -32
  %29359 = bitcast i16* %29358 to <16 x i16>*
  store <16 x i16> %29353, <16 x i16>* %29359, align 2, !tbaa !399
  %29360 = shufflevector <32 x i16> %29352, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29361 = getelementptr inbounds i16, i16* %29357, i64 -16
  %29362 = bitcast i16* %29361 to <16 x i16>*
  store <16 x i16> %29360, <16 x i16>* %29362, align 2, !tbaa !399
  %29363 = zext i32 %.pre-phi3669 to i64
  %29364 = mul nsw i64 %29363, %349
  %29365 = add nsw i64 %29364, %300
  %29366 = getelementptr inbounds i16, i16* %blur_x917, i64 %29365
  %29367 = getelementptr inbounds i16, i16* %29366, i64 -32
  %29368 = bitcast i16* %29367 to <16 x i16>*
  %29369 = load <16 x i16>, <16 x i16>* %29368, align 2, !tbaa !399
  %29370 = getelementptr inbounds i16, i16* %29366, i64 -16
  %29371 = bitcast i16* %29370 to <16 x i16>*
  %29372 = load <16 x i16>, <16 x i16>* %29371, align 2, !tbaa !399
  %29373 = zext i32 %.pre-phi3699 to i64
  %29374 = mul nsw i64 %29373, %349
  %29375 = add nsw i64 %29374, %300
  %29376 = getelementptr inbounds i16, i16* %blur_x917, i64 %29375
  %29377 = getelementptr inbounds i16, i16* %29376, i64 -32
  %29378 = bitcast i16* %29377 to <16 x i16>*
  %29379 = load <16 x i16>, <16 x i16>* %29378, align 2, !tbaa !399
  %29380 = getelementptr inbounds i16, i16* %29376, i64 -16
  %29381 = bitcast i16* %29380 to <16 x i16>*
  %29382 = load <16 x i16>, <16 x i16>* %29381, align 2, !tbaa !399
  %29383 = zext i32 %.pre-phi3673 to i64
  %29384 = mul nsw i64 %29383, %349
  %29385 = add nsw i64 %29384, %300
  %29386 = getelementptr inbounds i16, i16* %blur_x917, i64 %29385
  %29387 = getelementptr inbounds i16, i16* %29386, i64 -32
  %29388 = bitcast i16* %29387 to <16 x i16>*
  %29389 = load <16 x i16>, <16 x i16>* %29388, align 2, !tbaa !399
  %29390 = getelementptr inbounds i16, i16* %29386, i64 -16
  %29391 = bitcast i16* %29390 to <16 x i16>*
  %29392 = load <16 x i16>, <16 x i16>* %29391, align 2, !tbaa !399
  %29393 = zext i32 %.pre-phi3677 to i64
  %29394 = mul nsw i64 %29393, %349
  %29395 = add nsw i64 %29394, %300
  %29396 = getelementptr inbounds i16, i16* %blur_x917, i64 %29395
  %29397 = getelementptr inbounds i16, i16* %29396, i64 -32
  %29398 = bitcast i16* %29397 to <16 x i16>*
  %29399 = load <16 x i16>, <16 x i16>* %29398, align 2, !tbaa !399
  %29400 = getelementptr inbounds i16, i16* %29396, i64 -16
  %29401 = bitcast i16* %29400 to <16 x i16>*
  %29402 = load <16 x i16>, <16 x i16>* %29401, align 2, !tbaa !399
  %29403 = zext i32 %.pre-phi3681 to i64
  %29404 = mul nsw i64 %29403, %349
  %29405 = add nsw i64 %29404, %300
  %29406 = getelementptr inbounds i16, i16* %blur_x917, i64 %29405
  %29407 = getelementptr inbounds i16, i16* %29406, i64 -32
  %29408 = bitcast i16* %29407 to <16 x i16>*
  %29409 = load <16 x i16>, <16 x i16>* %29408, align 2, !tbaa !399
  %29410 = getelementptr inbounds i16, i16* %29406, i64 -16
  %29411 = bitcast i16* %29410 to <16 x i16>*
  %29412 = load <16 x i16>, <16 x i16>* %29411, align 2, !tbaa !399
  %29413 = mul nsw i64 %29354, %349
  %29414 = add nsw i64 %29413, %300
  %29415 = getelementptr inbounds i16, i16* %blur_x917, i64 %29414
  %29416 = getelementptr inbounds i16, i16* %29415, i64 -32
  %29417 = bitcast i16* %29416 to <16 x i16>*
  %29418 = load <16 x i16>, <16 x i16>* %29417, align 2, !tbaa !399
  %29419 = getelementptr inbounds i16, i16* %29415, i64 -16
  %29420 = bitcast i16* %29419 to <16 x i16>*
  %29421 = load <16 x i16>, <16 x i16>* %29420, align 2, !tbaa !399
  %29422 = zext i32 %.pre-phi3685 to i64
  %29423 = mul nsw i64 %29422, %349
  %29424 = add nsw i64 %29423, %300
  %29425 = getelementptr inbounds i16, i16* %blur_x917, i64 %29424
  %29426 = getelementptr inbounds i16, i16* %29425, i64 -32
  %29427 = bitcast i16* %29426 to <16 x i16>*
  %29428 = load <16 x i16>, <16 x i16>* %29427, align 2, !tbaa !399
  %29429 = getelementptr inbounds i16, i16* %29425, i64 -16
  %29430 = bitcast i16* %29429 to <16 x i16>*
  %29431 = load <16 x i16>, <16 x i16>* %29430, align 2, !tbaa !399
  %29432 = add <16 x i16> %29379, %29369
  %29433 = add <16 x i16> %29432, %29389
  %29434 = add <16 x i16> %29433, %29399
  %29435 = add <16 x i16> %29434, %29409
  %29436 = add <16 x i16> %29435, %29418
  %29437 = add <16 x i16> %29436, %29428
  %29438 = add <16 x i16> %29382, %29372
  %29439 = add <16 x i16> %29438, %29392
  %29440 = add <16 x i16> %29439, %29402
  %29441 = add <16 x i16> %29440, %29412
  %29442 = add <16 x i16> %29441, %29421
  %29443 = add <16 x i16> %29442, %29431
  %29444 = shufflevector <16 x i16> %29437, <16 x i16> %29443, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29445 = udiv <32 x i16> %29444, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %29446 = shufflevector <32 x i16> %29445, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29447 = sext i32 %a393 to i64
  %29448 = add nsw i64 %29447, 15
  %29449 = mul nsw i64 %29448, %350
  %29450 = add nsw i64 %352, %29449
  %29451 = getelementptr inbounds i16, i16* %267, i64 %29450
  %29452 = getelementptr inbounds i16, i16* %29451, i64 -32
  %29453 = bitcast i16* %29452 to <16 x i16>*
  store <16 x i16> %29446, <16 x i16>* %29453, align 2, !tbaa !401
  %29454 = shufflevector <32 x i16> %29445, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29455 = getelementptr inbounds i16, i16* %29451, i64 -16
  %29456 = bitcast i16* %29455 to <16 x i16>*
  store <16 x i16> %29454, <16 x i16>* %29456, align 2, !tbaa !401
  br label %after_bb1742

"for blur_y.s0.x.x.rebased1757":                  ; preds = %"for blur_y.s0.x.x.rebased1757.preheader", %"consume blur_x1765"
  %indvars.iv3538 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1757.preheader" ], [ %indvars.iv.next3539, %"consume blur_x1765" ]
  %29457 = add nsw i64 %indvars.iv3538, %307
  %29458 = icmp slt i64 %29457, 1
  %29459 = trunc i64 %29457 to i32
  %29460 = shl nsw i32 %29459, 5
  %29461 = icmp sgt i32 %202, %29460
  %29462 = or i1 %29458, %29461
  br i1 %29462, label %"produce blur_x1763", label %"for blur_y.s0.x.x.rebased1757.consume blur_x1765_crit_edge"

"for blur_y.s0.x.x.rebased1757.consume blur_x1765_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1757"
  %.pre3728 = shl nsw i64 %29457, 5
  br label %"consume blur_x1765"

"end for blur_y.s0.x.x.rebased1758":              ; preds = %"consume blur_x1765", %after_bb1742
  br i1 %308, label %"for blur_y.s0.x.x.rebased1773.preheader", label %"end for blur_y.s0.x.x.rebased1774", !prof !386

"for blur_y.s0.x.x.rebased1773.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1758"
  %29463 = sext i32 %t17561072 to i64
  %29464 = zext i32 %.pre-phi3669 to i64
  %29465 = mul nsw i64 %29464, %353
  %29466 = sub nsw i64 %29465, %302
  %29467 = zext i32 %.pre-phi3699 to i64
  %29468 = mul nsw i64 %29467, %353
  %29469 = sub nsw i64 %29468, %302
  %29470 = zext i32 %.pre-phi3673 to i64
  %29471 = mul nsw i64 %29470, %353
  %29472 = sub nsw i64 %29471, %302
  %29473 = zext i32 %.pre-phi3677 to i64
  %29474 = mul nsw i64 %29473, %353
  %29475 = sub nsw i64 %29474, %302
  %29476 = zext i32 %.pre-phi3681 to i64
  %29477 = mul nsw i64 %29476, %353
  %29478 = sub nsw i64 %29477, %302
  %29479 = zext i32 %.pre-phi3689 to i64
  %29480 = mul nsw i64 %29479, %353
  %29481 = sub nsw i64 %29480, %302
  %29482 = zext i32 %.pre-phi3685 to i64
  %29483 = mul nsw i64 %29482, %353
  %29484 = sub nsw i64 %29483, %302
  %29485 = sext i32 %a393 to i64
  %29486 = add nsw i64 %29485, 15
  %29487 = mul nsw i64 %29486, %350
  %29488 = add nsw i64 %29487, %354
  br label %"for blur_y.s0.x.x.rebased1773"

"produce blur_x1763":                             ; preds = %"for blur_y.s0.x.x.rebased1757"
  %t9921764 = add nsw i32 %443, %29460
  %29489 = sext i32 %t9921764 to i64
  %29490 = getelementptr inbounds i16, i16* %read_input860, i64 %29489
  %29491 = getelementptr inbounds i16, i16* %29490, i64 1
  %29492 = bitcast i16* %29491 to <16 x i16>*
  %29493 = load <16 x i16>, <16 x i16>* %29492, align 2, !tbaa !396
  %29494 = getelementptr inbounds i16, i16* %29490, i64 17
  %29495 = bitcast i16* %29494 to <16 x i16>*
  %29496 = load <16 x i16>, <16 x i16>* %29495, align 2, !tbaa !396
  %29497 = bitcast i16* %29490 to <16 x i16>*
  %29498 = load <16 x i16>, <16 x i16>* %29497, align 2, !tbaa !396
  %29499 = getelementptr inbounds i16, i16* %29490, i64 16
  %29500 = bitcast i16* %29499 to <16 x i16>*
  %29501 = load <16 x i16>, <16 x i16>* %29500, align 2, !tbaa !396
  %29502 = getelementptr inbounds i16, i16* %29490, i64 2
  %29503 = bitcast i16* %29502 to <16 x i16>*
  %29504 = load <16 x i16>, <16 x i16>* %29503, align 2, !tbaa !396
  %29505 = getelementptr inbounds i16, i16* %29490, i64 18
  %29506 = bitcast i16* %29505 to <16 x i16>*
  %29507 = load <16 x i16>, <16 x i16>* %29506, align 2, !tbaa !396
  %29508 = getelementptr inbounds i16, i16* %29490, i64 3
  %29509 = bitcast i16* %29508 to <16 x i16>*
  %29510 = load <16 x i16>, <16 x i16>* %29509, align 2, !tbaa !396
  %29511 = getelementptr inbounds i16, i16* %29490, i64 19
  %29512 = bitcast i16* %29511 to <16 x i16>*
  %29513 = load <16 x i16>, <16 x i16>* %29512, align 2, !tbaa !396
  %29514 = getelementptr inbounds i16, i16* %29490, i64 4
  %29515 = bitcast i16* %29514 to <16 x i16>*
  %29516 = load <16 x i16>, <16 x i16>* %29515, align 2, !tbaa !396
  %29517 = getelementptr inbounds i16, i16* %29490, i64 20
  %29518 = bitcast i16* %29517 to <16 x i16>*
  %29519 = load <16 x i16>, <16 x i16>* %29518, align 2, !tbaa !396
  %29520 = getelementptr inbounds i16, i16* %29490, i64 6
  %29521 = bitcast i16* %29520 to <16 x i16>*
  %29522 = load <16 x i16>, <16 x i16>* %29521, align 2, !tbaa !396
  %29523 = getelementptr inbounds i16, i16* %29490, i64 22
  %29524 = bitcast i16* %29523 to <16 x i16>*
  %29525 = load <16 x i16>, <16 x i16>* %29524, align 2, !tbaa !396
  %29526 = getelementptr inbounds i16, i16* %29490, i64 5
  %29527 = bitcast i16* %29526 to <16 x i16>*
  %29528 = load <16 x i16>, <16 x i16>* %29527, align 2, !tbaa !396
  %29529 = getelementptr inbounds i16, i16* %29490, i64 21
  %29530 = bitcast i16* %29529 to <16 x i16>*
  %29531 = load <16 x i16>, <16 x i16>* %29530, align 2, !tbaa !396
  %29532 = add <16 x i16> %29498, %29493
  %29533 = add <16 x i16> %29532, %29504
  %29534 = add <16 x i16> %29533, %29510
  %29535 = add <16 x i16> %29534, %29516
  %29536 = add <16 x i16> %29535, %29522
  %29537 = add <16 x i16> %29536, %29528
  %29538 = add <16 x i16> %29501, %29496
  %29539 = add <16 x i16> %29538, %29507
  %29540 = add <16 x i16> %29539, %29513
  %29541 = add <16 x i16> %29540, %29519
  %29542 = add <16 x i16> %29541, %29525
  %29543 = add <16 x i16> %29542, %29531
  %29544 = shufflevector <16 x i16> %29537, <16 x i16> %29543, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29545 = udiv <32 x i16> %29544, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %29546 = shufflevector <32 x i16> %29545, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29547 = shl nsw i64 %29457, 5
  %29548 = add nsw i64 %29547, %29270
  %29549 = getelementptr inbounds i16, i16* %blur_x917, i64 %29548
  %29550 = bitcast i16* %29549 to <16 x i16>*
  store <16 x i16> %29546, <16 x i16>* %29550, align 2, !tbaa !399
  %29551 = shufflevector <32 x i16> %29545, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29552 = getelementptr inbounds i16, i16* %29549, i64 16
  %29553 = bitcast i16* %29552 to <16 x i16>*
  store <16 x i16> %29551, <16 x i16>* %29553, align 2, !tbaa !399
  br label %"consume blur_x1765"

"consume blur_x1765":                             ; preds = %"for blur_y.s0.x.x.rebased1757.consume blur_x1765_crit_edge", %"produce blur_x1763"
  %.pre-phi3729 = phi i64 [ %.pre3728, %"for blur_y.s0.x.x.rebased1757.consume blur_x1765_crit_edge" ], [ %29547, %"produce blur_x1763" ]
  %29554 = add nsw i64 %29273, %.pre-phi3729
  %29555 = getelementptr inbounds i16, i16* %blur_x917, i64 %29554
  %29556 = bitcast i16* %29555 to <16 x i16>*
  %29557 = load <16 x i16>, <16 x i16>* %29556, align 2, !tbaa !399
  %29558 = getelementptr inbounds i16, i16* %29555, i64 16
  %29559 = bitcast i16* %29558 to <16 x i16>*
  %29560 = load <16 x i16>, <16 x i16>* %29559, align 2, !tbaa !399
  %29561 = add nsw i64 %29276, %.pre-phi3729
  %29562 = getelementptr inbounds i16, i16* %blur_x917, i64 %29561
  %29563 = bitcast i16* %29562 to <16 x i16>*
  %29564 = load <16 x i16>, <16 x i16>* %29563, align 2, !tbaa !399
  %29565 = getelementptr inbounds i16, i16* %29562, i64 16
  %29566 = bitcast i16* %29565 to <16 x i16>*
  %29567 = load <16 x i16>, <16 x i16>* %29566, align 2, !tbaa !399
  %29568 = add nsw i64 %29279, %.pre-phi3729
  %29569 = getelementptr inbounds i16, i16* %blur_x917, i64 %29568
  %29570 = bitcast i16* %29569 to <16 x i16>*
  %29571 = load <16 x i16>, <16 x i16>* %29570, align 2, !tbaa !399
  %29572 = getelementptr inbounds i16, i16* %29569, i64 16
  %29573 = bitcast i16* %29572 to <16 x i16>*
  %29574 = load <16 x i16>, <16 x i16>* %29573, align 2, !tbaa !399
  %29575 = add nsw i64 %29282, %.pre-phi3729
  %29576 = getelementptr inbounds i16, i16* %blur_x917, i64 %29575
  %29577 = bitcast i16* %29576 to <16 x i16>*
  %29578 = load <16 x i16>, <16 x i16>* %29577, align 2, !tbaa !399
  %29579 = getelementptr inbounds i16, i16* %29576, i64 16
  %29580 = bitcast i16* %29579 to <16 x i16>*
  %29581 = load <16 x i16>, <16 x i16>* %29580, align 2, !tbaa !399
  %29582 = add nsw i64 %29285, %.pre-phi3729
  %29583 = getelementptr inbounds i16, i16* %blur_x917, i64 %29582
  %29584 = bitcast i16* %29583 to <16 x i16>*
  %29585 = load <16 x i16>, <16 x i16>* %29584, align 2, !tbaa !399
  %29586 = getelementptr inbounds i16, i16* %29583, i64 16
  %29587 = bitcast i16* %29586 to <16 x i16>*
  %29588 = load <16 x i16>, <16 x i16>* %29587, align 2, !tbaa !399
  %29589 = add nsw i64 %29288, %.pre-phi3729
  %29590 = getelementptr inbounds i16, i16* %blur_x917, i64 %29589
  %29591 = bitcast i16* %29590 to <16 x i16>*
  %29592 = load <16 x i16>, <16 x i16>* %29591, align 2, !tbaa !399
  %29593 = getelementptr inbounds i16, i16* %29590, i64 16
  %29594 = bitcast i16* %29593 to <16 x i16>*
  %29595 = load <16 x i16>, <16 x i16>* %29594, align 2, !tbaa !399
  %29596 = add nsw i64 %29291, %.pre-phi3729
  %29597 = getelementptr inbounds i16, i16* %blur_x917, i64 %29596
  %29598 = bitcast i16* %29597 to <16 x i16>*
  %29599 = load <16 x i16>, <16 x i16>* %29598, align 2, !tbaa !399
  %29600 = getelementptr inbounds i16, i16* %29597, i64 16
  %29601 = bitcast i16* %29600 to <16 x i16>*
  %29602 = load <16 x i16>, <16 x i16>* %29601, align 2, !tbaa !399
  %29603 = add <16 x i16> %29564, %29557
  %29604 = add <16 x i16> %29603, %29571
  %29605 = add <16 x i16> %29604, %29578
  %29606 = add <16 x i16> %29605, %29585
  %29607 = add <16 x i16> %29606, %29592
  %29608 = add <16 x i16> %29607, %29599
  %29609 = add <16 x i16> %29567, %29560
  %29610 = add <16 x i16> %29609, %29574
  %29611 = add <16 x i16> %29610, %29581
  %29612 = add <16 x i16> %29611, %29588
  %29613 = add <16 x i16> %29612, %29595
  %29614 = add <16 x i16> %29613, %29602
  %29615 = shufflevector <16 x i16> %29608, <16 x i16> %29614, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29616 = udiv <32 x i16> %29615, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %29617 = shufflevector <32 x i16> %29616, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29618 = add nsw i64 %29295, %.pre-phi3729
  %29619 = getelementptr inbounds i16, i16* %267, i64 %29618
  %29620 = bitcast i16* %29619 to <16 x i16>*
  store <16 x i16> %29617, <16 x i16>* %29620, align 2, !tbaa !401
  %29621 = shufflevector <32 x i16> %29616, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29622 = getelementptr inbounds i16, i16* %29619, i64 16
  %29623 = bitcast i16* %29622 to <16 x i16>*
  store <16 x i16> %29621, <16 x i16>* %29623, align 2, !tbaa !401
  %indvars.iv.next3539 = add nuw nsw i64 %indvars.iv3538, 1
  %.not2709 = icmp eq i64 %indvars.iv.next3539, %546
  br i1 %.not2709, label %"end for blur_y.s0.x.x.rebased1758", label %"for blur_y.s0.x.x.rebased1757"

"for blur_y.s0.x.x.rebased1773":                  ; preds = %"for blur_y.s0.x.x.rebased1773.preheader", %"consume blur_x1784"
  %blur_y.s0.x.x.rebased1775 = phi i32 [ %29766, %"consume blur_x1784" ], [ 0, %"for blur_y.s0.x.x.rebased1773.preheader" ]
  %29624 = add nsw i32 %blur_y.s0.x.x.rebased1775, %t1670852
  %a3958 = shl nsw i32 %29624, 5
  %29625 = icmp sgt i32 %t1691, %a3958
  %blur_y.s0.x.v0.base.s1776 = select i1 %29625, i32 %a3958, i32 %t1691
  %29626 = icmp slt i32 %29624, 1
  %29627 = icmp sgt i32 %202, %a3958
  %29628 = or i1 %29626, %29627
  br i1 %29628, label %"produce blur_x1781", label %"consume blur_x1784"

"end for blur_y.s0.x.x.rebased1774":              ; preds = %"consume blur_x1784", %"end for blur_y.s0.x.x.rebased1758"
  br i1 %233, label %"produce blur_x1788", label %after_bb1785

"produce blur_x1781":                             ; preds = %"for blur_y.s0.x.x.rebased1773"
  %29629 = icmp slt i32 %blur_y.s0.x.v0.base.s1776, %202
  %blur_x.s0.x.v1.base.s1782 = select i1 %29629, i32 %blur_y.s0.x.v0.base.s1776, i32 %202
  %t9971783 = add nsw i32 %443, %blur_x.s0.x.v1.base.s1782
  %29630 = sext i32 %t9971783 to i64
  %29631 = getelementptr inbounds i16, i16* %read_input860, i64 %29630
  %29632 = getelementptr inbounds i16, i16* %29631, i64 1
  %29633 = bitcast i16* %29632 to <16 x i16>*
  %29634 = load <16 x i16>, <16 x i16>* %29633, align 2, !tbaa !396
  %29635 = getelementptr inbounds i16, i16* %29631, i64 17
  %29636 = bitcast i16* %29635 to <16 x i16>*
  %29637 = load <16 x i16>, <16 x i16>* %29636, align 2, !tbaa !396
  %29638 = bitcast i16* %29631 to <16 x i16>*
  %29639 = load <16 x i16>, <16 x i16>* %29638, align 2, !tbaa !396
  %29640 = getelementptr inbounds i16, i16* %29631, i64 16
  %29641 = bitcast i16* %29640 to <16 x i16>*
  %29642 = load <16 x i16>, <16 x i16>* %29641, align 2, !tbaa !396
  %29643 = getelementptr inbounds i16, i16* %29631, i64 2
  %29644 = bitcast i16* %29643 to <16 x i16>*
  %29645 = load <16 x i16>, <16 x i16>* %29644, align 2, !tbaa !396
  %29646 = getelementptr inbounds i16, i16* %29631, i64 18
  %29647 = bitcast i16* %29646 to <16 x i16>*
  %29648 = load <16 x i16>, <16 x i16>* %29647, align 2, !tbaa !396
  %29649 = getelementptr inbounds i16, i16* %29631, i64 3
  %29650 = bitcast i16* %29649 to <16 x i16>*
  %29651 = load <16 x i16>, <16 x i16>* %29650, align 2, !tbaa !396
  %29652 = getelementptr inbounds i16, i16* %29631, i64 19
  %29653 = bitcast i16* %29652 to <16 x i16>*
  %29654 = load <16 x i16>, <16 x i16>* %29653, align 2, !tbaa !396
  %29655 = getelementptr inbounds i16, i16* %29631, i64 4
  %29656 = bitcast i16* %29655 to <16 x i16>*
  %29657 = load <16 x i16>, <16 x i16>* %29656, align 2, !tbaa !396
  %29658 = getelementptr inbounds i16, i16* %29631, i64 20
  %29659 = bitcast i16* %29658 to <16 x i16>*
  %29660 = load <16 x i16>, <16 x i16>* %29659, align 2, !tbaa !396
  %29661 = getelementptr inbounds i16, i16* %29631, i64 6
  %29662 = bitcast i16* %29661 to <16 x i16>*
  %29663 = load <16 x i16>, <16 x i16>* %29662, align 2, !tbaa !396
  %29664 = getelementptr inbounds i16, i16* %29631, i64 22
  %29665 = bitcast i16* %29664 to <16 x i16>*
  %29666 = load <16 x i16>, <16 x i16>* %29665, align 2, !tbaa !396
  %29667 = getelementptr inbounds i16, i16* %29631, i64 5
  %29668 = bitcast i16* %29667 to <16 x i16>*
  %29669 = load <16 x i16>, <16 x i16>* %29668, align 2, !tbaa !396
  %29670 = getelementptr inbounds i16, i16* %29631, i64 21
  %29671 = bitcast i16* %29670 to <16 x i16>*
  %29672 = load <16 x i16>, <16 x i16>* %29671, align 2, !tbaa !396
  %29673 = add <16 x i16> %29639, %29634
  %29674 = add <16 x i16> %29673, %29645
  %29675 = add <16 x i16> %29674, %29651
  %29676 = add <16 x i16> %29675, %29657
  %29677 = add <16 x i16> %29676, %29663
  %29678 = add <16 x i16> %29677, %29669
  %29679 = add <16 x i16> %29642, %29637
  %29680 = add <16 x i16> %29679, %29648
  %29681 = add <16 x i16> %29680, %29654
  %29682 = add <16 x i16> %29681, %29660
  %29683 = add <16 x i16> %29682, %29666
  %29684 = add <16 x i16> %29683, %29672
  %29685 = shufflevector <16 x i16> %29678, <16 x i16> %29684, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29686 = udiv <32 x i16> %29685, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %29687 = shufflevector <32 x i16> %29686, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29688 = sext i32 %blur_x.s0.x.v1.base.s1782 to i64
  %29689 = add nsw i64 %29688, %29463
  %29690 = getelementptr inbounds i16, i16* %blur_x917, i64 %29689
  %29691 = bitcast i16* %29690 to <16 x i16>*
  store <16 x i16> %29687, <16 x i16>* %29691, align 2, !tbaa !399
  %29692 = shufflevector <32 x i16> %29686, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29693 = getelementptr inbounds i16, i16* %29690, i64 16
  %29694 = bitcast i16* %29693 to <16 x i16>*
  store <16 x i16> %29692, <16 x i16>* %29694, align 2, !tbaa !399
  br label %"consume blur_x1784"

"consume blur_x1784":                             ; preds = %"for blur_y.s0.x.x.rebased1773", %"produce blur_x1781"
  %29695 = sext i32 %blur_y.s0.x.v0.base.s1776 to i64
  %29696 = add nsw i64 %29466, %29695
  %29697 = getelementptr inbounds i16, i16* %blur_x917, i64 %29696
  %29698 = bitcast i16* %29697 to <16 x i16>*
  %29699 = load <16 x i16>, <16 x i16>* %29698, align 2, !tbaa !399
  %29700 = getelementptr inbounds i16, i16* %29697, i64 16
  %29701 = bitcast i16* %29700 to <16 x i16>*
  %29702 = load <16 x i16>, <16 x i16>* %29701, align 2, !tbaa !399
  %29703 = add nsw i64 %29469, %29695
  %29704 = getelementptr inbounds i16, i16* %blur_x917, i64 %29703
  %29705 = bitcast i16* %29704 to <16 x i16>*
  %29706 = load <16 x i16>, <16 x i16>* %29705, align 2, !tbaa !399
  %29707 = getelementptr inbounds i16, i16* %29704, i64 16
  %29708 = bitcast i16* %29707 to <16 x i16>*
  %29709 = load <16 x i16>, <16 x i16>* %29708, align 2, !tbaa !399
  %29710 = add nsw i64 %29472, %29695
  %29711 = getelementptr inbounds i16, i16* %blur_x917, i64 %29710
  %29712 = bitcast i16* %29711 to <16 x i16>*
  %29713 = load <16 x i16>, <16 x i16>* %29712, align 2, !tbaa !399
  %29714 = getelementptr inbounds i16, i16* %29711, i64 16
  %29715 = bitcast i16* %29714 to <16 x i16>*
  %29716 = load <16 x i16>, <16 x i16>* %29715, align 2, !tbaa !399
  %29717 = add nsw i64 %29475, %29695
  %29718 = getelementptr inbounds i16, i16* %blur_x917, i64 %29717
  %29719 = bitcast i16* %29718 to <16 x i16>*
  %29720 = load <16 x i16>, <16 x i16>* %29719, align 2, !tbaa !399
  %29721 = getelementptr inbounds i16, i16* %29718, i64 16
  %29722 = bitcast i16* %29721 to <16 x i16>*
  %29723 = load <16 x i16>, <16 x i16>* %29722, align 2, !tbaa !399
  %29724 = add nsw i64 %29478, %29695
  %29725 = getelementptr inbounds i16, i16* %blur_x917, i64 %29724
  %29726 = bitcast i16* %29725 to <16 x i16>*
  %29727 = load <16 x i16>, <16 x i16>* %29726, align 2, !tbaa !399
  %29728 = getelementptr inbounds i16, i16* %29725, i64 16
  %29729 = bitcast i16* %29728 to <16 x i16>*
  %29730 = load <16 x i16>, <16 x i16>* %29729, align 2, !tbaa !399
  %29731 = add nsw i64 %29481, %29695
  %29732 = getelementptr inbounds i16, i16* %blur_x917, i64 %29731
  %29733 = bitcast i16* %29732 to <16 x i16>*
  %29734 = load <16 x i16>, <16 x i16>* %29733, align 2, !tbaa !399
  %29735 = getelementptr inbounds i16, i16* %29732, i64 16
  %29736 = bitcast i16* %29735 to <16 x i16>*
  %29737 = load <16 x i16>, <16 x i16>* %29736, align 2, !tbaa !399
  %29738 = add nsw i64 %29484, %29695
  %29739 = getelementptr inbounds i16, i16* %blur_x917, i64 %29738
  %29740 = bitcast i16* %29739 to <16 x i16>*
  %29741 = load <16 x i16>, <16 x i16>* %29740, align 2, !tbaa !399
  %29742 = getelementptr inbounds i16, i16* %29739, i64 16
  %29743 = bitcast i16* %29742 to <16 x i16>*
  %29744 = load <16 x i16>, <16 x i16>* %29743, align 2, !tbaa !399
  %29745 = add <16 x i16> %29706, %29699
  %29746 = add <16 x i16> %29745, %29713
  %29747 = add <16 x i16> %29746, %29720
  %29748 = add <16 x i16> %29747, %29727
  %29749 = add <16 x i16> %29748, %29734
  %29750 = add <16 x i16> %29749, %29741
  %29751 = add <16 x i16> %29709, %29702
  %29752 = add <16 x i16> %29751, %29716
  %29753 = add <16 x i16> %29752, %29723
  %29754 = add <16 x i16> %29753, %29730
  %29755 = add <16 x i16> %29754, %29737
  %29756 = add <16 x i16> %29755, %29744
  %29757 = shufflevector <16 x i16> %29750, <16 x i16> %29756, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29758 = udiv <32 x i16> %29757, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %29759 = shufflevector <32 x i16> %29758, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29760 = add nsw i64 %29488, %29695
  %29761 = getelementptr inbounds i16, i16* %267, i64 %29760
  %29762 = bitcast i16* %29761 to <16 x i16>*
  store <16 x i16> %29759, <16 x i16>* %29762, align 2, !tbaa !401
  %29763 = shufflevector <32 x i16> %29758, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29764 = getelementptr inbounds i16, i16* %29761, i64 16
  %29765 = bitcast i16* %29764 to <16 x i16>*
  store <16 x i16> %29763, <16 x i16>* %29765, align 2, !tbaa !401
  %29766 = add nuw nsw i32 %blur_y.s0.x.x.rebased1775, 1
  %.not2708 = icmp eq i32 %29766, %t1727936
  br i1 %.not2708, label %"end for blur_y.s0.x.x.rebased1774", label %"for blur_y.s0.x.x.rebased1773"

after_bb1785:                                     ; preds = %"end for blur_y.s0.x.x.rebased1774", %"produce blur_x1788"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1800.preheader", label %"end for blur_y.s0.x.x.rebased1801", !prof !386

"for blur_y.s0.x.x.rebased1800.preheader":        ; preds = %after_bb1785
  %29767 = sext i32 %t17621108 to i64
  %29768 = zext i32 %.pre-phi3673 to i64
  %29769 = mul nsw i64 %29768, %353
  %29770 = sub nsw i64 %29769, %302
  %29771 = zext i32 %.pre-phi3669 to i64
  %29772 = mul nsw i64 %29771, %353
  %29773 = sub nsw i64 %29772, %302
  %29774 = zext i32 %.pre-phi3677 to i64
  %29775 = mul nsw i64 %29774, %353
  %29776 = sub nsw i64 %29775, %302
  %29777 = zext i32 %.pre-phi3681 to i64
  %29778 = mul nsw i64 %29777, %353
  %29779 = sub nsw i64 %29778, %302
  %29780 = zext i32 %.pre-phi3685 to i64
  %29781 = mul nsw i64 %29780, %353
  %29782 = sub nsw i64 %29781, %302
  %29783 = zext i32 %.pre-phi3693 to i64
  %29784 = mul nsw i64 %29783, %353
  %29785 = sub nsw i64 %29784, %302
  %29786 = zext i32 %.pre-phi3689 to i64
  %29787 = mul nsw i64 %29786, %353
  %29788 = sub nsw i64 %29787, %302
  %29789 = sext i32 %a393 to i64
  %29790 = add nsw i64 %29789, 16
  %29791 = mul nsw i64 %29790, %350
  %29792 = add nsw i64 %29791, %354
  br label %"for blur_y.s0.x.x.rebased1800"

"produce blur_x1788":                             ; preds = %"end for blur_y.s0.x.x.rebased1774"
  %29793 = getelementptr inbounds i16, i16* %read_input860, i64 %447
  %29794 = getelementptr inbounds i16, i16* %29793, i64 -31
  %29795 = bitcast i16* %29794 to <16 x i16>*
  %29796 = load <16 x i16>, <16 x i16>* %29795, align 2, !tbaa !396
  %29797 = getelementptr inbounds i16, i16* %29793, i64 -15
  %29798 = bitcast i16* %29797 to <16 x i16>*
  %29799 = load <16 x i16>, <16 x i16>* %29798, align 2, !tbaa !396
  %29800 = getelementptr inbounds i16, i16* %29793, i64 -32
  %29801 = bitcast i16* %29800 to <16 x i16>*
  %29802 = load <16 x i16>, <16 x i16>* %29801, align 2, !tbaa !396
  %29803 = getelementptr inbounds i16, i16* %29793, i64 -16
  %29804 = bitcast i16* %29803 to <16 x i16>*
  %29805 = load <16 x i16>, <16 x i16>* %29804, align 2, !tbaa !396
  %29806 = getelementptr inbounds i16, i16* %29793, i64 -30
  %29807 = bitcast i16* %29806 to <16 x i16>*
  %29808 = load <16 x i16>, <16 x i16>* %29807, align 2, !tbaa !396
  %29809 = getelementptr inbounds i16, i16* %29793, i64 -14
  %29810 = bitcast i16* %29809 to <16 x i16>*
  %29811 = load <16 x i16>, <16 x i16>* %29810, align 2, !tbaa !396
  %29812 = getelementptr inbounds i16, i16* %29793, i64 -29
  %29813 = bitcast i16* %29812 to <16 x i16>*
  %29814 = load <16 x i16>, <16 x i16>* %29813, align 2, !tbaa !396
  %29815 = getelementptr inbounds i16, i16* %29793, i64 -13
  %29816 = bitcast i16* %29815 to <16 x i16>*
  %29817 = load <16 x i16>, <16 x i16>* %29816, align 2, !tbaa !396
  %29818 = getelementptr inbounds i16, i16* %29793, i64 -28
  %29819 = bitcast i16* %29818 to <16 x i16>*
  %29820 = load <16 x i16>, <16 x i16>* %29819, align 2, !tbaa !396
  %29821 = getelementptr inbounds i16, i16* %29793, i64 -12
  %29822 = bitcast i16* %29821 to <16 x i16>*
  %29823 = load <16 x i16>, <16 x i16>* %29822, align 2, !tbaa !396
  %29824 = getelementptr inbounds i16, i16* %29793, i64 -26
  %29825 = bitcast i16* %29824 to <16 x i16>*
  %29826 = load <16 x i16>, <16 x i16>* %29825, align 2, !tbaa !396
  %29827 = getelementptr inbounds i16, i16* %29793, i64 -10
  %29828 = bitcast i16* %29827 to <16 x i16>*
  %29829 = load <16 x i16>, <16 x i16>* %29828, align 2, !tbaa !396
  %29830 = getelementptr inbounds i16, i16* %29793, i64 -27
  %29831 = bitcast i16* %29830 to <16 x i16>*
  %29832 = load <16 x i16>, <16 x i16>* %29831, align 2, !tbaa !396
  %29833 = getelementptr inbounds i16, i16* %29793, i64 -11
  %29834 = bitcast i16* %29833 to <16 x i16>*
  %29835 = load <16 x i16>, <16 x i16>* %29834, align 2, !tbaa !396
  %29836 = add <16 x i16> %29802, %29796
  %29837 = add <16 x i16> %29836, %29808
  %29838 = add <16 x i16> %29837, %29814
  %29839 = add <16 x i16> %29838, %29820
  %29840 = add <16 x i16> %29839, %29826
  %29841 = add <16 x i16> %29840, %29832
  %29842 = add <16 x i16> %29805, %29799
  %29843 = add <16 x i16> %29842, %29811
  %29844 = add <16 x i16> %29843, %29817
  %29845 = add <16 x i16> %29844, %29823
  %29846 = add <16 x i16> %29845, %29829
  %29847 = add <16 x i16> %29846, %29835
  %29848 = shufflevector <16 x i16> %29841, <16 x i16> %29847, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29849 = udiv <32 x i16> %29848, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %29850 = shufflevector <32 x i16> %29849, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29851 = zext i32 %.pre-phi3693 to i64
  %29852 = mul nsw i64 %303, %29851
  %29853 = add nsw i64 %305, %29852
  %29854 = getelementptr inbounds i16, i16* %blur_x917, i64 %29853
  %29855 = getelementptr inbounds i16, i16* %29854, i64 -32
  %29856 = bitcast i16* %29855 to <16 x i16>*
  store <16 x i16> %29850, <16 x i16>* %29856, align 2, !tbaa !399
  %29857 = shufflevector <32 x i16> %29849, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29858 = getelementptr inbounds i16, i16* %29854, i64 -16
  %29859 = bitcast i16* %29858 to <16 x i16>*
  store <16 x i16> %29857, <16 x i16>* %29859, align 2, !tbaa !399
  %29860 = zext i32 %.pre-phi3673 to i64
  %29861 = mul nsw i64 %29860, %349
  %29862 = add nsw i64 %29861, %300
  %29863 = getelementptr inbounds i16, i16* %blur_x917, i64 %29862
  %29864 = getelementptr inbounds i16, i16* %29863, i64 -32
  %29865 = bitcast i16* %29864 to <16 x i16>*
  %29866 = load <16 x i16>, <16 x i16>* %29865, align 2, !tbaa !399
  %29867 = getelementptr inbounds i16, i16* %29863, i64 -16
  %29868 = bitcast i16* %29867 to <16 x i16>*
  %29869 = load <16 x i16>, <16 x i16>* %29868, align 2, !tbaa !399
  %29870 = zext i32 %.pre-phi3669 to i64
  %29871 = mul nsw i64 %29870, %349
  %29872 = add nsw i64 %29871, %300
  %29873 = getelementptr inbounds i16, i16* %blur_x917, i64 %29872
  %29874 = getelementptr inbounds i16, i16* %29873, i64 -32
  %29875 = bitcast i16* %29874 to <16 x i16>*
  %29876 = load <16 x i16>, <16 x i16>* %29875, align 2, !tbaa !399
  %29877 = getelementptr inbounds i16, i16* %29873, i64 -16
  %29878 = bitcast i16* %29877 to <16 x i16>*
  %29879 = load <16 x i16>, <16 x i16>* %29878, align 2, !tbaa !399
  %29880 = zext i32 %.pre-phi3677 to i64
  %29881 = mul nsw i64 %29880, %349
  %29882 = add nsw i64 %29881, %300
  %29883 = getelementptr inbounds i16, i16* %blur_x917, i64 %29882
  %29884 = getelementptr inbounds i16, i16* %29883, i64 -32
  %29885 = bitcast i16* %29884 to <16 x i16>*
  %29886 = load <16 x i16>, <16 x i16>* %29885, align 2, !tbaa !399
  %29887 = getelementptr inbounds i16, i16* %29883, i64 -16
  %29888 = bitcast i16* %29887 to <16 x i16>*
  %29889 = load <16 x i16>, <16 x i16>* %29888, align 2, !tbaa !399
  %29890 = zext i32 %.pre-phi3681 to i64
  %29891 = mul nsw i64 %29890, %349
  %29892 = add nsw i64 %29891, %300
  %29893 = getelementptr inbounds i16, i16* %blur_x917, i64 %29892
  %29894 = getelementptr inbounds i16, i16* %29893, i64 -32
  %29895 = bitcast i16* %29894 to <16 x i16>*
  %29896 = load <16 x i16>, <16 x i16>* %29895, align 2, !tbaa !399
  %29897 = getelementptr inbounds i16, i16* %29893, i64 -16
  %29898 = bitcast i16* %29897 to <16 x i16>*
  %29899 = load <16 x i16>, <16 x i16>* %29898, align 2, !tbaa !399
  %29900 = zext i32 %.pre-phi3685 to i64
  %29901 = mul nsw i64 %29900, %349
  %29902 = add nsw i64 %29901, %300
  %29903 = getelementptr inbounds i16, i16* %blur_x917, i64 %29902
  %29904 = getelementptr inbounds i16, i16* %29903, i64 -32
  %29905 = bitcast i16* %29904 to <16 x i16>*
  %29906 = load <16 x i16>, <16 x i16>* %29905, align 2, !tbaa !399
  %29907 = getelementptr inbounds i16, i16* %29903, i64 -16
  %29908 = bitcast i16* %29907 to <16 x i16>*
  %29909 = load <16 x i16>, <16 x i16>* %29908, align 2, !tbaa !399
  %29910 = mul nsw i64 %29851, %349
  %29911 = add nsw i64 %29910, %300
  %29912 = getelementptr inbounds i16, i16* %blur_x917, i64 %29911
  %29913 = getelementptr inbounds i16, i16* %29912, i64 -32
  %29914 = bitcast i16* %29913 to <16 x i16>*
  %29915 = load <16 x i16>, <16 x i16>* %29914, align 2, !tbaa !399
  %29916 = getelementptr inbounds i16, i16* %29912, i64 -16
  %29917 = bitcast i16* %29916 to <16 x i16>*
  %29918 = load <16 x i16>, <16 x i16>* %29917, align 2, !tbaa !399
  %29919 = zext i32 %.pre-phi3689 to i64
  %29920 = mul nsw i64 %29919, %349
  %29921 = add nsw i64 %29920, %300
  %29922 = getelementptr inbounds i16, i16* %blur_x917, i64 %29921
  %29923 = getelementptr inbounds i16, i16* %29922, i64 -32
  %29924 = bitcast i16* %29923 to <16 x i16>*
  %29925 = load <16 x i16>, <16 x i16>* %29924, align 2, !tbaa !399
  %29926 = getelementptr inbounds i16, i16* %29922, i64 -16
  %29927 = bitcast i16* %29926 to <16 x i16>*
  %29928 = load <16 x i16>, <16 x i16>* %29927, align 2, !tbaa !399
  %29929 = add <16 x i16> %29876, %29866
  %29930 = add <16 x i16> %29929, %29886
  %29931 = add <16 x i16> %29930, %29896
  %29932 = add <16 x i16> %29931, %29906
  %29933 = add <16 x i16> %29932, %29915
  %29934 = add <16 x i16> %29933, %29925
  %29935 = add <16 x i16> %29879, %29869
  %29936 = add <16 x i16> %29935, %29889
  %29937 = add <16 x i16> %29936, %29899
  %29938 = add <16 x i16> %29937, %29909
  %29939 = add <16 x i16> %29938, %29918
  %29940 = add <16 x i16> %29939, %29928
  %29941 = shufflevector <16 x i16> %29934, <16 x i16> %29940, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29942 = udiv <32 x i16> %29941, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %29943 = shufflevector <32 x i16> %29942, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29944 = sext i32 %a393 to i64
  %29945 = add nsw i64 %29944, 16
  %29946 = mul nsw i64 %29945, %350
  %29947 = add nsw i64 %352, %29946
  %29948 = getelementptr inbounds i16, i16* %267, i64 %29947
  %29949 = getelementptr inbounds i16, i16* %29948, i64 -32
  %29950 = bitcast i16* %29949 to <16 x i16>*
  store <16 x i16> %29943, <16 x i16>* %29950, align 2, !tbaa !401
  %29951 = shufflevector <32 x i16> %29942, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29952 = getelementptr inbounds i16, i16* %29948, i64 -16
  %29953 = bitcast i16* %29952 to <16 x i16>*
  store <16 x i16> %29951, <16 x i16>* %29953, align 2, !tbaa !401
  br label %after_bb1785

"for blur_y.s0.x.x.rebased1800":                  ; preds = %"for blur_y.s0.x.x.rebased1800.preheader", %"consume blur_x1808"
  %indvars.iv3540 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1800.preheader" ], [ %indvars.iv.next3541, %"consume blur_x1808" ]
  %29954 = add nsw i64 %indvars.iv3540, %307
  %29955 = icmp slt i64 %29954, 1
  %29956 = trunc i64 %29954 to i32
  %29957 = shl nsw i32 %29956, 5
  %29958 = icmp sgt i32 %202, %29957
  %29959 = or i1 %29955, %29958
  br i1 %29959, label %"produce blur_x1806", label %"for blur_y.s0.x.x.rebased1800.consume blur_x1808_crit_edge"

"for blur_y.s0.x.x.rebased1800.consume blur_x1808_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1800"
  %.pre3730 = shl nsw i64 %29954, 5
  br label %"consume blur_x1808"

"end for blur_y.s0.x.x.rebased1801":              ; preds = %"consume blur_x1808", %after_bb1785
  br i1 %308, label %"for blur_y.s0.x.x.rebased1816.preheader", label %"end for blur_y.s0.x.x.rebased1817", !prof !386

"for blur_y.s0.x.x.rebased1816.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1801"
  %29960 = sext i32 %t17621108 to i64
  %29961 = zext i32 %.pre-phi3673 to i64
  %29962 = mul nsw i64 %29961, %353
  %29963 = sub nsw i64 %29962, %302
  %29964 = zext i32 %.pre-phi3669 to i64
  %29965 = mul nsw i64 %29964, %353
  %29966 = sub nsw i64 %29965, %302
  %29967 = zext i32 %.pre-phi3677 to i64
  %29968 = mul nsw i64 %29967, %353
  %29969 = sub nsw i64 %29968, %302
  %29970 = zext i32 %.pre-phi3681 to i64
  %29971 = mul nsw i64 %29970, %353
  %29972 = sub nsw i64 %29971, %302
  %29973 = zext i32 %.pre-phi3685 to i64
  %29974 = mul nsw i64 %29973, %353
  %29975 = sub nsw i64 %29974, %302
  %29976 = zext i32 %.pre-phi3693 to i64
  %29977 = mul nsw i64 %29976, %353
  %29978 = sub nsw i64 %29977, %302
  %29979 = zext i32 %.pre-phi3689 to i64
  %29980 = mul nsw i64 %29979, %353
  %29981 = sub nsw i64 %29980, %302
  %29982 = sext i32 %a393 to i64
  %29983 = add nsw i64 %29982, 16
  %29984 = mul nsw i64 %29983, %350
  %29985 = add nsw i64 %29984, %354
  br label %"for blur_y.s0.x.x.rebased1816"

"produce blur_x1806":                             ; preds = %"for blur_y.s0.x.x.rebased1800"
  %t10081807 = add nsw i32 %449, %29957
  %29986 = sext i32 %t10081807 to i64
  %29987 = getelementptr inbounds i16, i16* %read_input860, i64 %29986
  %29988 = getelementptr inbounds i16, i16* %29987, i64 1
  %29989 = bitcast i16* %29988 to <16 x i16>*
  %29990 = load <16 x i16>, <16 x i16>* %29989, align 2, !tbaa !396
  %29991 = getelementptr inbounds i16, i16* %29987, i64 17
  %29992 = bitcast i16* %29991 to <16 x i16>*
  %29993 = load <16 x i16>, <16 x i16>* %29992, align 2, !tbaa !396
  %29994 = bitcast i16* %29987 to <16 x i16>*
  %29995 = load <16 x i16>, <16 x i16>* %29994, align 2, !tbaa !396
  %29996 = getelementptr inbounds i16, i16* %29987, i64 16
  %29997 = bitcast i16* %29996 to <16 x i16>*
  %29998 = load <16 x i16>, <16 x i16>* %29997, align 2, !tbaa !396
  %29999 = getelementptr inbounds i16, i16* %29987, i64 2
  %30000 = bitcast i16* %29999 to <16 x i16>*
  %30001 = load <16 x i16>, <16 x i16>* %30000, align 2, !tbaa !396
  %30002 = getelementptr inbounds i16, i16* %29987, i64 18
  %30003 = bitcast i16* %30002 to <16 x i16>*
  %30004 = load <16 x i16>, <16 x i16>* %30003, align 2, !tbaa !396
  %30005 = getelementptr inbounds i16, i16* %29987, i64 3
  %30006 = bitcast i16* %30005 to <16 x i16>*
  %30007 = load <16 x i16>, <16 x i16>* %30006, align 2, !tbaa !396
  %30008 = getelementptr inbounds i16, i16* %29987, i64 19
  %30009 = bitcast i16* %30008 to <16 x i16>*
  %30010 = load <16 x i16>, <16 x i16>* %30009, align 2, !tbaa !396
  %30011 = getelementptr inbounds i16, i16* %29987, i64 4
  %30012 = bitcast i16* %30011 to <16 x i16>*
  %30013 = load <16 x i16>, <16 x i16>* %30012, align 2, !tbaa !396
  %30014 = getelementptr inbounds i16, i16* %29987, i64 20
  %30015 = bitcast i16* %30014 to <16 x i16>*
  %30016 = load <16 x i16>, <16 x i16>* %30015, align 2, !tbaa !396
  %30017 = getelementptr inbounds i16, i16* %29987, i64 6
  %30018 = bitcast i16* %30017 to <16 x i16>*
  %30019 = load <16 x i16>, <16 x i16>* %30018, align 2, !tbaa !396
  %30020 = getelementptr inbounds i16, i16* %29987, i64 22
  %30021 = bitcast i16* %30020 to <16 x i16>*
  %30022 = load <16 x i16>, <16 x i16>* %30021, align 2, !tbaa !396
  %30023 = getelementptr inbounds i16, i16* %29987, i64 5
  %30024 = bitcast i16* %30023 to <16 x i16>*
  %30025 = load <16 x i16>, <16 x i16>* %30024, align 2, !tbaa !396
  %30026 = getelementptr inbounds i16, i16* %29987, i64 21
  %30027 = bitcast i16* %30026 to <16 x i16>*
  %30028 = load <16 x i16>, <16 x i16>* %30027, align 2, !tbaa !396
  %30029 = add <16 x i16> %29995, %29990
  %30030 = add <16 x i16> %30029, %30001
  %30031 = add <16 x i16> %30030, %30007
  %30032 = add <16 x i16> %30031, %30013
  %30033 = add <16 x i16> %30032, %30019
  %30034 = add <16 x i16> %30033, %30025
  %30035 = add <16 x i16> %29998, %29993
  %30036 = add <16 x i16> %30035, %30004
  %30037 = add <16 x i16> %30036, %30010
  %30038 = add <16 x i16> %30037, %30016
  %30039 = add <16 x i16> %30038, %30022
  %30040 = add <16 x i16> %30039, %30028
  %30041 = shufflevector <16 x i16> %30034, <16 x i16> %30040, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30042 = udiv <32 x i16> %30041, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %30043 = shufflevector <32 x i16> %30042, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30044 = shl nsw i64 %29954, 5
  %30045 = add nsw i64 %30044, %29767
  %30046 = getelementptr inbounds i16, i16* %blur_x917, i64 %30045
  %30047 = bitcast i16* %30046 to <16 x i16>*
  store <16 x i16> %30043, <16 x i16>* %30047, align 2, !tbaa !399
  %30048 = shufflevector <32 x i16> %30042, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30049 = getelementptr inbounds i16, i16* %30046, i64 16
  %30050 = bitcast i16* %30049 to <16 x i16>*
  store <16 x i16> %30048, <16 x i16>* %30050, align 2, !tbaa !399
  br label %"consume blur_x1808"

"consume blur_x1808":                             ; preds = %"for blur_y.s0.x.x.rebased1800.consume blur_x1808_crit_edge", %"produce blur_x1806"
  %.pre-phi3731 = phi i64 [ %.pre3730, %"for blur_y.s0.x.x.rebased1800.consume blur_x1808_crit_edge" ], [ %30044, %"produce blur_x1806" ]
  %30051 = add nsw i64 %29770, %.pre-phi3731
  %30052 = getelementptr inbounds i16, i16* %blur_x917, i64 %30051
  %30053 = bitcast i16* %30052 to <16 x i16>*
  %30054 = load <16 x i16>, <16 x i16>* %30053, align 2, !tbaa !399
  %30055 = getelementptr inbounds i16, i16* %30052, i64 16
  %30056 = bitcast i16* %30055 to <16 x i16>*
  %30057 = load <16 x i16>, <16 x i16>* %30056, align 2, !tbaa !399
  %30058 = add nsw i64 %29773, %.pre-phi3731
  %30059 = getelementptr inbounds i16, i16* %blur_x917, i64 %30058
  %30060 = bitcast i16* %30059 to <16 x i16>*
  %30061 = load <16 x i16>, <16 x i16>* %30060, align 2, !tbaa !399
  %30062 = getelementptr inbounds i16, i16* %30059, i64 16
  %30063 = bitcast i16* %30062 to <16 x i16>*
  %30064 = load <16 x i16>, <16 x i16>* %30063, align 2, !tbaa !399
  %30065 = add nsw i64 %29776, %.pre-phi3731
  %30066 = getelementptr inbounds i16, i16* %blur_x917, i64 %30065
  %30067 = bitcast i16* %30066 to <16 x i16>*
  %30068 = load <16 x i16>, <16 x i16>* %30067, align 2, !tbaa !399
  %30069 = getelementptr inbounds i16, i16* %30066, i64 16
  %30070 = bitcast i16* %30069 to <16 x i16>*
  %30071 = load <16 x i16>, <16 x i16>* %30070, align 2, !tbaa !399
  %30072 = add nsw i64 %29779, %.pre-phi3731
  %30073 = getelementptr inbounds i16, i16* %blur_x917, i64 %30072
  %30074 = bitcast i16* %30073 to <16 x i16>*
  %30075 = load <16 x i16>, <16 x i16>* %30074, align 2, !tbaa !399
  %30076 = getelementptr inbounds i16, i16* %30073, i64 16
  %30077 = bitcast i16* %30076 to <16 x i16>*
  %30078 = load <16 x i16>, <16 x i16>* %30077, align 2, !tbaa !399
  %30079 = add nsw i64 %29782, %.pre-phi3731
  %30080 = getelementptr inbounds i16, i16* %blur_x917, i64 %30079
  %30081 = bitcast i16* %30080 to <16 x i16>*
  %30082 = load <16 x i16>, <16 x i16>* %30081, align 2, !tbaa !399
  %30083 = getelementptr inbounds i16, i16* %30080, i64 16
  %30084 = bitcast i16* %30083 to <16 x i16>*
  %30085 = load <16 x i16>, <16 x i16>* %30084, align 2, !tbaa !399
  %30086 = add nsw i64 %29785, %.pre-phi3731
  %30087 = getelementptr inbounds i16, i16* %blur_x917, i64 %30086
  %30088 = bitcast i16* %30087 to <16 x i16>*
  %30089 = load <16 x i16>, <16 x i16>* %30088, align 2, !tbaa !399
  %30090 = getelementptr inbounds i16, i16* %30087, i64 16
  %30091 = bitcast i16* %30090 to <16 x i16>*
  %30092 = load <16 x i16>, <16 x i16>* %30091, align 2, !tbaa !399
  %30093 = add nsw i64 %29788, %.pre-phi3731
  %30094 = getelementptr inbounds i16, i16* %blur_x917, i64 %30093
  %30095 = bitcast i16* %30094 to <16 x i16>*
  %30096 = load <16 x i16>, <16 x i16>* %30095, align 2, !tbaa !399
  %30097 = getelementptr inbounds i16, i16* %30094, i64 16
  %30098 = bitcast i16* %30097 to <16 x i16>*
  %30099 = load <16 x i16>, <16 x i16>* %30098, align 2, !tbaa !399
  %30100 = add <16 x i16> %30061, %30054
  %30101 = add <16 x i16> %30100, %30068
  %30102 = add <16 x i16> %30101, %30075
  %30103 = add <16 x i16> %30102, %30082
  %30104 = add <16 x i16> %30103, %30089
  %30105 = add <16 x i16> %30104, %30096
  %30106 = add <16 x i16> %30064, %30057
  %30107 = add <16 x i16> %30106, %30071
  %30108 = add <16 x i16> %30107, %30078
  %30109 = add <16 x i16> %30108, %30085
  %30110 = add <16 x i16> %30109, %30092
  %30111 = add <16 x i16> %30110, %30099
  %30112 = shufflevector <16 x i16> %30105, <16 x i16> %30111, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30113 = udiv <32 x i16> %30112, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %30114 = shufflevector <32 x i16> %30113, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30115 = add nsw i64 %29792, %.pre-phi3731
  %30116 = getelementptr inbounds i16, i16* %267, i64 %30115
  %30117 = bitcast i16* %30116 to <16 x i16>*
  store <16 x i16> %30114, <16 x i16>* %30117, align 2, !tbaa !401
  %30118 = shufflevector <32 x i16> %30113, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30119 = getelementptr inbounds i16, i16* %30116, i64 16
  %30120 = bitcast i16* %30119 to <16 x i16>*
  store <16 x i16> %30118, <16 x i16>* %30120, align 2, !tbaa !401
  %indvars.iv.next3541 = add nuw nsw i64 %indvars.iv3540, 1
  %.not2705 = icmp eq i64 %indvars.iv.next3541, %546
  br i1 %.not2705, label %"end for blur_y.s0.x.x.rebased1801", label %"for blur_y.s0.x.x.rebased1800"

"for blur_y.s0.x.x.rebased1816":                  ; preds = %"for blur_y.s0.x.x.rebased1816.preheader", %"consume blur_x1827"
  %blur_y.s0.x.x.rebased1818 = phi i32 [ %30263, %"consume blur_x1827" ], [ 0, %"for blur_y.s0.x.x.rebased1816.preheader" ]
  %30121 = add nsw i32 %blur_y.s0.x.x.rebased1818, %t1670852
  %a4115 = shl nsw i32 %30121, 5
  %30122 = icmp sgt i32 %t1691, %a4115
  %blur_y.s0.x.v0.base.s1819 = select i1 %30122, i32 %a4115, i32 %t1691
  %30123 = icmp slt i32 %30121, 1
  %30124 = icmp sgt i32 %202, %a4115
  %30125 = or i1 %30123, %30124
  br i1 %30125, label %"produce blur_x1824", label %"consume blur_x1827"

"end for blur_y.s0.x.x.rebased1817":              ; preds = %"consume blur_x1827", %"end for blur_y.s0.x.x.rebased1801"
  br i1 %233, label %"produce blur_x1831", label %after_bb1828

"produce blur_x1824":                             ; preds = %"for blur_y.s0.x.x.rebased1816"
  %30126 = icmp slt i32 %blur_y.s0.x.v0.base.s1819, %202
  %blur_x.s0.x.v1.base.s1825 = select i1 %30126, i32 %blur_y.s0.x.v0.base.s1819, i32 %202
  %t10131826 = add nsw i32 %449, %blur_x.s0.x.v1.base.s1825
  %30127 = sext i32 %t10131826 to i64
  %30128 = getelementptr inbounds i16, i16* %read_input860, i64 %30127
  %30129 = getelementptr inbounds i16, i16* %30128, i64 1
  %30130 = bitcast i16* %30129 to <16 x i16>*
  %30131 = load <16 x i16>, <16 x i16>* %30130, align 2, !tbaa !396
  %30132 = getelementptr inbounds i16, i16* %30128, i64 17
  %30133 = bitcast i16* %30132 to <16 x i16>*
  %30134 = load <16 x i16>, <16 x i16>* %30133, align 2, !tbaa !396
  %30135 = bitcast i16* %30128 to <16 x i16>*
  %30136 = load <16 x i16>, <16 x i16>* %30135, align 2, !tbaa !396
  %30137 = getelementptr inbounds i16, i16* %30128, i64 16
  %30138 = bitcast i16* %30137 to <16 x i16>*
  %30139 = load <16 x i16>, <16 x i16>* %30138, align 2, !tbaa !396
  %30140 = getelementptr inbounds i16, i16* %30128, i64 2
  %30141 = bitcast i16* %30140 to <16 x i16>*
  %30142 = load <16 x i16>, <16 x i16>* %30141, align 2, !tbaa !396
  %30143 = getelementptr inbounds i16, i16* %30128, i64 18
  %30144 = bitcast i16* %30143 to <16 x i16>*
  %30145 = load <16 x i16>, <16 x i16>* %30144, align 2, !tbaa !396
  %30146 = getelementptr inbounds i16, i16* %30128, i64 3
  %30147 = bitcast i16* %30146 to <16 x i16>*
  %30148 = load <16 x i16>, <16 x i16>* %30147, align 2, !tbaa !396
  %30149 = getelementptr inbounds i16, i16* %30128, i64 19
  %30150 = bitcast i16* %30149 to <16 x i16>*
  %30151 = load <16 x i16>, <16 x i16>* %30150, align 2, !tbaa !396
  %30152 = getelementptr inbounds i16, i16* %30128, i64 4
  %30153 = bitcast i16* %30152 to <16 x i16>*
  %30154 = load <16 x i16>, <16 x i16>* %30153, align 2, !tbaa !396
  %30155 = getelementptr inbounds i16, i16* %30128, i64 20
  %30156 = bitcast i16* %30155 to <16 x i16>*
  %30157 = load <16 x i16>, <16 x i16>* %30156, align 2, !tbaa !396
  %30158 = getelementptr inbounds i16, i16* %30128, i64 6
  %30159 = bitcast i16* %30158 to <16 x i16>*
  %30160 = load <16 x i16>, <16 x i16>* %30159, align 2, !tbaa !396
  %30161 = getelementptr inbounds i16, i16* %30128, i64 22
  %30162 = bitcast i16* %30161 to <16 x i16>*
  %30163 = load <16 x i16>, <16 x i16>* %30162, align 2, !tbaa !396
  %30164 = getelementptr inbounds i16, i16* %30128, i64 5
  %30165 = bitcast i16* %30164 to <16 x i16>*
  %30166 = load <16 x i16>, <16 x i16>* %30165, align 2, !tbaa !396
  %30167 = getelementptr inbounds i16, i16* %30128, i64 21
  %30168 = bitcast i16* %30167 to <16 x i16>*
  %30169 = load <16 x i16>, <16 x i16>* %30168, align 2, !tbaa !396
  %30170 = add <16 x i16> %30136, %30131
  %30171 = add <16 x i16> %30170, %30142
  %30172 = add <16 x i16> %30171, %30148
  %30173 = add <16 x i16> %30172, %30154
  %30174 = add <16 x i16> %30173, %30160
  %30175 = add <16 x i16> %30174, %30166
  %30176 = add <16 x i16> %30139, %30134
  %30177 = add <16 x i16> %30176, %30145
  %30178 = add <16 x i16> %30177, %30151
  %30179 = add <16 x i16> %30178, %30157
  %30180 = add <16 x i16> %30179, %30163
  %30181 = add <16 x i16> %30180, %30169
  %30182 = shufflevector <16 x i16> %30175, <16 x i16> %30181, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30183 = udiv <32 x i16> %30182, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %30184 = shufflevector <32 x i16> %30183, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30185 = sext i32 %blur_x.s0.x.v1.base.s1825 to i64
  %30186 = add nsw i64 %30185, %29960
  %30187 = getelementptr inbounds i16, i16* %blur_x917, i64 %30186
  %30188 = bitcast i16* %30187 to <16 x i16>*
  store <16 x i16> %30184, <16 x i16>* %30188, align 2, !tbaa !399
  %30189 = shufflevector <32 x i16> %30183, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30190 = getelementptr inbounds i16, i16* %30187, i64 16
  %30191 = bitcast i16* %30190 to <16 x i16>*
  store <16 x i16> %30189, <16 x i16>* %30191, align 2, !tbaa !399
  br label %"consume blur_x1827"

"consume blur_x1827":                             ; preds = %"for blur_y.s0.x.x.rebased1816", %"produce blur_x1824"
  %30192 = sext i32 %blur_y.s0.x.v0.base.s1819 to i64
  %30193 = add nsw i64 %29963, %30192
  %30194 = getelementptr inbounds i16, i16* %blur_x917, i64 %30193
  %30195 = bitcast i16* %30194 to <16 x i16>*
  %30196 = load <16 x i16>, <16 x i16>* %30195, align 2, !tbaa !399
  %30197 = getelementptr inbounds i16, i16* %30194, i64 16
  %30198 = bitcast i16* %30197 to <16 x i16>*
  %30199 = load <16 x i16>, <16 x i16>* %30198, align 2, !tbaa !399
  %30200 = add nsw i64 %29966, %30192
  %30201 = getelementptr inbounds i16, i16* %blur_x917, i64 %30200
  %30202 = bitcast i16* %30201 to <16 x i16>*
  %30203 = load <16 x i16>, <16 x i16>* %30202, align 2, !tbaa !399
  %30204 = getelementptr inbounds i16, i16* %30201, i64 16
  %30205 = bitcast i16* %30204 to <16 x i16>*
  %30206 = load <16 x i16>, <16 x i16>* %30205, align 2, !tbaa !399
  %30207 = add nsw i64 %29969, %30192
  %30208 = getelementptr inbounds i16, i16* %blur_x917, i64 %30207
  %30209 = bitcast i16* %30208 to <16 x i16>*
  %30210 = load <16 x i16>, <16 x i16>* %30209, align 2, !tbaa !399
  %30211 = getelementptr inbounds i16, i16* %30208, i64 16
  %30212 = bitcast i16* %30211 to <16 x i16>*
  %30213 = load <16 x i16>, <16 x i16>* %30212, align 2, !tbaa !399
  %30214 = add nsw i64 %29972, %30192
  %30215 = getelementptr inbounds i16, i16* %blur_x917, i64 %30214
  %30216 = bitcast i16* %30215 to <16 x i16>*
  %30217 = load <16 x i16>, <16 x i16>* %30216, align 2, !tbaa !399
  %30218 = getelementptr inbounds i16, i16* %30215, i64 16
  %30219 = bitcast i16* %30218 to <16 x i16>*
  %30220 = load <16 x i16>, <16 x i16>* %30219, align 2, !tbaa !399
  %30221 = add nsw i64 %29975, %30192
  %30222 = getelementptr inbounds i16, i16* %blur_x917, i64 %30221
  %30223 = bitcast i16* %30222 to <16 x i16>*
  %30224 = load <16 x i16>, <16 x i16>* %30223, align 2, !tbaa !399
  %30225 = getelementptr inbounds i16, i16* %30222, i64 16
  %30226 = bitcast i16* %30225 to <16 x i16>*
  %30227 = load <16 x i16>, <16 x i16>* %30226, align 2, !tbaa !399
  %30228 = add nsw i64 %29978, %30192
  %30229 = getelementptr inbounds i16, i16* %blur_x917, i64 %30228
  %30230 = bitcast i16* %30229 to <16 x i16>*
  %30231 = load <16 x i16>, <16 x i16>* %30230, align 2, !tbaa !399
  %30232 = getelementptr inbounds i16, i16* %30229, i64 16
  %30233 = bitcast i16* %30232 to <16 x i16>*
  %30234 = load <16 x i16>, <16 x i16>* %30233, align 2, !tbaa !399
  %30235 = add nsw i64 %29981, %30192
  %30236 = getelementptr inbounds i16, i16* %blur_x917, i64 %30235
  %30237 = bitcast i16* %30236 to <16 x i16>*
  %30238 = load <16 x i16>, <16 x i16>* %30237, align 2, !tbaa !399
  %30239 = getelementptr inbounds i16, i16* %30236, i64 16
  %30240 = bitcast i16* %30239 to <16 x i16>*
  %30241 = load <16 x i16>, <16 x i16>* %30240, align 2, !tbaa !399
  %30242 = add <16 x i16> %30203, %30196
  %30243 = add <16 x i16> %30242, %30210
  %30244 = add <16 x i16> %30243, %30217
  %30245 = add <16 x i16> %30244, %30224
  %30246 = add <16 x i16> %30245, %30231
  %30247 = add <16 x i16> %30246, %30238
  %30248 = add <16 x i16> %30206, %30199
  %30249 = add <16 x i16> %30248, %30213
  %30250 = add <16 x i16> %30249, %30220
  %30251 = add <16 x i16> %30250, %30227
  %30252 = add <16 x i16> %30251, %30234
  %30253 = add <16 x i16> %30252, %30241
  %30254 = shufflevector <16 x i16> %30247, <16 x i16> %30253, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30255 = udiv <32 x i16> %30254, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %30256 = shufflevector <32 x i16> %30255, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30257 = add nsw i64 %29985, %30192
  %30258 = getelementptr inbounds i16, i16* %267, i64 %30257
  %30259 = bitcast i16* %30258 to <16 x i16>*
  store <16 x i16> %30256, <16 x i16>* %30259, align 2, !tbaa !401
  %30260 = shufflevector <32 x i16> %30255, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30261 = getelementptr inbounds i16, i16* %30258, i64 16
  %30262 = bitcast i16* %30261 to <16 x i16>*
  store <16 x i16> %30260, <16 x i16>* %30262, align 2, !tbaa !401
  %30263 = add nuw nsw i32 %blur_y.s0.x.x.rebased1818, 1
  %.not2704 = icmp eq i32 %30263, %t1727936
  br i1 %.not2704, label %"end for blur_y.s0.x.x.rebased1817", label %"for blur_y.s0.x.x.rebased1816"

after_bb1828:                                     ; preds = %"end for blur_y.s0.x.x.rebased1817", %"produce blur_x1831"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1843.preheader", label %"end for blur_y.s0.x.x.rebased1844", !prof !386

"for blur_y.s0.x.x.rebased1843.preheader":        ; preds = %after_bb1828
  %30264 = sext i32 %t17781151 to i64
  %30265 = zext i32 %.pre-phi3677 to i64
  %30266 = mul nsw i64 %30265, %353
  %30267 = sub nsw i64 %30266, %302
  %30268 = zext i32 %.pre-phi3673 to i64
  %30269 = mul nsw i64 %30268, %353
  %30270 = sub nsw i64 %30269, %302
  %30271 = zext i32 %.pre-phi3681 to i64
  %30272 = mul nsw i64 %30271, %353
  %30273 = sub nsw i64 %30272, %302
  %30274 = zext i32 %.pre-phi3685 to i64
  %30275 = mul nsw i64 %30274, %353
  %30276 = sub nsw i64 %30275, %302
  %30277 = zext i32 %.pre-phi3689 to i64
  %30278 = mul nsw i64 %30277, %353
  %30279 = sub nsw i64 %30278, %302
  %30280 = zext i32 %.pre-phi3699 to i64
  %30281 = mul nsw i64 %30280, %353
  %30282 = sub nsw i64 %30281, %302
  %30283 = zext i32 %.pre-phi3693 to i64
  %30284 = mul nsw i64 %30283, %353
  %30285 = sub nsw i64 %30284, %302
  %30286 = sext i32 %a393 to i64
  %30287 = add nsw i64 %30286, 17
  %30288 = mul nsw i64 %30287, %350
  %30289 = add nsw i64 %30288, %354
  br label %"for blur_y.s0.x.x.rebased1843"

"produce blur_x1831":                             ; preds = %"end for blur_y.s0.x.x.rebased1817"
  %30290 = getelementptr inbounds i16, i16* %read_input860, i64 %453
  %30291 = getelementptr inbounds i16, i16* %30290, i64 -31
  %30292 = bitcast i16* %30291 to <16 x i16>*
  %30293 = load <16 x i16>, <16 x i16>* %30292, align 2, !tbaa !396
  %30294 = getelementptr inbounds i16, i16* %30290, i64 -15
  %30295 = bitcast i16* %30294 to <16 x i16>*
  %30296 = load <16 x i16>, <16 x i16>* %30295, align 2, !tbaa !396
  %30297 = getelementptr inbounds i16, i16* %30290, i64 -32
  %30298 = bitcast i16* %30297 to <16 x i16>*
  %30299 = load <16 x i16>, <16 x i16>* %30298, align 2, !tbaa !396
  %30300 = getelementptr inbounds i16, i16* %30290, i64 -16
  %30301 = bitcast i16* %30300 to <16 x i16>*
  %30302 = load <16 x i16>, <16 x i16>* %30301, align 2, !tbaa !396
  %30303 = getelementptr inbounds i16, i16* %30290, i64 -30
  %30304 = bitcast i16* %30303 to <16 x i16>*
  %30305 = load <16 x i16>, <16 x i16>* %30304, align 2, !tbaa !396
  %30306 = getelementptr inbounds i16, i16* %30290, i64 -14
  %30307 = bitcast i16* %30306 to <16 x i16>*
  %30308 = load <16 x i16>, <16 x i16>* %30307, align 2, !tbaa !396
  %30309 = getelementptr inbounds i16, i16* %30290, i64 -29
  %30310 = bitcast i16* %30309 to <16 x i16>*
  %30311 = load <16 x i16>, <16 x i16>* %30310, align 2, !tbaa !396
  %30312 = getelementptr inbounds i16, i16* %30290, i64 -13
  %30313 = bitcast i16* %30312 to <16 x i16>*
  %30314 = load <16 x i16>, <16 x i16>* %30313, align 2, !tbaa !396
  %30315 = getelementptr inbounds i16, i16* %30290, i64 -28
  %30316 = bitcast i16* %30315 to <16 x i16>*
  %30317 = load <16 x i16>, <16 x i16>* %30316, align 2, !tbaa !396
  %30318 = getelementptr inbounds i16, i16* %30290, i64 -12
  %30319 = bitcast i16* %30318 to <16 x i16>*
  %30320 = load <16 x i16>, <16 x i16>* %30319, align 2, !tbaa !396
  %30321 = getelementptr inbounds i16, i16* %30290, i64 -26
  %30322 = bitcast i16* %30321 to <16 x i16>*
  %30323 = load <16 x i16>, <16 x i16>* %30322, align 2, !tbaa !396
  %30324 = getelementptr inbounds i16, i16* %30290, i64 -10
  %30325 = bitcast i16* %30324 to <16 x i16>*
  %30326 = load <16 x i16>, <16 x i16>* %30325, align 2, !tbaa !396
  %30327 = getelementptr inbounds i16, i16* %30290, i64 -27
  %30328 = bitcast i16* %30327 to <16 x i16>*
  %30329 = load <16 x i16>, <16 x i16>* %30328, align 2, !tbaa !396
  %30330 = getelementptr inbounds i16, i16* %30290, i64 -11
  %30331 = bitcast i16* %30330 to <16 x i16>*
  %30332 = load <16 x i16>, <16 x i16>* %30331, align 2, !tbaa !396
  %30333 = add <16 x i16> %30299, %30293
  %30334 = add <16 x i16> %30333, %30305
  %30335 = add <16 x i16> %30334, %30311
  %30336 = add <16 x i16> %30335, %30317
  %30337 = add <16 x i16> %30336, %30323
  %30338 = add <16 x i16> %30337, %30329
  %30339 = add <16 x i16> %30302, %30296
  %30340 = add <16 x i16> %30339, %30308
  %30341 = add <16 x i16> %30340, %30314
  %30342 = add <16 x i16> %30341, %30320
  %30343 = add <16 x i16> %30342, %30326
  %30344 = add <16 x i16> %30343, %30332
  %30345 = shufflevector <16 x i16> %30338, <16 x i16> %30344, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30346 = udiv <32 x i16> %30345, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %30347 = shufflevector <32 x i16> %30346, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30348 = zext i32 %.pre-phi3699 to i64
  %30349 = mul nsw i64 %303, %30348
  %30350 = add nsw i64 %305, %30349
  %30351 = getelementptr inbounds i16, i16* %blur_x917, i64 %30350
  %30352 = getelementptr inbounds i16, i16* %30351, i64 -32
  %30353 = bitcast i16* %30352 to <16 x i16>*
  store <16 x i16> %30347, <16 x i16>* %30353, align 2, !tbaa !399
  %30354 = shufflevector <32 x i16> %30346, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30355 = getelementptr inbounds i16, i16* %30351, i64 -16
  %30356 = bitcast i16* %30355 to <16 x i16>*
  store <16 x i16> %30354, <16 x i16>* %30356, align 2, !tbaa !399
  %30357 = zext i32 %.pre-phi3677 to i64
  %30358 = mul nsw i64 %30357, %349
  %30359 = add nsw i64 %30358, %300
  %30360 = getelementptr inbounds i16, i16* %blur_x917, i64 %30359
  %30361 = getelementptr inbounds i16, i16* %30360, i64 -32
  %30362 = bitcast i16* %30361 to <16 x i16>*
  %30363 = load <16 x i16>, <16 x i16>* %30362, align 2, !tbaa !399
  %30364 = getelementptr inbounds i16, i16* %30360, i64 -16
  %30365 = bitcast i16* %30364 to <16 x i16>*
  %30366 = load <16 x i16>, <16 x i16>* %30365, align 2, !tbaa !399
  %30367 = zext i32 %.pre-phi3673 to i64
  %30368 = mul nsw i64 %30367, %349
  %30369 = add nsw i64 %30368, %300
  %30370 = getelementptr inbounds i16, i16* %blur_x917, i64 %30369
  %30371 = getelementptr inbounds i16, i16* %30370, i64 -32
  %30372 = bitcast i16* %30371 to <16 x i16>*
  %30373 = load <16 x i16>, <16 x i16>* %30372, align 2, !tbaa !399
  %30374 = getelementptr inbounds i16, i16* %30370, i64 -16
  %30375 = bitcast i16* %30374 to <16 x i16>*
  %30376 = load <16 x i16>, <16 x i16>* %30375, align 2, !tbaa !399
  %30377 = zext i32 %.pre-phi3681 to i64
  %30378 = mul nsw i64 %30377, %349
  %30379 = add nsw i64 %30378, %300
  %30380 = getelementptr inbounds i16, i16* %blur_x917, i64 %30379
  %30381 = getelementptr inbounds i16, i16* %30380, i64 -32
  %30382 = bitcast i16* %30381 to <16 x i16>*
  %30383 = load <16 x i16>, <16 x i16>* %30382, align 2, !tbaa !399
  %30384 = getelementptr inbounds i16, i16* %30380, i64 -16
  %30385 = bitcast i16* %30384 to <16 x i16>*
  %30386 = load <16 x i16>, <16 x i16>* %30385, align 2, !tbaa !399
  %30387 = zext i32 %.pre-phi3685 to i64
  %30388 = mul nsw i64 %30387, %349
  %30389 = add nsw i64 %30388, %300
  %30390 = getelementptr inbounds i16, i16* %blur_x917, i64 %30389
  %30391 = getelementptr inbounds i16, i16* %30390, i64 -32
  %30392 = bitcast i16* %30391 to <16 x i16>*
  %30393 = load <16 x i16>, <16 x i16>* %30392, align 2, !tbaa !399
  %30394 = getelementptr inbounds i16, i16* %30390, i64 -16
  %30395 = bitcast i16* %30394 to <16 x i16>*
  %30396 = load <16 x i16>, <16 x i16>* %30395, align 2, !tbaa !399
  %30397 = zext i32 %.pre-phi3689 to i64
  %30398 = mul nsw i64 %30397, %349
  %30399 = add nsw i64 %30398, %300
  %30400 = getelementptr inbounds i16, i16* %blur_x917, i64 %30399
  %30401 = getelementptr inbounds i16, i16* %30400, i64 -32
  %30402 = bitcast i16* %30401 to <16 x i16>*
  %30403 = load <16 x i16>, <16 x i16>* %30402, align 2, !tbaa !399
  %30404 = getelementptr inbounds i16, i16* %30400, i64 -16
  %30405 = bitcast i16* %30404 to <16 x i16>*
  %30406 = load <16 x i16>, <16 x i16>* %30405, align 2, !tbaa !399
  %30407 = mul nsw i64 %30348, %349
  %30408 = add nsw i64 %30407, %300
  %30409 = getelementptr inbounds i16, i16* %blur_x917, i64 %30408
  %30410 = getelementptr inbounds i16, i16* %30409, i64 -32
  %30411 = bitcast i16* %30410 to <16 x i16>*
  %30412 = load <16 x i16>, <16 x i16>* %30411, align 2, !tbaa !399
  %30413 = getelementptr inbounds i16, i16* %30409, i64 -16
  %30414 = bitcast i16* %30413 to <16 x i16>*
  %30415 = load <16 x i16>, <16 x i16>* %30414, align 2, !tbaa !399
  %30416 = zext i32 %.pre-phi3693 to i64
  %30417 = mul nsw i64 %30416, %349
  %30418 = add nsw i64 %30417, %300
  %30419 = getelementptr inbounds i16, i16* %blur_x917, i64 %30418
  %30420 = getelementptr inbounds i16, i16* %30419, i64 -32
  %30421 = bitcast i16* %30420 to <16 x i16>*
  %30422 = load <16 x i16>, <16 x i16>* %30421, align 2, !tbaa !399
  %30423 = getelementptr inbounds i16, i16* %30419, i64 -16
  %30424 = bitcast i16* %30423 to <16 x i16>*
  %30425 = load <16 x i16>, <16 x i16>* %30424, align 2, !tbaa !399
  %30426 = add <16 x i16> %30373, %30363
  %30427 = add <16 x i16> %30426, %30383
  %30428 = add <16 x i16> %30427, %30393
  %30429 = add <16 x i16> %30428, %30403
  %30430 = add <16 x i16> %30429, %30412
  %30431 = add <16 x i16> %30430, %30422
  %30432 = add <16 x i16> %30376, %30366
  %30433 = add <16 x i16> %30432, %30386
  %30434 = add <16 x i16> %30433, %30396
  %30435 = add <16 x i16> %30434, %30406
  %30436 = add <16 x i16> %30435, %30415
  %30437 = add <16 x i16> %30436, %30425
  %30438 = shufflevector <16 x i16> %30431, <16 x i16> %30437, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30439 = udiv <32 x i16> %30438, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %30440 = shufflevector <32 x i16> %30439, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30441 = sext i32 %a393 to i64
  %30442 = add nsw i64 %30441, 17
  %30443 = mul nsw i64 %30442, %350
  %30444 = add nsw i64 %352, %30443
  %30445 = getelementptr inbounds i16, i16* %267, i64 %30444
  %30446 = getelementptr inbounds i16, i16* %30445, i64 -32
  %30447 = bitcast i16* %30446 to <16 x i16>*
  store <16 x i16> %30440, <16 x i16>* %30447, align 2, !tbaa !401
  %30448 = shufflevector <32 x i16> %30439, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30449 = getelementptr inbounds i16, i16* %30445, i64 -16
  %30450 = bitcast i16* %30449 to <16 x i16>*
  store <16 x i16> %30448, <16 x i16>* %30450, align 2, !tbaa !401
  br label %after_bb1828

"for blur_y.s0.x.x.rebased1843":                  ; preds = %"for blur_y.s0.x.x.rebased1843.preheader", %"consume blur_x1851"
  %indvars.iv3542 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1843.preheader" ], [ %indvars.iv.next3543, %"consume blur_x1851" ]
  %30451 = add nsw i64 %indvars.iv3542, %307
  %30452 = icmp slt i64 %30451, 1
  %30453 = trunc i64 %30451 to i32
  %30454 = shl nsw i32 %30453, 5
  %30455 = icmp sgt i32 %202, %30454
  %30456 = or i1 %30452, %30455
  br i1 %30456, label %"produce blur_x1849", label %"for blur_y.s0.x.x.rebased1843.consume blur_x1851_crit_edge"

"for blur_y.s0.x.x.rebased1843.consume blur_x1851_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1843"
  %.pre3732 = shl nsw i64 %30451, 5
  br label %"consume blur_x1851"

"end for blur_y.s0.x.x.rebased1844":              ; preds = %"consume blur_x1851", %after_bb1828
  br i1 %308, label %"for blur_y.s0.x.x.rebased1859.preheader", label %"end for blur_y.s0.x.x.rebased1860", !prof !386

"for blur_y.s0.x.x.rebased1859.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1844"
  %30457 = sext i32 %t17781151 to i64
  %30458 = zext i32 %.pre-phi3677 to i64
  %30459 = mul nsw i64 %30458, %353
  %30460 = sub nsw i64 %30459, %302
  %30461 = zext i32 %.pre-phi3673 to i64
  %30462 = mul nsw i64 %30461, %353
  %30463 = sub nsw i64 %30462, %302
  %30464 = zext i32 %.pre-phi3681 to i64
  %30465 = mul nsw i64 %30464, %353
  %30466 = sub nsw i64 %30465, %302
  %30467 = zext i32 %.pre-phi3685 to i64
  %30468 = mul nsw i64 %30467, %353
  %30469 = sub nsw i64 %30468, %302
  %30470 = zext i32 %.pre-phi3689 to i64
  %30471 = mul nsw i64 %30470, %353
  %30472 = sub nsw i64 %30471, %302
  %30473 = zext i32 %.pre-phi3699 to i64
  %30474 = mul nsw i64 %30473, %353
  %30475 = sub nsw i64 %30474, %302
  %30476 = zext i32 %.pre-phi3693 to i64
  %30477 = mul nsw i64 %30476, %353
  %30478 = sub nsw i64 %30477, %302
  %30479 = sext i32 %a393 to i64
  %30480 = add nsw i64 %30479, 17
  %30481 = mul nsw i64 %30480, %350
  %30482 = add nsw i64 %30481, %354
  br label %"for blur_y.s0.x.x.rebased1859"

"produce blur_x1849":                             ; preds = %"for blur_y.s0.x.x.rebased1843"
  %t10241850 = add nsw i32 %455, %30454
  %30483 = sext i32 %t10241850 to i64
  %30484 = getelementptr inbounds i16, i16* %read_input860, i64 %30483
  %30485 = getelementptr inbounds i16, i16* %30484, i64 1
  %30486 = bitcast i16* %30485 to <16 x i16>*
  %30487 = load <16 x i16>, <16 x i16>* %30486, align 2, !tbaa !396
  %30488 = getelementptr inbounds i16, i16* %30484, i64 17
  %30489 = bitcast i16* %30488 to <16 x i16>*
  %30490 = load <16 x i16>, <16 x i16>* %30489, align 2, !tbaa !396
  %30491 = bitcast i16* %30484 to <16 x i16>*
  %30492 = load <16 x i16>, <16 x i16>* %30491, align 2, !tbaa !396
  %30493 = getelementptr inbounds i16, i16* %30484, i64 16
  %30494 = bitcast i16* %30493 to <16 x i16>*
  %30495 = load <16 x i16>, <16 x i16>* %30494, align 2, !tbaa !396
  %30496 = getelementptr inbounds i16, i16* %30484, i64 2
  %30497 = bitcast i16* %30496 to <16 x i16>*
  %30498 = load <16 x i16>, <16 x i16>* %30497, align 2, !tbaa !396
  %30499 = getelementptr inbounds i16, i16* %30484, i64 18
  %30500 = bitcast i16* %30499 to <16 x i16>*
  %30501 = load <16 x i16>, <16 x i16>* %30500, align 2, !tbaa !396
  %30502 = getelementptr inbounds i16, i16* %30484, i64 3
  %30503 = bitcast i16* %30502 to <16 x i16>*
  %30504 = load <16 x i16>, <16 x i16>* %30503, align 2, !tbaa !396
  %30505 = getelementptr inbounds i16, i16* %30484, i64 19
  %30506 = bitcast i16* %30505 to <16 x i16>*
  %30507 = load <16 x i16>, <16 x i16>* %30506, align 2, !tbaa !396
  %30508 = getelementptr inbounds i16, i16* %30484, i64 4
  %30509 = bitcast i16* %30508 to <16 x i16>*
  %30510 = load <16 x i16>, <16 x i16>* %30509, align 2, !tbaa !396
  %30511 = getelementptr inbounds i16, i16* %30484, i64 20
  %30512 = bitcast i16* %30511 to <16 x i16>*
  %30513 = load <16 x i16>, <16 x i16>* %30512, align 2, !tbaa !396
  %30514 = getelementptr inbounds i16, i16* %30484, i64 6
  %30515 = bitcast i16* %30514 to <16 x i16>*
  %30516 = load <16 x i16>, <16 x i16>* %30515, align 2, !tbaa !396
  %30517 = getelementptr inbounds i16, i16* %30484, i64 22
  %30518 = bitcast i16* %30517 to <16 x i16>*
  %30519 = load <16 x i16>, <16 x i16>* %30518, align 2, !tbaa !396
  %30520 = getelementptr inbounds i16, i16* %30484, i64 5
  %30521 = bitcast i16* %30520 to <16 x i16>*
  %30522 = load <16 x i16>, <16 x i16>* %30521, align 2, !tbaa !396
  %30523 = getelementptr inbounds i16, i16* %30484, i64 21
  %30524 = bitcast i16* %30523 to <16 x i16>*
  %30525 = load <16 x i16>, <16 x i16>* %30524, align 2, !tbaa !396
  %30526 = add <16 x i16> %30492, %30487
  %30527 = add <16 x i16> %30526, %30498
  %30528 = add <16 x i16> %30527, %30504
  %30529 = add <16 x i16> %30528, %30510
  %30530 = add <16 x i16> %30529, %30516
  %30531 = add <16 x i16> %30530, %30522
  %30532 = add <16 x i16> %30495, %30490
  %30533 = add <16 x i16> %30532, %30501
  %30534 = add <16 x i16> %30533, %30507
  %30535 = add <16 x i16> %30534, %30513
  %30536 = add <16 x i16> %30535, %30519
  %30537 = add <16 x i16> %30536, %30525
  %30538 = shufflevector <16 x i16> %30531, <16 x i16> %30537, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30539 = udiv <32 x i16> %30538, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %30540 = shufflevector <32 x i16> %30539, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30541 = shl nsw i64 %30451, 5
  %30542 = add nsw i64 %30541, %30264
  %30543 = getelementptr inbounds i16, i16* %blur_x917, i64 %30542
  %30544 = bitcast i16* %30543 to <16 x i16>*
  store <16 x i16> %30540, <16 x i16>* %30544, align 2, !tbaa !399
  %30545 = shufflevector <32 x i16> %30539, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30546 = getelementptr inbounds i16, i16* %30543, i64 16
  %30547 = bitcast i16* %30546 to <16 x i16>*
  store <16 x i16> %30545, <16 x i16>* %30547, align 2, !tbaa !399
  br label %"consume blur_x1851"

"consume blur_x1851":                             ; preds = %"for blur_y.s0.x.x.rebased1843.consume blur_x1851_crit_edge", %"produce blur_x1849"
  %.pre-phi3733 = phi i64 [ %.pre3732, %"for blur_y.s0.x.x.rebased1843.consume blur_x1851_crit_edge" ], [ %30541, %"produce blur_x1849" ]
  %30548 = add nsw i64 %30267, %.pre-phi3733
  %30549 = getelementptr inbounds i16, i16* %blur_x917, i64 %30548
  %30550 = bitcast i16* %30549 to <16 x i16>*
  %30551 = load <16 x i16>, <16 x i16>* %30550, align 2, !tbaa !399
  %30552 = getelementptr inbounds i16, i16* %30549, i64 16
  %30553 = bitcast i16* %30552 to <16 x i16>*
  %30554 = load <16 x i16>, <16 x i16>* %30553, align 2, !tbaa !399
  %30555 = add nsw i64 %30270, %.pre-phi3733
  %30556 = getelementptr inbounds i16, i16* %blur_x917, i64 %30555
  %30557 = bitcast i16* %30556 to <16 x i16>*
  %30558 = load <16 x i16>, <16 x i16>* %30557, align 2, !tbaa !399
  %30559 = getelementptr inbounds i16, i16* %30556, i64 16
  %30560 = bitcast i16* %30559 to <16 x i16>*
  %30561 = load <16 x i16>, <16 x i16>* %30560, align 2, !tbaa !399
  %30562 = add nsw i64 %30273, %.pre-phi3733
  %30563 = getelementptr inbounds i16, i16* %blur_x917, i64 %30562
  %30564 = bitcast i16* %30563 to <16 x i16>*
  %30565 = load <16 x i16>, <16 x i16>* %30564, align 2, !tbaa !399
  %30566 = getelementptr inbounds i16, i16* %30563, i64 16
  %30567 = bitcast i16* %30566 to <16 x i16>*
  %30568 = load <16 x i16>, <16 x i16>* %30567, align 2, !tbaa !399
  %30569 = add nsw i64 %30276, %.pre-phi3733
  %30570 = getelementptr inbounds i16, i16* %blur_x917, i64 %30569
  %30571 = bitcast i16* %30570 to <16 x i16>*
  %30572 = load <16 x i16>, <16 x i16>* %30571, align 2, !tbaa !399
  %30573 = getelementptr inbounds i16, i16* %30570, i64 16
  %30574 = bitcast i16* %30573 to <16 x i16>*
  %30575 = load <16 x i16>, <16 x i16>* %30574, align 2, !tbaa !399
  %30576 = add nsw i64 %30279, %.pre-phi3733
  %30577 = getelementptr inbounds i16, i16* %blur_x917, i64 %30576
  %30578 = bitcast i16* %30577 to <16 x i16>*
  %30579 = load <16 x i16>, <16 x i16>* %30578, align 2, !tbaa !399
  %30580 = getelementptr inbounds i16, i16* %30577, i64 16
  %30581 = bitcast i16* %30580 to <16 x i16>*
  %30582 = load <16 x i16>, <16 x i16>* %30581, align 2, !tbaa !399
  %30583 = add nsw i64 %30282, %.pre-phi3733
  %30584 = getelementptr inbounds i16, i16* %blur_x917, i64 %30583
  %30585 = bitcast i16* %30584 to <16 x i16>*
  %30586 = load <16 x i16>, <16 x i16>* %30585, align 2, !tbaa !399
  %30587 = getelementptr inbounds i16, i16* %30584, i64 16
  %30588 = bitcast i16* %30587 to <16 x i16>*
  %30589 = load <16 x i16>, <16 x i16>* %30588, align 2, !tbaa !399
  %30590 = add nsw i64 %30285, %.pre-phi3733
  %30591 = getelementptr inbounds i16, i16* %blur_x917, i64 %30590
  %30592 = bitcast i16* %30591 to <16 x i16>*
  %30593 = load <16 x i16>, <16 x i16>* %30592, align 2, !tbaa !399
  %30594 = getelementptr inbounds i16, i16* %30591, i64 16
  %30595 = bitcast i16* %30594 to <16 x i16>*
  %30596 = load <16 x i16>, <16 x i16>* %30595, align 2, !tbaa !399
  %30597 = add <16 x i16> %30558, %30551
  %30598 = add <16 x i16> %30597, %30565
  %30599 = add <16 x i16> %30598, %30572
  %30600 = add <16 x i16> %30599, %30579
  %30601 = add <16 x i16> %30600, %30586
  %30602 = add <16 x i16> %30601, %30593
  %30603 = add <16 x i16> %30561, %30554
  %30604 = add <16 x i16> %30603, %30568
  %30605 = add <16 x i16> %30604, %30575
  %30606 = add <16 x i16> %30605, %30582
  %30607 = add <16 x i16> %30606, %30589
  %30608 = add <16 x i16> %30607, %30596
  %30609 = shufflevector <16 x i16> %30602, <16 x i16> %30608, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30610 = udiv <32 x i16> %30609, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %30611 = shufflevector <32 x i16> %30610, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30612 = add nsw i64 %30289, %.pre-phi3733
  %30613 = getelementptr inbounds i16, i16* %267, i64 %30612
  %30614 = bitcast i16* %30613 to <16 x i16>*
  store <16 x i16> %30611, <16 x i16>* %30614, align 2, !tbaa !401
  %30615 = shufflevector <32 x i16> %30610, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30616 = getelementptr inbounds i16, i16* %30613, i64 16
  %30617 = bitcast i16* %30616 to <16 x i16>*
  store <16 x i16> %30615, <16 x i16>* %30617, align 2, !tbaa !401
  %indvars.iv.next3543 = add nuw nsw i64 %indvars.iv3542, 1
  %.not2701 = icmp eq i64 %indvars.iv.next3543, %546
  br i1 %.not2701, label %"end for blur_y.s0.x.x.rebased1844", label %"for blur_y.s0.x.x.rebased1843"

"for blur_y.s0.x.x.rebased1859":                  ; preds = %"for blur_y.s0.x.x.rebased1859.preheader", %"consume blur_x1870"
  %blur_y.s0.x.x.rebased1861 = phi i32 [ %30760, %"consume blur_x1870" ], [ 0, %"for blur_y.s0.x.x.rebased1859.preheader" ]
  %30618 = add nsw i32 %blur_y.s0.x.x.rebased1861, %t1670852
  %a4272 = shl nsw i32 %30618, 5
  %30619 = icmp sgt i32 %t1691, %a4272
  %blur_y.s0.x.v0.base.s1862 = select i1 %30619, i32 %a4272, i32 %t1691
  %30620 = icmp slt i32 %30618, 1
  %30621 = icmp sgt i32 %202, %a4272
  %30622 = or i1 %30620, %30621
  br i1 %30622, label %"produce blur_x1867", label %"consume blur_x1870"

"end for blur_y.s0.x.x.rebased1860":              ; preds = %"consume blur_x1870", %"end for blur_y.s0.x.x.rebased1844"
  br i1 %233, label %"produce blur_x1874", label %after_bb1871

"produce blur_x1867":                             ; preds = %"for blur_y.s0.x.x.rebased1859"
  %30623 = icmp slt i32 %blur_y.s0.x.v0.base.s1862, %202
  %blur_x.s0.x.v1.base.s1868 = select i1 %30623, i32 %blur_y.s0.x.v0.base.s1862, i32 %202
  %t10291869 = add nsw i32 %455, %blur_x.s0.x.v1.base.s1868
  %30624 = sext i32 %t10291869 to i64
  %30625 = getelementptr inbounds i16, i16* %read_input860, i64 %30624
  %30626 = getelementptr inbounds i16, i16* %30625, i64 1
  %30627 = bitcast i16* %30626 to <16 x i16>*
  %30628 = load <16 x i16>, <16 x i16>* %30627, align 2, !tbaa !396
  %30629 = getelementptr inbounds i16, i16* %30625, i64 17
  %30630 = bitcast i16* %30629 to <16 x i16>*
  %30631 = load <16 x i16>, <16 x i16>* %30630, align 2, !tbaa !396
  %30632 = bitcast i16* %30625 to <16 x i16>*
  %30633 = load <16 x i16>, <16 x i16>* %30632, align 2, !tbaa !396
  %30634 = getelementptr inbounds i16, i16* %30625, i64 16
  %30635 = bitcast i16* %30634 to <16 x i16>*
  %30636 = load <16 x i16>, <16 x i16>* %30635, align 2, !tbaa !396
  %30637 = getelementptr inbounds i16, i16* %30625, i64 2
  %30638 = bitcast i16* %30637 to <16 x i16>*
  %30639 = load <16 x i16>, <16 x i16>* %30638, align 2, !tbaa !396
  %30640 = getelementptr inbounds i16, i16* %30625, i64 18
  %30641 = bitcast i16* %30640 to <16 x i16>*
  %30642 = load <16 x i16>, <16 x i16>* %30641, align 2, !tbaa !396
  %30643 = getelementptr inbounds i16, i16* %30625, i64 3
  %30644 = bitcast i16* %30643 to <16 x i16>*
  %30645 = load <16 x i16>, <16 x i16>* %30644, align 2, !tbaa !396
  %30646 = getelementptr inbounds i16, i16* %30625, i64 19
  %30647 = bitcast i16* %30646 to <16 x i16>*
  %30648 = load <16 x i16>, <16 x i16>* %30647, align 2, !tbaa !396
  %30649 = getelementptr inbounds i16, i16* %30625, i64 4
  %30650 = bitcast i16* %30649 to <16 x i16>*
  %30651 = load <16 x i16>, <16 x i16>* %30650, align 2, !tbaa !396
  %30652 = getelementptr inbounds i16, i16* %30625, i64 20
  %30653 = bitcast i16* %30652 to <16 x i16>*
  %30654 = load <16 x i16>, <16 x i16>* %30653, align 2, !tbaa !396
  %30655 = getelementptr inbounds i16, i16* %30625, i64 6
  %30656 = bitcast i16* %30655 to <16 x i16>*
  %30657 = load <16 x i16>, <16 x i16>* %30656, align 2, !tbaa !396
  %30658 = getelementptr inbounds i16, i16* %30625, i64 22
  %30659 = bitcast i16* %30658 to <16 x i16>*
  %30660 = load <16 x i16>, <16 x i16>* %30659, align 2, !tbaa !396
  %30661 = getelementptr inbounds i16, i16* %30625, i64 5
  %30662 = bitcast i16* %30661 to <16 x i16>*
  %30663 = load <16 x i16>, <16 x i16>* %30662, align 2, !tbaa !396
  %30664 = getelementptr inbounds i16, i16* %30625, i64 21
  %30665 = bitcast i16* %30664 to <16 x i16>*
  %30666 = load <16 x i16>, <16 x i16>* %30665, align 2, !tbaa !396
  %30667 = add <16 x i16> %30633, %30628
  %30668 = add <16 x i16> %30667, %30639
  %30669 = add <16 x i16> %30668, %30645
  %30670 = add <16 x i16> %30669, %30651
  %30671 = add <16 x i16> %30670, %30657
  %30672 = add <16 x i16> %30671, %30663
  %30673 = add <16 x i16> %30636, %30631
  %30674 = add <16 x i16> %30673, %30642
  %30675 = add <16 x i16> %30674, %30648
  %30676 = add <16 x i16> %30675, %30654
  %30677 = add <16 x i16> %30676, %30660
  %30678 = add <16 x i16> %30677, %30666
  %30679 = shufflevector <16 x i16> %30672, <16 x i16> %30678, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30680 = udiv <32 x i16> %30679, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %30681 = shufflevector <32 x i16> %30680, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30682 = sext i32 %blur_x.s0.x.v1.base.s1868 to i64
  %30683 = add nsw i64 %30682, %30457
  %30684 = getelementptr inbounds i16, i16* %blur_x917, i64 %30683
  %30685 = bitcast i16* %30684 to <16 x i16>*
  store <16 x i16> %30681, <16 x i16>* %30685, align 2, !tbaa !399
  %30686 = shufflevector <32 x i16> %30680, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30687 = getelementptr inbounds i16, i16* %30684, i64 16
  %30688 = bitcast i16* %30687 to <16 x i16>*
  store <16 x i16> %30686, <16 x i16>* %30688, align 2, !tbaa !399
  br label %"consume blur_x1870"

"consume blur_x1870":                             ; preds = %"for blur_y.s0.x.x.rebased1859", %"produce blur_x1867"
  %30689 = sext i32 %blur_y.s0.x.v0.base.s1862 to i64
  %30690 = add nsw i64 %30460, %30689
  %30691 = getelementptr inbounds i16, i16* %blur_x917, i64 %30690
  %30692 = bitcast i16* %30691 to <16 x i16>*
  %30693 = load <16 x i16>, <16 x i16>* %30692, align 2, !tbaa !399
  %30694 = getelementptr inbounds i16, i16* %30691, i64 16
  %30695 = bitcast i16* %30694 to <16 x i16>*
  %30696 = load <16 x i16>, <16 x i16>* %30695, align 2, !tbaa !399
  %30697 = add nsw i64 %30463, %30689
  %30698 = getelementptr inbounds i16, i16* %blur_x917, i64 %30697
  %30699 = bitcast i16* %30698 to <16 x i16>*
  %30700 = load <16 x i16>, <16 x i16>* %30699, align 2, !tbaa !399
  %30701 = getelementptr inbounds i16, i16* %30698, i64 16
  %30702 = bitcast i16* %30701 to <16 x i16>*
  %30703 = load <16 x i16>, <16 x i16>* %30702, align 2, !tbaa !399
  %30704 = add nsw i64 %30466, %30689
  %30705 = getelementptr inbounds i16, i16* %blur_x917, i64 %30704
  %30706 = bitcast i16* %30705 to <16 x i16>*
  %30707 = load <16 x i16>, <16 x i16>* %30706, align 2, !tbaa !399
  %30708 = getelementptr inbounds i16, i16* %30705, i64 16
  %30709 = bitcast i16* %30708 to <16 x i16>*
  %30710 = load <16 x i16>, <16 x i16>* %30709, align 2, !tbaa !399
  %30711 = add nsw i64 %30469, %30689
  %30712 = getelementptr inbounds i16, i16* %blur_x917, i64 %30711
  %30713 = bitcast i16* %30712 to <16 x i16>*
  %30714 = load <16 x i16>, <16 x i16>* %30713, align 2, !tbaa !399
  %30715 = getelementptr inbounds i16, i16* %30712, i64 16
  %30716 = bitcast i16* %30715 to <16 x i16>*
  %30717 = load <16 x i16>, <16 x i16>* %30716, align 2, !tbaa !399
  %30718 = add nsw i64 %30472, %30689
  %30719 = getelementptr inbounds i16, i16* %blur_x917, i64 %30718
  %30720 = bitcast i16* %30719 to <16 x i16>*
  %30721 = load <16 x i16>, <16 x i16>* %30720, align 2, !tbaa !399
  %30722 = getelementptr inbounds i16, i16* %30719, i64 16
  %30723 = bitcast i16* %30722 to <16 x i16>*
  %30724 = load <16 x i16>, <16 x i16>* %30723, align 2, !tbaa !399
  %30725 = add nsw i64 %30475, %30689
  %30726 = getelementptr inbounds i16, i16* %blur_x917, i64 %30725
  %30727 = bitcast i16* %30726 to <16 x i16>*
  %30728 = load <16 x i16>, <16 x i16>* %30727, align 2, !tbaa !399
  %30729 = getelementptr inbounds i16, i16* %30726, i64 16
  %30730 = bitcast i16* %30729 to <16 x i16>*
  %30731 = load <16 x i16>, <16 x i16>* %30730, align 2, !tbaa !399
  %30732 = add nsw i64 %30478, %30689
  %30733 = getelementptr inbounds i16, i16* %blur_x917, i64 %30732
  %30734 = bitcast i16* %30733 to <16 x i16>*
  %30735 = load <16 x i16>, <16 x i16>* %30734, align 2, !tbaa !399
  %30736 = getelementptr inbounds i16, i16* %30733, i64 16
  %30737 = bitcast i16* %30736 to <16 x i16>*
  %30738 = load <16 x i16>, <16 x i16>* %30737, align 2, !tbaa !399
  %30739 = add <16 x i16> %30700, %30693
  %30740 = add <16 x i16> %30739, %30707
  %30741 = add <16 x i16> %30740, %30714
  %30742 = add <16 x i16> %30741, %30721
  %30743 = add <16 x i16> %30742, %30728
  %30744 = add <16 x i16> %30743, %30735
  %30745 = add <16 x i16> %30703, %30696
  %30746 = add <16 x i16> %30745, %30710
  %30747 = add <16 x i16> %30746, %30717
  %30748 = add <16 x i16> %30747, %30724
  %30749 = add <16 x i16> %30748, %30731
  %30750 = add <16 x i16> %30749, %30738
  %30751 = shufflevector <16 x i16> %30744, <16 x i16> %30750, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30752 = udiv <32 x i16> %30751, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %30753 = shufflevector <32 x i16> %30752, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30754 = add nsw i64 %30482, %30689
  %30755 = getelementptr inbounds i16, i16* %267, i64 %30754
  %30756 = bitcast i16* %30755 to <16 x i16>*
  store <16 x i16> %30753, <16 x i16>* %30756, align 2, !tbaa !401
  %30757 = shufflevector <32 x i16> %30752, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30758 = getelementptr inbounds i16, i16* %30755, i64 16
  %30759 = bitcast i16* %30758 to <16 x i16>*
  store <16 x i16> %30757, <16 x i16>* %30759, align 2, !tbaa !401
  %30760 = add nuw nsw i32 %blur_y.s0.x.x.rebased1861, 1
  %.not2700 = icmp eq i32 %30760, %t1727936
  br i1 %.not2700, label %"end for blur_y.s0.x.x.rebased1860", label %"for blur_y.s0.x.x.rebased1859"

after_bb1871:                                     ; preds = %"end for blur_y.s0.x.x.rebased1860", %"produce blur_x1874"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1886.preheader", label %"end for blur_y.s0.x.x.rebased1887", !prof !386

"for blur_y.s0.x.x.rebased1886.preheader":        ; preds = %after_bb1871
  %30761 = sext i32 %t1726924 to i64
  %30762 = zext i32 %.pre-phi3681 to i64
  %30763 = mul nsw i64 %30762, %353
  %30764 = sub nsw i64 %30763, %302
  %30765 = zext i32 %.pre-phi3677 to i64
  %30766 = mul nsw i64 %30765, %353
  %30767 = sub nsw i64 %30766, %302
  %30768 = zext i32 %.pre-phi3685 to i64
  %30769 = mul nsw i64 %30768, %353
  %30770 = sub nsw i64 %30769, %302
  %30771 = zext i32 %.pre-phi3689 to i64
  %30772 = mul nsw i64 %30771, %353
  %30773 = sub nsw i64 %30772, %302
  %30774 = zext i32 %.pre-phi3693 to i64
  %30775 = mul nsw i64 %30774, %353
  %30776 = sub nsw i64 %30775, %302
  %30777 = zext i32 %.pre-phi3669 to i64
  %30778 = mul nsw i64 %30777, %353
  %30779 = sub nsw i64 %30778, %302
  %30780 = zext i32 %.pre-phi3699 to i64
  %30781 = mul nsw i64 %30780, %353
  %30782 = sub nsw i64 %30781, %302
  %30783 = sext i32 %a393 to i64
  %30784 = add nsw i64 %30783, 18
  %30785 = mul nsw i64 %30784, %350
  %30786 = add nsw i64 %30785, %354
  br label %"for blur_y.s0.x.x.rebased1886"

"produce blur_x1874":                             ; preds = %"end for blur_y.s0.x.x.rebased1860"
  %30787 = getelementptr inbounds i16, i16* %read_input860, i64 %459
  %30788 = getelementptr inbounds i16, i16* %30787, i64 -31
  %30789 = bitcast i16* %30788 to <16 x i16>*
  %30790 = load <16 x i16>, <16 x i16>* %30789, align 2, !tbaa !396
  %30791 = getelementptr inbounds i16, i16* %30787, i64 -15
  %30792 = bitcast i16* %30791 to <16 x i16>*
  %30793 = load <16 x i16>, <16 x i16>* %30792, align 2, !tbaa !396
  %30794 = getelementptr inbounds i16, i16* %30787, i64 -32
  %30795 = bitcast i16* %30794 to <16 x i16>*
  %30796 = load <16 x i16>, <16 x i16>* %30795, align 2, !tbaa !396
  %30797 = getelementptr inbounds i16, i16* %30787, i64 -16
  %30798 = bitcast i16* %30797 to <16 x i16>*
  %30799 = load <16 x i16>, <16 x i16>* %30798, align 2, !tbaa !396
  %30800 = getelementptr inbounds i16, i16* %30787, i64 -30
  %30801 = bitcast i16* %30800 to <16 x i16>*
  %30802 = load <16 x i16>, <16 x i16>* %30801, align 2, !tbaa !396
  %30803 = getelementptr inbounds i16, i16* %30787, i64 -14
  %30804 = bitcast i16* %30803 to <16 x i16>*
  %30805 = load <16 x i16>, <16 x i16>* %30804, align 2, !tbaa !396
  %30806 = getelementptr inbounds i16, i16* %30787, i64 -29
  %30807 = bitcast i16* %30806 to <16 x i16>*
  %30808 = load <16 x i16>, <16 x i16>* %30807, align 2, !tbaa !396
  %30809 = getelementptr inbounds i16, i16* %30787, i64 -13
  %30810 = bitcast i16* %30809 to <16 x i16>*
  %30811 = load <16 x i16>, <16 x i16>* %30810, align 2, !tbaa !396
  %30812 = getelementptr inbounds i16, i16* %30787, i64 -28
  %30813 = bitcast i16* %30812 to <16 x i16>*
  %30814 = load <16 x i16>, <16 x i16>* %30813, align 2, !tbaa !396
  %30815 = getelementptr inbounds i16, i16* %30787, i64 -12
  %30816 = bitcast i16* %30815 to <16 x i16>*
  %30817 = load <16 x i16>, <16 x i16>* %30816, align 2, !tbaa !396
  %30818 = getelementptr inbounds i16, i16* %30787, i64 -26
  %30819 = bitcast i16* %30818 to <16 x i16>*
  %30820 = load <16 x i16>, <16 x i16>* %30819, align 2, !tbaa !396
  %30821 = getelementptr inbounds i16, i16* %30787, i64 -10
  %30822 = bitcast i16* %30821 to <16 x i16>*
  %30823 = load <16 x i16>, <16 x i16>* %30822, align 2, !tbaa !396
  %30824 = getelementptr inbounds i16, i16* %30787, i64 -27
  %30825 = bitcast i16* %30824 to <16 x i16>*
  %30826 = load <16 x i16>, <16 x i16>* %30825, align 2, !tbaa !396
  %30827 = getelementptr inbounds i16, i16* %30787, i64 -11
  %30828 = bitcast i16* %30827 to <16 x i16>*
  %30829 = load <16 x i16>, <16 x i16>* %30828, align 2, !tbaa !396
  %30830 = add <16 x i16> %30796, %30790
  %30831 = add <16 x i16> %30830, %30802
  %30832 = add <16 x i16> %30831, %30808
  %30833 = add <16 x i16> %30832, %30814
  %30834 = add <16 x i16> %30833, %30820
  %30835 = add <16 x i16> %30834, %30826
  %30836 = add <16 x i16> %30799, %30793
  %30837 = add <16 x i16> %30836, %30805
  %30838 = add <16 x i16> %30837, %30811
  %30839 = add <16 x i16> %30838, %30817
  %30840 = add <16 x i16> %30839, %30823
  %30841 = add <16 x i16> %30840, %30829
  %30842 = shufflevector <16 x i16> %30835, <16 x i16> %30841, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30843 = udiv <32 x i16> %30842, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %30844 = shufflevector <32 x i16> %30843, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30845 = zext i32 %.pre-phi3669 to i64
  %30846 = mul nsw i64 %303, %30845
  %30847 = add nsw i64 %305, %30846
  %30848 = getelementptr inbounds i16, i16* %blur_x917, i64 %30847
  %30849 = getelementptr inbounds i16, i16* %30848, i64 -32
  %30850 = bitcast i16* %30849 to <16 x i16>*
  store <16 x i16> %30844, <16 x i16>* %30850, align 2, !tbaa !399
  %30851 = shufflevector <32 x i16> %30843, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30852 = getelementptr inbounds i16, i16* %30848, i64 -16
  %30853 = bitcast i16* %30852 to <16 x i16>*
  store <16 x i16> %30851, <16 x i16>* %30853, align 2, !tbaa !399
  %30854 = zext i32 %.pre-phi3681 to i64
  %30855 = mul nsw i64 %30854, %349
  %30856 = add nsw i64 %30855, %300
  %30857 = getelementptr inbounds i16, i16* %blur_x917, i64 %30856
  %30858 = getelementptr inbounds i16, i16* %30857, i64 -32
  %30859 = bitcast i16* %30858 to <16 x i16>*
  %30860 = load <16 x i16>, <16 x i16>* %30859, align 2, !tbaa !399
  %30861 = getelementptr inbounds i16, i16* %30857, i64 -16
  %30862 = bitcast i16* %30861 to <16 x i16>*
  %30863 = load <16 x i16>, <16 x i16>* %30862, align 2, !tbaa !399
  %30864 = zext i32 %.pre-phi3677 to i64
  %30865 = mul nsw i64 %30864, %349
  %30866 = add nsw i64 %30865, %300
  %30867 = getelementptr inbounds i16, i16* %blur_x917, i64 %30866
  %30868 = getelementptr inbounds i16, i16* %30867, i64 -32
  %30869 = bitcast i16* %30868 to <16 x i16>*
  %30870 = load <16 x i16>, <16 x i16>* %30869, align 2, !tbaa !399
  %30871 = getelementptr inbounds i16, i16* %30867, i64 -16
  %30872 = bitcast i16* %30871 to <16 x i16>*
  %30873 = load <16 x i16>, <16 x i16>* %30872, align 2, !tbaa !399
  %30874 = zext i32 %.pre-phi3685 to i64
  %30875 = mul nsw i64 %30874, %349
  %30876 = add nsw i64 %30875, %300
  %30877 = getelementptr inbounds i16, i16* %blur_x917, i64 %30876
  %30878 = getelementptr inbounds i16, i16* %30877, i64 -32
  %30879 = bitcast i16* %30878 to <16 x i16>*
  %30880 = load <16 x i16>, <16 x i16>* %30879, align 2, !tbaa !399
  %30881 = getelementptr inbounds i16, i16* %30877, i64 -16
  %30882 = bitcast i16* %30881 to <16 x i16>*
  %30883 = load <16 x i16>, <16 x i16>* %30882, align 2, !tbaa !399
  %30884 = zext i32 %.pre-phi3689 to i64
  %30885 = mul nsw i64 %30884, %349
  %30886 = add nsw i64 %30885, %300
  %30887 = getelementptr inbounds i16, i16* %blur_x917, i64 %30886
  %30888 = getelementptr inbounds i16, i16* %30887, i64 -32
  %30889 = bitcast i16* %30888 to <16 x i16>*
  %30890 = load <16 x i16>, <16 x i16>* %30889, align 2, !tbaa !399
  %30891 = getelementptr inbounds i16, i16* %30887, i64 -16
  %30892 = bitcast i16* %30891 to <16 x i16>*
  %30893 = load <16 x i16>, <16 x i16>* %30892, align 2, !tbaa !399
  %30894 = zext i32 %.pre-phi3693 to i64
  %30895 = mul nsw i64 %30894, %349
  %30896 = add nsw i64 %30895, %300
  %30897 = getelementptr inbounds i16, i16* %blur_x917, i64 %30896
  %30898 = getelementptr inbounds i16, i16* %30897, i64 -32
  %30899 = bitcast i16* %30898 to <16 x i16>*
  %30900 = load <16 x i16>, <16 x i16>* %30899, align 2, !tbaa !399
  %30901 = getelementptr inbounds i16, i16* %30897, i64 -16
  %30902 = bitcast i16* %30901 to <16 x i16>*
  %30903 = load <16 x i16>, <16 x i16>* %30902, align 2, !tbaa !399
  %30904 = mul nsw i64 %30845, %349
  %30905 = add nsw i64 %30904, %300
  %30906 = getelementptr inbounds i16, i16* %blur_x917, i64 %30905
  %30907 = getelementptr inbounds i16, i16* %30906, i64 -32
  %30908 = bitcast i16* %30907 to <16 x i16>*
  %30909 = load <16 x i16>, <16 x i16>* %30908, align 2, !tbaa !399
  %30910 = getelementptr inbounds i16, i16* %30906, i64 -16
  %30911 = bitcast i16* %30910 to <16 x i16>*
  %30912 = load <16 x i16>, <16 x i16>* %30911, align 2, !tbaa !399
  %30913 = zext i32 %.pre-phi3699 to i64
  %30914 = mul nsw i64 %30913, %349
  %30915 = add nsw i64 %30914, %300
  %30916 = getelementptr inbounds i16, i16* %blur_x917, i64 %30915
  %30917 = getelementptr inbounds i16, i16* %30916, i64 -32
  %30918 = bitcast i16* %30917 to <16 x i16>*
  %30919 = load <16 x i16>, <16 x i16>* %30918, align 2, !tbaa !399
  %30920 = getelementptr inbounds i16, i16* %30916, i64 -16
  %30921 = bitcast i16* %30920 to <16 x i16>*
  %30922 = load <16 x i16>, <16 x i16>* %30921, align 2, !tbaa !399
  %30923 = add <16 x i16> %30870, %30860
  %30924 = add <16 x i16> %30923, %30880
  %30925 = add <16 x i16> %30924, %30890
  %30926 = add <16 x i16> %30925, %30900
  %30927 = add <16 x i16> %30926, %30909
  %30928 = add <16 x i16> %30927, %30919
  %30929 = add <16 x i16> %30873, %30863
  %30930 = add <16 x i16> %30929, %30883
  %30931 = add <16 x i16> %30930, %30893
  %30932 = add <16 x i16> %30931, %30903
  %30933 = add <16 x i16> %30932, %30912
  %30934 = add <16 x i16> %30933, %30922
  %30935 = shufflevector <16 x i16> %30928, <16 x i16> %30934, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30936 = udiv <32 x i16> %30935, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %30937 = shufflevector <32 x i16> %30936, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30938 = sext i32 %a393 to i64
  %30939 = add nsw i64 %30938, 18
  %30940 = mul nsw i64 %30939, %350
  %30941 = add nsw i64 %352, %30940
  %30942 = getelementptr inbounds i16, i16* %267, i64 %30941
  %30943 = getelementptr inbounds i16, i16* %30942, i64 -32
  %30944 = bitcast i16* %30943 to <16 x i16>*
  store <16 x i16> %30937, <16 x i16>* %30944, align 2, !tbaa !401
  %30945 = shufflevector <32 x i16> %30936, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30946 = getelementptr inbounds i16, i16* %30942, i64 -16
  %30947 = bitcast i16* %30946 to <16 x i16>*
  store <16 x i16> %30945, <16 x i16>* %30947, align 2, !tbaa !401
  br label %after_bb1871

"for blur_y.s0.x.x.rebased1886":                  ; preds = %"for blur_y.s0.x.x.rebased1886.preheader", %"consume blur_x1894"
  %indvars.iv3544 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1886.preheader" ], [ %indvars.iv.next3545, %"consume blur_x1894" ]
  %30948 = add nsw i64 %indvars.iv3544, %307
  %30949 = icmp slt i64 %30948, 1
  %30950 = trunc i64 %30948 to i32
  %30951 = shl nsw i32 %30950, 5
  %30952 = icmp sgt i32 %202, %30951
  %30953 = or i1 %30949, %30952
  br i1 %30953, label %"produce blur_x1892", label %"for blur_y.s0.x.x.rebased1886.consume blur_x1894_crit_edge"

"for blur_y.s0.x.x.rebased1886.consume blur_x1894_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1886"
  %.pre3734 = shl nsw i64 %30948, 5
  br label %"consume blur_x1894"

"end for blur_y.s0.x.x.rebased1887":              ; preds = %"consume blur_x1894", %after_bb1871
  br i1 %308, label %"for blur_y.s0.x.x.rebased1902.preheader", label %"end for blur_y.s0.x.x.rebased1903", !prof !386

"for blur_y.s0.x.x.rebased1902.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1887"
  %30954 = sext i32 %t1726924 to i64
  %30955 = zext i32 %.pre-phi3681 to i64
  %30956 = mul nsw i64 %30955, %353
  %30957 = sub nsw i64 %30956, %302
  %30958 = zext i32 %.pre-phi3677 to i64
  %30959 = mul nsw i64 %30958, %353
  %30960 = sub nsw i64 %30959, %302
  %30961 = zext i32 %.pre-phi3685 to i64
  %30962 = mul nsw i64 %30961, %353
  %30963 = sub nsw i64 %30962, %302
  %30964 = zext i32 %.pre-phi3689 to i64
  %30965 = mul nsw i64 %30964, %353
  %30966 = sub nsw i64 %30965, %302
  %30967 = zext i32 %.pre-phi3693 to i64
  %30968 = mul nsw i64 %30967, %353
  %30969 = sub nsw i64 %30968, %302
  %30970 = zext i32 %.pre-phi3669 to i64
  %30971 = mul nsw i64 %30970, %353
  %30972 = sub nsw i64 %30971, %302
  %30973 = zext i32 %.pre-phi3699 to i64
  %30974 = mul nsw i64 %30973, %353
  %30975 = sub nsw i64 %30974, %302
  %30976 = sext i32 %a393 to i64
  %30977 = add nsw i64 %30976, 18
  %30978 = mul nsw i64 %30977, %350
  %30979 = add nsw i64 %30978, %354
  br label %"for blur_y.s0.x.x.rebased1902"

"produce blur_x1892":                             ; preds = %"for blur_y.s0.x.x.rebased1886"
  %t10401893 = add nsw i32 %461, %30951
  %30980 = sext i32 %t10401893 to i64
  %30981 = getelementptr inbounds i16, i16* %read_input860, i64 %30980
  %30982 = getelementptr inbounds i16, i16* %30981, i64 1
  %30983 = bitcast i16* %30982 to <16 x i16>*
  %30984 = load <16 x i16>, <16 x i16>* %30983, align 2, !tbaa !396
  %30985 = getelementptr inbounds i16, i16* %30981, i64 17
  %30986 = bitcast i16* %30985 to <16 x i16>*
  %30987 = load <16 x i16>, <16 x i16>* %30986, align 2, !tbaa !396
  %30988 = bitcast i16* %30981 to <16 x i16>*
  %30989 = load <16 x i16>, <16 x i16>* %30988, align 2, !tbaa !396
  %30990 = getelementptr inbounds i16, i16* %30981, i64 16
  %30991 = bitcast i16* %30990 to <16 x i16>*
  %30992 = load <16 x i16>, <16 x i16>* %30991, align 2, !tbaa !396
  %30993 = getelementptr inbounds i16, i16* %30981, i64 2
  %30994 = bitcast i16* %30993 to <16 x i16>*
  %30995 = load <16 x i16>, <16 x i16>* %30994, align 2, !tbaa !396
  %30996 = getelementptr inbounds i16, i16* %30981, i64 18
  %30997 = bitcast i16* %30996 to <16 x i16>*
  %30998 = load <16 x i16>, <16 x i16>* %30997, align 2, !tbaa !396
  %30999 = getelementptr inbounds i16, i16* %30981, i64 3
  %31000 = bitcast i16* %30999 to <16 x i16>*
  %31001 = load <16 x i16>, <16 x i16>* %31000, align 2, !tbaa !396
  %31002 = getelementptr inbounds i16, i16* %30981, i64 19
  %31003 = bitcast i16* %31002 to <16 x i16>*
  %31004 = load <16 x i16>, <16 x i16>* %31003, align 2, !tbaa !396
  %31005 = getelementptr inbounds i16, i16* %30981, i64 4
  %31006 = bitcast i16* %31005 to <16 x i16>*
  %31007 = load <16 x i16>, <16 x i16>* %31006, align 2, !tbaa !396
  %31008 = getelementptr inbounds i16, i16* %30981, i64 20
  %31009 = bitcast i16* %31008 to <16 x i16>*
  %31010 = load <16 x i16>, <16 x i16>* %31009, align 2, !tbaa !396
  %31011 = getelementptr inbounds i16, i16* %30981, i64 6
  %31012 = bitcast i16* %31011 to <16 x i16>*
  %31013 = load <16 x i16>, <16 x i16>* %31012, align 2, !tbaa !396
  %31014 = getelementptr inbounds i16, i16* %30981, i64 22
  %31015 = bitcast i16* %31014 to <16 x i16>*
  %31016 = load <16 x i16>, <16 x i16>* %31015, align 2, !tbaa !396
  %31017 = getelementptr inbounds i16, i16* %30981, i64 5
  %31018 = bitcast i16* %31017 to <16 x i16>*
  %31019 = load <16 x i16>, <16 x i16>* %31018, align 2, !tbaa !396
  %31020 = getelementptr inbounds i16, i16* %30981, i64 21
  %31021 = bitcast i16* %31020 to <16 x i16>*
  %31022 = load <16 x i16>, <16 x i16>* %31021, align 2, !tbaa !396
  %31023 = add <16 x i16> %30989, %30984
  %31024 = add <16 x i16> %31023, %30995
  %31025 = add <16 x i16> %31024, %31001
  %31026 = add <16 x i16> %31025, %31007
  %31027 = add <16 x i16> %31026, %31013
  %31028 = add <16 x i16> %31027, %31019
  %31029 = add <16 x i16> %30992, %30987
  %31030 = add <16 x i16> %31029, %30998
  %31031 = add <16 x i16> %31030, %31004
  %31032 = add <16 x i16> %31031, %31010
  %31033 = add <16 x i16> %31032, %31016
  %31034 = add <16 x i16> %31033, %31022
  %31035 = shufflevector <16 x i16> %31028, <16 x i16> %31034, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31036 = udiv <32 x i16> %31035, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %31037 = shufflevector <32 x i16> %31036, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31038 = shl nsw i64 %30948, 5
  %31039 = add nsw i64 %31038, %30761
  %31040 = getelementptr inbounds i16, i16* %blur_x917, i64 %31039
  %31041 = bitcast i16* %31040 to <16 x i16>*
  store <16 x i16> %31037, <16 x i16>* %31041, align 2, !tbaa !399
  %31042 = shufflevector <32 x i16> %31036, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31043 = getelementptr inbounds i16, i16* %31040, i64 16
  %31044 = bitcast i16* %31043 to <16 x i16>*
  store <16 x i16> %31042, <16 x i16>* %31044, align 2, !tbaa !399
  br label %"consume blur_x1894"

"consume blur_x1894":                             ; preds = %"for blur_y.s0.x.x.rebased1886.consume blur_x1894_crit_edge", %"produce blur_x1892"
  %.pre-phi3735 = phi i64 [ %.pre3734, %"for blur_y.s0.x.x.rebased1886.consume blur_x1894_crit_edge" ], [ %31038, %"produce blur_x1892" ]
  %31045 = add nsw i64 %30764, %.pre-phi3735
  %31046 = getelementptr inbounds i16, i16* %blur_x917, i64 %31045
  %31047 = bitcast i16* %31046 to <16 x i16>*
  %31048 = load <16 x i16>, <16 x i16>* %31047, align 2, !tbaa !399
  %31049 = getelementptr inbounds i16, i16* %31046, i64 16
  %31050 = bitcast i16* %31049 to <16 x i16>*
  %31051 = load <16 x i16>, <16 x i16>* %31050, align 2, !tbaa !399
  %31052 = add nsw i64 %30767, %.pre-phi3735
  %31053 = getelementptr inbounds i16, i16* %blur_x917, i64 %31052
  %31054 = bitcast i16* %31053 to <16 x i16>*
  %31055 = load <16 x i16>, <16 x i16>* %31054, align 2, !tbaa !399
  %31056 = getelementptr inbounds i16, i16* %31053, i64 16
  %31057 = bitcast i16* %31056 to <16 x i16>*
  %31058 = load <16 x i16>, <16 x i16>* %31057, align 2, !tbaa !399
  %31059 = add nsw i64 %30770, %.pre-phi3735
  %31060 = getelementptr inbounds i16, i16* %blur_x917, i64 %31059
  %31061 = bitcast i16* %31060 to <16 x i16>*
  %31062 = load <16 x i16>, <16 x i16>* %31061, align 2, !tbaa !399
  %31063 = getelementptr inbounds i16, i16* %31060, i64 16
  %31064 = bitcast i16* %31063 to <16 x i16>*
  %31065 = load <16 x i16>, <16 x i16>* %31064, align 2, !tbaa !399
  %31066 = add nsw i64 %30773, %.pre-phi3735
  %31067 = getelementptr inbounds i16, i16* %blur_x917, i64 %31066
  %31068 = bitcast i16* %31067 to <16 x i16>*
  %31069 = load <16 x i16>, <16 x i16>* %31068, align 2, !tbaa !399
  %31070 = getelementptr inbounds i16, i16* %31067, i64 16
  %31071 = bitcast i16* %31070 to <16 x i16>*
  %31072 = load <16 x i16>, <16 x i16>* %31071, align 2, !tbaa !399
  %31073 = add nsw i64 %30776, %.pre-phi3735
  %31074 = getelementptr inbounds i16, i16* %blur_x917, i64 %31073
  %31075 = bitcast i16* %31074 to <16 x i16>*
  %31076 = load <16 x i16>, <16 x i16>* %31075, align 2, !tbaa !399
  %31077 = getelementptr inbounds i16, i16* %31074, i64 16
  %31078 = bitcast i16* %31077 to <16 x i16>*
  %31079 = load <16 x i16>, <16 x i16>* %31078, align 2, !tbaa !399
  %31080 = add nsw i64 %30779, %.pre-phi3735
  %31081 = getelementptr inbounds i16, i16* %blur_x917, i64 %31080
  %31082 = bitcast i16* %31081 to <16 x i16>*
  %31083 = load <16 x i16>, <16 x i16>* %31082, align 2, !tbaa !399
  %31084 = getelementptr inbounds i16, i16* %31081, i64 16
  %31085 = bitcast i16* %31084 to <16 x i16>*
  %31086 = load <16 x i16>, <16 x i16>* %31085, align 2, !tbaa !399
  %31087 = add nsw i64 %30782, %.pre-phi3735
  %31088 = getelementptr inbounds i16, i16* %blur_x917, i64 %31087
  %31089 = bitcast i16* %31088 to <16 x i16>*
  %31090 = load <16 x i16>, <16 x i16>* %31089, align 2, !tbaa !399
  %31091 = getelementptr inbounds i16, i16* %31088, i64 16
  %31092 = bitcast i16* %31091 to <16 x i16>*
  %31093 = load <16 x i16>, <16 x i16>* %31092, align 2, !tbaa !399
  %31094 = add <16 x i16> %31055, %31048
  %31095 = add <16 x i16> %31094, %31062
  %31096 = add <16 x i16> %31095, %31069
  %31097 = add <16 x i16> %31096, %31076
  %31098 = add <16 x i16> %31097, %31083
  %31099 = add <16 x i16> %31098, %31090
  %31100 = add <16 x i16> %31058, %31051
  %31101 = add <16 x i16> %31100, %31065
  %31102 = add <16 x i16> %31101, %31072
  %31103 = add <16 x i16> %31102, %31079
  %31104 = add <16 x i16> %31103, %31086
  %31105 = add <16 x i16> %31104, %31093
  %31106 = shufflevector <16 x i16> %31099, <16 x i16> %31105, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31107 = udiv <32 x i16> %31106, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %31108 = shufflevector <32 x i16> %31107, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31109 = add nsw i64 %30786, %.pre-phi3735
  %31110 = getelementptr inbounds i16, i16* %267, i64 %31109
  %31111 = bitcast i16* %31110 to <16 x i16>*
  store <16 x i16> %31108, <16 x i16>* %31111, align 2, !tbaa !401
  %31112 = shufflevector <32 x i16> %31107, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31113 = getelementptr inbounds i16, i16* %31110, i64 16
  %31114 = bitcast i16* %31113 to <16 x i16>*
  store <16 x i16> %31112, <16 x i16>* %31114, align 2, !tbaa !401
  %indvars.iv.next3545 = add nuw nsw i64 %indvars.iv3544, 1
  %.not2697 = icmp eq i64 %indvars.iv.next3545, %546
  br i1 %.not2697, label %"end for blur_y.s0.x.x.rebased1887", label %"for blur_y.s0.x.x.rebased1886"

"for blur_y.s0.x.x.rebased1902":                  ; preds = %"for blur_y.s0.x.x.rebased1902.preheader", %"consume blur_x1913"
  %blur_y.s0.x.x.rebased1904 = phi i32 [ %31257, %"consume blur_x1913" ], [ 0, %"for blur_y.s0.x.x.rebased1902.preheader" ]
  %31115 = add nsw i32 %blur_y.s0.x.x.rebased1904, %t1670852
  %a4429 = shl nsw i32 %31115, 5
  %31116 = icmp sgt i32 %t1691, %a4429
  %blur_y.s0.x.v0.base.s1905 = select i1 %31116, i32 %a4429, i32 %t1691
  %31117 = icmp slt i32 %31115, 1
  %31118 = icmp sgt i32 %202, %a4429
  %31119 = or i1 %31117, %31118
  br i1 %31119, label %"produce blur_x1910", label %"consume blur_x1913"

"end for blur_y.s0.x.x.rebased1903":              ; preds = %"consume blur_x1913", %"end for blur_y.s0.x.x.rebased1887"
  br i1 %233, label %"produce blur_x1917", label %after_bb1914

"produce blur_x1910":                             ; preds = %"for blur_y.s0.x.x.rebased1902"
  %31120 = icmp slt i32 %blur_y.s0.x.v0.base.s1905, %202
  %blur_x.s0.x.v1.base.s1911 = select i1 %31120, i32 %blur_y.s0.x.v0.base.s1905, i32 %202
  %t10451912 = add nsw i32 %461, %blur_x.s0.x.v1.base.s1911
  %31121 = sext i32 %t10451912 to i64
  %31122 = getelementptr inbounds i16, i16* %read_input860, i64 %31121
  %31123 = getelementptr inbounds i16, i16* %31122, i64 1
  %31124 = bitcast i16* %31123 to <16 x i16>*
  %31125 = load <16 x i16>, <16 x i16>* %31124, align 2, !tbaa !396
  %31126 = getelementptr inbounds i16, i16* %31122, i64 17
  %31127 = bitcast i16* %31126 to <16 x i16>*
  %31128 = load <16 x i16>, <16 x i16>* %31127, align 2, !tbaa !396
  %31129 = bitcast i16* %31122 to <16 x i16>*
  %31130 = load <16 x i16>, <16 x i16>* %31129, align 2, !tbaa !396
  %31131 = getelementptr inbounds i16, i16* %31122, i64 16
  %31132 = bitcast i16* %31131 to <16 x i16>*
  %31133 = load <16 x i16>, <16 x i16>* %31132, align 2, !tbaa !396
  %31134 = getelementptr inbounds i16, i16* %31122, i64 2
  %31135 = bitcast i16* %31134 to <16 x i16>*
  %31136 = load <16 x i16>, <16 x i16>* %31135, align 2, !tbaa !396
  %31137 = getelementptr inbounds i16, i16* %31122, i64 18
  %31138 = bitcast i16* %31137 to <16 x i16>*
  %31139 = load <16 x i16>, <16 x i16>* %31138, align 2, !tbaa !396
  %31140 = getelementptr inbounds i16, i16* %31122, i64 3
  %31141 = bitcast i16* %31140 to <16 x i16>*
  %31142 = load <16 x i16>, <16 x i16>* %31141, align 2, !tbaa !396
  %31143 = getelementptr inbounds i16, i16* %31122, i64 19
  %31144 = bitcast i16* %31143 to <16 x i16>*
  %31145 = load <16 x i16>, <16 x i16>* %31144, align 2, !tbaa !396
  %31146 = getelementptr inbounds i16, i16* %31122, i64 4
  %31147 = bitcast i16* %31146 to <16 x i16>*
  %31148 = load <16 x i16>, <16 x i16>* %31147, align 2, !tbaa !396
  %31149 = getelementptr inbounds i16, i16* %31122, i64 20
  %31150 = bitcast i16* %31149 to <16 x i16>*
  %31151 = load <16 x i16>, <16 x i16>* %31150, align 2, !tbaa !396
  %31152 = getelementptr inbounds i16, i16* %31122, i64 6
  %31153 = bitcast i16* %31152 to <16 x i16>*
  %31154 = load <16 x i16>, <16 x i16>* %31153, align 2, !tbaa !396
  %31155 = getelementptr inbounds i16, i16* %31122, i64 22
  %31156 = bitcast i16* %31155 to <16 x i16>*
  %31157 = load <16 x i16>, <16 x i16>* %31156, align 2, !tbaa !396
  %31158 = getelementptr inbounds i16, i16* %31122, i64 5
  %31159 = bitcast i16* %31158 to <16 x i16>*
  %31160 = load <16 x i16>, <16 x i16>* %31159, align 2, !tbaa !396
  %31161 = getelementptr inbounds i16, i16* %31122, i64 21
  %31162 = bitcast i16* %31161 to <16 x i16>*
  %31163 = load <16 x i16>, <16 x i16>* %31162, align 2, !tbaa !396
  %31164 = add <16 x i16> %31130, %31125
  %31165 = add <16 x i16> %31164, %31136
  %31166 = add <16 x i16> %31165, %31142
  %31167 = add <16 x i16> %31166, %31148
  %31168 = add <16 x i16> %31167, %31154
  %31169 = add <16 x i16> %31168, %31160
  %31170 = add <16 x i16> %31133, %31128
  %31171 = add <16 x i16> %31170, %31139
  %31172 = add <16 x i16> %31171, %31145
  %31173 = add <16 x i16> %31172, %31151
  %31174 = add <16 x i16> %31173, %31157
  %31175 = add <16 x i16> %31174, %31163
  %31176 = shufflevector <16 x i16> %31169, <16 x i16> %31175, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31177 = udiv <32 x i16> %31176, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %31178 = shufflevector <32 x i16> %31177, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31179 = sext i32 %blur_x.s0.x.v1.base.s1911 to i64
  %31180 = add nsw i64 %31179, %30954
  %31181 = getelementptr inbounds i16, i16* %blur_x917, i64 %31180
  %31182 = bitcast i16* %31181 to <16 x i16>*
  store <16 x i16> %31178, <16 x i16>* %31182, align 2, !tbaa !399
  %31183 = shufflevector <32 x i16> %31177, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31184 = getelementptr inbounds i16, i16* %31181, i64 16
  %31185 = bitcast i16* %31184 to <16 x i16>*
  store <16 x i16> %31183, <16 x i16>* %31185, align 2, !tbaa !399
  br label %"consume blur_x1913"

"consume blur_x1913":                             ; preds = %"for blur_y.s0.x.x.rebased1902", %"produce blur_x1910"
  %31186 = sext i32 %blur_y.s0.x.v0.base.s1905 to i64
  %31187 = add nsw i64 %30957, %31186
  %31188 = getelementptr inbounds i16, i16* %blur_x917, i64 %31187
  %31189 = bitcast i16* %31188 to <16 x i16>*
  %31190 = load <16 x i16>, <16 x i16>* %31189, align 2, !tbaa !399
  %31191 = getelementptr inbounds i16, i16* %31188, i64 16
  %31192 = bitcast i16* %31191 to <16 x i16>*
  %31193 = load <16 x i16>, <16 x i16>* %31192, align 2, !tbaa !399
  %31194 = add nsw i64 %30960, %31186
  %31195 = getelementptr inbounds i16, i16* %blur_x917, i64 %31194
  %31196 = bitcast i16* %31195 to <16 x i16>*
  %31197 = load <16 x i16>, <16 x i16>* %31196, align 2, !tbaa !399
  %31198 = getelementptr inbounds i16, i16* %31195, i64 16
  %31199 = bitcast i16* %31198 to <16 x i16>*
  %31200 = load <16 x i16>, <16 x i16>* %31199, align 2, !tbaa !399
  %31201 = add nsw i64 %30963, %31186
  %31202 = getelementptr inbounds i16, i16* %blur_x917, i64 %31201
  %31203 = bitcast i16* %31202 to <16 x i16>*
  %31204 = load <16 x i16>, <16 x i16>* %31203, align 2, !tbaa !399
  %31205 = getelementptr inbounds i16, i16* %31202, i64 16
  %31206 = bitcast i16* %31205 to <16 x i16>*
  %31207 = load <16 x i16>, <16 x i16>* %31206, align 2, !tbaa !399
  %31208 = add nsw i64 %30966, %31186
  %31209 = getelementptr inbounds i16, i16* %blur_x917, i64 %31208
  %31210 = bitcast i16* %31209 to <16 x i16>*
  %31211 = load <16 x i16>, <16 x i16>* %31210, align 2, !tbaa !399
  %31212 = getelementptr inbounds i16, i16* %31209, i64 16
  %31213 = bitcast i16* %31212 to <16 x i16>*
  %31214 = load <16 x i16>, <16 x i16>* %31213, align 2, !tbaa !399
  %31215 = add nsw i64 %30969, %31186
  %31216 = getelementptr inbounds i16, i16* %blur_x917, i64 %31215
  %31217 = bitcast i16* %31216 to <16 x i16>*
  %31218 = load <16 x i16>, <16 x i16>* %31217, align 2, !tbaa !399
  %31219 = getelementptr inbounds i16, i16* %31216, i64 16
  %31220 = bitcast i16* %31219 to <16 x i16>*
  %31221 = load <16 x i16>, <16 x i16>* %31220, align 2, !tbaa !399
  %31222 = add nsw i64 %30972, %31186
  %31223 = getelementptr inbounds i16, i16* %blur_x917, i64 %31222
  %31224 = bitcast i16* %31223 to <16 x i16>*
  %31225 = load <16 x i16>, <16 x i16>* %31224, align 2, !tbaa !399
  %31226 = getelementptr inbounds i16, i16* %31223, i64 16
  %31227 = bitcast i16* %31226 to <16 x i16>*
  %31228 = load <16 x i16>, <16 x i16>* %31227, align 2, !tbaa !399
  %31229 = add nsw i64 %30975, %31186
  %31230 = getelementptr inbounds i16, i16* %blur_x917, i64 %31229
  %31231 = bitcast i16* %31230 to <16 x i16>*
  %31232 = load <16 x i16>, <16 x i16>* %31231, align 2, !tbaa !399
  %31233 = getelementptr inbounds i16, i16* %31230, i64 16
  %31234 = bitcast i16* %31233 to <16 x i16>*
  %31235 = load <16 x i16>, <16 x i16>* %31234, align 2, !tbaa !399
  %31236 = add <16 x i16> %31197, %31190
  %31237 = add <16 x i16> %31236, %31204
  %31238 = add <16 x i16> %31237, %31211
  %31239 = add <16 x i16> %31238, %31218
  %31240 = add <16 x i16> %31239, %31225
  %31241 = add <16 x i16> %31240, %31232
  %31242 = add <16 x i16> %31200, %31193
  %31243 = add <16 x i16> %31242, %31207
  %31244 = add <16 x i16> %31243, %31214
  %31245 = add <16 x i16> %31244, %31221
  %31246 = add <16 x i16> %31245, %31228
  %31247 = add <16 x i16> %31246, %31235
  %31248 = shufflevector <16 x i16> %31241, <16 x i16> %31247, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31249 = udiv <32 x i16> %31248, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %31250 = shufflevector <32 x i16> %31249, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31251 = add nsw i64 %30979, %31186
  %31252 = getelementptr inbounds i16, i16* %267, i64 %31251
  %31253 = bitcast i16* %31252 to <16 x i16>*
  store <16 x i16> %31250, <16 x i16>* %31253, align 2, !tbaa !401
  %31254 = shufflevector <32 x i16> %31249, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31255 = getelementptr inbounds i16, i16* %31252, i64 16
  %31256 = bitcast i16* %31255 to <16 x i16>*
  store <16 x i16> %31254, <16 x i16>* %31256, align 2, !tbaa !401
  %31257 = add nuw nsw i32 %blur_y.s0.x.x.rebased1904, 1
  %.not2696 = icmp eq i32 %31257, %t1727936
  br i1 %.not2696, label %"end for blur_y.s0.x.x.rebased1903", label %"for blur_y.s0.x.x.rebased1902"

after_bb1914:                                     ; preds = %"end for blur_y.s0.x.x.rebased1903", %"produce blur_x1917"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1929.preheader", label %"end for blur_y.s0.x.x.rebased1930", !prof !386

"for blur_y.s0.x.x.rebased1929.preheader":        ; preds = %after_bb1914
  %31258 = sext i32 %t1732952 to i64
  %31259 = zext i32 %.pre-phi3685 to i64
  %31260 = mul nsw i64 %31259, %353
  %31261 = sub nsw i64 %31260, %302
  %31262 = zext i32 %.pre-phi3681 to i64
  %31263 = mul nsw i64 %31262, %353
  %31264 = sub nsw i64 %31263, %302
  %31265 = zext i32 %.pre-phi3689 to i64
  %31266 = mul nsw i64 %31265, %353
  %31267 = sub nsw i64 %31266, %302
  %31268 = zext i32 %.pre-phi3693 to i64
  %31269 = mul nsw i64 %31268, %353
  %31270 = sub nsw i64 %31269, %302
  %31271 = zext i32 %.pre-phi3699 to i64
  %31272 = mul nsw i64 %31271, %353
  %31273 = sub nsw i64 %31272, %302
  %31274 = zext i32 %.pre-phi3673 to i64
  %31275 = mul nsw i64 %31274, %353
  %31276 = sub nsw i64 %31275, %302
  %31277 = zext i32 %.pre-phi3669 to i64
  %31278 = mul nsw i64 %31277, %353
  %31279 = sub nsw i64 %31278, %302
  %31280 = sext i32 %a393 to i64
  %31281 = add nsw i64 %31280, 19
  %31282 = mul nsw i64 %31281, %350
  %31283 = add nsw i64 %31282, %354
  br label %"for blur_y.s0.x.x.rebased1929"

"produce blur_x1917":                             ; preds = %"end for blur_y.s0.x.x.rebased1903"
  %31284 = getelementptr inbounds i16, i16* %read_input860, i64 %465
  %31285 = getelementptr inbounds i16, i16* %31284, i64 -31
  %31286 = bitcast i16* %31285 to <16 x i16>*
  %31287 = load <16 x i16>, <16 x i16>* %31286, align 2, !tbaa !396
  %31288 = getelementptr inbounds i16, i16* %31284, i64 -15
  %31289 = bitcast i16* %31288 to <16 x i16>*
  %31290 = load <16 x i16>, <16 x i16>* %31289, align 2, !tbaa !396
  %31291 = getelementptr inbounds i16, i16* %31284, i64 -32
  %31292 = bitcast i16* %31291 to <16 x i16>*
  %31293 = load <16 x i16>, <16 x i16>* %31292, align 2, !tbaa !396
  %31294 = getelementptr inbounds i16, i16* %31284, i64 -16
  %31295 = bitcast i16* %31294 to <16 x i16>*
  %31296 = load <16 x i16>, <16 x i16>* %31295, align 2, !tbaa !396
  %31297 = getelementptr inbounds i16, i16* %31284, i64 -30
  %31298 = bitcast i16* %31297 to <16 x i16>*
  %31299 = load <16 x i16>, <16 x i16>* %31298, align 2, !tbaa !396
  %31300 = getelementptr inbounds i16, i16* %31284, i64 -14
  %31301 = bitcast i16* %31300 to <16 x i16>*
  %31302 = load <16 x i16>, <16 x i16>* %31301, align 2, !tbaa !396
  %31303 = getelementptr inbounds i16, i16* %31284, i64 -29
  %31304 = bitcast i16* %31303 to <16 x i16>*
  %31305 = load <16 x i16>, <16 x i16>* %31304, align 2, !tbaa !396
  %31306 = getelementptr inbounds i16, i16* %31284, i64 -13
  %31307 = bitcast i16* %31306 to <16 x i16>*
  %31308 = load <16 x i16>, <16 x i16>* %31307, align 2, !tbaa !396
  %31309 = getelementptr inbounds i16, i16* %31284, i64 -28
  %31310 = bitcast i16* %31309 to <16 x i16>*
  %31311 = load <16 x i16>, <16 x i16>* %31310, align 2, !tbaa !396
  %31312 = getelementptr inbounds i16, i16* %31284, i64 -12
  %31313 = bitcast i16* %31312 to <16 x i16>*
  %31314 = load <16 x i16>, <16 x i16>* %31313, align 2, !tbaa !396
  %31315 = getelementptr inbounds i16, i16* %31284, i64 -26
  %31316 = bitcast i16* %31315 to <16 x i16>*
  %31317 = load <16 x i16>, <16 x i16>* %31316, align 2, !tbaa !396
  %31318 = getelementptr inbounds i16, i16* %31284, i64 -10
  %31319 = bitcast i16* %31318 to <16 x i16>*
  %31320 = load <16 x i16>, <16 x i16>* %31319, align 2, !tbaa !396
  %31321 = getelementptr inbounds i16, i16* %31284, i64 -27
  %31322 = bitcast i16* %31321 to <16 x i16>*
  %31323 = load <16 x i16>, <16 x i16>* %31322, align 2, !tbaa !396
  %31324 = getelementptr inbounds i16, i16* %31284, i64 -11
  %31325 = bitcast i16* %31324 to <16 x i16>*
  %31326 = load <16 x i16>, <16 x i16>* %31325, align 2, !tbaa !396
  %31327 = add <16 x i16> %31293, %31287
  %31328 = add <16 x i16> %31327, %31299
  %31329 = add <16 x i16> %31328, %31305
  %31330 = add <16 x i16> %31329, %31311
  %31331 = add <16 x i16> %31330, %31317
  %31332 = add <16 x i16> %31331, %31323
  %31333 = add <16 x i16> %31296, %31290
  %31334 = add <16 x i16> %31333, %31302
  %31335 = add <16 x i16> %31334, %31308
  %31336 = add <16 x i16> %31335, %31314
  %31337 = add <16 x i16> %31336, %31320
  %31338 = add <16 x i16> %31337, %31326
  %31339 = shufflevector <16 x i16> %31332, <16 x i16> %31338, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31340 = udiv <32 x i16> %31339, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %31341 = shufflevector <32 x i16> %31340, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31342 = zext i32 %.pre-phi3673 to i64
  %31343 = mul nsw i64 %303, %31342
  %31344 = add nsw i64 %305, %31343
  %31345 = getelementptr inbounds i16, i16* %blur_x917, i64 %31344
  %31346 = getelementptr inbounds i16, i16* %31345, i64 -32
  %31347 = bitcast i16* %31346 to <16 x i16>*
  store <16 x i16> %31341, <16 x i16>* %31347, align 2, !tbaa !399
  %31348 = shufflevector <32 x i16> %31340, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31349 = getelementptr inbounds i16, i16* %31345, i64 -16
  %31350 = bitcast i16* %31349 to <16 x i16>*
  store <16 x i16> %31348, <16 x i16>* %31350, align 2, !tbaa !399
  %31351 = zext i32 %.pre-phi3685 to i64
  %31352 = mul nsw i64 %31351, %349
  %31353 = add nsw i64 %31352, %300
  %31354 = getelementptr inbounds i16, i16* %blur_x917, i64 %31353
  %31355 = getelementptr inbounds i16, i16* %31354, i64 -32
  %31356 = bitcast i16* %31355 to <16 x i16>*
  %31357 = load <16 x i16>, <16 x i16>* %31356, align 2, !tbaa !399
  %31358 = getelementptr inbounds i16, i16* %31354, i64 -16
  %31359 = bitcast i16* %31358 to <16 x i16>*
  %31360 = load <16 x i16>, <16 x i16>* %31359, align 2, !tbaa !399
  %31361 = zext i32 %.pre-phi3681 to i64
  %31362 = mul nsw i64 %31361, %349
  %31363 = add nsw i64 %31362, %300
  %31364 = getelementptr inbounds i16, i16* %blur_x917, i64 %31363
  %31365 = getelementptr inbounds i16, i16* %31364, i64 -32
  %31366 = bitcast i16* %31365 to <16 x i16>*
  %31367 = load <16 x i16>, <16 x i16>* %31366, align 2, !tbaa !399
  %31368 = getelementptr inbounds i16, i16* %31364, i64 -16
  %31369 = bitcast i16* %31368 to <16 x i16>*
  %31370 = load <16 x i16>, <16 x i16>* %31369, align 2, !tbaa !399
  %31371 = zext i32 %.pre-phi3689 to i64
  %31372 = mul nsw i64 %31371, %349
  %31373 = add nsw i64 %31372, %300
  %31374 = getelementptr inbounds i16, i16* %blur_x917, i64 %31373
  %31375 = getelementptr inbounds i16, i16* %31374, i64 -32
  %31376 = bitcast i16* %31375 to <16 x i16>*
  %31377 = load <16 x i16>, <16 x i16>* %31376, align 2, !tbaa !399
  %31378 = getelementptr inbounds i16, i16* %31374, i64 -16
  %31379 = bitcast i16* %31378 to <16 x i16>*
  %31380 = load <16 x i16>, <16 x i16>* %31379, align 2, !tbaa !399
  %31381 = zext i32 %.pre-phi3693 to i64
  %31382 = mul nsw i64 %31381, %349
  %31383 = add nsw i64 %31382, %300
  %31384 = getelementptr inbounds i16, i16* %blur_x917, i64 %31383
  %31385 = getelementptr inbounds i16, i16* %31384, i64 -32
  %31386 = bitcast i16* %31385 to <16 x i16>*
  %31387 = load <16 x i16>, <16 x i16>* %31386, align 2, !tbaa !399
  %31388 = getelementptr inbounds i16, i16* %31384, i64 -16
  %31389 = bitcast i16* %31388 to <16 x i16>*
  %31390 = load <16 x i16>, <16 x i16>* %31389, align 2, !tbaa !399
  %31391 = zext i32 %.pre-phi3699 to i64
  %31392 = mul nsw i64 %31391, %349
  %31393 = add nsw i64 %31392, %300
  %31394 = getelementptr inbounds i16, i16* %blur_x917, i64 %31393
  %31395 = getelementptr inbounds i16, i16* %31394, i64 -32
  %31396 = bitcast i16* %31395 to <16 x i16>*
  %31397 = load <16 x i16>, <16 x i16>* %31396, align 2, !tbaa !399
  %31398 = getelementptr inbounds i16, i16* %31394, i64 -16
  %31399 = bitcast i16* %31398 to <16 x i16>*
  %31400 = load <16 x i16>, <16 x i16>* %31399, align 2, !tbaa !399
  %31401 = mul nsw i64 %31342, %349
  %31402 = add nsw i64 %31401, %300
  %31403 = getelementptr inbounds i16, i16* %blur_x917, i64 %31402
  %31404 = getelementptr inbounds i16, i16* %31403, i64 -32
  %31405 = bitcast i16* %31404 to <16 x i16>*
  %31406 = load <16 x i16>, <16 x i16>* %31405, align 2, !tbaa !399
  %31407 = getelementptr inbounds i16, i16* %31403, i64 -16
  %31408 = bitcast i16* %31407 to <16 x i16>*
  %31409 = load <16 x i16>, <16 x i16>* %31408, align 2, !tbaa !399
  %31410 = zext i32 %.pre-phi3669 to i64
  %31411 = mul nsw i64 %31410, %349
  %31412 = add nsw i64 %31411, %300
  %31413 = getelementptr inbounds i16, i16* %blur_x917, i64 %31412
  %31414 = getelementptr inbounds i16, i16* %31413, i64 -32
  %31415 = bitcast i16* %31414 to <16 x i16>*
  %31416 = load <16 x i16>, <16 x i16>* %31415, align 2, !tbaa !399
  %31417 = getelementptr inbounds i16, i16* %31413, i64 -16
  %31418 = bitcast i16* %31417 to <16 x i16>*
  %31419 = load <16 x i16>, <16 x i16>* %31418, align 2, !tbaa !399
  %31420 = add <16 x i16> %31367, %31357
  %31421 = add <16 x i16> %31420, %31377
  %31422 = add <16 x i16> %31421, %31387
  %31423 = add <16 x i16> %31422, %31397
  %31424 = add <16 x i16> %31423, %31406
  %31425 = add <16 x i16> %31424, %31416
  %31426 = add <16 x i16> %31370, %31360
  %31427 = add <16 x i16> %31426, %31380
  %31428 = add <16 x i16> %31427, %31390
  %31429 = add <16 x i16> %31428, %31400
  %31430 = add <16 x i16> %31429, %31409
  %31431 = add <16 x i16> %31430, %31419
  %31432 = shufflevector <16 x i16> %31425, <16 x i16> %31431, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31433 = udiv <32 x i16> %31432, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %31434 = shufflevector <32 x i16> %31433, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31435 = sext i32 %a393 to i64
  %31436 = add nsw i64 %31435, 19
  %31437 = mul nsw i64 %31436, %350
  %31438 = add nsw i64 %352, %31437
  %31439 = getelementptr inbounds i16, i16* %267, i64 %31438
  %31440 = getelementptr inbounds i16, i16* %31439, i64 -32
  %31441 = bitcast i16* %31440 to <16 x i16>*
  store <16 x i16> %31434, <16 x i16>* %31441, align 2, !tbaa !401
  %31442 = shufflevector <32 x i16> %31433, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31443 = getelementptr inbounds i16, i16* %31439, i64 -16
  %31444 = bitcast i16* %31443 to <16 x i16>*
  store <16 x i16> %31442, <16 x i16>* %31444, align 2, !tbaa !401
  br label %after_bb1914

"for blur_y.s0.x.x.rebased1929":                  ; preds = %"for blur_y.s0.x.x.rebased1929.preheader", %"consume blur_x1937"
  %indvars.iv3546 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1929.preheader" ], [ %indvars.iv.next3547, %"consume blur_x1937" ]
  %31445 = add nsw i64 %indvars.iv3546, %307
  %31446 = icmp slt i64 %31445, 1
  %31447 = trunc i64 %31445 to i32
  %31448 = shl nsw i32 %31447, 5
  %31449 = icmp sgt i32 %202, %31448
  %31450 = or i1 %31446, %31449
  br i1 %31450, label %"produce blur_x1935", label %"for blur_y.s0.x.x.rebased1929.consume blur_x1937_crit_edge"

"for blur_y.s0.x.x.rebased1929.consume blur_x1937_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1929"
  %.pre3736 = shl nsw i64 %31445, 5
  br label %"consume blur_x1937"

"end for blur_y.s0.x.x.rebased1930":              ; preds = %"consume blur_x1937", %after_bb1914
  br i1 %308, label %"for blur_y.s0.x.x.rebased1945.preheader", label %"end for blur_y.s0.x.x.rebased1946", !prof !386

"for blur_y.s0.x.x.rebased1945.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1930"
  %31451 = sext i32 %t1732952 to i64
  %31452 = zext i32 %.pre-phi3685 to i64
  %31453 = mul nsw i64 %31452, %353
  %31454 = sub nsw i64 %31453, %302
  %31455 = zext i32 %.pre-phi3681 to i64
  %31456 = mul nsw i64 %31455, %353
  %31457 = sub nsw i64 %31456, %302
  %31458 = zext i32 %.pre-phi3689 to i64
  %31459 = mul nsw i64 %31458, %353
  %31460 = sub nsw i64 %31459, %302
  %31461 = zext i32 %.pre-phi3693 to i64
  %31462 = mul nsw i64 %31461, %353
  %31463 = sub nsw i64 %31462, %302
  %31464 = zext i32 %.pre-phi3699 to i64
  %31465 = mul nsw i64 %31464, %353
  %31466 = sub nsw i64 %31465, %302
  %31467 = zext i32 %.pre-phi3673 to i64
  %31468 = mul nsw i64 %31467, %353
  %31469 = sub nsw i64 %31468, %302
  %31470 = zext i32 %.pre-phi3669 to i64
  %31471 = mul nsw i64 %31470, %353
  %31472 = sub nsw i64 %31471, %302
  %31473 = sext i32 %a393 to i64
  %31474 = add nsw i64 %31473, 19
  %31475 = mul nsw i64 %31474, %350
  %31476 = add nsw i64 %31475, %354
  br label %"for blur_y.s0.x.x.rebased1945"

"produce blur_x1935":                             ; preds = %"for blur_y.s0.x.x.rebased1929"
  %t10561936 = add nsw i32 %467, %31448
  %31477 = sext i32 %t10561936 to i64
  %31478 = getelementptr inbounds i16, i16* %read_input860, i64 %31477
  %31479 = getelementptr inbounds i16, i16* %31478, i64 1
  %31480 = bitcast i16* %31479 to <16 x i16>*
  %31481 = load <16 x i16>, <16 x i16>* %31480, align 2, !tbaa !396
  %31482 = getelementptr inbounds i16, i16* %31478, i64 17
  %31483 = bitcast i16* %31482 to <16 x i16>*
  %31484 = load <16 x i16>, <16 x i16>* %31483, align 2, !tbaa !396
  %31485 = bitcast i16* %31478 to <16 x i16>*
  %31486 = load <16 x i16>, <16 x i16>* %31485, align 2, !tbaa !396
  %31487 = getelementptr inbounds i16, i16* %31478, i64 16
  %31488 = bitcast i16* %31487 to <16 x i16>*
  %31489 = load <16 x i16>, <16 x i16>* %31488, align 2, !tbaa !396
  %31490 = getelementptr inbounds i16, i16* %31478, i64 2
  %31491 = bitcast i16* %31490 to <16 x i16>*
  %31492 = load <16 x i16>, <16 x i16>* %31491, align 2, !tbaa !396
  %31493 = getelementptr inbounds i16, i16* %31478, i64 18
  %31494 = bitcast i16* %31493 to <16 x i16>*
  %31495 = load <16 x i16>, <16 x i16>* %31494, align 2, !tbaa !396
  %31496 = getelementptr inbounds i16, i16* %31478, i64 3
  %31497 = bitcast i16* %31496 to <16 x i16>*
  %31498 = load <16 x i16>, <16 x i16>* %31497, align 2, !tbaa !396
  %31499 = getelementptr inbounds i16, i16* %31478, i64 19
  %31500 = bitcast i16* %31499 to <16 x i16>*
  %31501 = load <16 x i16>, <16 x i16>* %31500, align 2, !tbaa !396
  %31502 = getelementptr inbounds i16, i16* %31478, i64 4
  %31503 = bitcast i16* %31502 to <16 x i16>*
  %31504 = load <16 x i16>, <16 x i16>* %31503, align 2, !tbaa !396
  %31505 = getelementptr inbounds i16, i16* %31478, i64 20
  %31506 = bitcast i16* %31505 to <16 x i16>*
  %31507 = load <16 x i16>, <16 x i16>* %31506, align 2, !tbaa !396
  %31508 = getelementptr inbounds i16, i16* %31478, i64 6
  %31509 = bitcast i16* %31508 to <16 x i16>*
  %31510 = load <16 x i16>, <16 x i16>* %31509, align 2, !tbaa !396
  %31511 = getelementptr inbounds i16, i16* %31478, i64 22
  %31512 = bitcast i16* %31511 to <16 x i16>*
  %31513 = load <16 x i16>, <16 x i16>* %31512, align 2, !tbaa !396
  %31514 = getelementptr inbounds i16, i16* %31478, i64 5
  %31515 = bitcast i16* %31514 to <16 x i16>*
  %31516 = load <16 x i16>, <16 x i16>* %31515, align 2, !tbaa !396
  %31517 = getelementptr inbounds i16, i16* %31478, i64 21
  %31518 = bitcast i16* %31517 to <16 x i16>*
  %31519 = load <16 x i16>, <16 x i16>* %31518, align 2, !tbaa !396
  %31520 = add <16 x i16> %31486, %31481
  %31521 = add <16 x i16> %31520, %31492
  %31522 = add <16 x i16> %31521, %31498
  %31523 = add <16 x i16> %31522, %31504
  %31524 = add <16 x i16> %31523, %31510
  %31525 = add <16 x i16> %31524, %31516
  %31526 = add <16 x i16> %31489, %31484
  %31527 = add <16 x i16> %31526, %31495
  %31528 = add <16 x i16> %31527, %31501
  %31529 = add <16 x i16> %31528, %31507
  %31530 = add <16 x i16> %31529, %31513
  %31531 = add <16 x i16> %31530, %31519
  %31532 = shufflevector <16 x i16> %31525, <16 x i16> %31531, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31533 = udiv <32 x i16> %31532, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %31534 = shufflevector <32 x i16> %31533, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31535 = shl nsw i64 %31445, 5
  %31536 = add nsw i64 %31535, %31258
  %31537 = getelementptr inbounds i16, i16* %blur_x917, i64 %31536
  %31538 = bitcast i16* %31537 to <16 x i16>*
  store <16 x i16> %31534, <16 x i16>* %31538, align 2, !tbaa !399
  %31539 = shufflevector <32 x i16> %31533, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31540 = getelementptr inbounds i16, i16* %31537, i64 16
  %31541 = bitcast i16* %31540 to <16 x i16>*
  store <16 x i16> %31539, <16 x i16>* %31541, align 2, !tbaa !399
  br label %"consume blur_x1937"

"consume blur_x1937":                             ; preds = %"for blur_y.s0.x.x.rebased1929.consume blur_x1937_crit_edge", %"produce blur_x1935"
  %.pre-phi3737 = phi i64 [ %.pre3736, %"for blur_y.s0.x.x.rebased1929.consume blur_x1937_crit_edge" ], [ %31535, %"produce blur_x1935" ]
  %31542 = add nsw i64 %31261, %.pre-phi3737
  %31543 = getelementptr inbounds i16, i16* %blur_x917, i64 %31542
  %31544 = bitcast i16* %31543 to <16 x i16>*
  %31545 = load <16 x i16>, <16 x i16>* %31544, align 2, !tbaa !399
  %31546 = getelementptr inbounds i16, i16* %31543, i64 16
  %31547 = bitcast i16* %31546 to <16 x i16>*
  %31548 = load <16 x i16>, <16 x i16>* %31547, align 2, !tbaa !399
  %31549 = add nsw i64 %31264, %.pre-phi3737
  %31550 = getelementptr inbounds i16, i16* %blur_x917, i64 %31549
  %31551 = bitcast i16* %31550 to <16 x i16>*
  %31552 = load <16 x i16>, <16 x i16>* %31551, align 2, !tbaa !399
  %31553 = getelementptr inbounds i16, i16* %31550, i64 16
  %31554 = bitcast i16* %31553 to <16 x i16>*
  %31555 = load <16 x i16>, <16 x i16>* %31554, align 2, !tbaa !399
  %31556 = add nsw i64 %31267, %.pre-phi3737
  %31557 = getelementptr inbounds i16, i16* %blur_x917, i64 %31556
  %31558 = bitcast i16* %31557 to <16 x i16>*
  %31559 = load <16 x i16>, <16 x i16>* %31558, align 2, !tbaa !399
  %31560 = getelementptr inbounds i16, i16* %31557, i64 16
  %31561 = bitcast i16* %31560 to <16 x i16>*
  %31562 = load <16 x i16>, <16 x i16>* %31561, align 2, !tbaa !399
  %31563 = add nsw i64 %31270, %.pre-phi3737
  %31564 = getelementptr inbounds i16, i16* %blur_x917, i64 %31563
  %31565 = bitcast i16* %31564 to <16 x i16>*
  %31566 = load <16 x i16>, <16 x i16>* %31565, align 2, !tbaa !399
  %31567 = getelementptr inbounds i16, i16* %31564, i64 16
  %31568 = bitcast i16* %31567 to <16 x i16>*
  %31569 = load <16 x i16>, <16 x i16>* %31568, align 2, !tbaa !399
  %31570 = add nsw i64 %31273, %.pre-phi3737
  %31571 = getelementptr inbounds i16, i16* %blur_x917, i64 %31570
  %31572 = bitcast i16* %31571 to <16 x i16>*
  %31573 = load <16 x i16>, <16 x i16>* %31572, align 2, !tbaa !399
  %31574 = getelementptr inbounds i16, i16* %31571, i64 16
  %31575 = bitcast i16* %31574 to <16 x i16>*
  %31576 = load <16 x i16>, <16 x i16>* %31575, align 2, !tbaa !399
  %31577 = add nsw i64 %31276, %.pre-phi3737
  %31578 = getelementptr inbounds i16, i16* %blur_x917, i64 %31577
  %31579 = bitcast i16* %31578 to <16 x i16>*
  %31580 = load <16 x i16>, <16 x i16>* %31579, align 2, !tbaa !399
  %31581 = getelementptr inbounds i16, i16* %31578, i64 16
  %31582 = bitcast i16* %31581 to <16 x i16>*
  %31583 = load <16 x i16>, <16 x i16>* %31582, align 2, !tbaa !399
  %31584 = add nsw i64 %31279, %.pre-phi3737
  %31585 = getelementptr inbounds i16, i16* %blur_x917, i64 %31584
  %31586 = bitcast i16* %31585 to <16 x i16>*
  %31587 = load <16 x i16>, <16 x i16>* %31586, align 2, !tbaa !399
  %31588 = getelementptr inbounds i16, i16* %31585, i64 16
  %31589 = bitcast i16* %31588 to <16 x i16>*
  %31590 = load <16 x i16>, <16 x i16>* %31589, align 2, !tbaa !399
  %31591 = add <16 x i16> %31552, %31545
  %31592 = add <16 x i16> %31591, %31559
  %31593 = add <16 x i16> %31592, %31566
  %31594 = add <16 x i16> %31593, %31573
  %31595 = add <16 x i16> %31594, %31580
  %31596 = add <16 x i16> %31595, %31587
  %31597 = add <16 x i16> %31555, %31548
  %31598 = add <16 x i16> %31597, %31562
  %31599 = add <16 x i16> %31598, %31569
  %31600 = add <16 x i16> %31599, %31576
  %31601 = add <16 x i16> %31600, %31583
  %31602 = add <16 x i16> %31601, %31590
  %31603 = shufflevector <16 x i16> %31596, <16 x i16> %31602, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31604 = udiv <32 x i16> %31603, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %31605 = shufflevector <32 x i16> %31604, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31606 = add nsw i64 %31283, %.pre-phi3737
  %31607 = getelementptr inbounds i16, i16* %267, i64 %31606
  %31608 = bitcast i16* %31607 to <16 x i16>*
  store <16 x i16> %31605, <16 x i16>* %31608, align 2, !tbaa !401
  %31609 = shufflevector <32 x i16> %31604, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31610 = getelementptr inbounds i16, i16* %31607, i64 16
  %31611 = bitcast i16* %31610 to <16 x i16>*
  store <16 x i16> %31609, <16 x i16>* %31611, align 2, !tbaa !401
  %indvars.iv.next3547 = add nuw nsw i64 %indvars.iv3546, 1
  %.not2693 = icmp eq i64 %indvars.iv.next3547, %546
  br i1 %.not2693, label %"end for blur_y.s0.x.x.rebased1930", label %"for blur_y.s0.x.x.rebased1929"

"for blur_y.s0.x.x.rebased1945":                  ; preds = %"for blur_y.s0.x.x.rebased1945.preheader", %"consume blur_x1956"
  %blur_y.s0.x.x.rebased1947 = phi i32 [ %31754, %"consume blur_x1956" ], [ 0, %"for blur_y.s0.x.x.rebased1945.preheader" ]
  %31612 = add nsw i32 %blur_y.s0.x.x.rebased1947, %t1670852
  %a4586 = shl nsw i32 %31612, 5
  %31613 = icmp sgt i32 %t1691, %a4586
  %blur_y.s0.x.v0.base.s1948 = select i1 %31613, i32 %a4586, i32 %t1691
  %31614 = icmp slt i32 %31612, 1
  %31615 = icmp sgt i32 %202, %a4586
  %31616 = or i1 %31614, %31615
  br i1 %31616, label %"produce blur_x1953", label %"consume blur_x1956"

"end for blur_y.s0.x.x.rebased1946":              ; preds = %"consume blur_x1956", %"end for blur_y.s0.x.x.rebased1930"
  br i1 %233, label %"produce blur_x1960", label %after_bb1957

"produce blur_x1953":                             ; preds = %"for blur_y.s0.x.x.rebased1945"
  %31617 = icmp slt i32 %blur_y.s0.x.v0.base.s1948, %202
  %blur_x.s0.x.v1.base.s1954 = select i1 %31617, i32 %blur_y.s0.x.v0.base.s1948, i32 %202
  %t10611955 = add nsw i32 %467, %blur_x.s0.x.v1.base.s1954
  %31618 = sext i32 %t10611955 to i64
  %31619 = getelementptr inbounds i16, i16* %read_input860, i64 %31618
  %31620 = getelementptr inbounds i16, i16* %31619, i64 1
  %31621 = bitcast i16* %31620 to <16 x i16>*
  %31622 = load <16 x i16>, <16 x i16>* %31621, align 2, !tbaa !396
  %31623 = getelementptr inbounds i16, i16* %31619, i64 17
  %31624 = bitcast i16* %31623 to <16 x i16>*
  %31625 = load <16 x i16>, <16 x i16>* %31624, align 2, !tbaa !396
  %31626 = bitcast i16* %31619 to <16 x i16>*
  %31627 = load <16 x i16>, <16 x i16>* %31626, align 2, !tbaa !396
  %31628 = getelementptr inbounds i16, i16* %31619, i64 16
  %31629 = bitcast i16* %31628 to <16 x i16>*
  %31630 = load <16 x i16>, <16 x i16>* %31629, align 2, !tbaa !396
  %31631 = getelementptr inbounds i16, i16* %31619, i64 2
  %31632 = bitcast i16* %31631 to <16 x i16>*
  %31633 = load <16 x i16>, <16 x i16>* %31632, align 2, !tbaa !396
  %31634 = getelementptr inbounds i16, i16* %31619, i64 18
  %31635 = bitcast i16* %31634 to <16 x i16>*
  %31636 = load <16 x i16>, <16 x i16>* %31635, align 2, !tbaa !396
  %31637 = getelementptr inbounds i16, i16* %31619, i64 3
  %31638 = bitcast i16* %31637 to <16 x i16>*
  %31639 = load <16 x i16>, <16 x i16>* %31638, align 2, !tbaa !396
  %31640 = getelementptr inbounds i16, i16* %31619, i64 19
  %31641 = bitcast i16* %31640 to <16 x i16>*
  %31642 = load <16 x i16>, <16 x i16>* %31641, align 2, !tbaa !396
  %31643 = getelementptr inbounds i16, i16* %31619, i64 4
  %31644 = bitcast i16* %31643 to <16 x i16>*
  %31645 = load <16 x i16>, <16 x i16>* %31644, align 2, !tbaa !396
  %31646 = getelementptr inbounds i16, i16* %31619, i64 20
  %31647 = bitcast i16* %31646 to <16 x i16>*
  %31648 = load <16 x i16>, <16 x i16>* %31647, align 2, !tbaa !396
  %31649 = getelementptr inbounds i16, i16* %31619, i64 6
  %31650 = bitcast i16* %31649 to <16 x i16>*
  %31651 = load <16 x i16>, <16 x i16>* %31650, align 2, !tbaa !396
  %31652 = getelementptr inbounds i16, i16* %31619, i64 22
  %31653 = bitcast i16* %31652 to <16 x i16>*
  %31654 = load <16 x i16>, <16 x i16>* %31653, align 2, !tbaa !396
  %31655 = getelementptr inbounds i16, i16* %31619, i64 5
  %31656 = bitcast i16* %31655 to <16 x i16>*
  %31657 = load <16 x i16>, <16 x i16>* %31656, align 2, !tbaa !396
  %31658 = getelementptr inbounds i16, i16* %31619, i64 21
  %31659 = bitcast i16* %31658 to <16 x i16>*
  %31660 = load <16 x i16>, <16 x i16>* %31659, align 2, !tbaa !396
  %31661 = add <16 x i16> %31627, %31622
  %31662 = add <16 x i16> %31661, %31633
  %31663 = add <16 x i16> %31662, %31639
  %31664 = add <16 x i16> %31663, %31645
  %31665 = add <16 x i16> %31664, %31651
  %31666 = add <16 x i16> %31665, %31657
  %31667 = add <16 x i16> %31630, %31625
  %31668 = add <16 x i16> %31667, %31636
  %31669 = add <16 x i16> %31668, %31642
  %31670 = add <16 x i16> %31669, %31648
  %31671 = add <16 x i16> %31670, %31654
  %31672 = add <16 x i16> %31671, %31660
  %31673 = shufflevector <16 x i16> %31666, <16 x i16> %31672, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31674 = udiv <32 x i16> %31673, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %31675 = shufflevector <32 x i16> %31674, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31676 = sext i32 %blur_x.s0.x.v1.base.s1954 to i64
  %31677 = add nsw i64 %31676, %31451
  %31678 = getelementptr inbounds i16, i16* %blur_x917, i64 %31677
  %31679 = bitcast i16* %31678 to <16 x i16>*
  store <16 x i16> %31675, <16 x i16>* %31679, align 2, !tbaa !399
  %31680 = shufflevector <32 x i16> %31674, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31681 = getelementptr inbounds i16, i16* %31678, i64 16
  %31682 = bitcast i16* %31681 to <16 x i16>*
  store <16 x i16> %31680, <16 x i16>* %31682, align 2, !tbaa !399
  br label %"consume blur_x1956"

"consume blur_x1956":                             ; preds = %"for blur_y.s0.x.x.rebased1945", %"produce blur_x1953"
  %31683 = sext i32 %blur_y.s0.x.v0.base.s1948 to i64
  %31684 = add nsw i64 %31454, %31683
  %31685 = getelementptr inbounds i16, i16* %blur_x917, i64 %31684
  %31686 = bitcast i16* %31685 to <16 x i16>*
  %31687 = load <16 x i16>, <16 x i16>* %31686, align 2, !tbaa !399
  %31688 = getelementptr inbounds i16, i16* %31685, i64 16
  %31689 = bitcast i16* %31688 to <16 x i16>*
  %31690 = load <16 x i16>, <16 x i16>* %31689, align 2, !tbaa !399
  %31691 = add nsw i64 %31457, %31683
  %31692 = getelementptr inbounds i16, i16* %blur_x917, i64 %31691
  %31693 = bitcast i16* %31692 to <16 x i16>*
  %31694 = load <16 x i16>, <16 x i16>* %31693, align 2, !tbaa !399
  %31695 = getelementptr inbounds i16, i16* %31692, i64 16
  %31696 = bitcast i16* %31695 to <16 x i16>*
  %31697 = load <16 x i16>, <16 x i16>* %31696, align 2, !tbaa !399
  %31698 = add nsw i64 %31460, %31683
  %31699 = getelementptr inbounds i16, i16* %blur_x917, i64 %31698
  %31700 = bitcast i16* %31699 to <16 x i16>*
  %31701 = load <16 x i16>, <16 x i16>* %31700, align 2, !tbaa !399
  %31702 = getelementptr inbounds i16, i16* %31699, i64 16
  %31703 = bitcast i16* %31702 to <16 x i16>*
  %31704 = load <16 x i16>, <16 x i16>* %31703, align 2, !tbaa !399
  %31705 = add nsw i64 %31463, %31683
  %31706 = getelementptr inbounds i16, i16* %blur_x917, i64 %31705
  %31707 = bitcast i16* %31706 to <16 x i16>*
  %31708 = load <16 x i16>, <16 x i16>* %31707, align 2, !tbaa !399
  %31709 = getelementptr inbounds i16, i16* %31706, i64 16
  %31710 = bitcast i16* %31709 to <16 x i16>*
  %31711 = load <16 x i16>, <16 x i16>* %31710, align 2, !tbaa !399
  %31712 = add nsw i64 %31466, %31683
  %31713 = getelementptr inbounds i16, i16* %blur_x917, i64 %31712
  %31714 = bitcast i16* %31713 to <16 x i16>*
  %31715 = load <16 x i16>, <16 x i16>* %31714, align 2, !tbaa !399
  %31716 = getelementptr inbounds i16, i16* %31713, i64 16
  %31717 = bitcast i16* %31716 to <16 x i16>*
  %31718 = load <16 x i16>, <16 x i16>* %31717, align 2, !tbaa !399
  %31719 = add nsw i64 %31469, %31683
  %31720 = getelementptr inbounds i16, i16* %blur_x917, i64 %31719
  %31721 = bitcast i16* %31720 to <16 x i16>*
  %31722 = load <16 x i16>, <16 x i16>* %31721, align 2, !tbaa !399
  %31723 = getelementptr inbounds i16, i16* %31720, i64 16
  %31724 = bitcast i16* %31723 to <16 x i16>*
  %31725 = load <16 x i16>, <16 x i16>* %31724, align 2, !tbaa !399
  %31726 = add nsw i64 %31472, %31683
  %31727 = getelementptr inbounds i16, i16* %blur_x917, i64 %31726
  %31728 = bitcast i16* %31727 to <16 x i16>*
  %31729 = load <16 x i16>, <16 x i16>* %31728, align 2, !tbaa !399
  %31730 = getelementptr inbounds i16, i16* %31727, i64 16
  %31731 = bitcast i16* %31730 to <16 x i16>*
  %31732 = load <16 x i16>, <16 x i16>* %31731, align 2, !tbaa !399
  %31733 = add <16 x i16> %31694, %31687
  %31734 = add <16 x i16> %31733, %31701
  %31735 = add <16 x i16> %31734, %31708
  %31736 = add <16 x i16> %31735, %31715
  %31737 = add <16 x i16> %31736, %31722
  %31738 = add <16 x i16> %31737, %31729
  %31739 = add <16 x i16> %31697, %31690
  %31740 = add <16 x i16> %31739, %31704
  %31741 = add <16 x i16> %31740, %31711
  %31742 = add <16 x i16> %31741, %31718
  %31743 = add <16 x i16> %31742, %31725
  %31744 = add <16 x i16> %31743, %31732
  %31745 = shufflevector <16 x i16> %31738, <16 x i16> %31744, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31746 = udiv <32 x i16> %31745, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %31747 = shufflevector <32 x i16> %31746, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31748 = add nsw i64 %31476, %31683
  %31749 = getelementptr inbounds i16, i16* %267, i64 %31748
  %31750 = bitcast i16* %31749 to <16 x i16>*
  store <16 x i16> %31747, <16 x i16>* %31750, align 2, !tbaa !401
  %31751 = shufflevector <32 x i16> %31746, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31752 = getelementptr inbounds i16, i16* %31749, i64 16
  %31753 = bitcast i16* %31752 to <16 x i16>*
  store <16 x i16> %31751, <16 x i16>* %31753, align 2, !tbaa !401
  %31754 = add nuw nsw i32 %blur_y.s0.x.x.rebased1947, 1
  %.not2692 = icmp eq i32 %31754, %t1727936
  br i1 %.not2692, label %"end for blur_y.s0.x.x.rebased1946", label %"for blur_y.s0.x.x.rebased1945"

after_bb1957:                                     ; preds = %"end for blur_y.s0.x.x.rebased1946", %"produce blur_x1960"
  br i1 %306, label %"for blur_y.s0.x.x.rebased1972.preheader", label %"end for blur_y.s0.x.x.rebased1973", !prof !386

"for blur_y.s0.x.x.rebased1972.preheader":        ; preds = %after_bb1957
  %31755 = sext i32 %t1738982 to i64
  %31756 = zext i32 %.pre-phi3689 to i64
  %31757 = mul nsw i64 %31756, %353
  %31758 = sub nsw i64 %31757, %302
  %31759 = zext i32 %.pre-phi3685 to i64
  %31760 = mul nsw i64 %31759, %353
  %31761 = sub nsw i64 %31760, %302
  %31762 = zext i32 %.pre-phi3693 to i64
  %31763 = mul nsw i64 %31762, %353
  %31764 = sub nsw i64 %31763, %302
  %31765 = zext i32 %.pre-phi3699 to i64
  %31766 = mul nsw i64 %31765, %353
  %31767 = sub nsw i64 %31766, %302
  %31768 = zext i32 %.pre-phi3669 to i64
  %31769 = mul nsw i64 %31768, %353
  %31770 = sub nsw i64 %31769, %302
  %31771 = zext i32 %.pre-phi3677 to i64
  %31772 = mul nsw i64 %31771, %353
  %31773 = sub nsw i64 %31772, %302
  %31774 = zext i32 %.pre-phi3673 to i64
  %31775 = mul nsw i64 %31774, %353
  %31776 = sub nsw i64 %31775, %302
  %31777 = sext i32 %a393 to i64
  %31778 = add nsw i64 %31777, 20
  %31779 = mul nsw i64 %31778, %350
  %31780 = add nsw i64 %31779, %354
  br label %"for blur_y.s0.x.x.rebased1972"

"produce blur_x1960":                             ; preds = %"end for blur_y.s0.x.x.rebased1946"
  %31781 = getelementptr inbounds i16, i16* %read_input860, i64 %471
  %31782 = getelementptr inbounds i16, i16* %31781, i64 -31
  %31783 = bitcast i16* %31782 to <16 x i16>*
  %31784 = load <16 x i16>, <16 x i16>* %31783, align 2, !tbaa !396
  %31785 = getelementptr inbounds i16, i16* %31781, i64 -15
  %31786 = bitcast i16* %31785 to <16 x i16>*
  %31787 = load <16 x i16>, <16 x i16>* %31786, align 2, !tbaa !396
  %31788 = getelementptr inbounds i16, i16* %31781, i64 -32
  %31789 = bitcast i16* %31788 to <16 x i16>*
  %31790 = load <16 x i16>, <16 x i16>* %31789, align 2, !tbaa !396
  %31791 = getelementptr inbounds i16, i16* %31781, i64 -16
  %31792 = bitcast i16* %31791 to <16 x i16>*
  %31793 = load <16 x i16>, <16 x i16>* %31792, align 2, !tbaa !396
  %31794 = getelementptr inbounds i16, i16* %31781, i64 -30
  %31795 = bitcast i16* %31794 to <16 x i16>*
  %31796 = load <16 x i16>, <16 x i16>* %31795, align 2, !tbaa !396
  %31797 = getelementptr inbounds i16, i16* %31781, i64 -14
  %31798 = bitcast i16* %31797 to <16 x i16>*
  %31799 = load <16 x i16>, <16 x i16>* %31798, align 2, !tbaa !396
  %31800 = getelementptr inbounds i16, i16* %31781, i64 -29
  %31801 = bitcast i16* %31800 to <16 x i16>*
  %31802 = load <16 x i16>, <16 x i16>* %31801, align 2, !tbaa !396
  %31803 = getelementptr inbounds i16, i16* %31781, i64 -13
  %31804 = bitcast i16* %31803 to <16 x i16>*
  %31805 = load <16 x i16>, <16 x i16>* %31804, align 2, !tbaa !396
  %31806 = getelementptr inbounds i16, i16* %31781, i64 -28
  %31807 = bitcast i16* %31806 to <16 x i16>*
  %31808 = load <16 x i16>, <16 x i16>* %31807, align 2, !tbaa !396
  %31809 = getelementptr inbounds i16, i16* %31781, i64 -12
  %31810 = bitcast i16* %31809 to <16 x i16>*
  %31811 = load <16 x i16>, <16 x i16>* %31810, align 2, !tbaa !396
  %31812 = getelementptr inbounds i16, i16* %31781, i64 -26
  %31813 = bitcast i16* %31812 to <16 x i16>*
  %31814 = load <16 x i16>, <16 x i16>* %31813, align 2, !tbaa !396
  %31815 = getelementptr inbounds i16, i16* %31781, i64 -10
  %31816 = bitcast i16* %31815 to <16 x i16>*
  %31817 = load <16 x i16>, <16 x i16>* %31816, align 2, !tbaa !396
  %31818 = getelementptr inbounds i16, i16* %31781, i64 -27
  %31819 = bitcast i16* %31818 to <16 x i16>*
  %31820 = load <16 x i16>, <16 x i16>* %31819, align 2, !tbaa !396
  %31821 = getelementptr inbounds i16, i16* %31781, i64 -11
  %31822 = bitcast i16* %31821 to <16 x i16>*
  %31823 = load <16 x i16>, <16 x i16>* %31822, align 2, !tbaa !396
  %31824 = add <16 x i16> %31790, %31784
  %31825 = add <16 x i16> %31824, %31796
  %31826 = add <16 x i16> %31825, %31802
  %31827 = add <16 x i16> %31826, %31808
  %31828 = add <16 x i16> %31827, %31814
  %31829 = add <16 x i16> %31828, %31820
  %31830 = add <16 x i16> %31793, %31787
  %31831 = add <16 x i16> %31830, %31799
  %31832 = add <16 x i16> %31831, %31805
  %31833 = add <16 x i16> %31832, %31811
  %31834 = add <16 x i16> %31833, %31817
  %31835 = add <16 x i16> %31834, %31823
  %31836 = shufflevector <16 x i16> %31829, <16 x i16> %31835, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31837 = udiv <32 x i16> %31836, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %31838 = shufflevector <32 x i16> %31837, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31839 = zext i32 %.pre-phi3677 to i64
  %31840 = mul nsw i64 %303, %31839
  %31841 = add nsw i64 %305, %31840
  %31842 = getelementptr inbounds i16, i16* %blur_x917, i64 %31841
  %31843 = getelementptr inbounds i16, i16* %31842, i64 -32
  %31844 = bitcast i16* %31843 to <16 x i16>*
  store <16 x i16> %31838, <16 x i16>* %31844, align 2, !tbaa !399
  %31845 = shufflevector <32 x i16> %31837, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31846 = getelementptr inbounds i16, i16* %31842, i64 -16
  %31847 = bitcast i16* %31846 to <16 x i16>*
  store <16 x i16> %31845, <16 x i16>* %31847, align 2, !tbaa !399
  %31848 = zext i32 %.pre-phi3689 to i64
  %31849 = mul nsw i64 %31848, %349
  %31850 = add nsw i64 %31849, %300
  %31851 = getelementptr inbounds i16, i16* %blur_x917, i64 %31850
  %31852 = getelementptr inbounds i16, i16* %31851, i64 -32
  %31853 = bitcast i16* %31852 to <16 x i16>*
  %31854 = load <16 x i16>, <16 x i16>* %31853, align 2, !tbaa !399
  %31855 = getelementptr inbounds i16, i16* %31851, i64 -16
  %31856 = bitcast i16* %31855 to <16 x i16>*
  %31857 = load <16 x i16>, <16 x i16>* %31856, align 2, !tbaa !399
  %31858 = zext i32 %.pre-phi3685 to i64
  %31859 = mul nsw i64 %31858, %349
  %31860 = add nsw i64 %31859, %300
  %31861 = getelementptr inbounds i16, i16* %blur_x917, i64 %31860
  %31862 = getelementptr inbounds i16, i16* %31861, i64 -32
  %31863 = bitcast i16* %31862 to <16 x i16>*
  %31864 = load <16 x i16>, <16 x i16>* %31863, align 2, !tbaa !399
  %31865 = getelementptr inbounds i16, i16* %31861, i64 -16
  %31866 = bitcast i16* %31865 to <16 x i16>*
  %31867 = load <16 x i16>, <16 x i16>* %31866, align 2, !tbaa !399
  %31868 = zext i32 %.pre-phi3693 to i64
  %31869 = mul nsw i64 %31868, %349
  %31870 = add nsw i64 %31869, %300
  %31871 = getelementptr inbounds i16, i16* %blur_x917, i64 %31870
  %31872 = getelementptr inbounds i16, i16* %31871, i64 -32
  %31873 = bitcast i16* %31872 to <16 x i16>*
  %31874 = load <16 x i16>, <16 x i16>* %31873, align 2, !tbaa !399
  %31875 = getelementptr inbounds i16, i16* %31871, i64 -16
  %31876 = bitcast i16* %31875 to <16 x i16>*
  %31877 = load <16 x i16>, <16 x i16>* %31876, align 2, !tbaa !399
  %31878 = zext i32 %.pre-phi3699 to i64
  %31879 = mul nsw i64 %31878, %349
  %31880 = add nsw i64 %31879, %300
  %31881 = getelementptr inbounds i16, i16* %blur_x917, i64 %31880
  %31882 = getelementptr inbounds i16, i16* %31881, i64 -32
  %31883 = bitcast i16* %31882 to <16 x i16>*
  %31884 = load <16 x i16>, <16 x i16>* %31883, align 2, !tbaa !399
  %31885 = getelementptr inbounds i16, i16* %31881, i64 -16
  %31886 = bitcast i16* %31885 to <16 x i16>*
  %31887 = load <16 x i16>, <16 x i16>* %31886, align 2, !tbaa !399
  %31888 = zext i32 %.pre-phi3669 to i64
  %31889 = mul nsw i64 %31888, %349
  %31890 = add nsw i64 %31889, %300
  %31891 = getelementptr inbounds i16, i16* %blur_x917, i64 %31890
  %31892 = getelementptr inbounds i16, i16* %31891, i64 -32
  %31893 = bitcast i16* %31892 to <16 x i16>*
  %31894 = load <16 x i16>, <16 x i16>* %31893, align 2, !tbaa !399
  %31895 = getelementptr inbounds i16, i16* %31891, i64 -16
  %31896 = bitcast i16* %31895 to <16 x i16>*
  %31897 = load <16 x i16>, <16 x i16>* %31896, align 2, !tbaa !399
  %31898 = mul nsw i64 %31839, %349
  %31899 = add nsw i64 %31898, %300
  %31900 = getelementptr inbounds i16, i16* %blur_x917, i64 %31899
  %31901 = getelementptr inbounds i16, i16* %31900, i64 -32
  %31902 = bitcast i16* %31901 to <16 x i16>*
  %31903 = load <16 x i16>, <16 x i16>* %31902, align 2, !tbaa !399
  %31904 = getelementptr inbounds i16, i16* %31900, i64 -16
  %31905 = bitcast i16* %31904 to <16 x i16>*
  %31906 = load <16 x i16>, <16 x i16>* %31905, align 2, !tbaa !399
  %31907 = zext i32 %.pre-phi3673 to i64
  %31908 = mul nsw i64 %31907, %349
  %31909 = add nsw i64 %31908, %300
  %31910 = getelementptr inbounds i16, i16* %blur_x917, i64 %31909
  %31911 = getelementptr inbounds i16, i16* %31910, i64 -32
  %31912 = bitcast i16* %31911 to <16 x i16>*
  %31913 = load <16 x i16>, <16 x i16>* %31912, align 2, !tbaa !399
  %31914 = getelementptr inbounds i16, i16* %31910, i64 -16
  %31915 = bitcast i16* %31914 to <16 x i16>*
  %31916 = load <16 x i16>, <16 x i16>* %31915, align 2, !tbaa !399
  %31917 = add <16 x i16> %31864, %31854
  %31918 = add <16 x i16> %31917, %31874
  %31919 = add <16 x i16> %31918, %31884
  %31920 = add <16 x i16> %31919, %31894
  %31921 = add <16 x i16> %31920, %31903
  %31922 = add <16 x i16> %31921, %31913
  %31923 = add <16 x i16> %31867, %31857
  %31924 = add <16 x i16> %31923, %31877
  %31925 = add <16 x i16> %31924, %31887
  %31926 = add <16 x i16> %31925, %31897
  %31927 = add <16 x i16> %31926, %31906
  %31928 = add <16 x i16> %31927, %31916
  %31929 = shufflevector <16 x i16> %31922, <16 x i16> %31928, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31930 = udiv <32 x i16> %31929, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %31931 = shufflevector <32 x i16> %31930, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31932 = sext i32 %a393 to i64
  %31933 = add nsw i64 %31932, 20
  %31934 = mul nsw i64 %31933, %350
  %31935 = add nsw i64 %352, %31934
  %31936 = getelementptr inbounds i16, i16* %267, i64 %31935
  %31937 = getelementptr inbounds i16, i16* %31936, i64 -32
  %31938 = bitcast i16* %31937 to <16 x i16>*
  store <16 x i16> %31931, <16 x i16>* %31938, align 2, !tbaa !401
  %31939 = shufflevector <32 x i16> %31930, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31940 = getelementptr inbounds i16, i16* %31936, i64 -16
  %31941 = bitcast i16* %31940 to <16 x i16>*
  store <16 x i16> %31939, <16 x i16>* %31941, align 2, !tbaa !401
  br label %after_bb1957

"for blur_y.s0.x.x.rebased1972":                  ; preds = %"for blur_y.s0.x.x.rebased1972.preheader", %"consume blur_x1980"
  %indvars.iv3548 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1972.preheader" ], [ %indvars.iv.next3549, %"consume blur_x1980" ]
  %31942 = add nsw i64 %indvars.iv3548, %307
  %31943 = icmp slt i64 %31942, 1
  %31944 = trunc i64 %31942 to i32
  %31945 = shl nsw i32 %31944, 5
  %31946 = icmp sgt i32 %202, %31945
  %31947 = or i1 %31943, %31946
  br i1 %31947, label %"produce blur_x1978", label %"for blur_y.s0.x.x.rebased1972.consume blur_x1980_crit_edge"

"for blur_y.s0.x.x.rebased1972.consume blur_x1980_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1972"
  %.pre3738 = shl nsw i64 %31942, 5
  br label %"consume blur_x1980"

"end for blur_y.s0.x.x.rebased1973":              ; preds = %"consume blur_x1980", %after_bb1957
  br i1 %308, label %"for blur_y.s0.x.x.rebased1988.preheader", label %"end for blur_y.s0.x.x.rebased1989", !prof !386

"for blur_y.s0.x.x.rebased1988.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1973"
  %31948 = sext i32 %t1738982 to i64
  %31949 = zext i32 %.pre-phi3689 to i64
  %31950 = mul nsw i64 %31949, %353
  %31951 = sub nsw i64 %31950, %302
  %31952 = zext i32 %.pre-phi3685 to i64
  %31953 = mul nsw i64 %31952, %353
  %31954 = sub nsw i64 %31953, %302
  %31955 = zext i32 %.pre-phi3693 to i64
  %31956 = mul nsw i64 %31955, %353
  %31957 = sub nsw i64 %31956, %302
  %31958 = zext i32 %.pre-phi3699 to i64
  %31959 = mul nsw i64 %31958, %353
  %31960 = sub nsw i64 %31959, %302
  %31961 = zext i32 %.pre-phi3669 to i64
  %31962 = mul nsw i64 %31961, %353
  %31963 = sub nsw i64 %31962, %302
  %31964 = zext i32 %.pre-phi3677 to i64
  %31965 = mul nsw i64 %31964, %353
  %31966 = sub nsw i64 %31965, %302
  %31967 = zext i32 %.pre-phi3673 to i64
  %31968 = mul nsw i64 %31967, %353
  %31969 = sub nsw i64 %31968, %302
  %31970 = sext i32 %a393 to i64
  %31971 = add nsw i64 %31970, 20
  %31972 = mul nsw i64 %31971, %350
  %31973 = add nsw i64 %31972, %354
  br label %"for blur_y.s0.x.x.rebased1988"

"produce blur_x1978":                             ; preds = %"for blur_y.s0.x.x.rebased1972"
  %t10721979 = add nsw i32 %473, %31945
  %31974 = sext i32 %t10721979 to i64
  %31975 = getelementptr inbounds i16, i16* %read_input860, i64 %31974
  %31976 = getelementptr inbounds i16, i16* %31975, i64 1
  %31977 = bitcast i16* %31976 to <16 x i16>*
  %31978 = load <16 x i16>, <16 x i16>* %31977, align 2, !tbaa !396
  %31979 = getelementptr inbounds i16, i16* %31975, i64 17
  %31980 = bitcast i16* %31979 to <16 x i16>*
  %31981 = load <16 x i16>, <16 x i16>* %31980, align 2, !tbaa !396
  %31982 = bitcast i16* %31975 to <16 x i16>*
  %31983 = load <16 x i16>, <16 x i16>* %31982, align 2, !tbaa !396
  %31984 = getelementptr inbounds i16, i16* %31975, i64 16
  %31985 = bitcast i16* %31984 to <16 x i16>*
  %31986 = load <16 x i16>, <16 x i16>* %31985, align 2, !tbaa !396
  %31987 = getelementptr inbounds i16, i16* %31975, i64 2
  %31988 = bitcast i16* %31987 to <16 x i16>*
  %31989 = load <16 x i16>, <16 x i16>* %31988, align 2, !tbaa !396
  %31990 = getelementptr inbounds i16, i16* %31975, i64 18
  %31991 = bitcast i16* %31990 to <16 x i16>*
  %31992 = load <16 x i16>, <16 x i16>* %31991, align 2, !tbaa !396
  %31993 = getelementptr inbounds i16, i16* %31975, i64 3
  %31994 = bitcast i16* %31993 to <16 x i16>*
  %31995 = load <16 x i16>, <16 x i16>* %31994, align 2, !tbaa !396
  %31996 = getelementptr inbounds i16, i16* %31975, i64 19
  %31997 = bitcast i16* %31996 to <16 x i16>*
  %31998 = load <16 x i16>, <16 x i16>* %31997, align 2, !tbaa !396
  %31999 = getelementptr inbounds i16, i16* %31975, i64 4
  %32000 = bitcast i16* %31999 to <16 x i16>*
  %32001 = load <16 x i16>, <16 x i16>* %32000, align 2, !tbaa !396
  %32002 = getelementptr inbounds i16, i16* %31975, i64 20
  %32003 = bitcast i16* %32002 to <16 x i16>*
  %32004 = load <16 x i16>, <16 x i16>* %32003, align 2, !tbaa !396
  %32005 = getelementptr inbounds i16, i16* %31975, i64 6
  %32006 = bitcast i16* %32005 to <16 x i16>*
  %32007 = load <16 x i16>, <16 x i16>* %32006, align 2, !tbaa !396
  %32008 = getelementptr inbounds i16, i16* %31975, i64 22
  %32009 = bitcast i16* %32008 to <16 x i16>*
  %32010 = load <16 x i16>, <16 x i16>* %32009, align 2, !tbaa !396
  %32011 = getelementptr inbounds i16, i16* %31975, i64 5
  %32012 = bitcast i16* %32011 to <16 x i16>*
  %32013 = load <16 x i16>, <16 x i16>* %32012, align 2, !tbaa !396
  %32014 = getelementptr inbounds i16, i16* %31975, i64 21
  %32015 = bitcast i16* %32014 to <16 x i16>*
  %32016 = load <16 x i16>, <16 x i16>* %32015, align 2, !tbaa !396
  %32017 = add <16 x i16> %31983, %31978
  %32018 = add <16 x i16> %32017, %31989
  %32019 = add <16 x i16> %32018, %31995
  %32020 = add <16 x i16> %32019, %32001
  %32021 = add <16 x i16> %32020, %32007
  %32022 = add <16 x i16> %32021, %32013
  %32023 = add <16 x i16> %31986, %31981
  %32024 = add <16 x i16> %32023, %31992
  %32025 = add <16 x i16> %32024, %31998
  %32026 = add <16 x i16> %32025, %32004
  %32027 = add <16 x i16> %32026, %32010
  %32028 = add <16 x i16> %32027, %32016
  %32029 = shufflevector <16 x i16> %32022, <16 x i16> %32028, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32030 = udiv <32 x i16> %32029, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %32031 = shufflevector <32 x i16> %32030, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32032 = shl nsw i64 %31942, 5
  %32033 = add nsw i64 %32032, %31755
  %32034 = getelementptr inbounds i16, i16* %blur_x917, i64 %32033
  %32035 = bitcast i16* %32034 to <16 x i16>*
  store <16 x i16> %32031, <16 x i16>* %32035, align 2, !tbaa !399
  %32036 = shufflevector <32 x i16> %32030, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32037 = getelementptr inbounds i16, i16* %32034, i64 16
  %32038 = bitcast i16* %32037 to <16 x i16>*
  store <16 x i16> %32036, <16 x i16>* %32038, align 2, !tbaa !399
  br label %"consume blur_x1980"

"consume blur_x1980":                             ; preds = %"for blur_y.s0.x.x.rebased1972.consume blur_x1980_crit_edge", %"produce blur_x1978"
  %.pre-phi3739 = phi i64 [ %.pre3738, %"for blur_y.s0.x.x.rebased1972.consume blur_x1980_crit_edge" ], [ %32032, %"produce blur_x1978" ]
  %32039 = add nsw i64 %31758, %.pre-phi3739
  %32040 = getelementptr inbounds i16, i16* %blur_x917, i64 %32039
  %32041 = bitcast i16* %32040 to <16 x i16>*
  %32042 = load <16 x i16>, <16 x i16>* %32041, align 2, !tbaa !399
  %32043 = getelementptr inbounds i16, i16* %32040, i64 16
  %32044 = bitcast i16* %32043 to <16 x i16>*
  %32045 = load <16 x i16>, <16 x i16>* %32044, align 2, !tbaa !399
  %32046 = add nsw i64 %31761, %.pre-phi3739
  %32047 = getelementptr inbounds i16, i16* %blur_x917, i64 %32046
  %32048 = bitcast i16* %32047 to <16 x i16>*
  %32049 = load <16 x i16>, <16 x i16>* %32048, align 2, !tbaa !399
  %32050 = getelementptr inbounds i16, i16* %32047, i64 16
  %32051 = bitcast i16* %32050 to <16 x i16>*
  %32052 = load <16 x i16>, <16 x i16>* %32051, align 2, !tbaa !399
  %32053 = add nsw i64 %31764, %.pre-phi3739
  %32054 = getelementptr inbounds i16, i16* %blur_x917, i64 %32053
  %32055 = bitcast i16* %32054 to <16 x i16>*
  %32056 = load <16 x i16>, <16 x i16>* %32055, align 2, !tbaa !399
  %32057 = getelementptr inbounds i16, i16* %32054, i64 16
  %32058 = bitcast i16* %32057 to <16 x i16>*
  %32059 = load <16 x i16>, <16 x i16>* %32058, align 2, !tbaa !399
  %32060 = add nsw i64 %31767, %.pre-phi3739
  %32061 = getelementptr inbounds i16, i16* %blur_x917, i64 %32060
  %32062 = bitcast i16* %32061 to <16 x i16>*
  %32063 = load <16 x i16>, <16 x i16>* %32062, align 2, !tbaa !399
  %32064 = getelementptr inbounds i16, i16* %32061, i64 16
  %32065 = bitcast i16* %32064 to <16 x i16>*
  %32066 = load <16 x i16>, <16 x i16>* %32065, align 2, !tbaa !399
  %32067 = add nsw i64 %31770, %.pre-phi3739
  %32068 = getelementptr inbounds i16, i16* %blur_x917, i64 %32067
  %32069 = bitcast i16* %32068 to <16 x i16>*
  %32070 = load <16 x i16>, <16 x i16>* %32069, align 2, !tbaa !399
  %32071 = getelementptr inbounds i16, i16* %32068, i64 16
  %32072 = bitcast i16* %32071 to <16 x i16>*
  %32073 = load <16 x i16>, <16 x i16>* %32072, align 2, !tbaa !399
  %32074 = add nsw i64 %31773, %.pre-phi3739
  %32075 = getelementptr inbounds i16, i16* %blur_x917, i64 %32074
  %32076 = bitcast i16* %32075 to <16 x i16>*
  %32077 = load <16 x i16>, <16 x i16>* %32076, align 2, !tbaa !399
  %32078 = getelementptr inbounds i16, i16* %32075, i64 16
  %32079 = bitcast i16* %32078 to <16 x i16>*
  %32080 = load <16 x i16>, <16 x i16>* %32079, align 2, !tbaa !399
  %32081 = add nsw i64 %31776, %.pre-phi3739
  %32082 = getelementptr inbounds i16, i16* %blur_x917, i64 %32081
  %32083 = bitcast i16* %32082 to <16 x i16>*
  %32084 = load <16 x i16>, <16 x i16>* %32083, align 2, !tbaa !399
  %32085 = getelementptr inbounds i16, i16* %32082, i64 16
  %32086 = bitcast i16* %32085 to <16 x i16>*
  %32087 = load <16 x i16>, <16 x i16>* %32086, align 2, !tbaa !399
  %32088 = add <16 x i16> %32049, %32042
  %32089 = add <16 x i16> %32088, %32056
  %32090 = add <16 x i16> %32089, %32063
  %32091 = add <16 x i16> %32090, %32070
  %32092 = add <16 x i16> %32091, %32077
  %32093 = add <16 x i16> %32092, %32084
  %32094 = add <16 x i16> %32052, %32045
  %32095 = add <16 x i16> %32094, %32059
  %32096 = add <16 x i16> %32095, %32066
  %32097 = add <16 x i16> %32096, %32073
  %32098 = add <16 x i16> %32097, %32080
  %32099 = add <16 x i16> %32098, %32087
  %32100 = shufflevector <16 x i16> %32093, <16 x i16> %32099, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32101 = udiv <32 x i16> %32100, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %32102 = shufflevector <32 x i16> %32101, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32103 = add nsw i64 %31780, %.pre-phi3739
  %32104 = getelementptr inbounds i16, i16* %267, i64 %32103
  %32105 = bitcast i16* %32104 to <16 x i16>*
  store <16 x i16> %32102, <16 x i16>* %32105, align 2, !tbaa !401
  %32106 = shufflevector <32 x i16> %32101, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32107 = getelementptr inbounds i16, i16* %32104, i64 16
  %32108 = bitcast i16* %32107 to <16 x i16>*
  store <16 x i16> %32106, <16 x i16>* %32108, align 2, !tbaa !401
  %indvars.iv.next3549 = add nuw nsw i64 %indvars.iv3548, 1
  %.not2689 = icmp eq i64 %indvars.iv.next3549, %546
  br i1 %.not2689, label %"end for blur_y.s0.x.x.rebased1973", label %"for blur_y.s0.x.x.rebased1972"

"for blur_y.s0.x.x.rebased1988":                  ; preds = %"for blur_y.s0.x.x.rebased1988.preheader", %"consume blur_x1999"
  %blur_y.s0.x.x.rebased1990 = phi i32 [ %32251, %"consume blur_x1999" ], [ 0, %"for blur_y.s0.x.x.rebased1988.preheader" ]
  %32109 = add nsw i32 %blur_y.s0.x.x.rebased1990, %t1670852
  %a4743 = shl nsw i32 %32109, 5
  %32110 = icmp sgt i32 %t1691, %a4743
  %blur_y.s0.x.v0.base.s1991 = select i1 %32110, i32 %a4743, i32 %t1691
  %32111 = icmp slt i32 %32109, 1
  %32112 = icmp sgt i32 %202, %a4743
  %32113 = or i1 %32111, %32112
  br i1 %32113, label %"produce blur_x1996", label %"consume blur_x1999"

"end for blur_y.s0.x.x.rebased1989":              ; preds = %"consume blur_x1999", %"end for blur_y.s0.x.x.rebased1973"
  br i1 %233, label %"produce blur_x2003", label %after_bb2000

"produce blur_x1996":                             ; preds = %"for blur_y.s0.x.x.rebased1988"
  %32114 = icmp slt i32 %blur_y.s0.x.v0.base.s1991, %202
  %blur_x.s0.x.v1.base.s1997 = select i1 %32114, i32 %blur_y.s0.x.v0.base.s1991, i32 %202
  %t10771998 = add nsw i32 %473, %blur_x.s0.x.v1.base.s1997
  %32115 = sext i32 %t10771998 to i64
  %32116 = getelementptr inbounds i16, i16* %read_input860, i64 %32115
  %32117 = getelementptr inbounds i16, i16* %32116, i64 1
  %32118 = bitcast i16* %32117 to <16 x i16>*
  %32119 = load <16 x i16>, <16 x i16>* %32118, align 2, !tbaa !396
  %32120 = getelementptr inbounds i16, i16* %32116, i64 17
  %32121 = bitcast i16* %32120 to <16 x i16>*
  %32122 = load <16 x i16>, <16 x i16>* %32121, align 2, !tbaa !396
  %32123 = bitcast i16* %32116 to <16 x i16>*
  %32124 = load <16 x i16>, <16 x i16>* %32123, align 2, !tbaa !396
  %32125 = getelementptr inbounds i16, i16* %32116, i64 16
  %32126 = bitcast i16* %32125 to <16 x i16>*
  %32127 = load <16 x i16>, <16 x i16>* %32126, align 2, !tbaa !396
  %32128 = getelementptr inbounds i16, i16* %32116, i64 2
  %32129 = bitcast i16* %32128 to <16 x i16>*
  %32130 = load <16 x i16>, <16 x i16>* %32129, align 2, !tbaa !396
  %32131 = getelementptr inbounds i16, i16* %32116, i64 18
  %32132 = bitcast i16* %32131 to <16 x i16>*
  %32133 = load <16 x i16>, <16 x i16>* %32132, align 2, !tbaa !396
  %32134 = getelementptr inbounds i16, i16* %32116, i64 3
  %32135 = bitcast i16* %32134 to <16 x i16>*
  %32136 = load <16 x i16>, <16 x i16>* %32135, align 2, !tbaa !396
  %32137 = getelementptr inbounds i16, i16* %32116, i64 19
  %32138 = bitcast i16* %32137 to <16 x i16>*
  %32139 = load <16 x i16>, <16 x i16>* %32138, align 2, !tbaa !396
  %32140 = getelementptr inbounds i16, i16* %32116, i64 4
  %32141 = bitcast i16* %32140 to <16 x i16>*
  %32142 = load <16 x i16>, <16 x i16>* %32141, align 2, !tbaa !396
  %32143 = getelementptr inbounds i16, i16* %32116, i64 20
  %32144 = bitcast i16* %32143 to <16 x i16>*
  %32145 = load <16 x i16>, <16 x i16>* %32144, align 2, !tbaa !396
  %32146 = getelementptr inbounds i16, i16* %32116, i64 6
  %32147 = bitcast i16* %32146 to <16 x i16>*
  %32148 = load <16 x i16>, <16 x i16>* %32147, align 2, !tbaa !396
  %32149 = getelementptr inbounds i16, i16* %32116, i64 22
  %32150 = bitcast i16* %32149 to <16 x i16>*
  %32151 = load <16 x i16>, <16 x i16>* %32150, align 2, !tbaa !396
  %32152 = getelementptr inbounds i16, i16* %32116, i64 5
  %32153 = bitcast i16* %32152 to <16 x i16>*
  %32154 = load <16 x i16>, <16 x i16>* %32153, align 2, !tbaa !396
  %32155 = getelementptr inbounds i16, i16* %32116, i64 21
  %32156 = bitcast i16* %32155 to <16 x i16>*
  %32157 = load <16 x i16>, <16 x i16>* %32156, align 2, !tbaa !396
  %32158 = add <16 x i16> %32124, %32119
  %32159 = add <16 x i16> %32158, %32130
  %32160 = add <16 x i16> %32159, %32136
  %32161 = add <16 x i16> %32160, %32142
  %32162 = add <16 x i16> %32161, %32148
  %32163 = add <16 x i16> %32162, %32154
  %32164 = add <16 x i16> %32127, %32122
  %32165 = add <16 x i16> %32164, %32133
  %32166 = add <16 x i16> %32165, %32139
  %32167 = add <16 x i16> %32166, %32145
  %32168 = add <16 x i16> %32167, %32151
  %32169 = add <16 x i16> %32168, %32157
  %32170 = shufflevector <16 x i16> %32163, <16 x i16> %32169, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32171 = udiv <32 x i16> %32170, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %32172 = shufflevector <32 x i16> %32171, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32173 = sext i32 %blur_x.s0.x.v1.base.s1997 to i64
  %32174 = add nsw i64 %32173, %31948
  %32175 = getelementptr inbounds i16, i16* %blur_x917, i64 %32174
  %32176 = bitcast i16* %32175 to <16 x i16>*
  store <16 x i16> %32172, <16 x i16>* %32176, align 2, !tbaa !399
  %32177 = shufflevector <32 x i16> %32171, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32178 = getelementptr inbounds i16, i16* %32175, i64 16
  %32179 = bitcast i16* %32178 to <16 x i16>*
  store <16 x i16> %32177, <16 x i16>* %32179, align 2, !tbaa !399
  br label %"consume blur_x1999"

"consume blur_x1999":                             ; preds = %"for blur_y.s0.x.x.rebased1988", %"produce blur_x1996"
  %32180 = sext i32 %blur_y.s0.x.v0.base.s1991 to i64
  %32181 = add nsw i64 %31951, %32180
  %32182 = getelementptr inbounds i16, i16* %blur_x917, i64 %32181
  %32183 = bitcast i16* %32182 to <16 x i16>*
  %32184 = load <16 x i16>, <16 x i16>* %32183, align 2, !tbaa !399
  %32185 = getelementptr inbounds i16, i16* %32182, i64 16
  %32186 = bitcast i16* %32185 to <16 x i16>*
  %32187 = load <16 x i16>, <16 x i16>* %32186, align 2, !tbaa !399
  %32188 = add nsw i64 %31954, %32180
  %32189 = getelementptr inbounds i16, i16* %blur_x917, i64 %32188
  %32190 = bitcast i16* %32189 to <16 x i16>*
  %32191 = load <16 x i16>, <16 x i16>* %32190, align 2, !tbaa !399
  %32192 = getelementptr inbounds i16, i16* %32189, i64 16
  %32193 = bitcast i16* %32192 to <16 x i16>*
  %32194 = load <16 x i16>, <16 x i16>* %32193, align 2, !tbaa !399
  %32195 = add nsw i64 %31957, %32180
  %32196 = getelementptr inbounds i16, i16* %blur_x917, i64 %32195
  %32197 = bitcast i16* %32196 to <16 x i16>*
  %32198 = load <16 x i16>, <16 x i16>* %32197, align 2, !tbaa !399
  %32199 = getelementptr inbounds i16, i16* %32196, i64 16
  %32200 = bitcast i16* %32199 to <16 x i16>*
  %32201 = load <16 x i16>, <16 x i16>* %32200, align 2, !tbaa !399
  %32202 = add nsw i64 %31960, %32180
  %32203 = getelementptr inbounds i16, i16* %blur_x917, i64 %32202
  %32204 = bitcast i16* %32203 to <16 x i16>*
  %32205 = load <16 x i16>, <16 x i16>* %32204, align 2, !tbaa !399
  %32206 = getelementptr inbounds i16, i16* %32203, i64 16
  %32207 = bitcast i16* %32206 to <16 x i16>*
  %32208 = load <16 x i16>, <16 x i16>* %32207, align 2, !tbaa !399
  %32209 = add nsw i64 %31963, %32180
  %32210 = getelementptr inbounds i16, i16* %blur_x917, i64 %32209
  %32211 = bitcast i16* %32210 to <16 x i16>*
  %32212 = load <16 x i16>, <16 x i16>* %32211, align 2, !tbaa !399
  %32213 = getelementptr inbounds i16, i16* %32210, i64 16
  %32214 = bitcast i16* %32213 to <16 x i16>*
  %32215 = load <16 x i16>, <16 x i16>* %32214, align 2, !tbaa !399
  %32216 = add nsw i64 %31966, %32180
  %32217 = getelementptr inbounds i16, i16* %blur_x917, i64 %32216
  %32218 = bitcast i16* %32217 to <16 x i16>*
  %32219 = load <16 x i16>, <16 x i16>* %32218, align 2, !tbaa !399
  %32220 = getelementptr inbounds i16, i16* %32217, i64 16
  %32221 = bitcast i16* %32220 to <16 x i16>*
  %32222 = load <16 x i16>, <16 x i16>* %32221, align 2, !tbaa !399
  %32223 = add nsw i64 %31969, %32180
  %32224 = getelementptr inbounds i16, i16* %blur_x917, i64 %32223
  %32225 = bitcast i16* %32224 to <16 x i16>*
  %32226 = load <16 x i16>, <16 x i16>* %32225, align 2, !tbaa !399
  %32227 = getelementptr inbounds i16, i16* %32224, i64 16
  %32228 = bitcast i16* %32227 to <16 x i16>*
  %32229 = load <16 x i16>, <16 x i16>* %32228, align 2, !tbaa !399
  %32230 = add <16 x i16> %32191, %32184
  %32231 = add <16 x i16> %32230, %32198
  %32232 = add <16 x i16> %32231, %32205
  %32233 = add <16 x i16> %32232, %32212
  %32234 = add <16 x i16> %32233, %32219
  %32235 = add <16 x i16> %32234, %32226
  %32236 = add <16 x i16> %32194, %32187
  %32237 = add <16 x i16> %32236, %32201
  %32238 = add <16 x i16> %32237, %32208
  %32239 = add <16 x i16> %32238, %32215
  %32240 = add <16 x i16> %32239, %32222
  %32241 = add <16 x i16> %32240, %32229
  %32242 = shufflevector <16 x i16> %32235, <16 x i16> %32241, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32243 = udiv <32 x i16> %32242, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %32244 = shufflevector <32 x i16> %32243, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32245 = add nsw i64 %31973, %32180
  %32246 = getelementptr inbounds i16, i16* %267, i64 %32245
  %32247 = bitcast i16* %32246 to <16 x i16>*
  store <16 x i16> %32244, <16 x i16>* %32247, align 2, !tbaa !401
  %32248 = shufflevector <32 x i16> %32243, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32249 = getelementptr inbounds i16, i16* %32246, i64 16
  %32250 = bitcast i16* %32249 to <16 x i16>*
  store <16 x i16> %32248, <16 x i16>* %32250, align 2, !tbaa !401
  %32251 = add nuw nsw i32 %blur_y.s0.x.x.rebased1990, 1
  %.not2688 = icmp eq i32 %32251, %t1727936
  br i1 %.not2688, label %"end for blur_y.s0.x.x.rebased1989", label %"for blur_y.s0.x.x.rebased1988"

after_bb2000:                                     ; preds = %"end for blur_y.s0.x.x.rebased1989", %"produce blur_x2003"
  br i1 %306, label %"for blur_y.s0.x.x.rebased2015.preheader", label %"end for blur_y.s0.x.x.rebased2016", !prof !386

"for blur_y.s0.x.x.rebased2015.preheader":        ; preds = %after_bb2000
  %32252 = sext i32 %t17441012 to i64
  %32253 = zext i32 %.pre-phi3693 to i64
  %32254 = mul nsw i64 %32253, %353
  %32255 = sub nsw i64 %32254, %302
  %32256 = zext i32 %.pre-phi3689 to i64
  %32257 = mul nsw i64 %32256, %353
  %32258 = sub nsw i64 %32257, %302
  %32259 = zext i32 %.pre-phi3699 to i64
  %32260 = mul nsw i64 %32259, %353
  %32261 = sub nsw i64 %32260, %302
  %32262 = zext i32 %.pre-phi3669 to i64
  %32263 = mul nsw i64 %32262, %353
  %32264 = sub nsw i64 %32263, %302
  %32265 = zext i32 %.pre-phi3673 to i64
  %32266 = mul nsw i64 %32265, %353
  %32267 = sub nsw i64 %32266, %302
  %32268 = zext i32 %.pre-phi3681 to i64
  %32269 = mul nsw i64 %32268, %353
  %32270 = sub nsw i64 %32269, %302
  %32271 = zext i32 %.pre-phi3677 to i64
  %32272 = mul nsw i64 %32271, %353
  %32273 = sub nsw i64 %32272, %302
  %32274 = sext i32 %a393 to i64
  %32275 = add nsw i64 %32274, 21
  %32276 = mul nsw i64 %32275, %350
  %32277 = add nsw i64 %32276, %354
  br label %"for blur_y.s0.x.x.rebased2015"

"produce blur_x2003":                             ; preds = %"end for blur_y.s0.x.x.rebased1989"
  %32278 = getelementptr inbounds i16, i16* %read_input860, i64 %477
  %32279 = getelementptr inbounds i16, i16* %32278, i64 -31
  %32280 = bitcast i16* %32279 to <16 x i16>*
  %32281 = load <16 x i16>, <16 x i16>* %32280, align 2, !tbaa !396
  %32282 = getelementptr inbounds i16, i16* %32278, i64 -15
  %32283 = bitcast i16* %32282 to <16 x i16>*
  %32284 = load <16 x i16>, <16 x i16>* %32283, align 2, !tbaa !396
  %32285 = getelementptr inbounds i16, i16* %32278, i64 -32
  %32286 = bitcast i16* %32285 to <16 x i16>*
  %32287 = load <16 x i16>, <16 x i16>* %32286, align 2, !tbaa !396
  %32288 = getelementptr inbounds i16, i16* %32278, i64 -16
  %32289 = bitcast i16* %32288 to <16 x i16>*
  %32290 = load <16 x i16>, <16 x i16>* %32289, align 2, !tbaa !396
  %32291 = getelementptr inbounds i16, i16* %32278, i64 -30
  %32292 = bitcast i16* %32291 to <16 x i16>*
  %32293 = load <16 x i16>, <16 x i16>* %32292, align 2, !tbaa !396
  %32294 = getelementptr inbounds i16, i16* %32278, i64 -14
  %32295 = bitcast i16* %32294 to <16 x i16>*
  %32296 = load <16 x i16>, <16 x i16>* %32295, align 2, !tbaa !396
  %32297 = getelementptr inbounds i16, i16* %32278, i64 -29
  %32298 = bitcast i16* %32297 to <16 x i16>*
  %32299 = load <16 x i16>, <16 x i16>* %32298, align 2, !tbaa !396
  %32300 = getelementptr inbounds i16, i16* %32278, i64 -13
  %32301 = bitcast i16* %32300 to <16 x i16>*
  %32302 = load <16 x i16>, <16 x i16>* %32301, align 2, !tbaa !396
  %32303 = getelementptr inbounds i16, i16* %32278, i64 -28
  %32304 = bitcast i16* %32303 to <16 x i16>*
  %32305 = load <16 x i16>, <16 x i16>* %32304, align 2, !tbaa !396
  %32306 = getelementptr inbounds i16, i16* %32278, i64 -12
  %32307 = bitcast i16* %32306 to <16 x i16>*
  %32308 = load <16 x i16>, <16 x i16>* %32307, align 2, !tbaa !396
  %32309 = getelementptr inbounds i16, i16* %32278, i64 -26
  %32310 = bitcast i16* %32309 to <16 x i16>*
  %32311 = load <16 x i16>, <16 x i16>* %32310, align 2, !tbaa !396
  %32312 = getelementptr inbounds i16, i16* %32278, i64 -10
  %32313 = bitcast i16* %32312 to <16 x i16>*
  %32314 = load <16 x i16>, <16 x i16>* %32313, align 2, !tbaa !396
  %32315 = getelementptr inbounds i16, i16* %32278, i64 -27
  %32316 = bitcast i16* %32315 to <16 x i16>*
  %32317 = load <16 x i16>, <16 x i16>* %32316, align 2, !tbaa !396
  %32318 = getelementptr inbounds i16, i16* %32278, i64 -11
  %32319 = bitcast i16* %32318 to <16 x i16>*
  %32320 = load <16 x i16>, <16 x i16>* %32319, align 2, !tbaa !396
  %32321 = add <16 x i16> %32287, %32281
  %32322 = add <16 x i16> %32321, %32293
  %32323 = add <16 x i16> %32322, %32299
  %32324 = add <16 x i16> %32323, %32305
  %32325 = add <16 x i16> %32324, %32311
  %32326 = add <16 x i16> %32325, %32317
  %32327 = add <16 x i16> %32290, %32284
  %32328 = add <16 x i16> %32327, %32296
  %32329 = add <16 x i16> %32328, %32302
  %32330 = add <16 x i16> %32329, %32308
  %32331 = add <16 x i16> %32330, %32314
  %32332 = add <16 x i16> %32331, %32320
  %32333 = shufflevector <16 x i16> %32326, <16 x i16> %32332, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32334 = udiv <32 x i16> %32333, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %32335 = shufflevector <32 x i16> %32334, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32336 = zext i32 %.pre-phi3681 to i64
  %32337 = mul nsw i64 %303, %32336
  %32338 = add nsw i64 %305, %32337
  %32339 = getelementptr inbounds i16, i16* %blur_x917, i64 %32338
  %32340 = getelementptr inbounds i16, i16* %32339, i64 -32
  %32341 = bitcast i16* %32340 to <16 x i16>*
  store <16 x i16> %32335, <16 x i16>* %32341, align 2, !tbaa !399
  %32342 = shufflevector <32 x i16> %32334, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32343 = getelementptr inbounds i16, i16* %32339, i64 -16
  %32344 = bitcast i16* %32343 to <16 x i16>*
  store <16 x i16> %32342, <16 x i16>* %32344, align 2, !tbaa !399
  %32345 = zext i32 %.pre-phi3693 to i64
  %32346 = mul nsw i64 %32345, %349
  %32347 = add nsw i64 %32346, %300
  %32348 = getelementptr inbounds i16, i16* %blur_x917, i64 %32347
  %32349 = getelementptr inbounds i16, i16* %32348, i64 -32
  %32350 = bitcast i16* %32349 to <16 x i16>*
  %32351 = load <16 x i16>, <16 x i16>* %32350, align 2, !tbaa !399
  %32352 = getelementptr inbounds i16, i16* %32348, i64 -16
  %32353 = bitcast i16* %32352 to <16 x i16>*
  %32354 = load <16 x i16>, <16 x i16>* %32353, align 2, !tbaa !399
  %32355 = zext i32 %.pre-phi3689 to i64
  %32356 = mul nsw i64 %32355, %349
  %32357 = add nsw i64 %32356, %300
  %32358 = getelementptr inbounds i16, i16* %blur_x917, i64 %32357
  %32359 = getelementptr inbounds i16, i16* %32358, i64 -32
  %32360 = bitcast i16* %32359 to <16 x i16>*
  %32361 = load <16 x i16>, <16 x i16>* %32360, align 2, !tbaa !399
  %32362 = getelementptr inbounds i16, i16* %32358, i64 -16
  %32363 = bitcast i16* %32362 to <16 x i16>*
  %32364 = load <16 x i16>, <16 x i16>* %32363, align 2, !tbaa !399
  %32365 = zext i32 %.pre-phi3699 to i64
  %32366 = mul nsw i64 %32365, %349
  %32367 = add nsw i64 %32366, %300
  %32368 = getelementptr inbounds i16, i16* %blur_x917, i64 %32367
  %32369 = getelementptr inbounds i16, i16* %32368, i64 -32
  %32370 = bitcast i16* %32369 to <16 x i16>*
  %32371 = load <16 x i16>, <16 x i16>* %32370, align 2, !tbaa !399
  %32372 = getelementptr inbounds i16, i16* %32368, i64 -16
  %32373 = bitcast i16* %32372 to <16 x i16>*
  %32374 = load <16 x i16>, <16 x i16>* %32373, align 2, !tbaa !399
  %32375 = zext i32 %.pre-phi3669 to i64
  %32376 = mul nsw i64 %32375, %349
  %32377 = add nsw i64 %32376, %300
  %32378 = getelementptr inbounds i16, i16* %blur_x917, i64 %32377
  %32379 = getelementptr inbounds i16, i16* %32378, i64 -32
  %32380 = bitcast i16* %32379 to <16 x i16>*
  %32381 = load <16 x i16>, <16 x i16>* %32380, align 2, !tbaa !399
  %32382 = getelementptr inbounds i16, i16* %32378, i64 -16
  %32383 = bitcast i16* %32382 to <16 x i16>*
  %32384 = load <16 x i16>, <16 x i16>* %32383, align 2, !tbaa !399
  %32385 = zext i32 %.pre-phi3673 to i64
  %32386 = mul nsw i64 %32385, %349
  %32387 = add nsw i64 %32386, %300
  %32388 = getelementptr inbounds i16, i16* %blur_x917, i64 %32387
  %32389 = getelementptr inbounds i16, i16* %32388, i64 -32
  %32390 = bitcast i16* %32389 to <16 x i16>*
  %32391 = load <16 x i16>, <16 x i16>* %32390, align 2, !tbaa !399
  %32392 = getelementptr inbounds i16, i16* %32388, i64 -16
  %32393 = bitcast i16* %32392 to <16 x i16>*
  %32394 = load <16 x i16>, <16 x i16>* %32393, align 2, !tbaa !399
  %32395 = mul nsw i64 %32336, %349
  %32396 = add nsw i64 %32395, %300
  %32397 = getelementptr inbounds i16, i16* %blur_x917, i64 %32396
  %32398 = getelementptr inbounds i16, i16* %32397, i64 -32
  %32399 = bitcast i16* %32398 to <16 x i16>*
  %32400 = load <16 x i16>, <16 x i16>* %32399, align 2, !tbaa !399
  %32401 = getelementptr inbounds i16, i16* %32397, i64 -16
  %32402 = bitcast i16* %32401 to <16 x i16>*
  %32403 = load <16 x i16>, <16 x i16>* %32402, align 2, !tbaa !399
  %32404 = zext i32 %.pre-phi3677 to i64
  %32405 = mul nsw i64 %32404, %349
  %32406 = add nsw i64 %32405, %300
  %32407 = getelementptr inbounds i16, i16* %blur_x917, i64 %32406
  %32408 = getelementptr inbounds i16, i16* %32407, i64 -32
  %32409 = bitcast i16* %32408 to <16 x i16>*
  %32410 = load <16 x i16>, <16 x i16>* %32409, align 2, !tbaa !399
  %32411 = getelementptr inbounds i16, i16* %32407, i64 -16
  %32412 = bitcast i16* %32411 to <16 x i16>*
  %32413 = load <16 x i16>, <16 x i16>* %32412, align 2, !tbaa !399
  %32414 = add <16 x i16> %32361, %32351
  %32415 = add <16 x i16> %32414, %32371
  %32416 = add <16 x i16> %32415, %32381
  %32417 = add <16 x i16> %32416, %32391
  %32418 = add <16 x i16> %32417, %32400
  %32419 = add <16 x i16> %32418, %32410
  %32420 = add <16 x i16> %32364, %32354
  %32421 = add <16 x i16> %32420, %32374
  %32422 = add <16 x i16> %32421, %32384
  %32423 = add <16 x i16> %32422, %32394
  %32424 = add <16 x i16> %32423, %32403
  %32425 = add <16 x i16> %32424, %32413
  %32426 = shufflevector <16 x i16> %32419, <16 x i16> %32425, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32427 = udiv <32 x i16> %32426, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %32428 = shufflevector <32 x i16> %32427, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32429 = sext i32 %a393 to i64
  %32430 = add nsw i64 %32429, 21
  %32431 = mul nsw i64 %32430, %350
  %32432 = add nsw i64 %352, %32431
  %32433 = getelementptr inbounds i16, i16* %267, i64 %32432
  %32434 = getelementptr inbounds i16, i16* %32433, i64 -32
  %32435 = bitcast i16* %32434 to <16 x i16>*
  store <16 x i16> %32428, <16 x i16>* %32435, align 2, !tbaa !401
  %32436 = shufflevector <32 x i16> %32427, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32437 = getelementptr inbounds i16, i16* %32433, i64 -16
  %32438 = bitcast i16* %32437 to <16 x i16>*
  store <16 x i16> %32436, <16 x i16>* %32438, align 2, !tbaa !401
  br label %after_bb2000

"for blur_y.s0.x.x.rebased2015":                  ; preds = %"for blur_y.s0.x.x.rebased2015.preheader", %"consume blur_x2023"
  %indvars.iv3550 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2015.preheader" ], [ %indvars.iv.next3551, %"consume blur_x2023" ]
  %32439 = add nsw i64 %indvars.iv3550, %307
  %32440 = icmp slt i64 %32439, 1
  %32441 = trunc i64 %32439 to i32
  %32442 = shl nsw i32 %32441, 5
  %32443 = icmp sgt i32 %202, %32442
  %32444 = or i1 %32440, %32443
  br i1 %32444, label %"produce blur_x2021", label %"for blur_y.s0.x.x.rebased2015.consume blur_x2023_crit_edge"

"for blur_y.s0.x.x.rebased2015.consume blur_x2023_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2015"
  %.pre3740 = shl nsw i64 %32439, 5
  br label %"consume blur_x2023"

"end for blur_y.s0.x.x.rebased2016":              ; preds = %"consume blur_x2023", %after_bb2000
  br i1 %308, label %"for blur_y.s0.x.x.rebased2031.preheader", label %"end for blur_y.s0.x.x.rebased2032", !prof !386

"for blur_y.s0.x.x.rebased2031.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2016"
  %32445 = sext i32 %t17441012 to i64
  %32446 = zext i32 %.pre-phi3693 to i64
  %32447 = mul nsw i64 %32446, %353
  %32448 = sub nsw i64 %32447, %302
  %32449 = zext i32 %.pre-phi3689 to i64
  %32450 = mul nsw i64 %32449, %353
  %32451 = sub nsw i64 %32450, %302
  %32452 = zext i32 %.pre-phi3699 to i64
  %32453 = mul nsw i64 %32452, %353
  %32454 = sub nsw i64 %32453, %302
  %32455 = zext i32 %.pre-phi3669 to i64
  %32456 = mul nsw i64 %32455, %353
  %32457 = sub nsw i64 %32456, %302
  %32458 = zext i32 %.pre-phi3673 to i64
  %32459 = mul nsw i64 %32458, %353
  %32460 = sub nsw i64 %32459, %302
  %32461 = zext i32 %.pre-phi3681 to i64
  %32462 = mul nsw i64 %32461, %353
  %32463 = sub nsw i64 %32462, %302
  %32464 = zext i32 %.pre-phi3677 to i64
  %32465 = mul nsw i64 %32464, %353
  %32466 = sub nsw i64 %32465, %302
  %32467 = sext i32 %a393 to i64
  %32468 = add nsw i64 %32467, 21
  %32469 = mul nsw i64 %32468, %350
  %32470 = add nsw i64 %32469, %354
  br label %"for blur_y.s0.x.x.rebased2031"

"produce blur_x2021":                             ; preds = %"for blur_y.s0.x.x.rebased2015"
  %t10882022 = add nsw i32 %479, %32442
  %32471 = sext i32 %t10882022 to i64
  %32472 = getelementptr inbounds i16, i16* %read_input860, i64 %32471
  %32473 = getelementptr inbounds i16, i16* %32472, i64 1
  %32474 = bitcast i16* %32473 to <16 x i16>*
  %32475 = load <16 x i16>, <16 x i16>* %32474, align 2, !tbaa !396
  %32476 = getelementptr inbounds i16, i16* %32472, i64 17
  %32477 = bitcast i16* %32476 to <16 x i16>*
  %32478 = load <16 x i16>, <16 x i16>* %32477, align 2, !tbaa !396
  %32479 = bitcast i16* %32472 to <16 x i16>*
  %32480 = load <16 x i16>, <16 x i16>* %32479, align 2, !tbaa !396
  %32481 = getelementptr inbounds i16, i16* %32472, i64 16
  %32482 = bitcast i16* %32481 to <16 x i16>*
  %32483 = load <16 x i16>, <16 x i16>* %32482, align 2, !tbaa !396
  %32484 = getelementptr inbounds i16, i16* %32472, i64 2
  %32485 = bitcast i16* %32484 to <16 x i16>*
  %32486 = load <16 x i16>, <16 x i16>* %32485, align 2, !tbaa !396
  %32487 = getelementptr inbounds i16, i16* %32472, i64 18
  %32488 = bitcast i16* %32487 to <16 x i16>*
  %32489 = load <16 x i16>, <16 x i16>* %32488, align 2, !tbaa !396
  %32490 = getelementptr inbounds i16, i16* %32472, i64 3
  %32491 = bitcast i16* %32490 to <16 x i16>*
  %32492 = load <16 x i16>, <16 x i16>* %32491, align 2, !tbaa !396
  %32493 = getelementptr inbounds i16, i16* %32472, i64 19
  %32494 = bitcast i16* %32493 to <16 x i16>*
  %32495 = load <16 x i16>, <16 x i16>* %32494, align 2, !tbaa !396
  %32496 = getelementptr inbounds i16, i16* %32472, i64 4
  %32497 = bitcast i16* %32496 to <16 x i16>*
  %32498 = load <16 x i16>, <16 x i16>* %32497, align 2, !tbaa !396
  %32499 = getelementptr inbounds i16, i16* %32472, i64 20
  %32500 = bitcast i16* %32499 to <16 x i16>*
  %32501 = load <16 x i16>, <16 x i16>* %32500, align 2, !tbaa !396
  %32502 = getelementptr inbounds i16, i16* %32472, i64 6
  %32503 = bitcast i16* %32502 to <16 x i16>*
  %32504 = load <16 x i16>, <16 x i16>* %32503, align 2, !tbaa !396
  %32505 = getelementptr inbounds i16, i16* %32472, i64 22
  %32506 = bitcast i16* %32505 to <16 x i16>*
  %32507 = load <16 x i16>, <16 x i16>* %32506, align 2, !tbaa !396
  %32508 = getelementptr inbounds i16, i16* %32472, i64 5
  %32509 = bitcast i16* %32508 to <16 x i16>*
  %32510 = load <16 x i16>, <16 x i16>* %32509, align 2, !tbaa !396
  %32511 = getelementptr inbounds i16, i16* %32472, i64 21
  %32512 = bitcast i16* %32511 to <16 x i16>*
  %32513 = load <16 x i16>, <16 x i16>* %32512, align 2, !tbaa !396
  %32514 = add <16 x i16> %32480, %32475
  %32515 = add <16 x i16> %32514, %32486
  %32516 = add <16 x i16> %32515, %32492
  %32517 = add <16 x i16> %32516, %32498
  %32518 = add <16 x i16> %32517, %32504
  %32519 = add <16 x i16> %32518, %32510
  %32520 = add <16 x i16> %32483, %32478
  %32521 = add <16 x i16> %32520, %32489
  %32522 = add <16 x i16> %32521, %32495
  %32523 = add <16 x i16> %32522, %32501
  %32524 = add <16 x i16> %32523, %32507
  %32525 = add <16 x i16> %32524, %32513
  %32526 = shufflevector <16 x i16> %32519, <16 x i16> %32525, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32527 = udiv <32 x i16> %32526, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %32528 = shufflevector <32 x i16> %32527, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32529 = shl nsw i64 %32439, 5
  %32530 = add nsw i64 %32529, %32252
  %32531 = getelementptr inbounds i16, i16* %blur_x917, i64 %32530
  %32532 = bitcast i16* %32531 to <16 x i16>*
  store <16 x i16> %32528, <16 x i16>* %32532, align 2, !tbaa !399
  %32533 = shufflevector <32 x i16> %32527, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32534 = getelementptr inbounds i16, i16* %32531, i64 16
  %32535 = bitcast i16* %32534 to <16 x i16>*
  store <16 x i16> %32533, <16 x i16>* %32535, align 2, !tbaa !399
  br label %"consume blur_x2023"

"consume blur_x2023":                             ; preds = %"for blur_y.s0.x.x.rebased2015.consume blur_x2023_crit_edge", %"produce blur_x2021"
  %.pre-phi3741 = phi i64 [ %.pre3740, %"for blur_y.s0.x.x.rebased2015.consume blur_x2023_crit_edge" ], [ %32529, %"produce blur_x2021" ]
  %32536 = add nsw i64 %32255, %.pre-phi3741
  %32537 = getelementptr inbounds i16, i16* %blur_x917, i64 %32536
  %32538 = bitcast i16* %32537 to <16 x i16>*
  %32539 = load <16 x i16>, <16 x i16>* %32538, align 2, !tbaa !399
  %32540 = getelementptr inbounds i16, i16* %32537, i64 16
  %32541 = bitcast i16* %32540 to <16 x i16>*
  %32542 = load <16 x i16>, <16 x i16>* %32541, align 2, !tbaa !399
  %32543 = add nsw i64 %32258, %.pre-phi3741
  %32544 = getelementptr inbounds i16, i16* %blur_x917, i64 %32543
  %32545 = bitcast i16* %32544 to <16 x i16>*
  %32546 = load <16 x i16>, <16 x i16>* %32545, align 2, !tbaa !399
  %32547 = getelementptr inbounds i16, i16* %32544, i64 16
  %32548 = bitcast i16* %32547 to <16 x i16>*
  %32549 = load <16 x i16>, <16 x i16>* %32548, align 2, !tbaa !399
  %32550 = add nsw i64 %32261, %.pre-phi3741
  %32551 = getelementptr inbounds i16, i16* %blur_x917, i64 %32550
  %32552 = bitcast i16* %32551 to <16 x i16>*
  %32553 = load <16 x i16>, <16 x i16>* %32552, align 2, !tbaa !399
  %32554 = getelementptr inbounds i16, i16* %32551, i64 16
  %32555 = bitcast i16* %32554 to <16 x i16>*
  %32556 = load <16 x i16>, <16 x i16>* %32555, align 2, !tbaa !399
  %32557 = add nsw i64 %32264, %.pre-phi3741
  %32558 = getelementptr inbounds i16, i16* %blur_x917, i64 %32557
  %32559 = bitcast i16* %32558 to <16 x i16>*
  %32560 = load <16 x i16>, <16 x i16>* %32559, align 2, !tbaa !399
  %32561 = getelementptr inbounds i16, i16* %32558, i64 16
  %32562 = bitcast i16* %32561 to <16 x i16>*
  %32563 = load <16 x i16>, <16 x i16>* %32562, align 2, !tbaa !399
  %32564 = add nsw i64 %32267, %.pre-phi3741
  %32565 = getelementptr inbounds i16, i16* %blur_x917, i64 %32564
  %32566 = bitcast i16* %32565 to <16 x i16>*
  %32567 = load <16 x i16>, <16 x i16>* %32566, align 2, !tbaa !399
  %32568 = getelementptr inbounds i16, i16* %32565, i64 16
  %32569 = bitcast i16* %32568 to <16 x i16>*
  %32570 = load <16 x i16>, <16 x i16>* %32569, align 2, !tbaa !399
  %32571 = add nsw i64 %32270, %.pre-phi3741
  %32572 = getelementptr inbounds i16, i16* %blur_x917, i64 %32571
  %32573 = bitcast i16* %32572 to <16 x i16>*
  %32574 = load <16 x i16>, <16 x i16>* %32573, align 2, !tbaa !399
  %32575 = getelementptr inbounds i16, i16* %32572, i64 16
  %32576 = bitcast i16* %32575 to <16 x i16>*
  %32577 = load <16 x i16>, <16 x i16>* %32576, align 2, !tbaa !399
  %32578 = add nsw i64 %32273, %.pre-phi3741
  %32579 = getelementptr inbounds i16, i16* %blur_x917, i64 %32578
  %32580 = bitcast i16* %32579 to <16 x i16>*
  %32581 = load <16 x i16>, <16 x i16>* %32580, align 2, !tbaa !399
  %32582 = getelementptr inbounds i16, i16* %32579, i64 16
  %32583 = bitcast i16* %32582 to <16 x i16>*
  %32584 = load <16 x i16>, <16 x i16>* %32583, align 2, !tbaa !399
  %32585 = add <16 x i16> %32546, %32539
  %32586 = add <16 x i16> %32585, %32553
  %32587 = add <16 x i16> %32586, %32560
  %32588 = add <16 x i16> %32587, %32567
  %32589 = add <16 x i16> %32588, %32574
  %32590 = add <16 x i16> %32589, %32581
  %32591 = add <16 x i16> %32549, %32542
  %32592 = add <16 x i16> %32591, %32556
  %32593 = add <16 x i16> %32592, %32563
  %32594 = add <16 x i16> %32593, %32570
  %32595 = add <16 x i16> %32594, %32577
  %32596 = add <16 x i16> %32595, %32584
  %32597 = shufflevector <16 x i16> %32590, <16 x i16> %32596, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32598 = udiv <32 x i16> %32597, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %32599 = shufflevector <32 x i16> %32598, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32600 = add nsw i64 %32277, %.pre-phi3741
  %32601 = getelementptr inbounds i16, i16* %267, i64 %32600
  %32602 = bitcast i16* %32601 to <16 x i16>*
  store <16 x i16> %32599, <16 x i16>* %32602, align 2, !tbaa !401
  %32603 = shufflevector <32 x i16> %32598, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32604 = getelementptr inbounds i16, i16* %32601, i64 16
  %32605 = bitcast i16* %32604 to <16 x i16>*
  store <16 x i16> %32603, <16 x i16>* %32605, align 2, !tbaa !401
  %indvars.iv.next3551 = add nuw nsw i64 %indvars.iv3550, 1
  %.not2685 = icmp eq i64 %indvars.iv.next3551, %546
  br i1 %.not2685, label %"end for blur_y.s0.x.x.rebased2016", label %"for blur_y.s0.x.x.rebased2015"

"for blur_y.s0.x.x.rebased2031":                  ; preds = %"for blur_y.s0.x.x.rebased2031.preheader", %"consume blur_x2042"
  %blur_y.s0.x.x.rebased2033 = phi i32 [ %32748, %"consume blur_x2042" ], [ 0, %"for blur_y.s0.x.x.rebased2031.preheader" ]
  %32606 = add nsw i32 %blur_y.s0.x.x.rebased2033, %t1670852
  %a4900 = shl nsw i32 %32606, 5
  %32607 = icmp sgt i32 %t1691, %a4900
  %blur_y.s0.x.v0.base.s2034 = select i1 %32607, i32 %a4900, i32 %t1691
  %32608 = icmp slt i32 %32606, 1
  %32609 = icmp sgt i32 %202, %a4900
  %32610 = or i1 %32608, %32609
  br i1 %32610, label %"produce blur_x2039", label %"consume blur_x2042"

"end for blur_y.s0.x.x.rebased2032":              ; preds = %"consume blur_x2042", %"end for blur_y.s0.x.x.rebased2016"
  br i1 %233, label %"produce blur_x2046", label %after_bb2043

"produce blur_x2039":                             ; preds = %"for blur_y.s0.x.x.rebased2031"
  %32611 = icmp slt i32 %blur_y.s0.x.v0.base.s2034, %202
  %blur_x.s0.x.v1.base.s2040 = select i1 %32611, i32 %blur_y.s0.x.v0.base.s2034, i32 %202
  %t10932041 = add nsw i32 %479, %blur_x.s0.x.v1.base.s2040
  %32612 = sext i32 %t10932041 to i64
  %32613 = getelementptr inbounds i16, i16* %read_input860, i64 %32612
  %32614 = getelementptr inbounds i16, i16* %32613, i64 1
  %32615 = bitcast i16* %32614 to <16 x i16>*
  %32616 = load <16 x i16>, <16 x i16>* %32615, align 2, !tbaa !396
  %32617 = getelementptr inbounds i16, i16* %32613, i64 17
  %32618 = bitcast i16* %32617 to <16 x i16>*
  %32619 = load <16 x i16>, <16 x i16>* %32618, align 2, !tbaa !396
  %32620 = bitcast i16* %32613 to <16 x i16>*
  %32621 = load <16 x i16>, <16 x i16>* %32620, align 2, !tbaa !396
  %32622 = getelementptr inbounds i16, i16* %32613, i64 16
  %32623 = bitcast i16* %32622 to <16 x i16>*
  %32624 = load <16 x i16>, <16 x i16>* %32623, align 2, !tbaa !396
  %32625 = getelementptr inbounds i16, i16* %32613, i64 2
  %32626 = bitcast i16* %32625 to <16 x i16>*
  %32627 = load <16 x i16>, <16 x i16>* %32626, align 2, !tbaa !396
  %32628 = getelementptr inbounds i16, i16* %32613, i64 18
  %32629 = bitcast i16* %32628 to <16 x i16>*
  %32630 = load <16 x i16>, <16 x i16>* %32629, align 2, !tbaa !396
  %32631 = getelementptr inbounds i16, i16* %32613, i64 3
  %32632 = bitcast i16* %32631 to <16 x i16>*
  %32633 = load <16 x i16>, <16 x i16>* %32632, align 2, !tbaa !396
  %32634 = getelementptr inbounds i16, i16* %32613, i64 19
  %32635 = bitcast i16* %32634 to <16 x i16>*
  %32636 = load <16 x i16>, <16 x i16>* %32635, align 2, !tbaa !396
  %32637 = getelementptr inbounds i16, i16* %32613, i64 4
  %32638 = bitcast i16* %32637 to <16 x i16>*
  %32639 = load <16 x i16>, <16 x i16>* %32638, align 2, !tbaa !396
  %32640 = getelementptr inbounds i16, i16* %32613, i64 20
  %32641 = bitcast i16* %32640 to <16 x i16>*
  %32642 = load <16 x i16>, <16 x i16>* %32641, align 2, !tbaa !396
  %32643 = getelementptr inbounds i16, i16* %32613, i64 6
  %32644 = bitcast i16* %32643 to <16 x i16>*
  %32645 = load <16 x i16>, <16 x i16>* %32644, align 2, !tbaa !396
  %32646 = getelementptr inbounds i16, i16* %32613, i64 22
  %32647 = bitcast i16* %32646 to <16 x i16>*
  %32648 = load <16 x i16>, <16 x i16>* %32647, align 2, !tbaa !396
  %32649 = getelementptr inbounds i16, i16* %32613, i64 5
  %32650 = bitcast i16* %32649 to <16 x i16>*
  %32651 = load <16 x i16>, <16 x i16>* %32650, align 2, !tbaa !396
  %32652 = getelementptr inbounds i16, i16* %32613, i64 21
  %32653 = bitcast i16* %32652 to <16 x i16>*
  %32654 = load <16 x i16>, <16 x i16>* %32653, align 2, !tbaa !396
  %32655 = add <16 x i16> %32621, %32616
  %32656 = add <16 x i16> %32655, %32627
  %32657 = add <16 x i16> %32656, %32633
  %32658 = add <16 x i16> %32657, %32639
  %32659 = add <16 x i16> %32658, %32645
  %32660 = add <16 x i16> %32659, %32651
  %32661 = add <16 x i16> %32624, %32619
  %32662 = add <16 x i16> %32661, %32630
  %32663 = add <16 x i16> %32662, %32636
  %32664 = add <16 x i16> %32663, %32642
  %32665 = add <16 x i16> %32664, %32648
  %32666 = add <16 x i16> %32665, %32654
  %32667 = shufflevector <16 x i16> %32660, <16 x i16> %32666, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32668 = udiv <32 x i16> %32667, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %32669 = shufflevector <32 x i16> %32668, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32670 = sext i32 %blur_x.s0.x.v1.base.s2040 to i64
  %32671 = add nsw i64 %32670, %32445
  %32672 = getelementptr inbounds i16, i16* %blur_x917, i64 %32671
  %32673 = bitcast i16* %32672 to <16 x i16>*
  store <16 x i16> %32669, <16 x i16>* %32673, align 2, !tbaa !399
  %32674 = shufflevector <32 x i16> %32668, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32675 = getelementptr inbounds i16, i16* %32672, i64 16
  %32676 = bitcast i16* %32675 to <16 x i16>*
  store <16 x i16> %32674, <16 x i16>* %32676, align 2, !tbaa !399
  br label %"consume blur_x2042"

"consume blur_x2042":                             ; preds = %"for blur_y.s0.x.x.rebased2031", %"produce blur_x2039"
  %32677 = sext i32 %blur_y.s0.x.v0.base.s2034 to i64
  %32678 = add nsw i64 %32448, %32677
  %32679 = getelementptr inbounds i16, i16* %blur_x917, i64 %32678
  %32680 = bitcast i16* %32679 to <16 x i16>*
  %32681 = load <16 x i16>, <16 x i16>* %32680, align 2, !tbaa !399
  %32682 = getelementptr inbounds i16, i16* %32679, i64 16
  %32683 = bitcast i16* %32682 to <16 x i16>*
  %32684 = load <16 x i16>, <16 x i16>* %32683, align 2, !tbaa !399
  %32685 = add nsw i64 %32451, %32677
  %32686 = getelementptr inbounds i16, i16* %blur_x917, i64 %32685
  %32687 = bitcast i16* %32686 to <16 x i16>*
  %32688 = load <16 x i16>, <16 x i16>* %32687, align 2, !tbaa !399
  %32689 = getelementptr inbounds i16, i16* %32686, i64 16
  %32690 = bitcast i16* %32689 to <16 x i16>*
  %32691 = load <16 x i16>, <16 x i16>* %32690, align 2, !tbaa !399
  %32692 = add nsw i64 %32454, %32677
  %32693 = getelementptr inbounds i16, i16* %blur_x917, i64 %32692
  %32694 = bitcast i16* %32693 to <16 x i16>*
  %32695 = load <16 x i16>, <16 x i16>* %32694, align 2, !tbaa !399
  %32696 = getelementptr inbounds i16, i16* %32693, i64 16
  %32697 = bitcast i16* %32696 to <16 x i16>*
  %32698 = load <16 x i16>, <16 x i16>* %32697, align 2, !tbaa !399
  %32699 = add nsw i64 %32457, %32677
  %32700 = getelementptr inbounds i16, i16* %blur_x917, i64 %32699
  %32701 = bitcast i16* %32700 to <16 x i16>*
  %32702 = load <16 x i16>, <16 x i16>* %32701, align 2, !tbaa !399
  %32703 = getelementptr inbounds i16, i16* %32700, i64 16
  %32704 = bitcast i16* %32703 to <16 x i16>*
  %32705 = load <16 x i16>, <16 x i16>* %32704, align 2, !tbaa !399
  %32706 = add nsw i64 %32460, %32677
  %32707 = getelementptr inbounds i16, i16* %blur_x917, i64 %32706
  %32708 = bitcast i16* %32707 to <16 x i16>*
  %32709 = load <16 x i16>, <16 x i16>* %32708, align 2, !tbaa !399
  %32710 = getelementptr inbounds i16, i16* %32707, i64 16
  %32711 = bitcast i16* %32710 to <16 x i16>*
  %32712 = load <16 x i16>, <16 x i16>* %32711, align 2, !tbaa !399
  %32713 = add nsw i64 %32463, %32677
  %32714 = getelementptr inbounds i16, i16* %blur_x917, i64 %32713
  %32715 = bitcast i16* %32714 to <16 x i16>*
  %32716 = load <16 x i16>, <16 x i16>* %32715, align 2, !tbaa !399
  %32717 = getelementptr inbounds i16, i16* %32714, i64 16
  %32718 = bitcast i16* %32717 to <16 x i16>*
  %32719 = load <16 x i16>, <16 x i16>* %32718, align 2, !tbaa !399
  %32720 = add nsw i64 %32466, %32677
  %32721 = getelementptr inbounds i16, i16* %blur_x917, i64 %32720
  %32722 = bitcast i16* %32721 to <16 x i16>*
  %32723 = load <16 x i16>, <16 x i16>* %32722, align 2, !tbaa !399
  %32724 = getelementptr inbounds i16, i16* %32721, i64 16
  %32725 = bitcast i16* %32724 to <16 x i16>*
  %32726 = load <16 x i16>, <16 x i16>* %32725, align 2, !tbaa !399
  %32727 = add <16 x i16> %32688, %32681
  %32728 = add <16 x i16> %32727, %32695
  %32729 = add <16 x i16> %32728, %32702
  %32730 = add <16 x i16> %32729, %32709
  %32731 = add <16 x i16> %32730, %32716
  %32732 = add <16 x i16> %32731, %32723
  %32733 = add <16 x i16> %32691, %32684
  %32734 = add <16 x i16> %32733, %32698
  %32735 = add <16 x i16> %32734, %32705
  %32736 = add <16 x i16> %32735, %32712
  %32737 = add <16 x i16> %32736, %32719
  %32738 = add <16 x i16> %32737, %32726
  %32739 = shufflevector <16 x i16> %32732, <16 x i16> %32738, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32740 = udiv <32 x i16> %32739, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %32741 = shufflevector <32 x i16> %32740, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32742 = add nsw i64 %32470, %32677
  %32743 = getelementptr inbounds i16, i16* %267, i64 %32742
  %32744 = bitcast i16* %32743 to <16 x i16>*
  store <16 x i16> %32741, <16 x i16>* %32744, align 2, !tbaa !401
  %32745 = shufflevector <32 x i16> %32740, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32746 = getelementptr inbounds i16, i16* %32743, i64 16
  %32747 = bitcast i16* %32746 to <16 x i16>*
  store <16 x i16> %32745, <16 x i16>* %32747, align 2, !tbaa !401
  %32748 = add nuw nsw i32 %blur_y.s0.x.x.rebased2033, 1
  %.not2684 = icmp eq i32 %32748, %t1727936
  br i1 %.not2684, label %"end for blur_y.s0.x.x.rebased2032", label %"for blur_y.s0.x.x.rebased2031"

after_bb2043:                                     ; preds = %"end for blur_y.s0.x.x.rebased2032", %"produce blur_x2046"
  br i1 %306, label %"for blur_y.s0.x.x.rebased2058.preheader", label %"end for blur_y.s0.x.x.rebased2059", !prof !386

"for blur_y.s0.x.x.rebased2058.preheader":        ; preds = %after_bb2043
  %32749 = sext i32 %t17501042 to i64
  %32750 = zext i32 %.pre-phi3699 to i64
  %32751 = mul nsw i64 %32750, %353
  %32752 = sub nsw i64 %32751, %302
  %32753 = zext i32 %.pre-phi3693 to i64
  %32754 = mul nsw i64 %32753, %353
  %32755 = sub nsw i64 %32754, %302
  %32756 = zext i32 %.pre-phi3669 to i64
  %32757 = mul nsw i64 %32756, %353
  %32758 = sub nsw i64 %32757, %302
  %32759 = zext i32 %.pre-phi3673 to i64
  %32760 = mul nsw i64 %32759, %353
  %32761 = sub nsw i64 %32760, %302
  %32762 = zext i32 %.pre-phi3677 to i64
  %32763 = mul nsw i64 %32762, %353
  %32764 = sub nsw i64 %32763, %302
  %32765 = zext i32 %.pre-phi3685 to i64
  %32766 = mul nsw i64 %32765, %353
  %32767 = sub nsw i64 %32766, %302
  %32768 = zext i32 %.pre-phi3681 to i64
  %32769 = mul nsw i64 %32768, %353
  %32770 = sub nsw i64 %32769, %302
  %32771 = sext i32 %a393 to i64
  %32772 = add nsw i64 %32771, 22
  %32773 = mul nsw i64 %32772, %350
  %32774 = add nsw i64 %32773, %354
  br label %"for blur_y.s0.x.x.rebased2058"

"produce blur_x2046":                             ; preds = %"end for blur_y.s0.x.x.rebased2032"
  %32775 = getelementptr inbounds i16, i16* %read_input860, i64 %483
  %32776 = getelementptr inbounds i16, i16* %32775, i64 -31
  %32777 = bitcast i16* %32776 to <16 x i16>*
  %32778 = load <16 x i16>, <16 x i16>* %32777, align 2, !tbaa !396
  %32779 = getelementptr inbounds i16, i16* %32775, i64 -15
  %32780 = bitcast i16* %32779 to <16 x i16>*
  %32781 = load <16 x i16>, <16 x i16>* %32780, align 2, !tbaa !396
  %32782 = getelementptr inbounds i16, i16* %32775, i64 -32
  %32783 = bitcast i16* %32782 to <16 x i16>*
  %32784 = load <16 x i16>, <16 x i16>* %32783, align 2, !tbaa !396
  %32785 = getelementptr inbounds i16, i16* %32775, i64 -16
  %32786 = bitcast i16* %32785 to <16 x i16>*
  %32787 = load <16 x i16>, <16 x i16>* %32786, align 2, !tbaa !396
  %32788 = getelementptr inbounds i16, i16* %32775, i64 -30
  %32789 = bitcast i16* %32788 to <16 x i16>*
  %32790 = load <16 x i16>, <16 x i16>* %32789, align 2, !tbaa !396
  %32791 = getelementptr inbounds i16, i16* %32775, i64 -14
  %32792 = bitcast i16* %32791 to <16 x i16>*
  %32793 = load <16 x i16>, <16 x i16>* %32792, align 2, !tbaa !396
  %32794 = getelementptr inbounds i16, i16* %32775, i64 -29
  %32795 = bitcast i16* %32794 to <16 x i16>*
  %32796 = load <16 x i16>, <16 x i16>* %32795, align 2, !tbaa !396
  %32797 = getelementptr inbounds i16, i16* %32775, i64 -13
  %32798 = bitcast i16* %32797 to <16 x i16>*
  %32799 = load <16 x i16>, <16 x i16>* %32798, align 2, !tbaa !396
  %32800 = getelementptr inbounds i16, i16* %32775, i64 -28
  %32801 = bitcast i16* %32800 to <16 x i16>*
  %32802 = load <16 x i16>, <16 x i16>* %32801, align 2, !tbaa !396
  %32803 = getelementptr inbounds i16, i16* %32775, i64 -12
  %32804 = bitcast i16* %32803 to <16 x i16>*
  %32805 = load <16 x i16>, <16 x i16>* %32804, align 2, !tbaa !396
  %32806 = getelementptr inbounds i16, i16* %32775, i64 -26
  %32807 = bitcast i16* %32806 to <16 x i16>*
  %32808 = load <16 x i16>, <16 x i16>* %32807, align 2, !tbaa !396
  %32809 = getelementptr inbounds i16, i16* %32775, i64 -10
  %32810 = bitcast i16* %32809 to <16 x i16>*
  %32811 = load <16 x i16>, <16 x i16>* %32810, align 2, !tbaa !396
  %32812 = getelementptr inbounds i16, i16* %32775, i64 -27
  %32813 = bitcast i16* %32812 to <16 x i16>*
  %32814 = load <16 x i16>, <16 x i16>* %32813, align 2, !tbaa !396
  %32815 = getelementptr inbounds i16, i16* %32775, i64 -11
  %32816 = bitcast i16* %32815 to <16 x i16>*
  %32817 = load <16 x i16>, <16 x i16>* %32816, align 2, !tbaa !396
  %32818 = add <16 x i16> %32784, %32778
  %32819 = add <16 x i16> %32818, %32790
  %32820 = add <16 x i16> %32819, %32796
  %32821 = add <16 x i16> %32820, %32802
  %32822 = add <16 x i16> %32821, %32808
  %32823 = add <16 x i16> %32822, %32814
  %32824 = add <16 x i16> %32787, %32781
  %32825 = add <16 x i16> %32824, %32793
  %32826 = add <16 x i16> %32825, %32799
  %32827 = add <16 x i16> %32826, %32805
  %32828 = add <16 x i16> %32827, %32811
  %32829 = add <16 x i16> %32828, %32817
  %32830 = shufflevector <16 x i16> %32823, <16 x i16> %32829, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32831 = udiv <32 x i16> %32830, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %32832 = shufflevector <32 x i16> %32831, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32833 = zext i32 %.pre-phi3685 to i64
  %32834 = mul nsw i64 %303, %32833
  %32835 = add nsw i64 %305, %32834
  %32836 = getelementptr inbounds i16, i16* %blur_x917, i64 %32835
  %32837 = getelementptr inbounds i16, i16* %32836, i64 -32
  %32838 = bitcast i16* %32837 to <16 x i16>*
  store <16 x i16> %32832, <16 x i16>* %32838, align 2, !tbaa !399
  %32839 = shufflevector <32 x i16> %32831, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32840 = getelementptr inbounds i16, i16* %32836, i64 -16
  %32841 = bitcast i16* %32840 to <16 x i16>*
  store <16 x i16> %32839, <16 x i16>* %32841, align 2, !tbaa !399
  %32842 = zext i32 %.pre-phi3699 to i64
  %32843 = mul nsw i64 %32842, %349
  %32844 = add nsw i64 %32843, %300
  %32845 = getelementptr inbounds i16, i16* %blur_x917, i64 %32844
  %32846 = getelementptr inbounds i16, i16* %32845, i64 -32
  %32847 = bitcast i16* %32846 to <16 x i16>*
  %32848 = load <16 x i16>, <16 x i16>* %32847, align 2, !tbaa !399
  %32849 = getelementptr inbounds i16, i16* %32845, i64 -16
  %32850 = bitcast i16* %32849 to <16 x i16>*
  %32851 = load <16 x i16>, <16 x i16>* %32850, align 2, !tbaa !399
  %32852 = zext i32 %.pre-phi3693 to i64
  %32853 = mul nsw i64 %32852, %349
  %32854 = add nsw i64 %32853, %300
  %32855 = getelementptr inbounds i16, i16* %blur_x917, i64 %32854
  %32856 = getelementptr inbounds i16, i16* %32855, i64 -32
  %32857 = bitcast i16* %32856 to <16 x i16>*
  %32858 = load <16 x i16>, <16 x i16>* %32857, align 2, !tbaa !399
  %32859 = getelementptr inbounds i16, i16* %32855, i64 -16
  %32860 = bitcast i16* %32859 to <16 x i16>*
  %32861 = load <16 x i16>, <16 x i16>* %32860, align 2, !tbaa !399
  %32862 = zext i32 %.pre-phi3669 to i64
  %32863 = mul nsw i64 %32862, %349
  %32864 = add nsw i64 %32863, %300
  %32865 = getelementptr inbounds i16, i16* %blur_x917, i64 %32864
  %32866 = getelementptr inbounds i16, i16* %32865, i64 -32
  %32867 = bitcast i16* %32866 to <16 x i16>*
  %32868 = load <16 x i16>, <16 x i16>* %32867, align 2, !tbaa !399
  %32869 = getelementptr inbounds i16, i16* %32865, i64 -16
  %32870 = bitcast i16* %32869 to <16 x i16>*
  %32871 = load <16 x i16>, <16 x i16>* %32870, align 2, !tbaa !399
  %32872 = zext i32 %.pre-phi3673 to i64
  %32873 = mul nsw i64 %32872, %349
  %32874 = add nsw i64 %32873, %300
  %32875 = getelementptr inbounds i16, i16* %blur_x917, i64 %32874
  %32876 = getelementptr inbounds i16, i16* %32875, i64 -32
  %32877 = bitcast i16* %32876 to <16 x i16>*
  %32878 = load <16 x i16>, <16 x i16>* %32877, align 2, !tbaa !399
  %32879 = getelementptr inbounds i16, i16* %32875, i64 -16
  %32880 = bitcast i16* %32879 to <16 x i16>*
  %32881 = load <16 x i16>, <16 x i16>* %32880, align 2, !tbaa !399
  %32882 = zext i32 %.pre-phi3677 to i64
  %32883 = mul nsw i64 %32882, %349
  %32884 = add nsw i64 %32883, %300
  %32885 = getelementptr inbounds i16, i16* %blur_x917, i64 %32884
  %32886 = getelementptr inbounds i16, i16* %32885, i64 -32
  %32887 = bitcast i16* %32886 to <16 x i16>*
  %32888 = load <16 x i16>, <16 x i16>* %32887, align 2, !tbaa !399
  %32889 = getelementptr inbounds i16, i16* %32885, i64 -16
  %32890 = bitcast i16* %32889 to <16 x i16>*
  %32891 = load <16 x i16>, <16 x i16>* %32890, align 2, !tbaa !399
  %32892 = mul nsw i64 %32833, %349
  %32893 = add nsw i64 %32892, %300
  %32894 = getelementptr inbounds i16, i16* %blur_x917, i64 %32893
  %32895 = getelementptr inbounds i16, i16* %32894, i64 -32
  %32896 = bitcast i16* %32895 to <16 x i16>*
  %32897 = load <16 x i16>, <16 x i16>* %32896, align 2, !tbaa !399
  %32898 = getelementptr inbounds i16, i16* %32894, i64 -16
  %32899 = bitcast i16* %32898 to <16 x i16>*
  %32900 = load <16 x i16>, <16 x i16>* %32899, align 2, !tbaa !399
  %32901 = zext i32 %.pre-phi3681 to i64
  %32902 = mul nsw i64 %32901, %349
  %32903 = add nsw i64 %32902, %300
  %32904 = getelementptr inbounds i16, i16* %blur_x917, i64 %32903
  %32905 = getelementptr inbounds i16, i16* %32904, i64 -32
  %32906 = bitcast i16* %32905 to <16 x i16>*
  %32907 = load <16 x i16>, <16 x i16>* %32906, align 2, !tbaa !399
  %32908 = getelementptr inbounds i16, i16* %32904, i64 -16
  %32909 = bitcast i16* %32908 to <16 x i16>*
  %32910 = load <16 x i16>, <16 x i16>* %32909, align 2, !tbaa !399
  %32911 = add <16 x i16> %32858, %32848
  %32912 = add <16 x i16> %32911, %32868
  %32913 = add <16 x i16> %32912, %32878
  %32914 = add <16 x i16> %32913, %32888
  %32915 = add <16 x i16> %32914, %32897
  %32916 = add <16 x i16> %32915, %32907
  %32917 = add <16 x i16> %32861, %32851
  %32918 = add <16 x i16> %32917, %32871
  %32919 = add <16 x i16> %32918, %32881
  %32920 = add <16 x i16> %32919, %32891
  %32921 = add <16 x i16> %32920, %32900
  %32922 = add <16 x i16> %32921, %32910
  %32923 = shufflevector <16 x i16> %32916, <16 x i16> %32922, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32924 = udiv <32 x i16> %32923, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %32925 = shufflevector <32 x i16> %32924, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32926 = sext i32 %a393 to i64
  %32927 = add nsw i64 %32926, 22
  %32928 = mul nsw i64 %32927, %350
  %32929 = add nsw i64 %352, %32928
  %32930 = getelementptr inbounds i16, i16* %267, i64 %32929
  %32931 = getelementptr inbounds i16, i16* %32930, i64 -32
  %32932 = bitcast i16* %32931 to <16 x i16>*
  store <16 x i16> %32925, <16 x i16>* %32932, align 2, !tbaa !401
  %32933 = shufflevector <32 x i16> %32924, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32934 = getelementptr inbounds i16, i16* %32930, i64 -16
  %32935 = bitcast i16* %32934 to <16 x i16>*
  store <16 x i16> %32933, <16 x i16>* %32935, align 2, !tbaa !401
  br label %after_bb2043

"for blur_y.s0.x.x.rebased2058":                  ; preds = %"for blur_y.s0.x.x.rebased2058.preheader", %"consume blur_x2066"
  %indvars.iv3552 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2058.preheader" ], [ %indvars.iv.next3553, %"consume blur_x2066" ]
  %32936 = add nsw i64 %indvars.iv3552, %307
  %32937 = icmp slt i64 %32936, 1
  %32938 = trunc i64 %32936 to i32
  %32939 = shl nsw i32 %32938, 5
  %32940 = icmp sgt i32 %202, %32939
  %32941 = or i1 %32937, %32940
  br i1 %32941, label %"produce blur_x2064", label %"for blur_y.s0.x.x.rebased2058.consume blur_x2066_crit_edge"

"for blur_y.s0.x.x.rebased2058.consume blur_x2066_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2058"
  %.pre3742 = shl nsw i64 %32936, 5
  br label %"consume blur_x2066"

"end for blur_y.s0.x.x.rebased2059":              ; preds = %"consume blur_x2066", %after_bb2043
  br i1 %308, label %"for blur_y.s0.x.x.rebased2074.preheader", label %"end for blur_y.s0.x.x.rebased2075", !prof !386

"for blur_y.s0.x.x.rebased2074.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2059"
  %32942 = sext i32 %t17501042 to i64
  %32943 = zext i32 %.pre-phi3699 to i64
  %32944 = mul nsw i64 %32943, %353
  %32945 = sub nsw i64 %32944, %302
  %32946 = zext i32 %.pre-phi3693 to i64
  %32947 = mul nsw i64 %32946, %353
  %32948 = sub nsw i64 %32947, %302
  %32949 = zext i32 %.pre-phi3669 to i64
  %32950 = mul nsw i64 %32949, %353
  %32951 = sub nsw i64 %32950, %302
  %32952 = zext i32 %.pre-phi3673 to i64
  %32953 = mul nsw i64 %32952, %353
  %32954 = sub nsw i64 %32953, %302
  %32955 = zext i32 %.pre-phi3677 to i64
  %32956 = mul nsw i64 %32955, %353
  %32957 = sub nsw i64 %32956, %302
  %32958 = zext i32 %.pre-phi3685 to i64
  %32959 = mul nsw i64 %32958, %353
  %32960 = sub nsw i64 %32959, %302
  %32961 = zext i32 %.pre-phi3681 to i64
  %32962 = mul nsw i64 %32961, %353
  %32963 = sub nsw i64 %32962, %302
  %32964 = sext i32 %a393 to i64
  %32965 = add nsw i64 %32964, 22
  %32966 = mul nsw i64 %32965, %350
  %32967 = add nsw i64 %32966, %354
  br label %"for blur_y.s0.x.x.rebased2074"

"produce blur_x2064":                             ; preds = %"for blur_y.s0.x.x.rebased2058"
  %t11042065 = add nsw i32 %485, %32939
  %32968 = sext i32 %t11042065 to i64
  %32969 = getelementptr inbounds i16, i16* %read_input860, i64 %32968
  %32970 = getelementptr inbounds i16, i16* %32969, i64 1
  %32971 = bitcast i16* %32970 to <16 x i16>*
  %32972 = load <16 x i16>, <16 x i16>* %32971, align 2, !tbaa !396
  %32973 = getelementptr inbounds i16, i16* %32969, i64 17
  %32974 = bitcast i16* %32973 to <16 x i16>*
  %32975 = load <16 x i16>, <16 x i16>* %32974, align 2, !tbaa !396
  %32976 = bitcast i16* %32969 to <16 x i16>*
  %32977 = load <16 x i16>, <16 x i16>* %32976, align 2, !tbaa !396
  %32978 = getelementptr inbounds i16, i16* %32969, i64 16
  %32979 = bitcast i16* %32978 to <16 x i16>*
  %32980 = load <16 x i16>, <16 x i16>* %32979, align 2, !tbaa !396
  %32981 = getelementptr inbounds i16, i16* %32969, i64 2
  %32982 = bitcast i16* %32981 to <16 x i16>*
  %32983 = load <16 x i16>, <16 x i16>* %32982, align 2, !tbaa !396
  %32984 = getelementptr inbounds i16, i16* %32969, i64 18
  %32985 = bitcast i16* %32984 to <16 x i16>*
  %32986 = load <16 x i16>, <16 x i16>* %32985, align 2, !tbaa !396
  %32987 = getelementptr inbounds i16, i16* %32969, i64 3
  %32988 = bitcast i16* %32987 to <16 x i16>*
  %32989 = load <16 x i16>, <16 x i16>* %32988, align 2, !tbaa !396
  %32990 = getelementptr inbounds i16, i16* %32969, i64 19
  %32991 = bitcast i16* %32990 to <16 x i16>*
  %32992 = load <16 x i16>, <16 x i16>* %32991, align 2, !tbaa !396
  %32993 = getelementptr inbounds i16, i16* %32969, i64 4
  %32994 = bitcast i16* %32993 to <16 x i16>*
  %32995 = load <16 x i16>, <16 x i16>* %32994, align 2, !tbaa !396
  %32996 = getelementptr inbounds i16, i16* %32969, i64 20
  %32997 = bitcast i16* %32996 to <16 x i16>*
  %32998 = load <16 x i16>, <16 x i16>* %32997, align 2, !tbaa !396
  %32999 = getelementptr inbounds i16, i16* %32969, i64 6
  %33000 = bitcast i16* %32999 to <16 x i16>*
  %33001 = load <16 x i16>, <16 x i16>* %33000, align 2, !tbaa !396
  %33002 = getelementptr inbounds i16, i16* %32969, i64 22
  %33003 = bitcast i16* %33002 to <16 x i16>*
  %33004 = load <16 x i16>, <16 x i16>* %33003, align 2, !tbaa !396
  %33005 = getelementptr inbounds i16, i16* %32969, i64 5
  %33006 = bitcast i16* %33005 to <16 x i16>*
  %33007 = load <16 x i16>, <16 x i16>* %33006, align 2, !tbaa !396
  %33008 = getelementptr inbounds i16, i16* %32969, i64 21
  %33009 = bitcast i16* %33008 to <16 x i16>*
  %33010 = load <16 x i16>, <16 x i16>* %33009, align 2, !tbaa !396
  %33011 = add <16 x i16> %32977, %32972
  %33012 = add <16 x i16> %33011, %32983
  %33013 = add <16 x i16> %33012, %32989
  %33014 = add <16 x i16> %33013, %32995
  %33015 = add <16 x i16> %33014, %33001
  %33016 = add <16 x i16> %33015, %33007
  %33017 = add <16 x i16> %32980, %32975
  %33018 = add <16 x i16> %33017, %32986
  %33019 = add <16 x i16> %33018, %32992
  %33020 = add <16 x i16> %33019, %32998
  %33021 = add <16 x i16> %33020, %33004
  %33022 = add <16 x i16> %33021, %33010
  %33023 = shufflevector <16 x i16> %33016, <16 x i16> %33022, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33024 = udiv <32 x i16> %33023, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %33025 = shufflevector <32 x i16> %33024, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33026 = shl nsw i64 %32936, 5
  %33027 = add nsw i64 %33026, %32749
  %33028 = getelementptr inbounds i16, i16* %blur_x917, i64 %33027
  %33029 = bitcast i16* %33028 to <16 x i16>*
  store <16 x i16> %33025, <16 x i16>* %33029, align 2, !tbaa !399
  %33030 = shufflevector <32 x i16> %33024, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33031 = getelementptr inbounds i16, i16* %33028, i64 16
  %33032 = bitcast i16* %33031 to <16 x i16>*
  store <16 x i16> %33030, <16 x i16>* %33032, align 2, !tbaa !399
  br label %"consume blur_x2066"

"consume blur_x2066":                             ; preds = %"for blur_y.s0.x.x.rebased2058.consume blur_x2066_crit_edge", %"produce blur_x2064"
  %.pre-phi3743 = phi i64 [ %.pre3742, %"for blur_y.s0.x.x.rebased2058.consume blur_x2066_crit_edge" ], [ %33026, %"produce blur_x2064" ]
  %33033 = add nsw i64 %32752, %.pre-phi3743
  %33034 = getelementptr inbounds i16, i16* %blur_x917, i64 %33033
  %33035 = bitcast i16* %33034 to <16 x i16>*
  %33036 = load <16 x i16>, <16 x i16>* %33035, align 2, !tbaa !399
  %33037 = getelementptr inbounds i16, i16* %33034, i64 16
  %33038 = bitcast i16* %33037 to <16 x i16>*
  %33039 = load <16 x i16>, <16 x i16>* %33038, align 2, !tbaa !399
  %33040 = add nsw i64 %32755, %.pre-phi3743
  %33041 = getelementptr inbounds i16, i16* %blur_x917, i64 %33040
  %33042 = bitcast i16* %33041 to <16 x i16>*
  %33043 = load <16 x i16>, <16 x i16>* %33042, align 2, !tbaa !399
  %33044 = getelementptr inbounds i16, i16* %33041, i64 16
  %33045 = bitcast i16* %33044 to <16 x i16>*
  %33046 = load <16 x i16>, <16 x i16>* %33045, align 2, !tbaa !399
  %33047 = add nsw i64 %32758, %.pre-phi3743
  %33048 = getelementptr inbounds i16, i16* %blur_x917, i64 %33047
  %33049 = bitcast i16* %33048 to <16 x i16>*
  %33050 = load <16 x i16>, <16 x i16>* %33049, align 2, !tbaa !399
  %33051 = getelementptr inbounds i16, i16* %33048, i64 16
  %33052 = bitcast i16* %33051 to <16 x i16>*
  %33053 = load <16 x i16>, <16 x i16>* %33052, align 2, !tbaa !399
  %33054 = add nsw i64 %32761, %.pre-phi3743
  %33055 = getelementptr inbounds i16, i16* %blur_x917, i64 %33054
  %33056 = bitcast i16* %33055 to <16 x i16>*
  %33057 = load <16 x i16>, <16 x i16>* %33056, align 2, !tbaa !399
  %33058 = getelementptr inbounds i16, i16* %33055, i64 16
  %33059 = bitcast i16* %33058 to <16 x i16>*
  %33060 = load <16 x i16>, <16 x i16>* %33059, align 2, !tbaa !399
  %33061 = add nsw i64 %32764, %.pre-phi3743
  %33062 = getelementptr inbounds i16, i16* %blur_x917, i64 %33061
  %33063 = bitcast i16* %33062 to <16 x i16>*
  %33064 = load <16 x i16>, <16 x i16>* %33063, align 2, !tbaa !399
  %33065 = getelementptr inbounds i16, i16* %33062, i64 16
  %33066 = bitcast i16* %33065 to <16 x i16>*
  %33067 = load <16 x i16>, <16 x i16>* %33066, align 2, !tbaa !399
  %33068 = add nsw i64 %32767, %.pre-phi3743
  %33069 = getelementptr inbounds i16, i16* %blur_x917, i64 %33068
  %33070 = bitcast i16* %33069 to <16 x i16>*
  %33071 = load <16 x i16>, <16 x i16>* %33070, align 2, !tbaa !399
  %33072 = getelementptr inbounds i16, i16* %33069, i64 16
  %33073 = bitcast i16* %33072 to <16 x i16>*
  %33074 = load <16 x i16>, <16 x i16>* %33073, align 2, !tbaa !399
  %33075 = add nsw i64 %32770, %.pre-phi3743
  %33076 = getelementptr inbounds i16, i16* %blur_x917, i64 %33075
  %33077 = bitcast i16* %33076 to <16 x i16>*
  %33078 = load <16 x i16>, <16 x i16>* %33077, align 2, !tbaa !399
  %33079 = getelementptr inbounds i16, i16* %33076, i64 16
  %33080 = bitcast i16* %33079 to <16 x i16>*
  %33081 = load <16 x i16>, <16 x i16>* %33080, align 2, !tbaa !399
  %33082 = add <16 x i16> %33043, %33036
  %33083 = add <16 x i16> %33082, %33050
  %33084 = add <16 x i16> %33083, %33057
  %33085 = add <16 x i16> %33084, %33064
  %33086 = add <16 x i16> %33085, %33071
  %33087 = add <16 x i16> %33086, %33078
  %33088 = add <16 x i16> %33046, %33039
  %33089 = add <16 x i16> %33088, %33053
  %33090 = add <16 x i16> %33089, %33060
  %33091 = add <16 x i16> %33090, %33067
  %33092 = add <16 x i16> %33091, %33074
  %33093 = add <16 x i16> %33092, %33081
  %33094 = shufflevector <16 x i16> %33087, <16 x i16> %33093, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33095 = udiv <32 x i16> %33094, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %33096 = shufflevector <32 x i16> %33095, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33097 = add nsw i64 %32774, %.pre-phi3743
  %33098 = getelementptr inbounds i16, i16* %267, i64 %33097
  %33099 = bitcast i16* %33098 to <16 x i16>*
  store <16 x i16> %33096, <16 x i16>* %33099, align 2, !tbaa !401
  %33100 = shufflevector <32 x i16> %33095, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33101 = getelementptr inbounds i16, i16* %33098, i64 16
  %33102 = bitcast i16* %33101 to <16 x i16>*
  store <16 x i16> %33100, <16 x i16>* %33102, align 2, !tbaa !401
  %indvars.iv.next3553 = add nuw nsw i64 %indvars.iv3552, 1
  %.not2681 = icmp eq i64 %indvars.iv.next3553, %546
  br i1 %.not2681, label %"end for blur_y.s0.x.x.rebased2059", label %"for blur_y.s0.x.x.rebased2058"

"for blur_y.s0.x.x.rebased2074":                  ; preds = %"for blur_y.s0.x.x.rebased2074.preheader", %"consume blur_x2085"
  %blur_y.s0.x.x.rebased2076 = phi i32 [ %33245, %"consume blur_x2085" ], [ 0, %"for blur_y.s0.x.x.rebased2074.preheader" ]
  %33103 = add nsw i32 %blur_y.s0.x.x.rebased2076, %t1670852
  %a5057 = shl nsw i32 %33103, 5
  %33104 = icmp sgt i32 %t1691, %a5057
  %blur_y.s0.x.v0.base.s2077 = select i1 %33104, i32 %a5057, i32 %t1691
  %33105 = icmp slt i32 %33103, 1
  %33106 = icmp sgt i32 %202, %a5057
  %33107 = or i1 %33105, %33106
  br i1 %33107, label %"produce blur_x2082", label %"consume blur_x2085"

"end for blur_y.s0.x.x.rebased2075":              ; preds = %"consume blur_x2085", %"end for blur_y.s0.x.x.rebased2059"
  br i1 %233, label %"produce blur_x2089", label %after_bb2086

"produce blur_x2082":                             ; preds = %"for blur_y.s0.x.x.rebased2074"
  %33108 = icmp slt i32 %blur_y.s0.x.v0.base.s2077, %202
  %blur_x.s0.x.v1.base.s2083 = select i1 %33108, i32 %blur_y.s0.x.v0.base.s2077, i32 %202
  %t11092084 = add nsw i32 %485, %blur_x.s0.x.v1.base.s2083
  %33109 = sext i32 %t11092084 to i64
  %33110 = getelementptr inbounds i16, i16* %read_input860, i64 %33109
  %33111 = getelementptr inbounds i16, i16* %33110, i64 1
  %33112 = bitcast i16* %33111 to <16 x i16>*
  %33113 = load <16 x i16>, <16 x i16>* %33112, align 2, !tbaa !396
  %33114 = getelementptr inbounds i16, i16* %33110, i64 17
  %33115 = bitcast i16* %33114 to <16 x i16>*
  %33116 = load <16 x i16>, <16 x i16>* %33115, align 2, !tbaa !396
  %33117 = bitcast i16* %33110 to <16 x i16>*
  %33118 = load <16 x i16>, <16 x i16>* %33117, align 2, !tbaa !396
  %33119 = getelementptr inbounds i16, i16* %33110, i64 16
  %33120 = bitcast i16* %33119 to <16 x i16>*
  %33121 = load <16 x i16>, <16 x i16>* %33120, align 2, !tbaa !396
  %33122 = getelementptr inbounds i16, i16* %33110, i64 2
  %33123 = bitcast i16* %33122 to <16 x i16>*
  %33124 = load <16 x i16>, <16 x i16>* %33123, align 2, !tbaa !396
  %33125 = getelementptr inbounds i16, i16* %33110, i64 18
  %33126 = bitcast i16* %33125 to <16 x i16>*
  %33127 = load <16 x i16>, <16 x i16>* %33126, align 2, !tbaa !396
  %33128 = getelementptr inbounds i16, i16* %33110, i64 3
  %33129 = bitcast i16* %33128 to <16 x i16>*
  %33130 = load <16 x i16>, <16 x i16>* %33129, align 2, !tbaa !396
  %33131 = getelementptr inbounds i16, i16* %33110, i64 19
  %33132 = bitcast i16* %33131 to <16 x i16>*
  %33133 = load <16 x i16>, <16 x i16>* %33132, align 2, !tbaa !396
  %33134 = getelementptr inbounds i16, i16* %33110, i64 4
  %33135 = bitcast i16* %33134 to <16 x i16>*
  %33136 = load <16 x i16>, <16 x i16>* %33135, align 2, !tbaa !396
  %33137 = getelementptr inbounds i16, i16* %33110, i64 20
  %33138 = bitcast i16* %33137 to <16 x i16>*
  %33139 = load <16 x i16>, <16 x i16>* %33138, align 2, !tbaa !396
  %33140 = getelementptr inbounds i16, i16* %33110, i64 6
  %33141 = bitcast i16* %33140 to <16 x i16>*
  %33142 = load <16 x i16>, <16 x i16>* %33141, align 2, !tbaa !396
  %33143 = getelementptr inbounds i16, i16* %33110, i64 22
  %33144 = bitcast i16* %33143 to <16 x i16>*
  %33145 = load <16 x i16>, <16 x i16>* %33144, align 2, !tbaa !396
  %33146 = getelementptr inbounds i16, i16* %33110, i64 5
  %33147 = bitcast i16* %33146 to <16 x i16>*
  %33148 = load <16 x i16>, <16 x i16>* %33147, align 2, !tbaa !396
  %33149 = getelementptr inbounds i16, i16* %33110, i64 21
  %33150 = bitcast i16* %33149 to <16 x i16>*
  %33151 = load <16 x i16>, <16 x i16>* %33150, align 2, !tbaa !396
  %33152 = add <16 x i16> %33118, %33113
  %33153 = add <16 x i16> %33152, %33124
  %33154 = add <16 x i16> %33153, %33130
  %33155 = add <16 x i16> %33154, %33136
  %33156 = add <16 x i16> %33155, %33142
  %33157 = add <16 x i16> %33156, %33148
  %33158 = add <16 x i16> %33121, %33116
  %33159 = add <16 x i16> %33158, %33127
  %33160 = add <16 x i16> %33159, %33133
  %33161 = add <16 x i16> %33160, %33139
  %33162 = add <16 x i16> %33161, %33145
  %33163 = add <16 x i16> %33162, %33151
  %33164 = shufflevector <16 x i16> %33157, <16 x i16> %33163, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33165 = udiv <32 x i16> %33164, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %33166 = shufflevector <32 x i16> %33165, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33167 = sext i32 %blur_x.s0.x.v1.base.s2083 to i64
  %33168 = add nsw i64 %33167, %32942
  %33169 = getelementptr inbounds i16, i16* %blur_x917, i64 %33168
  %33170 = bitcast i16* %33169 to <16 x i16>*
  store <16 x i16> %33166, <16 x i16>* %33170, align 2, !tbaa !399
  %33171 = shufflevector <32 x i16> %33165, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33172 = getelementptr inbounds i16, i16* %33169, i64 16
  %33173 = bitcast i16* %33172 to <16 x i16>*
  store <16 x i16> %33171, <16 x i16>* %33173, align 2, !tbaa !399
  br label %"consume blur_x2085"

"consume blur_x2085":                             ; preds = %"for blur_y.s0.x.x.rebased2074", %"produce blur_x2082"
  %33174 = sext i32 %blur_y.s0.x.v0.base.s2077 to i64
  %33175 = add nsw i64 %32945, %33174
  %33176 = getelementptr inbounds i16, i16* %blur_x917, i64 %33175
  %33177 = bitcast i16* %33176 to <16 x i16>*
  %33178 = load <16 x i16>, <16 x i16>* %33177, align 2, !tbaa !399
  %33179 = getelementptr inbounds i16, i16* %33176, i64 16
  %33180 = bitcast i16* %33179 to <16 x i16>*
  %33181 = load <16 x i16>, <16 x i16>* %33180, align 2, !tbaa !399
  %33182 = add nsw i64 %32948, %33174
  %33183 = getelementptr inbounds i16, i16* %blur_x917, i64 %33182
  %33184 = bitcast i16* %33183 to <16 x i16>*
  %33185 = load <16 x i16>, <16 x i16>* %33184, align 2, !tbaa !399
  %33186 = getelementptr inbounds i16, i16* %33183, i64 16
  %33187 = bitcast i16* %33186 to <16 x i16>*
  %33188 = load <16 x i16>, <16 x i16>* %33187, align 2, !tbaa !399
  %33189 = add nsw i64 %32951, %33174
  %33190 = getelementptr inbounds i16, i16* %blur_x917, i64 %33189
  %33191 = bitcast i16* %33190 to <16 x i16>*
  %33192 = load <16 x i16>, <16 x i16>* %33191, align 2, !tbaa !399
  %33193 = getelementptr inbounds i16, i16* %33190, i64 16
  %33194 = bitcast i16* %33193 to <16 x i16>*
  %33195 = load <16 x i16>, <16 x i16>* %33194, align 2, !tbaa !399
  %33196 = add nsw i64 %32954, %33174
  %33197 = getelementptr inbounds i16, i16* %blur_x917, i64 %33196
  %33198 = bitcast i16* %33197 to <16 x i16>*
  %33199 = load <16 x i16>, <16 x i16>* %33198, align 2, !tbaa !399
  %33200 = getelementptr inbounds i16, i16* %33197, i64 16
  %33201 = bitcast i16* %33200 to <16 x i16>*
  %33202 = load <16 x i16>, <16 x i16>* %33201, align 2, !tbaa !399
  %33203 = add nsw i64 %32957, %33174
  %33204 = getelementptr inbounds i16, i16* %blur_x917, i64 %33203
  %33205 = bitcast i16* %33204 to <16 x i16>*
  %33206 = load <16 x i16>, <16 x i16>* %33205, align 2, !tbaa !399
  %33207 = getelementptr inbounds i16, i16* %33204, i64 16
  %33208 = bitcast i16* %33207 to <16 x i16>*
  %33209 = load <16 x i16>, <16 x i16>* %33208, align 2, !tbaa !399
  %33210 = add nsw i64 %32960, %33174
  %33211 = getelementptr inbounds i16, i16* %blur_x917, i64 %33210
  %33212 = bitcast i16* %33211 to <16 x i16>*
  %33213 = load <16 x i16>, <16 x i16>* %33212, align 2, !tbaa !399
  %33214 = getelementptr inbounds i16, i16* %33211, i64 16
  %33215 = bitcast i16* %33214 to <16 x i16>*
  %33216 = load <16 x i16>, <16 x i16>* %33215, align 2, !tbaa !399
  %33217 = add nsw i64 %32963, %33174
  %33218 = getelementptr inbounds i16, i16* %blur_x917, i64 %33217
  %33219 = bitcast i16* %33218 to <16 x i16>*
  %33220 = load <16 x i16>, <16 x i16>* %33219, align 2, !tbaa !399
  %33221 = getelementptr inbounds i16, i16* %33218, i64 16
  %33222 = bitcast i16* %33221 to <16 x i16>*
  %33223 = load <16 x i16>, <16 x i16>* %33222, align 2, !tbaa !399
  %33224 = add <16 x i16> %33185, %33178
  %33225 = add <16 x i16> %33224, %33192
  %33226 = add <16 x i16> %33225, %33199
  %33227 = add <16 x i16> %33226, %33206
  %33228 = add <16 x i16> %33227, %33213
  %33229 = add <16 x i16> %33228, %33220
  %33230 = add <16 x i16> %33188, %33181
  %33231 = add <16 x i16> %33230, %33195
  %33232 = add <16 x i16> %33231, %33202
  %33233 = add <16 x i16> %33232, %33209
  %33234 = add <16 x i16> %33233, %33216
  %33235 = add <16 x i16> %33234, %33223
  %33236 = shufflevector <16 x i16> %33229, <16 x i16> %33235, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33237 = udiv <32 x i16> %33236, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %33238 = shufflevector <32 x i16> %33237, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33239 = add nsw i64 %32967, %33174
  %33240 = getelementptr inbounds i16, i16* %267, i64 %33239
  %33241 = bitcast i16* %33240 to <16 x i16>*
  store <16 x i16> %33238, <16 x i16>* %33241, align 2, !tbaa !401
  %33242 = shufflevector <32 x i16> %33237, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33243 = getelementptr inbounds i16, i16* %33240, i64 16
  %33244 = bitcast i16* %33243 to <16 x i16>*
  store <16 x i16> %33242, <16 x i16>* %33244, align 2, !tbaa !401
  %33245 = add nuw nsw i32 %blur_y.s0.x.x.rebased2076, 1
  %.not2680 = icmp eq i32 %33245, %t1727936
  br i1 %.not2680, label %"end for blur_y.s0.x.x.rebased2075", label %"for blur_y.s0.x.x.rebased2074"

after_bb2086:                                     ; preds = %"end for blur_y.s0.x.x.rebased2075", %"produce blur_x2089"
  br i1 %306, label %"for blur_y.s0.x.x.rebased2101.preheader", label %"end for blur_y.s0.x.x.rebased2102", !prof !386

"for blur_y.s0.x.x.rebased2101.preheader":        ; preds = %after_bb2086
  %33246 = sext i32 %t17561072 to i64
  %33247 = zext i32 %.pre-phi3669 to i64
  %33248 = mul nsw i64 %33247, %353
  %33249 = sub nsw i64 %33248, %302
  %33250 = zext i32 %.pre-phi3699 to i64
  %33251 = mul nsw i64 %33250, %353
  %33252 = sub nsw i64 %33251, %302
  %33253 = zext i32 %.pre-phi3673 to i64
  %33254 = mul nsw i64 %33253, %353
  %33255 = sub nsw i64 %33254, %302
  %33256 = zext i32 %.pre-phi3677 to i64
  %33257 = mul nsw i64 %33256, %353
  %33258 = sub nsw i64 %33257, %302
  %33259 = zext i32 %.pre-phi3681 to i64
  %33260 = mul nsw i64 %33259, %353
  %33261 = sub nsw i64 %33260, %302
  %33262 = zext i32 %.pre-phi3689 to i64
  %33263 = mul nsw i64 %33262, %353
  %33264 = sub nsw i64 %33263, %302
  %33265 = zext i32 %.pre-phi3685 to i64
  %33266 = mul nsw i64 %33265, %353
  %33267 = sub nsw i64 %33266, %302
  %33268 = sext i32 %a393 to i64
  %33269 = add nsw i64 %33268, 23
  %33270 = mul nsw i64 %33269, %350
  %33271 = add nsw i64 %33270, %354
  br label %"for blur_y.s0.x.x.rebased2101"

"produce blur_x2089":                             ; preds = %"end for blur_y.s0.x.x.rebased2075"
  %33272 = getelementptr inbounds i16, i16* %read_input860, i64 %489
  %33273 = getelementptr inbounds i16, i16* %33272, i64 -31
  %33274 = bitcast i16* %33273 to <16 x i16>*
  %33275 = load <16 x i16>, <16 x i16>* %33274, align 2, !tbaa !396
  %33276 = getelementptr inbounds i16, i16* %33272, i64 -15
  %33277 = bitcast i16* %33276 to <16 x i16>*
  %33278 = load <16 x i16>, <16 x i16>* %33277, align 2, !tbaa !396
  %33279 = getelementptr inbounds i16, i16* %33272, i64 -32
  %33280 = bitcast i16* %33279 to <16 x i16>*
  %33281 = load <16 x i16>, <16 x i16>* %33280, align 2, !tbaa !396
  %33282 = getelementptr inbounds i16, i16* %33272, i64 -16
  %33283 = bitcast i16* %33282 to <16 x i16>*
  %33284 = load <16 x i16>, <16 x i16>* %33283, align 2, !tbaa !396
  %33285 = getelementptr inbounds i16, i16* %33272, i64 -30
  %33286 = bitcast i16* %33285 to <16 x i16>*
  %33287 = load <16 x i16>, <16 x i16>* %33286, align 2, !tbaa !396
  %33288 = getelementptr inbounds i16, i16* %33272, i64 -14
  %33289 = bitcast i16* %33288 to <16 x i16>*
  %33290 = load <16 x i16>, <16 x i16>* %33289, align 2, !tbaa !396
  %33291 = getelementptr inbounds i16, i16* %33272, i64 -29
  %33292 = bitcast i16* %33291 to <16 x i16>*
  %33293 = load <16 x i16>, <16 x i16>* %33292, align 2, !tbaa !396
  %33294 = getelementptr inbounds i16, i16* %33272, i64 -13
  %33295 = bitcast i16* %33294 to <16 x i16>*
  %33296 = load <16 x i16>, <16 x i16>* %33295, align 2, !tbaa !396
  %33297 = getelementptr inbounds i16, i16* %33272, i64 -28
  %33298 = bitcast i16* %33297 to <16 x i16>*
  %33299 = load <16 x i16>, <16 x i16>* %33298, align 2, !tbaa !396
  %33300 = getelementptr inbounds i16, i16* %33272, i64 -12
  %33301 = bitcast i16* %33300 to <16 x i16>*
  %33302 = load <16 x i16>, <16 x i16>* %33301, align 2, !tbaa !396
  %33303 = getelementptr inbounds i16, i16* %33272, i64 -26
  %33304 = bitcast i16* %33303 to <16 x i16>*
  %33305 = load <16 x i16>, <16 x i16>* %33304, align 2, !tbaa !396
  %33306 = getelementptr inbounds i16, i16* %33272, i64 -10
  %33307 = bitcast i16* %33306 to <16 x i16>*
  %33308 = load <16 x i16>, <16 x i16>* %33307, align 2, !tbaa !396
  %33309 = getelementptr inbounds i16, i16* %33272, i64 -27
  %33310 = bitcast i16* %33309 to <16 x i16>*
  %33311 = load <16 x i16>, <16 x i16>* %33310, align 2, !tbaa !396
  %33312 = getelementptr inbounds i16, i16* %33272, i64 -11
  %33313 = bitcast i16* %33312 to <16 x i16>*
  %33314 = load <16 x i16>, <16 x i16>* %33313, align 2, !tbaa !396
  %33315 = add <16 x i16> %33281, %33275
  %33316 = add <16 x i16> %33315, %33287
  %33317 = add <16 x i16> %33316, %33293
  %33318 = add <16 x i16> %33317, %33299
  %33319 = add <16 x i16> %33318, %33305
  %33320 = add <16 x i16> %33319, %33311
  %33321 = add <16 x i16> %33284, %33278
  %33322 = add <16 x i16> %33321, %33290
  %33323 = add <16 x i16> %33322, %33296
  %33324 = add <16 x i16> %33323, %33302
  %33325 = add <16 x i16> %33324, %33308
  %33326 = add <16 x i16> %33325, %33314
  %33327 = shufflevector <16 x i16> %33320, <16 x i16> %33326, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33328 = udiv <32 x i16> %33327, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %33329 = shufflevector <32 x i16> %33328, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33330 = zext i32 %.pre-phi3689 to i64
  %33331 = mul nsw i64 %303, %33330
  %33332 = add nsw i64 %305, %33331
  %33333 = getelementptr inbounds i16, i16* %blur_x917, i64 %33332
  %33334 = getelementptr inbounds i16, i16* %33333, i64 -32
  %33335 = bitcast i16* %33334 to <16 x i16>*
  store <16 x i16> %33329, <16 x i16>* %33335, align 2, !tbaa !399
  %33336 = shufflevector <32 x i16> %33328, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33337 = getelementptr inbounds i16, i16* %33333, i64 -16
  %33338 = bitcast i16* %33337 to <16 x i16>*
  store <16 x i16> %33336, <16 x i16>* %33338, align 2, !tbaa !399
  %33339 = zext i32 %.pre-phi3669 to i64
  %33340 = mul nsw i64 %33339, %349
  %33341 = add nsw i64 %33340, %300
  %33342 = getelementptr inbounds i16, i16* %blur_x917, i64 %33341
  %33343 = getelementptr inbounds i16, i16* %33342, i64 -32
  %33344 = bitcast i16* %33343 to <16 x i16>*
  %33345 = load <16 x i16>, <16 x i16>* %33344, align 2, !tbaa !399
  %33346 = getelementptr inbounds i16, i16* %33342, i64 -16
  %33347 = bitcast i16* %33346 to <16 x i16>*
  %33348 = load <16 x i16>, <16 x i16>* %33347, align 2, !tbaa !399
  %33349 = zext i32 %.pre-phi3699 to i64
  %33350 = mul nsw i64 %33349, %349
  %33351 = add nsw i64 %33350, %300
  %33352 = getelementptr inbounds i16, i16* %blur_x917, i64 %33351
  %33353 = getelementptr inbounds i16, i16* %33352, i64 -32
  %33354 = bitcast i16* %33353 to <16 x i16>*
  %33355 = load <16 x i16>, <16 x i16>* %33354, align 2, !tbaa !399
  %33356 = getelementptr inbounds i16, i16* %33352, i64 -16
  %33357 = bitcast i16* %33356 to <16 x i16>*
  %33358 = load <16 x i16>, <16 x i16>* %33357, align 2, !tbaa !399
  %33359 = zext i32 %.pre-phi3673 to i64
  %33360 = mul nsw i64 %33359, %349
  %33361 = add nsw i64 %33360, %300
  %33362 = getelementptr inbounds i16, i16* %blur_x917, i64 %33361
  %33363 = getelementptr inbounds i16, i16* %33362, i64 -32
  %33364 = bitcast i16* %33363 to <16 x i16>*
  %33365 = load <16 x i16>, <16 x i16>* %33364, align 2, !tbaa !399
  %33366 = getelementptr inbounds i16, i16* %33362, i64 -16
  %33367 = bitcast i16* %33366 to <16 x i16>*
  %33368 = load <16 x i16>, <16 x i16>* %33367, align 2, !tbaa !399
  %33369 = zext i32 %.pre-phi3677 to i64
  %33370 = mul nsw i64 %33369, %349
  %33371 = add nsw i64 %33370, %300
  %33372 = getelementptr inbounds i16, i16* %blur_x917, i64 %33371
  %33373 = getelementptr inbounds i16, i16* %33372, i64 -32
  %33374 = bitcast i16* %33373 to <16 x i16>*
  %33375 = load <16 x i16>, <16 x i16>* %33374, align 2, !tbaa !399
  %33376 = getelementptr inbounds i16, i16* %33372, i64 -16
  %33377 = bitcast i16* %33376 to <16 x i16>*
  %33378 = load <16 x i16>, <16 x i16>* %33377, align 2, !tbaa !399
  %33379 = zext i32 %.pre-phi3681 to i64
  %33380 = mul nsw i64 %33379, %349
  %33381 = add nsw i64 %33380, %300
  %33382 = getelementptr inbounds i16, i16* %blur_x917, i64 %33381
  %33383 = getelementptr inbounds i16, i16* %33382, i64 -32
  %33384 = bitcast i16* %33383 to <16 x i16>*
  %33385 = load <16 x i16>, <16 x i16>* %33384, align 2, !tbaa !399
  %33386 = getelementptr inbounds i16, i16* %33382, i64 -16
  %33387 = bitcast i16* %33386 to <16 x i16>*
  %33388 = load <16 x i16>, <16 x i16>* %33387, align 2, !tbaa !399
  %33389 = mul nsw i64 %33330, %349
  %33390 = add nsw i64 %33389, %300
  %33391 = getelementptr inbounds i16, i16* %blur_x917, i64 %33390
  %33392 = getelementptr inbounds i16, i16* %33391, i64 -32
  %33393 = bitcast i16* %33392 to <16 x i16>*
  %33394 = load <16 x i16>, <16 x i16>* %33393, align 2, !tbaa !399
  %33395 = getelementptr inbounds i16, i16* %33391, i64 -16
  %33396 = bitcast i16* %33395 to <16 x i16>*
  %33397 = load <16 x i16>, <16 x i16>* %33396, align 2, !tbaa !399
  %33398 = zext i32 %.pre-phi3685 to i64
  %33399 = mul nsw i64 %33398, %349
  %33400 = add nsw i64 %33399, %300
  %33401 = getelementptr inbounds i16, i16* %blur_x917, i64 %33400
  %33402 = getelementptr inbounds i16, i16* %33401, i64 -32
  %33403 = bitcast i16* %33402 to <16 x i16>*
  %33404 = load <16 x i16>, <16 x i16>* %33403, align 2, !tbaa !399
  %33405 = getelementptr inbounds i16, i16* %33401, i64 -16
  %33406 = bitcast i16* %33405 to <16 x i16>*
  %33407 = load <16 x i16>, <16 x i16>* %33406, align 2, !tbaa !399
  %33408 = add <16 x i16> %33355, %33345
  %33409 = add <16 x i16> %33408, %33365
  %33410 = add <16 x i16> %33409, %33375
  %33411 = add <16 x i16> %33410, %33385
  %33412 = add <16 x i16> %33411, %33394
  %33413 = add <16 x i16> %33412, %33404
  %33414 = add <16 x i16> %33358, %33348
  %33415 = add <16 x i16> %33414, %33368
  %33416 = add <16 x i16> %33415, %33378
  %33417 = add <16 x i16> %33416, %33388
  %33418 = add <16 x i16> %33417, %33397
  %33419 = add <16 x i16> %33418, %33407
  %33420 = shufflevector <16 x i16> %33413, <16 x i16> %33419, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33421 = udiv <32 x i16> %33420, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %33422 = shufflevector <32 x i16> %33421, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33423 = sext i32 %a393 to i64
  %33424 = add nsw i64 %33423, 23
  %33425 = mul nsw i64 %33424, %350
  %33426 = add nsw i64 %352, %33425
  %33427 = getelementptr inbounds i16, i16* %267, i64 %33426
  %33428 = getelementptr inbounds i16, i16* %33427, i64 -32
  %33429 = bitcast i16* %33428 to <16 x i16>*
  store <16 x i16> %33422, <16 x i16>* %33429, align 2, !tbaa !401
  %33430 = shufflevector <32 x i16> %33421, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33431 = getelementptr inbounds i16, i16* %33427, i64 -16
  %33432 = bitcast i16* %33431 to <16 x i16>*
  store <16 x i16> %33430, <16 x i16>* %33432, align 2, !tbaa !401
  br label %after_bb2086

"for blur_y.s0.x.x.rebased2101":                  ; preds = %"for blur_y.s0.x.x.rebased2101.preheader", %"consume blur_x2109"
  %indvars.iv3554 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2101.preheader" ], [ %indvars.iv.next3555, %"consume blur_x2109" ]
  %33433 = add nsw i64 %indvars.iv3554, %307
  %33434 = icmp slt i64 %33433, 1
  %33435 = trunc i64 %33433 to i32
  %33436 = shl nsw i32 %33435, 5
  %33437 = icmp sgt i32 %202, %33436
  %33438 = or i1 %33434, %33437
  br i1 %33438, label %"produce blur_x2107", label %"for blur_y.s0.x.x.rebased2101.consume blur_x2109_crit_edge"

"for blur_y.s0.x.x.rebased2101.consume blur_x2109_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2101"
  %.pre3744 = shl nsw i64 %33433, 5
  br label %"consume blur_x2109"

"end for blur_y.s0.x.x.rebased2102":              ; preds = %"consume blur_x2109", %after_bb2086
  br i1 %308, label %"for blur_y.s0.x.x.rebased2117.preheader", label %"end for blur_y.s0.x.x.rebased2118", !prof !386

"for blur_y.s0.x.x.rebased2117.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2102"
  %33439 = sext i32 %t17561072 to i64
  %33440 = zext i32 %.pre-phi3669 to i64
  %33441 = mul nsw i64 %33440, %353
  %33442 = sub nsw i64 %33441, %302
  %33443 = zext i32 %.pre-phi3699 to i64
  %33444 = mul nsw i64 %33443, %353
  %33445 = sub nsw i64 %33444, %302
  %33446 = zext i32 %.pre-phi3673 to i64
  %33447 = mul nsw i64 %33446, %353
  %33448 = sub nsw i64 %33447, %302
  %33449 = zext i32 %.pre-phi3677 to i64
  %33450 = mul nsw i64 %33449, %353
  %33451 = sub nsw i64 %33450, %302
  %33452 = zext i32 %.pre-phi3681 to i64
  %33453 = mul nsw i64 %33452, %353
  %33454 = sub nsw i64 %33453, %302
  %33455 = zext i32 %.pre-phi3689 to i64
  %33456 = mul nsw i64 %33455, %353
  %33457 = sub nsw i64 %33456, %302
  %33458 = zext i32 %.pre-phi3685 to i64
  %33459 = mul nsw i64 %33458, %353
  %33460 = sub nsw i64 %33459, %302
  %33461 = sext i32 %a393 to i64
  %33462 = add nsw i64 %33461, 23
  %33463 = mul nsw i64 %33462, %350
  %33464 = add nsw i64 %33463, %354
  br label %"for blur_y.s0.x.x.rebased2117"

"produce blur_x2107":                             ; preds = %"for blur_y.s0.x.x.rebased2101"
  %t11202108 = add nsw i32 %491, %33436
  %33465 = sext i32 %t11202108 to i64
  %33466 = getelementptr inbounds i16, i16* %read_input860, i64 %33465
  %33467 = getelementptr inbounds i16, i16* %33466, i64 1
  %33468 = bitcast i16* %33467 to <16 x i16>*
  %33469 = load <16 x i16>, <16 x i16>* %33468, align 2, !tbaa !396
  %33470 = getelementptr inbounds i16, i16* %33466, i64 17
  %33471 = bitcast i16* %33470 to <16 x i16>*
  %33472 = load <16 x i16>, <16 x i16>* %33471, align 2, !tbaa !396
  %33473 = bitcast i16* %33466 to <16 x i16>*
  %33474 = load <16 x i16>, <16 x i16>* %33473, align 2, !tbaa !396
  %33475 = getelementptr inbounds i16, i16* %33466, i64 16
  %33476 = bitcast i16* %33475 to <16 x i16>*
  %33477 = load <16 x i16>, <16 x i16>* %33476, align 2, !tbaa !396
  %33478 = getelementptr inbounds i16, i16* %33466, i64 2
  %33479 = bitcast i16* %33478 to <16 x i16>*
  %33480 = load <16 x i16>, <16 x i16>* %33479, align 2, !tbaa !396
  %33481 = getelementptr inbounds i16, i16* %33466, i64 18
  %33482 = bitcast i16* %33481 to <16 x i16>*
  %33483 = load <16 x i16>, <16 x i16>* %33482, align 2, !tbaa !396
  %33484 = getelementptr inbounds i16, i16* %33466, i64 3
  %33485 = bitcast i16* %33484 to <16 x i16>*
  %33486 = load <16 x i16>, <16 x i16>* %33485, align 2, !tbaa !396
  %33487 = getelementptr inbounds i16, i16* %33466, i64 19
  %33488 = bitcast i16* %33487 to <16 x i16>*
  %33489 = load <16 x i16>, <16 x i16>* %33488, align 2, !tbaa !396
  %33490 = getelementptr inbounds i16, i16* %33466, i64 4
  %33491 = bitcast i16* %33490 to <16 x i16>*
  %33492 = load <16 x i16>, <16 x i16>* %33491, align 2, !tbaa !396
  %33493 = getelementptr inbounds i16, i16* %33466, i64 20
  %33494 = bitcast i16* %33493 to <16 x i16>*
  %33495 = load <16 x i16>, <16 x i16>* %33494, align 2, !tbaa !396
  %33496 = getelementptr inbounds i16, i16* %33466, i64 6
  %33497 = bitcast i16* %33496 to <16 x i16>*
  %33498 = load <16 x i16>, <16 x i16>* %33497, align 2, !tbaa !396
  %33499 = getelementptr inbounds i16, i16* %33466, i64 22
  %33500 = bitcast i16* %33499 to <16 x i16>*
  %33501 = load <16 x i16>, <16 x i16>* %33500, align 2, !tbaa !396
  %33502 = getelementptr inbounds i16, i16* %33466, i64 5
  %33503 = bitcast i16* %33502 to <16 x i16>*
  %33504 = load <16 x i16>, <16 x i16>* %33503, align 2, !tbaa !396
  %33505 = getelementptr inbounds i16, i16* %33466, i64 21
  %33506 = bitcast i16* %33505 to <16 x i16>*
  %33507 = load <16 x i16>, <16 x i16>* %33506, align 2, !tbaa !396
  %33508 = add <16 x i16> %33474, %33469
  %33509 = add <16 x i16> %33508, %33480
  %33510 = add <16 x i16> %33509, %33486
  %33511 = add <16 x i16> %33510, %33492
  %33512 = add <16 x i16> %33511, %33498
  %33513 = add <16 x i16> %33512, %33504
  %33514 = add <16 x i16> %33477, %33472
  %33515 = add <16 x i16> %33514, %33483
  %33516 = add <16 x i16> %33515, %33489
  %33517 = add <16 x i16> %33516, %33495
  %33518 = add <16 x i16> %33517, %33501
  %33519 = add <16 x i16> %33518, %33507
  %33520 = shufflevector <16 x i16> %33513, <16 x i16> %33519, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33521 = udiv <32 x i16> %33520, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %33522 = shufflevector <32 x i16> %33521, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33523 = shl nsw i64 %33433, 5
  %33524 = add nsw i64 %33523, %33246
  %33525 = getelementptr inbounds i16, i16* %blur_x917, i64 %33524
  %33526 = bitcast i16* %33525 to <16 x i16>*
  store <16 x i16> %33522, <16 x i16>* %33526, align 2, !tbaa !399
  %33527 = shufflevector <32 x i16> %33521, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33528 = getelementptr inbounds i16, i16* %33525, i64 16
  %33529 = bitcast i16* %33528 to <16 x i16>*
  store <16 x i16> %33527, <16 x i16>* %33529, align 2, !tbaa !399
  br label %"consume blur_x2109"

"consume blur_x2109":                             ; preds = %"for blur_y.s0.x.x.rebased2101.consume blur_x2109_crit_edge", %"produce blur_x2107"
  %.pre-phi3745 = phi i64 [ %.pre3744, %"for blur_y.s0.x.x.rebased2101.consume blur_x2109_crit_edge" ], [ %33523, %"produce blur_x2107" ]
  %33530 = add nsw i64 %33249, %.pre-phi3745
  %33531 = getelementptr inbounds i16, i16* %blur_x917, i64 %33530
  %33532 = bitcast i16* %33531 to <16 x i16>*
  %33533 = load <16 x i16>, <16 x i16>* %33532, align 2, !tbaa !399
  %33534 = getelementptr inbounds i16, i16* %33531, i64 16
  %33535 = bitcast i16* %33534 to <16 x i16>*
  %33536 = load <16 x i16>, <16 x i16>* %33535, align 2, !tbaa !399
  %33537 = add nsw i64 %33252, %.pre-phi3745
  %33538 = getelementptr inbounds i16, i16* %blur_x917, i64 %33537
  %33539 = bitcast i16* %33538 to <16 x i16>*
  %33540 = load <16 x i16>, <16 x i16>* %33539, align 2, !tbaa !399
  %33541 = getelementptr inbounds i16, i16* %33538, i64 16
  %33542 = bitcast i16* %33541 to <16 x i16>*
  %33543 = load <16 x i16>, <16 x i16>* %33542, align 2, !tbaa !399
  %33544 = add nsw i64 %33255, %.pre-phi3745
  %33545 = getelementptr inbounds i16, i16* %blur_x917, i64 %33544
  %33546 = bitcast i16* %33545 to <16 x i16>*
  %33547 = load <16 x i16>, <16 x i16>* %33546, align 2, !tbaa !399
  %33548 = getelementptr inbounds i16, i16* %33545, i64 16
  %33549 = bitcast i16* %33548 to <16 x i16>*
  %33550 = load <16 x i16>, <16 x i16>* %33549, align 2, !tbaa !399
  %33551 = add nsw i64 %33258, %.pre-phi3745
  %33552 = getelementptr inbounds i16, i16* %blur_x917, i64 %33551
  %33553 = bitcast i16* %33552 to <16 x i16>*
  %33554 = load <16 x i16>, <16 x i16>* %33553, align 2, !tbaa !399
  %33555 = getelementptr inbounds i16, i16* %33552, i64 16
  %33556 = bitcast i16* %33555 to <16 x i16>*
  %33557 = load <16 x i16>, <16 x i16>* %33556, align 2, !tbaa !399
  %33558 = add nsw i64 %33261, %.pre-phi3745
  %33559 = getelementptr inbounds i16, i16* %blur_x917, i64 %33558
  %33560 = bitcast i16* %33559 to <16 x i16>*
  %33561 = load <16 x i16>, <16 x i16>* %33560, align 2, !tbaa !399
  %33562 = getelementptr inbounds i16, i16* %33559, i64 16
  %33563 = bitcast i16* %33562 to <16 x i16>*
  %33564 = load <16 x i16>, <16 x i16>* %33563, align 2, !tbaa !399
  %33565 = add nsw i64 %33264, %.pre-phi3745
  %33566 = getelementptr inbounds i16, i16* %blur_x917, i64 %33565
  %33567 = bitcast i16* %33566 to <16 x i16>*
  %33568 = load <16 x i16>, <16 x i16>* %33567, align 2, !tbaa !399
  %33569 = getelementptr inbounds i16, i16* %33566, i64 16
  %33570 = bitcast i16* %33569 to <16 x i16>*
  %33571 = load <16 x i16>, <16 x i16>* %33570, align 2, !tbaa !399
  %33572 = add nsw i64 %33267, %.pre-phi3745
  %33573 = getelementptr inbounds i16, i16* %blur_x917, i64 %33572
  %33574 = bitcast i16* %33573 to <16 x i16>*
  %33575 = load <16 x i16>, <16 x i16>* %33574, align 2, !tbaa !399
  %33576 = getelementptr inbounds i16, i16* %33573, i64 16
  %33577 = bitcast i16* %33576 to <16 x i16>*
  %33578 = load <16 x i16>, <16 x i16>* %33577, align 2, !tbaa !399
  %33579 = add <16 x i16> %33540, %33533
  %33580 = add <16 x i16> %33579, %33547
  %33581 = add <16 x i16> %33580, %33554
  %33582 = add <16 x i16> %33581, %33561
  %33583 = add <16 x i16> %33582, %33568
  %33584 = add <16 x i16> %33583, %33575
  %33585 = add <16 x i16> %33543, %33536
  %33586 = add <16 x i16> %33585, %33550
  %33587 = add <16 x i16> %33586, %33557
  %33588 = add <16 x i16> %33587, %33564
  %33589 = add <16 x i16> %33588, %33571
  %33590 = add <16 x i16> %33589, %33578
  %33591 = shufflevector <16 x i16> %33584, <16 x i16> %33590, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33592 = udiv <32 x i16> %33591, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %33593 = shufflevector <32 x i16> %33592, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33594 = add nsw i64 %33271, %.pre-phi3745
  %33595 = getelementptr inbounds i16, i16* %267, i64 %33594
  %33596 = bitcast i16* %33595 to <16 x i16>*
  store <16 x i16> %33593, <16 x i16>* %33596, align 2, !tbaa !401
  %33597 = shufflevector <32 x i16> %33592, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33598 = getelementptr inbounds i16, i16* %33595, i64 16
  %33599 = bitcast i16* %33598 to <16 x i16>*
  store <16 x i16> %33597, <16 x i16>* %33599, align 2, !tbaa !401
  %indvars.iv.next3555 = add nuw nsw i64 %indvars.iv3554, 1
  %.not2677 = icmp eq i64 %indvars.iv.next3555, %546
  br i1 %.not2677, label %"end for blur_y.s0.x.x.rebased2102", label %"for blur_y.s0.x.x.rebased2101"

"for blur_y.s0.x.x.rebased2117":                  ; preds = %"for blur_y.s0.x.x.rebased2117.preheader", %"consume blur_x2128"
  %blur_y.s0.x.x.rebased2119 = phi i32 [ %33742, %"consume blur_x2128" ], [ 0, %"for blur_y.s0.x.x.rebased2117.preheader" ]
  %33600 = add nsw i32 %blur_y.s0.x.x.rebased2119, %t1670852
  %a5214 = shl nsw i32 %33600, 5
  %33601 = icmp sgt i32 %t1691, %a5214
  %blur_y.s0.x.v0.base.s2120 = select i1 %33601, i32 %a5214, i32 %t1691
  %33602 = icmp slt i32 %33600, 1
  %33603 = icmp sgt i32 %202, %a5214
  %33604 = or i1 %33602, %33603
  br i1 %33604, label %"produce blur_x2125", label %"consume blur_x2128"

"end for blur_y.s0.x.x.rebased2118":              ; preds = %"consume blur_x2128", %"end for blur_y.s0.x.x.rebased2102"
  br i1 %233, label %"produce blur_x2132", label %after_bb2129

"produce blur_x2125":                             ; preds = %"for blur_y.s0.x.x.rebased2117"
  %33605 = icmp slt i32 %blur_y.s0.x.v0.base.s2120, %202
  %blur_x.s0.x.v1.base.s2126 = select i1 %33605, i32 %blur_y.s0.x.v0.base.s2120, i32 %202
  %t11252127 = add nsw i32 %491, %blur_x.s0.x.v1.base.s2126
  %33606 = sext i32 %t11252127 to i64
  %33607 = getelementptr inbounds i16, i16* %read_input860, i64 %33606
  %33608 = getelementptr inbounds i16, i16* %33607, i64 1
  %33609 = bitcast i16* %33608 to <16 x i16>*
  %33610 = load <16 x i16>, <16 x i16>* %33609, align 2, !tbaa !396
  %33611 = getelementptr inbounds i16, i16* %33607, i64 17
  %33612 = bitcast i16* %33611 to <16 x i16>*
  %33613 = load <16 x i16>, <16 x i16>* %33612, align 2, !tbaa !396
  %33614 = bitcast i16* %33607 to <16 x i16>*
  %33615 = load <16 x i16>, <16 x i16>* %33614, align 2, !tbaa !396
  %33616 = getelementptr inbounds i16, i16* %33607, i64 16
  %33617 = bitcast i16* %33616 to <16 x i16>*
  %33618 = load <16 x i16>, <16 x i16>* %33617, align 2, !tbaa !396
  %33619 = getelementptr inbounds i16, i16* %33607, i64 2
  %33620 = bitcast i16* %33619 to <16 x i16>*
  %33621 = load <16 x i16>, <16 x i16>* %33620, align 2, !tbaa !396
  %33622 = getelementptr inbounds i16, i16* %33607, i64 18
  %33623 = bitcast i16* %33622 to <16 x i16>*
  %33624 = load <16 x i16>, <16 x i16>* %33623, align 2, !tbaa !396
  %33625 = getelementptr inbounds i16, i16* %33607, i64 3
  %33626 = bitcast i16* %33625 to <16 x i16>*
  %33627 = load <16 x i16>, <16 x i16>* %33626, align 2, !tbaa !396
  %33628 = getelementptr inbounds i16, i16* %33607, i64 19
  %33629 = bitcast i16* %33628 to <16 x i16>*
  %33630 = load <16 x i16>, <16 x i16>* %33629, align 2, !tbaa !396
  %33631 = getelementptr inbounds i16, i16* %33607, i64 4
  %33632 = bitcast i16* %33631 to <16 x i16>*
  %33633 = load <16 x i16>, <16 x i16>* %33632, align 2, !tbaa !396
  %33634 = getelementptr inbounds i16, i16* %33607, i64 20
  %33635 = bitcast i16* %33634 to <16 x i16>*
  %33636 = load <16 x i16>, <16 x i16>* %33635, align 2, !tbaa !396
  %33637 = getelementptr inbounds i16, i16* %33607, i64 6
  %33638 = bitcast i16* %33637 to <16 x i16>*
  %33639 = load <16 x i16>, <16 x i16>* %33638, align 2, !tbaa !396
  %33640 = getelementptr inbounds i16, i16* %33607, i64 22
  %33641 = bitcast i16* %33640 to <16 x i16>*
  %33642 = load <16 x i16>, <16 x i16>* %33641, align 2, !tbaa !396
  %33643 = getelementptr inbounds i16, i16* %33607, i64 5
  %33644 = bitcast i16* %33643 to <16 x i16>*
  %33645 = load <16 x i16>, <16 x i16>* %33644, align 2, !tbaa !396
  %33646 = getelementptr inbounds i16, i16* %33607, i64 21
  %33647 = bitcast i16* %33646 to <16 x i16>*
  %33648 = load <16 x i16>, <16 x i16>* %33647, align 2, !tbaa !396
  %33649 = add <16 x i16> %33615, %33610
  %33650 = add <16 x i16> %33649, %33621
  %33651 = add <16 x i16> %33650, %33627
  %33652 = add <16 x i16> %33651, %33633
  %33653 = add <16 x i16> %33652, %33639
  %33654 = add <16 x i16> %33653, %33645
  %33655 = add <16 x i16> %33618, %33613
  %33656 = add <16 x i16> %33655, %33624
  %33657 = add <16 x i16> %33656, %33630
  %33658 = add <16 x i16> %33657, %33636
  %33659 = add <16 x i16> %33658, %33642
  %33660 = add <16 x i16> %33659, %33648
  %33661 = shufflevector <16 x i16> %33654, <16 x i16> %33660, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33662 = udiv <32 x i16> %33661, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %33663 = shufflevector <32 x i16> %33662, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33664 = sext i32 %blur_x.s0.x.v1.base.s2126 to i64
  %33665 = add nsw i64 %33664, %33439
  %33666 = getelementptr inbounds i16, i16* %blur_x917, i64 %33665
  %33667 = bitcast i16* %33666 to <16 x i16>*
  store <16 x i16> %33663, <16 x i16>* %33667, align 2, !tbaa !399
  %33668 = shufflevector <32 x i16> %33662, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33669 = getelementptr inbounds i16, i16* %33666, i64 16
  %33670 = bitcast i16* %33669 to <16 x i16>*
  store <16 x i16> %33668, <16 x i16>* %33670, align 2, !tbaa !399
  br label %"consume blur_x2128"

"consume blur_x2128":                             ; preds = %"for blur_y.s0.x.x.rebased2117", %"produce blur_x2125"
  %33671 = sext i32 %blur_y.s0.x.v0.base.s2120 to i64
  %33672 = add nsw i64 %33442, %33671
  %33673 = getelementptr inbounds i16, i16* %blur_x917, i64 %33672
  %33674 = bitcast i16* %33673 to <16 x i16>*
  %33675 = load <16 x i16>, <16 x i16>* %33674, align 2, !tbaa !399
  %33676 = getelementptr inbounds i16, i16* %33673, i64 16
  %33677 = bitcast i16* %33676 to <16 x i16>*
  %33678 = load <16 x i16>, <16 x i16>* %33677, align 2, !tbaa !399
  %33679 = add nsw i64 %33445, %33671
  %33680 = getelementptr inbounds i16, i16* %blur_x917, i64 %33679
  %33681 = bitcast i16* %33680 to <16 x i16>*
  %33682 = load <16 x i16>, <16 x i16>* %33681, align 2, !tbaa !399
  %33683 = getelementptr inbounds i16, i16* %33680, i64 16
  %33684 = bitcast i16* %33683 to <16 x i16>*
  %33685 = load <16 x i16>, <16 x i16>* %33684, align 2, !tbaa !399
  %33686 = add nsw i64 %33448, %33671
  %33687 = getelementptr inbounds i16, i16* %blur_x917, i64 %33686
  %33688 = bitcast i16* %33687 to <16 x i16>*
  %33689 = load <16 x i16>, <16 x i16>* %33688, align 2, !tbaa !399
  %33690 = getelementptr inbounds i16, i16* %33687, i64 16
  %33691 = bitcast i16* %33690 to <16 x i16>*
  %33692 = load <16 x i16>, <16 x i16>* %33691, align 2, !tbaa !399
  %33693 = add nsw i64 %33451, %33671
  %33694 = getelementptr inbounds i16, i16* %blur_x917, i64 %33693
  %33695 = bitcast i16* %33694 to <16 x i16>*
  %33696 = load <16 x i16>, <16 x i16>* %33695, align 2, !tbaa !399
  %33697 = getelementptr inbounds i16, i16* %33694, i64 16
  %33698 = bitcast i16* %33697 to <16 x i16>*
  %33699 = load <16 x i16>, <16 x i16>* %33698, align 2, !tbaa !399
  %33700 = add nsw i64 %33454, %33671
  %33701 = getelementptr inbounds i16, i16* %blur_x917, i64 %33700
  %33702 = bitcast i16* %33701 to <16 x i16>*
  %33703 = load <16 x i16>, <16 x i16>* %33702, align 2, !tbaa !399
  %33704 = getelementptr inbounds i16, i16* %33701, i64 16
  %33705 = bitcast i16* %33704 to <16 x i16>*
  %33706 = load <16 x i16>, <16 x i16>* %33705, align 2, !tbaa !399
  %33707 = add nsw i64 %33457, %33671
  %33708 = getelementptr inbounds i16, i16* %blur_x917, i64 %33707
  %33709 = bitcast i16* %33708 to <16 x i16>*
  %33710 = load <16 x i16>, <16 x i16>* %33709, align 2, !tbaa !399
  %33711 = getelementptr inbounds i16, i16* %33708, i64 16
  %33712 = bitcast i16* %33711 to <16 x i16>*
  %33713 = load <16 x i16>, <16 x i16>* %33712, align 2, !tbaa !399
  %33714 = add nsw i64 %33460, %33671
  %33715 = getelementptr inbounds i16, i16* %blur_x917, i64 %33714
  %33716 = bitcast i16* %33715 to <16 x i16>*
  %33717 = load <16 x i16>, <16 x i16>* %33716, align 2, !tbaa !399
  %33718 = getelementptr inbounds i16, i16* %33715, i64 16
  %33719 = bitcast i16* %33718 to <16 x i16>*
  %33720 = load <16 x i16>, <16 x i16>* %33719, align 2, !tbaa !399
  %33721 = add <16 x i16> %33682, %33675
  %33722 = add <16 x i16> %33721, %33689
  %33723 = add <16 x i16> %33722, %33696
  %33724 = add <16 x i16> %33723, %33703
  %33725 = add <16 x i16> %33724, %33710
  %33726 = add <16 x i16> %33725, %33717
  %33727 = add <16 x i16> %33685, %33678
  %33728 = add <16 x i16> %33727, %33692
  %33729 = add <16 x i16> %33728, %33699
  %33730 = add <16 x i16> %33729, %33706
  %33731 = add <16 x i16> %33730, %33713
  %33732 = add <16 x i16> %33731, %33720
  %33733 = shufflevector <16 x i16> %33726, <16 x i16> %33732, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33734 = udiv <32 x i16> %33733, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %33735 = shufflevector <32 x i16> %33734, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33736 = add nsw i64 %33464, %33671
  %33737 = getelementptr inbounds i16, i16* %267, i64 %33736
  %33738 = bitcast i16* %33737 to <16 x i16>*
  store <16 x i16> %33735, <16 x i16>* %33738, align 2, !tbaa !401
  %33739 = shufflevector <32 x i16> %33734, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33740 = getelementptr inbounds i16, i16* %33737, i64 16
  %33741 = bitcast i16* %33740 to <16 x i16>*
  store <16 x i16> %33739, <16 x i16>* %33741, align 2, !tbaa !401
  %33742 = add nuw nsw i32 %blur_y.s0.x.x.rebased2119, 1
  %.not2676 = icmp eq i32 %33742, %t1727936
  br i1 %.not2676, label %"end for blur_y.s0.x.x.rebased2118", label %"for blur_y.s0.x.x.rebased2117"

after_bb2129:                                     ; preds = %"end for blur_y.s0.x.x.rebased2118", %"produce blur_x2132"
  br i1 %306, label %"for blur_y.s0.x.x.rebased2144.preheader", label %"end for blur_y.s0.x.x.rebased2145", !prof !386

"for blur_y.s0.x.x.rebased2144.preheader":        ; preds = %after_bb2129
  %33743 = sext i32 %t17621108 to i64
  %33744 = zext i32 %.pre-phi3673 to i64
  %33745 = mul nsw i64 %33744, %353
  %33746 = sub nsw i64 %33745, %302
  %33747 = zext i32 %.pre-phi3669 to i64
  %33748 = mul nsw i64 %33747, %353
  %33749 = sub nsw i64 %33748, %302
  %33750 = zext i32 %.pre-phi3677 to i64
  %33751 = mul nsw i64 %33750, %353
  %33752 = sub nsw i64 %33751, %302
  %33753 = zext i32 %.pre-phi3681 to i64
  %33754 = mul nsw i64 %33753, %353
  %33755 = sub nsw i64 %33754, %302
  %33756 = zext i32 %.pre-phi3685 to i64
  %33757 = mul nsw i64 %33756, %353
  %33758 = sub nsw i64 %33757, %302
  %33759 = zext i32 %.pre-phi3693 to i64
  %33760 = mul nsw i64 %33759, %353
  %33761 = sub nsw i64 %33760, %302
  %33762 = zext i32 %.pre-phi3689 to i64
  %33763 = mul nsw i64 %33762, %353
  %33764 = sub nsw i64 %33763, %302
  %33765 = sext i32 %a393 to i64
  %33766 = add nsw i64 %33765, 24
  %33767 = mul nsw i64 %33766, %350
  %33768 = add nsw i64 %33767, %354
  br label %"for blur_y.s0.x.x.rebased2144"

"produce blur_x2132":                             ; preds = %"end for blur_y.s0.x.x.rebased2118"
  %33769 = getelementptr inbounds i16, i16* %read_input860, i64 %495
  %33770 = getelementptr inbounds i16, i16* %33769, i64 -31
  %33771 = bitcast i16* %33770 to <16 x i16>*
  %33772 = load <16 x i16>, <16 x i16>* %33771, align 2, !tbaa !396
  %33773 = getelementptr inbounds i16, i16* %33769, i64 -15
  %33774 = bitcast i16* %33773 to <16 x i16>*
  %33775 = load <16 x i16>, <16 x i16>* %33774, align 2, !tbaa !396
  %33776 = getelementptr inbounds i16, i16* %33769, i64 -32
  %33777 = bitcast i16* %33776 to <16 x i16>*
  %33778 = load <16 x i16>, <16 x i16>* %33777, align 2, !tbaa !396
  %33779 = getelementptr inbounds i16, i16* %33769, i64 -16
  %33780 = bitcast i16* %33779 to <16 x i16>*
  %33781 = load <16 x i16>, <16 x i16>* %33780, align 2, !tbaa !396
  %33782 = getelementptr inbounds i16, i16* %33769, i64 -30
  %33783 = bitcast i16* %33782 to <16 x i16>*
  %33784 = load <16 x i16>, <16 x i16>* %33783, align 2, !tbaa !396
  %33785 = getelementptr inbounds i16, i16* %33769, i64 -14
  %33786 = bitcast i16* %33785 to <16 x i16>*
  %33787 = load <16 x i16>, <16 x i16>* %33786, align 2, !tbaa !396
  %33788 = getelementptr inbounds i16, i16* %33769, i64 -29
  %33789 = bitcast i16* %33788 to <16 x i16>*
  %33790 = load <16 x i16>, <16 x i16>* %33789, align 2, !tbaa !396
  %33791 = getelementptr inbounds i16, i16* %33769, i64 -13
  %33792 = bitcast i16* %33791 to <16 x i16>*
  %33793 = load <16 x i16>, <16 x i16>* %33792, align 2, !tbaa !396
  %33794 = getelementptr inbounds i16, i16* %33769, i64 -28
  %33795 = bitcast i16* %33794 to <16 x i16>*
  %33796 = load <16 x i16>, <16 x i16>* %33795, align 2, !tbaa !396
  %33797 = getelementptr inbounds i16, i16* %33769, i64 -12
  %33798 = bitcast i16* %33797 to <16 x i16>*
  %33799 = load <16 x i16>, <16 x i16>* %33798, align 2, !tbaa !396
  %33800 = getelementptr inbounds i16, i16* %33769, i64 -26
  %33801 = bitcast i16* %33800 to <16 x i16>*
  %33802 = load <16 x i16>, <16 x i16>* %33801, align 2, !tbaa !396
  %33803 = getelementptr inbounds i16, i16* %33769, i64 -10
  %33804 = bitcast i16* %33803 to <16 x i16>*
  %33805 = load <16 x i16>, <16 x i16>* %33804, align 2, !tbaa !396
  %33806 = getelementptr inbounds i16, i16* %33769, i64 -27
  %33807 = bitcast i16* %33806 to <16 x i16>*
  %33808 = load <16 x i16>, <16 x i16>* %33807, align 2, !tbaa !396
  %33809 = getelementptr inbounds i16, i16* %33769, i64 -11
  %33810 = bitcast i16* %33809 to <16 x i16>*
  %33811 = load <16 x i16>, <16 x i16>* %33810, align 2, !tbaa !396
  %33812 = add <16 x i16> %33778, %33772
  %33813 = add <16 x i16> %33812, %33784
  %33814 = add <16 x i16> %33813, %33790
  %33815 = add <16 x i16> %33814, %33796
  %33816 = add <16 x i16> %33815, %33802
  %33817 = add <16 x i16> %33816, %33808
  %33818 = add <16 x i16> %33781, %33775
  %33819 = add <16 x i16> %33818, %33787
  %33820 = add <16 x i16> %33819, %33793
  %33821 = add <16 x i16> %33820, %33799
  %33822 = add <16 x i16> %33821, %33805
  %33823 = add <16 x i16> %33822, %33811
  %33824 = shufflevector <16 x i16> %33817, <16 x i16> %33823, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33825 = udiv <32 x i16> %33824, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %33826 = shufflevector <32 x i16> %33825, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33827 = zext i32 %.pre-phi3693 to i64
  %33828 = mul nsw i64 %303, %33827
  %33829 = add nsw i64 %305, %33828
  %33830 = getelementptr inbounds i16, i16* %blur_x917, i64 %33829
  %33831 = getelementptr inbounds i16, i16* %33830, i64 -32
  %33832 = bitcast i16* %33831 to <16 x i16>*
  store <16 x i16> %33826, <16 x i16>* %33832, align 2, !tbaa !399
  %33833 = shufflevector <32 x i16> %33825, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33834 = getelementptr inbounds i16, i16* %33830, i64 -16
  %33835 = bitcast i16* %33834 to <16 x i16>*
  store <16 x i16> %33833, <16 x i16>* %33835, align 2, !tbaa !399
  %33836 = zext i32 %.pre-phi3673 to i64
  %33837 = mul nsw i64 %33836, %349
  %33838 = add nsw i64 %33837, %300
  %33839 = getelementptr inbounds i16, i16* %blur_x917, i64 %33838
  %33840 = getelementptr inbounds i16, i16* %33839, i64 -32
  %33841 = bitcast i16* %33840 to <16 x i16>*
  %33842 = load <16 x i16>, <16 x i16>* %33841, align 2, !tbaa !399
  %33843 = getelementptr inbounds i16, i16* %33839, i64 -16
  %33844 = bitcast i16* %33843 to <16 x i16>*
  %33845 = load <16 x i16>, <16 x i16>* %33844, align 2, !tbaa !399
  %33846 = zext i32 %.pre-phi3669 to i64
  %33847 = mul nsw i64 %33846, %349
  %33848 = add nsw i64 %33847, %300
  %33849 = getelementptr inbounds i16, i16* %blur_x917, i64 %33848
  %33850 = getelementptr inbounds i16, i16* %33849, i64 -32
  %33851 = bitcast i16* %33850 to <16 x i16>*
  %33852 = load <16 x i16>, <16 x i16>* %33851, align 2, !tbaa !399
  %33853 = getelementptr inbounds i16, i16* %33849, i64 -16
  %33854 = bitcast i16* %33853 to <16 x i16>*
  %33855 = load <16 x i16>, <16 x i16>* %33854, align 2, !tbaa !399
  %33856 = zext i32 %.pre-phi3677 to i64
  %33857 = mul nsw i64 %33856, %349
  %33858 = add nsw i64 %33857, %300
  %33859 = getelementptr inbounds i16, i16* %blur_x917, i64 %33858
  %33860 = getelementptr inbounds i16, i16* %33859, i64 -32
  %33861 = bitcast i16* %33860 to <16 x i16>*
  %33862 = load <16 x i16>, <16 x i16>* %33861, align 2, !tbaa !399
  %33863 = getelementptr inbounds i16, i16* %33859, i64 -16
  %33864 = bitcast i16* %33863 to <16 x i16>*
  %33865 = load <16 x i16>, <16 x i16>* %33864, align 2, !tbaa !399
  %33866 = zext i32 %.pre-phi3681 to i64
  %33867 = mul nsw i64 %33866, %349
  %33868 = add nsw i64 %33867, %300
  %33869 = getelementptr inbounds i16, i16* %blur_x917, i64 %33868
  %33870 = getelementptr inbounds i16, i16* %33869, i64 -32
  %33871 = bitcast i16* %33870 to <16 x i16>*
  %33872 = load <16 x i16>, <16 x i16>* %33871, align 2, !tbaa !399
  %33873 = getelementptr inbounds i16, i16* %33869, i64 -16
  %33874 = bitcast i16* %33873 to <16 x i16>*
  %33875 = load <16 x i16>, <16 x i16>* %33874, align 2, !tbaa !399
  %33876 = zext i32 %.pre-phi3685 to i64
  %33877 = mul nsw i64 %33876, %349
  %33878 = add nsw i64 %33877, %300
  %33879 = getelementptr inbounds i16, i16* %blur_x917, i64 %33878
  %33880 = getelementptr inbounds i16, i16* %33879, i64 -32
  %33881 = bitcast i16* %33880 to <16 x i16>*
  %33882 = load <16 x i16>, <16 x i16>* %33881, align 2, !tbaa !399
  %33883 = getelementptr inbounds i16, i16* %33879, i64 -16
  %33884 = bitcast i16* %33883 to <16 x i16>*
  %33885 = load <16 x i16>, <16 x i16>* %33884, align 2, !tbaa !399
  %33886 = mul nsw i64 %33827, %349
  %33887 = add nsw i64 %33886, %300
  %33888 = getelementptr inbounds i16, i16* %blur_x917, i64 %33887
  %33889 = getelementptr inbounds i16, i16* %33888, i64 -32
  %33890 = bitcast i16* %33889 to <16 x i16>*
  %33891 = load <16 x i16>, <16 x i16>* %33890, align 2, !tbaa !399
  %33892 = getelementptr inbounds i16, i16* %33888, i64 -16
  %33893 = bitcast i16* %33892 to <16 x i16>*
  %33894 = load <16 x i16>, <16 x i16>* %33893, align 2, !tbaa !399
  %33895 = zext i32 %.pre-phi3689 to i64
  %33896 = mul nsw i64 %33895, %349
  %33897 = add nsw i64 %33896, %300
  %33898 = getelementptr inbounds i16, i16* %blur_x917, i64 %33897
  %33899 = getelementptr inbounds i16, i16* %33898, i64 -32
  %33900 = bitcast i16* %33899 to <16 x i16>*
  %33901 = load <16 x i16>, <16 x i16>* %33900, align 2, !tbaa !399
  %33902 = getelementptr inbounds i16, i16* %33898, i64 -16
  %33903 = bitcast i16* %33902 to <16 x i16>*
  %33904 = load <16 x i16>, <16 x i16>* %33903, align 2, !tbaa !399
  %33905 = add <16 x i16> %33852, %33842
  %33906 = add <16 x i16> %33905, %33862
  %33907 = add <16 x i16> %33906, %33872
  %33908 = add <16 x i16> %33907, %33882
  %33909 = add <16 x i16> %33908, %33891
  %33910 = add <16 x i16> %33909, %33901
  %33911 = add <16 x i16> %33855, %33845
  %33912 = add <16 x i16> %33911, %33865
  %33913 = add <16 x i16> %33912, %33875
  %33914 = add <16 x i16> %33913, %33885
  %33915 = add <16 x i16> %33914, %33894
  %33916 = add <16 x i16> %33915, %33904
  %33917 = shufflevector <16 x i16> %33910, <16 x i16> %33916, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33918 = udiv <32 x i16> %33917, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %33919 = shufflevector <32 x i16> %33918, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33920 = sext i32 %a393 to i64
  %33921 = add nsw i64 %33920, 24
  %33922 = mul nsw i64 %33921, %350
  %33923 = add nsw i64 %352, %33922
  %33924 = getelementptr inbounds i16, i16* %267, i64 %33923
  %33925 = getelementptr inbounds i16, i16* %33924, i64 -32
  %33926 = bitcast i16* %33925 to <16 x i16>*
  store <16 x i16> %33919, <16 x i16>* %33926, align 2, !tbaa !401
  %33927 = shufflevector <32 x i16> %33918, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33928 = getelementptr inbounds i16, i16* %33924, i64 -16
  %33929 = bitcast i16* %33928 to <16 x i16>*
  store <16 x i16> %33927, <16 x i16>* %33929, align 2, !tbaa !401
  br label %after_bb2129

"for blur_y.s0.x.x.rebased2144":                  ; preds = %"for blur_y.s0.x.x.rebased2144.preheader", %"consume blur_x2152"
  %indvars.iv3556 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2144.preheader" ], [ %indvars.iv.next3557, %"consume blur_x2152" ]
  %33930 = add nsw i64 %indvars.iv3556, %307
  %33931 = icmp slt i64 %33930, 1
  %33932 = trunc i64 %33930 to i32
  %33933 = shl nsw i32 %33932, 5
  %33934 = icmp sgt i32 %202, %33933
  %33935 = or i1 %33931, %33934
  br i1 %33935, label %"produce blur_x2150", label %"for blur_y.s0.x.x.rebased2144.consume blur_x2152_crit_edge"

"for blur_y.s0.x.x.rebased2144.consume blur_x2152_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2144"
  %.pre3746 = shl nsw i64 %33930, 5
  br label %"consume blur_x2152"

"end for blur_y.s0.x.x.rebased2145":              ; preds = %"consume blur_x2152", %after_bb2129
  br i1 %308, label %"for blur_y.s0.x.x.rebased2160.preheader", label %"end for blur_y.s0.x.x.rebased2161", !prof !386

"for blur_y.s0.x.x.rebased2160.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2145"
  %33936 = sext i32 %t17621108 to i64
  %33937 = zext i32 %.pre-phi3673 to i64
  %33938 = mul nsw i64 %33937, %353
  %33939 = sub nsw i64 %33938, %302
  %33940 = zext i32 %.pre-phi3669 to i64
  %33941 = mul nsw i64 %33940, %353
  %33942 = sub nsw i64 %33941, %302
  %33943 = zext i32 %.pre-phi3677 to i64
  %33944 = mul nsw i64 %33943, %353
  %33945 = sub nsw i64 %33944, %302
  %33946 = zext i32 %.pre-phi3681 to i64
  %33947 = mul nsw i64 %33946, %353
  %33948 = sub nsw i64 %33947, %302
  %33949 = zext i32 %.pre-phi3685 to i64
  %33950 = mul nsw i64 %33949, %353
  %33951 = sub nsw i64 %33950, %302
  %33952 = zext i32 %.pre-phi3693 to i64
  %33953 = mul nsw i64 %33952, %353
  %33954 = sub nsw i64 %33953, %302
  %33955 = zext i32 %.pre-phi3689 to i64
  %33956 = mul nsw i64 %33955, %353
  %33957 = sub nsw i64 %33956, %302
  %33958 = sext i32 %a393 to i64
  %33959 = add nsw i64 %33958, 24
  %33960 = mul nsw i64 %33959, %350
  %33961 = add nsw i64 %33960, %354
  br label %"for blur_y.s0.x.x.rebased2160"

"produce blur_x2150":                             ; preds = %"for blur_y.s0.x.x.rebased2144"
  %t11362151 = add nsw i32 %497, %33933
  %33962 = sext i32 %t11362151 to i64
  %33963 = getelementptr inbounds i16, i16* %read_input860, i64 %33962
  %33964 = getelementptr inbounds i16, i16* %33963, i64 1
  %33965 = bitcast i16* %33964 to <16 x i16>*
  %33966 = load <16 x i16>, <16 x i16>* %33965, align 2, !tbaa !396
  %33967 = getelementptr inbounds i16, i16* %33963, i64 17
  %33968 = bitcast i16* %33967 to <16 x i16>*
  %33969 = load <16 x i16>, <16 x i16>* %33968, align 2, !tbaa !396
  %33970 = bitcast i16* %33963 to <16 x i16>*
  %33971 = load <16 x i16>, <16 x i16>* %33970, align 2, !tbaa !396
  %33972 = getelementptr inbounds i16, i16* %33963, i64 16
  %33973 = bitcast i16* %33972 to <16 x i16>*
  %33974 = load <16 x i16>, <16 x i16>* %33973, align 2, !tbaa !396
  %33975 = getelementptr inbounds i16, i16* %33963, i64 2
  %33976 = bitcast i16* %33975 to <16 x i16>*
  %33977 = load <16 x i16>, <16 x i16>* %33976, align 2, !tbaa !396
  %33978 = getelementptr inbounds i16, i16* %33963, i64 18
  %33979 = bitcast i16* %33978 to <16 x i16>*
  %33980 = load <16 x i16>, <16 x i16>* %33979, align 2, !tbaa !396
  %33981 = getelementptr inbounds i16, i16* %33963, i64 3
  %33982 = bitcast i16* %33981 to <16 x i16>*
  %33983 = load <16 x i16>, <16 x i16>* %33982, align 2, !tbaa !396
  %33984 = getelementptr inbounds i16, i16* %33963, i64 19
  %33985 = bitcast i16* %33984 to <16 x i16>*
  %33986 = load <16 x i16>, <16 x i16>* %33985, align 2, !tbaa !396
  %33987 = getelementptr inbounds i16, i16* %33963, i64 4
  %33988 = bitcast i16* %33987 to <16 x i16>*
  %33989 = load <16 x i16>, <16 x i16>* %33988, align 2, !tbaa !396
  %33990 = getelementptr inbounds i16, i16* %33963, i64 20
  %33991 = bitcast i16* %33990 to <16 x i16>*
  %33992 = load <16 x i16>, <16 x i16>* %33991, align 2, !tbaa !396
  %33993 = getelementptr inbounds i16, i16* %33963, i64 6
  %33994 = bitcast i16* %33993 to <16 x i16>*
  %33995 = load <16 x i16>, <16 x i16>* %33994, align 2, !tbaa !396
  %33996 = getelementptr inbounds i16, i16* %33963, i64 22
  %33997 = bitcast i16* %33996 to <16 x i16>*
  %33998 = load <16 x i16>, <16 x i16>* %33997, align 2, !tbaa !396
  %33999 = getelementptr inbounds i16, i16* %33963, i64 5
  %34000 = bitcast i16* %33999 to <16 x i16>*
  %34001 = load <16 x i16>, <16 x i16>* %34000, align 2, !tbaa !396
  %34002 = getelementptr inbounds i16, i16* %33963, i64 21
  %34003 = bitcast i16* %34002 to <16 x i16>*
  %34004 = load <16 x i16>, <16 x i16>* %34003, align 2, !tbaa !396
  %34005 = add <16 x i16> %33971, %33966
  %34006 = add <16 x i16> %34005, %33977
  %34007 = add <16 x i16> %34006, %33983
  %34008 = add <16 x i16> %34007, %33989
  %34009 = add <16 x i16> %34008, %33995
  %34010 = add <16 x i16> %34009, %34001
  %34011 = add <16 x i16> %33974, %33969
  %34012 = add <16 x i16> %34011, %33980
  %34013 = add <16 x i16> %34012, %33986
  %34014 = add <16 x i16> %34013, %33992
  %34015 = add <16 x i16> %34014, %33998
  %34016 = add <16 x i16> %34015, %34004
  %34017 = shufflevector <16 x i16> %34010, <16 x i16> %34016, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34018 = udiv <32 x i16> %34017, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %34019 = shufflevector <32 x i16> %34018, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34020 = shl nsw i64 %33930, 5
  %34021 = add nsw i64 %34020, %33743
  %34022 = getelementptr inbounds i16, i16* %blur_x917, i64 %34021
  %34023 = bitcast i16* %34022 to <16 x i16>*
  store <16 x i16> %34019, <16 x i16>* %34023, align 2, !tbaa !399
  %34024 = shufflevector <32 x i16> %34018, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34025 = getelementptr inbounds i16, i16* %34022, i64 16
  %34026 = bitcast i16* %34025 to <16 x i16>*
  store <16 x i16> %34024, <16 x i16>* %34026, align 2, !tbaa !399
  br label %"consume blur_x2152"

"consume blur_x2152":                             ; preds = %"for blur_y.s0.x.x.rebased2144.consume blur_x2152_crit_edge", %"produce blur_x2150"
  %.pre-phi3747 = phi i64 [ %.pre3746, %"for blur_y.s0.x.x.rebased2144.consume blur_x2152_crit_edge" ], [ %34020, %"produce blur_x2150" ]
  %34027 = add nsw i64 %33746, %.pre-phi3747
  %34028 = getelementptr inbounds i16, i16* %blur_x917, i64 %34027
  %34029 = bitcast i16* %34028 to <16 x i16>*
  %34030 = load <16 x i16>, <16 x i16>* %34029, align 2, !tbaa !399
  %34031 = getelementptr inbounds i16, i16* %34028, i64 16
  %34032 = bitcast i16* %34031 to <16 x i16>*
  %34033 = load <16 x i16>, <16 x i16>* %34032, align 2, !tbaa !399
  %34034 = add nsw i64 %33749, %.pre-phi3747
  %34035 = getelementptr inbounds i16, i16* %blur_x917, i64 %34034
  %34036 = bitcast i16* %34035 to <16 x i16>*
  %34037 = load <16 x i16>, <16 x i16>* %34036, align 2, !tbaa !399
  %34038 = getelementptr inbounds i16, i16* %34035, i64 16
  %34039 = bitcast i16* %34038 to <16 x i16>*
  %34040 = load <16 x i16>, <16 x i16>* %34039, align 2, !tbaa !399
  %34041 = add nsw i64 %33752, %.pre-phi3747
  %34042 = getelementptr inbounds i16, i16* %blur_x917, i64 %34041
  %34043 = bitcast i16* %34042 to <16 x i16>*
  %34044 = load <16 x i16>, <16 x i16>* %34043, align 2, !tbaa !399
  %34045 = getelementptr inbounds i16, i16* %34042, i64 16
  %34046 = bitcast i16* %34045 to <16 x i16>*
  %34047 = load <16 x i16>, <16 x i16>* %34046, align 2, !tbaa !399
  %34048 = add nsw i64 %33755, %.pre-phi3747
  %34049 = getelementptr inbounds i16, i16* %blur_x917, i64 %34048
  %34050 = bitcast i16* %34049 to <16 x i16>*
  %34051 = load <16 x i16>, <16 x i16>* %34050, align 2, !tbaa !399
  %34052 = getelementptr inbounds i16, i16* %34049, i64 16
  %34053 = bitcast i16* %34052 to <16 x i16>*
  %34054 = load <16 x i16>, <16 x i16>* %34053, align 2, !tbaa !399
  %34055 = add nsw i64 %33758, %.pre-phi3747
  %34056 = getelementptr inbounds i16, i16* %blur_x917, i64 %34055
  %34057 = bitcast i16* %34056 to <16 x i16>*
  %34058 = load <16 x i16>, <16 x i16>* %34057, align 2, !tbaa !399
  %34059 = getelementptr inbounds i16, i16* %34056, i64 16
  %34060 = bitcast i16* %34059 to <16 x i16>*
  %34061 = load <16 x i16>, <16 x i16>* %34060, align 2, !tbaa !399
  %34062 = add nsw i64 %33761, %.pre-phi3747
  %34063 = getelementptr inbounds i16, i16* %blur_x917, i64 %34062
  %34064 = bitcast i16* %34063 to <16 x i16>*
  %34065 = load <16 x i16>, <16 x i16>* %34064, align 2, !tbaa !399
  %34066 = getelementptr inbounds i16, i16* %34063, i64 16
  %34067 = bitcast i16* %34066 to <16 x i16>*
  %34068 = load <16 x i16>, <16 x i16>* %34067, align 2, !tbaa !399
  %34069 = add nsw i64 %33764, %.pre-phi3747
  %34070 = getelementptr inbounds i16, i16* %blur_x917, i64 %34069
  %34071 = bitcast i16* %34070 to <16 x i16>*
  %34072 = load <16 x i16>, <16 x i16>* %34071, align 2, !tbaa !399
  %34073 = getelementptr inbounds i16, i16* %34070, i64 16
  %34074 = bitcast i16* %34073 to <16 x i16>*
  %34075 = load <16 x i16>, <16 x i16>* %34074, align 2, !tbaa !399
  %34076 = add <16 x i16> %34037, %34030
  %34077 = add <16 x i16> %34076, %34044
  %34078 = add <16 x i16> %34077, %34051
  %34079 = add <16 x i16> %34078, %34058
  %34080 = add <16 x i16> %34079, %34065
  %34081 = add <16 x i16> %34080, %34072
  %34082 = add <16 x i16> %34040, %34033
  %34083 = add <16 x i16> %34082, %34047
  %34084 = add <16 x i16> %34083, %34054
  %34085 = add <16 x i16> %34084, %34061
  %34086 = add <16 x i16> %34085, %34068
  %34087 = add <16 x i16> %34086, %34075
  %34088 = shufflevector <16 x i16> %34081, <16 x i16> %34087, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34089 = udiv <32 x i16> %34088, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %34090 = shufflevector <32 x i16> %34089, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34091 = add nsw i64 %33768, %.pre-phi3747
  %34092 = getelementptr inbounds i16, i16* %267, i64 %34091
  %34093 = bitcast i16* %34092 to <16 x i16>*
  store <16 x i16> %34090, <16 x i16>* %34093, align 2, !tbaa !401
  %34094 = shufflevector <32 x i16> %34089, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34095 = getelementptr inbounds i16, i16* %34092, i64 16
  %34096 = bitcast i16* %34095 to <16 x i16>*
  store <16 x i16> %34094, <16 x i16>* %34096, align 2, !tbaa !401
  %indvars.iv.next3557 = add nuw nsw i64 %indvars.iv3556, 1
  %.not2673 = icmp eq i64 %indvars.iv.next3557, %546
  br i1 %.not2673, label %"end for blur_y.s0.x.x.rebased2145", label %"for blur_y.s0.x.x.rebased2144"

"for blur_y.s0.x.x.rebased2160":                  ; preds = %"for blur_y.s0.x.x.rebased2160.preheader", %"consume blur_x2171"
  %blur_y.s0.x.x.rebased2162 = phi i32 [ %34239, %"consume blur_x2171" ], [ 0, %"for blur_y.s0.x.x.rebased2160.preheader" ]
  %34097 = add nsw i32 %blur_y.s0.x.x.rebased2162, %t1670852
  %a5371 = shl nsw i32 %34097, 5
  %34098 = icmp sgt i32 %t1691, %a5371
  %blur_y.s0.x.v0.base.s2163 = select i1 %34098, i32 %a5371, i32 %t1691
  %34099 = icmp slt i32 %34097, 1
  %34100 = icmp sgt i32 %202, %a5371
  %34101 = or i1 %34099, %34100
  br i1 %34101, label %"produce blur_x2168", label %"consume blur_x2171"

"end for blur_y.s0.x.x.rebased2161":              ; preds = %"consume blur_x2171", %"end for blur_y.s0.x.x.rebased2145"
  br i1 %233, label %"produce blur_x2175", label %after_bb2172

"produce blur_x2168":                             ; preds = %"for blur_y.s0.x.x.rebased2160"
  %34102 = icmp slt i32 %blur_y.s0.x.v0.base.s2163, %202
  %blur_x.s0.x.v1.base.s2169 = select i1 %34102, i32 %blur_y.s0.x.v0.base.s2163, i32 %202
  %t11412170 = add nsw i32 %497, %blur_x.s0.x.v1.base.s2169
  %34103 = sext i32 %t11412170 to i64
  %34104 = getelementptr inbounds i16, i16* %read_input860, i64 %34103
  %34105 = getelementptr inbounds i16, i16* %34104, i64 1
  %34106 = bitcast i16* %34105 to <16 x i16>*
  %34107 = load <16 x i16>, <16 x i16>* %34106, align 2, !tbaa !396
  %34108 = getelementptr inbounds i16, i16* %34104, i64 17
  %34109 = bitcast i16* %34108 to <16 x i16>*
  %34110 = load <16 x i16>, <16 x i16>* %34109, align 2, !tbaa !396
  %34111 = bitcast i16* %34104 to <16 x i16>*
  %34112 = load <16 x i16>, <16 x i16>* %34111, align 2, !tbaa !396
  %34113 = getelementptr inbounds i16, i16* %34104, i64 16
  %34114 = bitcast i16* %34113 to <16 x i16>*
  %34115 = load <16 x i16>, <16 x i16>* %34114, align 2, !tbaa !396
  %34116 = getelementptr inbounds i16, i16* %34104, i64 2
  %34117 = bitcast i16* %34116 to <16 x i16>*
  %34118 = load <16 x i16>, <16 x i16>* %34117, align 2, !tbaa !396
  %34119 = getelementptr inbounds i16, i16* %34104, i64 18
  %34120 = bitcast i16* %34119 to <16 x i16>*
  %34121 = load <16 x i16>, <16 x i16>* %34120, align 2, !tbaa !396
  %34122 = getelementptr inbounds i16, i16* %34104, i64 3
  %34123 = bitcast i16* %34122 to <16 x i16>*
  %34124 = load <16 x i16>, <16 x i16>* %34123, align 2, !tbaa !396
  %34125 = getelementptr inbounds i16, i16* %34104, i64 19
  %34126 = bitcast i16* %34125 to <16 x i16>*
  %34127 = load <16 x i16>, <16 x i16>* %34126, align 2, !tbaa !396
  %34128 = getelementptr inbounds i16, i16* %34104, i64 4
  %34129 = bitcast i16* %34128 to <16 x i16>*
  %34130 = load <16 x i16>, <16 x i16>* %34129, align 2, !tbaa !396
  %34131 = getelementptr inbounds i16, i16* %34104, i64 20
  %34132 = bitcast i16* %34131 to <16 x i16>*
  %34133 = load <16 x i16>, <16 x i16>* %34132, align 2, !tbaa !396
  %34134 = getelementptr inbounds i16, i16* %34104, i64 6
  %34135 = bitcast i16* %34134 to <16 x i16>*
  %34136 = load <16 x i16>, <16 x i16>* %34135, align 2, !tbaa !396
  %34137 = getelementptr inbounds i16, i16* %34104, i64 22
  %34138 = bitcast i16* %34137 to <16 x i16>*
  %34139 = load <16 x i16>, <16 x i16>* %34138, align 2, !tbaa !396
  %34140 = getelementptr inbounds i16, i16* %34104, i64 5
  %34141 = bitcast i16* %34140 to <16 x i16>*
  %34142 = load <16 x i16>, <16 x i16>* %34141, align 2, !tbaa !396
  %34143 = getelementptr inbounds i16, i16* %34104, i64 21
  %34144 = bitcast i16* %34143 to <16 x i16>*
  %34145 = load <16 x i16>, <16 x i16>* %34144, align 2, !tbaa !396
  %34146 = add <16 x i16> %34112, %34107
  %34147 = add <16 x i16> %34146, %34118
  %34148 = add <16 x i16> %34147, %34124
  %34149 = add <16 x i16> %34148, %34130
  %34150 = add <16 x i16> %34149, %34136
  %34151 = add <16 x i16> %34150, %34142
  %34152 = add <16 x i16> %34115, %34110
  %34153 = add <16 x i16> %34152, %34121
  %34154 = add <16 x i16> %34153, %34127
  %34155 = add <16 x i16> %34154, %34133
  %34156 = add <16 x i16> %34155, %34139
  %34157 = add <16 x i16> %34156, %34145
  %34158 = shufflevector <16 x i16> %34151, <16 x i16> %34157, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34159 = udiv <32 x i16> %34158, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %34160 = shufflevector <32 x i16> %34159, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34161 = sext i32 %blur_x.s0.x.v1.base.s2169 to i64
  %34162 = add nsw i64 %34161, %33936
  %34163 = getelementptr inbounds i16, i16* %blur_x917, i64 %34162
  %34164 = bitcast i16* %34163 to <16 x i16>*
  store <16 x i16> %34160, <16 x i16>* %34164, align 2, !tbaa !399
  %34165 = shufflevector <32 x i16> %34159, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34166 = getelementptr inbounds i16, i16* %34163, i64 16
  %34167 = bitcast i16* %34166 to <16 x i16>*
  store <16 x i16> %34165, <16 x i16>* %34167, align 2, !tbaa !399
  br label %"consume blur_x2171"

"consume blur_x2171":                             ; preds = %"for blur_y.s0.x.x.rebased2160", %"produce blur_x2168"
  %34168 = sext i32 %blur_y.s0.x.v0.base.s2163 to i64
  %34169 = add nsw i64 %33939, %34168
  %34170 = getelementptr inbounds i16, i16* %blur_x917, i64 %34169
  %34171 = bitcast i16* %34170 to <16 x i16>*
  %34172 = load <16 x i16>, <16 x i16>* %34171, align 2, !tbaa !399
  %34173 = getelementptr inbounds i16, i16* %34170, i64 16
  %34174 = bitcast i16* %34173 to <16 x i16>*
  %34175 = load <16 x i16>, <16 x i16>* %34174, align 2, !tbaa !399
  %34176 = add nsw i64 %33942, %34168
  %34177 = getelementptr inbounds i16, i16* %blur_x917, i64 %34176
  %34178 = bitcast i16* %34177 to <16 x i16>*
  %34179 = load <16 x i16>, <16 x i16>* %34178, align 2, !tbaa !399
  %34180 = getelementptr inbounds i16, i16* %34177, i64 16
  %34181 = bitcast i16* %34180 to <16 x i16>*
  %34182 = load <16 x i16>, <16 x i16>* %34181, align 2, !tbaa !399
  %34183 = add nsw i64 %33945, %34168
  %34184 = getelementptr inbounds i16, i16* %blur_x917, i64 %34183
  %34185 = bitcast i16* %34184 to <16 x i16>*
  %34186 = load <16 x i16>, <16 x i16>* %34185, align 2, !tbaa !399
  %34187 = getelementptr inbounds i16, i16* %34184, i64 16
  %34188 = bitcast i16* %34187 to <16 x i16>*
  %34189 = load <16 x i16>, <16 x i16>* %34188, align 2, !tbaa !399
  %34190 = add nsw i64 %33948, %34168
  %34191 = getelementptr inbounds i16, i16* %blur_x917, i64 %34190
  %34192 = bitcast i16* %34191 to <16 x i16>*
  %34193 = load <16 x i16>, <16 x i16>* %34192, align 2, !tbaa !399
  %34194 = getelementptr inbounds i16, i16* %34191, i64 16
  %34195 = bitcast i16* %34194 to <16 x i16>*
  %34196 = load <16 x i16>, <16 x i16>* %34195, align 2, !tbaa !399
  %34197 = add nsw i64 %33951, %34168
  %34198 = getelementptr inbounds i16, i16* %blur_x917, i64 %34197
  %34199 = bitcast i16* %34198 to <16 x i16>*
  %34200 = load <16 x i16>, <16 x i16>* %34199, align 2, !tbaa !399
  %34201 = getelementptr inbounds i16, i16* %34198, i64 16
  %34202 = bitcast i16* %34201 to <16 x i16>*
  %34203 = load <16 x i16>, <16 x i16>* %34202, align 2, !tbaa !399
  %34204 = add nsw i64 %33954, %34168
  %34205 = getelementptr inbounds i16, i16* %blur_x917, i64 %34204
  %34206 = bitcast i16* %34205 to <16 x i16>*
  %34207 = load <16 x i16>, <16 x i16>* %34206, align 2, !tbaa !399
  %34208 = getelementptr inbounds i16, i16* %34205, i64 16
  %34209 = bitcast i16* %34208 to <16 x i16>*
  %34210 = load <16 x i16>, <16 x i16>* %34209, align 2, !tbaa !399
  %34211 = add nsw i64 %33957, %34168
  %34212 = getelementptr inbounds i16, i16* %blur_x917, i64 %34211
  %34213 = bitcast i16* %34212 to <16 x i16>*
  %34214 = load <16 x i16>, <16 x i16>* %34213, align 2, !tbaa !399
  %34215 = getelementptr inbounds i16, i16* %34212, i64 16
  %34216 = bitcast i16* %34215 to <16 x i16>*
  %34217 = load <16 x i16>, <16 x i16>* %34216, align 2, !tbaa !399
  %34218 = add <16 x i16> %34179, %34172
  %34219 = add <16 x i16> %34218, %34186
  %34220 = add <16 x i16> %34219, %34193
  %34221 = add <16 x i16> %34220, %34200
  %34222 = add <16 x i16> %34221, %34207
  %34223 = add <16 x i16> %34222, %34214
  %34224 = add <16 x i16> %34182, %34175
  %34225 = add <16 x i16> %34224, %34189
  %34226 = add <16 x i16> %34225, %34196
  %34227 = add <16 x i16> %34226, %34203
  %34228 = add <16 x i16> %34227, %34210
  %34229 = add <16 x i16> %34228, %34217
  %34230 = shufflevector <16 x i16> %34223, <16 x i16> %34229, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34231 = udiv <32 x i16> %34230, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %34232 = shufflevector <32 x i16> %34231, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34233 = add nsw i64 %33961, %34168
  %34234 = getelementptr inbounds i16, i16* %267, i64 %34233
  %34235 = bitcast i16* %34234 to <16 x i16>*
  store <16 x i16> %34232, <16 x i16>* %34235, align 2, !tbaa !401
  %34236 = shufflevector <32 x i16> %34231, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34237 = getelementptr inbounds i16, i16* %34234, i64 16
  %34238 = bitcast i16* %34237 to <16 x i16>*
  store <16 x i16> %34236, <16 x i16>* %34238, align 2, !tbaa !401
  %34239 = add nuw nsw i32 %blur_y.s0.x.x.rebased2162, 1
  %.not2672 = icmp eq i32 %34239, %t1727936
  br i1 %.not2672, label %"end for blur_y.s0.x.x.rebased2161", label %"for blur_y.s0.x.x.rebased2160"

after_bb2172:                                     ; preds = %"end for blur_y.s0.x.x.rebased2161", %"produce blur_x2175"
  br i1 %306, label %"for blur_y.s0.x.x.rebased2187.preheader", label %"end for blur_y.s0.x.x.rebased2188", !prof !386

"for blur_y.s0.x.x.rebased2187.preheader":        ; preds = %after_bb2172
  %34240 = sext i32 %t17781151 to i64
  %34241 = zext i32 %.pre-phi3677 to i64
  %34242 = mul nsw i64 %34241, %353
  %34243 = sub nsw i64 %34242, %302
  %34244 = zext i32 %.pre-phi3673 to i64
  %34245 = mul nsw i64 %34244, %353
  %34246 = sub nsw i64 %34245, %302
  %34247 = zext i32 %.pre-phi3681 to i64
  %34248 = mul nsw i64 %34247, %353
  %34249 = sub nsw i64 %34248, %302
  %34250 = zext i32 %.pre-phi3685 to i64
  %34251 = mul nsw i64 %34250, %353
  %34252 = sub nsw i64 %34251, %302
  %34253 = zext i32 %.pre-phi3689 to i64
  %34254 = mul nsw i64 %34253, %353
  %34255 = sub nsw i64 %34254, %302
  %34256 = zext i32 %.pre-phi3699 to i64
  %34257 = mul nsw i64 %34256, %353
  %34258 = sub nsw i64 %34257, %302
  %34259 = zext i32 %.pre-phi3693 to i64
  %34260 = mul nsw i64 %34259, %353
  %34261 = sub nsw i64 %34260, %302
  %34262 = sext i32 %a393 to i64
  %34263 = add nsw i64 %34262, 25
  %34264 = mul nsw i64 %34263, %350
  %34265 = add nsw i64 %34264, %354
  br label %"for blur_y.s0.x.x.rebased2187"

"produce blur_x2175":                             ; preds = %"end for blur_y.s0.x.x.rebased2161"
  %34266 = getelementptr inbounds i16, i16* %read_input860, i64 %501
  %34267 = getelementptr inbounds i16, i16* %34266, i64 -31
  %34268 = bitcast i16* %34267 to <16 x i16>*
  %34269 = load <16 x i16>, <16 x i16>* %34268, align 2, !tbaa !396
  %34270 = getelementptr inbounds i16, i16* %34266, i64 -15
  %34271 = bitcast i16* %34270 to <16 x i16>*
  %34272 = load <16 x i16>, <16 x i16>* %34271, align 2, !tbaa !396
  %34273 = getelementptr inbounds i16, i16* %34266, i64 -32
  %34274 = bitcast i16* %34273 to <16 x i16>*
  %34275 = load <16 x i16>, <16 x i16>* %34274, align 2, !tbaa !396
  %34276 = getelementptr inbounds i16, i16* %34266, i64 -16
  %34277 = bitcast i16* %34276 to <16 x i16>*
  %34278 = load <16 x i16>, <16 x i16>* %34277, align 2, !tbaa !396
  %34279 = getelementptr inbounds i16, i16* %34266, i64 -30
  %34280 = bitcast i16* %34279 to <16 x i16>*
  %34281 = load <16 x i16>, <16 x i16>* %34280, align 2, !tbaa !396
  %34282 = getelementptr inbounds i16, i16* %34266, i64 -14
  %34283 = bitcast i16* %34282 to <16 x i16>*
  %34284 = load <16 x i16>, <16 x i16>* %34283, align 2, !tbaa !396
  %34285 = getelementptr inbounds i16, i16* %34266, i64 -29
  %34286 = bitcast i16* %34285 to <16 x i16>*
  %34287 = load <16 x i16>, <16 x i16>* %34286, align 2, !tbaa !396
  %34288 = getelementptr inbounds i16, i16* %34266, i64 -13
  %34289 = bitcast i16* %34288 to <16 x i16>*
  %34290 = load <16 x i16>, <16 x i16>* %34289, align 2, !tbaa !396
  %34291 = getelementptr inbounds i16, i16* %34266, i64 -28
  %34292 = bitcast i16* %34291 to <16 x i16>*
  %34293 = load <16 x i16>, <16 x i16>* %34292, align 2, !tbaa !396
  %34294 = getelementptr inbounds i16, i16* %34266, i64 -12
  %34295 = bitcast i16* %34294 to <16 x i16>*
  %34296 = load <16 x i16>, <16 x i16>* %34295, align 2, !tbaa !396
  %34297 = getelementptr inbounds i16, i16* %34266, i64 -26
  %34298 = bitcast i16* %34297 to <16 x i16>*
  %34299 = load <16 x i16>, <16 x i16>* %34298, align 2, !tbaa !396
  %34300 = getelementptr inbounds i16, i16* %34266, i64 -10
  %34301 = bitcast i16* %34300 to <16 x i16>*
  %34302 = load <16 x i16>, <16 x i16>* %34301, align 2, !tbaa !396
  %34303 = getelementptr inbounds i16, i16* %34266, i64 -27
  %34304 = bitcast i16* %34303 to <16 x i16>*
  %34305 = load <16 x i16>, <16 x i16>* %34304, align 2, !tbaa !396
  %34306 = getelementptr inbounds i16, i16* %34266, i64 -11
  %34307 = bitcast i16* %34306 to <16 x i16>*
  %34308 = load <16 x i16>, <16 x i16>* %34307, align 2, !tbaa !396
  %34309 = add <16 x i16> %34275, %34269
  %34310 = add <16 x i16> %34309, %34281
  %34311 = add <16 x i16> %34310, %34287
  %34312 = add <16 x i16> %34311, %34293
  %34313 = add <16 x i16> %34312, %34299
  %34314 = add <16 x i16> %34313, %34305
  %34315 = add <16 x i16> %34278, %34272
  %34316 = add <16 x i16> %34315, %34284
  %34317 = add <16 x i16> %34316, %34290
  %34318 = add <16 x i16> %34317, %34296
  %34319 = add <16 x i16> %34318, %34302
  %34320 = add <16 x i16> %34319, %34308
  %34321 = shufflevector <16 x i16> %34314, <16 x i16> %34320, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34322 = udiv <32 x i16> %34321, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %34323 = shufflevector <32 x i16> %34322, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34324 = zext i32 %.pre-phi3699 to i64
  %34325 = mul nsw i64 %303, %34324
  %34326 = add nsw i64 %305, %34325
  %34327 = getelementptr inbounds i16, i16* %blur_x917, i64 %34326
  %34328 = getelementptr inbounds i16, i16* %34327, i64 -32
  %34329 = bitcast i16* %34328 to <16 x i16>*
  store <16 x i16> %34323, <16 x i16>* %34329, align 2, !tbaa !399
  %34330 = shufflevector <32 x i16> %34322, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34331 = getelementptr inbounds i16, i16* %34327, i64 -16
  %34332 = bitcast i16* %34331 to <16 x i16>*
  store <16 x i16> %34330, <16 x i16>* %34332, align 2, !tbaa !399
  %34333 = zext i32 %.pre-phi3677 to i64
  %34334 = mul nsw i64 %34333, %349
  %34335 = add nsw i64 %34334, %300
  %34336 = getelementptr inbounds i16, i16* %blur_x917, i64 %34335
  %34337 = getelementptr inbounds i16, i16* %34336, i64 -32
  %34338 = bitcast i16* %34337 to <16 x i16>*
  %34339 = load <16 x i16>, <16 x i16>* %34338, align 2, !tbaa !399
  %34340 = getelementptr inbounds i16, i16* %34336, i64 -16
  %34341 = bitcast i16* %34340 to <16 x i16>*
  %34342 = load <16 x i16>, <16 x i16>* %34341, align 2, !tbaa !399
  %34343 = zext i32 %.pre-phi3673 to i64
  %34344 = mul nsw i64 %34343, %349
  %34345 = add nsw i64 %34344, %300
  %34346 = getelementptr inbounds i16, i16* %blur_x917, i64 %34345
  %34347 = getelementptr inbounds i16, i16* %34346, i64 -32
  %34348 = bitcast i16* %34347 to <16 x i16>*
  %34349 = load <16 x i16>, <16 x i16>* %34348, align 2, !tbaa !399
  %34350 = getelementptr inbounds i16, i16* %34346, i64 -16
  %34351 = bitcast i16* %34350 to <16 x i16>*
  %34352 = load <16 x i16>, <16 x i16>* %34351, align 2, !tbaa !399
  %34353 = zext i32 %.pre-phi3681 to i64
  %34354 = mul nsw i64 %34353, %349
  %34355 = add nsw i64 %34354, %300
  %34356 = getelementptr inbounds i16, i16* %blur_x917, i64 %34355
  %34357 = getelementptr inbounds i16, i16* %34356, i64 -32
  %34358 = bitcast i16* %34357 to <16 x i16>*
  %34359 = load <16 x i16>, <16 x i16>* %34358, align 2, !tbaa !399
  %34360 = getelementptr inbounds i16, i16* %34356, i64 -16
  %34361 = bitcast i16* %34360 to <16 x i16>*
  %34362 = load <16 x i16>, <16 x i16>* %34361, align 2, !tbaa !399
  %34363 = zext i32 %.pre-phi3685 to i64
  %34364 = mul nsw i64 %34363, %349
  %34365 = add nsw i64 %34364, %300
  %34366 = getelementptr inbounds i16, i16* %blur_x917, i64 %34365
  %34367 = getelementptr inbounds i16, i16* %34366, i64 -32
  %34368 = bitcast i16* %34367 to <16 x i16>*
  %34369 = load <16 x i16>, <16 x i16>* %34368, align 2, !tbaa !399
  %34370 = getelementptr inbounds i16, i16* %34366, i64 -16
  %34371 = bitcast i16* %34370 to <16 x i16>*
  %34372 = load <16 x i16>, <16 x i16>* %34371, align 2, !tbaa !399
  %34373 = zext i32 %.pre-phi3689 to i64
  %34374 = mul nsw i64 %34373, %349
  %34375 = add nsw i64 %34374, %300
  %34376 = getelementptr inbounds i16, i16* %blur_x917, i64 %34375
  %34377 = getelementptr inbounds i16, i16* %34376, i64 -32
  %34378 = bitcast i16* %34377 to <16 x i16>*
  %34379 = load <16 x i16>, <16 x i16>* %34378, align 2, !tbaa !399
  %34380 = getelementptr inbounds i16, i16* %34376, i64 -16
  %34381 = bitcast i16* %34380 to <16 x i16>*
  %34382 = load <16 x i16>, <16 x i16>* %34381, align 2, !tbaa !399
  %34383 = mul nsw i64 %34324, %349
  %34384 = add nsw i64 %34383, %300
  %34385 = getelementptr inbounds i16, i16* %blur_x917, i64 %34384
  %34386 = getelementptr inbounds i16, i16* %34385, i64 -32
  %34387 = bitcast i16* %34386 to <16 x i16>*
  %34388 = load <16 x i16>, <16 x i16>* %34387, align 2, !tbaa !399
  %34389 = getelementptr inbounds i16, i16* %34385, i64 -16
  %34390 = bitcast i16* %34389 to <16 x i16>*
  %34391 = load <16 x i16>, <16 x i16>* %34390, align 2, !tbaa !399
  %34392 = zext i32 %.pre-phi3693 to i64
  %34393 = mul nsw i64 %34392, %349
  %34394 = add nsw i64 %34393, %300
  %34395 = getelementptr inbounds i16, i16* %blur_x917, i64 %34394
  %34396 = getelementptr inbounds i16, i16* %34395, i64 -32
  %34397 = bitcast i16* %34396 to <16 x i16>*
  %34398 = load <16 x i16>, <16 x i16>* %34397, align 2, !tbaa !399
  %34399 = getelementptr inbounds i16, i16* %34395, i64 -16
  %34400 = bitcast i16* %34399 to <16 x i16>*
  %34401 = load <16 x i16>, <16 x i16>* %34400, align 2, !tbaa !399
  %34402 = add <16 x i16> %34349, %34339
  %34403 = add <16 x i16> %34402, %34359
  %34404 = add <16 x i16> %34403, %34369
  %34405 = add <16 x i16> %34404, %34379
  %34406 = add <16 x i16> %34405, %34388
  %34407 = add <16 x i16> %34406, %34398
  %34408 = add <16 x i16> %34352, %34342
  %34409 = add <16 x i16> %34408, %34362
  %34410 = add <16 x i16> %34409, %34372
  %34411 = add <16 x i16> %34410, %34382
  %34412 = add <16 x i16> %34411, %34391
  %34413 = add <16 x i16> %34412, %34401
  %34414 = shufflevector <16 x i16> %34407, <16 x i16> %34413, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34415 = udiv <32 x i16> %34414, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %34416 = shufflevector <32 x i16> %34415, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34417 = sext i32 %a393 to i64
  %34418 = add nsw i64 %34417, 25
  %34419 = mul nsw i64 %34418, %350
  %34420 = add nsw i64 %352, %34419
  %34421 = getelementptr inbounds i16, i16* %267, i64 %34420
  %34422 = getelementptr inbounds i16, i16* %34421, i64 -32
  %34423 = bitcast i16* %34422 to <16 x i16>*
  store <16 x i16> %34416, <16 x i16>* %34423, align 2, !tbaa !401
  %34424 = shufflevector <32 x i16> %34415, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34425 = getelementptr inbounds i16, i16* %34421, i64 -16
  %34426 = bitcast i16* %34425 to <16 x i16>*
  store <16 x i16> %34424, <16 x i16>* %34426, align 2, !tbaa !401
  br label %after_bb2172

"for blur_y.s0.x.x.rebased2187":                  ; preds = %"for blur_y.s0.x.x.rebased2187.preheader", %"consume blur_x2195"
  %indvars.iv3558 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2187.preheader" ], [ %indvars.iv.next3559, %"consume blur_x2195" ]
  %34427 = add nsw i64 %indvars.iv3558, %307
  %34428 = icmp slt i64 %34427, 1
  %34429 = trunc i64 %34427 to i32
  %34430 = shl nsw i32 %34429, 5
  %34431 = icmp sgt i32 %202, %34430
  %34432 = or i1 %34428, %34431
  br i1 %34432, label %"produce blur_x2193", label %"for blur_y.s0.x.x.rebased2187.consume blur_x2195_crit_edge"

"for blur_y.s0.x.x.rebased2187.consume blur_x2195_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2187"
  %.pre3748 = shl nsw i64 %34427, 5
  br label %"consume blur_x2195"

"end for blur_y.s0.x.x.rebased2188":              ; preds = %"consume blur_x2195", %after_bb2172
  br i1 %308, label %"for blur_y.s0.x.x.rebased2203.preheader", label %"end for blur_y.s0.x.x.rebased2204", !prof !386

"for blur_y.s0.x.x.rebased2203.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2188"
  %34433 = sext i32 %t17781151 to i64
  %34434 = zext i32 %.pre-phi3677 to i64
  %34435 = mul nsw i64 %34434, %353
  %34436 = sub nsw i64 %34435, %302
  %34437 = zext i32 %.pre-phi3673 to i64
  %34438 = mul nsw i64 %34437, %353
  %34439 = sub nsw i64 %34438, %302
  %34440 = zext i32 %.pre-phi3681 to i64
  %34441 = mul nsw i64 %34440, %353
  %34442 = sub nsw i64 %34441, %302
  %34443 = zext i32 %.pre-phi3685 to i64
  %34444 = mul nsw i64 %34443, %353
  %34445 = sub nsw i64 %34444, %302
  %34446 = zext i32 %.pre-phi3689 to i64
  %34447 = mul nsw i64 %34446, %353
  %34448 = sub nsw i64 %34447, %302
  %34449 = zext i32 %.pre-phi3699 to i64
  %34450 = mul nsw i64 %34449, %353
  %34451 = sub nsw i64 %34450, %302
  %34452 = zext i32 %.pre-phi3693 to i64
  %34453 = mul nsw i64 %34452, %353
  %34454 = sub nsw i64 %34453, %302
  %34455 = sext i32 %a393 to i64
  %34456 = add nsw i64 %34455, 25
  %34457 = mul nsw i64 %34456, %350
  %34458 = add nsw i64 %34457, %354
  br label %"for blur_y.s0.x.x.rebased2203"

"produce blur_x2193":                             ; preds = %"for blur_y.s0.x.x.rebased2187"
  %t11522194 = add nsw i32 %503, %34430
  %34459 = sext i32 %t11522194 to i64
  %34460 = getelementptr inbounds i16, i16* %read_input860, i64 %34459
  %34461 = getelementptr inbounds i16, i16* %34460, i64 1
  %34462 = bitcast i16* %34461 to <16 x i16>*
  %34463 = load <16 x i16>, <16 x i16>* %34462, align 2, !tbaa !396
  %34464 = getelementptr inbounds i16, i16* %34460, i64 17
  %34465 = bitcast i16* %34464 to <16 x i16>*
  %34466 = load <16 x i16>, <16 x i16>* %34465, align 2, !tbaa !396
  %34467 = bitcast i16* %34460 to <16 x i16>*
  %34468 = load <16 x i16>, <16 x i16>* %34467, align 2, !tbaa !396
  %34469 = getelementptr inbounds i16, i16* %34460, i64 16
  %34470 = bitcast i16* %34469 to <16 x i16>*
  %34471 = load <16 x i16>, <16 x i16>* %34470, align 2, !tbaa !396
  %34472 = getelementptr inbounds i16, i16* %34460, i64 2
  %34473 = bitcast i16* %34472 to <16 x i16>*
  %34474 = load <16 x i16>, <16 x i16>* %34473, align 2, !tbaa !396
  %34475 = getelementptr inbounds i16, i16* %34460, i64 18
  %34476 = bitcast i16* %34475 to <16 x i16>*
  %34477 = load <16 x i16>, <16 x i16>* %34476, align 2, !tbaa !396
  %34478 = getelementptr inbounds i16, i16* %34460, i64 3
  %34479 = bitcast i16* %34478 to <16 x i16>*
  %34480 = load <16 x i16>, <16 x i16>* %34479, align 2, !tbaa !396
  %34481 = getelementptr inbounds i16, i16* %34460, i64 19
  %34482 = bitcast i16* %34481 to <16 x i16>*
  %34483 = load <16 x i16>, <16 x i16>* %34482, align 2, !tbaa !396
  %34484 = getelementptr inbounds i16, i16* %34460, i64 4
  %34485 = bitcast i16* %34484 to <16 x i16>*
  %34486 = load <16 x i16>, <16 x i16>* %34485, align 2, !tbaa !396
  %34487 = getelementptr inbounds i16, i16* %34460, i64 20
  %34488 = bitcast i16* %34487 to <16 x i16>*
  %34489 = load <16 x i16>, <16 x i16>* %34488, align 2, !tbaa !396
  %34490 = getelementptr inbounds i16, i16* %34460, i64 6
  %34491 = bitcast i16* %34490 to <16 x i16>*
  %34492 = load <16 x i16>, <16 x i16>* %34491, align 2, !tbaa !396
  %34493 = getelementptr inbounds i16, i16* %34460, i64 22
  %34494 = bitcast i16* %34493 to <16 x i16>*
  %34495 = load <16 x i16>, <16 x i16>* %34494, align 2, !tbaa !396
  %34496 = getelementptr inbounds i16, i16* %34460, i64 5
  %34497 = bitcast i16* %34496 to <16 x i16>*
  %34498 = load <16 x i16>, <16 x i16>* %34497, align 2, !tbaa !396
  %34499 = getelementptr inbounds i16, i16* %34460, i64 21
  %34500 = bitcast i16* %34499 to <16 x i16>*
  %34501 = load <16 x i16>, <16 x i16>* %34500, align 2, !tbaa !396
  %34502 = add <16 x i16> %34468, %34463
  %34503 = add <16 x i16> %34502, %34474
  %34504 = add <16 x i16> %34503, %34480
  %34505 = add <16 x i16> %34504, %34486
  %34506 = add <16 x i16> %34505, %34492
  %34507 = add <16 x i16> %34506, %34498
  %34508 = add <16 x i16> %34471, %34466
  %34509 = add <16 x i16> %34508, %34477
  %34510 = add <16 x i16> %34509, %34483
  %34511 = add <16 x i16> %34510, %34489
  %34512 = add <16 x i16> %34511, %34495
  %34513 = add <16 x i16> %34512, %34501
  %34514 = shufflevector <16 x i16> %34507, <16 x i16> %34513, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34515 = udiv <32 x i16> %34514, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %34516 = shufflevector <32 x i16> %34515, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34517 = shl nsw i64 %34427, 5
  %34518 = add nsw i64 %34517, %34240
  %34519 = getelementptr inbounds i16, i16* %blur_x917, i64 %34518
  %34520 = bitcast i16* %34519 to <16 x i16>*
  store <16 x i16> %34516, <16 x i16>* %34520, align 2, !tbaa !399
  %34521 = shufflevector <32 x i16> %34515, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34522 = getelementptr inbounds i16, i16* %34519, i64 16
  %34523 = bitcast i16* %34522 to <16 x i16>*
  store <16 x i16> %34521, <16 x i16>* %34523, align 2, !tbaa !399
  br label %"consume blur_x2195"

"consume blur_x2195":                             ; preds = %"for blur_y.s0.x.x.rebased2187.consume blur_x2195_crit_edge", %"produce blur_x2193"
  %.pre-phi3749 = phi i64 [ %.pre3748, %"for blur_y.s0.x.x.rebased2187.consume blur_x2195_crit_edge" ], [ %34517, %"produce blur_x2193" ]
  %34524 = add nsw i64 %34243, %.pre-phi3749
  %34525 = getelementptr inbounds i16, i16* %blur_x917, i64 %34524
  %34526 = bitcast i16* %34525 to <16 x i16>*
  %34527 = load <16 x i16>, <16 x i16>* %34526, align 2, !tbaa !399
  %34528 = getelementptr inbounds i16, i16* %34525, i64 16
  %34529 = bitcast i16* %34528 to <16 x i16>*
  %34530 = load <16 x i16>, <16 x i16>* %34529, align 2, !tbaa !399
  %34531 = add nsw i64 %34246, %.pre-phi3749
  %34532 = getelementptr inbounds i16, i16* %blur_x917, i64 %34531
  %34533 = bitcast i16* %34532 to <16 x i16>*
  %34534 = load <16 x i16>, <16 x i16>* %34533, align 2, !tbaa !399
  %34535 = getelementptr inbounds i16, i16* %34532, i64 16
  %34536 = bitcast i16* %34535 to <16 x i16>*
  %34537 = load <16 x i16>, <16 x i16>* %34536, align 2, !tbaa !399
  %34538 = add nsw i64 %34249, %.pre-phi3749
  %34539 = getelementptr inbounds i16, i16* %blur_x917, i64 %34538
  %34540 = bitcast i16* %34539 to <16 x i16>*
  %34541 = load <16 x i16>, <16 x i16>* %34540, align 2, !tbaa !399
  %34542 = getelementptr inbounds i16, i16* %34539, i64 16
  %34543 = bitcast i16* %34542 to <16 x i16>*
  %34544 = load <16 x i16>, <16 x i16>* %34543, align 2, !tbaa !399
  %34545 = add nsw i64 %34252, %.pre-phi3749
  %34546 = getelementptr inbounds i16, i16* %blur_x917, i64 %34545
  %34547 = bitcast i16* %34546 to <16 x i16>*
  %34548 = load <16 x i16>, <16 x i16>* %34547, align 2, !tbaa !399
  %34549 = getelementptr inbounds i16, i16* %34546, i64 16
  %34550 = bitcast i16* %34549 to <16 x i16>*
  %34551 = load <16 x i16>, <16 x i16>* %34550, align 2, !tbaa !399
  %34552 = add nsw i64 %34255, %.pre-phi3749
  %34553 = getelementptr inbounds i16, i16* %blur_x917, i64 %34552
  %34554 = bitcast i16* %34553 to <16 x i16>*
  %34555 = load <16 x i16>, <16 x i16>* %34554, align 2, !tbaa !399
  %34556 = getelementptr inbounds i16, i16* %34553, i64 16
  %34557 = bitcast i16* %34556 to <16 x i16>*
  %34558 = load <16 x i16>, <16 x i16>* %34557, align 2, !tbaa !399
  %34559 = add nsw i64 %34258, %.pre-phi3749
  %34560 = getelementptr inbounds i16, i16* %blur_x917, i64 %34559
  %34561 = bitcast i16* %34560 to <16 x i16>*
  %34562 = load <16 x i16>, <16 x i16>* %34561, align 2, !tbaa !399
  %34563 = getelementptr inbounds i16, i16* %34560, i64 16
  %34564 = bitcast i16* %34563 to <16 x i16>*
  %34565 = load <16 x i16>, <16 x i16>* %34564, align 2, !tbaa !399
  %34566 = add nsw i64 %34261, %.pre-phi3749
  %34567 = getelementptr inbounds i16, i16* %blur_x917, i64 %34566
  %34568 = bitcast i16* %34567 to <16 x i16>*
  %34569 = load <16 x i16>, <16 x i16>* %34568, align 2, !tbaa !399
  %34570 = getelementptr inbounds i16, i16* %34567, i64 16
  %34571 = bitcast i16* %34570 to <16 x i16>*
  %34572 = load <16 x i16>, <16 x i16>* %34571, align 2, !tbaa !399
  %34573 = add <16 x i16> %34534, %34527
  %34574 = add <16 x i16> %34573, %34541
  %34575 = add <16 x i16> %34574, %34548
  %34576 = add <16 x i16> %34575, %34555
  %34577 = add <16 x i16> %34576, %34562
  %34578 = add <16 x i16> %34577, %34569
  %34579 = add <16 x i16> %34537, %34530
  %34580 = add <16 x i16> %34579, %34544
  %34581 = add <16 x i16> %34580, %34551
  %34582 = add <16 x i16> %34581, %34558
  %34583 = add <16 x i16> %34582, %34565
  %34584 = add <16 x i16> %34583, %34572
  %34585 = shufflevector <16 x i16> %34578, <16 x i16> %34584, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34586 = udiv <32 x i16> %34585, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %34587 = shufflevector <32 x i16> %34586, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34588 = add nsw i64 %34265, %.pre-phi3749
  %34589 = getelementptr inbounds i16, i16* %267, i64 %34588
  %34590 = bitcast i16* %34589 to <16 x i16>*
  store <16 x i16> %34587, <16 x i16>* %34590, align 2, !tbaa !401
  %34591 = shufflevector <32 x i16> %34586, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34592 = getelementptr inbounds i16, i16* %34589, i64 16
  %34593 = bitcast i16* %34592 to <16 x i16>*
  store <16 x i16> %34591, <16 x i16>* %34593, align 2, !tbaa !401
  %indvars.iv.next3559 = add nuw nsw i64 %indvars.iv3558, 1
  %.not2669 = icmp eq i64 %indvars.iv.next3559, %546
  br i1 %.not2669, label %"end for blur_y.s0.x.x.rebased2188", label %"for blur_y.s0.x.x.rebased2187"

"for blur_y.s0.x.x.rebased2203":                  ; preds = %"for blur_y.s0.x.x.rebased2203.preheader", %"consume blur_x2214"
  %blur_y.s0.x.x.rebased2205 = phi i32 [ %34736, %"consume blur_x2214" ], [ 0, %"for blur_y.s0.x.x.rebased2203.preheader" ]
  %34594 = add nsw i32 %blur_y.s0.x.x.rebased2205, %t1670852
  %a5528 = shl nsw i32 %34594, 5
  %34595 = icmp sgt i32 %t1691, %a5528
  %blur_y.s0.x.v0.base.s2206 = select i1 %34595, i32 %a5528, i32 %t1691
  %34596 = icmp slt i32 %34594, 1
  %34597 = icmp sgt i32 %202, %a5528
  %34598 = or i1 %34596, %34597
  br i1 %34598, label %"produce blur_x2211", label %"consume blur_x2214"

"end for blur_y.s0.x.x.rebased2204":              ; preds = %"consume blur_x2214", %"end for blur_y.s0.x.x.rebased2188"
  br i1 %233, label %"produce blur_x2218", label %after_bb2215

"produce blur_x2211":                             ; preds = %"for blur_y.s0.x.x.rebased2203"
  %34599 = icmp slt i32 %blur_y.s0.x.v0.base.s2206, %202
  %blur_x.s0.x.v1.base.s2212 = select i1 %34599, i32 %blur_y.s0.x.v0.base.s2206, i32 %202
  %t11572213 = add nsw i32 %503, %blur_x.s0.x.v1.base.s2212
  %34600 = sext i32 %t11572213 to i64
  %34601 = getelementptr inbounds i16, i16* %read_input860, i64 %34600
  %34602 = getelementptr inbounds i16, i16* %34601, i64 1
  %34603 = bitcast i16* %34602 to <16 x i16>*
  %34604 = load <16 x i16>, <16 x i16>* %34603, align 2, !tbaa !396
  %34605 = getelementptr inbounds i16, i16* %34601, i64 17
  %34606 = bitcast i16* %34605 to <16 x i16>*
  %34607 = load <16 x i16>, <16 x i16>* %34606, align 2, !tbaa !396
  %34608 = bitcast i16* %34601 to <16 x i16>*
  %34609 = load <16 x i16>, <16 x i16>* %34608, align 2, !tbaa !396
  %34610 = getelementptr inbounds i16, i16* %34601, i64 16
  %34611 = bitcast i16* %34610 to <16 x i16>*
  %34612 = load <16 x i16>, <16 x i16>* %34611, align 2, !tbaa !396
  %34613 = getelementptr inbounds i16, i16* %34601, i64 2
  %34614 = bitcast i16* %34613 to <16 x i16>*
  %34615 = load <16 x i16>, <16 x i16>* %34614, align 2, !tbaa !396
  %34616 = getelementptr inbounds i16, i16* %34601, i64 18
  %34617 = bitcast i16* %34616 to <16 x i16>*
  %34618 = load <16 x i16>, <16 x i16>* %34617, align 2, !tbaa !396
  %34619 = getelementptr inbounds i16, i16* %34601, i64 3
  %34620 = bitcast i16* %34619 to <16 x i16>*
  %34621 = load <16 x i16>, <16 x i16>* %34620, align 2, !tbaa !396
  %34622 = getelementptr inbounds i16, i16* %34601, i64 19
  %34623 = bitcast i16* %34622 to <16 x i16>*
  %34624 = load <16 x i16>, <16 x i16>* %34623, align 2, !tbaa !396
  %34625 = getelementptr inbounds i16, i16* %34601, i64 4
  %34626 = bitcast i16* %34625 to <16 x i16>*
  %34627 = load <16 x i16>, <16 x i16>* %34626, align 2, !tbaa !396
  %34628 = getelementptr inbounds i16, i16* %34601, i64 20
  %34629 = bitcast i16* %34628 to <16 x i16>*
  %34630 = load <16 x i16>, <16 x i16>* %34629, align 2, !tbaa !396
  %34631 = getelementptr inbounds i16, i16* %34601, i64 6
  %34632 = bitcast i16* %34631 to <16 x i16>*
  %34633 = load <16 x i16>, <16 x i16>* %34632, align 2, !tbaa !396
  %34634 = getelementptr inbounds i16, i16* %34601, i64 22
  %34635 = bitcast i16* %34634 to <16 x i16>*
  %34636 = load <16 x i16>, <16 x i16>* %34635, align 2, !tbaa !396
  %34637 = getelementptr inbounds i16, i16* %34601, i64 5
  %34638 = bitcast i16* %34637 to <16 x i16>*
  %34639 = load <16 x i16>, <16 x i16>* %34638, align 2, !tbaa !396
  %34640 = getelementptr inbounds i16, i16* %34601, i64 21
  %34641 = bitcast i16* %34640 to <16 x i16>*
  %34642 = load <16 x i16>, <16 x i16>* %34641, align 2, !tbaa !396
  %34643 = add <16 x i16> %34609, %34604
  %34644 = add <16 x i16> %34643, %34615
  %34645 = add <16 x i16> %34644, %34621
  %34646 = add <16 x i16> %34645, %34627
  %34647 = add <16 x i16> %34646, %34633
  %34648 = add <16 x i16> %34647, %34639
  %34649 = add <16 x i16> %34612, %34607
  %34650 = add <16 x i16> %34649, %34618
  %34651 = add <16 x i16> %34650, %34624
  %34652 = add <16 x i16> %34651, %34630
  %34653 = add <16 x i16> %34652, %34636
  %34654 = add <16 x i16> %34653, %34642
  %34655 = shufflevector <16 x i16> %34648, <16 x i16> %34654, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34656 = udiv <32 x i16> %34655, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %34657 = shufflevector <32 x i16> %34656, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34658 = sext i32 %blur_x.s0.x.v1.base.s2212 to i64
  %34659 = add nsw i64 %34658, %34433
  %34660 = getelementptr inbounds i16, i16* %blur_x917, i64 %34659
  %34661 = bitcast i16* %34660 to <16 x i16>*
  store <16 x i16> %34657, <16 x i16>* %34661, align 2, !tbaa !399
  %34662 = shufflevector <32 x i16> %34656, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34663 = getelementptr inbounds i16, i16* %34660, i64 16
  %34664 = bitcast i16* %34663 to <16 x i16>*
  store <16 x i16> %34662, <16 x i16>* %34664, align 2, !tbaa !399
  br label %"consume blur_x2214"

"consume blur_x2214":                             ; preds = %"for blur_y.s0.x.x.rebased2203", %"produce blur_x2211"
  %34665 = sext i32 %blur_y.s0.x.v0.base.s2206 to i64
  %34666 = add nsw i64 %34436, %34665
  %34667 = getelementptr inbounds i16, i16* %blur_x917, i64 %34666
  %34668 = bitcast i16* %34667 to <16 x i16>*
  %34669 = load <16 x i16>, <16 x i16>* %34668, align 2, !tbaa !399
  %34670 = getelementptr inbounds i16, i16* %34667, i64 16
  %34671 = bitcast i16* %34670 to <16 x i16>*
  %34672 = load <16 x i16>, <16 x i16>* %34671, align 2, !tbaa !399
  %34673 = add nsw i64 %34439, %34665
  %34674 = getelementptr inbounds i16, i16* %blur_x917, i64 %34673
  %34675 = bitcast i16* %34674 to <16 x i16>*
  %34676 = load <16 x i16>, <16 x i16>* %34675, align 2, !tbaa !399
  %34677 = getelementptr inbounds i16, i16* %34674, i64 16
  %34678 = bitcast i16* %34677 to <16 x i16>*
  %34679 = load <16 x i16>, <16 x i16>* %34678, align 2, !tbaa !399
  %34680 = add nsw i64 %34442, %34665
  %34681 = getelementptr inbounds i16, i16* %blur_x917, i64 %34680
  %34682 = bitcast i16* %34681 to <16 x i16>*
  %34683 = load <16 x i16>, <16 x i16>* %34682, align 2, !tbaa !399
  %34684 = getelementptr inbounds i16, i16* %34681, i64 16
  %34685 = bitcast i16* %34684 to <16 x i16>*
  %34686 = load <16 x i16>, <16 x i16>* %34685, align 2, !tbaa !399
  %34687 = add nsw i64 %34445, %34665
  %34688 = getelementptr inbounds i16, i16* %blur_x917, i64 %34687
  %34689 = bitcast i16* %34688 to <16 x i16>*
  %34690 = load <16 x i16>, <16 x i16>* %34689, align 2, !tbaa !399
  %34691 = getelementptr inbounds i16, i16* %34688, i64 16
  %34692 = bitcast i16* %34691 to <16 x i16>*
  %34693 = load <16 x i16>, <16 x i16>* %34692, align 2, !tbaa !399
  %34694 = add nsw i64 %34448, %34665
  %34695 = getelementptr inbounds i16, i16* %blur_x917, i64 %34694
  %34696 = bitcast i16* %34695 to <16 x i16>*
  %34697 = load <16 x i16>, <16 x i16>* %34696, align 2, !tbaa !399
  %34698 = getelementptr inbounds i16, i16* %34695, i64 16
  %34699 = bitcast i16* %34698 to <16 x i16>*
  %34700 = load <16 x i16>, <16 x i16>* %34699, align 2, !tbaa !399
  %34701 = add nsw i64 %34451, %34665
  %34702 = getelementptr inbounds i16, i16* %blur_x917, i64 %34701
  %34703 = bitcast i16* %34702 to <16 x i16>*
  %34704 = load <16 x i16>, <16 x i16>* %34703, align 2, !tbaa !399
  %34705 = getelementptr inbounds i16, i16* %34702, i64 16
  %34706 = bitcast i16* %34705 to <16 x i16>*
  %34707 = load <16 x i16>, <16 x i16>* %34706, align 2, !tbaa !399
  %34708 = add nsw i64 %34454, %34665
  %34709 = getelementptr inbounds i16, i16* %blur_x917, i64 %34708
  %34710 = bitcast i16* %34709 to <16 x i16>*
  %34711 = load <16 x i16>, <16 x i16>* %34710, align 2, !tbaa !399
  %34712 = getelementptr inbounds i16, i16* %34709, i64 16
  %34713 = bitcast i16* %34712 to <16 x i16>*
  %34714 = load <16 x i16>, <16 x i16>* %34713, align 2, !tbaa !399
  %34715 = add <16 x i16> %34676, %34669
  %34716 = add <16 x i16> %34715, %34683
  %34717 = add <16 x i16> %34716, %34690
  %34718 = add <16 x i16> %34717, %34697
  %34719 = add <16 x i16> %34718, %34704
  %34720 = add <16 x i16> %34719, %34711
  %34721 = add <16 x i16> %34679, %34672
  %34722 = add <16 x i16> %34721, %34686
  %34723 = add <16 x i16> %34722, %34693
  %34724 = add <16 x i16> %34723, %34700
  %34725 = add <16 x i16> %34724, %34707
  %34726 = add <16 x i16> %34725, %34714
  %34727 = shufflevector <16 x i16> %34720, <16 x i16> %34726, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34728 = udiv <32 x i16> %34727, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %34729 = shufflevector <32 x i16> %34728, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34730 = add nsw i64 %34458, %34665
  %34731 = getelementptr inbounds i16, i16* %267, i64 %34730
  %34732 = bitcast i16* %34731 to <16 x i16>*
  store <16 x i16> %34729, <16 x i16>* %34732, align 2, !tbaa !401
  %34733 = shufflevector <32 x i16> %34728, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34734 = getelementptr inbounds i16, i16* %34731, i64 16
  %34735 = bitcast i16* %34734 to <16 x i16>*
  store <16 x i16> %34733, <16 x i16>* %34735, align 2, !tbaa !401
  %34736 = add nuw nsw i32 %blur_y.s0.x.x.rebased2205, 1
  %.not2668 = icmp eq i32 %34736, %t1727936
  br i1 %.not2668, label %"end for blur_y.s0.x.x.rebased2204", label %"for blur_y.s0.x.x.rebased2203"

after_bb2215:                                     ; preds = %"end for blur_y.s0.x.x.rebased2204", %"produce blur_x2218"
  br i1 %306, label %"for blur_y.s0.x.x.rebased2230.preheader", label %"end for blur_y.s0.x.x.rebased2231", !prof !386

"for blur_y.s0.x.x.rebased2230.preheader":        ; preds = %after_bb2215
  %34737 = sext i32 %t1726924 to i64
  %34738 = zext i32 %.pre-phi3681 to i64
  %34739 = mul nsw i64 %34738, %353
  %34740 = sub nsw i64 %34739, %302
  %34741 = zext i32 %.pre-phi3677 to i64
  %34742 = mul nsw i64 %34741, %353
  %34743 = sub nsw i64 %34742, %302
  %34744 = zext i32 %.pre-phi3685 to i64
  %34745 = mul nsw i64 %34744, %353
  %34746 = sub nsw i64 %34745, %302
  %34747 = zext i32 %.pre-phi3689 to i64
  %34748 = mul nsw i64 %34747, %353
  %34749 = sub nsw i64 %34748, %302
  %34750 = zext i32 %.pre-phi3693 to i64
  %34751 = mul nsw i64 %34750, %353
  %34752 = sub nsw i64 %34751, %302
  %34753 = zext i32 %.pre-phi3669 to i64
  %34754 = mul nsw i64 %34753, %353
  %34755 = sub nsw i64 %34754, %302
  %34756 = zext i32 %.pre-phi3699 to i64
  %34757 = mul nsw i64 %34756, %353
  %34758 = sub nsw i64 %34757, %302
  %34759 = sext i32 %a393 to i64
  %34760 = add nsw i64 %34759, 26
  %34761 = mul nsw i64 %34760, %350
  %34762 = add nsw i64 %34761, %354
  br label %"for blur_y.s0.x.x.rebased2230"

"produce blur_x2218":                             ; preds = %"end for blur_y.s0.x.x.rebased2204"
  %34763 = getelementptr inbounds i16, i16* %read_input860, i64 %507
  %34764 = getelementptr inbounds i16, i16* %34763, i64 -31
  %34765 = bitcast i16* %34764 to <16 x i16>*
  %34766 = load <16 x i16>, <16 x i16>* %34765, align 2, !tbaa !396
  %34767 = getelementptr inbounds i16, i16* %34763, i64 -15
  %34768 = bitcast i16* %34767 to <16 x i16>*
  %34769 = load <16 x i16>, <16 x i16>* %34768, align 2, !tbaa !396
  %34770 = getelementptr inbounds i16, i16* %34763, i64 -32
  %34771 = bitcast i16* %34770 to <16 x i16>*
  %34772 = load <16 x i16>, <16 x i16>* %34771, align 2, !tbaa !396
  %34773 = getelementptr inbounds i16, i16* %34763, i64 -16
  %34774 = bitcast i16* %34773 to <16 x i16>*
  %34775 = load <16 x i16>, <16 x i16>* %34774, align 2, !tbaa !396
  %34776 = getelementptr inbounds i16, i16* %34763, i64 -30
  %34777 = bitcast i16* %34776 to <16 x i16>*
  %34778 = load <16 x i16>, <16 x i16>* %34777, align 2, !tbaa !396
  %34779 = getelementptr inbounds i16, i16* %34763, i64 -14
  %34780 = bitcast i16* %34779 to <16 x i16>*
  %34781 = load <16 x i16>, <16 x i16>* %34780, align 2, !tbaa !396
  %34782 = getelementptr inbounds i16, i16* %34763, i64 -29
  %34783 = bitcast i16* %34782 to <16 x i16>*
  %34784 = load <16 x i16>, <16 x i16>* %34783, align 2, !tbaa !396
  %34785 = getelementptr inbounds i16, i16* %34763, i64 -13
  %34786 = bitcast i16* %34785 to <16 x i16>*
  %34787 = load <16 x i16>, <16 x i16>* %34786, align 2, !tbaa !396
  %34788 = getelementptr inbounds i16, i16* %34763, i64 -28
  %34789 = bitcast i16* %34788 to <16 x i16>*
  %34790 = load <16 x i16>, <16 x i16>* %34789, align 2, !tbaa !396
  %34791 = getelementptr inbounds i16, i16* %34763, i64 -12
  %34792 = bitcast i16* %34791 to <16 x i16>*
  %34793 = load <16 x i16>, <16 x i16>* %34792, align 2, !tbaa !396
  %34794 = getelementptr inbounds i16, i16* %34763, i64 -26
  %34795 = bitcast i16* %34794 to <16 x i16>*
  %34796 = load <16 x i16>, <16 x i16>* %34795, align 2, !tbaa !396
  %34797 = getelementptr inbounds i16, i16* %34763, i64 -10
  %34798 = bitcast i16* %34797 to <16 x i16>*
  %34799 = load <16 x i16>, <16 x i16>* %34798, align 2, !tbaa !396
  %34800 = getelementptr inbounds i16, i16* %34763, i64 -27
  %34801 = bitcast i16* %34800 to <16 x i16>*
  %34802 = load <16 x i16>, <16 x i16>* %34801, align 2, !tbaa !396
  %34803 = getelementptr inbounds i16, i16* %34763, i64 -11
  %34804 = bitcast i16* %34803 to <16 x i16>*
  %34805 = load <16 x i16>, <16 x i16>* %34804, align 2, !tbaa !396
  %34806 = add <16 x i16> %34772, %34766
  %34807 = add <16 x i16> %34806, %34778
  %34808 = add <16 x i16> %34807, %34784
  %34809 = add <16 x i16> %34808, %34790
  %34810 = add <16 x i16> %34809, %34796
  %34811 = add <16 x i16> %34810, %34802
  %34812 = add <16 x i16> %34775, %34769
  %34813 = add <16 x i16> %34812, %34781
  %34814 = add <16 x i16> %34813, %34787
  %34815 = add <16 x i16> %34814, %34793
  %34816 = add <16 x i16> %34815, %34799
  %34817 = add <16 x i16> %34816, %34805
  %34818 = shufflevector <16 x i16> %34811, <16 x i16> %34817, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34819 = udiv <32 x i16> %34818, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %34820 = shufflevector <32 x i16> %34819, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34821 = zext i32 %.pre-phi3669 to i64
  %34822 = mul nsw i64 %303, %34821
  %34823 = add nsw i64 %305, %34822
  %34824 = getelementptr inbounds i16, i16* %blur_x917, i64 %34823
  %34825 = getelementptr inbounds i16, i16* %34824, i64 -32
  %34826 = bitcast i16* %34825 to <16 x i16>*
  store <16 x i16> %34820, <16 x i16>* %34826, align 2, !tbaa !399
  %34827 = shufflevector <32 x i16> %34819, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34828 = getelementptr inbounds i16, i16* %34824, i64 -16
  %34829 = bitcast i16* %34828 to <16 x i16>*
  store <16 x i16> %34827, <16 x i16>* %34829, align 2, !tbaa !399
  %34830 = zext i32 %.pre-phi3681 to i64
  %34831 = mul nsw i64 %34830, %349
  %34832 = add nsw i64 %34831, %300
  %34833 = getelementptr inbounds i16, i16* %blur_x917, i64 %34832
  %34834 = getelementptr inbounds i16, i16* %34833, i64 -32
  %34835 = bitcast i16* %34834 to <16 x i16>*
  %34836 = load <16 x i16>, <16 x i16>* %34835, align 2, !tbaa !399
  %34837 = getelementptr inbounds i16, i16* %34833, i64 -16
  %34838 = bitcast i16* %34837 to <16 x i16>*
  %34839 = load <16 x i16>, <16 x i16>* %34838, align 2, !tbaa !399
  %34840 = zext i32 %.pre-phi3677 to i64
  %34841 = mul nsw i64 %34840, %349
  %34842 = add nsw i64 %34841, %300
  %34843 = getelementptr inbounds i16, i16* %blur_x917, i64 %34842
  %34844 = getelementptr inbounds i16, i16* %34843, i64 -32
  %34845 = bitcast i16* %34844 to <16 x i16>*
  %34846 = load <16 x i16>, <16 x i16>* %34845, align 2, !tbaa !399
  %34847 = getelementptr inbounds i16, i16* %34843, i64 -16
  %34848 = bitcast i16* %34847 to <16 x i16>*
  %34849 = load <16 x i16>, <16 x i16>* %34848, align 2, !tbaa !399
  %34850 = zext i32 %.pre-phi3685 to i64
  %34851 = mul nsw i64 %34850, %349
  %34852 = add nsw i64 %34851, %300
  %34853 = getelementptr inbounds i16, i16* %blur_x917, i64 %34852
  %34854 = getelementptr inbounds i16, i16* %34853, i64 -32
  %34855 = bitcast i16* %34854 to <16 x i16>*
  %34856 = load <16 x i16>, <16 x i16>* %34855, align 2, !tbaa !399
  %34857 = getelementptr inbounds i16, i16* %34853, i64 -16
  %34858 = bitcast i16* %34857 to <16 x i16>*
  %34859 = load <16 x i16>, <16 x i16>* %34858, align 2, !tbaa !399
  %34860 = zext i32 %.pre-phi3689 to i64
  %34861 = mul nsw i64 %34860, %349
  %34862 = add nsw i64 %34861, %300
  %34863 = getelementptr inbounds i16, i16* %blur_x917, i64 %34862
  %34864 = getelementptr inbounds i16, i16* %34863, i64 -32
  %34865 = bitcast i16* %34864 to <16 x i16>*
  %34866 = load <16 x i16>, <16 x i16>* %34865, align 2, !tbaa !399
  %34867 = getelementptr inbounds i16, i16* %34863, i64 -16
  %34868 = bitcast i16* %34867 to <16 x i16>*
  %34869 = load <16 x i16>, <16 x i16>* %34868, align 2, !tbaa !399
  %34870 = zext i32 %.pre-phi3693 to i64
  %34871 = mul nsw i64 %34870, %349
  %34872 = add nsw i64 %34871, %300
  %34873 = getelementptr inbounds i16, i16* %blur_x917, i64 %34872
  %34874 = getelementptr inbounds i16, i16* %34873, i64 -32
  %34875 = bitcast i16* %34874 to <16 x i16>*
  %34876 = load <16 x i16>, <16 x i16>* %34875, align 2, !tbaa !399
  %34877 = getelementptr inbounds i16, i16* %34873, i64 -16
  %34878 = bitcast i16* %34877 to <16 x i16>*
  %34879 = load <16 x i16>, <16 x i16>* %34878, align 2, !tbaa !399
  %34880 = mul nsw i64 %34821, %349
  %34881 = add nsw i64 %34880, %300
  %34882 = getelementptr inbounds i16, i16* %blur_x917, i64 %34881
  %34883 = getelementptr inbounds i16, i16* %34882, i64 -32
  %34884 = bitcast i16* %34883 to <16 x i16>*
  %34885 = load <16 x i16>, <16 x i16>* %34884, align 2, !tbaa !399
  %34886 = getelementptr inbounds i16, i16* %34882, i64 -16
  %34887 = bitcast i16* %34886 to <16 x i16>*
  %34888 = load <16 x i16>, <16 x i16>* %34887, align 2, !tbaa !399
  %34889 = zext i32 %.pre-phi3699 to i64
  %34890 = mul nsw i64 %34889, %349
  %34891 = add nsw i64 %34890, %300
  %34892 = getelementptr inbounds i16, i16* %blur_x917, i64 %34891
  %34893 = getelementptr inbounds i16, i16* %34892, i64 -32
  %34894 = bitcast i16* %34893 to <16 x i16>*
  %34895 = load <16 x i16>, <16 x i16>* %34894, align 2, !tbaa !399
  %34896 = getelementptr inbounds i16, i16* %34892, i64 -16
  %34897 = bitcast i16* %34896 to <16 x i16>*
  %34898 = load <16 x i16>, <16 x i16>* %34897, align 2, !tbaa !399
  %34899 = add <16 x i16> %34846, %34836
  %34900 = add <16 x i16> %34899, %34856
  %34901 = add <16 x i16> %34900, %34866
  %34902 = add <16 x i16> %34901, %34876
  %34903 = add <16 x i16> %34902, %34885
  %34904 = add <16 x i16> %34903, %34895
  %34905 = add <16 x i16> %34849, %34839
  %34906 = add <16 x i16> %34905, %34859
  %34907 = add <16 x i16> %34906, %34869
  %34908 = add <16 x i16> %34907, %34879
  %34909 = add <16 x i16> %34908, %34888
  %34910 = add <16 x i16> %34909, %34898
  %34911 = shufflevector <16 x i16> %34904, <16 x i16> %34910, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34912 = udiv <32 x i16> %34911, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %34913 = shufflevector <32 x i16> %34912, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34914 = sext i32 %a393 to i64
  %34915 = add nsw i64 %34914, 26
  %34916 = mul nsw i64 %34915, %350
  %34917 = add nsw i64 %352, %34916
  %34918 = getelementptr inbounds i16, i16* %267, i64 %34917
  %34919 = getelementptr inbounds i16, i16* %34918, i64 -32
  %34920 = bitcast i16* %34919 to <16 x i16>*
  store <16 x i16> %34913, <16 x i16>* %34920, align 2, !tbaa !401
  %34921 = shufflevector <32 x i16> %34912, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34922 = getelementptr inbounds i16, i16* %34918, i64 -16
  %34923 = bitcast i16* %34922 to <16 x i16>*
  store <16 x i16> %34921, <16 x i16>* %34923, align 2, !tbaa !401
  br label %after_bb2215

"for blur_y.s0.x.x.rebased2230":                  ; preds = %"for blur_y.s0.x.x.rebased2230.preheader", %"consume blur_x2238"
  %indvars.iv3560 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2230.preheader" ], [ %indvars.iv.next3561, %"consume blur_x2238" ]
  %34924 = add nsw i64 %indvars.iv3560, %307
  %34925 = icmp slt i64 %34924, 1
  %34926 = trunc i64 %34924 to i32
  %34927 = shl nsw i32 %34926, 5
  %34928 = icmp sgt i32 %202, %34927
  %34929 = or i1 %34925, %34928
  br i1 %34929, label %"produce blur_x2236", label %"for blur_y.s0.x.x.rebased2230.consume blur_x2238_crit_edge"

"for blur_y.s0.x.x.rebased2230.consume blur_x2238_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2230"
  %.pre3750 = shl nsw i64 %34924, 5
  br label %"consume blur_x2238"

"end for blur_y.s0.x.x.rebased2231":              ; preds = %"consume blur_x2238", %after_bb2215
  br i1 %308, label %"for blur_y.s0.x.x.rebased2246.preheader", label %"end for blur_y.s0.x.x.rebased2247", !prof !386

"for blur_y.s0.x.x.rebased2246.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2231"
  %34930 = sext i32 %t1726924 to i64
  %34931 = zext i32 %.pre-phi3681 to i64
  %34932 = mul nsw i64 %34931, %353
  %34933 = sub nsw i64 %34932, %302
  %34934 = zext i32 %.pre-phi3677 to i64
  %34935 = mul nsw i64 %34934, %353
  %34936 = sub nsw i64 %34935, %302
  %34937 = zext i32 %.pre-phi3685 to i64
  %34938 = mul nsw i64 %34937, %353
  %34939 = sub nsw i64 %34938, %302
  %34940 = zext i32 %.pre-phi3689 to i64
  %34941 = mul nsw i64 %34940, %353
  %34942 = sub nsw i64 %34941, %302
  %34943 = zext i32 %.pre-phi3693 to i64
  %34944 = mul nsw i64 %34943, %353
  %34945 = sub nsw i64 %34944, %302
  %34946 = zext i32 %.pre-phi3669 to i64
  %34947 = mul nsw i64 %34946, %353
  %34948 = sub nsw i64 %34947, %302
  %34949 = zext i32 %.pre-phi3699 to i64
  %34950 = mul nsw i64 %34949, %353
  %34951 = sub nsw i64 %34950, %302
  %34952 = sext i32 %a393 to i64
  %34953 = add nsw i64 %34952, 26
  %34954 = mul nsw i64 %34953, %350
  %34955 = add nsw i64 %34954, %354
  br label %"for blur_y.s0.x.x.rebased2246"

"produce blur_x2236":                             ; preds = %"for blur_y.s0.x.x.rebased2230"
  %t11682237 = add nsw i32 %509, %34927
  %34956 = sext i32 %t11682237 to i64
  %34957 = getelementptr inbounds i16, i16* %read_input860, i64 %34956
  %34958 = getelementptr inbounds i16, i16* %34957, i64 1
  %34959 = bitcast i16* %34958 to <16 x i16>*
  %34960 = load <16 x i16>, <16 x i16>* %34959, align 2, !tbaa !396
  %34961 = getelementptr inbounds i16, i16* %34957, i64 17
  %34962 = bitcast i16* %34961 to <16 x i16>*
  %34963 = load <16 x i16>, <16 x i16>* %34962, align 2, !tbaa !396
  %34964 = bitcast i16* %34957 to <16 x i16>*
  %34965 = load <16 x i16>, <16 x i16>* %34964, align 2, !tbaa !396
  %34966 = getelementptr inbounds i16, i16* %34957, i64 16
  %34967 = bitcast i16* %34966 to <16 x i16>*
  %34968 = load <16 x i16>, <16 x i16>* %34967, align 2, !tbaa !396
  %34969 = getelementptr inbounds i16, i16* %34957, i64 2
  %34970 = bitcast i16* %34969 to <16 x i16>*
  %34971 = load <16 x i16>, <16 x i16>* %34970, align 2, !tbaa !396
  %34972 = getelementptr inbounds i16, i16* %34957, i64 18
  %34973 = bitcast i16* %34972 to <16 x i16>*
  %34974 = load <16 x i16>, <16 x i16>* %34973, align 2, !tbaa !396
  %34975 = getelementptr inbounds i16, i16* %34957, i64 3
  %34976 = bitcast i16* %34975 to <16 x i16>*
  %34977 = load <16 x i16>, <16 x i16>* %34976, align 2, !tbaa !396
  %34978 = getelementptr inbounds i16, i16* %34957, i64 19
  %34979 = bitcast i16* %34978 to <16 x i16>*
  %34980 = load <16 x i16>, <16 x i16>* %34979, align 2, !tbaa !396
  %34981 = getelementptr inbounds i16, i16* %34957, i64 4
  %34982 = bitcast i16* %34981 to <16 x i16>*
  %34983 = load <16 x i16>, <16 x i16>* %34982, align 2, !tbaa !396
  %34984 = getelementptr inbounds i16, i16* %34957, i64 20
  %34985 = bitcast i16* %34984 to <16 x i16>*
  %34986 = load <16 x i16>, <16 x i16>* %34985, align 2, !tbaa !396
  %34987 = getelementptr inbounds i16, i16* %34957, i64 6
  %34988 = bitcast i16* %34987 to <16 x i16>*
  %34989 = load <16 x i16>, <16 x i16>* %34988, align 2, !tbaa !396
  %34990 = getelementptr inbounds i16, i16* %34957, i64 22
  %34991 = bitcast i16* %34990 to <16 x i16>*
  %34992 = load <16 x i16>, <16 x i16>* %34991, align 2, !tbaa !396
  %34993 = getelementptr inbounds i16, i16* %34957, i64 5
  %34994 = bitcast i16* %34993 to <16 x i16>*
  %34995 = load <16 x i16>, <16 x i16>* %34994, align 2, !tbaa !396
  %34996 = getelementptr inbounds i16, i16* %34957, i64 21
  %34997 = bitcast i16* %34996 to <16 x i16>*
  %34998 = load <16 x i16>, <16 x i16>* %34997, align 2, !tbaa !396
  %34999 = add <16 x i16> %34965, %34960
  %35000 = add <16 x i16> %34999, %34971
  %35001 = add <16 x i16> %35000, %34977
  %35002 = add <16 x i16> %35001, %34983
  %35003 = add <16 x i16> %35002, %34989
  %35004 = add <16 x i16> %35003, %34995
  %35005 = add <16 x i16> %34968, %34963
  %35006 = add <16 x i16> %35005, %34974
  %35007 = add <16 x i16> %35006, %34980
  %35008 = add <16 x i16> %35007, %34986
  %35009 = add <16 x i16> %35008, %34992
  %35010 = add <16 x i16> %35009, %34998
  %35011 = shufflevector <16 x i16> %35004, <16 x i16> %35010, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35012 = udiv <32 x i16> %35011, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %35013 = shufflevector <32 x i16> %35012, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35014 = shl nsw i64 %34924, 5
  %35015 = add nsw i64 %35014, %34737
  %35016 = getelementptr inbounds i16, i16* %blur_x917, i64 %35015
  %35017 = bitcast i16* %35016 to <16 x i16>*
  store <16 x i16> %35013, <16 x i16>* %35017, align 2, !tbaa !399
  %35018 = shufflevector <32 x i16> %35012, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35019 = getelementptr inbounds i16, i16* %35016, i64 16
  %35020 = bitcast i16* %35019 to <16 x i16>*
  store <16 x i16> %35018, <16 x i16>* %35020, align 2, !tbaa !399
  br label %"consume blur_x2238"

"consume blur_x2238":                             ; preds = %"for blur_y.s0.x.x.rebased2230.consume blur_x2238_crit_edge", %"produce blur_x2236"
  %.pre-phi3751 = phi i64 [ %.pre3750, %"for blur_y.s0.x.x.rebased2230.consume blur_x2238_crit_edge" ], [ %35014, %"produce blur_x2236" ]
  %35021 = add nsw i64 %34740, %.pre-phi3751
  %35022 = getelementptr inbounds i16, i16* %blur_x917, i64 %35021
  %35023 = bitcast i16* %35022 to <16 x i16>*
  %35024 = load <16 x i16>, <16 x i16>* %35023, align 2, !tbaa !399
  %35025 = getelementptr inbounds i16, i16* %35022, i64 16
  %35026 = bitcast i16* %35025 to <16 x i16>*
  %35027 = load <16 x i16>, <16 x i16>* %35026, align 2, !tbaa !399
  %35028 = add nsw i64 %34743, %.pre-phi3751
  %35029 = getelementptr inbounds i16, i16* %blur_x917, i64 %35028
  %35030 = bitcast i16* %35029 to <16 x i16>*
  %35031 = load <16 x i16>, <16 x i16>* %35030, align 2, !tbaa !399
  %35032 = getelementptr inbounds i16, i16* %35029, i64 16
  %35033 = bitcast i16* %35032 to <16 x i16>*
  %35034 = load <16 x i16>, <16 x i16>* %35033, align 2, !tbaa !399
  %35035 = add nsw i64 %34746, %.pre-phi3751
  %35036 = getelementptr inbounds i16, i16* %blur_x917, i64 %35035
  %35037 = bitcast i16* %35036 to <16 x i16>*
  %35038 = load <16 x i16>, <16 x i16>* %35037, align 2, !tbaa !399
  %35039 = getelementptr inbounds i16, i16* %35036, i64 16
  %35040 = bitcast i16* %35039 to <16 x i16>*
  %35041 = load <16 x i16>, <16 x i16>* %35040, align 2, !tbaa !399
  %35042 = add nsw i64 %34749, %.pre-phi3751
  %35043 = getelementptr inbounds i16, i16* %blur_x917, i64 %35042
  %35044 = bitcast i16* %35043 to <16 x i16>*
  %35045 = load <16 x i16>, <16 x i16>* %35044, align 2, !tbaa !399
  %35046 = getelementptr inbounds i16, i16* %35043, i64 16
  %35047 = bitcast i16* %35046 to <16 x i16>*
  %35048 = load <16 x i16>, <16 x i16>* %35047, align 2, !tbaa !399
  %35049 = add nsw i64 %34752, %.pre-phi3751
  %35050 = getelementptr inbounds i16, i16* %blur_x917, i64 %35049
  %35051 = bitcast i16* %35050 to <16 x i16>*
  %35052 = load <16 x i16>, <16 x i16>* %35051, align 2, !tbaa !399
  %35053 = getelementptr inbounds i16, i16* %35050, i64 16
  %35054 = bitcast i16* %35053 to <16 x i16>*
  %35055 = load <16 x i16>, <16 x i16>* %35054, align 2, !tbaa !399
  %35056 = add nsw i64 %34755, %.pre-phi3751
  %35057 = getelementptr inbounds i16, i16* %blur_x917, i64 %35056
  %35058 = bitcast i16* %35057 to <16 x i16>*
  %35059 = load <16 x i16>, <16 x i16>* %35058, align 2, !tbaa !399
  %35060 = getelementptr inbounds i16, i16* %35057, i64 16
  %35061 = bitcast i16* %35060 to <16 x i16>*
  %35062 = load <16 x i16>, <16 x i16>* %35061, align 2, !tbaa !399
  %35063 = add nsw i64 %34758, %.pre-phi3751
  %35064 = getelementptr inbounds i16, i16* %blur_x917, i64 %35063
  %35065 = bitcast i16* %35064 to <16 x i16>*
  %35066 = load <16 x i16>, <16 x i16>* %35065, align 2, !tbaa !399
  %35067 = getelementptr inbounds i16, i16* %35064, i64 16
  %35068 = bitcast i16* %35067 to <16 x i16>*
  %35069 = load <16 x i16>, <16 x i16>* %35068, align 2, !tbaa !399
  %35070 = add <16 x i16> %35031, %35024
  %35071 = add <16 x i16> %35070, %35038
  %35072 = add <16 x i16> %35071, %35045
  %35073 = add <16 x i16> %35072, %35052
  %35074 = add <16 x i16> %35073, %35059
  %35075 = add <16 x i16> %35074, %35066
  %35076 = add <16 x i16> %35034, %35027
  %35077 = add <16 x i16> %35076, %35041
  %35078 = add <16 x i16> %35077, %35048
  %35079 = add <16 x i16> %35078, %35055
  %35080 = add <16 x i16> %35079, %35062
  %35081 = add <16 x i16> %35080, %35069
  %35082 = shufflevector <16 x i16> %35075, <16 x i16> %35081, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35083 = udiv <32 x i16> %35082, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %35084 = shufflevector <32 x i16> %35083, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35085 = add nsw i64 %34762, %.pre-phi3751
  %35086 = getelementptr inbounds i16, i16* %267, i64 %35085
  %35087 = bitcast i16* %35086 to <16 x i16>*
  store <16 x i16> %35084, <16 x i16>* %35087, align 2, !tbaa !401
  %35088 = shufflevector <32 x i16> %35083, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35089 = getelementptr inbounds i16, i16* %35086, i64 16
  %35090 = bitcast i16* %35089 to <16 x i16>*
  store <16 x i16> %35088, <16 x i16>* %35090, align 2, !tbaa !401
  %indvars.iv.next3561 = add nuw nsw i64 %indvars.iv3560, 1
  %.not2665 = icmp eq i64 %indvars.iv.next3561, %546
  br i1 %.not2665, label %"end for blur_y.s0.x.x.rebased2231", label %"for blur_y.s0.x.x.rebased2230"

"for blur_y.s0.x.x.rebased2246":                  ; preds = %"for blur_y.s0.x.x.rebased2246.preheader", %"consume blur_x2257"
  %blur_y.s0.x.x.rebased2248 = phi i32 [ %35233, %"consume blur_x2257" ], [ 0, %"for blur_y.s0.x.x.rebased2246.preheader" ]
  %35091 = add nsw i32 %blur_y.s0.x.x.rebased2248, %t1670852
  %a5685 = shl nsw i32 %35091, 5
  %35092 = icmp sgt i32 %t1691, %a5685
  %blur_y.s0.x.v0.base.s2249 = select i1 %35092, i32 %a5685, i32 %t1691
  %35093 = icmp slt i32 %35091, 1
  %35094 = icmp sgt i32 %202, %a5685
  %35095 = or i1 %35093, %35094
  br i1 %35095, label %"produce blur_x2254", label %"consume blur_x2257"

"end for blur_y.s0.x.x.rebased2247":              ; preds = %"consume blur_x2257", %"end for blur_y.s0.x.x.rebased2231"
  br i1 %233, label %"produce blur_x2261", label %after_bb2258

"produce blur_x2254":                             ; preds = %"for blur_y.s0.x.x.rebased2246"
  %35096 = icmp slt i32 %blur_y.s0.x.v0.base.s2249, %202
  %blur_x.s0.x.v1.base.s2255 = select i1 %35096, i32 %blur_y.s0.x.v0.base.s2249, i32 %202
  %t11732256 = add nsw i32 %509, %blur_x.s0.x.v1.base.s2255
  %35097 = sext i32 %t11732256 to i64
  %35098 = getelementptr inbounds i16, i16* %read_input860, i64 %35097
  %35099 = getelementptr inbounds i16, i16* %35098, i64 1
  %35100 = bitcast i16* %35099 to <16 x i16>*
  %35101 = load <16 x i16>, <16 x i16>* %35100, align 2, !tbaa !396
  %35102 = getelementptr inbounds i16, i16* %35098, i64 17
  %35103 = bitcast i16* %35102 to <16 x i16>*
  %35104 = load <16 x i16>, <16 x i16>* %35103, align 2, !tbaa !396
  %35105 = bitcast i16* %35098 to <16 x i16>*
  %35106 = load <16 x i16>, <16 x i16>* %35105, align 2, !tbaa !396
  %35107 = getelementptr inbounds i16, i16* %35098, i64 16
  %35108 = bitcast i16* %35107 to <16 x i16>*
  %35109 = load <16 x i16>, <16 x i16>* %35108, align 2, !tbaa !396
  %35110 = getelementptr inbounds i16, i16* %35098, i64 2
  %35111 = bitcast i16* %35110 to <16 x i16>*
  %35112 = load <16 x i16>, <16 x i16>* %35111, align 2, !tbaa !396
  %35113 = getelementptr inbounds i16, i16* %35098, i64 18
  %35114 = bitcast i16* %35113 to <16 x i16>*
  %35115 = load <16 x i16>, <16 x i16>* %35114, align 2, !tbaa !396
  %35116 = getelementptr inbounds i16, i16* %35098, i64 3
  %35117 = bitcast i16* %35116 to <16 x i16>*
  %35118 = load <16 x i16>, <16 x i16>* %35117, align 2, !tbaa !396
  %35119 = getelementptr inbounds i16, i16* %35098, i64 19
  %35120 = bitcast i16* %35119 to <16 x i16>*
  %35121 = load <16 x i16>, <16 x i16>* %35120, align 2, !tbaa !396
  %35122 = getelementptr inbounds i16, i16* %35098, i64 4
  %35123 = bitcast i16* %35122 to <16 x i16>*
  %35124 = load <16 x i16>, <16 x i16>* %35123, align 2, !tbaa !396
  %35125 = getelementptr inbounds i16, i16* %35098, i64 20
  %35126 = bitcast i16* %35125 to <16 x i16>*
  %35127 = load <16 x i16>, <16 x i16>* %35126, align 2, !tbaa !396
  %35128 = getelementptr inbounds i16, i16* %35098, i64 6
  %35129 = bitcast i16* %35128 to <16 x i16>*
  %35130 = load <16 x i16>, <16 x i16>* %35129, align 2, !tbaa !396
  %35131 = getelementptr inbounds i16, i16* %35098, i64 22
  %35132 = bitcast i16* %35131 to <16 x i16>*
  %35133 = load <16 x i16>, <16 x i16>* %35132, align 2, !tbaa !396
  %35134 = getelementptr inbounds i16, i16* %35098, i64 5
  %35135 = bitcast i16* %35134 to <16 x i16>*
  %35136 = load <16 x i16>, <16 x i16>* %35135, align 2, !tbaa !396
  %35137 = getelementptr inbounds i16, i16* %35098, i64 21
  %35138 = bitcast i16* %35137 to <16 x i16>*
  %35139 = load <16 x i16>, <16 x i16>* %35138, align 2, !tbaa !396
  %35140 = add <16 x i16> %35106, %35101
  %35141 = add <16 x i16> %35140, %35112
  %35142 = add <16 x i16> %35141, %35118
  %35143 = add <16 x i16> %35142, %35124
  %35144 = add <16 x i16> %35143, %35130
  %35145 = add <16 x i16> %35144, %35136
  %35146 = add <16 x i16> %35109, %35104
  %35147 = add <16 x i16> %35146, %35115
  %35148 = add <16 x i16> %35147, %35121
  %35149 = add <16 x i16> %35148, %35127
  %35150 = add <16 x i16> %35149, %35133
  %35151 = add <16 x i16> %35150, %35139
  %35152 = shufflevector <16 x i16> %35145, <16 x i16> %35151, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35153 = udiv <32 x i16> %35152, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %35154 = shufflevector <32 x i16> %35153, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35155 = sext i32 %blur_x.s0.x.v1.base.s2255 to i64
  %35156 = add nsw i64 %35155, %34930
  %35157 = getelementptr inbounds i16, i16* %blur_x917, i64 %35156
  %35158 = bitcast i16* %35157 to <16 x i16>*
  store <16 x i16> %35154, <16 x i16>* %35158, align 2, !tbaa !399
  %35159 = shufflevector <32 x i16> %35153, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35160 = getelementptr inbounds i16, i16* %35157, i64 16
  %35161 = bitcast i16* %35160 to <16 x i16>*
  store <16 x i16> %35159, <16 x i16>* %35161, align 2, !tbaa !399
  br label %"consume blur_x2257"

"consume blur_x2257":                             ; preds = %"for blur_y.s0.x.x.rebased2246", %"produce blur_x2254"
  %35162 = sext i32 %blur_y.s0.x.v0.base.s2249 to i64
  %35163 = add nsw i64 %34933, %35162
  %35164 = getelementptr inbounds i16, i16* %blur_x917, i64 %35163
  %35165 = bitcast i16* %35164 to <16 x i16>*
  %35166 = load <16 x i16>, <16 x i16>* %35165, align 2, !tbaa !399
  %35167 = getelementptr inbounds i16, i16* %35164, i64 16
  %35168 = bitcast i16* %35167 to <16 x i16>*
  %35169 = load <16 x i16>, <16 x i16>* %35168, align 2, !tbaa !399
  %35170 = add nsw i64 %34936, %35162
  %35171 = getelementptr inbounds i16, i16* %blur_x917, i64 %35170
  %35172 = bitcast i16* %35171 to <16 x i16>*
  %35173 = load <16 x i16>, <16 x i16>* %35172, align 2, !tbaa !399
  %35174 = getelementptr inbounds i16, i16* %35171, i64 16
  %35175 = bitcast i16* %35174 to <16 x i16>*
  %35176 = load <16 x i16>, <16 x i16>* %35175, align 2, !tbaa !399
  %35177 = add nsw i64 %34939, %35162
  %35178 = getelementptr inbounds i16, i16* %blur_x917, i64 %35177
  %35179 = bitcast i16* %35178 to <16 x i16>*
  %35180 = load <16 x i16>, <16 x i16>* %35179, align 2, !tbaa !399
  %35181 = getelementptr inbounds i16, i16* %35178, i64 16
  %35182 = bitcast i16* %35181 to <16 x i16>*
  %35183 = load <16 x i16>, <16 x i16>* %35182, align 2, !tbaa !399
  %35184 = add nsw i64 %34942, %35162
  %35185 = getelementptr inbounds i16, i16* %blur_x917, i64 %35184
  %35186 = bitcast i16* %35185 to <16 x i16>*
  %35187 = load <16 x i16>, <16 x i16>* %35186, align 2, !tbaa !399
  %35188 = getelementptr inbounds i16, i16* %35185, i64 16
  %35189 = bitcast i16* %35188 to <16 x i16>*
  %35190 = load <16 x i16>, <16 x i16>* %35189, align 2, !tbaa !399
  %35191 = add nsw i64 %34945, %35162
  %35192 = getelementptr inbounds i16, i16* %blur_x917, i64 %35191
  %35193 = bitcast i16* %35192 to <16 x i16>*
  %35194 = load <16 x i16>, <16 x i16>* %35193, align 2, !tbaa !399
  %35195 = getelementptr inbounds i16, i16* %35192, i64 16
  %35196 = bitcast i16* %35195 to <16 x i16>*
  %35197 = load <16 x i16>, <16 x i16>* %35196, align 2, !tbaa !399
  %35198 = add nsw i64 %34948, %35162
  %35199 = getelementptr inbounds i16, i16* %blur_x917, i64 %35198
  %35200 = bitcast i16* %35199 to <16 x i16>*
  %35201 = load <16 x i16>, <16 x i16>* %35200, align 2, !tbaa !399
  %35202 = getelementptr inbounds i16, i16* %35199, i64 16
  %35203 = bitcast i16* %35202 to <16 x i16>*
  %35204 = load <16 x i16>, <16 x i16>* %35203, align 2, !tbaa !399
  %35205 = add nsw i64 %34951, %35162
  %35206 = getelementptr inbounds i16, i16* %blur_x917, i64 %35205
  %35207 = bitcast i16* %35206 to <16 x i16>*
  %35208 = load <16 x i16>, <16 x i16>* %35207, align 2, !tbaa !399
  %35209 = getelementptr inbounds i16, i16* %35206, i64 16
  %35210 = bitcast i16* %35209 to <16 x i16>*
  %35211 = load <16 x i16>, <16 x i16>* %35210, align 2, !tbaa !399
  %35212 = add <16 x i16> %35173, %35166
  %35213 = add <16 x i16> %35212, %35180
  %35214 = add <16 x i16> %35213, %35187
  %35215 = add <16 x i16> %35214, %35194
  %35216 = add <16 x i16> %35215, %35201
  %35217 = add <16 x i16> %35216, %35208
  %35218 = add <16 x i16> %35176, %35169
  %35219 = add <16 x i16> %35218, %35183
  %35220 = add <16 x i16> %35219, %35190
  %35221 = add <16 x i16> %35220, %35197
  %35222 = add <16 x i16> %35221, %35204
  %35223 = add <16 x i16> %35222, %35211
  %35224 = shufflevector <16 x i16> %35217, <16 x i16> %35223, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35225 = udiv <32 x i16> %35224, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %35226 = shufflevector <32 x i16> %35225, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35227 = add nsw i64 %34955, %35162
  %35228 = getelementptr inbounds i16, i16* %267, i64 %35227
  %35229 = bitcast i16* %35228 to <16 x i16>*
  store <16 x i16> %35226, <16 x i16>* %35229, align 2, !tbaa !401
  %35230 = shufflevector <32 x i16> %35225, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35231 = getelementptr inbounds i16, i16* %35228, i64 16
  %35232 = bitcast i16* %35231 to <16 x i16>*
  store <16 x i16> %35230, <16 x i16>* %35232, align 2, !tbaa !401
  %35233 = add nuw nsw i32 %blur_y.s0.x.x.rebased2248, 1
  %.not2664 = icmp eq i32 %35233, %t1727936
  br i1 %.not2664, label %"end for blur_y.s0.x.x.rebased2247", label %"for blur_y.s0.x.x.rebased2246"

after_bb2258:                                     ; preds = %"end for blur_y.s0.x.x.rebased2247", %"produce blur_x2261"
  br i1 %306, label %"for blur_y.s0.x.x.rebased2273.preheader", label %"end for blur_y.s0.x.x.rebased2274", !prof !386

"for blur_y.s0.x.x.rebased2273.preheader":        ; preds = %after_bb2258
  %35234 = sext i32 %t1732952 to i64
  %35235 = zext i32 %.pre-phi3685 to i64
  %35236 = mul nsw i64 %35235, %353
  %35237 = sub nsw i64 %35236, %302
  %35238 = zext i32 %.pre-phi3681 to i64
  %35239 = mul nsw i64 %35238, %353
  %35240 = sub nsw i64 %35239, %302
  %35241 = zext i32 %.pre-phi3689 to i64
  %35242 = mul nsw i64 %35241, %353
  %35243 = sub nsw i64 %35242, %302
  %35244 = zext i32 %.pre-phi3693 to i64
  %35245 = mul nsw i64 %35244, %353
  %35246 = sub nsw i64 %35245, %302
  %35247 = zext i32 %.pre-phi3699 to i64
  %35248 = mul nsw i64 %35247, %353
  %35249 = sub nsw i64 %35248, %302
  %35250 = zext i32 %.pre-phi3673 to i64
  %35251 = mul nsw i64 %35250, %353
  %35252 = sub nsw i64 %35251, %302
  %35253 = zext i32 %.pre-phi3669 to i64
  %35254 = mul nsw i64 %35253, %353
  %35255 = sub nsw i64 %35254, %302
  %35256 = sext i32 %a393 to i64
  %35257 = add nsw i64 %35256, 27
  %35258 = mul nsw i64 %35257, %350
  %35259 = add nsw i64 %35258, %354
  br label %"for blur_y.s0.x.x.rebased2273"

"produce blur_x2261":                             ; preds = %"end for blur_y.s0.x.x.rebased2247"
  %35260 = getelementptr inbounds i16, i16* %read_input860, i64 %513
  %35261 = getelementptr inbounds i16, i16* %35260, i64 -31
  %35262 = bitcast i16* %35261 to <16 x i16>*
  %35263 = load <16 x i16>, <16 x i16>* %35262, align 2, !tbaa !396
  %35264 = getelementptr inbounds i16, i16* %35260, i64 -15
  %35265 = bitcast i16* %35264 to <16 x i16>*
  %35266 = load <16 x i16>, <16 x i16>* %35265, align 2, !tbaa !396
  %35267 = getelementptr inbounds i16, i16* %35260, i64 -32
  %35268 = bitcast i16* %35267 to <16 x i16>*
  %35269 = load <16 x i16>, <16 x i16>* %35268, align 2, !tbaa !396
  %35270 = getelementptr inbounds i16, i16* %35260, i64 -16
  %35271 = bitcast i16* %35270 to <16 x i16>*
  %35272 = load <16 x i16>, <16 x i16>* %35271, align 2, !tbaa !396
  %35273 = getelementptr inbounds i16, i16* %35260, i64 -30
  %35274 = bitcast i16* %35273 to <16 x i16>*
  %35275 = load <16 x i16>, <16 x i16>* %35274, align 2, !tbaa !396
  %35276 = getelementptr inbounds i16, i16* %35260, i64 -14
  %35277 = bitcast i16* %35276 to <16 x i16>*
  %35278 = load <16 x i16>, <16 x i16>* %35277, align 2, !tbaa !396
  %35279 = getelementptr inbounds i16, i16* %35260, i64 -29
  %35280 = bitcast i16* %35279 to <16 x i16>*
  %35281 = load <16 x i16>, <16 x i16>* %35280, align 2, !tbaa !396
  %35282 = getelementptr inbounds i16, i16* %35260, i64 -13
  %35283 = bitcast i16* %35282 to <16 x i16>*
  %35284 = load <16 x i16>, <16 x i16>* %35283, align 2, !tbaa !396
  %35285 = getelementptr inbounds i16, i16* %35260, i64 -28
  %35286 = bitcast i16* %35285 to <16 x i16>*
  %35287 = load <16 x i16>, <16 x i16>* %35286, align 2, !tbaa !396
  %35288 = getelementptr inbounds i16, i16* %35260, i64 -12
  %35289 = bitcast i16* %35288 to <16 x i16>*
  %35290 = load <16 x i16>, <16 x i16>* %35289, align 2, !tbaa !396
  %35291 = getelementptr inbounds i16, i16* %35260, i64 -26
  %35292 = bitcast i16* %35291 to <16 x i16>*
  %35293 = load <16 x i16>, <16 x i16>* %35292, align 2, !tbaa !396
  %35294 = getelementptr inbounds i16, i16* %35260, i64 -10
  %35295 = bitcast i16* %35294 to <16 x i16>*
  %35296 = load <16 x i16>, <16 x i16>* %35295, align 2, !tbaa !396
  %35297 = getelementptr inbounds i16, i16* %35260, i64 -27
  %35298 = bitcast i16* %35297 to <16 x i16>*
  %35299 = load <16 x i16>, <16 x i16>* %35298, align 2, !tbaa !396
  %35300 = getelementptr inbounds i16, i16* %35260, i64 -11
  %35301 = bitcast i16* %35300 to <16 x i16>*
  %35302 = load <16 x i16>, <16 x i16>* %35301, align 2, !tbaa !396
  %35303 = add <16 x i16> %35269, %35263
  %35304 = add <16 x i16> %35303, %35275
  %35305 = add <16 x i16> %35304, %35281
  %35306 = add <16 x i16> %35305, %35287
  %35307 = add <16 x i16> %35306, %35293
  %35308 = add <16 x i16> %35307, %35299
  %35309 = add <16 x i16> %35272, %35266
  %35310 = add <16 x i16> %35309, %35278
  %35311 = add <16 x i16> %35310, %35284
  %35312 = add <16 x i16> %35311, %35290
  %35313 = add <16 x i16> %35312, %35296
  %35314 = add <16 x i16> %35313, %35302
  %35315 = shufflevector <16 x i16> %35308, <16 x i16> %35314, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35316 = udiv <32 x i16> %35315, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %35317 = shufflevector <32 x i16> %35316, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35318 = zext i32 %.pre-phi3673 to i64
  %35319 = mul nsw i64 %303, %35318
  %35320 = add nsw i64 %305, %35319
  %35321 = getelementptr inbounds i16, i16* %blur_x917, i64 %35320
  %35322 = getelementptr inbounds i16, i16* %35321, i64 -32
  %35323 = bitcast i16* %35322 to <16 x i16>*
  store <16 x i16> %35317, <16 x i16>* %35323, align 2, !tbaa !399
  %35324 = shufflevector <32 x i16> %35316, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35325 = getelementptr inbounds i16, i16* %35321, i64 -16
  %35326 = bitcast i16* %35325 to <16 x i16>*
  store <16 x i16> %35324, <16 x i16>* %35326, align 2, !tbaa !399
  %35327 = zext i32 %.pre-phi3685 to i64
  %35328 = mul nsw i64 %35327, %349
  %35329 = add nsw i64 %35328, %300
  %35330 = getelementptr inbounds i16, i16* %blur_x917, i64 %35329
  %35331 = getelementptr inbounds i16, i16* %35330, i64 -32
  %35332 = bitcast i16* %35331 to <16 x i16>*
  %35333 = load <16 x i16>, <16 x i16>* %35332, align 2, !tbaa !399
  %35334 = getelementptr inbounds i16, i16* %35330, i64 -16
  %35335 = bitcast i16* %35334 to <16 x i16>*
  %35336 = load <16 x i16>, <16 x i16>* %35335, align 2, !tbaa !399
  %35337 = zext i32 %.pre-phi3681 to i64
  %35338 = mul nsw i64 %35337, %349
  %35339 = add nsw i64 %35338, %300
  %35340 = getelementptr inbounds i16, i16* %blur_x917, i64 %35339
  %35341 = getelementptr inbounds i16, i16* %35340, i64 -32
  %35342 = bitcast i16* %35341 to <16 x i16>*
  %35343 = load <16 x i16>, <16 x i16>* %35342, align 2, !tbaa !399
  %35344 = getelementptr inbounds i16, i16* %35340, i64 -16
  %35345 = bitcast i16* %35344 to <16 x i16>*
  %35346 = load <16 x i16>, <16 x i16>* %35345, align 2, !tbaa !399
  %35347 = zext i32 %.pre-phi3689 to i64
  %35348 = mul nsw i64 %35347, %349
  %35349 = add nsw i64 %35348, %300
  %35350 = getelementptr inbounds i16, i16* %blur_x917, i64 %35349
  %35351 = getelementptr inbounds i16, i16* %35350, i64 -32
  %35352 = bitcast i16* %35351 to <16 x i16>*
  %35353 = load <16 x i16>, <16 x i16>* %35352, align 2, !tbaa !399
  %35354 = getelementptr inbounds i16, i16* %35350, i64 -16
  %35355 = bitcast i16* %35354 to <16 x i16>*
  %35356 = load <16 x i16>, <16 x i16>* %35355, align 2, !tbaa !399
  %35357 = zext i32 %.pre-phi3693 to i64
  %35358 = mul nsw i64 %35357, %349
  %35359 = add nsw i64 %35358, %300
  %35360 = getelementptr inbounds i16, i16* %blur_x917, i64 %35359
  %35361 = getelementptr inbounds i16, i16* %35360, i64 -32
  %35362 = bitcast i16* %35361 to <16 x i16>*
  %35363 = load <16 x i16>, <16 x i16>* %35362, align 2, !tbaa !399
  %35364 = getelementptr inbounds i16, i16* %35360, i64 -16
  %35365 = bitcast i16* %35364 to <16 x i16>*
  %35366 = load <16 x i16>, <16 x i16>* %35365, align 2, !tbaa !399
  %35367 = zext i32 %.pre-phi3699 to i64
  %35368 = mul nsw i64 %35367, %349
  %35369 = add nsw i64 %35368, %300
  %35370 = getelementptr inbounds i16, i16* %blur_x917, i64 %35369
  %35371 = getelementptr inbounds i16, i16* %35370, i64 -32
  %35372 = bitcast i16* %35371 to <16 x i16>*
  %35373 = load <16 x i16>, <16 x i16>* %35372, align 2, !tbaa !399
  %35374 = getelementptr inbounds i16, i16* %35370, i64 -16
  %35375 = bitcast i16* %35374 to <16 x i16>*
  %35376 = load <16 x i16>, <16 x i16>* %35375, align 2, !tbaa !399
  %35377 = mul nsw i64 %35318, %349
  %35378 = add nsw i64 %35377, %300
  %35379 = getelementptr inbounds i16, i16* %blur_x917, i64 %35378
  %35380 = getelementptr inbounds i16, i16* %35379, i64 -32
  %35381 = bitcast i16* %35380 to <16 x i16>*
  %35382 = load <16 x i16>, <16 x i16>* %35381, align 2, !tbaa !399
  %35383 = getelementptr inbounds i16, i16* %35379, i64 -16
  %35384 = bitcast i16* %35383 to <16 x i16>*
  %35385 = load <16 x i16>, <16 x i16>* %35384, align 2, !tbaa !399
  %35386 = zext i32 %.pre-phi3669 to i64
  %35387 = mul nsw i64 %35386, %349
  %35388 = add nsw i64 %35387, %300
  %35389 = getelementptr inbounds i16, i16* %blur_x917, i64 %35388
  %35390 = getelementptr inbounds i16, i16* %35389, i64 -32
  %35391 = bitcast i16* %35390 to <16 x i16>*
  %35392 = load <16 x i16>, <16 x i16>* %35391, align 2, !tbaa !399
  %35393 = getelementptr inbounds i16, i16* %35389, i64 -16
  %35394 = bitcast i16* %35393 to <16 x i16>*
  %35395 = load <16 x i16>, <16 x i16>* %35394, align 2, !tbaa !399
  %35396 = add <16 x i16> %35343, %35333
  %35397 = add <16 x i16> %35396, %35353
  %35398 = add <16 x i16> %35397, %35363
  %35399 = add <16 x i16> %35398, %35373
  %35400 = add <16 x i16> %35399, %35382
  %35401 = add <16 x i16> %35400, %35392
  %35402 = add <16 x i16> %35346, %35336
  %35403 = add <16 x i16> %35402, %35356
  %35404 = add <16 x i16> %35403, %35366
  %35405 = add <16 x i16> %35404, %35376
  %35406 = add <16 x i16> %35405, %35385
  %35407 = add <16 x i16> %35406, %35395
  %35408 = shufflevector <16 x i16> %35401, <16 x i16> %35407, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35409 = udiv <32 x i16> %35408, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %35410 = shufflevector <32 x i16> %35409, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35411 = sext i32 %a393 to i64
  %35412 = add nsw i64 %35411, 27
  %35413 = mul nsw i64 %35412, %350
  %35414 = add nsw i64 %352, %35413
  %35415 = getelementptr inbounds i16, i16* %267, i64 %35414
  %35416 = getelementptr inbounds i16, i16* %35415, i64 -32
  %35417 = bitcast i16* %35416 to <16 x i16>*
  store <16 x i16> %35410, <16 x i16>* %35417, align 2, !tbaa !401
  %35418 = shufflevector <32 x i16> %35409, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35419 = getelementptr inbounds i16, i16* %35415, i64 -16
  %35420 = bitcast i16* %35419 to <16 x i16>*
  store <16 x i16> %35418, <16 x i16>* %35420, align 2, !tbaa !401
  br label %after_bb2258

"for blur_y.s0.x.x.rebased2273":                  ; preds = %"for blur_y.s0.x.x.rebased2273.preheader", %"consume blur_x2281"
  %indvars.iv3562 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2273.preheader" ], [ %indvars.iv.next3563, %"consume blur_x2281" ]
  %35421 = add nsw i64 %indvars.iv3562, %307
  %35422 = icmp slt i64 %35421, 1
  %35423 = trunc i64 %35421 to i32
  %35424 = shl nsw i32 %35423, 5
  %35425 = icmp sgt i32 %202, %35424
  %35426 = or i1 %35422, %35425
  br i1 %35426, label %"produce blur_x2279", label %"for blur_y.s0.x.x.rebased2273.consume blur_x2281_crit_edge"

"for blur_y.s0.x.x.rebased2273.consume blur_x2281_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2273"
  %.pre3752 = shl nsw i64 %35421, 5
  br label %"consume blur_x2281"

"end for blur_y.s0.x.x.rebased2274":              ; preds = %"consume blur_x2281", %after_bb2258
  br i1 %308, label %"for blur_y.s0.x.x.rebased2289.preheader", label %"end for blur_y.s0.x.x.rebased2290", !prof !386

"for blur_y.s0.x.x.rebased2289.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2274"
  %35427 = sext i32 %t1732952 to i64
  %35428 = zext i32 %.pre-phi3685 to i64
  %35429 = mul nsw i64 %35428, %353
  %35430 = sub nsw i64 %35429, %302
  %35431 = zext i32 %.pre-phi3681 to i64
  %35432 = mul nsw i64 %35431, %353
  %35433 = sub nsw i64 %35432, %302
  %35434 = zext i32 %.pre-phi3689 to i64
  %35435 = mul nsw i64 %35434, %353
  %35436 = sub nsw i64 %35435, %302
  %35437 = zext i32 %.pre-phi3693 to i64
  %35438 = mul nsw i64 %35437, %353
  %35439 = sub nsw i64 %35438, %302
  %35440 = zext i32 %.pre-phi3699 to i64
  %35441 = mul nsw i64 %35440, %353
  %35442 = sub nsw i64 %35441, %302
  %35443 = zext i32 %.pre-phi3673 to i64
  %35444 = mul nsw i64 %35443, %353
  %35445 = sub nsw i64 %35444, %302
  %35446 = zext i32 %.pre-phi3669 to i64
  %35447 = mul nsw i64 %35446, %353
  %35448 = sub nsw i64 %35447, %302
  %35449 = sext i32 %a393 to i64
  %35450 = add nsw i64 %35449, 27
  %35451 = mul nsw i64 %35450, %350
  %35452 = add nsw i64 %35451, %354
  br label %"for blur_y.s0.x.x.rebased2289"

"produce blur_x2279":                             ; preds = %"for blur_y.s0.x.x.rebased2273"
  %t11842280 = add nsw i32 %515, %35424
  %35453 = sext i32 %t11842280 to i64
  %35454 = getelementptr inbounds i16, i16* %read_input860, i64 %35453
  %35455 = getelementptr inbounds i16, i16* %35454, i64 1
  %35456 = bitcast i16* %35455 to <16 x i16>*
  %35457 = load <16 x i16>, <16 x i16>* %35456, align 2, !tbaa !396
  %35458 = getelementptr inbounds i16, i16* %35454, i64 17
  %35459 = bitcast i16* %35458 to <16 x i16>*
  %35460 = load <16 x i16>, <16 x i16>* %35459, align 2, !tbaa !396
  %35461 = bitcast i16* %35454 to <16 x i16>*
  %35462 = load <16 x i16>, <16 x i16>* %35461, align 2, !tbaa !396
  %35463 = getelementptr inbounds i16, i16* %35454, i64 16
  %35464 = bitcast i16* %35463 to <16 x i16>*
  %35465 = load <16 x i16>, <16 x i16>* %35464, align 2, !tbaa !396
  %35466 = getelementptr inbounds i16, i16* %35454, i64 2
  %35467 = bitcast i16* %35466 to <16 x i16>*
  %35468 = load <16 x i16>, <16 x i16>* %35467, align 2, !tbaa !396
  %35469 = getelementptr inbounds i16, i16* %35454, i64 18
  %35470 = bitcast i16* %35469 to <16 x i16>*
  %35471 = load <16 x i16>, <16 x i16>* %35470, align 2, !tbaa !396
  %35472 = getelementptr inbounds i16, i16* %35454, i64 3
  %35473 = bitcast i16* %35472 to <16 x i16>*
  %35474 = load <16 x i16>, <16 x i16>* %35473, align 2, !tbaa !396
  %35475 = getelementptr inbounds i16, i16* %35454, i64 19
  %35476 = bitcast i16* %35475 to <16 x i16>*
  %35477 = load <16 x i16>, <16 x i16>* %35476, align 2, !tbaa !396
  %35478 = getelementptr inbounds i16, i16* %35454, i64 4
  %35479 = bitcast i16* %35478 to <16 x i16>*
  %35480 = load <16 x i16>, <16 x i16>* %35479, align 2, !tbaa !396
  %35481 = getelementptr inbounds i16, i16* %35454, i64 20
  %35482 = bitcast i16* %35481 to <16 x i16>*
  %35483 = load <16 x i16>, <16 x i16>* %35482, align 2, !tbaa !396
  %35484 = getelementptr inbounds i16, i16* %35454, i64 6
  %35485 = bitcast i16* %35484 to <16 x i16>*
  %35486 = load <16 x i16>, <16 x i16>* %35485, align 2, !tbaa !396
  %35487 = getelementptr inbounds i16, i16* %35454, i64 22
  %35488 = bitcast i16* %35487 to <16 x i16>*
  %35489 = load <16 x i16>, <16 x i16>* %35488, align 2, !tbaa !396
  %35490 = getelementptr inbounds i16, i16* %35454, i64 5
  %35491 = bitcast i16* %35490 to <16 x i16>*
  %35492 = load <16 x i16>, <16 x i16>* %35491, align 2, !tbaa !396
  %35493 = getelementptr inbounds i16, i16* %35454, i64 21
  %35494 = bitcast i16* %35493 to <16 x i16>*
  %35495 = load <16 x i16>, <16 x i16>* %35494, align 2, !tbaa !396
  %35496 = add <16 x i16> %35462, %35457
  %35497 = add <16 x i16> %35496, %35468
  %35498 = add <16 x i16> %35497, %35474
  %35499 = add <16 x i16> %35498, %35480
  %35500 = add <16 x i16> %35499, %35486
  %35501 = add <16 x i16> %35500, %35492
  %35502 = add <16 x i16> %35465, %35460
  %35503 = add <16 x i16> %35502, %35471
  %35504 = add <16 x i16> %35503, %35477
  %35505 = add <16 x i16> %35504, %35483
  %35506 = add <16 x i16> %35505, %35489
  %35507 = add <16 x i16> %35506, %35495
  %35508 = shufflevector <16 x i16> %35501, <16 x i16> %35507, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35509 = udiv <32 x i16> %35508, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %35510 = shufflevector <32 x i16> %35509, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35511 = shl nsw i64 %35421, 5
  %35512 = add nsw i64 %35511, %35234
  %35513 = getelementptr inbounds i16, i16* %blur_x917, i64 %35512
  %35514 = bitcast i16* %35513 to <16 x i16>*
  store <16 x i16> %35510, <16 x i16>* %35514, align 2, !tbaa !399
  %35515 = shufflevector <32 x i16> %35509, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35516 = getelementptr inbounds i16, i16* %35513, i64 16
  %35517 = bitcast i16* %35516 to <16 x i16>*
  store <16 x i16> %35515, <16 x i16>* %35517, align 2, !tbaa !399
  br label %"consume blur_x2281"

"consume blur_x2281":                             ; preds = %"for blur_y.s0.x.x.rebased2273.consume blur_x2281_crit_edge", %"produce blur_x2279"
  %.pre-phi3753 = phi i64 [ %.pre3752, %"for blur_y.s0.x.x.rebased2273.consume blur_x2281_crit_edge" ], [ %35511, %"produce blur_x2279" ]
  %35518 = add nsw i64 %35237, %.pre-phi3753
  %35519 = getelementptr inbounds i16, i16* %blur_x917, i64 %35518
  %35520 = bitcast i16* %35519 to <16 x i16>*
  %35521 = load <16 x i16>, <16 x i16>* %35520, align 2, !tbaa !399
  %35522 = getelementptr inbounds i16, i16* %35519, i64 16
  %35523 = bitcast i16* %35522 to <16 x i16>*
  %35524 = load <16 x i16>, <16 x i16>* %35523, align 2, !tbaa !399
  %35525 = add nsw i64 %35240, %.pre-phi3753
  %35526 = getelementptr inbounds i16, i16* %blur_x917, i64 %35525
  %35527 = bitcast i16* %35526 to <16 x i16>*
  %35528 = load <16 x i16>, <16 x i16>* %35527, align 2, !tbaa !399
  %35529 = getelementptr inbounds i16, i16* %35526, i64 16
  %35530 = bitcast i16* %35529 to <16 x i16>*
  %35531 = load <16 x i16>, <16 x i16>* %35530, align 2, !tbaa !399
  %35532 = add nsw i64 %35243, %.pre-phi3753
  %35533 = getelementptr inbounds i16, i16* %blur_x917, i64 %35532
  %35534 = bitcast i16* %35533 to <16 x i16>*
  %35535 = load <16 x i16>, <16 x i16>* %35534, align 2, !tbaa !399
  %35536 = getelementptr inbounds i16, i16* %35533, i64 16
  %35537 = bitcast i16* %35536 to <16 x i16>*
  %35538 = load <16 x i16>, <16 x i16>* %35537, align 2, !tbaa !399
  %35539 = add nsw i64 %35246, %.pre-phi3753
  %35540 = getelementptr inbounds i16, i16* %blur_x917, i64 %35539
  %35541 = bitcast i16* %35540 to <16 x i16>*
  %35542 = load <16 x i16>, <16 x i16>* %35541, align 2, !tbaa !399
  %35543 = getelementptr inbounds i16, i16* %35540, i64 16
  %35544 = bitcast i16* %35543 to <16 x i16>*
  %35545 = load <16 x i16>, <16 x i16>* %35544, align 2, !tbaa !399
  %35546 = add nsw i64 %35249, %.pre-phi3753
  %35547 = getelementptr inbounds i16, i16* %blur_x917, i64 %35546
  %35548 = bitcast i16* %35547 to <16 x i16>*
  %35549 = load <16 x i16>, <16 x i16>* %35548, align 2, !tbaa !399
  %35550 = getelementptr inbounds i16, i16* %35547, i64 16
  %35551 = bitcast i16* %35550 to <16 x i16>*
  %35552 = load <16 x i16>, <16 x i16>* %35551, align 2, !tbaa !399
  %35553 = add nsw i64 %35252, %.pre-phi3753
  %35554 = getelementptr inbounds i16, i16* %blur_x917, i64 %35553
  %35555 = bitcast i16* %35554 to <16 x i16>*
  %35556 = load <16 x i16>, <16 x i16>* %35555, align 2, !tbaa !399
  %35557 = getelementptr inbounds i16, i16* %35554, i64 16
  %35558 = bitcast i16* %35557 to <16 x i16>*
  %35559 = load <16 x i16>, <16 x i16>* %35558, align 2, !tbaa !399
  %35560 = add nsw i64 %35255, %.pre-phi3753
  %35561 = getelementptr inbounds i16, i16* %blur_x917, i64 %35560
  %35562 = bitcast i16* %35561 to <16 x i16>*
  %35563 = load <16 x i16>, <16 x i16>* %35562, align 2, !tbaa !399
  %35564 = getelementptr inbounds i16, i16* %35561, i64 16
  %35565 = bitcast i16* %35564 to <16 x i16>*
  %35566 = load <16 x i16>, <16 x i16>* %35565, align 2, !tbaa !399
  %35567 = add <16 x i16> %35528, %35521
  %35568 = add <16 x i16> %35567, %35535
  %35569 = add <16 x i16> %35568, %35542
  %35570 = add <16 x i16> %35569, %35549
  %35571 = add <16 x i16> %35570, %35556
  %35572 = add <16 x i16> %35571, %35563
  %35573 = add <16 x i16> %35531, %35524
  %35574 = add <16 x i16> %35573, %35538
  %35575 = add <16 x i16> %35574, %35545
  %35576 = add <16 x i16> %35575, %35552
  %35577 = add <16 x i16> %35576, %35559
  %35578 = add <16 x i16> %35577, %35566
  %35579 = shufflevector <16 x i16> %35572, <16 x i16> %35578, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35580 = udiv <32 x i16> %35579, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %35581 = shufflevector <32 x i16> %35580, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35582 = add nsw i64 %35259, %.pre-phi3753
  %35583 = getelementptr inbounds i16, i16* %267, i64 %35582
  %35584 = bitcast i16* %35583 to <16 x i16>*
  store <16 x i16> %35581, <16 x i16>* %35584, align 2, !tbaa !401
  %35585 = shufflevector <32 x i16> %35580, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35586 = getelementptr inbounds i16, i16* %35583, i64 16
  %35587 = bitcast i16* %35586 to <16 x i16>*
  store <16 x i16> %35585, <16 x i16>* %35587, align 2, !tbaa !401
  %indvars.iv.next3563 = add nuw nsw i64 %indvars.iv3562, 1
  %.not2661 = icmp eq i64 %indvars.iv.next3563, %546
  br i1 %.not2661, label %"end for blur_y.s0.x.x.rebased2274", label %"for blur_y.s0.x.x.rebased2273"

"for blur_y.s0.x.x.rebased2289":                  ; preds = %"for blur_y.s0.x.x.rebased2289.preheader", %"consume blur_x2300"
  %blur_y.s0.x.x.rebased2291 = phi i32 [ %35730, %"consume blur_x2300" ], [ 0, %"for blur_y.s0.x.x.rebased2289.preheader" ]
  %35588 = add nsw i32 %blur_y.s0.x.x.rebased2291, %t1670852
  %a5842 = shl nsw i32 %35588, 5
  %35589 = icmp sgt i32 %t1691, %a5842
  %blur_y.s0.x.v0.base.s2292 = select i1 %35589, i32 %a5842, i32 %t1691
  %35590 = icmp slt i32 %35588, 1
  %35591 = icmp sgt i32 %202, %a5842
  %35592 = or i1 %35590, %35591
  br i1 %35592, label %"produce blur_x2297", label %"consume blur_x2300"

"end for blur_y.s0.x.x.rebased2290":              ; preds = %"consume blur_x2300", %"end for blur_y.s0.x.x.rebased2274"
  br i1 %233, label %"produce blur_x2304", label %after_bb2301

"produce blur_x2297":                             ; preds = %"for blur_y.s0.x.x.rebased2289"
  %35593 = icmp slt i32 %blur_y.s0.x.v0.base.s2292, %202
  %blur_x.s0.x.v1.base.s2298 = select i1 %35593, i32 %blur_y.s0.x.v0.base.s2292, i32 %202
  %t11892299 = add nsw i32 %515, %blur_x.s0.x.v1.base.s2298
  %35594 = sext i32 %t11892299 to i64
  %35595 = getelementptr inbounds i16, i16* %read_input860, i64 %35594
  %35596 = getelementptr inbounds i16, i16* %35595, i64 1
  %35597 = bitcast i16* %35596 to <16 x i16>*
  %35598 = load <16 x i16>, <16 x i16>* %35597, align 2, !tbaa !396
  %35599 = getelementptr inbounds i16, i16* %35595, i64 17
  %35600 = bitcast i16* %35599 to <16 x i16>*
  %35601 = load <16 x i16>, <16 x i16>* %35600, align 2, !tbaa !396
  %35602 = bitcast i16* %35595 to <16 x i16>*
  %35603 = load <16 x i16>, <16 x i16>* %35602, align 2, !tbaa !396
  %35604 = getelementptr inbounds i16, i16* %35595, i64 16
  %35605 = bitcast i16* %35604 to <16 x i16>*
  %35606 = load <16 x i16>, <16 x i16>* %35605, align 2, !tbaa !396
  %35607 = getelementptr inbounds i16, i16* %35595, i64 2
  %35608 = bitcast i16* %35607 to <16 x i16>*
  %35609 = load <16 x i16>, <16 x i16>* %35608, align 2, !tbaa !396
  %35610 = getelementptr inbounds i16, i16* %35595, i64 18
  %35611 = bitcast i16* %35610 to <16 x i16>*
  %35612 = load <16 x i16>, <16 x i16>* %35611, align 2, !tbaa !396
  %35613 = getelementptr inbounds i16, i16* %35595, i64 3
  %35614 = bitcast i16* %35613 to <16 x i16>*
  %35615 = load <16 x i16>, <16 x i16>* %35614, align 2, !tbaa !396
  %35616 = getelementptr inbounds i16, i16* %35595, i64 19
  %35617 = bitcast i16* %35616 to <16 x i16>*
  %35618 = load <16 x i16>, <16 x i16>* %35617, align 2, !tbaa !396
  %35619 = getelementptr inbounds i16, i16* %35595, i64 4
  %35620 = bitcast i16* %35619 to <16 x i16>*
  %35621 = load <16 x i16>, <16 x i16>* %35620, align 2, !tbaa !396
  %35622 = getelementptr inbounds i16, i16* %35595, i64 20
  %35623 = bitcast i16* %35622 to <16 x i16>*
  %35624 = load <16 x i16>, <16 x i16>* %35623, align 2, !tbaa !396
  %35625 = getelementptr inbounds i16, i16* %35595, i64 6
  %35626 = bitcast i16* %35625 to <16 x i16>*
  %35627 = load <16 x i16>, <16 x i16>* %35626, align 2, !tbaa !396
  %35628 = getelementptr inbounds i16, i16* %35595, i64 22
  %35629 = bitcast i16* %35628 to <16 x i16>*
  %35630 = load <16 x i16>, <16 x i16>* %35629, align 2, !tbaa !396
  %35631 = getelementptr inbounds i16, i16* %35595, i64 5
  %35632 = bitcast i16* %35631 to <16 x i16>*
  %35633 = load <16 x i16>, <16 x i16>* %35632, align 2, !tbaa !396
  %35634 = getelementptr inbounds i16, i16* %35595, i64 21
  %35635 = bitcast i16* %35634 to <16 x i16>*
  %35636 = load <16 x i16>, <16 x i16>* %35635, align 2, !tbaa !396
  %35637 = add <16 x i16> %35603, %35598
  %35638 = add <16 x i16> %35637, %35609
  %35639 = add <16 x i16> %35638, %35615
  %35640 = add <16 x i16> %35639, %35621
  %35641 = add <16 x i16> %35640, %35627
  %35642 = add <16 x i16> %35641, %35633
  %35643 = add <16 x i16> %35606, %35601
  %35644 = add <16 x i16> %35643, %35612
  %35645 = add <16 x i16> %35644, %35618
  %35646 = add <16 x i16> %35645, %35624
  %35647 = add <16 x i16> %35646, %35630
  %35648 = add <16 x i16> %35647, %35636
  %35649 = shufflevector <16 x i16> %35642, <16 x i16> %35648, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35650 = udiv <32 x i16> %35649, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %35651 = shufflevector <32 x i16> %35650, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35652 = sext i32 %blur_x.s0.x.v1.base.s2298 to i64
  %35653 = add nsw i64 %35652, %35427
  %35654 = getelementptr inbounds i16, i16* %blur_x917, i64 %35653
  %35655 = bitcast i16* %35654 to <16 x i16>*
  store <16 x i16> %35651, <16 x i16>* %35655, align 2, !tbaa !399
  %35656 = shufflevector <32 x i16> %35650, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35657 = getelementptr inbounds i16, i16* %35654, i64 16
  %35658 = bitcast i16* %35657 to <16 x i16>*
  store <16 x i16> %35656, <16 x i16>* %35658, align 2, !tbaa !399
  br label %"consume blur_x2300"

"consume blur_x2300":                             ; preds = %"for blur_y.s0.x.x.rebased2289", %"produce blur_x2297"
  %35659 = sext i32 %blur_y.s0.x.v0.base.s2292 to i64
  %35660 = add nsw i64 %35430, %35659
  %35661 = getelementptr inbounds i16, i16* %blur_x917, i64 %35660
  %35662 = bitcast i16* %35661 to <16 x i16>*
  %35663 = load <16 x i16>, <16 x i16>* %35662, align 2, !tbaa !399
  %35664 = getelementptr inbounds i16, i16* %35661, i64 16
  %35665 = bitcast i16* %35664 to <16 x i16>*
  %35666 = load <16 x i16>, <16 x i16>* %35665, align 2, !tbaa !399
  %35667 = add nsw i64 %35433, %35659
  %35668 = getelementptr inbounds i16, i16* %blur_x917, i64 %35667
  %35669 = bitcast i16* %35668 to <16 x i16>*
  %35670 = load <16 x i16>, <16 x i16>* %35669, align 2, !tbaa !399
  %35671 = getelementptr inbounds i16, i16* %35668, i64 16
  %35672 = bitcast i16* %35671 to <16 x i16>*
  %35673 = load <16 x i16>, <16 x i16>* %35672, align 2, !tbaa !399
  %35674 = add nsw i64 %35436, %35659
  %35675 = getelementptr inbounds i16, i16* %blur_x917, i64 %35674
  %35676 = bitcast i16* %35675 to <16 x i16>*
  %35677 = load <16 x i16>, <16 x i16>* %35676, align 2, !tbaa !399
  %35678 = getelementptr inbounds i16, i16* %35675, i64 16
  %35679 = bitcast i16* %35678 to <16 x i16>*
  %35680 = load <16 x i16>, <16 x i16>* %35679, align 2, !tbaa !399
  %35681 = add nsw i64 %35439, %35659
  %35682 = getelementptr inbounds i16, i16* %blur_x917, i64 %35681
  %35683 = bitcast i16* %35682 to <16 x i16>*
  %35684 = load <16 x i16>, <16 x i16>* %35683, align 2, !tbaa !399
  %35685 = getelementptr inbounds i16, i16* %35682, i64 16
  %35686 = bitcast i16* %35685 to <16 x i16>*
  %35687 = load <16 x i16>, <16 x i16>* %35686, align 2, !tbaa !399
  %35688 = add nsw i64 %35442, %35659
  %35689 = getelementptr inbounds i16, i16* %blur_x917, i64 %35688
  %35690 = bitcast i16* %35689 to <16 x i16>*
  %35691 = load <16 x i16>, <16 x i16>* %35690, align 2, !tbaa !399
  %35692 = getelementptr inbounds i16, i16* %35689, i64 16
  %35693 = bitcast i16* %35692 to <16 x i16>*
  %35694 = load <16 x i16>, <16 x i16>* %35693, align 2, !tbaa !399
  %35695 = add nsw i64 %35445, %35659
  %35696 = getelementptr inbounds i16, i16* %blur_x917, i64 %35695
  %35697 = bitcast i16* %35696 to <16 x i16>*
  %35698 = load <16 x i16>, <16 x i16>* %35697, align 2, !tbaa !399
  %35699 = getelementptr inbounds i16, i16* %35696, i64 16
  %35700 = bitcast i16* %35699 to <16 x i16>*
  %35701 = load <16 x i16>, <16 x i16>* %35700, align 2, !tbaa !399
  %35702 = add nsw i64 %35448, %35659
  %35703 = getelementptr inbounds i16, i16* %blur_x917, i64 %35702
  %35704 = bitcast i16* %35703 to <16 x i16>*
  %35705 = load <16 x i16>, <16 x i16>* %35704, align 2, !tbaa !399
  %35706 = getelementptr inbounds i16, i16* %35703, i64 16
  %35707 = bitcast i16* %35706 to <16 x i16>*
  %35708 = load <16 x i16>, <16 x i16>* %35707, align 2, !tbaa !399
  %35709 = add <16 x i16> %35670, %35663
  %35710 = add <16 x i16> %35709, %35677
  %35711 = add <16 x i16> %35710, %35684
  %35712 = add <16 x i16> %35711, %35691
  %35713 = add <16 x i16> %35712, %35698
  %35714 = add <16 x i16> %35713, %35705
  %35715 = add <16 x i16> %35673, %35666
  %35716 = add <16 x i16> %35715, %35680
  %35717 = add <16 x i16> %35716, %35687
  %35718 = add <16 x i16> %35717, %35694
  %35719 = add <16 x i16> %35718, %35701
  %35720 = add <16 x i16> %35719, %35708
  %35721 = shufflevector <16 x i16> %35714, <16 x i16> %35720, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35722 = udiv <32 x i16> %35721, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %35723 = shufflevector <32 x i16> %35722, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35724 = add nsw i64 %35452, %35659
  %35725 = getelementptr inbounds i16, i16* %267, i64 %35724
  %35726 = bitcast i16* %35725 to <16 x i16>*
  store <16 x i16> %35723, <16 x i16>* %35726, align 2, !tbaa !401
  %35727 = shufflevector <32 x i16> %35722, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35728 = getelementptr inbounds i16, i16* %35725, i64 16
  %35729 = bitcast i16* %35728 to <16 x i16>*
  store <16 x i16> %35727, <16 x i16>* %35729, align 2, !tbaa !401
  %35730 = add nuw nsw i32 %blur_y.s0.x.x.rebased2291, 1
  %.not2660 = icmp eq i32 %35730, %t1727936
  br i1 %.not2660, label %"end for blur_y.s0.x.x.rebased2290", label %"for blur_y.s0.x.x.rebased2289"

after_bb2301:                                     ; preds = %"end for blur_y.s0.x.x.rebased2290", %"produce blur_x2304"
  br i1 %306, label %"for blur_y.s0.x.x.rebased2316.preheader", label %"end for blur_y.s0.x.x.rebased2317", !prof !386

"for blur_y.s0.x.x.rebased2316.preheader":        ; preds = %after_bb2301
  %35731 = sext i32 %t1738982 to i64
  %35732 = zext i32 %.pre-phi3689 to i64
  %35733 = mul nsw i64 %35732, %353
  %35734 = sub nsw i64 %35733, %302
  %35735 = zext i32 %.pre-phi3685 to i64
  %35736 = mul nsw i64 %35735, %353
  %35737 = sub nsw i64 %35736, %302
  %35738 = zext i32 %.pre-phi3693 to i64
  %35739 = mul nsw i64 %35738, %353
  %35740 = sub nsw i64 %35739, %302
  %35741 = zext i32 %.pre-phi3699 to i64
  %35742 = mul nsw i64 %35741, %353
  %35743 = sub nsw i64 %35742, %302
  %35744 = zext i32 %.pre-phi3669 to i64
  %35745 = mul nsw i64 %35744, %353
  %35746 = sub nsw i64 %35745, %302
  %35747 = zext i32 %.pre-phi3677 to i64
  %35748 = mul nsw i64 %35747, %353
  %35749 = sub nsw i64 %35748, %302
  %35750 = zext i32 %.pre-phi3673 to i64
  %35751 = mul nsw i64 %35750, %353
  %35752 = sub nsw i64 %35751, %302
  %35753 = sext i32 %a393 to i64
  %35754 = add nsw i64 %35753, 28
  %35755 = mul nsw i64 %35754, %350
  %35756 = add nsw i64 %35755, %354
  br label %"for blur_y.s0.x.x.rebased2316"

"produce blur_x2304":                             ; preds = %"end for blur_y.s0.x.x.rebased2290"
  %35757 = getelementptr inbounds i16, i16* %read_input860, i64 %519
  %35758 = getelementptr inbounds i16, i16* %35757, i64 -31
  %35759 = bitcast i16* %35758 to <16 x i16>*
  %35760 = load <16 x i16>, <16 x i16>* %35759, align 2, !tbaa !396
  %35761 = getelementptr inbounds i16, i16* %35757, i64 -15
  %35762 = bitcast i16* %35761 to <16 x i16>*
  %35763 = load <16 x i16>, <16 x i16>* %35762, align 2, !tbaa !396
  %35764 = getelementptr inbounds i16, i16* %35757, i64 -32
  %35765 = bitcast i16* %35764 to <16 x i16>*
  %35766 = load <16 x i16>, <16 x i16>* %35765, align 2, !tbaa !396
  %35767 = getelementptr inbounds i16, i16* %35757, i64 -16
  %35768 = bitcast i16* %35767 to <16 x i16>*
  %35769 = load <16 x i16>, <16 x i16>* %35768, align 2, !tbaa !396
  %35770 = getelementptr inbounds i16, i16* %35757, i64 -30
  %35771 = bitcast i16* %35770 to <16 x i16>*
  %35772 = load <16 x i16>, <16 x i16>* %35771, align 2, !tbaa !396
  %35773 = getelementptr inbounds i16, i16* %35757, i64 -14
  %35774 = bitcast i16* %35773 to <16 x i16>*
  %35775 = load <16 x i16>, <16 x i16>* %35774, align 2, !tbaa !396
  %35776 = getelementptr inbounds i16, i16* %35757, i64 -29
  %35777 = bitcast i16* %35776 to <16 x i16>*
  %35778 = load <16 x i16>, <16 x i16>* %35777, align 2, !tbaa !396
  %35779 = getelementptr inbounds i16, i16* %35757, i64 -13
  %35780 = bitcast i16* %35779 to <16 x i16>*
  %35781 = load <16 x i16>, <16 x i16>* %35780, align 2, !tbaa !396
  %35782 = getelementptr inbounds i16, i16* %35757, i64 -28
  %35783 = bitcast i16* %35782 to <16 x i16>*
  %35784 = load <16 x i16>, <16 x i16>* %35783, align 2, !tbaa !396
  %35785 = getelementptr inbounds i16, i16* %35757, i64 -12
  %35786 = bitcast i16* %35785 to <16 x i16>*
  %35787 = load <16 x i16>, <16 x i16>* %35786, align 2, !tbaa !396
  %35788 = getelementptr inbounds i16, i16* %35757, i64 -26
  %35789 = bitcast i16* %35788 to <16 x i16>*
  %35790 = load <16 x i16>, <16 x i16>* %35789, align 2, !tbaa !396
  %35791 = getelementptr inbounds i16, i16* %35757, i64 -10
  %35792 = bitcast i16* %35791 to <16 x i16>*
  %35793 = load <16 x i16>, <16 x i16>* %35792, align 2, !tbaa !396
  %35794 = getelementptr inbounds i16, i16* %35757, i64 -27
  %35795 = bitcast i16* %35794 to <16 x i16>*
  %35796 = load <16 x i16>, <16 x i16>* %35795, align 2, !tbaa !396
  %35797 = getelementptr inbounds i16, i16* %35757, i64 -11
  %35798 = bitcast i16* %35797 to <16 x i16>*
  %35799 = load <16 x i16>, <16 x i16>* %35798, align 2, !tbaa !396
  %35800 = add <16 x i16> %35766, %35760
  %35801 = add <16 x i16> %35800, %35772
  %35802 = add <16 x i16> %35801, %35778
  %35803 = add <16 x i16> %35802, %35784
  %35804 = add <16 x i16> %35803, %35790
  %35805 = add <16 x i16> %35804, %35796
  %35806 = add <16 x i16> %35769, %35763
  %35807 = add <16 x i16> %35806, %35775
  %35808 = add <16 x i16> %35807, %35781
  %35809 = add <16 x i16> %35808, %35787
  %35810 = add <16 x i16> %35809, %35793
  %35811 = add <16 x i16> %35810, %35799
  %35812 = shufflevector <16 x i16> %35805, <16 x i16> %35811, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35813 = udiv <32 x i16> %35812, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %35814 = shufflevector <32 x i16> %35813, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35815 = zext i32 %.pre-phi3677 to i64
  %35816 = mul nsw i64 %303, %35815
  %35817 = add nsw i64 %305, %35816
  %35818 = getelementptr inbounds i16, i16* %blur_x917, i64 %35817
  %35819 = getelementptr inbounds i16, i16* %35818, i64 -32
  %35820 = bitcast i16* %35819 to <16 x i16>*
  store <16 x i16> %35814, <16 x i16>* %35820, align 2, !tbaa !399
  %35821 = shufflevector <32 x i16> %35813, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35822 = getelementptr inbounds i16, i16* %35818, i64 -16
  %35823 = bitcast i16* %35822 to <16 x i16>*
  store <16 x i16> %35821, <16 x i16>* %35823, align 2, !tbaa !399
  %35824 = zext i32 %.pre-phi3689 to i64
  %35825 = mul nsw i64 %35824, %349
  %35826 = add nsw i64 %35825, %300
  %35827 = getelementptr inbounds i16, i16* %blur_x917, i64 %35826
  %35828 = getelementptr inbounds i16, i16* %35827, i64 -32
  %35829 = bitcast i16* %35828 to <16 x i16>*
  %35830 = load <16 x i16>, <16 x i16>* %35829, align 2, !tbaa !399
  %35831 = getelementptr inbounds i16, i16* %35827, i64 -16
  %35832 = bitcast i16* %35831 to <16 x i16>*
  %35833 = load <16 x i16>, <16 x i16>* %35832, align 2, !tbaa !399
  %35834 = zext i32 %.pre-phi3685 to i64
  %35835 = mul nsw i64 %35834, %349
  %35836 = add nsw i64 %35835, %300
  %35837 = getelementptr inbounds i16, i16* %blur_x917, i64 %35836
  %35838 = getelementptr inbounds i16, i16* %35837, i64 -32
  %35839 = bitcast i16* %35838 to <16 x i16>*
  %35840 = load <16 x i16>, <16 x i16>* %35839, align 2, !tbaa !399
  %35841 = getelementptr inbounds i16, i16* %35837, i64 -16
  %35842 = bitcast i16* %35841 to <16 x i16>*
  %35843 = load <16 x i16>, <16 x i16>* %35842, align 2, !tbaa !399
  %35844 = zext i32 %.pre-phi3693 to i64
  %35845 = mul nsw i64 %35844, %349
  %35846 = add nsw i64 %35845, %300
  %35847 = getelementptr inbounds i16, i16* %blur_x917, i64 %35846
  %35848 = getelementptr inbounds i16, i16* %35847, i64 -32
  %35849 = bitcast i16* %35848 to <16 x i16>*
  %35850 = load <16 x i16>, <16 x i16>* %35849, align 2, !tbaa !399
  %35851 = getelementptr inbounds i16, i16* %35847, i64 -16
  %35852 = bitcast i16* %35851 to <16 x i16>*
  %35853 = load <16 x i16>, <16 x i16>* %35852, align 2, !tbaa !399
  %35854 = zext i32 %.pre-phi3699 to i64
  %35855 = mul nsw i64 %35854, %349
  %35856 = add nsw i64 %35855, %300
  %35857 = getelementptr inbounds i16, i16* %blur_x917, i64 %35856
  %35858 = getelementptr inbounds i16, i16* %35857, i64 -32
  %35859 = bitcast i16* %35858 to <16 x i16>*
  %35860 = load <16 x i16>, <16 x i16>* %35859, align 2, !tbaa !399
  %35861 = getelementptr inbounds i16, i16* %35857, i64 -16
  %35862 = bitcast i16* %35861 to <16 x i16>*
  %35863 = load <16 x i16>, <16 x i16>* %35862, align 2, !tbaa !399
  %35864 = zext i32 %.pre-phi3669 to i64
  %35865 = mul nsw i64 %35864, %349
  %35866 = add nsw i64 %35865, %300
  %35867 = getelementptr inbounds i16, i16* %blur_x917, i64 %35866
  %35868 = getelementptr inbounds i16, i16* %35867, i64 -32
  %35869 = bitcast i16* %35868 to <16 x i16>*
  %35870 = load <16 x i16>, <16 x i16>* %35869, align 2, !tbaa !399
  %35871 = getelementptr inbounds i16, i16* %35867, i64 -16
  %35872 = bitcast i16* %35871 to <16 x i16>*
  %35873 = load <16 x i16>, <16 x i16>* %35872, align 2, !tbaa !399
  %35874 = mul nsw i64 %35815, %349
  %35875 = add nsw i64 %35874, %300
  %35876 = getelementptr inbounds i16, i16* %blur_x917, i64 %35875
  %35877 = getelementptr inbounds i16, i16* %35876, i64 -32
  %35878 = bitcast i16* %35877 to <16 x i16>*
  %35879 = load <16 x i16>, <16 x i16>* %35878, align 2, !tbaa !399
  %35880 = getelementptr inbounds i16, i16* %35876, i64 -16
  %35881 = bitcast i16* %35880 to <16 x i16>*
  %35882 = load <16 x i16>, <16 x i16>* %35881, align 2, !tbaa !399
  %35883 = zext i32 %.pre-phi3673 to i64
  %35884 = mul nsw i64 %35883, %349
  %35885 = add nsw i64 %35884, %300
  %35886 = getelementptr inbounds i16, i16* %blur_x917, i64 %35885
  %35887 = getelementptr inbounds i16, i16* %35886, i64 -32
  %35888 = bitcast i16* %35887 to <16 x i16>*
  %35889 = load <16 x i16>, <16 x i16>* %35888, align 2, !tbaa !399
  %35890 = getelementptr inbounds i16, i16* %35886, i64 -16
  %35891 = bitcast i16* %35890 to <16 x i16>*
  %35892 = load <16 x i16>, <16 x i16>* %35891, align 2, !tbaa !399
  %35893 = add <16 x i16> %35840, %35830
  %35894 = add <16 x i16> %35893, %35850
  %35895 = add <16 x i16> %35894, %35860
  %35896 = add <16 x i16> %35895, %35870
  %35897 = add <16 x i16> %35896, %35879
  %35898 = add <16 x i16> %35897, %35889
  %35899 = add <16 x i16> %35843, %35833
  %35900 = add <16 x i16> %35899, %35853
  %35901 = add <16 x i16> %35900, %35863
  %35902 = add <16 x i16> %35901, %35873
  %35903 = add <16 x i16> %35902, %35882
  %35904 = add <16 x i16> %35903, %35892
  %35905 = shufflevector <16 x i16> %35898, <16 x i16> %35904, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35906 = udiv <32 x i16> %35905, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %35907 = shufflevector <32 x i16> %35906, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35908 = sext i32 %a393 to i64
  %35909 = add nsw i64 %35908, 28
  %35910 = mul nsw i64 %35909, %350
  %35911 = add nsw i64 %352, %35910
  %35912 = getelementptr inbounds i16, i16* %267, i64 %35911
  %35913 = getelementptr inbounds i16, i16* %35912, i64 -32
  %35914 = bitcast i16* %35913 to <16 x i16>*
  store <16 x i16> %35907, <16 x i16>* %35914, align 2, !tbaa !401
  %35915 = shufflevector <32 x i16> %35906, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35916 = getelementptr inbounds i16, i16* %35912, i64 -16
  %35917 = bitcast i16* %35916 to <16 x i16>*
  store <16 x i16> %35915, <16 x i16>* %35917, align 2, !tbaa !401
  br label %after_bb2301

"for blur_y.s0.x.x.rebased2316":                  ; preds = %"for blur_y.s0.x.x.rebased2316.preheader", %"consume blur_x2324"
  %indvars.iv3564 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2316.preheader" ], [ %indvars.iv.next3565, %"consume blur_x2324" ]
  %35918 = add nsw i64 %indvars.iv3564, %307
  %35919 = icmp slt i64 %35918, 1
  %35920 = trunc i64 %35918 to i32
  %35921 = shl nsw i32 %35920, 5
  %35922 = icmp sgt i32 %202, %35921
  %35923 = or i1 %35919, %35922
  br i1 %35923, label %"produce blur_x2322", label %"for blur_y.s0.x.x.rebased2316.consume blur_x2324_crit_edge"

"for blur_y.s0.x.x.rebased2316.consume blur_x2324_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2316"
  %.pre3754 = shl nsw i64 %35918, 5
  br label %"consume blur_x2324"

"end for blur_y.s0.x.x.rebased2317":              ; preds = %"consume blur_x2324", %after_bb2301
  br i1 %308, label %"for blur_y.s0.x.x.rebased2332.preheader", label %"end for blur_y.s0.x.x.rebased2333", !prof !386

"for blur_y.s0.x.x.rebased2332.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2317"
  %35924 = sext i32 %t1738982 to i64
  %35925 = zext i32 %.pre-phi3689 to i64
  %35926 = mul nsw i64 %35925, %353
  %35927 = sub nsw i64 %35926, %302
  %35928 = zext i32 %.pre-phi3685 to i64
  %35929 = mul nsw i64 %35928, %353
  %35930 = sub nsw i64 %35929, %302
  %35931 = zext i32 %.pre-phi3693 to i64
  %35932 = mul nsw i64 %35931, %353
  %35933 = sub nsw i64 %35932, %302
  %35934 = zext i32 %.pre-phi3699 to i64
  %35935 = mul nsw i64 %35934, %353
  %35936 = sub nsw i64 %35935, %302
  %35937 = zext i32 %.pre-phi3669 to i64
  %35938 = mul nsw i64 %35937, %353
  %35939 = sub nsw i64 %35938, %302
  %35940 = zext i32 %.pre-phi3677 to i64
  %35941 = mul nsw i64 %35940, %353
  %35942 = sub nsw i64 %35941, %302
  %35943 = zext i32 %.pre-phi3673 to i64
  %35944 = mul nsw i64 %35943, %353
  %35945 = sub nsw i64 %35944, %302
  %35946 = sext i32 %a393 to i64
  %35947 = add nsw i64 %35946, 28
  %35948 = mul nsw i64 %35947, %350
  %35949 = add nsw i64 %35948, %354
  br label %"for blur_y.s0.x.x.rebased2332"

"produce blur_x2322":                             ; preds = %"for blur_y.s0.x.x.rebased2316"
  %t12002323 = add nsw i32 %521, %35921
  %35950 = sext i32 %t12002323 to i64
  %35951 = getelementptr inbounds i16, i16* %read_input860, i64 %35950
  %35952 = getelementptr inbounds i16, i16* %35951, i64 1
  %35953 = bitcast i16* %35952 to <16 x i16>*
  %35954 = load <16 x i16>, <16 x i16>* %35953, align 2, !tbaa !396
  %35955 = getelementptr inbounds i16, i16* %35951, i64 17
  %35956 = bitcast i16* %35955 to <16 x i16>*
  %35957 = load <16 x i16>, <16 x i16>* %35956, align 2, !tbaa !396
  %35958 = bitcast i16* %35951 to <16 x i16>*
  %35959 = load <16 x i16>, <16 x i16>* %35958, align 2, !tbaa !396
  %35960 = getelementptr inbounds i16, i16* %35951, i64 16
  %35961 = bitcast i16* %35960 to <16 x i16>*
  %35962 = load <16 x i16>, <16 x i16>* %35961, align 2, !tbaa !396
  %35963 = getelementptr inbounds i16, i16* %35951, i64 2
  %35964 = bitcast i16* %35963 to <16 x i16>*
  %35965 = load <16 x i16>, <16 x i16>* %35964, align 2, !tbaa !396
  %35966 = getelementptr inbounds i16, i16* %35951, i64 18
  %35967 = bitcast i16* %35966 to <16 x i16>*
  %35968 = load <16 x i16>, <16 x i16>* %35967, align 2, !tbaa !396
  %35969 = getelementptr inbounds i16, i16* %35951, i64 3
  %35970 = bitcast i16* %35969 to <16 x i16>*
  %35971 = load <16 x i16>, <16 x i16>* %35970, align 2, !tbaa !396
  %35972 = getelementptr inbounds i16, i16* %35951, i64 19
  %35973 = bitcast i16* %35972 to <16 x i16>*
  %35974 = load <16 x i16>, <16 x i16>* %35973, align 2, !tbaa !396
  %35975 = getelementptr inbounds i16, i16* %35951, i64 4
  %35976 = bitcast i16* %35975 to <16 x i16>*
  %35977 = load <16 x i16>, <16 x i16>* %35976, align 2, !tbaa !396
  %35978 = getelementptr inbounds i16, i16* %35951, i64 20
  %35979 = bitcast i16* %35978 to <16 x i16>*
  %35980 = load <16 x i16>, <16 x i16>* %35979, align 2, !tbaa !396
  %35981 = getelementptr inbounds i16, i16* %35951, i64 6
  %35982 = bitcast i16* %35981 to <16 x i16>*
  %35983 = load <16 x i16>, <16 x i16>* %35982, align 2, !tbaa !396
  %35984 = getelementptr inbounds i16, i16* %35951, i64 22
  %35985 = bitcast i16* %35984 to <16 x i16>*
  %35986 = load <16 x i16>, <16 x i16>* %35985, align 2, !tbaa !396
  %35987 = getelementptr inbounds i16, i16* %35951, i64 5
  %35988 = bitcast i16* %35987 to <16 x i16>*
  %35989 = load <16 x i16>, <16 x i16>* %35988, align 2, !tbaa !396
  %35990 = getelementptr inbounds i16, i16* %35951, i64 21
  %35991 = bitcast i16* %35990 to <16 x i16>*
  %35992 = load <16 x i16>, <16 x i16>* %35991, align 2, !tbaa !396
  %35993 = add <16 x i16> %35959, %35954
  %35994 = add <16 x i16> %35993, %35965
  %35995 = add <16 x i16> %35994, %35971
  %35996 = add <16 x i16> %35995, %35977
  %35997 = add <16 x i16> %35996, %35983
  %35998 = add <16 x i16> %35997, %35989
  %35999 = add <16 x i16> %35962, %35957
  %36000 = add <16 x i16> %35999, %35968
  %36001 = add <16 x i16> %36000, %35974
  %36002 = add <16 x i16> %36001, %35980
  %36003 = add <16 x i16> %36002, %35986
  %36004 = add <16 x i16> %36003, %35992
  %36005 = shufflevector <16 x i16> %35998, <16 x i16> %36004, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36006 = udiv <32 x i16> %36005, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %36007 = shufflevector <32 x i16> %36006, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36008 = shl nsw i64 %35918, 5
  %36009 = add nsw i64 %36008, %35731
  %36010 = getelementptr inbounds i16, i16* %blur_x917, i64 %36009
  %36011 = bitcast i16* %36010 to <16 x i16>*
  store <16 x i16> %36007, <16 x i16>* %36011, align 2, !tbaa !399
  %36012 = shufflevector <32 x i16> %36006, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36013 = getelementptr inbounds i16, i16* %36010, i64 16
  %36014 = bitcast i16* %36013 to <16 x i16>*
  store <16 x i16> %36012, <16 x i16>* %36014, align 2, !tbaa !399
  br label %"consume blur_x2324"

"consume blur_x2324":                             ; preds = %"for blur_y.s0.x.x.rebased2316.consume blur_x2324_crit_edge", %"produce blur_x2322"
  %.pre-phi3755 = phi i64 [ %.pre3754, %"for blur_y.s0.x.x.rebased2316.consume blur_x2324_crit_edge" ], [ %36008, %"produce blur_x2322" ]
  %36015 = add nsw i64 %35734, %.pre-phi3755
  %36016 = getelementptr inbounds i16, i16* %blur_x917, i64 %36015
  %36017 = bitcast i16* %36016 to <16 x i16>*
  %36018 = load <16 x i16>, <16 x i16>* %36017, align 2, !tbaa !399
  %36019 = getelementptr inbounds i16, i16* %36016, i64 16
  %36020 = bitcast i16* %36019 to <16 x i16>*
  %36021 = load <16 x i16>, <16 x i16>* %36020, align 2, !tbaa !399
  %36022 = add nsw i64 %35737, %.pre-phi3755
  %36023 = getelementptr inbounds i16, i16* %blur_x917, i64 %36022
  %36024 = bitcast i16* %36023 to <16 x i16>*
  %36025 = load <16 x i16>, <16 x i16>* %36024, align 2, !tbaa !399
  %36026 = getelementptr inbounds i16, i16* %36023, i64 16
  %36027 = bitcast i16* %36026 to <16 x i16>*
  %36028 = load <16 x i16>, <16 x i16>* %36027, align 2, !tbaa !399
  %36029 = add nsw i64 %35740, %.pre-phi3755
  %36030 = getelementptr inbounds i16, i16* %blur_x917, i64 %36029
  %36031 = bitcast i16* %36030 to <16 x i16>*
  %36032 = load <16 x i16>, <16 x i16>* %36031, align 2, !tbaa !399
  %36033 = getelementptr inbounds i16, i16* %36030, i64 16
  %36034 = bitcast i16* %36033 to <16 x i16>*
  %36035 = load <16 x i16>, <16 x i16>* %36034, align 2, !tbaa !399
  %36036 = add nsw i64 %35743, %.pre-phi3755
  %36037 = getelementptr inbounds i16, i16* %blur_x917, i64 %36036
  %36038 = bitcast i16* %36037 to <16 x i16>*
  %36039 = load <16 x i16>, <16 x i16>* %36038, align 2, !tbaa !399
  %36040 = getelementptr inbounds i16, i16* %36037, i64 16
  %36041 = bitcast i16* %36040 to <16 x i16>*
  %36042 = load <16 x i16>, <16 x i16>* %36041, align 2, !tbaa !399
  %36043 = add nsw i64 %35746, %.pre-phi3755
  %36044 = getelementptr inbounds i16, i16* %blur_x917, i64 %36043
  %36045 = bitcast i16* %36044 to <16 x i16>*
  %36046 = load <16 x i16>, <16 x i16>* %36045, align 2, !tbaa !399
  %36047 = getelementptr inbounds i16, i16* %36044, i64 16
  %36048 = bitcast i16* %36047 to <16 x i16>*
  %36049 = load <16 x i16>, <16 x i16>* %36048, align 2, !tbaa !399
  %36050 = add nsw i64 %35749, %.pre-phi3755
  %36051 = getelementptr inbounds i16, i16* %blur_x917, i64 %36050
  %36052 = bitcast i16* %36051 to <16 x i16>*
  %36053 = load <16 x i16>, <16 x i16>* %36052, align 2, !tbaa !399
  %36054 = getelementptr inbounds i16, i16* %36051, i64 16
  %36055 = bitcast i16* %36054 to <16 x i16>*
  %36056 = load <16 x i16>, <16 x i16>* %36055, align 2, !tbaa !399
  %36057 = add nsw i64 %35752, %.pre-phi3755
  %36058 = getelementptr inbounds i16, i16* %blur_x917, i64 %36057
  %36059 = bitcast i16* %36058 to <16 x i16>*
  %36060 = load <16 x i16>, <16 x i16>* %36059, align 2, !tbaa !399
  %36061 = getelementptr inbounds i16, i16* %36058, i64 16
  %36062 = bitcast i16* %36061 to <16 x i16>*
  %36063 = load <16 x i16>, <16 x i16>* %36062, align 2, !tbaa !399
  %36064 = add <16 x i16> %36025, %36018
  %36065 = add <16 x i16> %36064, %36032
  %36066 = add <16 x i16> %36065, %36039
  %36067 = add <16 x i16> %36066, %36046
  %36068 = add <16 x i16> %36067, %36053
  %36069 = add <16 x i16> %36068, %36060
  %36070 = add <16 x i16> %36028, %36021
  %36071 = add <16 x i16> %36070, %36035
  %36072 = add <16 x i16> %36071, %36042
  %36073 = add <16 x i16> %36072, %36049
  %36074 = add <16 x i16> %36073, %36056
  %36075 = add <16 x i16> %36074, %36063
  %36076 = shufflevector <16 x i16> %36069, <16 x i16> %36075, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36077 = udiv <32 x i16> %36076, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %36078 = shufflevector <32 x i16> %36077, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36079 = add nsw i64 %35756, %.pre-phi3755
  %36080 = getelementptr inbounds i16, i16* %267, i64 %36079
  %36081 = bitcast i16* %36080 to <16 x i16>*
  store <16 x i16> %36078, <16 x i16>* %36081, align 2, !tbaa !401
  %36082 = shufflevector <32 x i16> %36077, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36083 = getelementptr inbounds i16, i16* %36080, i64 16
  %36084 = bitcast i16* %36083 to <16 x i16>*
  store <16 x i16> %36082, <16 x i16>* %36084, align 2, !tbaa !401
  %indvars.iv.next3565 = add nuw nsw i64 %indvars.iv3564, 1
  %.not2657 = icmp eq i64 %indvars.iv.next3565, %546
  br i1 %.not2657, label %"end for blur_y.s0.x.x.rebased2317", label %"for blur_y.s0.x.x.rebased2316"

"for blur_y.s0.x.x.rebased2332":                  ; preds = %"for blur_y.s0.x.x.rebased2332.preheader", %"consume blur_x2343"
  %blur_y.s0.x.x.rebased2334 = phi i32 [ %36227, %"consume blur_x2343" ], [ 0, %"for blur_y.s0.x.x.rebased2332.preheader" ]
  %36085 = add nsw i32 %blur_y.s0.x.x.rebased2334, %t1670852
  %a5999 = shl nsw i32 %36085, 5
  %36086 = icmp sgt i32 %t1691, %a5999
  %blur_y.s0.x.v0.base.s2335 = select i1 %36086, i32 %a5999, i32 %t1691
  %36087 = icmp slt i32 %36085, 1
  %36088 = icmp sgt i32 %202, %a5999
  %36089 = or i1 %36087, %36088
  br i1 %36089, label %"produce blur_x2340", label %"consume blur_x2343"

"end for blur_y.s0.x.x.rebased2333":              ; preds = %"consume blur_x2343", %"end for blur_y.s0.x.x.rebased2317"
  br i1 %233, label %"produce blur_x2347", label %after_bb2344

"produce blur_x2340":                             ; preds = %"for blur_y.s0.x.x.rebased2332"
  %36090 = icmp slt i32 %blur_y.s0.x.v0.base.s2335, %202
  %blur_x.s0.x.v1.base.s2341 = select i1 %36090, i32 %blur_y.s0.x.v0.base.s2335, i32 %202
  %t12052342 = add nsw i32 %521, %blur_x.s0.x.v1.base.s2341
  %36091 = sext i32 %t12052342 to i64
  %36092 = getelementptr inbounds i16, i16* %read_input860, i64 %36091
  %36093 = getelementptr inbounds i16, i16* %36092, i64 1
  %36094 = bitcast i16* %36093 to <16 x i16>*
  %36095 = load <16 x i16>, <16 x i16>* %36094, align 2, !tbaa !396
  %36096 = getelementptr inbounds i16, i16* %36092, i64 17
  %36097 = bitcast i16* %36096 to <16 x i16>*
  %36098 = load <16 x i16>, <16 x i16>* %36097, align 2, !tbaa !396
  %36099 = bitcast i16* %36092 to <16 x i16>*
  %36100 = load <16 x i16>, <16 x i16>* %36099, align 2, !tbaa !396
  %36101 = getelementptr inbounds i16, i16* %36092, i64 16
  %36102 = bitcast i16* %36101 to <16 x i16>*
  %36103 = load <16 x i16>, <16 x i16>* %36102, align 2, !tbaa !396
  %36104 = getelementptr inbounds i16, i16* %36092, i64 2
  %36105 = bitcast i16* %36104 to <16 x i16>*
  %36106 = load <16 x i16>, <16 x i16>* %36105, align 2, !tbaa !396
  %36107 = getelementptr inbounds i16, i16* %36092, i64 18
  %36108 = bitcast i16* %36107 to <16 x i16>*
  %36109 = load <16 x i16>, <16 x i16>* %36108, align 2, !tbaa !396
  %36110 = getelementptr inbounds i16, i16* %36092, i64 3
  %36111 = bitcast i16* %36110 to <16 x i16>*
  %36112 = load <16 x i16>, <16 x i16>* %36111, align 2, !tbaa !396
  %36113 = getelementptr inbounds i16, i16* %36092, i64 19
  %36114 = bitcast i16* %36113 to <16 x i16>*
  %36115 = load <16 x i16>, <16 x i16>* %36114, align 2, !tbaa !396
  %36116 = getelementptr inbounds i16, i16* %36092, i64 4
  %36117 = bitcast i16* %36116 to <16 x i16>*
  %36118 = load <16 x i16>, <16 x i16>* %36117, align 2, !tbaa !396
  %36119 = getelementptr inbounds i16, i16* %36092, i64 20
  %36120 = bitcast i16* %36119 to <16 x i16>*
  %36121 = load <16 x i16>, <16 x i16>* %36120, align 2, !tbaa !396
  %36122 = getelementptr inbounds i16, i16* %36092, i64 6
  %36123 = bitcast i16* %36122 to <16 x i16>*
  %36124 = load <16 x i16>, <16 x i16>* %36123, align 2, !tbaa !396
  %36125 = getelementptr inbounds i16, i16* %36092, i64 22
  %36126 = bitcast i16* %36125 to <16 x i16>*
  %36127 = load <16 x i16>, <16 x i16>* %36126, align 2, !tbaa !396
  %36128 = getelementptr inbounds i16, i16* %36092, i64 5
  %36129 = bitcast i16* %36128 to <16 x i16>*
  %36130 = load <16 x i16>, <16 x i16>* %36129, align 2, !tbaa !396
  %36131 = getelementptr inbounds i16, i16* %36092, i64 21
  %36132 = bitcast i16* %36131 to <16 x i16>*
  %36133 = load <16 x i16>, <16 x i16>* %36132, align 2, !tbaa !396
  %36134 = add <16 x i16> %36100, %36095
  %36135 = add <16 x i16> %36134, %36106
  %36136 = add <16 x i16> %36135, %36112
  %36137 = add <16 x i16> %36136, %36118
  %36138 = add <16 x i16> %36137, %36124
  %36139 = add <16 x i16> %36138, %36130
  %36140 = add <16 x i16> %36103, %36098
  %36141 = add <16 x i16> %36140, %36109
  %36142 = add <16 x i16> %36141, %36115
  %36143 = add <16 x i16> %36142, %36121
  %36144 = add <16 x i16> %36143, %36127
  %36145 = add <16 x i16> %36144, %36133
  %36146 = shufflevector <16 x i16> %36139, <16 x i16> %36145, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36147 = udiv <32 x i16> %36146, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %36148 = shufflevector <32 x i16> %36147, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36149 = sext i32 %blur_x.s0.x.v1.base.s2341 to i64
  %36150 = add nsw i64 %36149, %35924
  %36151 = getelementptr inbounds i16, i16* %blur_x917, i64 %36150
  %36152 = bitcast i16* %36151 to <16 x i16>*
  store <16 x i16> %36148, <16 x i16>* %36152, align 2, !tbaa !399
  %36153 = shufflevector <32 x i16> %36147, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36154 = getelementptr inbounds i16, i16* %36151, i64 16
  %36155 = bitcast i16* %36154 to <16 x i16>*
  store <16 x i16> %36153, <16 x i16>* %36155, align 2, !tbaa !399
  br label %"consume blur_x2343"

"consume blur_x2343":                             ; preds = %"for blur_y.s0.x.x.rebased2332", %"produce blur_x2340"
  %36156 = sext i32 %blur_y.s0.x.v0.base.s2335 to i64
  %36157 = add nsw i64 %35927, %36156
  %36158 = getelementptr inbounds i16, i16* %blur_x917, i64 %36157
  %36159 = bitcast i16* %36158 to <16 x i16>*
  %36160 = load <16 x i16>, <16 x i16>* %36159, align 2, !tbaa !399
  %36161 = getelementptr inbounds i16, i16* %36158, i64 16
  %36162 = bitcast i16* %36161 to <16 x i16>*
  %36163 = load <16 x i16>, <16 x i16>* %36162, align 2, !tbaa !399
  %36164 = add nsw i64 %35930, %36156
  %36165 = getelementptr inbounds i16, i16* %blur_x917, i64 %36164
  %36166 = bitcast i16* %36165 to <16 x i16>*
  %36167 = load <16 x i16>, <16 x i16>* %36166, align 2, !tbaa !399
  %36168 = getelementptr inbounds i16, i16* %36165, i64 16
  %36169 = bitcast i16* %36168 to <16 x i16>*
  %36170 = load <16 x i16>, <16 x i16>* %36169, align 2, !tbaa !399
  %36171 = add nsw i64 %35933, %36156
  %36172 = getelementptr inbounds i16, i16* %blur_x917, i64 %36171
  %36173 = bitcast i16* %36172 to <16 x i16>*
  %36174 = load <16 x i16>, <16 x i16>* %36173, align 2, !tbaa !399
  %36175 = getelementptr inbounds i16, i16* %36172, i64 16
  %36176 = bitcast i16* %36175 to <16 x i16>*
  %36177 = load <16 x i16>, <16 x i16>* %36176, align 2, !tbaa !399
  %36178 = add nsw i64 %35936, %36156
  %36179 = getelementptr inbounds i16, i16* %blur_x917, i64 %36178
  %36180 = bitcast i16* %36179 to <16 x i16>*
  %36181 = load <16 x i16>, <16 x i16>* %36180, align 2, !tbaa !399
  %36182 = getelementptr inbounds i16, i16* %36179, i64 16
  %36183 = bitcast i16* %36182 to <16 x i16>*
  %36184 = load <16 x i16>, <16 x i16>* %36183, align 2, !tbaa !399
  %36185 = add nsw i64 %35939, %36156
  %36186 = getelementptr inbounds i16, i16* %blur_x917, i64 %36185
  %36187 = bitcast i16* %36186 to <16 x i16>*
  %36188 = load <16 x i16>, <16 x i16>* %36187, align 2, !tbaa !399
  %36189 = getelementptr inbounds i16, i16* %36186, i64 16
  %36190 = bitcast i16* %36189 to <16 x i16>*
  %36191 = load <16 x i16>, <16 x i16>* %36190, align 2, !tbaa !399
  %36192 = add nsw i64 %35942, %36156
  %36193 = getelementptr inbounds i16, i16* %blur_x917, i64 %36192
  %36194 = bitcast i16* %36193 to <16 x i16>*
  %36195 = load <16 x i16>, <16 x i16>* %36194, align 2, !tbaa !399
  %36196 = getelementptr inbounds i16, i16* %36193, i64 16
  %36197 = bitcast i16* %36196 to <16 x i16>*
  %36198 = load <16 x i16>, <16 x i16>* %36197, align 2, !tbaa !399
  %36199 = add nsw i64 %35945, %36156
  %36200 = getelementptr inbounds i16, i16* %blur_x917, i64 %36199
  %36201 = bitcast i16* %36200 to <16 x i16>*
  %36202 = load <16 x i16>, <16 x i16>* %36201, align 2, !tbaa !399
  %36203 = getelementptr inbounds i16, i16* %36200, i64 16
  %36204 = bitcast i16* %36203 to <16 x i16>*
  %36205 = load <16 x i16>, <16 x i16>* %36204, align 2, !tbaa !399
  %36206 = add <16 x i16> %36167, %36160
  %36207 = add <16 x i16> %36206, %36174
  %36208 = add <16 x i16> %36207, %36181
  %36209 = add <16 x i16> %36208, %36188
  %36210 = add <16 x i16> %36209, %36195
  %36211 = add <16 x i16> %36210, %36202
  %36212 = add <16 x i16> %36170, %36163
  %36213 = add <16 x i16> %36212, %36177
  %36214 = add <16 x i16> %36213, %36184
  %36215 = add <16 x i16> %36214, %36191
  %36216 = add <16 x i16> %36215, %36198
  %36217 = add <16 x i16> %36216, %36205
  %36218 = shufflevector <16 x i16> %36211, <16 x i16> %36217, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36219 = udiv <32 x i16> %36218, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %36220 = shufflevector <32 x i16> %36219, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36221 = add nsw i64 %35949, %36156
  %36222 = getelementptr inbounds i16, i16* %267, i64 %36221
  %36223 = bitcast i16* %36222 to <16 x i16>*
  store <16 x i16> %36220, <16 x i16>* %36223, align 2, !tbaa !401
  %36224 = shufflevector <32 x i16> %36219, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36225 = getelementptr inbounds i16, i16* %36222, i64 16
  %36226 = bitcast i16* %36225 to <16 x i16>*
  store <16 x i16> %36224, <16 x i16>* %36226, align 2, !tbaa !401
  %36227 = add nuw nsw i32 %blur_y.s0.x.x.rebased2334, 1
  %.not2656 = icmp eq i32 %36227, %t1727936
  br i1 %.not2656, label %"end for blur_y.s0.x.x.rebased2333", label %"for blur_y.s0.x.x.rebased2332"

after_bb2344:                                     ; preds = %"end for blur_y.s0.x.x.rebased2333", %"produce blur_x2347"
  br i1 %306, label %"for blur_y.s0.x.x.rebased2359.preheader", label %"end for blur_y.s0.x.x.rebased2360", !prof !386

"for blur_y.s0.x.x.rebased2359.preheader":        ; preds = %after_bb2344
  %36228 = sext i32 %t17441012 to i64
  %36229 = zext i32 %.pre-phi3693 to i64
  %36230 = mul nsw i64 %36229, %353
  %36231 = sub nsw i64 %36230, %302
  %36232 = zext i32 %.pre-phi3689 to i64
  %36233 = mul nsw i64 %36232, %353
  %36234 = sub nsw i64 %36233, %302
  %36235 = zext i32 %.pre-phi3699 to i64
  %36236 = mul nsw i64 %36235, %353
  %36237 = sub nsw i64 %36236, %302
  %36238 = zext i32 %.pre-phi3669 to i64
  %36239 = mul nsw i64 %36238, %353
  %36240 = sub nsw i64 %36239, %302
  %36241 = zext i32 %.pre-phi3673 to i64
  %36242 = mul nsw i64 %36241, %353
  %36243 = sub nsw i64 %36242, %302
  %36244 = zext i32 %.pre-phi3681 to i64
  %36245 = mul nsw i64 %36244, %353
  %36246 = sub nsw i64 %36245, %302
  %36247 = zext i32 %.pre-phi3677 to i64
  %36248 = mul nsw i64 %36247, %353
  %36249 = sub nsw i64 %36248, %302
  %36250 = sext i32 %a393 to i64
  %36251 = add nsw i64 %36250, 29
  %36252 = mul nsw i64 %36251, %350
  %36253 = add nsw i64 %36252, %354
  br label %"for blur_y.s0.x.x.rebased2359"

"produce blur_x2347":                             ; preds = %"end for blur_y.s0.x.x.rebased2333"
  %36254 = getelementptr inbounds i16, i16* %read_input860, i64 %525
  %36255 = getelementptr inbounds i16, i16* %36254, i64 -31
  %36256 = bitcast i16* %36255 to <16 x i16>*
  %36257 = load <16 x i16>, <16 x i16>* %36256, align 2, !tbaa !396
  %36258 = getelementptr inbounds i16, i16* %36254, i64 -15
  %36259 = bitcast i16* %36258 to <16 x i16>*
  %36260 = load <16 x i16>, <16 x i16>* %36259, align 2, !tbaa !396
  %36261 = getelementptr inbounds i16, i16* %36254, i64 -32
  %36262 = bitcast i16* %36261 to <16 x i16>*
  %36263 = load <16 x i16>, <16 x i16>* %36262, align 2, !tbaa !396
  %36264 = getelementptr inbounds i16, i16* %36254, i64 -16
  %36265 = bitcast i16* %36264 to <16 x i16>*
  %36266 = load <16 x i16>, <16 x i16>* %36265, align 2, !tbaa !396
  %36267 = getelementptr inbounds i16, i16* %36254, i64 -30
  %36268 = bitcast i16* %36267 to <16 x i16>*
  %36269 = load <16 x i16>, <16 x i16>* %36268, align 2, !tbaa !396
  %36270 = getelementptr inbounds i16, i16* %36254, i64 -14
  %36271 = bitcast i16* %36270 to <16 x i16>*
  %36272 = load <16 x i16>, <16 x i16>* %36271, align 2, !tbaa !396
  %36273 = getelementptr inbounds i16, i16* %36254, i64 -29
  %36274 = bitcast i16* %36273 to <16 x i16>*
  %36275 = load <16 x i16>, <16 x i16>* %36274, align 2, !tbaa !396
  %36276 = getelementptr inbounds i16, i16* %36254, i64 -13
  %36277 = bitcast i16* %36276 to <16 x i16>*
  %36278 = load <16 x i16>, <16 x i16>* %36277, align 2, !tbaa !396
  %36279 = getelementptr inbounds i16, i16* %36254, i64 -28
  %36280 = bitcast i16* %36279 to <16 x i16>*
  %36281 = load <16 x i16>, <16 x i16>* %36280, align 2, !tbaa !396
  %36282 = getelementptr inbounds i16, i16* %36254, i64 -12
  %36283 = bitcast i16* %36282 to <16 x i16>*
  %36284 = load <16 x i16>, <16 x i16>* %36283, align 2, !tbaa !396
  %36285 = getelementptr inbounds i16, i16* %36254, i64 -26
  %36286 = bitcast i16* %36285 to <16 x i16>*
  %36287 = load <16 x i16>, <16 x i16>* %36286, align 2, !tbaa !396
  %36288 = getelementptr inbounds i16, i16* %36254, i64 -10
  %36289 = bitcast i16* %36288 to <16 x i16>*
  %36290 = load <16 x i16>, <16 x i16>* %36289, align 2, !tbaa !396
  %36291 = getelementptr inbounds i16, i16* %36254, i64 -27
  %36292 = bitcast i16* %36291 to <16 x i16>*
  %36293 = load <16 x i16>, <16 x i16>* %36292, align 2, !tbaa !396
  %36294 = getelementptr inbounds i16, i16* %36254, i64 -11
  %36295 = bitcast i16* %36294 to <16 x i16>*
  %36296 = load <16 x i16>, <16 x i16>* %36295, align 2, !tbaa !396
  %36297 = add <16 x i16> %36263, %36257
  %36298 = add <16 x i16> %36297, %36269
  %36299 = add <16 x i16> %36298, %36275
  %36300 = add <16 x i16> %36299, %36281
  %36301 = add <16 x i16> %36300, %36287
  %36302 = add <16 x i16> %36301, %36293
  %36303 = add <16 x i16> %36266, %36260
  %36304 = add <16 x i16> %36303, %36272
  %36305 = add <16 x i16> %36304, %36278
  %36306 = add <16 x i16> %36305, %36284
  %36307 = add <16 x i16> %36306, %36290
  %36308 = add <16 x i16> %36307, %36296
  %36309 = shufflevector <16 x i16> %36302, <16 x i16> %36308, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36310 = udiv <32 x i16> %36309, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %36311 = shufflevector <32 x i16> %36310, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36312 = zext i32 %.pre-phi3681 to i64
  %36313 = mul nsw i64 %303, %36312
  %36314 = add nsw i64 %305, %36313
  %36315 = getelementptr inbounds i16, i16* %blur_x917, i64 %36314
  %36316 = getelementptr inbounds i16, i16* %36315, i64 -32
  %36317 = bitcast i16* %36316 to <16 x i16>*
  store <16 x i16> %36311, <16 x i16>* %36317, align 2, !tbaa !399
  %36318 = shufflevector <32 x i16> %36310, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36319 = getelementptr inbounds i16, i16* %36315, i64 -16
  %36320 = bitcast i16* %36319 to <16 x i16>*
  store <16 x i16> %36318, <16 x i16>* %36320, align 2, !tbaa !399
  %36321 = zext i32 %.pre-phi3693 to i64
  %36322 = mul nsw i64 %36321, %349
  %36323 = add nsw i64 %36322, %300
  %36324 = getelementptr inbounds i16, i16* %blur_x917, i64 %36323
  %36325 = getelementptr inbounds i16, i16* %36324, i64 -32
  %36326 = bitcast i16* %36325 to <16 x i16>*
  %36327 = load <16 x i16>, <16 x i16>* %36326, align 2, !tbaa !399
  %36328 = getelementptr inbounds i16, i16* %36324, i64 -16
  %36329 = bitcast i16* %36328 to <16 x i16>*
  %36330 = load <16 x i16>, <16 x i16>* %36329, align 2, !tbaa !399
  %36331 = zext i32 %.pre-phi3689 to i64
  %36332 = mul nsw i64 %36331, %349
  %36333 = add nsw i64 %36332, %300
  %36334 = getelementptr inbounds i16, i16* %blur_x917, i64 %36333
  %36335 = getelementptr inbounds i16, i16* %36334, i64 -32
  %36336 = bitcast i16* %36335 to <16 x i16>*
  %36337 = load <16 x i16>, <16 x i16>* %36336, align 2, !tbaa !399
  %36338 = getelementptr inbounds i16, i16* %36334, i64 -16
  %36339 = bitcast i16* %36338 to <16 x i16>*
  %36340 = load <16 x i16>, <16 x i16>* %36339, align 2, !tbaa !399
  %36341 = zext i32 %.pre-phi3699 to i64
  %36342 = mul nsw i64 %36341, %349
  %36343 = add nsw i64 %36342, %300
  %36344 = getelementptr inbounds i16, i16* %blur_x917, i64 %36343
  %36345 = getelementptr inbounds i16, i16* %36344, i64 -32
  %36346 = bitcast i16* %36345 to <16 x i16>*
  %36347 = load <16 x i16>, <16 x i16>* %36346, align 2, !tbaa !399
  %36348 = getelementptr inbounds i16, i16* %36344, i64 -16
  %36349 = bitcast i16* %36348 to <16 x i16>*
  %36350 = load <16 x i16>, <16 x i16>* %36349, align 2, !tbaa !399
  %36351 = zext i32 %.pre-phi3669 to i64
  %36352 = mul nsw i64 %36351, %349
  %36353 = add nsw i64 %36352, %300
  %36354 = getelementptr inbounds i16, i16* %blur_x917, i64 %36353
  %36355 = getelementptr inbounds i16, i16* %36354, i64 -32
  %36356 = bitcast i16* %36355 to <16 x i16>*
  %36357 = load <16 x i16>, <16 x i16>* %36356, align 2, !tbaa !399
  %36358 = getelementptr inbounds i16, i16* %36354, i64 -16
  %36359 = bitcast i16* %36358 to <16 x i16>*
  %36360 = load <16 x i16>, <16 x i16>* %36359, align 2, !tbaa !399
  %36361 = zext i32 %.pre-phi3673 to i64
  %36362 = mul nsw i64 %36361, %349
  %36363 = add nsw i64 %36362, %300
  %36364 = getelementptr inbounds i16, i16* %blur_x917, i64 %36363
  %36365 = getelementptr inbounds i16, i16* %36364, i64 -32
  %36366 = bitcast i16* %36365 to <16 x i16>*
  %36367 = load <16 x i16>, <16 x i16>* %36366, align 2, !tbaa !399
  %36368 = getelementptr inbounds i16, i16* %36364, i64 -16
  %36369 = bitcast i16* %36368 to <16 x i16>*
  %36370 = load <16 x i16>, <16 x i16>* %36369, align 2, !tbaa !399
  %36371 = mul nsw i64 %36312, %349
  %36372 = add nsw i64 %36371, %300
  %36373 = getelementptr inbounds i16, i16* %blur_x917, i64 %36372
  %36374 = getelementptr inbounds i16, i16* %36373, i64 -32
  %36375 = bitcast i16* %36374 to <16 x i16>*
  %36376 = load <16 x i16>, <16 x i16>* %36375, align 2, !tbaa !399
  %36377 = getelementptr inbounds i16, i16* %36373, i64 -16
  %36378 = bitcast i16* %36377 to <16 x i16>*
  %36379 = load <16 x i16>, <16 x i16>* %36378, align 2, !tbaa !399
  %36380 = zext i32 %.pre-phi3677 to i64
  %36381 = mul nsw i64 %36380, %349
  %36382 = add nsw i64 %36381, %300
  %36383 = getelementptr inbounds i16, i16* %blur_x917, i64 %36382
  %36384 = getelementptr inbounds i16, i16* %36383, i64 -32
  %36385 = bitcast i16* %36384 to <16 x i16>*
  %36386 = load <16 x i16>, <16 x i16>* %36385, align 2, !tbaa !399
  %36387 = getelementptr inbounds i16, i16* %36383, i64 -16
  %36388 = bitcast i16* %36387 to <16 x i16>*
  %36389 = load <16 x i16>, <16 x i16>* %36388, align 2, !tbaa !399
  %36390 = add <16 x i16> %36337, %36327
  %36391 = add <16 x i16> %36390, %36347
  %36392 = add <16 x i16> %36391, %36357
  %36393 = add <16 x i16> %36392, %36367
  %36394 = add <16 x i16> %36393, %36376
  %36395 = add <16 x i16> %36394, %36386
  %36396 = add <16 x i16> %36340, %36330
  %36397 = add <16 x i16> %36396, %36350
  %36398 = add <16 x i16> %36397, %36360
  %36399 = add <16 x i16> %36398, %36370
  %36400 = add <16 x i16> %36399, %36379
  %36401 = add <16 x i16> %36400, %36389
  %36402 = shufflevector <16 x i16> %36395, <16 x i16> %36401, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36403 = udiv <32 x i16> %36402, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %36404 = shufflevector <32 x i16> %36403, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36405 = sext i32 %a393 to i64
  %36406 = add nsw i64 %36405, 29
  %36407 = mul nsw i64 %36406, %350
  %36408 = add nsw i64 %352, %36407
  %36409 = getelementptr inbounds i16, i16* %267, i64 %36408
  %36410 = getelementptr inbounds i16, i16* %36409, i64 -32
  %36411 = bitcast i16* %36410 to <16 x i16>*
  store <16 x i16> %36404, <16 x i16>* %36411, align 2, !tbaa !401
  %36412 = shufflevector <32 x i16> %36403, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36413 = getelementptr inbounds i16, i16* %36409, i64 -16
  %36414 = bitcast i16* %36413 to <16 x i16>*
  store <16 x i16> %36412, <16 x i16>* %36414, align 2, !tbaa !401
  br label %after_bb2344

"for blur_y.s0.x.x.rebased2359":                  ; preds = %"for blur_y.s0.x.x.rebased2359.preheader", %"consume blur_x2367"
  %indvars.iv3566 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2359.preheader" ], [ %indvars.iv.next3567, %"consume blur_x2367" ]
  %36415 = add nsw i64 %indvars.iv3566, %307
  %36416 = icmp slt i64 %36415, 1
  %36417 = trunc i64 %36415 to i32
  %36418 = shl nsw i32 %36417, 5
  %36419 = icmp sgt i32 %202, %36418
  %36420 = or i1 %36416, %36419
  br i1 %36420, label %"produce blur_x2365", label %"for blur_y.s0.x.x.rebased2359.consume blur_x2367_crit_edge"

"for blur_y.s0.x.x.rebased2359.consume blur_x2367_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2359"
  %.pre3756 = shl nsw i64 %36415, 5
  br label %"consume blur_x2367"

"end for blur_y.s0.x.x.rebased2360":              ; preds = %"consume blur_x2367", %after_bb2344
  br i1 %308, label %"for blur_y.s0.x.x.rebased2375.preheader", label %"end for blur_y.s0.x.x.rebased2376", !prof !386

"for blur_y.s0.x.x.rebased2375.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2360"
  %36421 = sext i32 %t17441012 to i64
  %36422 = zext i32 %.pre-phi3693 to i64
  %36423 = mul nsw i64 %36422, %353
  %36424 = sub nsw i64 %36423, %302
  %36425 = zext i32 %.pre-phi3689 to i64
  %36426 = mul nsw i64 %36425, %353
  %36427 = sub nsw i64 %36426, %302
  %36428 = zext i32 %.pre-phi3699 to i64
  %36429 = mul nsw i64 %36428, %353
  %36430 = sub nsw i64 %36429, %302
  %36431 = zext i32 %.pre-phi3669 to i64
  %36432 = mul nsw i64 %36431, %353
  %36433 = sub nsw i64 %36432, %302
  %36434 = zext i32 %.pre-phi3673 to i64
  %36435 = mul nsw i64 %36434, %353
  %36436 = sub nsw i64 %36435, %302
  %36437 = zext i32 %.pre-phi3681 to i64
  %36438 = mul nsw i64 %36437, %353
  %36439 = sub nsw i64 %36438, %302
  %36440 = zext i32 %.pre-phi3677 to i64
  %36441 = mul nsw i64 %36440, %353
  %36442 = sub nsw i64 %36441, %302
  %36443 = sext i32 %a393 to i64
  %36444 = add nsw i64 %36443, 29
  %36445 = mul nsw i64 %36444, %350
  %36446 = add nsw i64 %36445, %354
  br label %"for blur_y.s0.x.x.rebased2375"

"produce blur_x2365":                             ; preds = %"for blur_y.s0.x.x.rebased2359"
  %t12162366 = add nsw i32 %527, %36418
  %36447 = sext i32 %t12162366 to i64
  %36448 = getelementptr inbounds i16, i16* %read_input860, i64 %36447
  %36449 = getelementptr inbounds i16, i16* %36448, i64 1
  %36450 = bitcast i16* %36449 to <16 x i16>*
  %36451 = load <16 x i16>, <16 x i16>* %36450, align 2, !tbaa !396
  %36452 = getelementptr inbounds i16, i16* %36448, i64 17
  %36453 = bitcast i16* %36452 to <16 x i16>*
  %36454 = load <16 x i16>, <16 x i16>* %36453, align 2, !tbaa !396
  %36455 = bitcast i16* %36448 to <16 x i16>*
  %36456 = load <16 x i16>, <16 x i16>* %36455, align 2, !tbaa !396
  %36457 = getelementptr inbounds i16, i16* %36448, i64 16
  %36458 = bitcast i16* %36457 to <16 x i16>*
  %36459 = load <16 x i16>, <16 x i16>* %36458, align 2, !tbaa !396
  %36460 = getelementptr inbounds i16, i16* %36448, i64 2
  %36461 = bitcast i16* %36460 to <16 x i16>*
  %36462 = load <16 x i16>, <16 x i16>* %36461, align 2, !tbaa !396
  %36463 = getelementptr inbounds i16, i16* %36448, i64 18
  %36464 = bitcast i16* %36463 to <16 x i16>*
  %36465 = load <16 x i16>, <16 x i16>* %36464, align 2, !tbaa !396
  %36466 = getelementptr inbounds i16, i16* %36448, i64 3
  %36467 = bitcast i16* %36466 to <16 x i16>*
  %36468 = load <16 x i16>, <16 x i16>* %36467, align 2, !tbaa !396
  %36469 = getelementptr inbounds i16, i16* %36448, i64 19
  %36470 = bitcast i16* %36469 to <16 x i16>*
  %36471 = load <16 x i16>, <16 x i16>* %36470, align 2, !tbaa !396
  %36472 = getelementptr inbounds i16, i16* %36448, i64 4
  %36473 = bitcast i16* %36472 to <16 x i16>*
  %36474 = load <16 x i16>, <16 x i16>* %36473, align 2, !tbaa !396
  %36475 = getelementptr inbounds i16, i16* %36448, i64 20
  %36476 = bitcast i16* %36475 to <16 x i16>*
  %36477 = load <16 x i16>, <16 x i16>* %36476, align 2, !tbaa !396
  %36478 = getelementptr inbounds i16, i16* %36448, i64 6
  %36479 = bitcast i16* %36478 to <16 x i16>*
  %36480 = load <16 x i16>, <16 x i16>* %36479, align 2, !tbaa !396
  %36481 = getelementptr inbounds i16, i16* %36448, i64 22
  %36482 = bitcast i16* %36481 to <16 x i16>*
  %36483 = load <16 x i16>, <16 x i16>* %36482, align 2, !tbaa !396
  %36484 = getelementptr inbounds i16, i16* %36448, i64 5
  %36485 = bitcast i16* %36484 to <16 x i16>*
  %36486 = load <16 x i16>, <16 x i16>* %36485, align 2, !tbaa !396
  %36487 = getelementptr inbounds i16, i16* %36448, i64 21
  %36488 = bitcast i16* %36487 to <16 x i16>*
  %36489 = load <16 x i16>, <16 x i16>* %36488, align 2, !tbaa !396
  %36490 = add <16 x i16> %36456, %36451
  %36491 = add <16 x i16> %36490, %36462
  %36492 = add <16 x i16> %36491, %36468
  %36493 = add <16 x i16> %36492, %36474
  %36494 = add <16 x i16> %36493, %36480
  %36495 = add <16 x i16> %36494, %36486
  %36496 = add <16 x i16> %36459, %36454
  %36497 = add <16 x i16> %36496, %36465
  %36498 = add <16 x i16> %36497, %36471
  %36499 = add <16 x i16> %36498, %36477
  %36500 = add <16 x i16> %36499, %36483
  %36501 = add <16 x i16> %36500, %36489
  %36502 = shufflevector <16 x i16> %36495, <16 x i16> %36501, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36503 = udiv <32 x i16> %36502, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %36504 = shufflevector <32 x i16> %36503, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36505 = shl nsw i64 %36415, 5
  %36506 = add nsw i64 %36505, %36228
  %36507 = getelementptr inbounds i16, i16* %blur_x917, i64 %36506
  %36508 = bitcast i16* %36507 to <16 x i16>*
  store <16 x i16> %36504, <16 x i16>* %36508, align 2, !tbaa !399
  %36509 = shufflevector <32 x i16> %36503, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36510 = getelementptr inbounds i16, i16* %36507, i64 16
  %36511 = bitcast i16* %36510 to <16 x i16>*
  store <16 x i16> %36509, <16 x i16>* %36511, align 2, !tbaa !399
  br label %"consume blur_x2367"

"consume blur_x2367":                             ; preds = %"for blur_y.s0.x.x.rebased2359.consume blur_x2367_crit_edge", %"produce blur_x2365"
  %.pre-phi3757 = phi i64 [ %.pre3756, %"for blur_y.s0.x.x.rebased2359.consume blur_x2367_crit_edge" ], [ %36505, %"produce blur_x2365" ]
  %36512 = add nsw i64 %36231, %.pre-phi3757
  %36513 = getelementptr inbounds i16, i16* %blur_x917, i64 %36512
  %36514 = bitcast i16* %36513 to <16 x i16>*
  %36515 = load <16 x i16>, <16 x i16>* %36514, align 2, !tbaa !399
  %36516 = getelementptr inbounds i16, i16* %36513, i64 16
  %36517 = bitcast i16* %36516 to <16 x i16>*
  %36518 = load <16 x i16>, <16 x i16>* %36517, align 2, !tbaa !399
  %36519 = add nsw i64 %36234, %.pre-phi3757
  %36520 = getelementptr inbounds i16, i16* %blur_x917, i64 %36519
  %36521 = bitcast i16* %36520 to <16 x i16>*
  %36522 = load <16 x i16>, <16 x i16>* %36521, align 2, !tbaa !399
  %36523 = getelementptr inbounds i16, i16* %36520, i64 16
  %36524 = bitcast i16* %36523 to <16 x i16>*
  %36525 = load <16 x i16>, <16 x i16>* %36524, align 2, !tbaa !399
  %36526 = add nsw i64 %36237, %.pre-phi3757
  %36527 = getelementptr inbounds i16, i16* %blur_x917, i64 %36526
  %36528 = bitcast i16* %36527 to <16 x i16>*
  %36529 = load <16 x i16>, <16 x i16>* %36528, align 2, !tbaa !399
  %36530 = getelementptr inbounds i16, i16* %36527, i64 16
  %36531 = bitcast i16* %36530 to <16 x i16>*
  %36532 = load <16 x i16>, <16 x i16>* %36531, align 2, !tbaa !399
  %36533 = add nsw i64 %36240, %.pre-phi3757
  %36534 = getelementptr inbounds i16, i16* %blur_x917, i64 %36533
  %36535 = bitcast i16* %36534 to <16 x i16>*
  %36536 = load <16 x i16>, <16 x i16>* %36535, align 2, !tbaa !399
  %36537 = getelementptr inbounds i16, i16* %36534, i64 16
  %36538 = bitcast i16* %36537 to <16 x i16>*
  %36539 = load <16 x i16>, <16 x i16>* %36538, align 2, !tbaa !399
  %36540 = add nsw i64 %36243, %.pre-phi3757
  %36541 = getelementptr inbounds i16, i16* %blur_x917, i64 %36540
  %36542 = bitcast i16* %36541 to <16 x i16>*
  %36543 = load <16 x i16>, <16 x i16>* %36542, align 2, !tbaa !399
  %36544 = getelementptr inbounds i16, i16* %36541, i64 16
  %36545 = bitcast i16* %36544 to <16 x i16>*
  %36546 = load <16 x i16>, <16 x i16>* %36545, align 2, !tbaa !399
  %36547 = add nsw i64 %36246, %.pre-phi3757
  %36548 = getelementptr inbounds i16, i16* %blur_x917, i64 %36547
  %36549 = bitcast i16* %36548 to <16 x i16>*
  %36550 = load <16 x i16>, <16 x i16>* %36549, align 2, !tbaa !399
  %36551 = getelementptr inbounds i16, i16* %36548, i64 16
  %36552 = bitcast i16* %36551 to <16 x i16>*
  %36553 = load <16 x i16>, <16 x i16>* %36552, align 2, !tbaa !399
  %36554 = add nsw i64 %36249, %.pre-phi3757
  %36555 = getelementptr inbounds i16, i16* %blur_x917, i64 %36554
  %36556 = bitcast i16* %36555 to <16 x i16>*
  %36557 = load <16 x i16>, <16 x i16>* %36556, align 2, !tbaa !399
  %36558 = getelementptr inbounds i16, i16* %36555, i64 16
  %36559 = bitcast i16* %36558 to <16 x i16>*
  %36560 = load <16 x i16>, <16 x i16>* %36559, align 2, !tbaa !399
  %36561 = add <16 x i16> %36522, %36515
  %36562 = add <16 x i16> %36561, %36529
  %36563 = add <16 x i16> %36562, %36536
  %36564 = add <16 x i16> %36563, %36543
  %36565 = add <16 x i16> %36564, %36550
  %36566 = add <16 x i16> %36565, %36557
  %36567 = add <16 x i16> %36525, %36518
  %36568 = add <16 x i16> %36567, %36532
  %36569 = add <16 x i16> %36568, %36539
  %36570 = add <16 x i16> %36569, %36546
  %36571 = add <16 x i16> %36570, %36553
  %36572 = add <16 x i16> %36571, %36560
  %36573 = shufflevector <16 x i16> %36566, <16 x i16> %36572, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36574 = udiv <32 x i16> %36573, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %36575 = shufflevector <32 x i16> %36574, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36576 = add nsw i64 %36253, %.pre-phi3757
  %36577 = getelementptr inbounds i16, i16* %267, i64 %36576
  %36578 = bitcast i16* %36577 to <16 x i16>*
  store <16 x i16> %36575, <16 x i16>* %36578, align 2, !tbaa !401
  %36579 = shufflevector <32 x i16> %36574, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36580 = getelementptr inbounds i16, i16* %36577, i64 16
  %36581 = bitcast i16* %36580 to <16 x i16>*
  store <16 x i16> %36579, <16 x i16>* %36581, align 2, !tbaa !401
  %indvars.iv.next3567 = add nuw nsw i64 %indvars.iv3566, 1
  %.not2653 = icmp eq i64 %indvars.iv.next3567, %546
  br i1 %.not2653, label %"end for blur_y.s0.x.x.rebased2360", label %"for blur_y.s0.x.x.rebased2359"

"for blur_y.s0.x.x.rebased2375":                  ; preds = %"for blur_y.s0.x.x.rebased2375.preheader", %"consume blur_x2386"
  %blur_y.s0.x.x.rebased2377 = phi i32 [ %36724, %"consume blur_x2386" ], [ 0, %"for blur_y.s0.x.x.rebased2375.preheader" ]
  %36582 = add nsw i32 %blur_y.s0.x.x.rebased2377, %t1670852
  %a6156 = shl nsw i32 %36582, 5
  %36583 = icmp sgt i32 %t1691, %a6156
  %blur_y.s0.x.v0.base.s2378 = select i1 %36583, i32 %a6156, i32 %t1691
  %36584 = icmp slt i32 %36582, 1
  %36585 = icmp sgt i32 %202, %a6156
  %36586 = or i1 %36584, %36585
  br i1 %36586, label %"produce blur_x2383", label %"consume blur_x2386"

"end for blur_y.s0.x.x.rebased2376":              ; preds = %"consume blur_x2386", %"end for blur_y.s0.x.x.rebased2360"
  br i1 %233, label %"produce blur_x2390", label %after_bb2387

"produce blur_x2383":                             ; preds = %"for blur_y.s0.x.x.rebased2375"
  %36587 = icmp slt i32 %blur_y.s0.x.v0.base.s2378, %202
  %blur_x.s0.x.v1.base.s2384 = select i1 %36587, i32 %blur_y.s0.x.v0.base.s2378, i32 %202
  %t12212385 = add nsw i32 %527, %blur_x.s0.x.v1.base.s2384
  %36588 = sext i32 %t12212385 to i64
  %36589 = getelementptr inbounds i16, i16* %read_input860, i64 %36588
  %36590 = getelementptr inbounds i16, i16* %36589, i64 1
  %36591 = bitcast i16* %36590 to <16 x i16>*
  %36592 = load <16 x i16>, <16 x i16>* %36591, align 2, !tbaa !396
  %36593 = getelementptr inbounds i16, i16* %36589, i64 17
  %36594 = bitcast i16* %36593 to <16 x i16>*
  %36595 = load <16 x i16>, <16 x i16>* %36594, align 2, !tbaa !396
  %36596 = bitcast i16* %36589 to <16 x i16>*
  %36597 = load <16 x i16>, <16 x i16>* %36596, align 2, !tbaa !396
  %36598 = getelementptr inbounds i16, i16* %36589, i64 16
  %36599 = bitcast i16* %36598 to <16 x i16>*
  %36600 = load <16 x i16>, <16 x i16>* %36599, align 2, !tbaa !396
  %36601 = getelementptr inbounds i16, i16* %36589, i64 2
  %36602 = bitcast i16* %36601 to <16 x i16>*
  %36603 = load <16 x i16>, <16 x i16>* %36602, align 2, !tbaa !396
  %36604 = getelementptr inbounds i16, i16* %36589, i64 18
  %36605 = bitcast i16* %36604 to <16 x i16>*
  %36606 = load <16 x i16>, <16 x i16>* %36605, align 2, !tbaa !396
  %36607 = getelementptr inbounds i16, i16* %36589, i64 3
  %36608 = bitcast i16* %36607 to <16 x i16>*
  %36609 = load <16 x i16>, <16 x i16>* %36608, align 2, !tbaa !396
  %36610 = getelementptr inbounds i16, i16* %36589, i64 19
  %36611 = bitcast i16* %36610 to <16 x i16>*
  %36612 = load <16 x i16>, <16 x i16>* %36611, align 2, !tbaa !396
  %36613 = getelementptr inbounds i16, i16* %36589, i64 4
  %36614 = bitcast i16* %36613 to <16 x i16>*
  %36615 = load <16 x i16>, <16 x i16>* %36614, align 2, !tbaa !396
  %36616 = getelementptr inbounds i16, i16* %36589, i64 20
  %36617 = bitcast i16* %36616 to <16 x i16>*
  %36618 = load <16 x i16>, <16 x i16>* %36617, align 2, !tbaa !396
  %36619 = getelementptr inbounds i16, i16* %36589, i64 6
  %36620 = bitcast i16* %36619 to <16 x i16>*
  %36621 = load <16 x i16>, <16 x i16>* %36620, align 2, !tbaa !396
  %36622 = getelementptr inbounds i16, i16* %36589, i64 22
  %36623 = bitcast i16* %36622 to <16 x i16>*
  %36624 = load <16 x i16>, <16 x i16>* %36623, align 2, !tbaa !396
  %36625 = getelementptr inbounds i16, i16* %36589, i64 5
  %36626 = bitcast i16* %36625 to <16 x i16>*
  %36627 = load <16 x i16>, <16 x i16>* %36626, align 2, !tbaa !396
  %36628 = getelementptr inbounds i16, i16* %36589, i64 21
  %36629 = bitcast i16* %36628 to <16 x i16>*
  %36630 = load <16 x i16>, <16 x i16>* %36629, align 2, !tbaa !396
  %36631 = add <16 x i16> %36597, %36592
  %36632 = add <16 x i16> %36631, %36603
  %36633 = add <16 x i16> %36632, %36609
  %36634 = add <16 x i16> %36633, %36615
  %36635 = add <16 x i16> %36634, %36621
  %36636 = add <16 x i16> %36635, %36627
  %36637 = add <16 x i16> %36600, %36595
  %36638 = add <16 x i16> %36637, %36606
  %36639 = add <16 x i16> %36638, %36612
  %36640 = add <16 x i16> %36639, %36618
  %36641 = add <16 x i16> %36640, %36624
  %36642 = add <16 x i16> %36641, %36630
  %36643 = shufflevector <16 x i16> %36636, <16 x i16> %36642, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36644 = udiv <32 x i16> %36643, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %36645 = shufflevector <32 x i16> %36644, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36646 = sext i32 %blur_x.s0.x.v1.base.s2384 to i64
  %36647 = add nsw i64 %36646, %36421
  %36648 = getelementptr inbounds i16, i16* %blur_x917, i64 %36647
  %36649 = bitcast i16* %36648 to <16 x i16>*
  store <16 x i16> %36645, <16 x i16>* %36649, align 2, !tbaa !399
  %36650 = shufflevector <32 x i16> %36644, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36651 = getelementptr inbounds i16, i16* %36648, i64 16
  %36652 = bitcast i16* %36651 to <16 x i16>*
  store <16 x i16> %36650, <16 x i16>* %36652, align 2, !tbaa !399
  br label %"consume blur_x2386"

"consume blur_x2386":                             ; preds = %"for blur_y.s0.x.x.rebased2375", %"produce blur_x2383"
  %36653 = sext i32 %blur_y.s0.x.v0.base.s2378 to i64
  %36654 = add nsw i64 %36424, %36653
  %36655 = getelementptr inbounds i16, i16* %blur_x917, i64 %36654
  %36656 = bitcast i16* %36655 to <16 x i16>*
  %36657 = load <16 x i16>, <16 x i16>* %36656, align 2, !tbaa !399
  %36658 = getelementptr inbounds i16, i16* %36655, i64 16
  %36659 = bitcast i16* %36658 to <16 x i16>*
  %36660 = load <16 x i16>, <16 x i16>* %36659, align 2, !tbaa !399
  %36661 = add nsw i64 %36427, %36653
  %36662 = getelementptr inbounds i16, i16* %blur_x917, i64 %36661
  %36663 = bitcast i16* %36662 to <16 x i16>*
  %36664 = load <16 x i16>, <16 x i16>* %36663, align 2, !tbaa !399
  %36665 = getelementptr inbounds i16, i16* %36662, i64 16
  %36666 = bitcast i16* %36665 to <16 x i16>*
  %36667 = load <16 x i16>, <16 x i16>* %36666, align 2, !tbaa !399
  %36668 = add nsw i64 %36430, %36653
  %36669 = getelementptr inbounds i16, i16* %blur_x917, i64 %36668
  %36670 = bitcast i16* %36669 to <16 x i16>*
  %36671 = load <16 x i16>, <16 x i16>* %36670, align 2, !tbaa !399
  %36672 = getelementptr inbounds i16, i16* %36669, i64 16
  %36673 = bitcast i16* %36672 to <16 x i16>*
  %36674 = load <16 x i16>, <16 x i16>* %36673, align 2, !tbaa !399
  %36675 = add nsw i64 %36433, %36653
  %36676 = getelementptr inbounds i16, i16* %blur_x917, i64 %36675
  %36677 = bitcast i16* %36676 to <16 x i16>*
  %36678 = load <16 x i16>, <16 x i16>* %36677, align 2, !tbaa !399
  %36679 = getelementptr inbounds i16, i16* %36676, i64 16
  %36680 = bitcast i16* %36679 to <16 x i16>*
  %36681 = load <16 x i16>, <16 x i16>* %36680, align 2, !tbaa !399
  %36682 = add nsw i64 %36436, %36653
  %36683 = getelementptr inbounds i16, i16* %blur_x917, i64 %36682
  %36684 = bitcast i16* %36683 to <16 x i16>*
  %36685 = load <16 x i16>, <16 x i16>* %36684, align 2, !tbaa !399
  %36686 = getelementptr inbounds i16, i16* %36683, i64 16
  %36687 = bitcast i16* %36686 to <16 x i16>*
  %36688 = load <16 x i16>, <16 x i16>* %36687, align 2, !tbaa !399
  %36689 = add nsw i64 %36439, %36653
  %36690 = getelementptr inbounds i16, i16* %blur_x917, i64 %36689
  %36691 = bitcast i16* %36690 to <16 x i16>*
  %36692 = load <16 x i16>, <16 x i16>* %36691, align 2, !tbaa !399
  %36693 = getelementptr inbounds i16, i16* %36690, i64 16
  %36694 = bitcast i16* %36693 to <16 x i16>*
  %36695 = load <16 x i16>, <16 x i16>* %36694, align 2, !tbaa !399
  %36696 = add nsw i64 %36442, %36653
  %36697 = getelementptr inbounds i16, i16* %blur_x917, i64 %36696
  %36698 = bitcast i16* %36697 to <16 x i16>*
  %36699 = load <16 x i16>, <16 x i16>* %36698, align 2, !tbaa !399
  %36700 = getelementptr inbounds i16, i16* %36697, i64 16
  %36701 = bitcast i16* %36700 to <16 x i16>*
  %36702 = load <16 x i16>, <16 x i16>* %36701, align 2, !tbaa !399
  %36703 = add <16 x i16> %36664, %36657
  %36704 = add <16 x i16> %36703, %36671
  %36705 = add <16 x i16> %36704, %36678
  %36706 = add <16 x i16> %36705, %36685
  %36707 = add <16 x i16> %36706, %36692
  %36708 = add <16 x i16> %36707, %36699
  %36709 = add <16 x i16> %36667, %36660
  %36710 = add <16 x i16> %36709, %36674
  %36711 = add <16 x i16> %36710, %36681
  %36712 = add <16 x i16> %36711, %36688
  %36713 = add <16 x i16> %36712, %36695
  %36714 = add <16 x i16> %36713, %36702
  %36715 = shufflevector <16 x i16> %36708, <16 x i16> %36714, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36716 = udiv <32 x i16> %36715, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %36717 = shufflevector <32 x i16> %36716, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36718 = add nsw i64 %36446, %36653
  %36719 = getelementptr inbounds i16, i16* %267, i64 %36718
  %36720 = bitcast i16* %36719 to <16 x i16>*
  store <16 x i16> %36717, <16 x i16>* %36720, align 2, !tbaa !401
  %36721 = shufflevector <32 x i16> %36716, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36722 = getelementptr inbounds i16, i16* %36719, i64 16
  %36723 = bitcast i16* %36722 to <16 x i16>*
  store <16 x i16> %36721, <16 x i16>* %36723, align 2, !tbaa !401
  %36724 = add nuw nsw i32 %blur_y.s0.x.x.rebased2377, 1
  %.not2652 = icmp eq i32 %36724, %t1727936
  br i1 %.not2652, label %"end for blur_y.s0.x.x.rebased2376", label %"for blur_y.s0.x.x.rebased2375"

after_bb2387:                                     ; preds = %"end for blur_y.s0.x.x.rebased2376", %"produce blur_x2390"
  br i1 %306, label %"for blur_y.s0.x.x.rebased2402.preheader", label %"end for blur_y.s0.x.x.rebased2403", !prof !386

"for blur_y.s0.x.x.rebased2402.preheader":        ; preds = %after_bb2387
  %36725 = sext i32 %t17501042 to i64
  %36726 = zext i32 %.pre-phi3699 to i64
  %36727 = mul nsw i64 %36726, %353
  %36728 = sub nsw i64 %36727, %302
  %36729 = zext i32 %.pre-phi3693 to i64
  %36730 = mul nsw i64 %36729, %353
  %36731 = sub nsw i64 %36730, %302
  %36732 = zext i32 %.pre-phi3669 to i64
  %36733 = mul nsw i64 %36732, %353
  %36734 = sub nsw i64 %36733, %302
  %36735 = zext i32 %.pre-phi3673 to i64
  %36736 = mul nsw i64 %36735, %353
  %36737 = sub nsw i64 %36736, %302
  %36738 = zext i32 %.pre-phi3677 to i64
  %36739 = mul nsw i64 %36738, %353
  %36740 = sub nsw i64 %36739, %302
  %36741 = zext i32 %.pre-phi3685 to i64
  %36742 = mul nsw i64 %36741, %353
  %36743 = sub nsw i64 %36742, %302
  %36744 = zext i32 %.pre-phi3681 to i64
  %36745 = mul nsw i64 %36744, %353
  %36746 = sub nsw i64 %36745, %302
  %36747 = sext i32 %a393 to i64
  %36748 = add nsw i64 %36747, 30
  %36749 = mul nsw i64 %36748, %350
  %36750 = add nsw i64 %36749, %354
  br label %"for blur_y.s0.x.x.rebased2402"

"produce blur_x2390":                             ; preds = %"end for blur_y.s0.x.x.rebased2376"
  %36751 = getelementptr inbounds i16, i16* %read_input860, i64 %531
  %36752 = getelementptr inbounds i16, i16* %36751, i64 -31
  %36753 = bitcast i16* %36752 to <16 x i16>*
  %36754 = load <16 x i16>, <16 x i16>* %36753, align 2, !tbaa !396
  %36755 = getelementptr inbounds i16, i16* %36751, i64 -15
  %36756 = bitcast i16* %36755 to <16 x i16>*
  %36757 = load <16 x i16>, <16 x i16>* %36756, align 2, !tbaa !396
  %36758 = getelementptr inbounds i16, i16* %36751, i64 -32
  %36759 = bitcast i16* %36758 to <16 x i16>*
  %36760 = load <16 x i16>, <16 x i16>* %36759, align 2, !tbaa !396
  %36761 = getelementptr inbounds i16, i16* %36751, i64 -16
  %36762 = bitcast i16* %36761 to <16 x i16>*
  %36763 = load <16 x i16>, <16 x i16>* %36762, align 2, !tbaa !396
  %36764 = getelementptr inbounds i16, i16* %36751, i64 -30
  %36765 = bitcast i16* %36764 to <16 x i16>*
  %36766 = load <16 x i16>, <16 x i16>* %36765, align 2, !tbaa !396
  %36767 = getelementptr inbounds i16, i16* %36751, i64 -14
  %36768 = bitcast i16* %36767 to <16 x i16>*
  %36769 = load <16 x i16>, <16 x i16>* %36768, align 2, !tbaa !396
  %36770 = getelementptr inbounds i16, i16* %36751, i64 -29
  %36771 = bitcast i16* %36770 to <16 x i16>*
  %36772 = load <16 x i16>, <16 x i16>* %36771, align 2, !tbaa !396
  %36773 = getelementptr inbounds i16, i16* %36751, i64 -13
  %36774 = bitcast i16* %36773 to <16 x i16>*
  %36775 = load <16 x i16>, <16 x i16>* %36774, align 2, !tbaa !396
  %36776 = getelementptr inbounds i16, i16* %36751, i64 -28
  %36777 = bitcast i16* %36776 to <16 x i16>*
  %36778 = load <16 x i16>, <16 x i16>* %36777, align 2, !tbaa !396
  %36779 = getelementptr inbounds i16, i16* %36751, i64 -12
  %36780 = bitcast i16* %36779 to <16 x i16>*
  %36781 = load <16 x i16>, <16 x i16>* %36780, align 2, !tbaa !396
  %36782 = getelementptr inbounds i16, i16* %36751, i64 -26
  %36783 = bitcast i16* %36782 to <16 x i16>*
  %36784 = load <16 x i16>, <16 x i16>* %36783, align 2, !tbaa !396
  %36785 = getelementptr inbounds i16, i16* %36751, i64 -10
  %36786 = bitcast i16* %36785 to <16 x i16>*
  %36787 = load <16 x i16>, <16 x i16>* %36786, align 2, !tbaa !396
  %36788 = getelementptr inbounds i16, i16* %36751, i64 -27
  %36789 = bitcast i16* %36788 to <16 x i16>*
  %36790 = load <16 x i16>, <16 x i16>* %36789, align 2, !tbaa !396
  %36791 = getelementptr inbounds i16, i16* %36751, i64 -11
  %36792 = bitcast i16* %36791 to <16 x i16>*
  %36793 = load <16 x i16>, <16 x i16>* %36792, align 2, !tbaa !396
  %36794 = add <16 x i16> %36760, %36754
  %36795 = add <16 x i16> %36794, %36766
  %36796 = add <16 x i16> %36795, %36772
  %36797 = add <16 x i16> %36796, %36778
  %36798 = add <16 x i16> %36797, %36784
  %36799 = add <16 x i16> %36798, %36790
  %36800 = add <16 x i16> %36763, %36757
  %36801 = add <16 x i16> %36800, %36769
  %36802 = add <16 x i16> %36801, %36775
  %36803 = add <16 x i16> %36802, %36781
  %36804 = add <16 x i16> %36803, %36787
  %36805 = add <16 x i16> %36804, %36793
  %36806 = shufflevector <16 x i16> %36799, <16 x i16> %36805, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36807 = udiv <32 x i16> %36806, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %36808 = shufflevector <32 x i16> %36807, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36809 = zext i32 %.pre-phi3685 to i64
  %36810 = mul nsw i64 %303, %36809
  %36811 = add nsw i64 %305, %36810
  %36812 = getelementptr inbounds i16, i16* %blur_x917, i64 %36811
  %36813 = getelementptr inbounds i16, i16* %36812, i64 -32
  %36814 = bitcast i16* %36813 to <16 x i16>*
  store <16 x i16> %36808, <16 x i16>* %36814, align 2, !tbaa !399
  %36815 = shufflevector <32 x i16> %36807, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36816 = getelementptr inbounds i16, i16* %36812, i64 -16
  %36817 = bitcast i16* %36816 to <16 x i16>*
  store <16 x i16> %36815, <16 x i16>* %36817, align 2, !tbaa !399
  %36818 = zext i32 %.pre-phi3699 to i64
  %36819 = mul nsw i64 %36818, %349
  %36820 = add nsw i64 %36819, %300
  %36821 = getelementptr inbounds i16, i16* %blur_x917, i64 %36820
  %36822 = getelementptr inbounds i16, i16* %36821, i64 -32
  %36823 = bitcast i16* %36822 to <16 x i16>*
  %36824 = load <16 x i16>, <16 x i16>* %36823, align 2, !tbaa !399
  %36825 = getelementptr inbounds i16, i16* %36821, i64 -16
  %36826 = bitcast i16* %36825 to <16 x i16>*
  %36827 = load <16 x i16>, <16 x i16>* %36826, align 2, !tbaa !399
  %36828 = zext i32 %.pre-phi3693 to i64
  %36829 = mul nsw i64 %36828, %349
  %36830 = add nsw i64 %36829, %300
  %36831 = getelementptr inbounds i16, i16* %blur_x917, i64 %36830
  %36832 = getelementptr inbounds i16, i16* %36831, i64 -32
  %36833 = bitcast i16* %36832 to <16 x i16>*
  %36834 = load <16 x i16>, <16 x i16>* %36833, align 2, !tbaa !399
  %36835 = getelementptr inbounds i16, i16* %36831, i64 -16
  %36836 = bitcast i16* %36835 to <16 x i16>*
  %36837 = load <16 x i16>, <16 x i16>* %36836, align 2, !tbaa !399
  %36838 = zext i32 %.pre-phi3669 to i64
  %36839 = mul nsw i64 %36838, %349
  %36840 = add nsw i64 %36839, %300
  %36841 = getelementptr inbounds i16, i16* %blur_x917, i64 %36840
  %36842 = getelementptr inbounds i16, i16* %36841, i64 -32
  %36843 = bitcast i16* %36842 to <16 x i16>*
  %36844 = load <16 x i16>, <16 x i16>* %36843, align 2, !tbaa !399
  %36845 = getelementptr inbounds i16, i16* %36841, i64 -16
  %36846 = bitcast i16* %36845 to <16 x i16>*
  %36847 = load <16 x i16>, <16 x i16>* %36846, align 2, !tbaa !399
  %36848 = zext i32 %.pre-phi3673 to i64
  %36849 = mul nsw i64 %36848, %349
  %36850 = add nsw i64 %36849, %300
  %36851 = getelementptr inbounds i16, i16* %blur_x917, i64 %36850
  %36852 = getelementptr inbounds i16, i16* %36851, i64 -32
  %36853 = bitcast i16* %36852 to <16 x i16>*
  %36854 = load <16 x i16>, <16 x i16>* %36853, align 2, !tbaa !399
  %36855 = getelementptr inbounds i16, i16* %36851, i64 -16
  %36856 = bitcast i16* %36855 to <16 x i16>*
  %36857 = load <16 x i16>, <16 x i16>* %36856, align 2, !tbaa !399
  %36858 = zext i32 %.pre-phi3677 to i64
  %36859 = mul nsw i64 %36858, %349
  %36860 = add nsw i64 %36859, %300
  %36861 = getelementptr inbounds i16, i16* %blur_x917, i64 %36860
  %36862 = getelementptr inbounds i16, i16* %36861, i64 -32
  %36863 = bitcast i16* %36862 to <16 x i16>*
  %36864 = load <16 x i16>, <16 x i16>* %36863, align 2, !tbaa !399
  %36865 = getelementptr inbounds i16, i16* %36861, i64 -16
  %36866 = bitcast i16* %36865 to <16 x i16>*
  %36867 = load <16 x i16>, <16 x i16>* %36866, align 2, !tbaa !399
  %36868 = mul nsw i64 %36809, %349
  %36869 = add nsw i64 %36868, %300
  %36870 = getelementptr inbounds i16, i16* %blur_x917, i64 %36869
  %36871 = getelementptr inbounds i16, i16* %36870, i64 -32
  %36872 = bitcast i16* %36871 to <16 x i16>*
  %36873 = load <16 x i16>, <16 x i16>* %36872, align 2, !tbaa !399
  %36874 = getelementptr inbounds i16, i16* %36870, i64 -16
  %36875 = bitcast i16* %36874 to <16 x i16>*
  %36876 = load <16 x i16>, <16 x i16>* %36875, align 2, !tbaa !399
  %36877 = zext i32 %.pre-phi3681 to i64
  %36878 = mul nsw i64 %36877, %349
  %36879 = add nsw i64 %36878, %300
  %36880 = getelementptr inbounds i16, i16* %blur_x917, i64 %36879
  %36881 = getelementptr inbounds i16, i16* %36880, i64 -32
  %36882 = bitcast i16* %36881 to <16 x i16>*
  %36883 = load <16 x i16>, <16 x i16>* %36882, align 2, !tbaa !399
  %36884 = getelementptr inbounds i16, i16* %36880, i64 -16
  %36885 = bitcast i16* %36884 to <16 x i16>*
  %36886 = load <16 x i16>, <16 x i16>* %36885, align 2, !tbaa !399
  %36887 = add <16 x i16> %36834, %36824
  %36888 = add <16 x i16> %36887, %36844
  %36889 = add <16 x i16> %36888, %36854
  %36890 = add <16 x i16> %36889, %36864
  %36891 = add <16 x i16> %36890, %36873
  %36892 = add <16 x i16> %36891, %36883
  %36893 = add <16 x i16> %36837, %36827
  %36894 = add <16 x i16> %36893, %36847
  %36895 = add <16 x i16> %36894, %36857
  %36896 = add <16 x i16> %36895, %36867
  %36897 = add <16 x i16> %36896, %36876
  %36898 = add <16 x i16> %36897, %36886
  %36899 = shufflevector <16 x i16> %36892, <16 x i16> %36898, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36900 = udiv <32 x i16> %36899, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %36901 = shufflevector <32 x i16> %36900, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36902 = sext i32 %a393 to i64
  %36903 = add nsw i64 %36902, 30
  %36904 = mul nsw i64 %36903, %350
  %36905 = add nsw i64 %352, %36904
  %36906 = getelementptr inbounds i16, i16* %267, i64 %36905
  %36907 = getelementptr inbounds i16, i16* %36906, i64 -32
  %36908 = bitcast i16* %36907 to <16 x i16>*
  store <16 x i16> %36901, <16 x i16>* %36908, align 2, !tbaa !401
  %36909 = shufflevector <32 x i16> %36900, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36910 = getelementptr inbounds i16, i16* %36906, i64 -16
  %36911 = bitcast i16* %36910 to <16 x i16>*
  store <16 x i16> %36909, <16 x i16>* %36911, align 2, !tbaa !401
  br label %after_bb2387

"for blur_y.s0.x.x.rebased2402":                  ; preds = %"for blur_y.s0.x.x.rebased2402.preheader", %"consume blur_x2410"
  %indvars.iv3568 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2402.preheader" ], [ %indvars.iv.next3569, %"consume blur_x2410" ]
  %36912 = add nsw i64 %indvars.iv3568, %307
  %36913 = icmp slt i64 %36912, 1
  %36914 = trunc i64 %36912 to i32
  %36915 = shl nsw i32 %36914, 5
  %36916 = icmp sgt i32 %202, %36915
  %36917 = or i1 %36913, %36916
  br i1 %36917, label %"produce blur_x2408", label %"for blur_y.s0.x.x.rebased2402.consume blur_x2410_crit_edge"

"for blur_y.s0.x.x.rebased2402.consume blur_x2410_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2402"
  %.pre3758 = shl nsw i64 %36912, 5
  br label %"consume blur_x2410"

"end for blur_y.s0.x.x.rebased2403":              ; preds = %"consume blur_x2410", %after_bb2387
  br i1 %308, label %"for blur_y.s0.x.x.rebased2418.preheader", label %"end for blur_y.s0.x.x.rebased2419", !prof !386

"for blur_y.s0.x.x.rebased2418.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2403"
  %36918 = sext i32 %t17501042 to i64
  %36919 = zext i32 %.pre-phi3699 to i64
  %36920 = mul nsw i64 %36919, %353
  %36921 = sub nsw i64 %36920, %302
  %36922 = zext i32 %.pre-phi3693 to i64
  %36923 = mul nsw i64 %36922, %353
  %36924 = sub nsw i64 %36923, %302
  %36925 = zext i32 %.pre-phi3669 to i64
  %36926 = mul nsw i64 %36925, %353
  %36927 = sub nsw i64 %36926, %302
  %36928 = zext i32 %.pre-phi3673 to i64
  %36929 = mul nsw i64 %36928, %353
  %36930 = sub nsw i64 %36929, %302
  %36931 = zext i32 %.pre-phi3677 to i64
  %36932 = mul nsw i64 %36931, %353
  %36933 = sub nsw i64 %36932, %302
  %36934 = zext i32 %.pre-phi3685 to i64
  %36935 = mul nsw i64 %36934, %353
  %36936 = sub nsw i64 %36935, %302
  %36937 = zext i32 %.pre-phi3681 to i64
  %36938 = mul nsw i64 %36937, %353
  %36939 = sub nsw i64 %36938, %302
  %36940 = sext i32 %a393 to i64
  %36941 = add nsw i64 %36940, 30
  %36942 = mul nsw i64 %36941, %350
  %36943 = add nsw i64 %36942, %354
  br label %"for blur_y.s0.x.x.rebased2418"

"produce blur_x2408":                             ; preds = %"for blur_y.s0.x.x.rebased2402"
  %t12322409 = add nsw i32 %533, %36915
  %36944 = sext i32 %t12322409 to i64
  %36945 = getelementptr inbounds i16, i16* %read_input860, i64 %36944
  %36946 = getelementptr inbounds i16, i16* %36945, i64 1
  %36947 = bitcast i16* %36946 to <16 x i16>*
  %36948 = load <16 x i16>, <16 x i16>* %36947, align 2, !tbaa !396
  %36949 = getelementptr inbounds i16, i16* %36945, i64 17
  %36950 = bitcast i16* %36949 to <16 x i16>*
  %36951 = load <16 x i16>, <16 x i16>* %36950, align 2, !tbaa !396
  %36952 = bitcast i16* %36945 to <16 x i16>*
  %36953 = load <16 x i16>, <16 x i16>* %36952, align 2, !tbaa !396
  %36954 = getelementptr inbounds i16, i16* %36945, i64 16
  %36955 = bitcast i16* %36954 to <16 x i16>*
  %36956 = load <16 x i16>, <16 x i16>* %36955, align 2, !tbaa !396
  %36957 = getelementptr inbounds i16, i16* %36945, i64 2
  %36958 = bitcast i16* %36957 to <16 x i16>*
  %36959 = load <16 x i16>, <16 x i16>* %36958, align 2, !tbaa !396
  %36960 = getelementptr inbounds i16, i16* %36945, i64 18
  %36961 = bitcast i16* %36960 to <16 x i16>*
  %36962 = load <16 x i16>, <16 x i16>* %36961, align 2, !tbaa !396
  %36963 = getelementptr inbounds i16, i16* %36945, i64 3
  %36964 = bitcast i16* %36963 to <16 x i16>*
  %36965 = load <16 x i16>, <16 x i16>* %36964, align 2, !tbaa !396
  %36966 = getelementptr inbounds i16, i16* %36945, i64 19
  %36967 = bitcast i16* %36966 to <16 x i16>*
  %36968 = load <16 x i16>, <16 x i16>* %36967, align 2, !tbaa !396
  %36969 = getelementptr inbounds i16, i16* %36945, i64 4
  %36970 = bitcast i16* %36969 to <16 x i16>*
  %36971 = load <16 x i16>, <16 x i16>* %36970, align 2, !tbaa !396
  %36972 = getelementptr inbounds i16, i16* %36945, i64 20
  %36973 = bitcast i16* %36972 to <16 x i16>*
  %36974 = load <16 x i16>, <16 x i16>* %36973, align 2, !tbaa !396
  %36975 = getelementptr inbounds i16, i16* %36945, i64 6
  %36976 = bitcast i16* %36975 to <16 x i16>*
  %36977 = load <16 x i16>, <16 x i16>* %36976, align 2, !tbaa !396
  %36978 = getelementptr inbounds i16, i16* %36945, i64 22
  %36979 = bitcast i16* %36978 to <16 x i16>*
  %36980 = load <16 x i16>, <16 x i16>* %36979, align 2, !tbaa !396
  %36981 = getelementptr inbounds i16, i16* %36945, i64 5
  %36982 = bitcast i16* %36981 to <16 x i16>*
  %36983 = load <16 x i16>, <16 x i16>* %36982, align 2, !tbaa !396
  %36984 = getelementptr inbounds i16, i16* %36945, i64 21
  %36985 = bitcast i16* %36984 to <16 x i16>*
  %36986 = load <16 x i16>, <16 x i16>* %36985, align 2, !tbaa !396
  %36987 = add <16 x i16> %36953, %36948
  %36988 = add <16 x i16> %36987, %36959
  %36989 = add <16 x i16> %36988, %36965
  %36990 = add <16 x i16> %36989, %36971
  %36991 = add <16 x i16> %36990, %36977
  %36992 = add <16 x i16> %36991, %36983
  %36993 = add <16 x i16> %36956, %36951
  %36994 = add <16 x i16> %36993, %36962
  %36995 = add <16 x i16> %36994, %36968
  %36996 = add <16 x i16> %36995, %36974
  %36997 = add <16 x i16> %36996, %36980
  %36998 = add <16 x i16> %36997, %36986
  %36999 = shufflevector <16 x i16> %36992, <16 x i16> %36998, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37000 = udiv <32 x i16> %36999, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %37001 = shufflevector <32 x i16> %37000, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37002 = shl nsw i64 %36912, 5
  %37003 = add nsw i64 %37002, %36725
  %37004 = getelementptr inbounds i16, i16* %blur_x917, i64 %37003
  %37005 = bitcast i16* %37004 to <16 x i16>*
  store <16 x i16> %37001, <16 x i16>* %37005, align 2, !tbaa !399
  %37006 = shufflevector <32 x i16> %37000, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37007 = getelementptr inbounds i16, i16* %37004, i64 16
  %37008 = bitcast i16* %37007 to <16 x i16>*
  store <16 x i16> %37006, <16 x i16>* %37008, align 2, !tbaa !399
  br label %"consume blur_x2410"

"consume blur_x2410":                             ; preds = %"for blur_y.s0.x.x.rebased2402.consume blur_x2410_crit_edge", %"produce blur_x2408"
  %.pre-phi3759 = phi i64 [ %.pre3758, %"for blur_y.s0.x.x.rebased2402.consume blur_x2410_crit_edge" ], [ %37002, %"produce blur_x2408" ]
  %37009 = add nsw i64 %36728, %.pre-phi3759
  %37010 = getelementptr inbounds i16, i16* %blur_x917, i64 %37009
  %37011 = bitcast i16* %37010 to <16 x i16>*
  %37012 = load <16 x i16>, <16 x i16>* %37011, align 2, !tbaa !399
  %37013 = getelementptr inbounds i16, i16* %37010, i64 16
  %37014 = bitcast i16* %37013 to <16 x i16>*
  %37015 = load <16 x i16>, <16 x i16>* %37014, align 2, !tbaa !399
  %37016 = add nsw i64 %36731, %.pre-phi3759
  %37017 = getelementptr inbounds i16, i16* %blur_x917, i64 %37016
  %37018 = bitcast i16* %37017 to <16 x i16>*
  %37019 = load <16 x i16>, <16 x i16>* %37018, align 2, !tbaa !399
  %37020 = getelementptr inbounds i16, i16* %37017, i64 16
  %37021 = bitcast i16* %37020 to <16 x i16>*
  %37022 = load <16 x i16>, <16 x i16>* %37021, align 2, !tbaa !399
  %37023 = add nsw i64 %36734, %.pre-phi3759
  %37024 = getelementptr inbounds i16, i16* %blur_x917, i64 %37023
  %37025 = bitcast i16* %37024 to <16 x i16>*
  %37026 = load <16 x i16>, <16 x i16>* %37025, align 2, !tbaa !399
  %37027 = getelementptr inbounds i16, i16* %37024, i64 16
  %37028 = bitcast i16* %37027 to <16 x i16>*
  %37029 = load <16 x i16>, <16 x i16>* %37028, align 2, !tbaa !399
  %37030 = add nsw i64 %36737, %.pre-phi3759
  %37031 = getelementptr inbounds i16, i16* %blur_x917, i64 %37030
  %37032 = bitcast i16* %37031 to <16 x i16>*
  %37033 = load <16 x i16>, <16 x i16>* %37032, align 2, !tbaa !399
  %37034 = getelementptr inbounds i16, i16* %37031, i64 16
  %37035 = bitcast i16* %37034 to <16 x i16>*
  %37036 = load <16 x i16>, <16 x i16>* %37035, align 2, !tbaa !399
  %37037 = add nsw i64 %36740, %.pre-phi3759
  %37038 = getelementptr inbounds i16, i16* %blur_x917, i64 %37037
  %37039 = bitcast i16* %37038 to <16 x i16>*
  %37040 = load <16 x i16>, <16 x i16>* %37039, align 2, !tbaa !399
  %37041 = getelementptr inbounds i16, i16* %37038, i64 16
  %37042 = bitcast i16* %37041 to <16 x i16>*
  %37043 = load <16 x i16>, <16 x i16>* %37042, align 2, !tbaa !399
  %37044 = add nsw i64 %36743, %.pre-phi3759
  %37045 = getelementptr inbounds i16, i16* %blur_x917, i64 %37044
  %37046 = bitcast i16* %37045 to <16 x i16>*
  %37047 = load <16 x i16>, <16 x i16>* %37046, align 2, !tbaa !399
  %37048 = getelementptr inbounds i16, i16* %37045, i64 16
  %37049 = bitcast i16* %37048 to <16 x i16>*
  %37050 = load <16 x i16>, <16 x i16>* %37049, align 2, !tbaa !399
  %37051 = add nsw i64 %36746, %.pre-phi3759
  %37052 = getelementptr inbounds i16, i16* %blur_x917, i64 %37051
  %37053 = bitcast i16* %37052 to <16 x i16>*
  %37054 = load <16 x i16>, <16 x i16>* %37053, align 2, !tbaa !399
  %37055 = getelementptr inbounds i16, i16* %37052, i64 16
  %37056 = bitcast i16* %37055 to <16 x i16>*
  %37057 = load <16 x i16>, <16 x i16>* %37056, align 2, !tbaa !399
  %37058 = add <16 x i16> %37019, %37012
  %37059 = add <16 x i16> %37058, %37026
  %37060 = add <16 x i16> %37059, %37033
  %37061 = add <16 x i16> %37060, %37040
  %37062 = add <16 x i16> %37061, %37047
  %37063 = add <16 x i16> %37062, %37054
  %37064 = add <16 x i16> %37022, %37015
  %37065 = add <16 x i16> %37064, %37029
  %37066 = add <16 x i16> %37065, %37036
  %37067 = add <16 x i16> %37066, %37043
  %37068 = add <16 x i16> %37067, %37050
  %37069 = add <16 x i16> %37068, %37057
  %37070 = shufflevector <16 x i16> %37063, <16 x i16> %37069, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37071 = udiv <32 x i16> %37070, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %37072 = shufflevector <32 x i16> %37071, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37073 = add nsw i64 %36750, %.pre-phi3759
  %37074 = getelementptr inbounds i16, i16* %267, i64 %37073
  %37075 = bitcast i16* %37074 to <16 x i16>*
  store <16 x i16> %37072, <16 x i16>* %37075, align 2, !tbaa !401
  %37076 = shufflevector <32 x i16> %37071, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37077 = getelementptr inbounds i16, i16* %37074, i64 16
  %37078 = bitcast i16* %37077 to <16 x i16>*
  store <16 x i16> %37076, <16 x i16>* %37078, align 2, !tbaa !401
  %indvars.iv.next3569 = add nuw nsw i64 %indvars.iv3568, 1
  %.not2649 = icmp eq i64 %indvars.iv.next3569, %546
  br i1 %.not2649, label %"end for blur_y.s0.x.x.rebased2403", label %"for blur_y.s0.x.x.rebased2402"

"for blur_y.s0.x.x.rebased2418":                  ; preds = %"for blur_y.s0.x.x.rebased2418.preheader", %"consume blur_x2429"
  %blur_y.s0.x.x.rebased2420 = phi i32 [ %37221, %"consume blur_x2429" ], [ 0, %"for blur_y.s0.x.x.rebased2418.preheader" ]
  %37079 = add nsw i32 %blur_y.s0.x.x.rebased2420, %t1670852
  %a6313 = shl nsw i32 %37079, 5
  %37080 = icmp sgt i32 %t1691, %a6313
  %blur_y.s0.x.v0.base.s2421 = select i1 %37080, i32 %a6313, i32 %t1691
  %37081 = icmp slt i32 %37079, 1
  %37082 = icmp sgt i32 %202, %a6313
  %37083 = or i1 %37081, %37082
  br i1 %37083, label %"produce blur_x2426", label %"consume blur_x2429"

"end for blur_y.s0.x.x.rebased2419":              ; preds = %"consume blur_x2429", %"end for blur_y.s0.x.x.rebased2403"
  br i1 %233, label %"produce blur_x2433", label %after_bb2430

"produce blur_x2426":                             ; preds = %"for blur_y.s0.x.x.rebased2418"
  %37084 = icmp slt i32 %blur_y.s0.x.v0.base.s2421, %202
  %blur_x.s0.x.v1.base.s2427 = select i1 %37084, i32 %blur_y.s0.x.v0.base.s2421, i32 %202
  %t12372428 = add nsw i32 %533, %blur_x.s0.x.v1.base.s2427
  %37085 = sext i32 %t12372428 to i64
  %37086 = getelementptr inbounds i16, i16* %read_input860, i64 %37085
  %37087 = getelementptr inbounds i16, i16* %37086, i64 1
  %37088 = bitcast i16* %37087 to <16 x i16>*
  %37089 = load <16 x i16>, <16 x i16>* %37088, align 2, !tbaa !396
  %37090 = getelementptr inbounds i16, i16* %37086, i64 17
  %37091 = bitcast i16* %37090 to <16 x i16>*
  %37092 = load <16 x i16>, <16 x i16>* %37091, align 2, !tbaa !396
  %37093 = bitcast i16* %37086 to <16 x i16>*
  %37094 = load <16 x i16>, <16 x i16>* %37093, align 2, !tbaa !396
  %37095 = getelementptr inbounds i16, i16* %37086, i64 16
  %37096 = bitcast i16* %37095 to <16 x i16>*
  %37097 = load <16 x i16>, <16 x i16>* %37096, align 2, !tbaa !396
  %37098 = getelementptr inbounds i16, i16* %37086, i64 2
  %37099 = bitcast i16* %37098 to <16 x i16>*
  %37100 = load <16 x i16>, <16 x i16>* %37099, align 2, !tbaa !396
  %37101 = getelementptr inbounds i16, i16* %37086, i64 18
  %37102 = bitcast i16* %37101 to <16 x i16>*
  %37103 = load <16 x i16>, <16 x i16>* %37102, align 2, !tbaa !396
  %37104 = getelementptr inbounds i16, i16* %37086, i64 3
  %37105 = bitcast i16* %37104 to <16 x i16>*
  %37106 = load <16 x i16>, <16 x i16>* %37105, align 2, !tbaa !396
  %37107 = getelementptr inbounds i16, i16* %37086, i64 19
  %37108 = bitcast i16* %37107 to <16 x i16>*
  %37109 = load <16 x i16>, <16 x i16>* %37108, align 2, !tbaa !396
  %37110 = getelementptr inbounds i16, i16* %37086, i64 4
  %37111 = bitcast i16* %37110 to <16 x i16>*
  %37112 = load <16 x i16>, <16 x i16>* %37111, align 2, !tbaa !396
  %37113 = getelementptr inbounds i16, i16* %37086, i64 20
  %37114 = bitcast i16* %37113 to <16 x i16>*
  %37115 = load <16 x i16>, <16 x i16>* %37114, align 2, !tbaa !396
  %37116 = getelementptr inbounds i16, i16* %37086, i64 6
  %37117 = bitcast i16* %37116 to <16 x i16>*
  %37118 = load <16 x i16>, <16 x i16>* %37117, align 2, !tbaa !396
  %37119 = getelementptr inbounds i16, i16* %37086, i64 22
  %37120 = bitcast i16* %37119 to <16 x i16>*
  %37121 = load <16 x i16>, <16 x i16>* %37120, align 2, !tbaa !396
  %37122 = getelementptr inbounds i16, i16* %37086, i64 5
  %37123 = bitcast i16* %37122 to <16 x i16>*
  %37124 = load <16 x i16>, <16 x i16>* %37123, align 2, !tbaa !396
  %37125 = getelementptr inbounds i16, i16* %37086, i64 21
  %37126 = bitcast i16* %37125 to <16 x i16>*
  %37127 = load <16 x i16>, <16 x i16>* %37126, align 2, !tbaa !396
  %37128 = add <16 x i16> %37094, %37089
  %37129 = add <16 x i16> %37128, %37100
  %37130 = add <16 x i16> %37129, %37106
  %37131 = add <16 x i16> %37130, %37112
  %37132 = add <16 x i16> %37131, %37118
  %37133 = add <16 x i16> %37132, %37124
  %37134 = add <16 x i16> %37097, %37092
  %37135 = add <16 x i16> %37134, %37103
  %37136 = add <16 x i16> %37135, %37109
  %37137 = add <16 x i16> %37136, %37115
  %37138 = add <16 x i16> %37137, %37121
  %37139 = add <16 x i16> %37138, %37127
  %37140 = shufflevector <16 x i16> %37133, <16 x i16> %37139, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37141 = udiv <32 x i16> %37140, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %37142 = shufflevector <32 x i16> %37141, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37143 = sext i32 %blur_x.s0.x.v1.base.s2427 to i64
  %37144 = add nsw i64 %37143, %36918
  %37145 = getelementptr inbounds i16, i16* %blur_x917, i64 %37144
  %37146 = bitcast i16* %37145 to <16 x i16>*
  store <16 x i16> %37142, <16 x i16>* %37146, align 2, !tbaa !399
  %37147 = shufflevector <32 x i16> %37141, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37148 = getelementptr inbounds i16, i16* %37145, i64 16
  %37149 = bitcast i16* %37148 to <16 x i16>*
  store <16 x i16> %37147, <16 x i16>* %37149, align 2, !tbaa !399
  br label %"consume blur_x2429"

"consume blur_x2429":                             ; preds = %"for blur_y.s0.x.x.rebased2418", %"produce blur_x2426"
  %37150 = sext i32 %blur_y.s0.x.v0.base.s2421 to i64
  %37151 = add nsw i64 %36921, %37150
  %37152 = getelementptr inbounds i16, i16* %blur_x917, i64 %37151
  %37153 = bitcast i16* %37152 to <16 x i16>*
  %37154 = load <16 x i16>, <16 x i16>* %37153, align 2, !tbaa !399
  %37155 = getelementptr inbounds i16, i16* %37152, i64 16
  %37156 = bitcast i16* %37155 to <16 x i16>*
  %37157 = load <16 x i16>, <16 x i16>* %37156, align 2, !tbaa !399
  %37158 = add nsw i64 %36924, %37150
  %37159 = getelementptr inbounds i16, i16* %blur_x917, i64 %37158
  %37160 = bitcast i16* %37159 to <16 x i16>*
  %37161 = load <16 x i16>, <16 x i16>* %37160, align 2, !tbaa !399
  %37162 = getelementptr inbounds i16, i16* %37159, i64 16
  %37163 = bitcast i16* %37162 to <16 x i16>*
  %37164 = load <16 x i16>, <16 x i16>* %37163, align 2, !tbaa !399
  %37165 = add nsw i64 %36927, %37150
  %37166 = getelementptr inbounds i16, i16* %blur_x917, i64 %37165
  %37167 = bitcast i16* %37166 to <16 x i16>*
  %37168 = load <16 x i16>, <16 x i16>* %37167, align 2, !tbaa !399
  %37169 = getelementptr inbounds i16, i16* %37166, i64 16
  %37170 = bitcast i16* %37169 to <16 x i16>*
  %37171 = load <16 x i16>, <16 x i16>* %37170, align 2, !tbaa !399
  %37172 = add nsw i64 %36930, %37150
  %37173 = getelementptr inbounds i16, i16* %blur_x917, i64 %37172
  %37174 = bitcast i16* %37173 to <16 x i16>*
  %37175 = load <16 x i16>, <16 x i16>* %37174, align 2, !tbaa !399
  %37176 = getelementptr inbounds i16, i16* %37173, i64 16
  %37177 = bitcast i16* %37176 to <16 x i16>*
  %37178 = load <16 x i16>, <16 x i16>* %37177, align 2, !tbaa !399
  %37179 = add nsw i64 %36933, %37150
  %37180 = getelementptr inbounds i16, i16* %blur_x917, i64 %37179
  %37181 = bitcast i16* %37180 to <16 x i16>*
  %37182 = load <16 x i16>, <16 x i16>* %37181, align 2, !tbaa !399
  %37183 = getelementptr inbounds i16, i16* %37180, i64 16
  %37184 = bitcast i16* %37183 to <16 x i16>*
  %37185 = load <16 x i16>, <16 x i16>* %37184, align 2, !tbaa !399
  %37186 = add nsw i64 %36936, %37150
  %37187 = getelementptr inbounds i16, i16* %blur_x917, i64 %37186
  %37188 = bitcast i16* %37187 to <16 x i16>*
  %37189 = load <16 x i16>, <16 x i16>* %37188, align 2, !tbaa !399
  %37190 = getelementptr inbounds i16, i16* %37187, i64 16
  %37191 = bitcast i16* %37190 to <16 x i16>*
  %37192 = load <16 x i16>, <16 x i16>* %37191, align 2, !tbaa !399
  %37193 = add nsw i64 %36939, %37150
  %37194 = getelementptr inbounds i16, i16* %blur_x917, i64 %37193
  %37195 = bitcast i16* %37194 to <16 x i16>*
  %37196 = load <16 x i16>, <16 x i16>* %37195, align 2, !tbaa !399
  %37197 = getelementptr inbounds i16, i16* %37194, i64 16
  %37198 = bitcast i16* %37197 to <16 x i16>*
  %37199 = load <16 x i16>, <16 x i16>* %37198, align 2, !tbaa !399
  %37200 = add <16 x i16> %37161, %37154
  %37201 = add <16 x i16> %37200, %37168
  %37202 = add <16 x i16> %37201, %37175
  %37203 = add <16 x i16> %37202, %37182
  %37204 = add <16 x i16> %37203, %37189
  %37205 = add <16 x i16> %37204, %37196
  %37206 = add <16 x i16> %37164, %37157
  %37207 = add <16 x i16> %37206, %37171
  %37208 = add <16 x i16> %37207, %37178
  %37209 = add <16 x i16> %37208, %37185
  %37210 = add <16 x i16> %37209, %37192
  %37211 = add <16 x i16> %37210, %37199
  %37212 = shufflevector <16 x i16> %37205, <16 x i16> %37211, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37213 = udiv <32 x i16> %37212, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %37214 = shufflevector <32 x i16> %37213, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37215 = add nsw i64 %36943, %37150
  %37216 = getelementptr inbounds i16, i16* %267, i64 %37215
  %37217 = bitcast i16* %37216 to <16 x i16>*
  store <16 x i16> %37214, <16 x i16>* %37217, align 2, !tbaa !401
  %37218 = shufflevector <32 x i16> %37213, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37219 = getelementptr inbounds i16, i16* %37216, i64 16
  %37220 = bitcast i16* %37219 to <16 x i16>*
  store <16 x i16> %37218, <16 x i16>* %37220, align 2, !tbaa !401
  %37221 = add nuw nsw i32 %blur_y.s0.x.x.rebased2420, 1
  %.not2648 = icmp eq i32 %37221, %t1727936
  br i1 %.not2648, label %"end for blur_y.s0.x.x.rebased2419", label %"for blur_y.s0.x.x.rebased2418"

after_bb2430:                                     ; preds = %"end for blur_y.s0.x.x.rebased2419", %"produce blur_x2433"
  br i1 %306, label %"for blur_y.s0.x.x.rebased2445.preheader", label %"end for blur_y.s0.x.x.rebased2446", !prof !386

"for blur_y.s0.x.x.rebased2445.preheader":        ; preds = %after_bb2430
  %37222 = sext i32 %t17561072 to i64
  %37223 = zext i32 %.pre-phi3669 to i64
  %37224 = mul nsw i64 %37223, %353
  %37225 = sub nsw i64 %37224, %302
  %37226 = zext i32 %.pre-phi3699 to i64
  %37227 = mul nsw i64 %37226, %353
  %37228 = sub nsw i64 %37227, %302
  %37229 = zext i32 %.pre-phi3673 to i64
  %37230 = mul nsw i64 %37229, %353
  %37231 = sub nsw i64 %37230, %302
  %37232 = zext i32 %.pre-phi3677 to i64
  %37233 = mul nsw i64 %37232, %353
  %37234 = sub nsw i64 %37233, %302
  %37235 = zext i32 %.pre-phi3681 to i64
  %37236 = mul nsw i64 %37235, %353
  %37237 = sub nsw i64 %37236, %302
  %37238 = zext i32 %.pre-phi3689 to i64
  %37239 = mul nsw i64 %37238, %353
  %37240 = sub nsw i64 %37239, %302
  %37241 = zext i32 %.pre-phi3685 to i64
  %37242 = mul nsw i64 %37241, %353
  %37243 = sub nsw i64 %37242, %302
  %37244 = sext i32 %a393 to i64
  %37245 = add nsw i64 %37244, 31
  %37246 = mul nsw i64 %37245, %350
  %37247 = add nsw i64 %37246, %354
  br label %"for blur_y.s0.x.x.rebased2445"

"produce blur_x2433":                             ; preds = %"end for blur_y.s0.x.x.rebased2419"
  %37248 = getelementptr inbounds i16, i16* %read_input860, i64 %537
  %37249 = getelementptr inbounds i16, i16* %37248, i64 -31
  %37250 = bitcast i16* %37249 to <16 x i16>*
  %37251 = load <16 x i16>, <16 x i16>* %37250, align 2, !tbaa !396
  %37252 = getelementptr inbounds i16, i16* %37248, i64 -15
  %37253 = bitcast i16* %37252 to <16 x i16>*
  %37254 = load <16 x i16>, <16 x i16>* %37253, align 2, !tbaa !396
  %37255 = getelementptr inbounds i16, i16* %37248, i64 -32
  %37256 = bitcast i16* %37255 to <16 x i16>*
  %37257 = load <16 x i16>, <16 x i16>* %37256, align 2, !tbaa !396
  %37258 = getelementptr inbounds i16, i16* %37248, i64 -16
  %37259 = bitcast i16* %37258 to <16 x i16>*
  %37260 = load <16 x i16>, <16 x i16>* %37259, align 2, !tbaa !396
  %37261 = getelementptr inbounds i16, i16* %37248, i64 -30
  %37262 = bitcast i16* %37261 to <16 x i16>*
  %37263 = load <16 x i16>, <16 x i16>* %37262, align 2, !tbaa !396
  %37264 = getelementptr inbounds i16, i16* %37248, i64 -14
  %37265 = bitcast i16* %37264 to <16 x i16>*
  %37266 = load <16 x i16>, <16 x i16>* %37265, align 2, !tbaa !396
  %37267 = getelementptr inbounds i16, i16* %37248, i64 -29
  %37268 = bitcast i16* %37267 to <16 x i16>*
  %37269 = load <16 x i16>, <16 x i16>* %37268, align 2, !tbaa !396
  %37270 = getelementptr inbounds i16, i16* %37248, i64 -13
  %37271 = bitcast i16* %37270 to <16 x i16>*
  %37272 = load <16 x i16>, <16 x i16>* %37271, align 2, !tbaa !396
  %37273 = getelementptr inbounds i16, i16* %37248, i64 -28
  %37274 = bitcast i16* %37273 to <16 x i16>*
  %37275 = load <16 x i16>, <16 x i16>* %37274, align 2, !tbaa !396
  %37276 = getelementptr inbounds i16, i16* %37248, i64 -12
  %37277 = bitcast i16* %37276 to <16 x i16>*
  %37278 = load <16 x i16>, <16 x i16>* %37277, align 2, !tbaa !396
  %37279 = getelementptr inbounds i16, i16* %37248, i64 -26
  %37280 = bitcast i16* %37279 to <16 x i16>*
  %37281 = load <16 x i16>, <16 x i16>* %37280, align 2, !tbaa !396
  %37282 = getelementptr inbounds i16, i16* %37248, i64 -10
  %37283 = bitcast i16* %37282 to <16 x i16>*
  %37284 = load <16 x i16>, <16 x i16>* %37283, align 2, !tbaa !396
  %37285 = getelementptr inbounds i16, i16* %37248, i64 -27
  %37286 = bitcast i16* %37285 to <16 x i16>*
  %37287 = load <16 x i16>, <16 x i16>* %37286, align 2, !tbaa !396
  %37288 = getelementptr inbounds i16, i16* %37248, i64 -11
  %37289 = bitcast i16* %37288 to <16 x i16>*
  %37290 = load <16 x i16>, <16 x i16>* %37289, align 2, !tbaa !396
  %37291 = add <16 x i16> %37257, %37251
  %37292 = add <16 x i16> %37291, %37263
  %37293 = add <16 x i16> %37292, %37269
  %37294 = add <16 x i16> %37293, %37275
  %37295 = add <16 x i16> %37294, %37281
  %37296 = add <16 x i16> %37295, %37287
  %37297 = add <16 x i16> %37260, %37254
  %37298 = add <16 x i16> %37297, %37266
  %37299 = add <16 x i16> %37298, %37272
  %37300 = add <16 x i16> %37299, %37278
  %37301 = add <16 x i16> %37300, %37284
  %37302 = add <16 x i16> %37301, %37290
  %37303 = shufflevector <16 x i16> %37296, <16 x i16> %37302, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37304 = udiv <32 x i16> %37303, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %37305 = shufflevector <32 x i16> %37304, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37306 = zext i32 %.pre-phi3689 to i64
  %37307 = mul nsw i64 %303, %37306
  %37308 = add nsw i64 %305, %37307
  %37309 = getelementptr inbounds i16, i16* %blur_x917, i64 %37308
  %37310 = getelementptr inbounds i16, i16* %37309, i64 -32
  %37311 = bitcast i16* %37310 to <16 x i16>*
  store <16 x i16> %37305, <16 x i16>* %37311, align 2, !tbaa !399
  %37312 = shufflevector <32 x i16> %37304, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37313 = getelementptr inbounds i16, i16* %37309, i64 -16
  %37314 = bitcast i16* %37313 to <16 x i16>*
  store <16 x i16> %37312, <16 x i16>* %37314, align 2, !tbaa !399
  %37315 = zext i32 %.pre-phi3669 to i64
  %37316 = mul nsw i64 %37315, %349
  %37317 = add nsw i64 %37316, %300
  %37318 = getelementptr inbounds i16, i16* %blur_x917, i64 %37317
  %37319 = getelementptr inbounds i16, i16* %37318, i64 -32
  %37320 = bitcast i16* %37319 to <16 x i16>*
  %37321 = load <16 x i16>, <16 x i16>* %37320, align 2, !tbaa !399
  %37322 = getelementptr inbounds i16, i16* %37318, i64 -16
  %37323 = bitcast i16* %37322 to <16 x i16>*
  %37324 = load <16 x i16>, <16 x i16>* %37323, align 2, !tbaa !399
  %37325 = zext i32 %.pre-phi3699 to i64
  %37326 = mul nsw i64 %37325, %349
  %37327 = add nsw i64 %37326, %300
  %37328 = getelementptr inbounds i16, i16* %blur_x917, i64 %37327
  %37329 = getelementptr inbounds i16, i16* %37328, i64 -32
  %37330 = bitcast i16* %37329 to <16 x i16>*
  %37331 = load <16 x i16>, <16 x i16>* %37330, align 2, !tbaa !399
  %37332 = getelementptr inbounds i16, i16* %37328, i64 -16
  %37333 = bitcast i16* %37332 to <16 x i16>*
  %37334 = load <16 x i16>, <16 x i16>* %37333, align 2, !tbaa !399
  %37335 = zext i32 %.pre-phi3673 to i64
  %37336 = mul nsw i64 %37335, %349
  %37337 = add nsw i64 %37336, %300
  %37338 = getelementptr inbounds i16, i16* %blur_x917, i64 %37337
  %37339 = getelementptr inbounds i16, i16* %37338, i64 -32
  %37340 = bitcast i16* %37339 to <16 x i16>*
  %37341 = load <16 x i16>, <16 x i16>* %37340, align 2, !tbaa !399
  %37342 = getelementptr inbounds i16, i16* %37338, i64 -16
  %37343 = bitcast i16* %37342 to <16 x i16>*
  %37344 = load <16 x i16>, <16 x i16>* %37343, align 2, !tbaa !399
  %37345 = zext i32 %.pre-phi3677 to i64
  %37346 = mul nsw i64 %37345, %349
  %37347 = add nsw i64 %37346, %300
  %37348 = getelementptr inbounds i16, i16* %blur_x917, i64 %37347
  %37349 = getelementptr inbounds i16, i16* %37348, i64 -32
  %37350 = bitcast i16* %37349 to <16 x i16>*
  %37351 = load <16 x i16>, <16 x i16>* %37350, align 2, !tbaa !399
  %37352 = getelementptr inbounds i16, i16* %37348, i64 -16
  %37353 = bitcast i16* %37352 to <16 x i16>*
  %37354 = load <16 x i16>, <16 x i16>* %37353, align 2, !tbaa !399
  %37355 = zext i32 %.pre-phi3681 to i64
  %37356 = mul nsw i64 %37355, %349
  %37357 = add nsw i64 %37356, %300
  %37358 = getelementptr inbounds i16, i16* %blur_x917, i64 %37357
  %37359 = getelementptr inbounds i16, i16* %37358, i64 -32
  %37360 = bitcast i16* %37359 to <16 x i16>*
  %37361 = load <16 x i16>, <16 x i16>* %37360, align 2, !tbaa !399
  %37362 = getelementptr inbounds i16, i16* %37358, i64 -16
  %37363 = bitcast i16* %37362 to <16 x i16>*
  %37364 = load <16 x i16>, <16 x i16>* %37363, align 2, !tbaa !399
  %37365 = mul nsw i64 %37306, %349
  %37366 = add nsw i64 %37365, %300
  %37367 = getelementptr inbounds i16, i16* %blur_x917, i64 %37366
  %37368 = getelementptr inbounds i16, i16* %37367, i64 -32
  %37369 = bitcast i16* %37368 to <16 x i16>*
  %37370 = load <16 x i16>, <16 x i16>* %37369, align 2, !tbaa !399
  %37371 = getelementptr inbounds i16, i16* %37367, i64 -16
  %37372 = bitcast i16* %37371 to <16 x i16>*
  %37373 = load <16 x i16>, <16 x i16>* %37372, align 2, !tbaa !399
  %37374 = zext i32 %.pre-phi3685 to i64
  %37375 = mul nsw i64 %37374, %349
  %37376 = add nsw i64 %37375, %300
  %37377 = getelementptr inbounds i16, i16* %blur_x917, i64 %37376
  %37378 = getelementptr inbounds i16, i16* %37377, i64 -32
  %37379 = bitcast i16* %37378 to <16 x i16>*
  %37380 = load <16 x i16>, <16 x i16>* %37379, align 2, !tbaa !399
  %37381 = getelementptr inbounds i16, i16* %37377, i64 -16
  %37382 = bitcast i16* %37381 to <16 x i16>*
  %37383 = load <16 x i16>, <16 x i16>* %37382, align 2, !tbaa !399
  %37384 = add <16 x i16> %37331, %37321
  %37385 = add <16 x i16> %37384, %37341
  %37386 = add <16 x i16> %37385, %37351
  %37387 = add <16 x i16> %37386, %37361
  %37388 = add <16 x i16> %37387, %37370
  %37389 = add <16 x i16> %37388, %37380
  %37390 = add <16 x i16> %37334, %37324
  %37391 = add <16 x i16> %37390, %37344
  %37392 = add <16 x i16> %37391, %37354
  %37393 = add <16 x i16> %37392, %37364
  %37394 = add <16 x i16> %37393, %37373
  %37395 = add <16 x i16> %37394, %37383
  %37396 = shufflevector <16 x i16> %37389, <16 x i16> %37395, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37397 = udiv <32 x i16> %37396, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %37398 = shufflevector <32 x i16> %37397, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37399 = sext i32 %a393 to i64
  %37400 = add nsw i64 %37399, 31
  %37401 = mul nsw i64 %37400, %350
  %37402 = add nsw i64 %352, %37401
  %37403 = getelementptr inbounds i16, i16* %267, i64 %37402
  %37404 = getelementptr inbounds i16, i16* %37403, i64 -32
  %37405 = bitcast i16* %37404 to <16 x i16>*
  store <16 x i16> %37398, <16 x i16>* %37405, align 2, !tbaa !401
  %37406 = shufflevector <32 x i16> %37397, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37407 = getelementptr inbounds i16, i16* %37403, i64 -16
  %37408 = bitcast i16* %37407 to <16 x i16>*
  store <16 x i16> %37406, <16 x i16>* %37408, align 2, !tbaa !401
  br label %after_bb2430

"for blur_y.s0.x.x.rebased2445":                  ; preds = %"for blur_y.s0.x.x.rebased2445.preheader", %"consume blur_x2453"
  %indvars.iv3570 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2445.preheader" ], [ %indvars.iv.next3571, %"consume blur_x2453" ]
  %37409 = add nsw i64 %indvars.iv3570, %307
  %37410 = icmp slt i64 %37409, 1
  %37411 = trunc i64 %37409 to i32
  %37412 = shl nsw i32 %37411, 5
  %37413 = icmp sgt i32 %202, %37412
  %37414 = or i1 %37410, %37413
  br i1 %37414, label %"produce blur_x2451", label %"for blur_y.s0.x.x.rebased2445.consume blur_x2453_crit_edge"

"for blur_y.s0.x.x.rebased2445.consume blur_x2453_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2445"
  %.pre3760 = shl nsw i64 %37409, 5
  br label %"consume blur_x2453"

"end for blur_y.s0.x.x.rebased2446":              ; preds = %"consume blur_x2453", %after_bb2430
  br i1 %308, label %"for blur_y.s0.x.x.rebased2461.preheader", label %"end for blur_y.s0.x.x.rebased2462", !prof !386

"for blur_y.s0.x.x.rebased2461.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2446"
  %37415 = sext i32 %t17561072 to i64
  %37416 = zext i32 %.pre-phi3669 to i64
  %37417 = mul nsw i64 %37416, %353
  %37418 = sub nsw i64 %37417, %302
  %37419 = zext i32 %.pre-phi3699 to i64
  %37420 = mul nsw i64 %37419, %353
  %37421 = sub nsw i64 %37420, %302
  %37422 = zext i32 %.pre-phi3673 to i64
  %37423 = mul nsw i64 %37422, %353
  %37424 = sub nsw i64 %37423, %302
  %37425 = zext i32 %.pre-phi3677 to i64
  %37426 = mul nsw i64 %37425, %353
  %37427 = sub nsw i64 %37426, %302
  %37428 = zext i32 %.pre-phi3681 to i64
  %37429 = mul nsw i64 %37428, %353
  %37430 = sub nsw i64 %37429, %302
  %37431 = zext i32 %.pre-phi3689 to i64
  %37432 = mul nsw i64 %37431, %353
  %37433 = sub nsw i64 %37432, %302
  %37434 = zext i32 %.pre-phi3685 to i64
  %37435 = mul nsw i64 %37434, %353
  %37436 = sub nsw i64 %37435, %302
  %37437 = sext i32 %a393 to i64
  %37438 = add nsw i64 %37437, 31
  %37439 = mul nsw i64 %37438, %350
  %37440 = add nsw i64 %37439, %354
  br label %"for blur_y.s0.x.x.rebased2461"

"produce blur_x2451":                             ; preds = %"for blur_y.s0.x.x.rebased2445"
  %t12482452 = add nsw i32 %539, %37412
  %37441 = sext i32 %t12482452 to i64
  %37442 = getelementptr inbounds i16, i16* %read_input860, i64 %37441
  %37443 = getelementptr inbounds i16, i16* %37442, i64 1
  %37444 = bitcast i16* %37443 to <16 x i16>*
  %37445 = load <16 x i16>, <16 x i16>* %37444, align 2, !tbaa !396
  %37446 = getelementptr inbounds i16, i16* %37442, i64 17
  %37447 = bitcast i16* %37446 to <16 x i16>*
  %37448 = load <16 x i16>, <16 x i16>* %37447, align 2, !tbaa !396
  %37449 = bitcast i16* %37442 to <16 x i16>*
  %37450 = load <16 x i16>, <16 x i16>* %37449, align 2, !tbaa !396
  %37451 = getelementptr inbounds i16, i16* %37442, i64 16
  %37452 = bitcast i16* %37451 to <16 x i16>*
  %37453 = load <16 x i16>, <16 x i16>* %37452, align 2, !tbaa !396
  %37454 = getelementptr inbounds i16, i16* %37442, i64 2
  %37455 = bitcast i16* %37454 to <16 x i16>*
  %37456 = load <16 x i16>, <16 x i16>* %37455, align 2, !tbaa !396
  %37457 = getelementptr inbounds i16, i16* %37442, i64 18
  %37458 = bitcast i16* %37457 to <16 x i16>*
  %37459 = load <16 x i16>, <16 x i16>* %37458, align 2, !tbaa !396
  %37460 = getelementptr inbounds i16, i16* %37442, i64 3
  %37461 = bitcast i16* %37460 to <16 x i16>*
  %37462 = load <16 x i16>, <16 x i16>* %37461, align 2, !tbaa !396
  %37463 = getelementptr inbounds i16, i16* %37442, i64 19
  %37464 = bitcast i16* %37463 to <16 x i16>*
  %37465 = load <16 x i16>, <16 x i16>* %37464, align 2, !tbaa !396
  %37466 = getelementptr inbounds i16, i16* %37442, i64 4
  %37467 = bitcast i16* %37466 to <16 x i16>*
  %37468 = load <16 x i16>, <16 x i16>* %37467, align 2, !tbaa !396
  %37469 = getelementptr inbounds i16, i16* %37442, i64 20
  %37470 = bitcast i16* %37469 to <16 x i16>*
  %37471 = load <16 x i16>, <16 x i16>* %37470, align 2, !tbaa !396
  %37472 = getelementptr inbounds i16, i16* %37442, i64 6
  %37473 = bitcast i16* %37472 to <16 x i16>*
  %37474 = load <16 x i16>, <16 x i16>* %37473, align 2, !tbaa !396
  %37475 = getelementptr inbounds i16, i16* %37442, i64 22
  %37476 = bitcast i16* %37475 to <16 x i16>*
  %37477 = load <16 x i16>, <16 x i16>* %37476, align 2, !tbaa !396
  %37478 = getelementptr inbounds i16, i16* %37442, i64 5
  %37479 = bitcast i16* %37478 to <16 x i16>*
  %37480 = load <16 x i16>, <16 x i16>* %37479, align 2, !tbaa !396
  %37481 = getelementptr inbounds i16, i16* %37442, i64 21
  %37482 = bitcast i16* %37481 to <16 x i16>*
  %37483 = load <16 x i16>, <16 x i16>* %37482, align 2, !tbaa !396
  %37484 = add <16 x i16> %37450, %37445
  %37485 = add <16 x i16> %37484, %37456
  %37486 = add <16 x i16> %37485, %37462
  %37487 = add <16 x i16> %37486, %37468
  %37488 = add <16 x i16> %37487, %37474
  %37489 = add <16 x i16> %37488, %37480
  %37490 = add <16 x i16> %37453, %37448
  %37491 = add <16 x i16> %37490, %37459
  %37492 = add <16 x i16> %37491, %37465
  %37493 = add <16 x i16> %37492, %37471
  %37494 = add <16 x i16> %37493, %37477
  %37495 = add <16 x i16> %37494, %37483
  %37496 = shufflevector <16 x i16> %37489, <16 x i16> %37495, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37497 = udiv <32 x i16> %37496, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %37498 = shufflevector <32 x i16> %37497, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37499 = shl nsw i64 %37409, 5
  %37500 = add nsw i64 %37499, %37222
  %37501 = getelementptr inbounds i16, i16* %blur_x917, i64 %37500
  %37502 = bitcast i16* %37501 to <16 x i16>*
  store <16 x i16> %37498, <16 x i16>* %37502, align 2, !tbaa !399
  %37503 = shufflevector <32 x i16> %37497, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37504 = getelementptr inbounds i16, i16* %37501, i64 16
  %37505 = bitcast i16* %37504 to <16 x i16>*
  store <16 x i16> %37503, <16 x i16>* %37505, align 2, !tbaa !399
  br label %"consume blur_x2453"

"consume blur_x2453":                             ; preds = %"for blur_y.s0.x.x.rebased2445.consume blur_x2453_crit_edge", %"produce blur_x2451"
  %.pre-phi3761 = phi i64 [ %.pre3760, %"for blur_y.s0.x.x.rebased2445.consume blur_x2453_crit_edge" ], [ %37499, %"produce blur_x2451" ]
  %37506 = add nsw i64 %37225, %.pre-phi3761
  %37507 = getelementptr inbounds i16, i16* %blur_x917, i64 %37506
  %37508 = bitcast i16* %37507 to <16 x i16>*
  %37509 = load <16 x i16>, <16 x i16>* %37508, align 2, !tbaa !399
  %37510 = getelementptr inbounds i16, i16* %37507, i64 16
  %37511 = bitcast i16* %37510 to <16 x i16>*
  %37512 = load <16 x i16>, <16 x i16>* %37511, align 2, !tbaa !399
  %37513 = add nsw i64 %37228, %.pre-phi3761
  %37514 = getelementptr inbounds i16, i16* %blur_x917, i64 %37513
  %37515 = bitcast i16* %37514 to <16 x i16>*
  %37516 = load <16 x i16>, <16 x i16>* %37515, align 2, !tbaa !399
  %37517 = getelementptr inbounds i16, i16* %37514, i64 16
  %37518 = bitcast i16* %37517 to <16 x i16>*
  %37519 = load <16 x i16>, <16 x i16>* %37518, align 2, !tbaa !399
  %37520 = add nsw i64 %37231, %.pre-phi3761
  %37521 = getelementptr inbounds i16, i16* %blur_x917, i64 %37520
  %37522 = bitcast i16* %37521 to <16 x i16>*
  %37523 = load <16 x i16>, <16 x i16>* %37522, align 2, !tbaa !399
  %37524 = getelementptr inbounds i16, i16* %37521, i64 16
  %37525 = bitcast i16* %37524 to <16 x i16>*
  %37526 = load <16 x i16>, <16 x i16>* %37525, align 2, !tbaa !399
  %37527 = add nsw i64 %37234, %.pre-phi3761
  %37528 = getelementptr inbounds i16, i16* %blur_x917, i64 %37527
  %37529 = bitcast i16* %37528 to <16 x i16>*
  %37530 = load <16 x i16>, <16 x i16>* %37529, align 2, !tbaa !399
  %37531 = getelementptr inbounds i16, i16* %37528, i64 16
  %37532 = bitcast i16* %37531 to <16 x i16>*
  %37533 = load <16 x i16>, <16 x i16>* %37532, align 2, !tbaa !399
  %37534 = add nsw i64 %37237, %.pre-phi3761
  %37535 = getelementptr inbounds i16, i16* %blur_x917, i64 %37534
  %37536 = bitcast i16* %37535 to <16 x i16>*
  %37537 = load <16 x i16>, <16 x i16>* %37536, align 2, !tbaa !399
  %37538 = getelementptr inbounds i16, i16* %37535, i64 16
  %37539 = bitcast i16* %37538 to <16 x i16>*
  %37540 = load <16 x i16>, <16 x i16>* %37539, align 2, !tbaa !399
  %37541 = add nsw i64 %37240, %.pre-phi3761
  %37542 = getelementptr inbounds i16, i16* %blur_x917, i64 %37541
  %37543 = bitcast i16* %37542 to <16 x i16>*
  %37544 = load <16 x i16>, <16 x i16>* %37543, align 2, !tbaa !399
  %37545 = getelementptr inbounds i16, i16* %37542, i64 16
  %37546 = bitcast i16* %37545 to <16 x i16>*
  %37547 = load <16 x i16>, <16 x i16>* %37546, align 2, !tbaa !399
  %37548 = add nsw i64 %37243, %.pre-phi3761
  %37549 = getelementptr inbounds i16, i16* %blur_x917, i64 %37548
  %37550 = bitcast i16* %37549 to <16 x i16>*
  %37551 = load <16 x i16>, <16 x i16>* %37550, align 2, !tbaa !399
  %37552 = getelementptr inbounds i16, i16* %37549, i64 16
  %37553 = bitcast i16* %37552 to <16 x i16>*
  %37554 = load <16 x i16>, <16 x i16>* %37553, align 2, !tbaa !399
  %37555 = add <16 x i16> %37516, %37509
  %37556 = add <16 x i16> %37555, %37523
  %37557 = add <16 x i16> %37556, %37530
  %37558 = add <16 x i16> %37557, %37537
  %37559 = add <16 x i16> %37558, %37544
  %37560 = add <16 x i16> %37559, %37551
  %37561 = add <16 x i16> %37519, %37512
  %37562 = add <16 x i16> %37561, %37526
  %37563 = add <16 x i16> %37562, %37533
  %37564 = add <16 x i16> %37563, %37540
  %37565 = add <16 x i16> %37564, %37547
  %37566 = add <16 x i16> %37565, %37554
  %37567 = shufflevector <16 x i16> %37560, <16 x i16> %37566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37568 = udiv <32 x i16> %37567, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %37569 = shufflevector <32 x i16> %37568, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37570 = add nsw i64 %37247, %.pre-phi3761
  %37571 = getelementptr inbounds i16, i16* %267, i64 %37570
  %37572 = bitcast i16* %37571 to <16 x i16>*
  store <16 x i16> %37569, <16 x i16>* %37572, align 2, !tbaa !401
  %37573 = shufflevector <32 x i16> %37568, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37574 = getelementptr inbounds i16, i16* %37571, i64 16
  %37575 = bitcast i16* %37574 to <16 x i16>*
  store <16 x i16> %37573, <16 x i16>* %37575, align 2, !tbaa !401
  %indvars.iv.next3571 = add nuw nsw i64 %indvars.iv3570, 1
  %.not2646 = icmp eq i64 %indvars.iv.next3571, %546
  br i1 %.not2646, label %"end for blur_y.s0.x.x.rebased2446", label %"for blur_y.s0.x.x.rebased2445"

"for blur_y.s0.x.x.rebased2461":                  ; preds = %"for blur_y.s0.x.x.rebased2461.preheader", %"consume blur_x2472"
  %blur_y.s0.x.x.rebased2463 = phi i32 [ %37719, %"consume blur_x2472" ], [ 0, %"for blur_y.s0.x.x.rebased2461.preheader" ]
  %37576 = add nsw i32 %blur_y.s0.x.x.rebased2463, %t1670852
  %a6470 = shl nsw i32 %37576, 5
  %37577 = icmp sgt i32 %t1691, %a6470
  %blur_y.s0.x.v0.base.s2464 = select i1 %37577, i32 %a6470, i32 %t1691
  %37578 = icmp slt i32 %37576, 1
  %37579 = icmp sgt i32 %202, %a6470
  %37580 = or i1 %37578, %37579
  br i1 %37580, label %"produce blur_x2469", label %"consume blur_x2472"

"end for blur_y.s0.x.x.rebased2462":              ; preds = %"consume blur_x2472", %"end for blur_y.s0.x.x.rebased2446"
  %37581 = add nuw nsw i32 %blur_y.s0.y.y856, 1
  %.not2644 = icmp eq i32 %37581, %t1656853
  br i1 %.not2644, label %if.then.i2977.loopexit, label %"for blur_y.s0.y.y854"

"produce blur_x2469":                             ; preds = %"for blur_y.s0.x.x.rebased2461"
  %37582 = icmp slt i32 %blur_y.s0.x.v0.base.s2464, %202
  %blur_x.s0.x.v1.base.s2470 = select i1 %37582, i32 %blur_y.s0.x.v0.base.s2464, i32 %202
  %t12532471 = add nsw i32 %539, %blur_x.s0.x.v1.base.s2470
  %37583 = sext i32 %t12532471 to i64
  %37584 = getelementptr inbounds i16, i16* %read_input860, i64 %37583
  %37585 = getelementptr inbounds i16, i16* %37584, i64 1
  %37586 = bitcast i16* %37585 to <16 x i16>*
  %37587 = load <16 x i16>, <16 x i16>* %37586, align 2, !tbaa !396
  %37588 = getelementptr inbounds i16, i16* %37584, i64 17
  %37589 = bitcast i16* %37588 to <16 x i16>*
  %37590 = load <16 x i16>, <16 x i16>* %37589, align 2, !tbaa !396
  %37591 = bitcast i16* %37584 to <16 x i16>*
  %37592 = load <16 x i16>, <16 x i16>* %37591, align 2, !tbaa !396
  %37593 = getelementptr inbounds i16, i16* %37584, i64 16
  %37594 = bitcast i16* %37593 to <16 x i16>*
  %37595 = load <16 x i16>, <16 x i16>* %37594, align 2, !tbaa !396
  %37596 = getelementptr inbounds i16, i16* %37584, i64 2
  %37597 = bitcast i16* %37596 to <16 x i16>*
  %37598 = load <16 x i16>, <16 x i16>* %37597, align 2, !tbaa !396
  %37599 = getelementptr inbounds i16, i16* %37584, i64 18
  %37600 = bitcast i16* %37599 to <16 x i16>*
  %37601 = load <16 x i16>, <16 x i16>* %37600, align 2, !tbaa !396
  %37602 = getelementptr inbounds i16, i16* %37584, i64 3
  %37603 = bitcast i16* %37602 to <16 x i16>*
  %37604 = load <16 x i16>, <16 x i16>* %37603, align 2, !tbaa !396
  %37605 = getelementptr inbounds i16, i16* %37584, i64 19
  %37606 = bitcast i16* %37605 to <16 x i16>*
  %37607 = load <16 x i16>, <16 x i16>* %37606, align 2, !tbaa !396
  %37608 = getelementptr inbounds i16, i16* %37584, i64 4
  %37609 = bitcast i16* %37608 to <16 x i16>*
  %37610 = load <16 x i16>, <16 x i16>* %37609, align 2, !tbaa !396
  %37611 = getelementptr inbounds i16, i16* %37584, i64 20
  %37612 = bitcast i16* %37611 to <16 x i16>*
  %37613 = load <16 x i16>, <16 x i16>* %37612, align 2, !tbaa !396
  %37614 = getelementptr inbounds i16, i16* %37584, i64 6
  %37615 = bitcast i16* %37614 to <16 x i16>*
  %37616 = load <16 x i16>, <16 x i16>* %37615, align 2, !tbaa !396
  %37617 = getelementptr inbounds i16, i16* %37584, i64 22
  %37618 = bitcast i16* %37617 to <16 x i16>*
  %37619 = load <16 x i16>, <16 x i16>* %37618, align 2, !tbaa !396
  %37620 = getelementptr inbounds i16, i16* %37584, i64 5
  %37621 = bitcast i16* %37620 to <16 x i16>*
  %37622 = load <16 x i16>, <16 x i16>* %37621, align 2, !tbaa !396
  %37623 = getelementptr inbounds i16, i16* %37584, i64 21
  %37624 = bitcast i16* %37623 to <16 x i16>*
  %37625 = load <16 x i16>, <16 x i16>* %37624, align 2, !tbaa !396
  %37626 = add <16 x i16> %37592, %37587
  %37627 = add <16 x i16> %37626, %37598
  %37628 = add <16 x i16> %37627, %37604
  %37629 = add <16 x i16> %37628, %37610
  %37630 = add <16 x i16> %37629, %37616
  %37631 = add <16 x i16> %37630, %37622
  %37632 = add <16 x i16> %37595, %37590
  %37633 = add <16 x i16> %37632, %37601
  %37634 = add <16 x i16> %37633, %37607
  %37635 = add <16 x i16> %37634, %37613
  %37636 = add <16 x i16> %37635, %37619
  %37637 = add <16 x i16> %37636, %37625
  %37638 = shufflevector <16 x i16> %37631, <16 x i16> %37637, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37639 = udiv <32 x i16> %37638, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %37640 = shufflevector <32 x i16> %37639, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37641 = sext i32 %blur_x.s0.x.v1.base.s2470 to i64
  %37642 = add nsw i64 %37641, %37415
  %37643 = getelementptr inbounds i16, i16* %blur_x917, i64 %37642
  %37644 = bitcast i16* %37643 to <16 x i16>*
  store <16 x i16> %37640, <16 x i16>* %37644, align 2, !tbaa !399
  %37645 = shufflevector <32 x i16> %37639, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37646 = getelementptr inbounds i16, i16* %37643, i64 16
  %37647 = bitcast i16* %37646 to <16 x i16>*
  store <16 x i16> %37645, <16 x i16>* %37647, align 2, !tbaa !399
  br label %"consume blur_x2472"

"consume blur_x2472":                             ; preds = %"for blur_y.s0.x.x.rebased2461", %"produce blur_x2469"
  %37648 = sext i32 %blur_y.s0.x.v0.base.s2464 to i64
  %37649 = add nsw i64 %37418, %37648
  %37650 = getelementptr inbounds i16, i16* %blur_x917, i64 %37649
  %37651 = bitcast i16* %37650 to <16 x i16>*
  %37652 = load <16 x i16>, <16 x i16>* %37651, align 2, !tbaa !399
  %37653 = getelementptr inbounds i16, i16* %37650, i64 16
  %37654 = bitcast i16* %37653 to <16 x i16>*
  %37655 = load <16 x i16>, <16 x i16>* %37654, align 2, !tbaa !399
  %37656 = add nsw i64 %37421, %37648
  %37657 = getelementptr inbounds i16, i16* %blur_x917, i64 %37656
  %37658 = bitcast i16* %37657 to <16 x i16>*
  %37659 = load <16 x i16>, <16 x i16>* %37658, align 2, !tbaa !399
  %37660 = getelementptr inbounds i16, i16* %37657, i64 16
  %37661 = bitcast i16* %37660 to <16 x i16>*
  %37662 = load <16 x i16>, <16 x i16>* %37661, align 2, !tbaa !399
  %37663 = add nsw i64 %37424, %37648
  %37664 = getelementptr inbounds i16, i16* %blur_x917, i64 %37663
  %37665 = bitcast i16* %37664 to <16 x i16>*
  %37666 = load <16 x i16>, <16 x i16>* %37665, align 2, !tbaa !399
  %37667 = getelementptr inbounds i16, i16* %37664, i64 16
  %37668 = bitcast i16* %37667 to <16 x i16>*
  %37669 = load <16 x i16>, <16 x i16>* %37668, align 2, !tbaa !399
  %37670 = add nsw i64 %37427, %37648
  %37671 = getelementptr inbounds i16, i16* %blur_x917, i64 %37670
  %37672 = bitcast i16* %37671 to <16 x i16>*
  %37673 = load <16 x i16>, <16 x i16>* %37672, align 2, !tbaa !399
  %37674 = getelementptr inbounds i16, i16* %37671, i64 16
  %37675 = bitcast i16* %37674 to <16 x i16>*
  %37676 = load <16 x i16>, <16 x i16>* %37675, align 2, !tbaa !399
  %37677 = add nsw i64 %37430, %37648
  %37678 = getelementptr inbounds i16, i16* %blur_x917, i64 %37677
  %37679 = bitcast i16* %37678 to <16 x i16>*
  %37680 = load <16 x i16>, <16 x i16>* %37679, align 2, !tbaa !399
  %37681 = getelementptr inbounds i16, i16* %37678, i64 16
  %37682 = bitcast i16* %37681 to <16 x i16>*
  %37683 = load <16 x i16>, <16 x i16>* %37682, align 2, !tbaa !399
  %37684 = add nsw i64 %37433, %37648
  %37685 = getelementptr inbounds i16, i16* %blur_x917, i64 %37684
  %37686 = bitcast i16* %37685 to <16 x i16>*
  %37687 = load <16 x i16>, <16 x i16>* %37686, align 2, !tbaa !399
  %37688 = getelementptr inbounds i16, i16* %37685, i64 16
  %37689 = bitcast i16* %37688 to <16 x i16>*
  %37690 = load <16 x i16>, <16 x i16>* %37689, align 2, !tbaa !399
  %37691 = add nsw i64 %37436, %37648
  %37692 = getelementptr inbounds i16, i16* %blur_x917, i64 %37691
  %37693 = bitcast i16* %37692 to <16 x i16>*
  %37694 = load <16 x i16>, <16 x i16>* %37693, align 2, !tbaa !399
  %37695 = getelementptr inbounds i16, i16* %37692, i64 16
  %37696 = bitcast i16* %37695 to <16 x i16>*
  %37697 = load <16 x i16>, <16 x i16>* %37696, align 2, !tbaa !399
  %37698 = add <16 x i16> %37659, %37652
  %37699 = add <16 x i16> %37698, %37666
  %37700 = add <16 x i16> %37699, %37673
  %37701 = add <16 x i16> %37700, %37680
  %37702 = add <16 x i16> %37701, %37687
  %37703 = add <16 x i16> %37702, %37694
  %37704 = add <16 x i16> %37662, %37655
  %37705 = add <16 x i16> %37704, %37669
  %37706 = add <16 x i16> %37705, %37676
  %37707 = add <16 x i16> %37706, %37683
  %37708 = add <16 x i16> %37707, %37690
  %37709 = add <16 x i16> %37708, %37697
  %37710 = shufflevector <16 x i16> %37703, <16 x i16> %37709, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37711 = udiv <32 x i16> %37710, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %37712 = shufflevector <32 x i16> %37711, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37713 = add nsw i64 %37440, %37648
  %37714 = getelementptr inbounds i16, i16* %267, i64 %37713
  %37715 = bitcast i16* %37714 to <16 x i16>*
  store <16 x i16> %37712, <16 x i16>* %37715, align 2, !tbaa !401
  %37716 = shufflevector <32 x i16> %37711, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37717 = getelementptr inbounds i16, i16* %37714, i64 16
  %37718 = bitcast i16* %37717 to <16 x i16>*
  store <16 x i16> %37716, <16 x i16>* %37718, align 2, !tbaa !401
  %37719 = add nuw nsw i32 %blur_y.s0.x.x.rebased2463, 1
  %.not2645 = icmp eq i32 %37719, %t1727936
  br i1 %.not2645, label %"end for blur_y.s0.x.x.rebased2462", label %"for blur_y.s0.x.x.rebased2461"
}

; Function Attrs: nounwind
define i32 @blur7x7_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @blur7x7(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #18
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @blur7x7_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @blur7x7_metadata_storage
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.0(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.1(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.2(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.3(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.4(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.5(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.6(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.7(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.8(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.9(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.10(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.11(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.12(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.13(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.14(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.15(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.16(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.17(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.18(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.19(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.20(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.21(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.22(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.23(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.24(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.25(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.26(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.27(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.28(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.29(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.30(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.31(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.32(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.33(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.34(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.35(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.36(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.37(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.38(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.39(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.40(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.41(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.42(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.43(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.44(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.45(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.46(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.47(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.48(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.49(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.50(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.51(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.52(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.53(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.54(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.55(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.56(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.57(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.58(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.59(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.60(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.61(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.62(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.63(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.64(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.65(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.66(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.67(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.68(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.69(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.70(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.71(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.72(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.73(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.74(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.75(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.76(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.77(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.78(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.79(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.80(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.81(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.82(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.83(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.84(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.85(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.86(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.87(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.88(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.89(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.90(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.91(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.92(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.93(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.94(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.95(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.96(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.97(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.98(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.99(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.100(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.101(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.102(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.103(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.104(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.105(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.106(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.107(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.108(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.109(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.110(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.111(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.112(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.113(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.114(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.115(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.116(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.117(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.118(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.119(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.120(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.121(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.122(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.123(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.124(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.125(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.126(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.127(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.128(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.129(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.130(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.131(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.132(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.133(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.134(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.135(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.136(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.137(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.138(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.139(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.140(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.141(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.142(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.143(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.144(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.145(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.146(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.147(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.148(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.149(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.150(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.151(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.152(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.153(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.154(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.155(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.156(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.157(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.158(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.159(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.160(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.161(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.162(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.163(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.164(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.165(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.166(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.167(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.168(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.169(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.170(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.171(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.172(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.173(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.174(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.175(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.176(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.177(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.178(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.179(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.180(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.181(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.182(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.183(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.184(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.185(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.186(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.187(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.188(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.189(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.190(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.191(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.192(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.193(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.194(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.195(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.196(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.197(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.198(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.199(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.200(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.201(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.202(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.203(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.204(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.205(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.206(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.207(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.208(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: norecurse nounwind readnone willreturn
define <32 x i16> @hydride.node.blur7x7_x86_depth3_muchen.209(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4, <32 x i16> %arg.5, <32 x i16> %arg.6) local_unnamed_addr #12 {
entry:
  %0 = add <32 x i16> %arg.1, %arg
  %1 = add <32 x i16> %0, %arg.2
  %2 = add <32 x i16> %1, %arg.3
  %3 = add <32 x i16> %2, %arg.4
  %4 = add <32 x i16> %3, %arg.5
  %5 = add <32 x i16> %4, %arg.6
  %6 = udiv <32 x i16> %5, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <32 x i16> %6
}

; Function Attrs: nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32>, <8 x i32*>, i32 immarg, <8 x i1>) #13

; Function Attrs: nofree nosync nounwind readonly willreturn
declare <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*>, i32 immarg, <4 x i1>, <4 x i32>) #14

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v4i64(<4 x i64>) #15

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind willreturn writeonly }
attributes #14 = { nofree nosync nounwind readonly willreturn }
attributes #15 = { nofree nosync nounwind readnone willreturn }
attributes #16 = { nobuiltin nounwind "no-builtins" }
attributes #17 = { nobuiltin "no-builtins" }
attributes #18 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"cascadelake"}
!4 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long", !12, i64 0}
!20 = !{!21, !11, i64 0}
!21 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !22, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !23, i64 80, !11, i64 88, !23, i64 96, !11, i64 104, !23, i64 112, !23, i64 116, !23, i64 120, !16, i64 124}
!22 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !23, i64 32, !23, i64 36, !23, i64 40, !23, i64 44, !16, i64 48}
!23 = !{!"int", !12, i64 0}
!24 = !{!21, !23, i64 36}
!25 = !{!21, !23, i64 40}
!26 = !{!21, !16, i64 48}
!27 = !{!21, !11, i64 24}
!28 = !{!21, !23, i64 32}
!29 = !{!21, !11, i64 8}
!30 = !{!21, !23, i64 44}
!31 = !{!21, !11, i64 16}
!32 = !{!21, !11, i64 56}
!33 = !{!21, !11, i64 104}
!34 = !{!21, !23, i64 116}
!35 = !{!21, !23, i64 112}
!36 = !{!21, !23, i64 120}
!37 = !{!21, !16, i64 124}
!38 = !{!21, !11, i64 72}
!39 = !{!21, !23, i64 80}
!40 = !{!21, !11, i64 88}
!41 = !{!42, !42, i64 0}
!42 = !{!"vtable pointer", !13, i64 0}
!43 = !{!44, !11, i64 8}
!44 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!45 = !{!46, !16, i64 2121}
!46 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !47, i64 0, !23, i64 8, !23, i64 12, !11, i64 16, !23, i64 24, !23, i64 28, !23, i64 32, !48, i64 40, !48, i64 48, !48, i64 56, !23, i64 64, !23, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !23, i64 2124}
!47 = !{!"_ZTS12halide_mutex", !12, i64 0}
!48 = !{!"_ZTS11halide_cond", !12, i64 0}
!49 = distinct !{!49, !50}
!50 = !{!"llvm.loop.mustprogress"}
!51 = !{!46, !23, i64 8}
!52 = !{!46, !23, i64 24}
!53 = !{!46, !23, i64 2124}
!54 = !{!46, !23, i64 28}
!55 = distinct !{!55, !50}
!56 = !{!21, !23, i64 96}
!57 = !{!46, !11, i64 16}
!58 = !{!21, !11, i64 64}
!59 = !{!46, !23, i64 68}
!60 = !{!46, !23, i64 32}
!61 = distinct !{!61, !50}
!62 = distinct !{!62, !50}
!63 = !{!46, !16, i64 2120}
!64 = distinct !{!64, !50}
!65 = !{!66, !11, i64 0}
!66 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !23, i64 8}
!67 = !{!66, !23, i64 8}
!68 = distinct !{!68, !50}
!69 = !{!46, !23, i64 64}
!70 = distinct !{!70, !50}
!71 = distinct !{!71, !50}
!72 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !73, i64 88, i64 8, !10, i64 96, i64 4, !73, i64 104, i64 8, !10, i64 112, i64 4, !73, i64 116, i64 4, !73, i64 120, i64 4, !73, i64 124, i64 1, !15}
!73 = !{!23, !23, i64 0}
!74 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 28, i64 4, !73, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !73, i64 80, i64 8, !10, i64 88, i64 4, !73, i64 96, i64 8, !10, i64 104, i64 4, !73, i64 108, i64 4, !73, i64 112, i64 4, !73, i64 116, i64 1, !15}
!75 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 32, i64 8, !10, i64 40, i64 4, !73, i64 48, i64 8, !10, i64 56, i64 4, !73, i64 60, i64 4, !73, i64 64, i64 4, !73, i64 68, i64 1, !15}
!76 = !{i64 0, i64 8, !10, i64 8, i64 4, !73, i64 12, i64 4, !73, i64 16, i64 4, !73, i64 20, i64 1, !15}
!77 = distinct !{!77, !50}
!78 = distinct !{!78, !50}
!79 = !{!80, !11, i64 144}
!80 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !81, i64 0, !84, i64 136, !11, i64 144, !84, i64 152}
!81 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !82, i64 0, !83, i64 64, !16, i64 128}
!82 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!83 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!84 = !{!"long long", !12, i64 0}
!85 = !{!86, !11, i64 16}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !87, i64 0, !11, i64 8, !11, i64 16}
!87 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !84, i64 0}
!88 = distinct !{!88, !50}
!89 = !{!80, !84, i64 152}
!90 = !{!81, !16, i64 128}
!91 = distinct !{!91, !50}
!92 = !{!93, !11, i64 152}
!93 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !81, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!94 = !{!93, !11, i64 136}
!95 = !{!93, !11, i64 144}
!96 = distinct !{!96, !50}
!97 = distinct !{!97, !50}
!98 = distinct !{!98, !50}
!99 = !{!100, !11, i64 8}
!100 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!101 = !{!100, !11, i64 16}
!102 = !{!103, !11, i64 8}
!103 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!104 = !{!103, !11, i64 16}
!105 = !{!80, !84, i64 136}
!106 = !{!107, !16, i64 0}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !84, i64 8}
!108 = !{!107, !84, i64 8}
!109 = !{!86, !11, i64 8}
!110 = !{!84, !84, i64 0}
!111 = !{!112, !11, i64 0}
!112 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!113 = distinct !{!113, !50}
!114 = !{!112, !11, i64 8}
!115 = !{!116, !11, i64 0}
!116 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !19, i64 16}
!117 = !{!116, !11, i64 8}
!118 = !{!116, !19, i64 16}
!119 = !{!22, !23, i64 40}
!120 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15}
!121 = distinct !{!121, !50}
!122 = distinct !{!122, !50}
!123 = distinct !{!123, !50}
!124 = !{!125, !11, i64 8}
!125 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!126 = !{!125, !11, i64 16}
!127 = !{!128, !11, i64 0}
!128 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!129 = distinct !{!129, !50}
!130 = !{!131, !134, i64 34}
!131 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !132, i64 32, !135, i64 36, !23, i64 40, !23, i64 44, !23, i64 48}
!132 = !{!"_ZTS13halide_type_t", !133, i64 0, !12, i64 1, !134, i64 2}
!133 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!134 = !{!"short", !12, i64 0}
!135 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!136 = !{!132, !12, i64 1}
!137 = !{!131, !23, i64 48}
!138 = !{!131, !11, i64 0}
!139 = !{!131, !11, i64 24}
!140 = !{!141, !23, i64 0}
!141 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !23, i64 0}
!142 = !{!143, !23, i64 4}
!143 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !141, i64 0, !23, i64 4, !23, i64 8, !12, i64 12}
!144 = !{!143, !23, i64 8}
!145 = distinct !{!145, !50}
!146 = !{!147, !23, i64 0}
!147 = !{!"_ZTS21halide_trace_packet_t", !23, i64 0, !23, i64 4, !132, i64 8, !135, i64 12, !23, i64 16, !23, i64 20, !23, i64 24}
!148 = !{!147, !23, i64 4}
!149 = !{!131, !11, i64 16}
!150 = !{!131, !11, i64 8}
!151 = !{!147, !23, i64 24}
!152 = !{!147, !134, i64 10}
!153 = distinct !{!153, !50}
!154 = !{!131, !135, i64 36}
!155 = !{!131, !12, i64 33}
!156 = distinct !{!156, !50}
!157 = !{!131, !23, i64 44}
!158 = distinct !{!158, !50, !159}
!159 = !{!"llvm.loop.peeled.count", i32 1}
!160 = !{!131, !133, i64 32}
!161 = !{!134, !134, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"float", !12, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"double", !12, i64 0}
!166 = distinct !{!166, !50, !159}
!167 = distinct !{!167, !50}
!168 = !{!131, !23, i64 40}
!169 = distinct !{!169, !50}
!170 = distinct !{!170, !50}
!171 = distinct !{!171, !50}
!172 = !{!173, !11, i64 16}
!173 = !{!"_ZTS15halide_buffer_t", !84, i64 0, !11, i64 8, !11, i64 16, !84, i64 24, !132, i64 32, !23, i64 36, !11, i64 40, !11, i64 48}
!174 = !{!173, !84, i64 0}
!175 = !{!173, !23, i64 36}
!176 = !{!173, !11, i64 40}
!177 = !{i64 0, i64 4, !73, i64 4, i64 4, !73, i64 8, i64 4, !73, i64 12, i64 4, !73}
!178 = !{!179, !23, i64 4}
!179 = !{!"_ZTS18halide_dimension_t", !23, i64 0, !23, i64 4, !23, i64 8, !23, i64 12}
!180 = distinct !{!180, !50}
!181 = !{!179, !23, i64 0}
!182 = !{!179, !23, i64 8}
!183 = distinct !{!183, !50, !184}
!184 = !{!"llvm.loop.isvectorized", i32 1}
!185 = distinct !{!185, !186}
!186 = !{!"llvm.loop.unroll.disable"}
!187 = distinct !{!187, !50, !188, !184}
!188 = !{!"llvm.loop.unroll.runtime.disable"}
!189 = !{!190, !134, i64 0}
!190 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !134, i64 0, !134, i64 2, !23, i64 4, !134, i64 8, !12, i64 10, !23, i64 190, !12, i64 194, !12, i64 202}
!191 = !{!190, !134, i64 2}
!192 = !{!190, !23, i64 4}
!193 = !{!190, !134, i64 8}
!194 = !{!195, !134, i64 0}
!195 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !134, i64 0, !134, i64 2, !23, i64 4, !12, i64 8}
!196 = !{!195, !134, i64 2}
!197 = !{!195, !23, i64 4}
!198 = distinct !{!198, !50}
!199 = distinct !{!199, !50}
!200 = distinct !{!200, !50}
!201 = distinct !{!201, !50}
!202 = distinct !{!202, !50}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !50, !184}
!209 = distinct !{!209, !186}
!210 = distinct !{!210, !186}
!211 = distinct !{!211, !50, !184}
!212 = distinct !{!212, !186}
!213 = distinct !{!213, !50, !184}
!214 = distinct !{!214, !50, !184}
!215 = distinct !{!215, !50, !188, !184}
!216 = distinct !{!216, !50, !184}
!217 = distinct !{!217, !50, !188, !184}
!218 = distinct !{!218, !50, !184}
!219 = distinct !{!219, !50, !188, !184}
!220 = distinct !{!220, !50}
!221 = distinct !{!221, !50, !184}
!222 = distinct !{!222, !50, !188, !184}
!223 = distinct !{!223, !50}
!224 = distinct !{!224, !50}
!225 = distinct !{!225, !50}
!226 = distinct !{!226, !50}
!227 = !{!228, !11, i64 0}
!228 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !19, i64 32, !11, i64 40, !23, i64 48, !23, i64 52, !23, i64 56, !23, i64 60, !11, i64 64, !11, i64 72, !84, i64 80, !16, i64 88}
!229 = distinct !{!229, !50}
!230 = !{!228, !23, i64 56}
!231 = !{!228, !11, i64 24}
!232 = !{!228, !11, i64 72}
!233 = distinct !{!233, !50}
!234 = distinct !{!234, !50}
!235 = !{!236, !84, i64 0}
!236 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !84, i64 0, !84, i64 8, !84, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !84, i64 408}
!237 = !{!236, !84, i64 8}
!238 = !{!236, !84, i64 408}
!239 = distinct !{!239, !50}
!240 = !{!236, !84, i64 16}
!241 = distinct !{!241, !50, !184}
!242 = distinct !{!242, !50, !188, !184}
!243 = distinct !{!243, !50}
!244 = distinct !{!244, !186}
!245 = distinct !{!245, !50}
!246 = distinct !{!246, !50}
!247 = distinct !{!247, !50}
!248 = !{i64 0, i64 8, !110, i64 8, i64 8, !110, i64 16, i64 8, !110, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !110}
!249 = distinct !{!249, !50}
!250 = !{!179, !23, i64 12}
!251 = !{!228, !11, i64 16}
!252 = !{!228, !19, i64 32}
!253 = !{!228, !23, i64 48}
!254 = !{!228, !23, i64 52}
!255 = !{!228, !23, i64 60}
!256 = !{!228, !11, i64 64}
!257 = !{!228, !11, i64 40}
!258 = distinct !{!258, !50}
!259 = distinct !{!259, !50}
!260 = distinct !{!260, !50}
!261 = !{!228, !16, i64 88}
!262 = !{!228, !84, i64 80}
!263 = !{i64 0, i64 8, !110, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !110, i64 32, i64 1, !264, i64 33, i64 1, !14, i64 34, i64 2, !161, i64 36, i64 4, !73, i64 40, i64 8, !10, i64 48, i64 8, !10}
!264 = !{!133, !133, i64 0}
!265 = distinct !{!265, !50}
!266 = distinct !{!266, !186}
!267 = distinct !{!267, !50}
!268 = !{!228, !11, i64 8}
!269 = distinct !{!269, !50}
!270 = distinct !{!270, !50, !184}
!271 = distinct !{!271, !50, !188, !184}
!272 = distinct !{!272, !50, !184}
!273 = distinct !{!273, !50, !188, !184}
!274 = distinct !{!274, !50}
!275 = distinct !{!275, !50}
!276 = distinct !{!276, !50}
!277 = distinct !{!277, !50}
!278 = distinct !{!278, !50}
!279 = distinct !{!279, !50, !184}
!280 = distinct !{!280, !50, !188, !184}
!281 = distinct !{!281, !50, !184}
!282 = distinct !{!282, !50, !188, !184}
!283 = distinct !{!283, !50}
!284 = !{!285, !23, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !23, i64 8}
!286 = !{!285, !11, i64 0}
!287 = distinct !{!287, !50}
!288 = distinct !{!288, !186}
!289 = distinct !{!289, !50}
!290 = distinct !{!290, !50}
!291 = distinct !{!291, !50}
!292 = distinct !{!292, !50, !184}
!293 = distinct !{!293, !50, !188, !184}
!294 = distinct !{!294, !50, !184}
!295 = distinct !{!295, !50, !188, !184}
!296 = distinct !{!296, !50}
!297 = distinct !{!297, !50}
!298 = distinct !{!298, !50}
!299 = distinct !{!299, !50}
!300 = distinct !{!300, !50}
!301 = distinct !{!301, !50}
!302 = distinct !{!302, !50}
!303 = distinct !{!303, !50}
!304 = distinct !{!304, !50}
!305 = !{!132, !133, i64 0}
!306 = !{!132, !134, i64 2}
!307 = !{!173, !11, i64 8}
!308 = !{!173, !84, i64 24}
!309 = distinct !{!309, !50}
!310 = !{!311, !11, i64 0}
!311 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!312 = distinct !{!312, !50}
!313 = !{!311, !11, i64 8}
!314 = !{!315, !11, i64 120}
!315 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!316 = !{!317, !11, i64 48}
!317 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!318 = !{!317, !11, i64 40}
!319 = !{!317, !11, i64 56}
!320 = !{!317, !11, i64 0}
!321 = !{!317, !11, i64 16}
!322 = !{!317, !11, i64 8}
!323 = !{!317, !11, i64 32}
!324 = !{!317, !11, i64 24}
!325 = !{!317, !11, i64 64}
!326 = !{!317, !11, i64 72}
!327 = distinct !{!327, !50, !184}
!328 = distinct !{!328, !50, !188, !184}
!329 = distinct !{!329, !50, !184}
!330 = distinct !{!330, !50, !188, !184}
!331 = !{!317, !11, i64 112}
!332 = !{!317, !11, i64 120}
!333 = !{!317, !11, i64 80}
!334 = !{!317, !11, i64 88}
!335 = !{!317, !11, i64 96}
!336 = !{!317, !11, i64 104}
!337 = !{i32 22, i32 33}
!338 = !{!339, !11, i64 40}
!339 = !{!"_ZTS21halide_profiler_state", !47, i64 0, !23, i64 8, !23, i64 12, !23, i64 16, !23, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!340 = !{!339, !23, i64 16}
!341 = !{!342, !84, i64 0}
!342 = !{!"_ZTS30halide_profiler_pipeline_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !23, i64 72, !23, i64 76, !23, i64 80, !23, i64 84, !23, i64 88}
!343 = !{!342, !23, i64 80}
!344 = !{!342, !84, i64 32}
!345 = !{!342, !84, i64 40}
!346 = !{!342, !11, i64 48}
!347 = !{!342, !23, i64 84}
!348 = !{!342, !23, i64 88}
!349 = !{!342, !84, i64 16}
!350 = !{!342, !84, i64 24}
!351 = !{!342, !23, i64 72}
!352 = !{!342, !11, i64 56}
!353 = distinct !{!353, !50}
!354 = !{!355, !84, i64 32}
!355 = !{!"_ZTS26halide_profiler_func_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !84, i64 48, !11, i64 56, !23, i64 64}
!356 = !{!355, !84, i64 0}
!357 = !{!355, !11, i64 56}
!358 = distinct !{!358, !50}
!359 = distinct !{!359, !50}
!360 = distinct !{!360, !50}
!361 = !{!355, !84, i64 40}
!362 = !{!355, !84, i64 48}
!363 = distinct !{!363, !50}
!364 = !{!355, !84, i64 16}
!365 = distinct !{!365, !50}
!366 = !{!355, !23, i64 64}
!367 = distinct !{!367, !50}
!368 = !{!355, !84, i64 24}
!369 = distinct !{!369, !50}
!370 = distinct !{!370, !50}
!371 = !{!339, !11, i64 24}
!372 = !{!342, !11, i64 64}
!373 = distinct !{!373, !50}
!374 = !{!339, !23, i64 12}
!375 = distinct !{!375, !50}
!376 = !{!342, !23, i64 76}
!377 = distinct !{!377, !50}
!378 = distinct !{!378, !50}
!379 = !{!339, !11, i64 32}
!380 = !{!339, !23, i64 20}
!381 = !{!339, !23, i64 8}
!382 = distinct !{!382, !50}
!383 = distinct !{!383, !50}
!384 = distinct !{!384, !50}
!385 = distinct !{!385, !50}
!386 = !{!"branch_weights", i32 1073741824, i32 0}
!387 = !{!388, !19, i64 8}
!388 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !19, i64 8, !19, i64 16}
!389 = !{!388, !11, i64 0}
!390 = !{!"branch_weights", i32 1, i32 2000}
!391 = !{!388, !19, i64 16}
!392 = !{!"branch_weights", i32 0, i32 1073741824}
!393 = !{!394, !394, i64 0}
!394 = !{!"input", !395, i64 0}
!395 = !{!"Halide buffer"}
!396 = !{!397, !397, i64 0}
!397 = !{!"read_input", !395, i64 0}
!398 = distinct !{!398, !186}
!399 = !{!400, !400, i64 0}
!400 = !{!"blur_x", !395, i64 0}
!401 = !{!402, !402, i64 0}
!402 = !{!"blur_y", !395, i64 0}
!403 = distinct !{!403, !186}
